
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d378  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001714  0800d618  0800d618  0001d618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ed2c  0800ed2c  00020148  2**0
                  CONTENTS
  4 .ARM          00000008  0800ed2c  0800ed2c  0001ed2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ed34  0800ed34  00020148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ed34  0800ed34  0001ed34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ed38  0800ed38  0001ed38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  0800ed3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0800edc4  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  0800ee24  000200e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d78  24000148  0800ee84  00020148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec0  0800ee84  00020ec0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020148  2**0
                  CONTENTS, READONLY
 14 .debug_info   00025ca3  00000000  00000000  00020176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00045e19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a50  00000000  00000000  00049a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001988  00000000  00000000  0004b468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0004cdf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000228b2  00000000  00000000  0008a823  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001936ce  00000000  00000000  000ad0d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002407a3  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007594  00000000  00000000  002407f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800d600 	.word	0x0800d600

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800d600 	.word	0x0800d600

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b088      	sub	sp, #32
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	69fb      	ldr	r3, [r7, #28]
 800077c:	3318      	adds	r3, #24
 800077e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	78db      	ldrb	r3, [r3, #3]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d12e      	bne.n	80007ee <Player_Reading_Card+0x9a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f8b2 	bl	80008fa <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000796:	6979      	ldr	r1, [r7, #20]
 8000798:	69b8      	ldr	r0, [r7, #24]
 800079a:	f7ff ff73 	bl	8000684 <YUGIOH_card_copy>

		// Mod standPosition in case off 2 player
		ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800079e:	697b      	ldr	r3, [r7, #20]
 80007a0:	799a      	ldrb	r2, [r3, #6]
 80007a2:	4b15      	ldr	r3, [pc, #84]	; (80007f8 <Player_Reading_Card+0xa4>)
 80007a4:	fba3 1302 	umull	r1, r3, r3, r2
 80007a8:	0899      	lsrs	r1, r3, #2
 80007aa:	460b      	mov	r3, r1
 80007ac:	005b      	lsls	r3, r3, #1
 80007ae:	440b      	add	r3, r1
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	1ad3      	subs	r3, r2, r3
 80007b4:	b2da      	uxtb	r2, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	719a      	strb	r2, [r3, #6]
		// Card Reading So it can't attack
		ptrYugiohCard_dst->actionPoint_Atk = 0;
 80007ba:	697b      	ldr	r3, [r7, #20]
 80007bc:	2200      	movs	r2, #0
 80007be:	721a      	strb	r2, [r3, #8]
		// Card Reading Then it can use it Effect
		if(ptrYugiohCard_dst->cardType == 3){
 80007c0:	697b      	ldr	r3, [r7, #20]
 80007c2:	785b      	ldrb	r3, [r3, #1]
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d103      	bne.n	80007d0 <Player_Reading_Card+0x7c>
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	2200      	movs	r2, #0
 80007cc:	725a      	strb	r2, [r3, #9]
 80007ce:	e002      	b.n	80007d6 <Player_Reading_Card+0x82>
		}
		else{
			ptrYugiohCard_dst->actionPoint_Eff = 1;
 80007d0:	697b      	ldr	r3, [r7, #20]
 80007d2:	2201      	movs	r2, #1
 80007d4:	725a      	strb	r2, [r3, #9]
		}
		RFID_Clear_Card_Bufffer(ptrRFID);
 80007d6:	69f8      	ldr	r0, [r7, #28]
 80007d8:	f7ff ffa0 	bl	800071c <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80007dc:	69fb      	ldr	r3, [r7, #28]
 80007de:	2200      	movs	r2, #0
 80007e0:	70da      	strb	r2, [r3, #3]
		state_game->action += 1;
 80007e2:	68bb      	ldr	r3, [r7, #8]
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	3301      	adds	r3, #1
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	68bb      	ldr	r3, [r7, #8]
 80007ec:	701a      	strb	r2, [r3, #0]
	}
}
 80007ee:	bf00      	nop
 80007f0:	3720      	adds	r7, #32
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	aaaaaaab 	.word	0xaaaaaaab

080007fc <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000804:	f107 0308 	add.w	r3, r7, #8
 8000808:	2200      	movs	r2, #0
 800080a:	601a      	str	r2, [r3, #0]
 800080c:	605a      	str	r2, [r3, #4]
 800080e:	609a      	str	r2, [r3, #8]
 8000810:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000818:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800081a:	2300      	movs	r3, #0
 800081c:	76fb      	strb	r3, [r7, #27]
 800081e:	e00b      	b.n	8000838 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	69f9      	ldr	r1, [r7, #28]
 8000826:	4618      	mov	r0, r3
 8000828:	f7ff ff2c 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800082c:	69fb      	ldr	r3, [r7, #28]
 800082e:	3310      	adds	r3, #16
 8000830:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000832:	7efb      	ldrb	r3, [r7, #27]
 8000834:	3301      	adds	r3, #1
 8000836:	76fb      	strb	r3, [r7, #27]
 8000838:	7efb      	ldrb	r3, [r7, #27]
 800083a:	2b05      	cmp	r3, #5
 800083c:	d9f0      	bls.n	8000820 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}

08000848 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000848:	b580      	push	{r7, lr}
 800084a:	b088      	sub	sp, #32
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000850:	f107 0308 	add.w	r3, r7, #8
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000864:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000866:	2300      	movs	r3, #0
 8000868:	76fb      	strb	r3, [r7, #27]
 800086a:	e00b      	b.n	8000884 <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800086c:	f107 0308 	add.w	r3, r7, #8
 8000870:	69f9      	ldr	r1, [r7, #28]
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff ff06 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	3310      	adds	r3, #16
 800087c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800087e:	7efb      	ldrb	r3, [r7, #27]
 8000880:	3301      	adds	r3, #1
 8000882:	76fb      	strb	r3, [r7, #27]
 8000884:	7efb      	ldrb	r3, [r7, #27]
 8000886:	2b05      	cmp	r3, #5
 8000888:	d9f0      	bls.n	800086c <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	3368      	adds	r3, #104	; 0x68
 800088e:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8000890:	2300      	movs	r3, #0
 8000892:	76bb      	strb	r3, [r7, #26]
 8000894:	e00b      	b.n	80008ae <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000896:	f107 0308 	add.w	r3, r7, #8
 800089a:	69f9      	ldr	r1, [r7, #28]
 800089c:	4618      	mov	r0, r3
 800089e:	f7ff fef1 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008a2:	69fb      	ldr	r3, [r7, #28]
 80008a4:	3310      	adds	r3, #16
 80008a6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80008a8:	7ebb      	ldrb	r3, [r7, #26]
 80008aa:	3301      	adds	r3, #1
 80008ac:	76bb      	strb	r3, [r7, #26]
 80008ae:	7ebb      	ldrb	r3, [r7, #26]
 80008b0:	2b13      	cmp	r3, #19
 80008b2:	d9f0      	bls.n	8000896 <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3308      	adds	r3, #8
 80008b8:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008ba:	2300      	movs	r3, #0
 80008bc:	767b      	strb	r3, [r7, #25]
 80008be:	e00b      	b.n	80008d8 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008c0:	f107 0308 	add.w	r3, r7, #8
 80008c4:	69f9      	ldr	r1, [r7, #28]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff fedc 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	3310      	adds	r3, #16
 80008d0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80008d2:	7e7b      	ldrb	r3, [r7, #25]
 80008d4:	3301      	adds	r3, #1
 80008d6:	767b      	strb	r3, [r7, #25]
 80008d8:	7e7b      	ldrb	r3, [r7, #25]
 80008da:	2b05      	cmp	r3, #5
 80008dc:	d9f0      	bls.n	80008c0 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80008e4:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80008e6:	f107 0308 	add.w	r3, r7, #8
 80008ea:	69f9      	ldr	r1, [r7, #28]
 80008ec:	4618      	mov	r0, r3
 80008ee:	f7ff fec9 	bl	8000684 <YUGIOH_card_copy>
}
 80008f2:	bf00      	nop
 80008f4:	3720      	adds	r7, #32
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}

080008fa <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b086      	sub	sp, #24
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000908:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8000910:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000918:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8000920:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000922:	2306      	movs	r3, #6
 8000924:	60fb      	str	r3, [r7, #12]
 8000926:	e00c      	b.n	8000942 <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000928:	6939      	ldr	r1, [r7, #16]
 800092a:	6978      	ldr	r0, [r7, #20]
 800092c:	f7ff feaa 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000930:	697b      	ldr	r3, [r7, #20]
 8000932:	3b10      	subs	r3, #16
 8000934:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3b10      	subs	r3, #16
 800093a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	3b01      	subs	r3, #1
 8000940:	60fb      	str	r3, [r7, #12]
 8000942:	68fb      	ldr	r3, [r7, #12]
 8000944:	2b00      	cmp	r3, #0
 8000946:	dcef      	bgt.n	8000928 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000948:	bf00      	nop
 800094a:	bf00      	nop
 800094c:	3718      	adds	r7, #24
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}

08000952 <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 8000952:	b580      	push	{r7, lr}
 8000954:	b086      	sub	sp, #24
 8000956:	af00      	add	r7, sp, #0
 8000958:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000960:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8000968:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8000970:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8000978:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800097a:	2306      	movs	r3, #6
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e02c      	b.n	80009da <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000980:	6939      	ldr	r1, [r7, #16]
 8000982:	6978      	ldr	r0, [r7, #20]
 8000984:	f7ff fe7e 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	3b02      	subs	r3, #2
 800098c:	68fa      	ldr	r2, [r7, #12]
 800098e:	1e50      	subs	r0, r2, #1
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	4413      	add	r3, r2
 800099a:	685a      	ldr	r2, [r3, #4]
 800099c:	6879      	ldr	r1, [r7, #4]
 800099e:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	440b      	add	r3, r1
 80009a6:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	3b02      	subs	r3, #2
 80009ac:	68fa      	ldr	r2, [r7, #12]
 80009ae:	1e50      	subs	r0, r2, #1
 80009b0:	687a      	ldr	r2, [r7, #4]
 80009b2:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80009b6:	009b      	lsls	r3, r3, #2
 80009b8:	4413      	add	r3, r2
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	6879      	ldr	r1, [r7, #4]
 80009be:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 80009c8:	697b      	ldr	r3, [r7, #20]
 80009ca:	3b10      	subs	r3, #16
 80009cc:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80009ce:	693b      	ldr	r3, [r7, #16]
 80009d0:	3b10      	subs	r3, #16
 80009d2:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	dccf      	bgt.n	8000980 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 80009e0:	bf00      	nop
 80009e2:	bf00      	nop
 80009e4:	3718      	adds	r7, #24
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}

080009ea <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80009ea:	b580      	push	{r7, lr}
 80009ec:	b08a      	sub	sp, #40	; 0x28
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	6078      	str	r0, [r7, #4]
 80009f2:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80009f4:	f107 030c 	add.w	r3, r7, #12
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	3368      	adds	r3, #104	; 0x68
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000a0e:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3368      	adds	r3, #104	; 0x68
 8000a14:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000a1c:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a1e:	2314      	movs	r3, #20
 8000a20:	61fb      	str	r3, [r7, #28]
 8000a22:	e00c      	b.n	8000a3e <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a24:	6a39      	ldr	r1, [r7, #32]
 8000a26:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a28:	f7ff fe2c 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	3b10      	subs	r3, #16
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	3b10      	subs	r3, #16
 8000a36:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8000a38:	69fb      	ldr	r3, [r7, #28]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	69fb      	ldr	r3, [r7, #28]
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	dcef      	bgt.n	8000a24 <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	3368      	adds	r3, #104	; 0x68
 8000a4c:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000a4e:	6a39      	ldr	r1, [r7, #32]
 8000a50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a52:	f7ff fe17 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8000a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000a5e:	6a38      	ldr	r0, [r7, #32]
 8000a60:	f7ff fe10 	bl	8000684 <YUGIOH_card_copy>

}
 8000a64:	bf00      	nop
 8000a66:	3728      	adds	r7, #40	; 0x28
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	; 0x30
 8000a70:	af04      	add	r7, sp, #16
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	3304      	adds	r3, #4
 8000a7a:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	3304      	adds	r3, #4
 8000a80:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	3304      	adds	r3, #4
 8000a86:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000a8e:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->displayNSS = 1;
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	2201      	movs	r2, #1
 8000a94:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	2200      	movs	r2, #0
 8000a9a:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8000a9c:	2108      	movs	r1, #8
 8000a9e:	48ad      	ldr	r0, [pc, #692]	; (8000d54 <GAME_PLAY_Management+0x2e8>)
 8000aa0:	f006 fc56 	bl	8007350 <HAL_GPIO_ReadPin>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	461a      	mov	r2, r3
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 8000aac:	2102      	movs	r1, #2
 8000aae:	48aa      	ldr	r0, [pc, #680]	; (8000d58 <GAME_PLAY_Management+0x2ec>)
 8000ab0:	f006 fc4e 	bl	8007350 <HAL_GPIO_ReadPin>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8000abc:	2104      	movs	r1, #4
 8000abe:	48a5      	ldr	r0, [pc, #660]	; (8000d54 <GAME_PLAY_Management+0x2e8>)
 8000ac0:	f006 fc46 	bl	8007350 <HAL_GPIO_ReadPin>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	69bb      	ldr	r3, [r7, #24]
 8000aca:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8000acc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ad0:	48a2      	ldr	r0, [pc, #648]	; (8000d5c <GAME_PLAY_Management+0x2f0>)
 8000ad2:	f006 fc3d 	bl	8007350 <HAL_GPIO_ReadPin>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	461a      	mov	r2, r3
 8000ada:	69bb      	ldr	r3, [r7, #24]
 8000adc:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8000ae4:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 8000ae6:	683b      	ldr	r3, [r7, #0]
 8000ae8:	3304      	adds	r3, #4
 8000aea:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	3304      	adds	r3, #4
 8000af0:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8000af2:	7dfb      	ldrb	r3, [r7, #23]
 8000af4:	2b04      	cmp	r3, #4
 8000af6:	f200 82a6 	bhi.w	8001046 <GAME_PLAY_Management+0x5da>
 8000afa:	a201      	add	r2, pc, #4	; (adr r2, 8000b00 <GAME_PLAY_Management+0x94>)
 8000afc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b00:	08000b15 	.word	0x08000b15
 8000b04:	08000d91 	.word	0x08000d91
 8000b08:	08000eef 	.word	0x08000eef
 8000b0c:	08000f61 	.word	0x08000f61
 8000b10:	08000fd3 	.word	0x08000fd3
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b14:	4b92      	ldr	r3, [pc, #584]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	9202      	str	r2, [sp, #8]
 8000b1a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b1e:	9201      	str	r2, [sp, #4]
 8000b20:	685a      	ldr	r2, [r3, #4]
 8000b22:	9200      	str	r2, [sp, #0]
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a8f      	ldr	r2, [pc, #572]	; (8000d64 <GAME_PLAY_Management+0x2f8>)
 8000b28:	2105      	movs	r1, #5
 8000b2a:	2005      	movs	r0, #5
 8000b2c:	f002 fc4d 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b30:	4b8b      	ldr	r3, [pc, #556]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	9202      	str	r2, [sp, #8]
 8000b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b3a:	9201      	str	r2, [sp, #4]
 8000b3c:	685a      	ldr	r2, [r3, #4]
 8000b3e:	9200      	str	r2, [sp, #0]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	4a89      	ldr	r2, [pc, #548]	; (8000d68 <GAME_PLAY_Management+0x2fc>)
 8000b44:	210f      	movs	r1, #15
 8000b46:	2000      	movs	r0, #0
 8000b48:	f002 fc3f 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b4c:	4b87      	ldr	r3, [pc, #540]	; (8000d6c <GAME_PLAY_Management+0x300>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	9202      	str	r2, [sp, #8]
 8000b52:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b56:	9201      	str	r2, [sp, #4]
 8000b58:	685a      	ldr	r2, [r3, #4]
 8000b5a:	9200      	str	r2, [sp, #0]
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a84      	ldr	r2, [pc, #528]	; (8000d70 <GAME_PLAY_Management+0x304>)
 8000b60:	2123      	movs	r1, #35	; 0x23
 8000b62:	2008      	movs	r0, #8
 8000b64:	f002 fc31 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b68:	4b80      	ldr	r3, [pc, #512]	; (8000d6c <GAME_PLAY_Management+0x300>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	9202      	str	r2, [sp, #8]
 8000b6e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b72:	9201      	str	r2, [sp, #4]
 8000b74:	685a      	ldr	r2, [r3, #4]
 8000b76:	9200      	str	r2, [sp, #0]
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a7e      	ldr	r2, [pc, #504]	; (8000d74 <GAME_PLAY_Management+0x308>)
 8000b7c:	213c      	movs	r1, #60	; 0x3c
 8000b7e:	2019      	movs	r0, #25
 8000b80:	f002 fc23 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b84:	4b76      	ldr	r3, [pc, #472]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	9202      	str	r2, [sp, #8]
 8000b8a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b8e:	9201      	str	r2, [sp, #4]
 8000b90:	685a      	ldr	r2, [r3, #4]
 8000b92:	9200      	str	r2, [sp, #0]
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	4a74      	ldr	r2, [pc, #464]	; (8000d68 <GAME_PLAY_Management+0x2fc>)
 8000b98:	214b      	movs	r1, #75	; 0x4b
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f002 fc15 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ba0:	4b6f      	ldr	r3, [pc, #444]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	9202      	str	r2, [sp, #8]
 8000ba6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000baa:	9201      	str	r2, [sp, #4]
 8000bac:	685a      	ldr	r2, [r3, #4]
 8000bae:	9200      	str	r2, [sp, #0]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a71      	ldr	r2, [pc, #452]	; (8000d78 <GAME_PLAY_Management+0x30c>)
 8000bb4:	215a      	movs	r1, #90	; 0x5a
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f002 fc07 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000bbc:	4b68      	ldr	r3, [pc, #416]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	9202      	str	r2, [sp, #8]
 8000bc2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bc6:	9201      	str	r2, [sp, #4]
 8000bc8:	685a      	ldr	r2, [r3, #4]
 8000bca:	9200      	str	r2, [sp, #0]
 8000bcc:	681b      	ldr	r3, [r3, #0]
 8000bce:	4a6b      	ldr	r2, [pc, #428]	; (8000d7c <GAME_PLAY_Management+0x310>)
 8000bd0:	215a      	movs	r1, #90	; 0x5a
 8000bd2:	205d      	movs	r0, #93	; 0x5d
 8000bd4:	f002 fbf9 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bd8:	4b61      	ldr	r3, [pc, #388]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	9202      	str	r2, [sp, #8]
 8000bde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000be2:	9201      	str	r2, [sp, #4]
 8000be4:	685a      	ldr	r2, [r3, #4]
 8000be6:	9200      	str	r2, [sp, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a65      	ldr	r2, [pc, #404]	; (8000d80 <GAME_PLAY_Management+0x314>)
 8000bec:	2169      	movs	r1, #105	; 0x69
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f002 fbeb 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000bf4:	4b5a      	ldr	r3, [pc, #360]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	9202      	str	r2, [sp, #8]
 8000bfa:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000bfe:	9201      	str	r2, [sp, #4]
 8000c00:	685a      	ldr	r2, [r3, #4]
 8000c02:	9200      	str	r2, [sp, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a5f      	ldr	r2, [pc, #380]	; (8000d84 <GAME_PLAY_Management+0x318>)
 8000c08:	2169      	movs	r1, #105	; 0x69
 8000c0a:	2064      	movs	r0, #100	; 0x64
 8000c0c:	f002 fbdd 	bl	80033ca <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c10:	4b53      	ldr	r3, [pc, #332]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	9202      	str	r2, [sp, #8]
 8000c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c1a:	9201      	str	r2, [sp, #4]
 8000c1c:	685a      	ldr	r2, [r3, #4]
 8000c1e:	9200      	str	r2, [sp, #0]
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a59      	ldr	r2, [pc, #356]	; (8000d88 <GAME_PLAY_Management+0x31c>)
 8000c24:	2105      	movs	r1, #5
 8000c26:	2005      	movs	r0, #5
 8000c28:	f002 fc19 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c2c:	4b4c      	ldr	r3, [pc, #304]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	9202      	str	r2, [sp, #8]
 8000c32:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c36:	9201      	str	r2, [sp, #4]
 8000c38:	685a      	ldr	r2, [r3, #4]
 8000c3a:	9200      	str	r2, [sp, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	4a4a      	ldr	r2, [pc, #296]	; (8000d68 <GAME_PLAY_Management+0x2fc>)
 8000c40:	210f      	movs	r1, #15
 8000c42:	2000      	movs	r0, #0
 8000c44:	f002 fc0b 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000c48:	4b48      	ldr	r3, [pc, #288]	; (8000d6c <GAME_PLAY_Management+0x300>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	9202      	str	r2, [sp, #8]
 8000c4e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000c52:	9201      	str	r2, [sp, #4]
 8000c54:	685a      	ldr	r2, [r3, #4]
 8000c56:	9200      	str	r2, [sp, #0]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a45      	ldr	r2, [pc, #276]	; (8000d70 <GAME_PLAY_Management+0x304>)
 8000c5c:	2123      	movs	r1, #35	; 0x23
 8000c5e:	2008      	movs	r0, #8
 8000c60:	f002 fbfd 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c64:	4b41      	ldr	r3, [pc, #260]	; (8000d6c <GAME_PLAY_Management+0x300>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	9202      	str	r2, [sp, #8]
 8000c6a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c6e:	9201      	str	r2, [sp, #4]
 8000c70:	685a      	ldr	r2, [r3, #4]
 8000c72:	9200      	str	r2, [sp, #0]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a3f      	ldr	r2, [pc, #252]	; (8000d74 <GAME_PLAY_Management+0x308>)
 8000c78:	213c      	movs	r1, #60	; 0x3c
 8000c7a:	2014      	movs	r0, #20
 8000c7c:	f002 fbef 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c80:	4b37      	ldr	r3, [pc, #220]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	9202      	str	r2, [sp, #8]
 8000c86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c8a:	9201      	str	r2, [sp, #4]
 8000c8c:	685a      	ldr	r2, [r3, #4]
 8000c8e:	9200      	str	r2, [sp, #0]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a35      	ldr	r2, [pc, #212]	; (8000d68 <GAME_PLAY_Management+0x2fc>)
 8000c94:	214b      	movs	r1, #75	; 0x4b
 8000c96:	2000      	movs	r0, #0
 8000c98:	f002 fbe1 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	9202      	str	r2, [sp, #8]
 8000ca2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ca6:	9201      	str	r2, [sp, #4]
 8000ca8:	685a      	ldr	r2, [r3, #4]
 8000caa:	9200      	str	r2, [sp, #0]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a32      	ldr	r2, [pc, #200]	; (8000d78 <GAME_PLAY_Management+0x30c>)
 8000cb0:	215a      	movs	r1, #90	; 0x5a
 8000cb2:	2000      	movs	r0, #0
 8000cb4:	f002 fbd3 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000cb8:	4b29      	ldr	r3, [pc, #164]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	9202      	str	r2, [sp, #8]
 8000cbe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cc2:	9201      	str	r2, [sp, #4]
 8000cc4:	685a      	ldr	r2, [r3, #4]
 8000cc6:	9200      	str	r2, [sp, #0]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a2c      	ldr	r2, [pc, #176]	; (8000d7c <GAME_PLAY_Management+0x310>)
 8000ccc:	215a      	movs	r1, #90	; 0x5a
 8000cce:	205d      	movs	r0, #93	; 0x5d
 8000cd0:	f002 fbc5 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000cd4:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	9202      	str	r2, [sp, #8]
 8000cda:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cde:	9201      	str	r2, [sp, #4]
 8000ce0:	685a      	ldr	r2, [r3, #4]
 8000ce2:	9200      	str	r2, [sp, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4a26      	ldr	r2, [pc, #152]	; (8000d80 <GAME_PLAY_Management+0x314>)
 8000ce8:	2169      	movs	r1, #105	; 0x69
 8000cea:	2000      	movs	r0, #0
 8000cec:	f002 fbb7 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	; (8000d60 <GAME_PLAY_Management+0x2f4>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	9202      	str	r2, [sp, #8]
 8000cf6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000cfa:	9201      	str	r2, [sp, #4]
 8000cfc:	685a      	ldr	r2, [r3, #4]
 8000cfe:	9200      	str	r2, [sp, #0]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	4a20      	ldr	r2, [pc, #128]	; (8000d84 <GAME_PLAY_Management+0x318>)
 8000d04:	2169      	movs	r1, #105	; 0x69
 8000d06:	2064      	movs	r0, #100	; 0x64
 8000d08:	f002 fba9 	bl	800345e <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000d0c:	2108      	movs	r1, #8
 8000d0e:	481f      	ldr	r0, [pc, #124]	; (8000d8c <GAME_PLAY_Management+0x320>)
 8000d10:	f006 fb1e 	bl	8007350 <HAL_GPIO_ReadPin>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d10a      	bne.n	8000d30 <GAME_PLAY_Management+0x2c4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8000d1a:	2000      	movs	r0, #0
 8000d1c:	f002 fdbc 	bl	8003898 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f002 fdca 	bl	80038ba <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	2201      	movs	r2, #1
 8000d2a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8000d2e:	e18a      	b.n	8001046 <GAME_PLAY_Management+0x5da>
			state_game->PlyerAction_State = PS_AFK;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	2200      	movs	r2, #0
 8000d34:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8000d50:	e179      	b.n	8001046 <GAME_PLAY_Management+0x5da>
 8000d52:	bf00      	nop
 8000d54:	58020800 	.word	0x58020800
 8000d58:	58020400 	.word	0x58020400
 8000d5c:	58021400 	.word	0x58021400
 8000d60:	2400000c 	.word	0x2400000c
 8000d64:	0800d618 	.word	0x0800d618
 8000d68:	0800d624 	.word	0x0800d624
 8000d6c:	24000014 	.word	0x24000014
 8000d70:	0800d638 	.word	0x0800d638
 8000d74:	0800d644 	.word	0x0800d644
 8000d78:	0800d64c 	.word	0x0800d64c
 8000d7c:	0800d65c 	.word	0x0800d65c
 8000d80:	0800d664 	.word	0x0800d664
 8000d84:	0800d674 	.word	0x0800d674
 8000d88:	0800d678 	.word	0x0800d678
 8000d8c:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d90:	4baf      	ldr	r3, [pc, #700]	; (8001050 <GAME_PLAY_Management+0x5e4>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	9202      	str	r2, [sp, #8]
 8000d96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d9a:	9201      	str	r2, [sp, #4]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	9200      	str	r2, [sp, #0]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4aac      	ldr	r2, [pc, #688]	; (8001054 <GAME_PLAY_Management+0x5e8>)
 8000da4:	2105      	movs	r1, #5
 8000da6:	2005      	movs	r0, #5
 8000da8:	f002 fb0f 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000dac:	4ba8      	ldr	r3, [pc, #672]	; (8001050 <GAME_PLAY_Management+0x5e4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	9202      	str	r2, [sp, #8]
 8000db2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000db6:	9201      	str	r2, [sp, #4]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	9200      	str	r2, [sp, #0]
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	4aa6      	ldr	r2, [pc, #664]	; (8001058 <GAME_PLAY_Management+0x5ec>)
 8000dc0:	210f      	movs	r1, #15
 8000dc2:	2000      	movs	r0, #0
 8000dc4:	f002 fb01 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000dc8:	4ba4      	ldr	r3, [pc, #656]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	9202      	str	r2, [sp, #8]
 8000dce:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000dd2:	9201      	str	r2, [sp, #4]
 8000dd4:	685a      	ldr	r2, [r3, #4]
 8000dd6:	9200      	str	r2, [sp, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4aa1      	ldr	r2, [pc, #644]	; (8001060 <GAME_PLAY_Management+0x5f4>)
 8000ddc:	2123      	movs	r1, #35	; 0x23
 8000dde:	2019      	movs	r0, #25
 8000de0:	f002 faf3 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000de4:	4b9d      	ldr	r3, [pc, #628]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	9202      	str	r2, [sp, #8]
 8000dea:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dee:	9201      	str	r2, [sp, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	9200      	str	r2, [sp, #0]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a9b      	ldr	r2, [pc, #620]	; (8001064 <GAME_PLAY_Management+0x5f8>)
 8000df8:	213c      	movs	r1, #60	; 0x3c
 8000dfa:	2021      	movs	r0, #33	; 0x21
 8000dfc:	f002 fae5 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e00:	4b93      	ldr	r3, [pc, #588]	; (8001050 <GAME_PLAY_Management+0x5e4>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	9202      	str	r2, [sp, #8]
 8000e06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e0a:	9201      	str	r2, [sp, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	9200      	str	r2, [sp, #0]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	4a91      	ldr	r2, [pc, #580]	; (8001058 <GAME_PLAY_Management+0x5ec>)
 8000e14:	214b      	movs	r1, #75	; 0x4b
 8000e16:	2000      	movs	r0, #0
 8000e18:	f002 fad7 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e1c:	4b8c      	ldr	r3, [pc, #560]	; (8001050 <GAME_PLAY_Management+0x5e4>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	9202      	str	r2, [sp, #8]
 8000e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e26:	9201      	str	r2, [sp, #4]
 8000e28:	685a      	ldr	r2, [r3, #4]
 8000e2a:	9200      	str	r2, [sp, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4a8e      	ldr	r2, [pc, #568]	; (8001068 <GAME_PLAY_Management+0x5fc>)
 8000e30:	2105      	movs	r1, #5
 8000e32:	2005      	movs	r0, #5
 8000e34:	f002 fb13 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e38:	4b85      	ldr	r3, [pc, #532]	; (8001050 <GAME_PLAY_Management+0x5e4>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	9202      	str	r2, [sp, #8]
 8000e3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e42:	9201      	str	r2, [sp, #4]
 8000e44:	685a      	ldr	r2, [r3, #4]
 8000e46:	9200      	str	r2, [sp, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a83      	ldr	r2, [pc, #524]	; (8001058 <GAME_PLAY_Management+0x5ec>)
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	2000      	movs	r0, #0
 8000e50:	f002 fb05 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000e54:	4b81      	ldr	r3, [pc, #516]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	9202      	str	r2, [sp, #8]
 8000e5a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000e5e:	9201      	str	r2, [sp, #4]
 8000e60:	685a      	ldr	r2, [r3, #4]
 8000e62:	9200      	str	r2, [sp, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	4a7e      	ldr	r2, [pc, #504]	; (8001060 <GAME_PLAY_Management+0x5f4>)
 8000e68:	2123      	movs	r1, #35	; 0x23
 8000e6a:	2019      	movs	r0, #25
 8000e6c:	f002 faf7 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000e70:	4b7a      	ldr	r3, [pc, #488]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	9202      	str	r2, [sp, #8]
 8000e76:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e7a:	9201      	str	r2, [sp, #4]
 8000e7c:	685a      	ldr	r2, [r3, #4]
 8000e7e:	9200      	str	r2, [sp, #0]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	4a7a      	ldr	r2, [pc, #488]	; (800106c <GAME_PLAY_Management+0x600>)
 8000e84:	213c      	movs	r1, #60	; 0x3c
 8000e86:	2025      	movs	r0, #37	; 0x25
 8000e88:	f002 fae9 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e8c:	4b70      	ldr	r3, [pc, #448]	; (8001050 <GAME_PLAY_Management+0x5e4>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	9202      	str	r2, [sp, #8]
 8000e92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e96:	9201      	str	r2, [sp, #4]
 8000e98:	685a      	ldr	r2, [r3, #4]
 8000e9a:	9200      	str	r2, [sp, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	4a6e      	ldr	r2, [pc, #440]	; (8001058 <GAME_PLAY_Management+0x5ec>)
 8000ea0:	214b      	movs	r1, #75	; 0x4b
 8000ea2:	2000      	movs	r0, #0
 8000ea4:	f002 fadb 	bl	800345e <ST7735_WriteString1>
		HAL_Delay(3000);
 8000ea8:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000eac:	f003 f902 	bl	80040b4 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 8000eb0:	2000      	movs	r0, #0
 8000eb2:	f002 fcf1 	bl	8003898 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	f002 fcff 	bl	80038ba <ST7735_FillScreen1>
		MainGUI();
 8000ebc:	f001 fad6 	bl	800246c <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8000ec0:	69fb      	ldr	r3, [r7, #28]
 8000ec2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ec6:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ece:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8000ed0:	69f8      	ldr	r0, [r7, #28]
 8000ed2:	f7ff fcb9 	bl	8000848 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 8000ed6:	69b8      	ldr	r0, [r7, #24]
 8000ed8:	f7ff fcb6 	bl	8000848 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	2202      	movs	r2, #2
 8000ee0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8000eec:	e0ab      	b.n	8001046 <GAME_PLAY_Management+0x5da>
	case first_player:
		if (state_game -> F_flag == 0){
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d125      	bne.n	8000f44 <GAME_PLAY_Management+0x4d8>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000ef8:	4b58      	ldr	r3, [pc, #352]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	9202      	str	r2, [sp, #8]
 8000efe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f02:	9201      	str	r2, [sp, #4]
 8000f04:	685a      	ldr	r2, [r3, #4]
 8000f06:	9200      	str	r2, [sp, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	4a59      	ldr	r2, [pc, #356]	; (8001070 <GAME_PLAY_Management+0x604>)
 8000f0c:	215a      	movs	r1, #90	; 0x5a
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f002 faa5 	bl	800345e <ST7735_WriteString1>
			HAL_Delay(2000);
 8000f14:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f18:	f003 f8cc 	bl	80040b4 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	2326      	movs	r3, #38	; 0x26
 8000f22:	2280      	movs	r2, #128	; 0x80
 8000f24:	215a      	movs	r1, #90	; 0x5a
 8000f26:	2000      	movs	r0, #0
 8000f28:	f002 fbb8 	bl	800369c <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8000f32:	3301      	adds	r3, #1
 8000f34:	b2da      	uxtb	r2, r3
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2200      	movs	r2, #0
 8000f40:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
		}
		ptrPlayerAtk = &state_game->player[0];
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	3304      	adds	r3, #4
 8000f48:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000f50:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	6839      	ldr	r1, [r7, #0]
 8000f58:	6878      	ldr	r0, [r7, #4]
 8000f5a:	f000 f88f 	bl	800107c <GAME_PLAY_Phase_Management>
		break;
 8000f5e:	e072      	b.n	8001046 <GAME_PLAY_Management+0x5da>
	case second_player:
		if (state_game -> S_flag == 0){
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d125      	bne.n	8000fb6 <GAME_PLAY_Management+0x54a>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000f6a:	4b3c      	ldr	r3, [pc, #240]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	9202      	str	r2, [sp, #8]
 8000f70:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	685a      	ldr	r2, [r3, #4]
 8000f78:	9200      	str	r2, [sp, #0]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a3c      	ldr	r2, [pc, #240]	; (8001070 <GAME_PLAY_Management+0x604>)
 8000f7e:	215a      	movs	r1, #90	; 0x5a
 8000f80:	200f      	movs	r0, #15
 8000f82:	f002 fa22 	bl	80033ca <ST7735_WriteString>
			HAL_Delay(2000);
 8000f86:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f8a:	f003 f893 	bl	80040b4 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000f8e:	2300      	movs	r3, #0
 8000f90:	9300      	str	r3, [sp, #0]
 8000f92:	2326      	movs	r3, #38	; 0x26
 8000f94:	2280      	movs	r2, #128	; 0x80
 8000f96:	215a      	movs	r1, #90	; 0x5a
 8000f98:	2000      	movs	r0, #0
 8000f9a:	f002 fb0b 	bl	80035b4 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	b2da      	uxtb	r2, r3
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
		}
		ptrPlayerAtk = &state_game->player[1];
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8000fbc:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	3304      	adds	r3, #4
 8000fc2:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	6839      	ldr	r1, [r7, #0]
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f000 f856 	bl	800107c <GAME_PLAY_Phase_Management>
		break;
 8000fd0:	e039      	b.n	8001046 <GAME_PLAY_Management+0x5da>
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	9301      	str	r3, [sp, #4]
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	9300      	str	r3, [sp, #0]
 8000fda:	2326      	movs	r3, #38	; 0x26
 8000fdc:	2280      	movs	r2, #128	; 0x80
 8000fde:	215a      	movs	r1, #90	; 0x5a
 8000fe0:	2000      	movs	r0, #0
 8000fe2:	f002 fbcf 	bl	8003784 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	9301      	str	r3, [sp, #4]
 8000fea:	2300      	movs	r3, #0
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	2326      	movs	r3, #38	; 0x26
 8000ff0:	2280      	movs	r2, #128	; 0x80
 8000ff2:	215a      	movs	r1, #90	; 0x5a
 8000ff4:	2000      	movs	r0, #0
 8000ff6:	f002 fbc5 	bl	8003784 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8000ffa:	20c8      	movs	r0, #200	; 0xc8
 8000ffc:	f003 f85a 	bl	80040b4 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 8001000:	4b16      	ldr	r3, [pc, #88]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8001002:	2201      	movs	r2, #1
 8001004:	9203      	str	r2, [sp, #12]
 8001006:	2200      	movs	r2, #0
 8001008:	9202      	str	r2, [sp, #8]
 800100a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800100e:	9201      	str	r2, [sp, #4]
 8001010:	685a      	ldr	r2, [r3, #4]
 8001012:	9200      	str	r2, [sp, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a17      	ldr	r2, [pc, #92]	; (8001074 <GAME_PLAY_Management+0x608>)
 8001018:	215a      	movs	r1, #90	; 0x5a
 800101a:	2014      	movs	r0, #20
 800101c:	f002 fa69 	bl	80034f2 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 8001020:	4b0e      	ldr	r3, [pc, #56]	; (800105c <GAME_PLAY_Management+0x5f0>)
 8001022:	2200      	movs	r2, #0
 8001024:	9203      	str	r2, [sp, #12]
 8001026:	2200      	movs	r2, #0
 8001028:	9202      	str	r2, [sp, #8]
 800102a:	221f      	movs	r2, #31
 800102c:	9201      	str	r2, [sp, #4]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a10      	ldr	r2, [pc, #64]	; (8001078 <GAME_PLAY_Management+0x60c>)
 8001036:	215a      	movs	r1, #90	; 0x5a
 8001038:	200f      	movs	r0, #15
 800103a:	f002 fa5a 	bl	80034f2 <ST7735_WriteStringNSS>
		HAL_Delay(200);
 800103e:	20c8      	movs	r0, #200	; 0xc8
 8001040:	f003 f838 	bl	80040b4 <HAL_Delay>
		break;
 8001044:	bf00      	nop
	}
}
 8001046:	bf00      	nop
 8001048:	3720      	adds	r7, #32
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2400000c 	.word	0x2400000c
 8001054:	0800d618 	.word	0x0800d618
 8001058:	0800d624 	.word	0x0800d624
 800105c:	24000014 	.word	0x24000014
 8001060:	0800d684 	.word	0x0800d684
 8001064:	0800d68c 	.word	0x0800d68c
 8001068:	0800d678 	.word	0x0800d678
 800106c:	0800d694 	.word	0x0800d694
 8001070:	0800d69c 	.word	0x0800d69c
 8001074:	0800d6a8 	.word	0x0800d6a8
 8001078:	0800d6b0 	.word	0x0800d6b0

0800107c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b092      	sub	sp, #72	; 0x48
 8001080:	af04      	add	r7, sp, #16
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
 8001088:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 8001090:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 800109a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80010a4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 80010a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80010ac:	2b03      	cmp	r3, #3
 80010ae:	f200 87f9 	bhi.w	80020a4 <GAME_PLAY_Phase_Management+0x1028>
 80010b2:	a201      	add	r2, pc, #4	; (adr r2, 80010b8 <GAME_PLAY_Phase_Management+0x3c>)
 80010b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b8:	08002097 	.word	0x08002097
 80010bc:	080010c9 	.word	0x080010c9
 80010c0:	08001195 	.word	0x08001195
 80010c4:	08001a61 	.word	0x08001a61
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80010c8:	48a4      	ldr	r0, [pc, #656]	; (800135c <GAME_PLAY_Phase_Management+0x2e0>)
 80010ca:	f009 fac7 	bl	800a65c <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80010ce:	6839      	ldr	r1, [r7, #0]
 80010d0:	6878      	ldr	r0, [r7, #4]
 80010d2:	f001 fa6b 	bl	80025ac <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80010d6:	4ba2      	ldr	r3, [pc, #648]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 80010d8:	2200      	movs	r2, #0
 80010da:	9202      	str	r2, [sp, #8]
 80010dc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010e0:	9201      	str	r2, [sp, #4]
 80010e2:	685a      	ldr	r2, [r3, #4]
 80010e4:	9200      	str	r2, [sp, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	4a9e      	ldr	r2, [pc, #632]	; (8001364 <GAME_PLAY_Phase_Management+0x2e8>)
 80010ea:	2123      	movs	r1, #35	; 0x23
 80010ec:	203c      	movs	r0, #60	; 0x3c
 80010ee:	f002 f96c 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80010f2:	4b9b      	ldr	r3, [pc, #620]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	9202      	str	r2, [sp, #8]
 80010f8:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80010fc:	9201      	str	r2, [sp, #4]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	9200      	str	r2, [sp, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a97      	ldr	r2, [pc, #604]	; (8001364 <GAME_PLAY_Phase_Management+0x2e8>)
 8001106:	2123      	movs	r1, #35	; 0x23
 8001108:	203c      	movs	r0, #60	; 0x3c
 800110a:	f002 f9a8 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	781a      	ldrb	r2, [r3, #0]
 8001112:	4b93      	ldr	r3, [pc, #588]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 8001114:	9203      	str	r2, [sp, #12]
 8001116:	2200      	movs	r2, #0
 8001118:	9202      	str	r2, [sp, #8]
 800111a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800111e:	9201      	str	r2, [sp, #4]
 8001120:	685a      	ldr	r2, [r3, #4]
 8001122:	9200      	str	r2, [sp, #0]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4a90      	ldr	r2, [pc, #576]	; (8001368 <GAME_PLAY_Phase_Management+0x2ec>)
 8001128:	215a      	movs	r1, #90	; 0x5a
 800112a:	2005      	movs	r0, #5
 800112c:	f002 f9e1 	bl	80034f2 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	781a      	ldrb	r2, [r3, #0]
 8001134:	4b8a      	ldr	r3, [pc, #552]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 8001136:	9203      	str	r2, [sp, #12]
 8001138:	2200      	movs	r2, #0
 800113a:	9202      	str	r2, [sp, #8]
 800113c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001140:	9201      	str	r2, [sp, #4]
 8001142:	685a      	ldr	r2, [r3, #4]
 8001144:	9200      	str	r2, [sp, #0]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	4a88      	ldr	r2, [pc, #544]	; (800136c <GAME_PLAY_Phase_Management+0x2f0>)
 800114a:	215a      	movs	r1, #90	; 0x5a
 800114c:	2005      	movs	r0, #5
 800114e:	f002 f9d0 	bl	80034f2 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001152:	2101      	movs	r1, #1
 8001154:	4886      	ldr	r0, [pc, #536]	; (8001370 <GAME_PLAY_Phase_Management+0x2f4>)
 8001156:	f006 f8fb 	bl	8007350 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	f040 879c 	bne.w	800209a <GAME_PLAY_Phase_Management+0x101e>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001162:	2000      	movs	r0, #0
 8001164:	f002 fb98 	bl	8003898 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001168:	2000      	movs	r0, #0
 800116a:	f002 fba6 	bl	80038ba <ST7735_FillScreen1>
			MainGUI();
 800116e:	f001 f97d 	bl	800246c <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 8001172:	68bb      	ldr	r3, [r7, #8]
 8001174:	2202      	movs	r2, #2
 8001176:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800117a:	68bb      	ldr	r3, [r7, #8]
 800117c:	2201      	movs	r2, #1
 800117e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8001188:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800118c:	f002 ff92 	bl	80040b4 <HAL_Delay>
		}
		break;
 8001190:	f000 bf83 	b.w	800209a <GAME_PLAY_Phase_Management+0x101e>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 8001194:	6839      	ldr	r1, [r7, #0]
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f001 fa08 	bl	80025ac <LCDvalue>
		ST7735_WriteString(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800119c:	4b70      	ldr	r3, [pc, #448]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 800119e:	2200      	movs	r2, #0
 80011a0:	9202      	str	r2, [sp, #8]
 80011a2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011a6:	9201      	str	r2, [sp, #4]
 80011a8:	685a      	ldr	r2, [r3, #4]
 80011aa:	9200      	str	r2, [sp, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4a71      	ldr	r2, [pc, #452]	; (8001374 <GAME_PLAY_Phase_Management+0x2f8>)
 80011b0:	2123      	movs	r1, #35	; 0x23
 80011b2:	203c      	movs	r0, #60	; 0x3c
 80011b4:	f002 f909 	bl	80033ca <ST7735_WriteString>
		ST7735_WriteString1(60, 35, "|Phase:MP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80011b8:	4b69      	ldr	r3, [pc, #420]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	9202      	str	r2, [sp, #8]
 80011be:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80011c2:	9201      	str	r2, [sp, #4]
 80011c4:	685a      	ldr	r2, [r3, #4]
 80011c6:	9200      	str	r2, [sp, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	4a6a      	ldr	r2, [pc, #424]	; (8001374 <GAME_PLAY_Phase_Management+0x2f8>)
 80011cc:	2123      	movs	r1, #35	; 0x23
 80011ce:	203c      	movs	r0, #60	; 0x3c
 80011d0:	f002 f945 	bl	800345e <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	781a      	ldrb	r2, [r3, #0]
 80011d8:	4b61      	ldr	r3, [pc, #388]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 80011da:	9203      	str	r2, [sp, #12]
 80011dc:	2200      	movs	r2, #0
 80011de:	9202      	str	r2, [sp, #8]
 80011e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011e4:	9201      	str	r2, [sp, #4]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	9200      	str	r2, [sp, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a5e      	ldr	r2, [pc, #376]	; (8001368 <GAME_PLAY_Phase_Management+0x2ec>)
 80011ee:	215a      	movs	r1, #90	; 0x5a
 80011f0:	2005      	movs	r0, #5
 80011f2:	f002 f97e 	bl	80034f2 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	781a      	ldrb	r2, [r3, #0]
 80011fa:	4b59      	ldr	r3, [pc, #356]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 80011fc:	9203      	str	r2, [sp, #12]
 80011fe:	2200      	movs	r2, #0
 8001200:	9202      	str	r2, [sp, #8]
 8001202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001206:	9201      	str	r2, [sp, #4]
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	9200      	str	r2, [sp, #0]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a5a      	ldr	r2, [pc, #360]	; (8001378 <GAME_PLAY_Phase_Management+0x2fc>)
 8001210:	215a      	movs	r1, #90	; 0x5a
 8001212:	2005      	movs	r0, #5
 8001214:	f002 f96d 	bl	80034f2 <ST7735_WriteStringNSS>

		switch (PMS)
 8001218:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800121c:	2b07      	cmp	r3, #7
 800121e:	f200 873e 	bhi.w	800209e <GAME_PLAY_Phase_Management+0x1022>
 8001222:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <GAME_PLAY_Phase_Management+0x1ac>)
 8001224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001228:	08001a41 	.word	0x08001a41
 800122c:	08001249 	.word	0x08001249
 8001230:	080012d3 	.word	0x080012d3
 8001234:	08001381 	.word	0x08001381
 8001238:	08001537 	.word	0x08001537
 800123c:	08001799 	.word	0x08001799
 8001240:	080016eb 	.word	0x080016eb
 8001244:	08001639 	.word	0x08001639
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:
			if (state_game->action == 0)
 8001248:	68bb      	ldr	r3, [r7, #8]
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d127      	bne.n	80012a0 <GAME_PLAY_Phase_Management+0x224>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001250:	2101      	movs	r1, #1
 8001252:	4847      	ldr	r0, [pc, #284]	; (8001370 <GAME_PLAY_Phase_Management+0x2f4>)
 8001254:	f006 f87c 	bl	8007350 <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11a      	bne.n	8001294 <GAME_PLAY_Phase_Management+0x218>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 800125e:	2000      	movs	r0, #0
 8001260:	f002 fb1a 	bl	8003898 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001264:	2000      	movs	r0, #0
 8001266:	f002 fb28 	bl	80038ba <ST7735_FillScreen1>
					MainGUI();
 800126a:	f001 f8ff 	bl	800246c <MainGUI>
					state_game->action = 50;
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	2232      	movs	r2, #50	; 0x32
 8001272:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	2200      	movs	r2, #0
 8001278:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->PlyerAction_State = Battle_Phase;
 800127c:	68bb      	ldr	r3, [r7, #8]
 800127e:	2203      	movs	r2, #3
 8001280:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2201      	movs	r2, #1
 8001288:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1500);
 800128c:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8001290:	f002 ff10 	bl	80040b4 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001294:	687a      	ldr	r2, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	68f8      	ldr	r0, [r7, #12]
 800129a:	f7ff fa5b 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 800129e:	e3d1      	b.n	8001a44 <GAME_PLAY_Phase_Management+0x9c8>
			else if (state_game->action == 1)
 80012a0:	68bb      	ldr	r3, [r7, #8]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	f040 83cd 	bne.w	8001a44 <GAME_PLAY_Phase_Management+0x9c8>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2326      	movs	r3, #38	; 0x26
 80012b6:	2280      	movs	r2, #128	; 0x80
 80012b8:	215a      	movs	r1, #90	; 0x5a
 80012ba:	2000      	movs	r0, #0
 80012bc:	f002 fa62 	bl	8003784 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80012d0:	e3b8      	b.n	8001a44 <GAME_PLAY_Phase_Management+0x9c8>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b22      	ldr	r3, [pc, #136]	; (8001360 <GAME_PLAY_Phase_Management+0x2e4>)
 80012d8:	9203      	str	r2, [sp, #12]
 80012da:	2200      	movs	r2, #0
 80012dc:	9202      	str	r2, [sp, #8]
 80012de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80012e2:	9201      	str	r2, [sp, #4]
 80012e4:	685a      	ldr	r2, [r3, #4]
 80012e6:	9200      	str	r2, [sp, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	4a24      	ldr	r2, [pc, #144]	; (800137c <GAME_PLAY_Phase_Management+0x300>)
 80012ec:	215a      	movs	r1, #90	; 0x5a
 80012ee:	2005      	movs	r0, #5
 80012f0:	f002 f8ff 	bl	80034f2 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80012fa:	62bb      	str	r3, [r7, #40]	; 0x28
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001302:	637b      	str	r3, [r7, #52]	; 0x34

			if (state_game->action == 1)
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b01      	cmp	r3, #1
 800130a:	d116      	bne.n	800133a <GAME_PLAY_Phase_Management+0x2be>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	789b      	ldrb	r3, [r3, #2]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d106      	bne.n	8001322 <GAME_PLAY_Phase_Management+0x2a6>
					ptrYugiohCard_src->cardState = 0;
 8001314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001316:	2200      	movs	r2, #0
 8001318:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 800131a:	68bb      	ldr	r3, [r7, #8]
 800131c:	2202      	movs	r2, #2
 800131e:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001320:	e392      	b.n	8001a48 <GAME_PLAY_Phase_Management+0x9cc>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	785b      	ldrb	r3, [r3, #1]
 8001326:	2b00      	cmp	r3, #0
 8001328:	f040 838e 	bne.w	8001a48 <GAME_PLAY_Phase_Management+0x9cc>
					ptrYugiohCard_src->cardState = 1;
 800132c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800132e:	2201      	movs	r2, #1
 8001330:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2202      	movs	r2, #2
 8001336:	701a      	strb	r2, [r3, #0]
			break;
 8001338:	e386      	b.n	8001a48 <GAME_PLAY_Phase_Management+0x9cc>
			else if (state_game->action == 2)
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b02      	cmp	r3, #2
 8001340:	f040 8382 	bne.w	8001a48 <GAME_PLAY_Phase_Management+0x9cc>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001344:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001348:	f7ff f99c 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2203      	movs	r2, #3
 8001350:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800135a:	e375      	b.n	8001a48 <GAME_PLAY_Phase_Management+0x9cc>
 800135c:	240002e4 	.word	0x240002e4
 8001360:	2400000c 	.word	0x2400000c
 8001364:	0800d6bc 	.word	0x0800d6bc
 8001368:	0800d6c8 	.word	0x0800d6c8
 800136c:	0800d6d8 	.word	0x0800d6d8
 8001370:	58020800 	.word	0x58020800
 8001374:	0800d6e4 	.word	0x0800d6e4
 8001378:	0800d6f0 	.word	0x0800d6f0
 800137c:	0800d700 	.word	0x0800d700
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001386:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 3)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b03      	cmp	r3, #3
 800138e:	f040 835d 	bne.w	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001394:	785b      	ldrb	r3, [r3, #1]
 8001396:	2b03      	cmp	r3, #3
 8001398:	d12a      	bne.n	80013f0 <GAME_PLAY_Phase_Management+0x374>
				{

					ptrYugiohCard_src->cardState = 0;
 800139a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139c:	2200      	movs	r2, #0
 800139e:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80013a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a2:	799a      	ldrb	r2, [r3, #6]
 80013a4:	4baf      	ldr	r3, [pc, #700]	; (8001664 <GAME_PLAY_Phase_Management+0x5e8>)
 80013a6:	fba3 1302 	umull	r1, r3, r3, r2
 80013aa:	0899      	lsrs	r1, r3, #2
 80013ac:	460b      	mov	r3, r1
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	440b      	add	r3, r1
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	75bb      	strb	r3, [r7, #22]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80013b8:	7dbb      	ldrb	r3, [r7, #22]
 80013ba:	011b      	lsls	r3, r3, #4
 80013bc:	3308      	adds	r3, #8
 80013be:	687a      	ldr	r2, [r7, #4]
 80013c0:	4413      	add	r3, r2
 80013c2:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013c4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80013c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80013c8:	f7ff f95c 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff fa15 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80013d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff f952 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	2200      	movs	r2, #0
 80013e4:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 80013ee:	e32d      	b.n	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
				else if (ptrYugiohCard_src->cardType == 2)
 80013f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	2b02      	cmp	r3, #2
 80013f6:	d15a      	bne.n	80014ae <GAME_PLAY_Phase_Management+0x432>
					state_game->count_chain = 1;
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	2201      	movs	r2, #1
 80013fc:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 80013fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001400:	789b      	ldrb	r3, [r3, #2]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d12b      	bne.n	800145e <GAME_PLAY_Phase_Management+0x3e2>
						state_game->action = 4;
 8001406:	68bb      	ldr	r3, [r7, #8]
 8001408:	2204      	movs	r2, #4
 800140a:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800140c:	68b8      	ldr	r0, [r7, #8]
 800140e:	f7ff faa0 	bl	8000952 <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001418:	4619      	mov	r1, r3
 800141a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800141c:	f7ff f932 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001436:	3301      	adds	r3, #1
 8001438:	b2da      	uxtb	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f7ff f9db 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800144c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800144e:	4618      	mov	r0, r3
 8001450:	f7ff f918 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8001454:	68bb      	ldr	r3, [r7, #8]
 8001456:	2207      	movs	r2, #7
 8001458:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800145c:	e2f6      	b.n	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800145e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001460:	799a      	ldrb	r2, [r3, #6]
 8001462:	4b80      	ldr	r3, [pc, #512]	; (8001664 <GAME_PLAY_Phase_Management+0x5e8>)
 8001464:	fba3 1302 	umull	r1, r3, r3, r2
 8001468:	0899      	lsrs	r1, r3, #2
 800146a:	460b      	mov	r3, r1
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	440b      	add	r3, r1
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	75fb      	strb	r3, [r7, #23]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001476:	7dfb      	ldrb	r3, [r7, #23]
 8001478:	011b      	lsls	r3, r3, #4
 800147a:	3308      	adds	r3, #8
 800147c:	687a      	ldr	r2, [r7, #4]
 800147e:	4413      	add	r3, r2
 8001480:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001482:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001484:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001486:	f7ff f8fd 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff f9b6 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001496:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001498:	4618      	mov	r0, r3
 800149a:	f7ff f8f3 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800149e:	68bb      	ldr	r3, [r7, #8]
 80014a0:	2200      	movs	r2, #0
 80014a2:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80014a4:	68bb      	ldr	r3, [r7, #8]
 80014a6:	2201      	movs	r2, #1
 80014a8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80014ac:	e2ce      	b.n	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
				else if (ptrYugiohCard_src->cardType == 1)
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	785b      	ldrb	r3, [r3, #1]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	f040 82ca 	bne.w	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
					state_game->test = 2;
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	2202      	movs	r2, #2
 80014bc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	78db      	ldrb	r3, [r3, #3]
 80014c4:	2b06      	cmp	r3, #6
 80014c6:	d82b      	bhi.n	8001520 <GAME_PLAY_Phase_Management+0x4a4>
						state_game->test = 1;
 80014c8:	68bb      	ldr	r3, [r7, #8]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	799a      	ldrb	r2, [r3, #6]
 80014d4:	4b63      	ldr	r3, [pc, #396]	; (8001664 <GAME_PLAY_Phase_Management+0x5e8>)
 80014d6:	fba3 1302 	umull	r1, r3, r3, r2
 80014da:	0899      	lsrs	r1, r3, #2
 80014dc:	460b      	mov	r3, r1
 80014de:	005b      	lsls	r3, r3, #1
 80014e0:	440b      	add	r3, r1
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	763b      	strb	r3, [r7, #24]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80014e8:	7e3b      	ldrb	r3, [r7, #24]
 80014ea:	011b      	lsls	r3, r3, #4
 80014ec:	3308      	adds	r3, #8
 80014ee:	687a      	ldr	r2, [r7, #4]
 80014f0:	4413      	add	r3, r2
 80014f2:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80014f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80014f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80014f8:	f7ff f8c4 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80014fc:	6878      	ldr	r0, [r7, #4]
 80014fe:	f7ff f97d 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001508:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff f8ba 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	2200      	movs	r2, #0
 8001514:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	2201      	movs	r2, #1
 800151a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800151e:	e295      	b.n	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff f96b 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	2204      	movs	r2, #4
 800152a:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	2204      	movs	r2, #4
 8001530:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001534:	e28a      	b.n	8001a4c <GAME_PLAY_Phase_Management+0x9d0>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800153c:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 4)
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b04      	cmp	r3, #4
 8001544:	d105      	bne.n	8001552 <GAME_PLAY_Phase_Management+0x4d6>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	68b9      	ldr	r1, [r7, #8]
 800154a:	68f8      	ldr	r0, [r7, #12]
 800154c:	f7ff f902 	bl	8000754 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
				}
			}
			break;
 8001550:	e27e      	b.n	8001a50 <GAME_PLAY_Phase_Management+0x9d4>
			else if (state_game->action == 5)
 8001552:	68bb      	ldr	r3, [r7, #8]
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b05      	cmp	r3, #5
 8001558:	d105      	bne.n	8001566 <GAME_PLAY_Phase_Management+0x4ea>
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f7ff f8f8 	bl	8000754 <Player_Reading_Card>
			break;
 8001564:	e274      	b.n	8001a50 <GAME_PLAY_Phase_Management+0x9d4>
			else if (state_game->action == 6)
 8001566:	68bb      	ldr	r3, [r7, #8]
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	2b06      	cmp	r3, #6
 800156c:	f040 8270 	bne.w	8001a50 <GAME_PLAY_Phase_Management+0x9d4>
				uint8_t monsterflag = 0 ;
 8001570:	2300      	movs	r3, #0
 8001572:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800157c:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800157e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001580:	78db      	ldrb	r3, [r3, #3]
 8001582:	2b04      	cmp	r3, #4
 8001584:	d804      	bhi.n	8001590 <GAME_PLAY_Phase_Management+0x514>
					monsterflag += 1;
 8001586:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800158a:	3301      	adds	r3, #1
 800158c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst++;
 8001590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001592:	3310      	adds	r3, #16
 8001594:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001596:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001598:	78db      	ldrb	r3, [r3, #3]
 800159a:	2b04      	cmp	r3, #4
 800159c:	d804      	bhi.n	80015a8 <GAME_PLAY_Phase_Management+0x52c>
					monsterflag += 1;
 800159e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015a2:	3301      	adds	r3, #1
 80015a4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (monsterflag == 2)
 80015a8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	d135      	bne.n	800161c <GAME_PLAY_Phase_Management+0x5a0>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80015b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015b2:	799a      	ldrb	r2, [r3, #6]
 80015b4:	4b2b      	ldr	r3, [pc, #172]	; (8001664 <GAME_PLAY_Phase_Management+0x5e8>)
 80015b6:	fba3 1302 	umull	r1, r3, r3, r2
 80015ba:	0899      	lsrs	r1, r3, #2
 80015bc:	460b      	mov	r3, r1
 80015be:	005b      	lsls	r3, r3, #1
 80015c0:	440b      	add	r3, r1
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	767b      	strb	r3, [r7, #25]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80015c8:	7e7b      	ldrb	r3, [r7, #25]
 80015ca:	011b      	lsls	r3, r3, #4
 80015cc:	3308      	adds	r3, #8
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	4413      	add	r3, r2
 80015d2:	637b      	str	r3, [r7, #52]	; 0x34
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80015d4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80015d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015d8:	f7ff f854 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80015e2:	4619      	mov	r1, r3
 80015e4:	6878      	ldr	r0, [r7, #4]
 80015e6:	f7ff fa00 	bl	80009ea <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80015f0:	4619      	mov	r1, r3
 80015f2:	6878      	ldr	r0, [r7, #4]
 80015f4:	f7ff f9f9 	bl	80009ea <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80015f8:	6878      	ldr	r0, [r7, #4]
 80015fa:	f7ff f8ff 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001604:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001606:	4618      	mov	r0, r3
 8001608:	f7ff f83c 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 800160c:	68bb      	ldr	r3, [r7, #8]
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	2201      	movs	r2, #1
 8001616:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 800161a:	e219      	b.n	8001a50 <GAME_PLAY_Phase_Management+0x9d4>
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff f8ed 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800162e:	4619      	mov	r1, r3
 8001630:	4610      	mov	r0, r2
 8001632:	f7ff f827 	bl	8000684 <YUGIOH_card_copy>
			break;
 8001636:	e20b      	b.n	8001a50 <GAME_PLAY_Phase_Management+0x9d4>
		case chaining_main_DEF:

			// Current state_game->action = 4

			if(state_game->action == 4)
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b04      	cmp	r3, #4
 800163e:	d113      	bne.n	8001668 <GAME_PLAY_Phase_Management+0x5ec>
			{
				if (playerDef->noBTN == GPIO_PIN_RESET){
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	789b      	ldrb	r3, [r3, #2]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d106      	bne.n	8001656 <GAME_PLAY_Phase_Management+0x5da>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2205      	movs	r2, #5
 800164c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 8001650:	68bb      	ldr	r3, [r7, #8]
 8001652:	2200      	movs	r2, #0
 8001654:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001656:	683a      	ldr	r2, [r7, #0]
 8001658:	68b9      	ldr	r1, [r7, #8]
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f7ff f87a 	bl	8000754 <Player_Reading_Card>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8001660:	e1f8      	b.n	8001a54 <GAME_PLAY_Phase_Management+0x9d8>
 8001662:	bf00      	nop
 8001664:	aaaaaaab 	.word	0xaaaaaaab
			else if ((state_game->action == 5 )){
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b05      	cmp	r3, #5
 800166e:	f040 81f1 	bne.w	8001a54 <GAME_PLAY_Phase_Management+0x9d8>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 800167a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800167c:	6838      	ldr	r0, [r7, #0]
 800167e:	f000 fea7 	bl	80023d0 <YUGIOH_Check_Trap_On_board>
 8001682:	4603      	mov	r3, r0
 8001684:	76fb      	strb	r3, [r7, #27]
				if (idx != 255)
 8001686:	7efb      	ldrb	r3, [r7, #27]
 8001688:	2bff      	cmp	r3, #255	; 0xff
 800168a:	d02a      	beq.n	80016e2 <GAME_PLAY_Phase_Management+0x666>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800168c:	68b8      	ldr	r0, [r7, #8]
 800168e:	f7ff f960 	bl	8000952 <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8001692:	7efb      	ldrb	r3, [r7, #27]
 8001694:	011b      	lsls	r3, r3, #4
 8001696:	3308      	adds	r3, #8
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	4413      	add	r3, r2
 800169c:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800169e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a0:	2200      	movs	r2, #0
 80016a2:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80016aa:	4619      	mov	r1, r3
 80016ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80016ae:	f7fe ffe9 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	687a      	ldr	r2, [r7, #4]
 80016be:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80016c2:	68bb      	ldr	r3, [r7, #8]
 80016c4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80016c8:	3301      	adds	r3, #1
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	2206      	movs	r2, #6
 80016d6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80016da:	68bb      	ldr	r3, [r7, #8]
 80016dc:	2204      	movs	r2, #4
 80016de:	701a      	strb	r2, [r3, #0]
			break;
 80016e0:	e1b8      	b.n	8001a54 <GAME_PLAY_Phase_Management+0x9d8>
					state_game->action = 4;
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	2204      	movs	r2, #4
 80016e6:	701a      	strb	r2, [r3, #0]
			break;
 80016e8:	e1b4      	b.n	8001a54 <GAME_PLAY_Phase_Management+0x9d8>
		case chaining_main_ATK:
			if(state_game->action == 4)
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b04      	cmp	r3, #4
 80016f0:	d111      	bne.n	8001716 <GAME_PLAY_Phase_Management+0x69a>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	68b9      	ldr	r1, [r7, #8]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f7ff f82c 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	789b      	ldrb	r3, [r3, #2]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f040 81a9 	bne.w	8001a58 <GAME_PLAY_Phase_Management+0x9dc>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	2205      	movs	r2, #5
 800170a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	2200      	movs	r2, #0
 8001712:	705a      	strb	r2, [r3, #1]
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8001714:	e1a0      	b.n	8001a58 <GAME_PLAY_Phase_Management+0x9dc>
			else if ((state_game->action == 5 )){
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b05      	cmp	r3, #5
 800171c:	f040 819c 	bne.w	8001a58 <GAME_PLAY_Phase_Management+0x9dc>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8001728:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 fe50 	bl	80023d0 <YUGIOH_Check_Trap_On_board>
 8001730:	4603      	mov	r3, r0
 8001732:	76bb      	strb	r3, [r7, #26]
				if (idx != 255)
 8001734:	7ebb      	ldrb	r3, [r7, #26]
 8001736:	2bff      	cmp	r3, #255	; 0xff
 8001738:	d02a      	beq.n	8001790 <GAME_PLAY_Phase_Management+0x714>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800173a:	68b8      	ldr	r0, [r7, #8]
 800173c:	f7ff f909 	bl	8000952 <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001740:	7ebb      	ldrb	r3, [r7, #26]
 8001742:	011b      	lsls	r3, r3, #4
 8001744:	3308      	adds	r3, #8
 8001746:	687a      	ldr	r2, [r7, #4]
 8001748:	4413      	add	r3, r2
 800174a:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800174e:	2200      	movs	r2, #0
 8001750:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001758:	4619      	mov	r1, r3
 800175a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800175c:	f7fe ff92 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8001760:	68bb      	ldr	r3, [r7, #8]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001770:	68bb      	ldr	r3, [r7, #8]
 8001772:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001776:	3301      	adds	r3, #1
 8001778:	b2da      	uxtb	r2, r3
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2206      	movs	r2, #6
 8001784:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	2204      	movs	r2, #4
 800178c:	701a      	strb	r2, [r3, #0]
			break;
 800178e:	e163      	b.n	8001a58 <GAME_PLAY_Phase_Management+0x9dc>
					state_game->action = 4;
 8001790:	68bb      	ldr	r3, [r7, #8]
 8001792:	2204      	movs	r2, #4
 8001794:	701a      	strb	r2, [r3, #0]
			break;
 8001796:	e15f      	b.n	8001a58 <GAME_PLAY_Phase_Management+0x9dc>
		case activate_effect:
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	785b      	ldrb	r3, [r3, #1]
 800179c:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	4413      	add	r3, r2
 80017a6:	3304      	adds	r3, #4
 80017a8:	623b      	str	r3, [r7, #32]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	68ba      	ldr	r2, [r7, #8]
 80017b6:	4413      	add	r3, r2
 80017b8:	3304      	adds	r3, #4
 80017ba:	61fb      	str	r3, [r7, #28]

			if(state_game->action == 4)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	781b      	ldrb	r3, [r3, #0]
 80017c0:	2b04      	cmp	r3, #4
 80017c2:	f040 808f 	bne.w	80018e4 <GAME_PLAY_Phase_Management+0x868>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 80017c6:	68bb      	ldr	r3, [r7, #8]
 80017c8:	785a      	ldrb	r2, [r3, #1]
 80017ca:	68bb      	ldr	r3, [r7, #8]
 80017cc:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d27f      	bcs.n	80018d4 <GAME_PLAY_Phase_Management+0x858>
				{
					state_game->test = 165;
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	22a5      	movs	r2, #165	; 0xa5
 80017d8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	785b      	ldrb	r3, [r3, #1]
 80017e0:	3344      	adds	r3, #68	; 0x44
 80017e2:	011b      	lsls	r3, r3, #4
 80017e4:	68ba      	ldr	r2, [r7, #8]
 80017e6:	4413      	add	r3, r2
 80017e8:	3304      	adds	r3, #4
 80017ea:	62bb      	str	r3, [r7, #40]	; 0x28

					if (ptrYugiohCard_src->cardSignature == 11)
 80017ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b0b      	cmp	r3, #11
 80017f2:	d10b      	bne.n	800180c <GAME_PLAY_Phase_Management+0x790>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f000 fc6f 	bl	80020dc <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						state_game->count_chain++;
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	785b      	ldrb	r3, [r3, #1]
 8001802:	3301      	adds	r3, #1
 8001804:	b2da      	uxtb	r2, r3
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	705a      	strb	r2, [r3, #1]
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
					state_game->action = 4;
					state_game->count_chain++;
				}
			}
			break;
 800180a:	e127      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if (ptrYugiohCard_src->cardSignature == 12)
 800180c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b0c      	cmp	r3, #12
 8001812:	d10e      	bne.n	8001832 <GAME_PLAY_Phase_Management+0x7b6>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8001814:	6a3b      	ldr	r3, [r7, #32]
 8001816:	681a      	ldr	r2, [r3, #0]
 8001818:	69fb      	ldr	r3, [r7, #28]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4619      	mov	r1, r3
 800181e:	4610      	mov	r0, r2
 8001820:	f000 fc7c 	bl	800211c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						state_game->count_chain++;
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	785b      	ldrb	r3, [r3, #1]
 8001828:	3301      	adds	r3, #1
 800182a:	b2da      	uxtb	r2, r3
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	705a      	strb	r2, [r3, #1]
			break;
 8001830:	e114      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8001832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b0d      	cmp	r3, #13
 8001838:	d107      	bne.n	800184a <GAME_PLAY_Phase_Management+0x7ce>
						state_game->test = 166;
 800183a:	68bb      	ldr	r3, [r7, #8]
 800183c:	22a6      	movs	r2, #166	; 0xa6
 800183e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	2205      	movs	r2, #5
 8001846:	701a      	strb	r2, [r3, #0]
			break;
 8001848:	e108      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 800184a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800184c:	781b      	ldrb	r3, [r3, #0]
 800184e:	2b0e      	cmp	r3, #14
 8001850:	d003      	beq.n	800185a <GAME_PLAY_Phase_Management+0x7de>
 8001852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b0f      	cmp	r3, #15
 8001858:	d112      	bne.n	8001880 <GAME_PLAY_Phase_Management+0x804>
						state_game->test = 133;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2285      	movs	r2, #133	; 0x85
 800185e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8001862:	6a3b      	ldr	r3, [r7, #32]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4619      	mov	r1, r3
 800186c:	4610      	mov	r0, r2
 800186e:	f000 fd29 	bl	80022c4 <YUGIOH_Gift_of_the_Mystical_Elf>
						state_game->count_chain++;
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	785b      	ldrb	r3, [r3, #1]
 8001876:	3301      	adds	r3, #1
 8001878:	b2da      	uxtb	r2, r3
 800187a:	68bb      	ldr	r3, [r7, #8]
 800187c:	705a      	strb	r2, [r3, #1]
			break;
 800187e:	e0ed      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8001880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	2b10      	cmp	r3, #16
 8001886:	d107      	bne.n	8001898 <GAME_PLAY_Phase_Management+0x81c>
						state_game->test = 124;
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	227c      	movs	r2, #124	; 0x7c
 800188c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	2205      	movs	r2, #5
 8001894:	701a      	strb	r2, [r3, #0]
			break;
 8001896:	e0e1      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8001898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b11      	cmp	r3, #17
 800189e:	d103      	bne.n	80018a8 <GAME_PLAY_Phase_Management+0x82c>
						state_game->action = 5;
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	2205      	movs	r2, #5
 80018a4:	701a      	strb	r2, [r3, #0]
			break;
 80018a6:	e0d9      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 80018a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	2b12      	cmp	r3, #18
 80018ae:	d004      	beq.n	80018ba <GAME_PLAY_Phase_Management+0x83e>
 80018b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b13      	cmp	r3, #19
 80018b6:	f040 80d1 	bne.w	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	785b      	ldrb	r3, [r3, #1]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 80cb 	bne.w	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
							state_game->count_chain++;
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	785b      	ldrb	r3, [r3, #1]
 80018ca:	3301      	adds	r3, #1
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	68bb      	ldr	r3, [r7, #8]
 80018d0:	705a      	strb	r2, [r3, #1]
			break;
 80018d2:	e0c3      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					state_game->action = 0;
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	2201      	movs	r2, #1
 80018de:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 80018e2:	e0bb      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
			else if (state_game->action == 5)
 80018e4:	68bb      	ldr	r3, [r7, #8]
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b05      	cmp	r3, #5
 80018ea:	d10b      	bne.n	8001904 <GAME_PLAY_Phase_Management+0x888>
				state_game->test = 167;
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	22a7      	movs	r2, #167	; 0xa7
 80018f0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				Player_Reading_Card(RFIDmain, state_game, *ptrUser);
 80018f4:	6a3b      	ldr	r3, [r7, #32]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	461a      	mov	r2, r3
 80018fa:	68b9      	ldr	r1, [r7, #8]
 80018fc:	68f8      	ldr	r0, [r7, #12]
 80018fe:	f7fe ff29 	bl	8000754 <Player_Reading_Card>
			break;
 8001902:	e0ab      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
			else if (state_game->action == 6)
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	2b06      	cmp	r3, #6
 800190a:	f040 80a7 	bne.w	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
				state_game->test = 169;
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	22a9      	movs	r2, #169	; 0xa9
 8001912:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	785b      	ldrb	r3, [r3, #1]
 800191a:	3344      	adds	r3, #68	; 0x44
 800191c:	011b      	lsls	r3, r3, #4
 800191e:	68ba      	ldr	r2, [r7, #8]
 8001920:	4413      	add	r3, r2
 8001922:	3304      	adds	r3, #4
 8001924:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_src->cardSignature == 13)
 8001926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	2b0d      	cmp	r3, #13
 800192c:	d15f      	bne.n	80019ee <GAME_PLAY_Phase_Management+0x972>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800192e:	6a3b      	ldr	r3, [r7, #32]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	789b      	ldrb	r3, [r3, #2]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d12a      	bne.n	800198e <GAME_PLAY_Phase_Management+0x912>
						state_game->test = 170;
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	22aa      	movs	r2, #170	; 0xaa
 800193c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001948:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 0;
 800194a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800194c:	2200      	movs	r2, #0
 800194e:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8001950:	6a3b      	ldr	r3, [r7, #32]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001958:	4619      	mov	r1, r3
 800195a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800195c:	f7fe fe92 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8001960:	6a3b      	ldr	r3, [r7, #32]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f000 fc17 	bl	8002198 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4619      	mov	r1, r3
 8001974:	4610      	mov	r0, r2
 8001976:	f000 fb99 	bl	80020ac <Test_EFF>
						state_game->action = 4;
 800197a:	68bb      	ldr	r3, [r7, #8]
 800197c:	2204      	movs	r2, #4
 800197e:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 8001980:	68bb      	ldr	r3, [r7, #8]
 8001982:	785b      	ldrb	r3, [r3, #1]
 8001984:	3301      	adds	r3, #1
 8001986:	b2da      	uxtb	r2, r3
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	705a      	strb	r2, [r3, #1]
			break;
 800198c:	e066      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 800198e:	6a3b      	ldr	r3, [r7, #32]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	785b      	ldrb	r3, [r3, #1]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d161      	bne.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
						state_game->test = 171;
 8001998:	68bb      	ldr	r3, [r7, #8]
 800199a:	22ab      	movs	r2, #171	; 0xab
 800199c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80019a0:	6a3b      	ldr	r3, [r7, #32]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80019a8:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 1;
 80019aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019ac:	2201      	movs	r2, #1
 80019ae:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80019b0:	6a3b      	ldr	r3, [r7, #32]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80019b8:	4619      	mov	r1, r3
 80019ba:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80019bc:	f7fe fe62 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80019c0:	6a3b      	ldr	r3, [r7, #32]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f000 fbe7 	bl	8002198 <YUGIOH_Reborn>
						Test_EFF(*ptrUser,*ptrOpponent);
 80019ca:	6a3b      	ldr	r3, [r7, #32]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4619      	mov	r1, r3
 80019d4:	4610      	mov	r0, r2
 80019d6:	f000 fb69 	bl	80020ac <Test_EFF>
						state_game->action = 4;
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	2204      	movs	r2, #4
 80019de:	701a      	strb	r2, [r3, #0]
						state_game->count_chain++;
 80019e0:	68bb      	ldr	r3, [r7, #8]
 80019e2:	785b      	ldrb	r3, [r3, #1]
 80019e4:	3301      	adds	r3, #1
 80019e6:	b2da      	uxtb	r2, r3
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	705a      	strb	r2, [r3, #1]
			break;
 80019ec:	e036      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
				else if(ptrYugiohCard_src->cardSignature == 16){
 80019ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b10      	cmp	r3, #16
 80019f4:	d10e      	bne.n	8001a14 <GAME_PLAY_Phase_Management+0x998>
					YUGIOH_Ancient_Rules(*ptrUser);
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 fc36 	bl	800226c <YUGIOH_Ancient_Rules>
					state_game->action = 4;
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	2204      	movs	r2, #4
 8001a04:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8001a06:	68bb      	ldr	r3, [r7, #8]
 8001a08:	785b      	ldrb	r3, [r3, #1]
 8001a0a:	3301      	adds	r3, #1
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	705a      	strb	r2, [r3, #1]
			break;
 8001a12:	e023      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
				else if(ptrYugiohCard_src->cardSignature == 17){
 8001a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b11      	cmp	r3, #17
 8001a1a:	d11f      	bne.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8001a1c:	6a3b      	ldr	r3, [r7, #32]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f000 fc9c 	bl	8002364 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	2204      	movs	r2, #4
 8001a30:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	785b      	ldrb	r3, [r3, #1]
 8001a36:	3301      	adds	r3, #1
 8001a38:	b2da      	uxtb	r2, r3
 8001a3a:	68bb      	ldr	r3, [r7, #8]
 8001a3c:	705a      	strb	r2, [r3, #1]
			break;
 8001a3e:	e00d      	b.n	8001a5c <GAME_PLAY_Phase_Management+0x9e0>
			break;
 8001a40:	bf00      	nop
 8001a42:	e32c      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a44:	bf00      	nop
 8001a46:	e32a      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a48:	bf00      	nop
 8001a4a:	e328      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a4c:	bf00      	nop
 8001a4e:	e326      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a50:	bf00      	nop
 8001a52:	e324      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a54:	bf00      	nop
 8001a56:	e322      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a58:	bf00      	nop
 8001a5a:	e320      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
			break;
 8001a5c:	bf00      	nop
		}
		break;
 8001a5e:	e31e      	b.n	800209e <GAME_PLAY_Phase_Management+0x1022>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8001a60:	6839      	ldr	r1, [r7, #0]
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fda2 	bl	80025ac <LCDvalue>
			ST7735_WriteString(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001a68:	4b9c      	ldr	r3, [pc, #624]	; (8001cdc <GAME_PLAY_Phase_Management+0xc60>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	9202      	str	r2, [sp, #8]
 8001a6e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a72:	9201      	str	r2, [sp, #4]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	9200      	str	r2, [sp, #0]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a99      	ldr	r2, [pc, #612]	; (8001ce0 <GAME_PLAY_Phase_Management+0xc64>)
 8001a7c:	2123      	movs	r1, #35	; 0x23
 8001a7e:	203c      	movs	r0, #60	; 0x3c
 8001a80:	f001 fca3 	bl	80033ca <ST7735_WriteString>
			ST7735_WriteString1(60, 35, "|Phase:BP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8001a84:	4b95      	ldr	r3, [pc, #596]	; (8001cdc <GAME_PLAY_Phase_Management+0xc60>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	9202      	str	r2, [sp, #8]
 8001a8a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001a8e:	9201      	str	r2, [sp, #4]
 8001a90:	685a      	ldr	r2, [r3, #4]
 8001a92:	9200      	str	r2, [sp, #0]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a92      	ldr	r2, [pc, #584]	; (8001ce0 <GAME_PLAY_Phase_Management+0xc64>)
 8001a98:	2123      	movs	r1, #35	; 0x23
 8001a9a:	203c      	movs	r0, #60	; 0x3c
 8001a9c:	f001 fcdf 	bl	800345e <ST7735_WriteString1>
			ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	781a      	ldrb	r2, [r3, #0]
 8001aa4:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <GAME_PLAY_Phase_Management+0xc60>)
 8001aa6:	9203      	str	r2, [sp, #12]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	9202      	str	r2, [sp, #8]
 8001aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ab0:	9201      	str	r2, [sp, #4]
 8001ab2:	685a      	ldr	r2, [r3, #4]
 8001ab4:	9200      	str	r2, [sp, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a8a      	ldr	r2, [pc, #552]	; (8001ce4 <GAME_PLAY_Phase_Management+0xc68>)
 8001aba:	215a      	movs	r1, #90	; 0x5a
 8001abc:	2005      	movs	r0, #5
 8001abe:	f001 fd18 	bl	80034f2 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	4b85      	ldr	r3, [pc, #532]	; (8001cdc <GAME_PLAY_Phase_Management+0xc60>)
 8001ac8:	9203      	str	r2, [sp, #12]
 8001aca:	2200      	movs	r2, #0
 8001acc:	9202      	str	r2, [sp, #8]
 8001ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ad2:	9201      	str	r2, [sp, #4]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	9200      	str	r2, [sp, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	4a83      	ldr	r2, [pc, #524]	; (8001ce8 <GAME_PLAY_Phase_Management+0xc6c>)
 8001adc:	215a      	movs	r1, #90	; 0x5a
 8001ade:	2005      	movs	r0, #5
 8001ae0:	f001 fd07 	bl	80034f2 <ST7735_WriteStringNSS>

			switch(PBS){
 8001ae4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ae8:	2b06      	cmp	r3, #6
 8001aea:	f200 82da 	bhi.w	80020a2 <GAME_PLAY_Phase_Management+0x1026>
 8001aee:	a201      	add	r2, pc, #4	; (adr r2, 8001af4 <GAME_PLAY_Phase_Management+0xa78>)
 8001af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af4:	0800207f 	.word	0x0800207f
 8001af8:	08001b11 	.word	0x08001b11
 8001afc:	08001d57 	.word	0x08001d57
 8001b00:	08001cb3 	.word	0x08001cb3
 8001b04:	08001dd9 	.word	0x08001dd9
 8001b08:	08001ebb 	.word	0x08001ebb
 8001b0c:	08002043 	.word	0x08002043
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				if(state_game->action == 50){
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b32      	cmp	r3, #50	; 0x32
 8001b16:	d165      	bne.n	8001be4 <GAME_PLAY_Phase_Management+0xb68>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f7fe fe19 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001b22:	2101      	movs	r1, #1
 8001b24:	4871      	ldr	r0, [pc, #452]	; (8001cec <GAME_PLAY_Phase_Management+0xc70>)
 8001b26:	f005 fc13 	bl	8007350 <HAL_GPIO_ReadPin>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f040 82a8 	bne.w	8002082 <GAME_PLAY_Phase_Management+0x1006>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001b32:	486f      	ldr	r0, [pc, #444]	; (8001cf0 <GAME_PLAY_Phase_Management+0xc74>)
 8001b34:	f008 fe0a 	bl	800a74c <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8001b38:	496e      	ldr	r1, [pc, #440]	; (8001cf4 <GAME_PLAY_Phase_Management+0xc78>)
 8001b3a:	f04f 0200 	mov.w	r2, #0
 8001b3e:	f04f 0300 	mov.w	r3, #0
 8001b42:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	9301      	str	r3, [sp, #4]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9300      	str	r3, [sp, #0]
 8001b50:	2326      	movs	r3, #38	; 0x26
 8001b52:	2280      	movs	r2, #128	; 0x80
 8001b54:	215a      	movs	r1, #90	; 0x5a
 8001b56:	2000      	movs	r0, #0
 8001b58:	f001 fe14 	bl	8003784 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	781a      	ldrb	r2, [r3, #0]
 8001b60:	4b65      	ldr	r3, [pc, #404]	; (8001cf8 <GAME_PLAY_Phase_Management+0xc7c>)
 8001b62:	9203      	str	r2, [sp, #12]
 8001b64:	2200      	movs	r2, #0
 8001b66:	9202      	str	r2, [sp, #8]
 8001b68:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001b6c:	9201      	str	r2, [sp, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	9200      	str	r2, [sp, #0]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a61      	ldr	r2, [pc, #388]	; (8001cfc <GAME_PLAY_Phase_Management+0xc80>)
 8001b76:	215a      	movs	r1, #90	; 0x5a
 8001b78:	200f      	movs	r0, #15
 8001b7a:	f001 fcba 	bl	80034f2 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8001b7e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001b82:	f002 fa97 	bl	80040b4 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2326      	movs	r3, #38	; 0x26
 8001b92:	2280      	movs	r2, #128	; 0x80
 8001b94:	215a      	movs	r1, #90	; 0x5a
 8001b96:	2000      	movs	r0, #0
 8001b98:	f001 fdf4 	bl	8003784 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2326      	movs	r3, #38	; 0x26
 8001ba8:	2280      	movs	r2, #128	; 0x80
 8001baa:	215a      	movs	r1, #90	; 0x5a
 8001bac:	2000      	movs	r0, #0
 8001bae:	f001 fde9 	bl	8003784 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8001bb8:	6878      	ldr	r0, [r7, #4]
 8001bba:	f000 fc35 	bl	8002428 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8001bbe:	68bb      	ldr	r3, [r7, #8]
 8001bc0:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d104      	bne.n	8001bd2 <GAME_PLAY_Phase_Management+0xb56>
							state_game->MainGame_State = second_player;
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	2203      	movs	r2, #3
 8001bcc:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8001bd0:	e003      	b.n	8001bda <GAME_PLAY_Phase_Management+0xb5e>
						}
						else{
							state_game->MainGame_State = first_player;
 8001bd2:	68bb      	ldr	r3, [r7, #8]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
							break;
						}
						ptrYugiohCard_dst++;
					}
				}
				break;
 8001be2:	e24e      	b.n	8002082 <GAME_PLAY_Phase_Management+0x1006>
				else if(state_game->action == 51){
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b33      	cmp	r3, #51	; 0x33
 8001bea:	f040 824a 	bne.w	8002082 <GAME_PLAY_Phase_Management+0x1006>
					uint8_t check_def_mon = 0;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					ptrYugiohCard_src = &playerDef->cardOnBoard[3];
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	3338      	adds	r3, #56	; 0x38
 8001bf8:	62bb      	str	r3, [r7, #40]	; 0x28
					for(uint8_t i = 0;i < 3; ++i){
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001c00:	e00d      	b.n	8001c1e <GAME_PLAY_Phase_Management+0xba2>
						if(ptrYugiohCard_src->cardData == 0){
 8001c02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d104      	bne.n	8001c14 <GAME_PLAY_Phase_Management+0xb98>
							check_def_mon++;
 8001c0a:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001c0e:	3301      	adds	r3, #1
 8001c10:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					for(uint8_t i = 0;i < 3; ++i){
 8001c14:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001c18:	3301      	adds	r3, #1
 8001c1a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8001c1e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d9ed      	bls.n	8001c02 <GAME_PLAY_Phase_Management+0xb86>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001c2c:	62bb      	str	r3, [r7, #40]	; 0x28
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	3338      	adds	r3, #56	; 0x38
 8001c32:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8001c34:	2300      	movs	r3, #0
 8001c36:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001c3a:	e033      	b.n	8001ca4 <GAME_PLAY_Phase_Management+0xc28>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8001c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c3e:	68da      	ldr	r2, [r3, #12]
 8001c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d125      	bne.n	8001c94 <GAME_PLAY_Phase_Management+0xc18>
							if(ptrYugiohCard_dst->cardState == 1){
 8001c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c4a:	789b      	ldrb	r3, [r3, #2]
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d12e      	bne.n	8001cae <GAME_PLAY_Phase_Management+0xc32>
								YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c56:	4619      	mov	r1, r3
 8001c58:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c5a:	f7fe fd13 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c64:	637b      	str	r3, [r7, #52]	; 0x34
								if(check_def_mon == 3){
 8001c66:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001c6a:	2b03      	cmp	r3, #3
 8001c6c:	d103      	bne.n	8001c76 <GAME_PLAY_Phase_Management+0xbfa>
									ptrYugiohCard_dst->targetPosition = 99;
 8001c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c70:	2263      	movs	r2, #99	; 0x63
 8001c72:	71da      	strb	r2, [r3, #7]
 8001c74:	e003      	b.n	8001c7e <GAME_PLAY_Phase_Management+0xc02>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c78:	799a      	ldrb	r2, [r3, #6]
 8001c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c7c:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8001c7e:	6838      	ldr	r0, [r7, #0]
 8001c80:	f7fe fdbc 	bl	80007fc <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2234      	movs	r2, #52	; 0x34
 8001c88:	701a      	strb	r2, [r3, #0]
								state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	2203      	movs	r2, #3
 8001c8e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							break;
 8001c92:	e00c      	b.n	8001cae <GAME_PLAY_Phase_Management+0xc32>
						ptrYugiohCard_dst++;
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	3310      	adds	r3, #16
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 8001c9a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 8001ca4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001ca8:	2b02      	cmp	r3, #2
 8001caa:	d9c7      	bls.n	8001c3c <GAME_PLAY_Phase_Management+0xbc0>
				break;
 8001cac:	e1e9      	b.n	8002082 <GAME_PLAY_Phase_Management+0x1006>
							break;
 8001cae:	bf00      	nop
				break;
 8001cb0:	e1e7      	b.n	8002082 <GAME_PLAY_Phase_Management+0x1006>
			case counter_DEF:
				//action 52
				if(state_game->action == 52)
 8001cb2:	68bb      	ldr	r3, [r7, #8]
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	2b34      	cmp	r3, #52	; 0x34
 8001cb8:	d122      	bne.n	8001d00 <GAME_PLAY_Phase_Management+0xc84>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	789b      	ldrb	r3, [r3, #2]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d106      	bne.n	8001cd0 <GAME_PLAY_Phase_Management+0xc54>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8001cc2:	68bb      	ldr	r3, [r7, #8]
 8001cc4:	2204      	movs	r2, #4
 8001cc6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	68b9      	ldr	r1, [r7, #8]
 8001cd4:	68f8      	ldr	r0, [r7, #12]
 8001cd6:	f7fe fd3d 	bl	8000754 <Player_Reading_Card>

					state_game->PlyerAction_Battle_Substate = counter_ATK;
					state_game->action = 54;
				}

				break;
 8001cda:	e1d4      	b.n	8002086 <GAME_PLAY_Phase_Management+0x100a>
 8001cdc:	2400000c 	.word	0x2400000c
 8001ce0:	0800d710 	.word	0x0800d710
 8001ce4:	0800d71c 	.word	0x0800d71c
 8001ce8:	0800d72c 	.word	0x0800d72c
 8001cec:	58020800 	.word	0x58020800
 8001cf0:	240002e4 	.word	0x240002e4
 8001cf4:	24000e98 	.word	0x24000e98
 8001cf8:	24000014 	.word	0x24000014
 8001cfc:	0800d73c 	.word	0x0800d73c
				else if ((state_game->action == 53 )){
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b35      	cmp	r3, #53	; 0x35
 8001d06:	f040 81be 	bne.w	8002086 <GAME_PLAY_Phase_Management+0x100a>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001d12:	68b8      	ldr	r0, [r7, #8]
 8001d14:	f7fe fe1d 	bl	8000952 <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001d18:	68bb      	ldr	r3, [r7, #8]
 8001d1a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001d1e:	4619      	mov	r1, r3
 8001d20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d22:	f7fe fcaf 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8001d2e:	68bb      	ldr	r3, [r7, #8]
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_ATK;
 8001d46:	68bb      	ldr	r3, [r7, #8]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001d4e:	68bb      	ldr	r3, [r7, #8]
 8001d50:	2236      	movs	r2, #54	; 0x36
 8001d52:	701a      	strb	r2, [r3, #0]
				break;
 8001d54:	e197      	b.n	8002086 <GAME_PLAY_Phase_Management+0x100a>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b36      	cmp	r3, #54	; 0x36
 8001d5c:	d111      	bne.n	8001d82 <GAME_PLAY_Phase_Management+0xd06>
				{
					Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001d5e:	687a      	ldr	r2, [r7, #4]
 8001d60:	68b9      	ldr	r1, [r7, #8]
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f7fe fcf6 	bl	8000754 <Player_Reading_Card>
					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	789b      	ldrb	r3, [r3, #2]
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 818c 	bne.w	800208a <GAME_PLAY_Phase_Management+0x100e>
						//affect
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8001d72:	68bb      	ldr	r3, [r7, #8]
 8001d74:	2204      	movs	r2, #4
 8001d76:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	705a      	strb	r2, [r3, #1]

					state_game->PlyerAction_Battle_Substate = counter_DEF;
					state_game->action = 54;
				}

				break;
 8001d80:	e183      	b.n	800208a <GAME_PLAY_Phase_Management+0x100e>
				else if ((state_game->action == 55 )){
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b37      	cmp	r3, #55	; 0x37
 8001d88:	f040 817f 	bne.w	800208a <GAME_PLAY_Phase_Management+0x100e>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d92:	62bb      	str	r3, [r7, #40]	; 0x28
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8001d94:	68b8      	ldr	r0, [r7, #8]
 8001d96:	f7fe fddc 	bl	8000952 <YUGIOH_card_Buffer_Update_Chain>
					YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001da0:	4619      	mov	r1, r3
 8001da2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001da4:	f7fe fc6e 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	683a      	ldr	r2, [r7, #0]
 8001db4:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8001db8:	68bb      	ldr	r3, [r7, #8]
 8001dba:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b2da      	uxtb	r2, r3
 8001dc2:	68bb      	ldr	r3, [r7, #8]
 8001dc4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Battle_Substate = counter_DEF;
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					state_game->action = 54;
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2236      	movs	r2, #54	; 0x36
 8001dd4:	701a      	strb	r2, [r3, #0]
				break;
 8001dd6:	e158      	b.n	800208a <GAME_PLAY_Phase_Management+0x100e>
			case chain_effect:
				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8001dd8:	68bb      	ldr	r3, [r7, #8]
 8001dda:	785b      	ldrb	r3, [r3, #1]
 8001ddc:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	68ba      	ldr	r2, [r7, #8]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	623b      	str	r3, [r7, #32]
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8001dea:	68bb      	ldr	r3, [r7, #8]
 8001dec:	785b      	ldrb	r3, [r3, #1]
 8001dee:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8001df2:	009b      	lsls	r3, r3, #2
 8001df4:	68ba      	ldr	r2, [r7, #8]
 8001df6:	4413      	add	r3, r2
 8001df8:	3304      	adds	r3, #4
 8001dfa:	61fb      	str	r3, [r7, #28]

				if(state_game->action == 54)
 8001dfc:	68bb      	ldr	r3, [r7, #8]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b36      	cmp	r3, #54	; 0x36
 8001e02:	f040 8144 	bne.w	800208e <GAME_PLAY_Phase_Management+0x1012>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8001e06:	68bb      	ldr	r3, [r7, #8]
 8001e08:	785a      	ldrb	r2, [r3, #1]
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001e10:	429a      	cmp	r2, r3
 8001e12:	d24a      	bcs.n	8001eaa <GAME_PLAY_Phase_Management+0xe2e>
					{
						state_game->test = 165;
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	22a5      	movs	r2, #165	; 0xa5
 8001e18:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	785b      	ldrb	r3, [r3, #1]
 8001e20:	3344      	adds	r3, #68	; 0x44
 8001e22:	011b      	lsls	r3, r3, #4
 8001e24:	68ba      	ldr	r2, [r7, #8]
 8001e26:	4413      	add	r3, r2
 8001e28:	3304      	adds	r3, #4
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28

						if (ptrYugiohCard_src->cardSignature == 11)
 8001e2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e2e:	781b      	ldrb	r3, [r3, #0]
 8001e30:	2b0b      	cmp	r3, #11
 8001e32:	d10b      	bne.n	8001e4c <GAME_PLAY_Phase_Management+0xdd0>
						{
							YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 f94f 	bl	80020dc <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
							state_game->count_chain++;
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	785b      	ldrb	r3, [r3, #1]
 8001e42:	3301      	adds	r3, #1
 8001e44:	b2da      	uxtb	r2, r3
 8001e46:	68bb      	ldr	r3, [r7, #8]
 8001e48:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8001e4a:	e120      	b.n	800208e <GAME_PLAY_Phase_Management+0x1012>
						else if (ptrYugiohCard_src->cardSignature == 12)
 8001e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b0c      	cmp	r3, #12
 8001e52:	d10e      	bne.n	8001e72 <GAME_PLAY_Phase_Management+0xdf6>
							YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8001e54:	6a3b      	ldr	r3, [r7, #32]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4619      	mov	r1, r3
 8001e5e:	4610      	mov	r0, r2
 8001e60:	f000 f95c 	bl	800211c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
							state_game->count_chain++;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	785b      	ldrb	r3, [r3, #1]
 8001e68:	3301      	adds	r3, #1
 8001e6a:	b2da      	uxtb	r2, r3
 8001e6c:	68bb      	ldr	r3, [r7, #8]
 8001e6e:	705a      	strb	r2, [r3, #1]
				break;
 8001e70:	e10d      	b.n	800208e <GAME_PLAY_Phase_Management+0x1012>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8001e72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	2b0e      	cmp	r3, #14
 8001e78:	d004      	beq.n	8001e84 <GAME_PLAY_Phase_Management+0xe08>
 8001e7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	2b0f      	cmp	r3, #15
 8001e80:	f040 8105 	bne.w	800208e <GAME_PLAY_Phase_Management+0x1012>
							state_game->test = 133;
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	2285      	movs	r2, #133	; 0x85
 8001e88:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4619      	mov	r1, r3
 8001e96:	4610      	mov	r0, r2
 8001e98:	f000 fa14 	bl	80022c4 <YUGIOH_Gift_of_the_Mystical_Elf>
							state_game->count_chain++;
 8001e9c:	68bb      	ldr	r3, [r7, #8]
 8001e9e:	785b      	ldrb	r3, [r3, #1]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	b2da      	uxtb	r2, r3
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	705a      	strb	r2, [r3, #1]
				break;
 8001ea8:	e0f1      	b.n	800208e <GAME_PLAY_Phase_Management+0x1012>
						state_game->action = 50;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2232      	movs	r2, #50	; 0x32
 8001eae:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	2205      	movs	r2, #5
 8001eb4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001eb8:	e0e9      	b.n	800208e <GAME_PLAY_Phase_Management+0x1012>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001ec0:	62bb      	str	r3, [r7, #40]	; 0x28

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ec4:	791b      	ldrb	r3, [r3, #4]
 8001ec6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				if(ptrYugiohCard_src->targetPosition == 99){
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	79db      	ldrb	r3, [r3, #7]
 8001ece:	2b63      	cmp	r3, #99	; 0x63
 8001ed0:	d115      	bne.n	8001efe <GAME_PLAY_Phase_Management+0xe82>
					playerDef->life_point -= atk*100;
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	889a      	ldrh	r2, [r3, #4]
 8001ed6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	4619      	mov	r1, r3
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	1ac9      	subs	r1, r1, r3
 8001ee2:	0089      	lsls	r1, r1, #2
 8001ee4:	4419      	add	r1, r3
 8001ee6:	00c9      	lsls	r1, r1, #3
 8001ee8:	1acb      	subs	r3, r1, r3
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	4413      	add	r3, r2
 8001ef0:	b29a      	uxth	r2, r3
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2206      	movs	r2, #6
 8001efa:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				}

				ptrYugiohCard_dst = playerDef->cardOnBoard;
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	3308      	adds	r3, #8
 8001f02:	637b      	str	r3, [r7, #52]	; 0x34

				ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	799b      	ldrb	r3, [r3, #6]
 8001f08:	011b      	lsls	r3, r3, #4
 8001f0a:	3308      	adds	r3, #8
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	4413      	add	r3, r2
 8001f10:	637b      	str	r3, [r7, #52]	; 0x34

				state_game->test = 54;
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	2236      	movs	r2, #54	; 0x36
 8001f16:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				if(ptrYugiohCard_dst->cardState == 0){
 8001f1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1c:	789b      	ldrb	r3, [r3, #2]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d133      	bne.n	8001f8a <GAME_PLAY_Phase_Management+0xf0e>
					//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f24:	795b      	ldrb	r3, [r3, #5]
 8001f26:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
					if(atk < def){
 8001f2a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f2e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d219      	bcs.n	8001f6a <GAME_PLAY_Phase_Management+0xeee>
						playerAtk->life_point -= (def-atk)*100;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	889a      	ldrh	r2, [r3, #4]
 8001f3a:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8001f3e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f42:	1acb      	subs	r3, r1, r3
 8001f44:	b29b      	uxth	r3, r3
 8001f46:	4619      	mov	r1, r3
 8001f48:	0249      	lsls	r1, r1, #9
 8001f4a:	1ac9      	subs	r1, r1, r3
 8001f4c:	0089      	lsls	r1, r1, #2
 8001f4e:	4419      	add	r1, r3
 8001f50:	00c9      	lsls	r1, r1, #3
 8001f52:	1acb      	subs	r3, r1, r3
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	b29b      	uxth	r3, r3
 8001f58:	4413      	add	r3, r2
 8001f5a:	b29a      	uxth	r2, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2206      	movs	r2, #6
 8001f64:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						playerDef->life_point -= (atk-atk2)*100;
						state_game->PlyerAction_Battle_Substate = after_calculate;
					}

				}
				break;
 8001f68:	e093      	b.n	8002092 <GAME_PLAY_Phase_Management+0x1016>
					else if(atk > def){
 8001f6a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001f6e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8001f72:	429a      	cmp	r2, r3
 8001f74:	f240 808d 	bls.w	8002092 <GAME_PLAY_Phase_Management+0x1016>
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8001f78:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001f7a:	6838      	ldr	r0, [r7, #0]
 8001f7c:	f7fe fd35 	bl	80009ea <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	2206      	movs	r2, #6
 8001f84:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001f88:	e083      	b.n	8002092 <GAME_PLAY_Phase_Management+0x1016>
				else if(ptrYugiohCard_dst->cardState == 1){
 8001f8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f8c:	789b      	ldrb	r3, [r3, #2]
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d17f      	bne.n	8002092 <GAME_PLAY_Phase_Management+0x1016>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8001f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f94:	791b      	ldrb	r3, [r3, #4]
 8001f96:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
					state_game->test = 60;
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	223c      	movs	r2, #60	; 0x3c
 8001f9e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(atk < atk2){
 8001fa2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001fa6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d221      	bcs.n	8001ff2 <GAME_PLAY_Phase_Management+0xf76>
						state_game->test = 61;
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	223d      	movs	r2, #61	; 0x3d
 8001fb2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						playerAtk->life_point -= (atk2-atk)*100;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	889a      	ldrh	r2, [r3, #4]
 8001fba:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8001fbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001fc2:	1acb      	subs	r3, r1, r3
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	4619      	mov	r1, r3
 8001fc8:	0249      	lsls	r1, r1, #9
 8001fca:	1ac9      	subs	r1, r1, r3
 8001fcc:	0089      	lsls	r1, r1, #2
 8001fce:	4419      	add	r1, r3
 8001fd0:	00c9      	lsls	r1, r1, #3
 8001fd2:	1acb      	subs	r3, r1, r3
 8001fd4:	009b      	lsls	r3, r3, #2
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	4413      	add	r3, r2
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	809a      	strh	r2, [r3, #4]
						YUGIOH_To_GY(playerAtk, ptrYugiohCard_src);
 8001fe0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f7fe fd01 	bl	80009ea <YUGIOH_To_GY>
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	2206      	movs	r2, #6
 8001fec:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8001ff0:	e04f      	b.n	8002092 <GAME_PLAY_Phase_Management+0x1016>
					else if(atk > atk2){
 8001ff2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001ff6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d949      	bls.n	8002092 <GAME_PLAY_Phase_Management+0x1016>
						state_game->test = 70;
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	2246      	movs	r2, #70	; 0x46
 8002002:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8002006:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002008:	6838      	ldr	r0, [r7, #0]
 800200a:	f7fe fcee 	bl	80009ea <YUGIOH_To_GY>
						playerDef->life_point -= (atk-atk2)*100;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	889a      	ldrh	r2, [r3, #4]
 8002012:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8002016:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800201a:	1acb      	subs	r3, r1, r3
 800201c:	b29b      	uxth	r3, r3
 800201e:	4619      	mov	r1, r3
 8002020:	0249      	lsls	r1, r1, #9
 8002022:	1ac9      	subs	r1, r1, r3
 8002024:	0089      	lsls	r1, r1, #2
 8002026:	4419      	add	r1, r3
 8002028:	00c9      	lsls	r1, r1, #3
 800202a:	1acb      	subs	r3, r1, r3
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	b29b      	uxth	r3, r3
 8002030:	4413      	add	r3, r2
 8002032:	b29a      	uxth	r2, r3
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	809a      	strh	r2, [r3, #4]
						state_game->PlyerAction_Battle_Substate = after_calculate;
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	2206      	movs	r2, #6
 800203c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8002040:	e027      	b.n	8002092 <GAME_PLAY_Phase_Management+0x1016>
			case after_calculate:

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002048:	62bb      	str	r3, [r7, #40]	; 0x28
				YUGIOH_card_clear(ptrYugiohCard_src);
 800204a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800204c:	f7fe fb51 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	889b      	ldrh	r3, [r3, #4]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d005      	beq.n	8002064 <GAME_PLAY_Phase_Management+0xfe8>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	889b      	ldrh	r3, [r3, #4]
 800205c:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8002060:	4293      	cmp	r3, r2
 8002062:	d904      	bls.n	800206e <GAME_PLAY_Phase_Management+0xff2>
					state_game->MainGame_State = Game_Ended;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	2204      	movs	r2, #4
 8002068:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
				}
				else{
					state_game->action = 50;
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 800206c:	e012      	b.n	8002094 <GAME_PLAY_Phase_Management+0x1018>
					state_game->action = 50;
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2232      	movs	r2, #50	; 0x32
 8002072:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002074:	68bb      	ldr	r3, [r7, #8]
 8002076:	2201      	movs	r2, #1
 8002078:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800207c:	e00a      	b.n	8002094 <GAME_PLAY_Phase_Management+0x1018>
				break;
 800207e:	bf00      	nop
 8002080:	e00f      	b.n	80020a2 <GAME_PLAY_Phase_Management+0x1026>
				break;
 8002082:	bf00      	nop
 8002084:	e00d      	b.n	80020a2 <GAME_PLAY_Phase_Management+0x1026>
				break;
 8002086:	bf00      	nop
 8002088:	e00b      	b.n	80020a2 <GAME_PLAY_Phase_Management+0x1026>
				break;
 800208a:	bf00      	nop
 800208c:	e009      	b.n	80020a2 <GAME_PLAY_Phase_Management+0x1026>
				break;
 800208e:	bf00      	nop
 8002090:	e007      	b.n	80020a2 <GAME_PLAY_Phase_Management+0x1026>
				break;
 8002092:	bf00      	nop
			}
			break;
 8002094:	e005      	b.n	80020a2 <GAME_PLAY_Phase_Management+0x1026>
		break;
 8002096:	bf00      	nop
 8002098:	e004      	b.n	80020a4 <GAME_PLAY_Phase_Management+0x1028>
		break;
 800209a:	bf00      	nop
 800209c:	e002      	b.n	80020a4 <GAME_PLAY_Phase_Management+0x1028>
		break;
 800209e:	bf00      	nop
 80020a0:	e000      	b.n	80020a4 <GAME_PLAY_Phase_Management+0x1028>
			break;
 80020a2:	bf00      	nop

	}
}
 80020a4:	bf00      	nop
 80020a6:	3738      	adds	r7, #56	; 0x38
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <Test_EFF>:

void Test_EFF(Player *playerUser,Player *playerOpponent)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	6039      	str	r1, [r7, #0]
	playerUser->life_point += 1000;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	889b      	ldrh	r3, [r3, #4]
 80020ba:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80020be:	b29a      	uxth	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	809a      	strh	r2, [r3, #4]
	playerOpponent->life_point -=100;
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	889b      	ldrh	r3, [r3, #4]
 80020c8:	3b64      	subs	r3, #100	; 0x64
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	809a      	strh	r2, [r3, #4]
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	3338      	adds	r3, #56	; 0x38
 80020e8:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80020ea:	2300      	movs	r3, #0
 80020ec:	72fb      	strb	r3, [r7, #11]
 80020ee:	e00d      	b.n	800210c <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80020f8:	68f9      	ldr	r1, [r7, #12]
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f7fe fc75 	bl	80009ea <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	3310      	adds	r3, #16
 8002104:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002106:	7afb      	ldrb	r3, [r7, #11]
 8002108:	3301      	adds	r3, #1
 800210a:	72fb      	strb	r3, [r7, #11]
 800210c:	7afb      	ldrb	r3, [r7, #11]
 800210e:	2b02      	cmp	r3, #2
 8002110:	d9ee      	bls.n	80020f0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 8002112:	bf00      	nop
 8002114:	bf00      	nop
 8002116:	3710      	adds	r7, #16
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 800211c:	b580      	push	{r7, lr}
 800211e:	b086      	sub	sp, #24
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
 8002124:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	3308      	adds	r3, #8
 800212a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	3338      	adds	r3, #56	; 0x38
 8002130:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	3308      	adds	r3, #8
 8002136:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	3338      	adds	r3, #56	; 0x38
 800213c:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800213e:	2300      	movs	r3, #0
 8002140:	73fb      	strb	r3, [r7, #15]
 8002142:	e00d      	b.n	8002160 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d003      	beq.n	8002154 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 800214c:	6979      	ldr	r1, [r7, #20]
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7fe fc4b 	bl	80009ea <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	3310      	adds	r3, #16
 8002158:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800215a:	7bfb      	ldrb	r3, [r7, #15]
 800215c:	3301      	adds	r3, #1
 800215e:	73fb      	strb	r3, [r7, #15]
 8002160:	7bfb      	ldrb	r3, [r7, #15]
 8002162:	2b02      	cmp	r3, #2
 8002164:	d9ee      	bls.n	8002144 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002166:	2300      	movs	r3, #0
 8002168:	73bb      	strb	r3, [r7, #14]
 800216a:	e00d      	b.n	8002188 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d003      	beq.n	800217c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8002174:	6939      	ldr	r1, [r7, #16]
 8002176:	6838      	ldr	r0, [r7, #0]
 8002178:	f7fe fc37 	bl	80009ea <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 800217c:	693b      	ldr	r3, [r7, #16]
 800217e:	3310      	adds	r3, #16
 8002180:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	3301      	adds	r3, #1
 8002186:	73bb      	strb	r3, [r7, #14]
 8002188:	7bbb      	ldrb	r3, [r7, #14]
 800218a:	2b02      	cmp	r3, #2
 800218c:	d9ee      	bls.n	800216c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 800218e:	bf00      	nop
 8002190:	bf00      	nop
 8002192:	3718      	adds	r7, #24
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}

08002198 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 80021a0:	2300      	movs	r3, #0
 80021a2:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80021ae:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3368      	adds	r3, #104	; 0x68
 80021b4:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	3368      	adds	r3, #104	; 0x68
 80021ba:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80021bc:	2300      	movs	r3, #0
 80021be:	74fb      	strb	r3, [r7, #19]
 80021c0:	e010      	b.n	80021e4 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	697b      	ldr	r3, [r7, #20]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d104      	bne.n	80021d8 <YUGIOH_Reborn+0x40>
			flag = 1;
 80021ce:	2301      	movs	r3, #1
 80021d0:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 80021d2:	7cfb      	ldrb	r3, [r7, #19]
 80021d4:	77bb      	strb	r3, [r7, #30]
			break;
 80021d6:	e008      	b.n	80021ea <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80021d8:	697b      	ldr	r3, [r7, #20]
 80021da:	3310      	adds	r3, #16
 80021dc:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80021de:	7cfb      	ldrb	r3, [r7, #19]
 80021e0:	3301      	adds	r3, #1
 80021e2:	74fb      	strb	r3, [r7, #19]
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	2b13      	cmp	r3, #19
 80021e8:	d9eb      	bls.n	80021c2 <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	3338      	adds	r3, #56	; 0x38
 80021ee:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80021f0:	7ffb      	ldrb	r3, [r7, #31]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d134      	bne.n	8002260 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	799a      	ldrb	r2, [r3, #6]
 80021fa:	4b1b      	ldr	r3, [pc, #108]	; (8002268 <YUGIOH_Reborn+0xd0>)
 80021fc:	fba3 1302 	umull	r1, r3, r3, r2
 8002200:	0899      	lsrs	r1, r3, #2
 8002202:	460b      	mov	r3, r1
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	440b      	add	r3, r1
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	1ad3      	subs	r3, r2, r3
 800220c:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 800220e:	7afb      	ldrb	r3, [r7, #11]
 8002210:	011b      	lsls	r3, r3, #4
 8002212:	3308      	adds	r3, #8
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	4413      	add	r3, r2
 8002218:	4619      	mov	r1, r3
 800221a:	69b8      	ldr	r0, [r7, #24]
 800221c:	f7fe fa32 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 8002220:	7fbb      	ldrb	r3, [r7, #30]
 8002222:	3301      	adds	r3, #1
 8002224:	011b      	lsls	r3, r3, #4
 8002226:	3368      	adds	r3, #104	; 0x68
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	4413      	add	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 800222e:	7fbb      	ldrb	r3, [r7, #30]
 8002230:	011b      	lsls	r3, r3, #4
 8002232:	3368      	adds	r3, #104	; 0x68
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	4413      	add	r3, r2
 8002238:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 800223a:	7fbb      	ldrb	r3, [r7, #30]
 800223c:	60fb      	str	r3, [r7, #12]
 800223e:	e00c      	b.n	800225a <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8002240:	6979      	ldr	r1, [r7, #20]
 8002242:	69b8      	ldr	r0, [r7, #24]
 8002244:	f7fe fa1e 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	3310      	adds	r3, #16
 800224c:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	3310      	adds	r3, #16
 8002252:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	3301      	adds	r3, #1
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2b13      	cmp	r3, #19
 800225e:	ddef      	ble.n	8002240 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8002260:	bf00      	nop
 8002262:	3720      	adds	r7, #32
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	aaaaaaab 	.word	0xaaaaaaab

0800226c <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800227a:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002282:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	799a      	ldrb	r2, [r3, #6]
 8002288:	4b0d      	ldr	r3, [pc, #52]	; (80022c0 <YUGIOH_Ancient_Rules+0x54>)
 800228a:	fba3 1302 	umull	r1, r3, r3, r2
 800228e:	0899      	lsrs	r1, r3, #2
 8002290:	460b      	mov	r3, r1
 8002292:	005b      	lsls	r3, r3, #1
 8002294:	440b      	add	r3, r1
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	3308      	adds	r3, #8
 80022a0:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 80022a2:	7cfb      	ldrb	r3, [r7, #19]
 80022a4:	011b      	lsls	r3, r3, #4
 80022a6:	3308      	adds	r3, #8
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	4413      	add	r3, r2
 80022ac:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80022ae:	68f9      	ldr	r1, [r7, #12]
 80022b0:	6978      	ldr	r0, [r7, #20]
 80022b2:	f7fe f9e7 	bl	8000684 <YUGIOH_card_copy>

}
 80022b6:	bf00      	nop
 80022b8:	3718      	adds	r7, #24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	aaaaaaab 	.word	0xaaaaaaab

080022c4 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 80022c4:	b480      	push	{r7}
 80022c6:	b087      	sub	sp, #28
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	3308      	adds	r3, #8
 80022d2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3338      	adds	r3, #56	; 0x38
 80022d8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	3308      	adds	r3, #8
 80022de:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	3338      	adds	r3, #56	; 0x38
 80022e4:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80022ea:	2300      	movs	r3, #0
 80022ec:	73bb      	strb	r3, [r7, #14]
 80022ee:	e00c      	b.n	800230a <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80022f0:	697b      	ldr	r3, [r7, #20]
 80022f2:	785b      	ldrb	r3, [r3, #1]
 80022f4:	2b01      	cmp	r3, #1
 80022f6:	d102      	bne.n	80022fe <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	3301      	adds	r3, #1
 80022fc:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	3310      	adds	r3, #16
 8002302:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002304:	7bbb      	ldrb	r3, [r7, #14]
 8002306:	3301      	adds	r3, #1
 8002308:	73bb      	strb	r3, [r7, #14]
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d9ef      	bls.n	80022f0 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8002310:	2300      	movs	r3, #0
 8002312:	737b      	strb	r3, [r7, #13]
 8002314:	e00c      	b.n	8002330 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	785b      	ldrb	r3, [r3, #1]
 800231a:	2b01      	cmp	r3, #1
 800231c:	d102      	bne.n	8002324 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 800231e:	7bfb      	ldrb	r3, [r7, #15]
 8002320:	3301      	adds	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	3310      	adds	r3, #16
 8002328:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800232a:	7b7b      	ldrb	r3, [r7, #13]
 800232c:	3301      	adds	r3, #1
 800232e:	737b      	strb	r3, [r7, #13]
 8002330:	7b7b      	ldrb	r3, [r7, #13]
 8002332:	2b02      	cmp	r3, #2
 8002334:	d9ef      	bls.n	8002316 <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	889a      	ldrh	r2, [r3, #4]
 800233a:	7bfb      	ldrb	r3, [r7, #15]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4619      	mov	r1, r3
 8002340:	0089      	lsls	r1, r1, #2
 8002342:	440b      	add	r3, r1
 8002344:	4619      	mov	r1, r3
 8002346:	0109      	lsls	r1, r1, #4
 8002348:	1acb      	subs	r3, r1, r3
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	b29b      	uxth	r3, r3
 800234e:	4413      	add	r3, r2
 8002350:	b29a      	uxth	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	809a      	strh	r2, [r3, #4]

}
 8002356:	bf00      	nop
 8002358:	371c      	adds	r7, #28
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8002364:	b480      	push	{r7}
 8002366:	b087      	sub	sp, #28
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002374:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800237c:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800237e:	697b      	ldr	r3, [r7, #20]
 8002380:	799a      	ldrb	r2, [r3, #6]
 8002382:	4b12      	ldr	r3, [pc, #72]	; (80023cc <YUGIOH_Stop_Defense+0x68>)
 8002384:	fba3 1302 	umull	r1, r3, r3, r2
 8002388:	0899      	lsrs	r1, r3, #2
 800238a:	460b      	mov	r3, r1
 800238c:	005b      	lsls	r3, r3, #1
 800238e:	440b      	add	r3, r1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	1ad3      	subs	r3, r2, r3
 8002394:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	3308      	adds	r3, #8
 800239a:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 800239c:	7cfb      	ldrb	r3, [r7, #19]
 800239e:	011b      	lsls	r3, r3, #4
 80023a0:	3308      	adds	r3, #8
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	4413      	add	r3, r2
 80023a6:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	789b      	ldrb	r3, [r3, #2]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d106      	bne.n	80023be <YUGIOH_Stop_Defense+0x5a>
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	68db      	ldr	r3, [r3, #12]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d002      	beq.n	80023be <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2201      	movs	r2, #1
 80023bc:	709a      	strb	r2, [r3, #2]
	}

}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	aaaaaaab 	.word	0xaaaaaaab

080023d0 <YUGIOH_Check_Trap_On_board>:
//
//}


uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	3308      	adds	r3, #8
 80023de:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	e016      	b.n	8002414 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	68da      	ldr	r2, [r3, #12]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d10a      	bne.n	8002408 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	7a5b      	ldrb	r3, [r3, #9]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d006      	beq.n	8002408 <YUGIOH_Check_Trap_On_board+0x38>
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	785b      	ldrb	r3, [r3, #1]
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d102      	bne.n	8002408 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	b2db      	uxtb	r3, r3
 8002406:	e009      	b.n	800241c <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	3310      	adds	r3, #16
 800240c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	3301      	adds	r3, #1
 8002412:	60bb      	str	r3, [r7, #8]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	dde5      	ble.n	80023e6 <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 800241a:	23ff      	movs	r3, #255	; 0xff
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8002428:	b480      	push	{r7}
 800242a:	b085      	sub	sp, #20
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3308      	adds	r3, #8
 8002434:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8002436:	2300      	movs	r3, #0
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	e00c      	b.n	8002456 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d002      	beq.n	800244a <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	2201      	movs	r2, #1
 8002448:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	3310      	adds	r3, #16
 800244e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	3301      	adds	r3, #1
 8002454:	60bb      	str	r3, [r7, #8]
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	2b02      	cmp	r3, #2
 800245a:	ddef      	ble.n	800243c <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3714      	adds	r7, #20
 8002462:	46bd      	mov	sp, r7
 8002464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002468:	4770      	bx	lr
	...

0800246c <MainGUI>:


void MainGUI(){
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8002472:	4b47      	ldr	r3, [pc, #284]	; (8002590 <MainGUI+0x124>)
 8002474:	2200      	movs	r2, #0
 8002476:	9202      	str	r2, [sp, #8]
 8002478:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800247c:	9201      	str	r2, [sp, #4]
 800247e:	685a      	ldr	r2, [r3, #4]
 8002480:	9200      	str	r2, [sp, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a43      	ldr	r2, [pc, #268]	; (8002594 <MainGUI+0x128>)
 8002486:	2105      	movs	r1, #5
 8002488:	2005      	movs	r0, #5
 800248a:	f000 ffe8 	bl	800345e <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800248e:	4b40      	ldr	r3, [pc, #256]	; (8002590 <MainGUI+0x124>)
 8002490:	2200      	movs	r2, #0
 8002492:	9202      	str	r2, [sp, #8]
 8002494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002498:	9201      	str	r2, [sp, #4]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	9200      	str	r2, [sp, #0]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a3d      	ldr	r2, [pc, #244]	; (8002598 <MainGUI+0x12c>)
 80024a2:	2114      	movs	r1, #20
 80024a4:	2005      	movs	r0, #5
 80024a6:	f000 ffda 	bl	800345e <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024aa:	4b39      	ldr	r3, [pc, #228]	; (8002590 <MainGUI+0x124>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	9202      	str	r2, [sp, #8]
 80024b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024b4:	9201      	str	r2, [sp, #4]
 80024b6:	685a      	ldr	r2, [r3, #4]
 80024b8:	9200      	str	r2, [sp, #0]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a37      	ldr	r2, [pc, #220]	; (800259c <MainGUI+0x130>)
 80024be:	2123      	movs	r1, #35	; 0x23
 80024c0:	2005      	movs	r0, #5
 80024c2:	f000 ffcc 	bl	800345e <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024c6:	4b32      	ldr	r3, [pc, #200]	; (8002590 <MainGUI+0x124>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	9202      	str	r2, [sp, #8]
 80024cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024d0:	9201      	str	r2, [sp, #4]
 80024d2:	685a      	ldr	r2, [r3, #4]
 80024d4:	9200      	str	r2, [sp, #0]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a31      	ldr	r2, [pc, #196]	; (80025a0 <MainGUI+0x134>)
 80024da:	2132      	movs	r1, #50	; 0x32
 80024dc:	2000      	movs	r0, #0
 80024de:	f000 ffbe 	bl	800345e <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024e2:	4b2b      	ldr	r3, [pc, #172]	; (8002590 <MainGUI+0x124>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	9202      	str	r2, [sp, #8]
 80024e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024ec:	9201      	str	r2, [sp, #4]
 80024ee:	685a      	ldr	r2, [r3, #4]
 80024f0:	9200      	str	r2, [sp, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a2b      	ldr	r2, [pc, #172]	; (80025a4 <MainGUI+0x138>)
 80024f6:	213c      	movs	r1, #60	; 0x3c
 80024f8:	2000      	movs	r0, #0
 80024fa:	f000 ffb0 	bl	800345e <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 80024fe:	4b24      	ldr	r3, [pc, #144]	; (8002590 <MainGUI+0x124>)
 8002500:	2200      	movs	r2, #0
 8002502:	9202      	str	r2, [sp, #8]
 8002504:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002508:	9201      	str	r2, [sp, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	9200      	str	r2, [sp, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a25      	ldr	r2, [pc, #148]	; (80025a8 <MainGUI+0x13c>)
 8002512:	2105      	movs	r1, #5
 8002514:	2005      	movs	r0, #5
 8002516:	f000 ff58 	bl	80033ca <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800251a:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <MainGUI+0x124>)
 800251c:	2200      	movs	r2, #0
 800251e:	9202      	str	r2, [sp, #8]
 8002520:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002524:	9201      	str	r2, [sp, #4]
 8002526:	685a      	ldr	r2, [r3, #4]
 8002528:	9200      	str	r2, [sp, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a1a      	ldr	r2, [pc, #104]	; (8002598 <MainGUI+0x12c>)
 800252e:	2114      	movs	r1, #20
 8002530:	2005      	movs	r0, #5
 8002532:	f000 ff4a 	bl	80033ca <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002536:	4b16      	ldr	r3, [pc, #88]	; (8002590 <MainGUI+0x124>)
 8002538:	2200      	movs	r2, #0
 800253a:	9202      	str	r2, [sp, #8]
 800253c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a14      	ldr	r2, [pc, #80]	; (800259c <MainGUI+0x130>)
 800254a:	2123      	movs	r1, #35	; 0x23
 800254c:	2005      	movs	r0, #5
 800254e:	f000 ff3c 	bl	80033ca <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002552:	4b0f      	ldr	r3, [pc, #60]	; (8002590 <MainGUI+0x124>)
 8002554:	2200      	movs	r2, #0
 8002556:	9202      	str	r2, [sp, #8]
 8002558:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800255c:	9201      	str	r2, [sp, #4]
 800255e:	685a      	ldr	r2, [r3, #4]
 8002560:	9200      	str	r2, [sp, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4a0e      	ldr	r2, [pc, #56]	; (80025a0 <MainGUI+0x134>)
 8002566:	2132      	movs	r1, #50	; 0x32
 8002568:	2000      	movs	r0, #0
 800256a:	f000 ff2e 	bl	80033ca <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800256e:	4b08      	ldr	r3, [pc, #32]	; (8002590 <MainGUI+0x124>)
 8002570:	2200      	movs	r2, #0
 8002572:	9202      	str	r2, [sp, #8]
 8002574:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002578:	9201      	str	r2, [sp, #4]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	9200      	str	r2, [sp, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a08      	ldr	r2, [pc, #32]	; (80025a4 <MainGUI+0x138>)
 8002582:	213c      	movs	r1, #60	; 0x3c
 8002584:	2000      	movs	r0, #0
 8002586:	f000 ff20 	bl	80033ca <ST7735_WriteString>
}
 800258a:	bf00      	nop
 800258c:	46bd      	mov	sp, r7
 800258e:	bd80      	pop	{r7, pc}
 8002590:	2400000c 	.word	0x2400000c
 8002594:	0800d678 	.word	0x0800d678
 8002598:	0800d748 	.word	0x0800d748
 800259c:	0800d758 	.word	0x0800d758
 80025a0:	0800d760 	.word	0x0800d760
 80025a4:	0800d624 	.word	0x0800d624
 80025a8:	0800d618 	.word	0x0800d618

080025ac <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af04      	add	r7, sp, #16
 80025b2:	6078      	str	r0, [r7, #4]
 80025b4:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 80025b6:	2300      	movs	r3, #0
 80025b8:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 80025ba:	4b5e      	ldr	r3, [pc, #376]	; (8002734 <LCDvalue+0x188>)
 80025bc:	881a      	ldrh	r2, [r3, #0]
 80025be:	4b5e      	ldr	r3, [pc, #376]	; (8002738 <LCDvalue+0x18c>)
 80025c0:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 80025c2:	4b5e      	ldr	r3, [pc, #376]	; (800273c <LCDvalue+0x190>)
 80025c4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80025c8:	4a5d      	ldr	r2, [pc, #372]	; (8002740 <LCDvalue+0x194>)
 80025ca:	f04f 0300 	mov.w	r3, #0
 80025ce:	f7fd fed7 	bl	8000380 <__aeabi_uldivmod>
 80025d2:	4602      	mov	r2, r0
 80025d4:	460b      	mov	r3, r1
 80025d6:	4613      	mov	r3, r2
 80025d8:	817b      	strh	r3, [r7, #10]
	time -= a;
 80025da:	4b57      	ldr	r3, [pc, #348]	; (8002738 <LCDvalue+0x18c>)
 80025dc:	881a      	ldrh	r2, [r3, #0]
 80025de:	897b      	ldrh	r3, [r7, #10]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	b29a      	uxth	r2, r3
 80025e4:	4b54      	ldr	r3, [pc, #336]	; (8002738 <LCDvalue+0x18c>)
 80025e6:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 80025e8:	4b53      	ldr	r3, [pc, #332]	; (8002738 <LCDvalue+0x18c>)
 80025ea:	881b      	ldrh	r3, [r3, #0]
 80025ec:	461a      	mov	r2, r3
 80025ee:	4955      	ldr	r1, [pc, #340]	; (8002744 <LCDvalue+0x198>)
 80025f0:	4855      	ldr	r0, [pc, #340]	; (8002748 <LCDvalue+0x19c>)
 80025f2:	f00a fc87 	bl	800cf04 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 80025f6:	2300      	movs	r3, #0
 80025f8:	60fb      	str	r3, [r7, #12]
 80025fa:	e012      	b.n	8002622 <LCDvalue+0x76>
		if(t_c[i] == 0){
 80025fc:	4a52      	ldr	r2, [pc, #328]	; (8002748 <LCDvalue+0x19c>)
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4413      	add	r3, r2
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d109      	bne.n	800261c <LCDvalue+0x70>
			t_c[i] = 32;
 8002608:	4a4f      	ldr	r2, [pc, #316]	; (8002748 <LCDvalue+0x19c>)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	4413      	add	r3, r2
 800260e:	2220      	movs	r2, #32
 8002610:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	3301      	adds	r3, #1
 8002616:	4a4c      	ldr	r2, [pc, #304]	; (8002748 <LCDvalue+0x19c>)
 8002618:	2120      	movs	r1, #32
 800261a:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	60fb      	str	r3, [r7, #12]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2b02      	cmp	r3, #2
 8002626:	dde9      	ble.n	80025fc <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8002628:	4b43      	ldr	r3, [pc, #268]	; (8002738 <LCDvalue+0x18c>)
 800262a:	881b      	ldrh	r3, [r3, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d105      	bne.n	800263c <LCDvalue+0x90>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8002630:	4846      	ldr	r0, [pc, #280]	; (800274c <LCDvalue+0x1a0>)
 8002632:	f008 f88b 	bl	800a74c <HAL_TIM_Base_Stop_IT>
		time = 0;
 8002636:	4b40      	ldr	r3, [pc, #256]	; (8002738 <LCDvalue+0x18c>)
 8002638:	2200      	movs	r2, #0
 800263a:	801a      	strh	r2, [r3, #0]
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	889b      	ldrh	r3, [r3, #4]
 8002640:	461a      	mov	r2, r3
 8002642:	4940      	ldr	r1, [pc, #256]	; (8002744 <LCDvalue+0x198>)
 8002644:	4842      	ldr	r0, [pc, #264]	; (8002750 <LCDvalue+0x1a4>)
 8002646:	f00a fc5d 	bl	800cf04 <siprintf>
	if(C_LP_ATK[3] == 0){
 800264a:	4b41      	ldr	r3, [pc, #260]	; (8002750 <LCDvalue+0x1a4>)
 800264c:	78db      	ldrb	r3, [r3, #3]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10e      	bne.n	8002670 <LCDvalue+0xc4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8002652:	4b3f      	ldr	r3, [pc, #252]	; (8002750 <LCDvalue+0x1a4>)
 8002654:	789a      	ldrb	r2, [r3, #2]
 8002656:	4b3e      	ldr	r3, [pc, #248]	; (8002750 <LCDvalue+0x1a4>)
 8002658:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 800265a:	4b3d      	ldr	r3, [pc, #244]	; (8002750 <LCDvalue+0x1a4>)
 800265c:	785a      	ldrb	r2, [r3, #1]
 800265e:	4b3c      	ldr	r3, [pc, #240]	; (8002750 <LCDvalue+0x1a4>)
 8002660:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8002662:	4b3b      	ldr	r3, [pc, #236]	; (8002750 <LCDvalue+0x1a4>)
 8002664:	781a      	ldrb	r2, [r3, #0]
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <LCDvalue+0x1a4>)
 8002668:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 800266a:	4b39      	ldr	r3, [pc, #228]	; (8002750 <LCDvalue+0x1a4>)
 800266c:	2220      	movs	r2, #32
 800266e:	701a      	strb	r2, [r3, #0]
	}

	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	781a      	ldrb	r2, [r3, #0]
 8002674:	4b37      	ldr	r3, [pc, #220]	; (8002754 <LCDvalue+0x1a8>)
 8002676:	9203      	str	r2, [sp, #12]
 8002678:	2200      	movs	r2, #0
 800267a:	9202      	str	r2, [sp, #8]
 800267c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002680:	9201      	str	r2, [sp, #4]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	9200      	str	r2, [sp, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a31      	ldr	r2, [pc, #196]	; (8002750 <LCDvalue+0x1a4>)
 800268a:	2114      	movs	r1, #20
 800268c:	205a      	movs	r0, #90	; 0x5a
 800268e:	f000 ff30 	bl	80034f2 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	781a      	ldrb	r2, [r3, #0]
 8002696:	4b2f      	ldr	r3, [pc, #188]	; (8002754 <LCDvalue+0x1a8>)
 8002698:	9203      	str	r2, [sp, #12]
 800269a:	2200      	movs	r2, #0
 800269c:	9202      	str	r2, [sp, #8]
 800269e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026a2:	9201      	str	r2, [sp, #4]
 80026a4:	685a      	ldr	r2, [r3, #4]
 80026a6:	9200      	str	r2, [sp, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a27      	ldr	r2, [pc, #156]	; (8002748 <LCDvalue+0x19c>)
 80026ac:	2132      	movs	r1, #50	; 0x32
 80026ae:	2069      	movs	r0, #105	; 0x69
 80026b0:	f000 ff1f 	bl	80034f2 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	889b      	ldrh	r3, [r3, #4]
 80026b8:	461a      	mov	r2, r3
 80026ba:	4922      	ldr	r1, [pc, #136]	; (8002744 <LCDvalue+0x198>)
 80026bc:	4826      	ldr	r0, [pc, #152]	; (8002758 <LCDvalue+0x1ac>)
 80026be:	f00a fc21 	bl	800cf04 <siprintf>
	if(C_LP_DEF[3] == 0){
 80026c2:	4b25      	ldr	r3, [pc, #148]	; (8002758 <LCDvalue+0x1ac>)
 80026c4:	78db      	ldrb	r3, [r3, #3]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10e      	bne.n	80026e8 <LCDvalue+0x13c>
		C_LP_DEF[3] = C_LP_DEF[2];
 80026ca:	4b23      	ldr	r3, [pc, #140]	; (8002758 <LCDvalue+0x1ac>)
 80026cc:	789a      	ldrb	r2, [r3, #2]
 80026ce:	4b22      	ldr	r3, [pc, #136]	; (8002758 <LCDvalue+0x1ac>)
 80026d0:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 80026d2:	4b21      	ldr	r3, [pc, #132]	; (8002758 <LCDvalue+0x1ac>)
 80026d4:	785a      	ldrb	r2, [r3, #1]
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <LCDvalue+0x1ac>)
 80026d8:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 80026da:	4b1f      	ldr	r3, [pc, #124]	; (8002758 <LCDvalue+0x1ac>)
 80026dc:	781a      	ldrb	r2, [r3, #0]
 80026de:	4b1e      	ldr	r3, [pc, #120]	; (8002758 <LCDvalue+0x1ac>)
 80026e0:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 80026e2:	4b1d      	ldr	r3, [pc, #116]	; (8002758 <LCDvalue+0x1ac>)
 80026e4:	2220      	movs	r2, #32
 80026e6:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	781a      	ldrb	r2, [r3, #0]
 80026ec:	4b19      	ldr	r3, [pc, #100]	; (8002754 <LCDvalue+0x1a8>)
 80026ee:	9203      	str	r2, [sp, #12]
 80026f0:	2200      	movs	r2, #0
 80026f2:	9202      	str	r2, [sp, #8]
 80026f4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80026f8:	9201      	str	r2, [sp, #4]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	9200      	str	r2, [sp, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <LCDvalue+0x1ac>)
 8002702:	2114      	movs	r1, #20
 8002704:	205a      	movs	r0, #90	; 0x5a
 8002706:	f000 fef4 	bl	80034f2 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	781a      	ldrb	r2, [r3, #0]
 800270e:	4b11      	ldr	r3, [pc, #68]	; (8002754 <LCDvalue+0x1a8>)
 8002710:	9203      	str	r2, [sp, #12]
 8002712:	2200      	movs	r2, #0
 8002714:	9202      	str	r2, [sp, #8]
 8002716:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800271a:	9201      	str	r2, [sp, #4]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	9200      	str	r2, [sp, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <LCDvalue+0x1b0>)
 8002724:	2132      	movs	r1, #50	; 0x32
 8002726:	2069      	movs	r0, #105	; 0x69
 8002728:	f000 fee3 	bl	80034f2 <ST7735_WriteStringNSS>

}
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	24000000 	.word	0x24000000
 8002738:	2400016c 	.word	0x2400016c
 800273c:	24000e98 	.word	0x24000e98
 8002740:	000f4240 	.word	0x000f4240
 8002744:	0800d774 	.word	0x0800d774
 8002748:	24000170 	.word	0x24000170
 800274c:	240002e4 	.word	0x240002e4
 8002750:	24000164 	.word	0x24000164
 8002754:	2400000c 	.word	0x2400000c
 8002758:	24000168 	.word	0x24000168
 800275c:	0800d674 	.word	0x0800d674

08002760 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002760:	b480      	push	{r7}
 8002762:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002764:	4b3d      	ldr	r3, [pc, #244]	; (800285c <SystemInit+0xfc>)
 8002766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800276a:	4a3c      	ldr	r2, [pc, #240]	; (800285c <SystemInit+0xfc>)
 800276c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002770:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8002774:	4b39      	ldr	r3, [pc, #228]	; (800285c <SystemInit+0xfc>)
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	4a38      	ldr	r2, [pc, #224]	; (800285c <SystemInit+0xfc>)
 800277a:	f043 0310 	orr.w	r3, r3, #16
 800277e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002780:	4b37      	ldr	r3, [pc, #220]	; (8002860 <SystemInit+0x100>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 030f 	and.w	r3, r3, #15
 8002788:	2b06      	cmp	r3, #6
 800278a:	d807      	bhi.n	800279c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800278c:	4b34      	ldr	r3, [pc, #208]	; (8002860 <SystemInit+0x100>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f023 030f 	bic.w	r3, r3, #15
 8002794:	4a32      	ldr	r2, [pc, #200]	; (8002860 <SystemInit+0x100>)
 8002796:	f043 0307 	orr.w	r3, r3, #7
 800279a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <SystemInit+0x104>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a30      	ldr	r2, [pc, #192]	; (8002864 <SystemInit+0x104>)
 80027a2:	f043 0301 	orr.w	r3, r3, #1
 80027a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80027a8:	4b2e      	ldr	r3, [pc, #184]	; (8002864 <SystemInit+0x104>)
 80027aa:	2200      	movs	r2, #0
 80027ac:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80027ae:	4b2d      	ldr	r3, [pc, #180]	; (8002864 <SystemInit+0x104>)
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	492c      	ldr	r1, [pc, #176]	; (8002864 <SystemInit+0x104>)
 80027b4:	4b2c      	ldr	r3, [pc, #176]	; (8002868 <SystemInit+0x108>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80027ba:	4b29      	ldr	r3, [pc, #164]	; (8002860 <SystemInit+0x100>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0308 	and.w	r3, r3, #8
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d007      	beq.n	80027d6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80027c6:	4b26      	ldr	r3, [pc, #152]	; (8002860 <SystemInit+0x100>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f023 030f 	bic.w	r3, r3, #15
 80027ce:	4a24      	ldr	r2, [pc, #144]	; (8002860 <SystemInit+0x100>)
 80027d0:	f043 0307 	orr.w	r3, r3, #7
 80027d4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80027d6:	4b23      	ldr	r3, [pc, #140]	; (8002864 <SystemInit+0x104>)
 80027d8:	2200      	movs	r2, #0
 80027da:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80027dc:	4b21      	ldr	r3, [pc, #132]	; (8002864 <SystemInit+0x104>)
 80027de:	2200      	movs	r2, #0
 80027e0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80027e2:	4b20      	ldr	r3, [pc, #128]	; (8002864 <SystemInit+0x104>)
 80027e4:	2200      	movs	r2, #0
 80027e6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80027e8:	4b1e      	ldr	r3, [pc, #120]	; (8002864 <SystemInit+0x104>)
 80027ea:	4a20      	ldr	r2, [pc, #128]	; (800286c <SystemInit+0x10c>)
 80027ec:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80027ee:	4b1d      	ldr	r3, [pc, #116]	; (8002864 <SystemInit+0x104>)
 80027f0:	4a1f      	ldr	r2, [pc, #124]	; (8002870 <SystemInit+0x110>)
 80027f2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80027f4:	4b1b      	ldr	r3, [pc, #108]	; (8002864 <SystemInit+0x104>)
 80027f6:	4a1f      	ldr	r2, [pc, #124]	; (8002874 <SystemInit+0x114>)
 80027f8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027fa:	4b1a      	ldr	r3, [pc, #104]	; (8002864 <SystemInit+0x104>)
 80027fc:	2200      	movs	r2, #0
 80027fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002800:	4b18      	ldr	r3, [pc, #96]	; (8002864 <SystemInit+0x104>)
 8002802:	4a1c      	ldr	r2, [pc, #112]	; (8002874 <SystemInit+0x114>)
 8002804:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002806:	4b17      	ldr	r3, [pc, #92]	; (8002864 <SystemInit+0x104>)
 8002808:	2200      	movs	r2, #0
 800280a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800280c:	4b15      	ldr	r3, [pc, #84]	; (8002864 <SystemInit+0x104>)
 800280e:	4a19      	ldr	r2, [pc, #100]	; (8002874 <SystemInit+0x114>)
 8002810:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002812:	4b14      	ldr	r3, [pc, #80]	; (8002864 <SystemInit+0x104>)
 8002814:	2200      	movs	r2, #0
 8002816:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002818:	4b12      	ldr	r3, [pc, #72]	; (8002864 <SystemInit+0x104>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a11      	ldr	r2, [pc, #68]	; (8002864 <SystemInit+0x104>)
 800281e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002822:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002824:	4b0f      	ldr	r3, [pc, #60]	; (8002864 <SystemInit+0x104>)
 8002826:	2200      	movs	r2, #0
 8002828:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800282a:	4b13      	ldr	r3, [pc, #76]	; (8002878 <SystemInit+0x118>)
 800282c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282e:	4a12      	ldr	r2, [pc, #72]	; (8002878 <SystemInit+0x118>)
 8002830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002834:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002836:	4b11      	ldr	r3, [pc, #68]	; (800287c <SystemInit+0x11c>)
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	4b11      	ldr	r3, [pc, #68]	; (8002880 <SystemInit+0x120>)
 800283c:	4013      	ands	r3, r2
 800283e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002842:	d202      	bcs.n	800284a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8002844:	4b0f      	ldr	r3, [pc, #60]	; (8002884 <SystemInit+0x124>)
 8002846:	2201      	movs	r2, #1
 8002848:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800284a:	4b0f      	ldr	r3, [pc, #60]	; (8002888 <SystemInit+0x128>)
 800284c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8002850:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8002852:	bf00      	nop
 8002854:	46bd      	mov	sp, r7
 8002856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285a:	4770      	bx	lr
 800285c:	e000ed00 	.word	0xe000ed00
 8002860:	52002000 	.word	0x52002000
 8002864:	58024400 	.word	0x58024400
 8002868:	eaf6ed7f 	.word	0xeaf6ed7f
 800286c:	02020200 	.word	0x02020200
 8002870:	01ff0000 	.word	0x01ff0000
 8002874:	01010280 	.word	0x01010280
 8002878:	580000c0 	.word	0x580000c0
 800287c:	5c001000 	.word	0x5c001000
 8002880:	ffff0000 	.word	0xffff0000
 8002884:	51008108 	.word	0x51008108
 8002888:	52004000 	.word	0x52004000

0800288c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8002892:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002896:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8002898:	bf00      	nop
 800289a:	4b37      	ldr	r3, [pc, #220]	; (8002978 <main+0xec>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <main+0x24>
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	1e5a      	subs	r2, r3, #1
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	dcf4      	bgt.n	800289a <main+0xe>
	if ( timeout < 0 )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	da01      	bge.n	80028ba <main+0x2e>
	{
		Error_Handler();
 80028b6:	f000 fbeb 	bl	8003090 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028ba:	f001 fb69 	bl	8003f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028be:	f000 f863 	bl	8002988 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80028c2:	f000 f8e5 	bl	8002a90 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <main+0xec>)
 80028c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028cc:	4a2a      	ldr	r2, [pc, #168]	; (8002978 <main+0xec>)
 80028ce:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028d6:	4b28      	ldr	r3, [pc, #160]	; (8002978 <main+0xec>)
 80028d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e0:	603b      	str	r3, [r7, #0]
 80028e2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80028e4:	2000      	movs	r0, #0
 80028e6:	f004 fd7f 	bl	80073e8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80028ea:	2100      	movs	r1, #0
 80028ec:	2000      	movs	r0, #0
 80028ee:	f004 fd95 	bl	800741c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80028f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028f6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80028f8:	bf00      	nop
 80028fa:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <main+0xec>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002902:	2b00      	cmp	r3, #0
 8002904:	d104      	bne.n	8002910 <main+0x84>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	1e5a      	subs	r2, r3, #1
 800290a:	607a      	str	r2, [r7, #4]
 800290c:	2b00      	cmp	r3, #0
 800290e:	dcf4      	bgt.n	80028fa <main+0x6e>
	if ( timeout < 0 )
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2b00      	cmp	r3, #0
 8002914:	da01      	bge.n	800291a <main+0x8e>
	{
		Error_Handler();
 8002916:	f000 fbbb 	bl	8003090 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800291a:	f000 fa6d 	bl	8002df8 <MX_GPIO_Init>
  MX_ETH_Init();
 800291e:	f000 f8e9 	bl	8002af4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8002922:	f000 f9c1 	bl	8002ca8 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8002926:	f000 fa3f 	bl	8002da8 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800292a:	f000 fa0b 	bl	8002d44 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800292e:	f000 f92d 	bl	8002b8c <MX_SPI3_Init>
  MX_TIM7_Init();
 8002932:	f000 f983 	bl	8002c3c <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8002936:	f000 fcb3 	bl	80032a0 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800293a:	2000      	movs	r0, #0
 800293c:	f000 ffbd 	bl	80038ba <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8002940:	2000      	movs	r0, #0
 8002942:	f000 ffa9 	bl	8003898 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8002946:	f001 fba9 	bl	800409c <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	4b0b      	ldr	r3, [pc, #44]	; (800297c <main+0xf0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2bc8      	cmp	r3, #200	; 0xc8
 8002954:	d9f7      	bls.n	8002946 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8002956:	f001 fba1 	bl	800409c <HAL_GetTick>
 800295a:	4603      	mov	r3, r0
 800295c:	4a07      	ldr	r2, [pc, #28]	; (800297c <main+0xf0>)
 800295e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002960:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002964:	4806      	ldr	r0, [pc, #24]	; (8002980 <main+0xf4>)
 8002966:	f004 fd24 	bl	80073b2 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800296a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800296e:	4905      	ldr	r1, [pc, #20]	; (8002984 <main+0xf8>)
 8002970:	4618      	mov	r0, r3
 8002972:	f7fe f87b 	bl	8000a6c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8002976:	e7e6      	b.n	8002946 <main+0xba>
 8002978:	58024400 	.word	0x58024400
 800297c:	24000e94 	.word	0x24000e94
 8002980:	58020400 	.word	0x58020400
 8002984:	240009bc 	.word	0x240009bc

08002988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b09c      	sub	sp, #112	; 0x70
 800298c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800298e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002992:	224c      	movs	r2, #76	; 0x4c
 8002994:	2100      	movs	r1, #0
 8002996:	4618      	mov	r0, r3
 8002998:	f00a f9bc 	bl	800cd14 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800299c:	1d3b      	adds	r3, r7, #4
 800299e:	2220      	movs	r2, #32
 80029a0:	2100      	movs	r1, #0
 80029a2:	4618      	mov	r0, r3
 80029a4:	f00a f9b6 	bl	800cd14 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80029a8:	2004      	movs	r0, #4
 80029aa:	f004 fe93 	bl	80076d4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4b34      	ldr	r3, [pc, #208]	; (8002a84 <SystemClock_Config+0xfc>)
 80029b4:	699b      	ldr	r3, [r3, #24]
 80029b6:	4a33      	ldr	r2, [pc, #204]	; (8002a84 <SystemClock_Config+0xfc>)
 80029b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029bc:	6193      	str	r3, [r2, #24]
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <SystemClock_Config+0xfc>)
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	4b2f      	ldr	r3, [pc, #188]	; (8002a88 <SystemClock_Config+0x100>)
 80029ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029cc:	4a2e      	ldr	r2, [pc, #184]	; (8002a88 <SystemClock_Config+0x100>)
 80029ce:	f043 0301 	orr.w	r3, r3, #1
 80029d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80029d4:	4b2c      	ldr	r3, [pc, #176]	; (8002a88 <SystemClock_Config+0x100>)
 80029d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029d8:	f003 0301 	and.w	r3, r3, #1
 80029dc:	603b      	str	r3, [r7, #0]
 80029de:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80029e0:	bf00      	nop
 80029e2:	4b28      	ldr	r3, [pc, #160]	; (8002a84 <SystemClock_Config+0xfc>)
 80029e4:	699b      	ldr	r3, [r3, #24]
 80029e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ee:	d1f8      	bne.n	80029e2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80029f0:	4b26      	ldr	r3, [pc, #152]	; (8002a8c <SystemClock_Config+0x104>)
 80029f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f4:	f023 0303 	bic.w	r3, r3, #3
 80029f8:	4a24      	ldr	r2, [pc, #144]	; (8002a8c <SystemClock_Config+0x104>)
 80029fa:	f043 0302 	orr.w	r3, r3, #2
 80029fe:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002a00:	2301      	movs	r3, #1
 8002a02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8002a04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002a08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002a0e:	2302      	movs	r3, #2
 8002a10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002a12:	2301      	movs	r3, #1
 8002a14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8002a16:	2378      	movs	r3, #120	; 0x78
 8002a18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002a1a:	2302      	movs	r3, #2
 8002a1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002a1e:	2302      	movs	r3, #2
 8002a20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002a22:	2302      	movs	r3, #2
 8002a24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002a26:	230c      	movs	r3, #12
 8002a28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a36:	4618      	mov	r0, r3
 8002a38:	f004 feb6 	bl	80077a8 <HAL_RCC_OscConfig>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d001      	beq.n	8002a46 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8002a42:	f000 fb25 	bl	8003090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002a46:	233f      	movs	r3, #63	; 0x3f
 8002a48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8002a52:	2308      	movs	r3, #8
 8002a54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8002a56:	2340      	movs	r3, #64	; 0x40
 8002a58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8002a5a:	2340      	movs	r3, #64	; 0x40
 8002a5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8002a5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8002a64:	2340      	movs	r3, #64	; 0x40
 8002a66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002a68:	1d3b      	adds	r3, r7, #4
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f005 fac9 	bl	8008004 <HAL_RCC_ClockConfig>
 8002a72:	4603      	mov	r3, r0
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d001      	beq.n	8002a7c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002a78:	f000 fb0a 	bl	8003090 <Error_Handler>
  }
}
 8002a7c:	bf00      	nop
 8002a7e:	3770      	adds	r7, #112	; 0x70
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	58024800 	.word	0x58024800
 8002a88:	58000400 	.word	0x58000400
 8002a8c:	58024400 	.word	0x58024400

08002a90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b0b0      	sub	sp, #192	; 0xc0
 8002a94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002a96:	1d3b      	adds	r3, r7, #4
 8002a98:	22bc      	movs	r2, #188	; 0xbc
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f00a f939 	bl	800cd14 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8002aa2:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8002aa6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8002aac:	2318      	movs	r3, #24
 8002aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8002ab4:	2304      	movs	r3, #4
 8002ab6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8002ab8:	2302      	movs	r3, #2
 8002aba:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8002abc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ac0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8002aca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002ace:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8002ad0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ad8:	1d3b      	adds	r3, r7, #4
 8002ada:	4618      	mov	r0, r3
 8002adc:	f005 fe1e 	bl	800871c <HAL_RCCEx_PeriphCLKConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8002ae6:	f000 fad3 	bl	8003090 <Error_Handler>
  }
}
 8002aea:	bf00      	nop
 8002aec:	37c0      	adds	r7, #192	; 0xc0
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8002af8:	4b1e      	ldr	r3, [pc, #120]	; (8002b74 <MX_ETH_Init+0x80>)
 8002afa:	4a1f      	ldr	r2, [pc, #124]	; (8002b78 <MX_ETH_Init+0x84>)
 8002afc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8002afe:	4b1f      	ldr	r3, [pc, #124]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8002b04:	4b1d      	ldr	r3, [pc, #116]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b06:	2280      	movs	r2, #128	; 0x80
 8002b08:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8002b0a:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b0c:	22e1      	movs	r2, #225	; 0xe1
 8002b0e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8002b10:	4b1a      	ldr	r3, [pc, #104]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8002b16:	4b19      	ldr	r3, [pc, #100]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8002b1c:	4b17      	ldr	r3, [pc, #92]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8002b22:	4b14      	ldr	r3, [pc, #80]	; (8002b74 <MX_ETH_Init+0x80>)
 8002b24:	4a15      	ldr	r2, [pc, #84]	; (8002b7c <MX_ETH_Init+0x88>)
 8002b26:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8002b28:	4b12      	ldr	r3, [pc, #72]	; (8002b74 <MX_ETH_Init+0x80>)
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8002b2e:	4b11      	ldr	r3, [pc, #68]	; (8002b74 <MX_ETH_Init+0x80>)
 8002b30:	4a13      	ldr	r2, [pc, #76]	; (8002b80 <MX_ETH_Init+0x8c>)
 8002b32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8002b34:	4b0f      	ldr	r3, [pc, #60]	; (8002b74 <MX_ETH_Init+0x80>)
 8002b36:	4a13      	ldr	r2, [pc, #76]	; (8002b84 <MX_ETH_Init+0x90>)
 8002b38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8002b3a:	4b0e      	ldr	r3, [pc, #56]	; (8002b74 <MX_ETH_Init+0x80>)
 8002b3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8002b40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8002b42:	480c      	ldr	r0, [pc, #48]	; (8002b74 <MX_ETH_Init+0x80>)
 8002b44:	f003 fe30 	bl	80067a8 <HAL_ETH_Init>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8002b4e:	f000 fa9f 	bl	8003090 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8002b52:	2238      	movs	r2, #56	; 0x38
 8002b54:	2100      	movs	r1, #0
 8002b56:	480c      	ldr	r0, [pc, #48]	; (8002b88 <MX_ETH_Init+0x94>)
 8002b58:	f00a f8dc 	bl	800cd14 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <MX_ETH_Init+0x94>)
 8002b5e:	2221      	movs	r2, #33	; 0x21
 8002b60:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8002b62:	4b09      	ldr	r3, [pc, #36]	; (8002b88 <MX_ETH_Init+0x94>)
 8002b64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8002b68:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	; (8002b88 <MX_ETH_Init+0x94>)
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8002b70:	bf00      	nop
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	240001ac 	.word	0x240001ac
 8002b78:	40028000 	.word	0x40028000
 8002b7c:	24000ea0 	.word	0x24000ea0
 8002b80:	240000e8 	.word	0x240000e8
 8002b84:	24000088 	.word	0x24000088
 8002b88:	24000174 	.word	0x24000174

08002b8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8002b90:	4b28      	ldr	r3, [pc, #160]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002b92:	4a29      	ldr	r2, [pc, #164]	; (8002c38 <MX_SPI3_Init+0xac>)
 8002b94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002b96:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002b98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8002b9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8002b9e:	4b25      	ldr	r3, [pc, #148]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002ba0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002ba4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ba6:	4b23      	ldr	r3, [pc, #140]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bac:	4b21      	ldr	r3, [pc, #132]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002bb2:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002bb8:	4b1e      	ldr	r3, [pc, #120]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002bbe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002bc0:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002bc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002bc8:	4b1a      	ldr	r3, [pc, #104]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002bce:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bd4:	4b17      	ldr	r3, [pc, #92]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8002bda:	4b16      	ldr	r3, [pc, #88]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bdc:	2200      	movs	r2, #0
 8002bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002be0:	4b14      	ldr	r3, [pc, #80]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002be2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002be6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8002be8:	4b12      	ldr	r3, [pc, #72]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8002bee:	4b11      	ldr	r3, [pc, #68]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bf4:	4b0f      	ldr	r3, [pc, #60]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8002bfa:	4b0e      	ldr	r3, [pc, #56]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002c00:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002c06:	4b0b      	ldr	r3, [pc, #44]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8002c0c:	4b09      	ldr	r3, [pc, #36]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002c12:	4b08      	ldr	r3, [pc, #32]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002c14:	2200      	movs	r2, #0
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002c1e:	4805      	ldr	r0, [pc, #20]	; (8002c34 <MX_SPI3_Init+0xa8>)
 8002c20:	f007 f8e4 	bl	8009dec <HAL_SPI_Init>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8002c2a:	f000 fa31 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	2400025c 	.word	0x2400025c
 8002c38:	40003c00 	.word	0x40003c00

08002c3c <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	2200      	movs	r2, #0
 8002c46:	601a      	str	r2, [r3, #0]
 8002c48:	605a      	str	r2, [r3, #4]
 8002c4a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002c4c:	4b14      	ldr	r3, [pc, #80]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c4e:	4a15      	ldr	r2, [pc, #84]	; (8002ca4 <MX_TIM7_Init+0x68>)
 8002c50:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8002c52:	4b13      	ldr	r3, [pc, #76]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c54:	22ef      	movs	r2, #239	; 0xef
 8002c56:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c58:	4b11      	ldr	r3, [pc, #68]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8002c5e:	4b10      	ldr	r3, [pc, #64]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c64:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c66:	4b0e      	ldr	r3, [pc, #56]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002c6c:	480c      	ldr	r0, [pc, #48]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c6e:	f007 fc9e 	bl	800a5ae <HAL_TIM_Base_Init>
 8002c72:	4603      	mov	r3, r0
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002c78:	f000 fa0a 	bl	8003090 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	4805      	ldr	r0, [pc, #20]	; (8002ca0 <MX_TIM7_Init+0x64>)
 8002c8a:	f007 ff6f 	bl	800ab6c <HAL_TIMEx_MasterConfigSynchronization>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002c94:	f000 f9fc 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002c98:	bf00      	nop
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	240002e4 	.word	0x240002e4
 8002ca4:	40001400 	.word	0x40001400

08002ca8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002cac:	4b22      	ldr	r3, [pc, #136]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cae:	4a23      	ldr	r2, [pc, #140]	; (8002d3c <MX_USART3_UART_Init+0x94>)
 8002cb0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8002cb2:	4b21      	ldr	r3, [pc, #132]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cb4:	4a22      	ldr	r2, [pc, #136]	; (8002d40 <MX_USART3_UART_Init+0x98>)
 8002cb6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002cb8:	4b1f      	ldr	r3, [pc, #124]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002ccc:	220c      	movs	r2, #12
 8002cce:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002cd6:	4b18      	ldr	r3, [pc, #96]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002cee:	4812      	ldr	r0, [pc, #72]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002cf0:	f007 ffe8 	bl	800acc4 <HAL_UART_Init>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d001      	beq.n	8002cfe <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8002cfa:	f000 f9c9 	bl	8003090 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002cfe:	2100      	movs	r1, #0
 8002d00:	480d      	ldr	r0, [pc, #52]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002d02:	f009 fc09 	bl	800c518 <HAL_UARTEx_SetTxFifoThreshold>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8002d0c:	f000 f9c0 	bl	8003090 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002d10:	2100      	movs	r1, #0
 8002d12:	4809      	ldr	r0, [pc, #36]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002d14:	f009 fc3e 	bl	800c594 <HAL_UARTEx_SetRxFifoThreshold>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d001      	beq.n	8002d22 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8002d1e:	f000 f9b7 	bl	8003090 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002d22:	4805      	ldr	r0, [pc, #20]	; (8002d38 <MX_USART3_UART_Init+0x90>)
 8002d24:	f009 fbbf 	bl	800c4a6 <HAL_UARTEx_DisableFifoMode>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d001      	beq.n	8002d32 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8002d2e:	f000 f9af 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002d32:	bf00      	nop
 8002d34:	bd80      	pop	{r7, pc}
 8002d36:	bf00      	nop
 8002d38:	24000330 	.word	0x24000330
 8002d3c:	40004800 	.word	0x40004800
 8002d40:	0005dc00 	.word	0x0005dc00

08002d44 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002d48:	4b15      	ldr	r3, [pc, #84]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d4a:	4a16      	ldr	r2, [pc, #88]	; (8002da4 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8002d4c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8002d4e:	4b14      	ldr	r3, [pc, #80]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d50:	2209      	movs	r2, #9
 8002d52:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002d54:	4b12      	ldr	r3, [pc, #72]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d56:	2202      	movs	r2, #2
 8002d58:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002d5a:	4b11      	ldr	r3, [pc, #68]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8002d60:	4b0f      	ldr	r3, [pc, #60]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d62:	2202      	movs	r2, #2
 8002d64:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8002d66:	4b0e      	ldr	r3, [pc, #56]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002d6c:	4b0c      	ldr	r3, [pc, #48]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002d72:	4b0b      	ldr	r3, [pc, #44]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8002d78:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002d7e:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d80:	2201      	movs	r2, #1
 8002d82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002d84:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002d8a:	4805      	ldr	r0, [pc, #20]	; (8002da0 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002d8c:	f004 fb5a 	bl	8007444 <HAL_PCD_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8002d96:	f000 f97b 	bl	8003090 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	240004b0 	.word	0x240004b0
 8002da4:	40080000 	.word	0x40080000

08002da8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	b082      	sub	sp, #8
 8002dac:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002dae:	4b11      	ldr	r3, [pc, #68]	; (8002df4 <MX_DMA_Init+0x4c>)
 8002db0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002db4:	4a0f      	ldr	r2, [pc, #60]	; (8002df4 <MX_DMA_Init+0x4c>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002dbe:	4b0d      	ldr	r3, [pc, #52]	; (8002df4 <MX_DMA_Init+0x4c>)
 8002dc0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	607b      	str	r3, [r7, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002dcc:	2200      	movs	r2, #0
 8002dce:	2100      	movs	r1, #0
 8002dd0:	200c      	movs	r0, #12
 8002dd2:	f001 fa8e 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002dd6:	200c      	movs	r0, #12
 8002dd8:	f001 faa5 	bl	8004326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002ddc:	2200      	movs	r2, #0
 8002dde:	2100      	movs	r1, #0
 8002de0:	200f      	movs	r0, #15
 8002de2:	f001 fa86 	bl	80042f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8002de6:	200f      	movs	r0, #15
 8002de8:	f001 fa9d 	bl	8004326 <HAL_NVIC_EnableIRQ>

}
 8002dec:	bf00      	nop
 8002dee:	3708      	adds	r7, #8
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	58024400 	.word	0x58024400

08002df8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08e      	sub	sp, #56	; 0x38
 8002dfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dfe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e02:	2200      	movs	r2, #0
 8002e04:	601a      	str	r2, [r3, #0]
 8002e06:	605a      	str	r2, [r3, #4]
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	60da      	str	r2, [r3, #12]
 8002e0c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e0e:	4b8a      	ldr	r3, [pc, #552]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e14:	4a88      	ldr	r2, [pc, #544]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e16:	f043 0304 	orr.w	r3, r3, #4
 8002e1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e1e:	4b86      	ldr	r3, [pc, #536]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	623b      	str	r3, [r7, #32]
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002e2c:	4b82      	ldr	r3, [pc, #520]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e32:	4a81      	ldr	r2, [pc, #516]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e46:	61fb      	str	r3, [r7, #28]
 8002e48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e4a:	4b7b      	ldr	r3, [pc, #492]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e50:	4a79      	ldr	r2, [pc, #484]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e52:	f043 0301 	orr.w	r3, r3, #1
 8002e56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e5a:	4b77      	ldr	r3, [pc, #476]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e60:	f003 0301 	and.w	r3, r3, #1
 8002e64:	61bb      	str	r3, [r7, #24]
 8002e66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e68:	4b73      	ldr	r3, [pc, #460]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e6e:	4a72      	ldr	r2, [pc, #456]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e70:	f043 0302 	orr.w	r3, r3, #2
 8002e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e78:	4b6f      	ldr	r3, [pc, #444]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	617b      	str	r3, [r7, #20]
 8002e84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e86:	4b6c      	ldr	r3, [pc, #432]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e8c:	4a6a      	ldr	r2, [pc, #424]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e8e:	f043 0320 	orr.w	r3, r3, #32
 8002e92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002e96:	4b68      	ldr	r3, [pc, #416]	; (8003038 <MX_GPIO_Init+0x240>)
 8002e98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002e9c:	f003 0320 	and.w	r3, r3, #32
 8002ea0:	613b      	str	r3, [r7, #16]
 8002ea2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002ea4:	4b64      	ldr	r3, [pc, #400]	; (8003038 <MX_GPIO_Init+0x240>)
 8002ea6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eaa:	4a63      	ldr	r2, [pc, #396]	; (8003038 <MX_GPIO_Init+0x240>)
 8002eac:	f043 0310 	orr.w	r3, r3, #16
 8002eb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002eb4:	4b60      	ldr	r3, [pc, #384]	; (8003038 <MX_GPIO_Init+0x240>)
 8002eb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	60fb      	str	r3, [r7, #12]
 8002ec0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ec2:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <MX_GPIO_Init+0x240>)
 8002ec4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ec8:	4a5b      	ldr	r2, [pc, #364]	; (8003038 <MX_GPIO_Init+0x240>)
 8002eca:	f043 0308 	orr.w	r3, r3, #8
 8002ece:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ed2:	4b59      	ldr	r3, [pc, #356]	; (8003038 <MX_GPIO_Init+0x240>)
 8002ed4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ed8:	f003 0308 	and.w	r3, r3, #8
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002ee0:	4b55      	ldr	r3, [pc, #340]	; (8003038 <MX_GPIO_Init+0x240>)
 8002ee2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ee6:	4a54      	ldr	r2, [pc, #336]	; (8003038 <MX_GPIO_Init+0x240>)
 8002ee8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ef0:	4b51      	ldr	r3, [pc, #324]	; (8003038 <MX_GPIO_Init+0x240>)
 8002ef2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002efa:	607b      	str	r3, [r7, #4]
 8002efc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8002efe:	2201      	movs	r2, #1
 8002f00:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002f04:	484d      	ldr	r0, [pc, #308]	; (800303c <MX_GPIO_Init+0x244>)
 8002f06:	f004 fa3b 	bl	8007380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f10:	484a      	ldr	r0, [pc, #296]	; (800303c <MX_GPIO_Init+0x244>)
 8002f12:	f004 fa35 	bl	8007380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002f16:	2200      	movs	r2, #0
 8002f18:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002f1c:	4848      	ldr	r0, [pc, #288]	; (8003040 <MX_GPIO_Init+0x248>)
 8002f1e:	f004 fa2f 	bl	8007380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002f28:	4846      	ldr	r0, [pc, #280]	; (8003044 <MX_GPIO_Init+0x24c>)
 8002f2a:	f004 fa29 	bl	8007380 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f34:	4844      	ldr	r0, [pc, #272]	; (8003048 <MX_GPIO_Init+0x250>)
 8002f36:	f004 fa23 	bl	8007380 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8002f3a:	230d      	movs	r3, #13
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f42:	2300      	movs	r3, #0
 8002f44:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	483f      	ldr	r0, [pc, #252]	; (800304c <MX_GPIO_Init+0x254>)
 8002f4e:	f004 f84f 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8002f52:	2308      	movs	r3, #8
 8002f54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f56:	2300      	movs	r3, #0
 8002f58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f62:	4619      	mov	r1, r3
 8002f64:	483a      	ldr	r0, [pc, #232]	; (8003050 <MX_GPIO_Init+0x258>)
 8002f66:	f004 f843 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8002f6a:	2302      	movs	r3, #2
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8002f76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	4830      	ldr	r0, [pc, #192]	; (8003040 <MX_GPIO_Init+0x248>)
 8002f7e:	f004 f837 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8002f82:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002f86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002f90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f94:	4619      	mov	r1, r3
 8002f96:	482f      	ldr	r0, [pc, #188]	; (8003054 <MX_GPIO_Init+0x25c>)
 8002f98:	f004 f82a 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002f9c:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002fa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002fae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4821      	ldr	r0, [pc, #132]	; (800303c <MX_GPIO_Init+0x244>)
 8002fb6:	f004 f81b 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002fba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002fbe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	481b      	ldr	r0, [pc, #108]	; (8003040 <MX_GPIO_Init+0x248>)
 8002fd4:	f004 f80c 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002fd8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002fdc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002fee:	4619      	mov	r1, r3
 8002ff0:	4814      	ldr	r0, [pc, #80]	; (8003044 <MX_GPIO_Init+0x24c>)
 8002ff2:	f003 fffd 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002ff6:	2380      	movs	r3, #128	; 0x80
 8002ff8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ffa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002ffe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003000:	2300      	movs	r3, #0
 8003002:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003008:	4619      	mov	r1, r3
 800300a:	480f      	ldr	r0, [pc, #60]	; (8003048 <MX_GPIO_Init+0x250>)
 800300c:	f003 fff0 	bl	8006ff0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8003010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003014:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003016:	2301      	movs	r3, #1
 8003018:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301a:	2300      	movs	r3, #0
 800301c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800301e:	2300      	movs	r3, #0
 8003020:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8003022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003026:	4619      	mov	r1, r3
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <MX_GPIO_Init+0x250>)
 800302a:	f003 ffe1 	bl	8006ff0 <HAL_GPIO_Init>

}
 800302e:	bf00      	nop
 8003030:	3738      	adds	r7, #56	; 0x38
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	58024400 	.word	0x58024400
 800303c:	58021000 	.word	0x58021000
 8003040:	58020400 	.word	0x58020400
 8003044:	58020c00 	.word	0x58020c00
 8003048:	58021800 	.word	0x58021800
 800304c:	58020800 	.word	0x58020800
 8003050:	58020000 	.word	0x58020000
 8003054:	58021400 	.word	0x58021400

08003058 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003058:	b4b0      	push	{r4, r5, r7}
 800305a:	b083      	sub	sp, #12
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	4a09      	ldr	r2, [pc, #36]	; (8003088 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d10a      	bne.n	800307e <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8003068:	4b08      	ldr	r3, [pc, #32]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800306a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800306e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8003072:	1854      	adds	r4, r2, r1
 8003074:	f143 0500 	adc.w	r5, r3, #0
 8003078:	4b04      	ldr	r3, [pc, #16]	; (800308c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800307a:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 800307e:	bf00      	nop
 8003080:	370c      	adds	r7, #12
 8003082:	46bd      	mov	sp, r7
 8003084:	bcb0      	pop	{r4, r5, r7}
 8003086:	4770      	bx	lr
 8003088:	240002e4 	.word	0x240002e4
 800308c:	24000e98 	.word	0x24000e98

08003090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003090:	b480      	push	{r7}
 8003092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003094:	b672      	cpsid	i
}
 8003096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003098:	e7fe      	b.n	8003098 <Error_Handler+0x8>
	...

0800309c <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 800309c:	b580      	push	{r7, lr}
 800309e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80030a0:	2200      	movs	r2, #0
 80030a2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030a6:	4802      	ldr	r0, [pc, #8]	; (80030b0 <ST7735_Select+0x14>)
 80030a8:	f004 f96a 	bl	8007380 <HAL_GPIO_WritePin>
}
 80030ac:	bf00      	nop
 80030ae:	bd80      	pop	{r7, pc}
 80030b0:	58021000 	.word	0x58021000

080030b4 <ST7735_Unselect>:

void ST7735_Unselect() {
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80030b8:	2201      	movs	r2, #1
 80030ba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80030be:	4802      	ldr	r0, [pc, #8]	; (80030c8 <ST7735_Unselect+0x14>)
 80030c0:	f004 f95e 	bl	8007380 <HAL_GPIO_WritePin>
}
 80030c4:	bf00      	nop
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	58021000 	.word	0x58021000

080030cc <ST7735_Select1>:
static void ST7735_Select1() {
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80030d0:	2200      	movs	r2, #0
 80030d2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030d6:	4802      	ldr	r0, [pc, #8]	; (80030e0 <ST7735_Select1+0x14>)
 80030d8:	f004 f952 	bl	8007380 <HAL_GPIO_WritePin>
}
 80030dc:	bf00      	nop
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	58021000 	.word	0x58021000

080030e4 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80030e8:	2201      	movs	r2, #1
 80030ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80030ee:	4802      	ldr	r0, [pc, #8]	; (80030f8 <ST7735_Unselect1+0x14>)
 80030f0:	f004 f946 	bl	8007380 <HAL_GPIO_WritePin>
}
 80030f4:	bf00      	nop
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	58021000 	.word	0x58021000

080030fc <ST7735_Reset>:

static void ST7735_Reset() {
 80030fc:	b580      	push	{r7, lr}
 80030fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8003100:	2200      	movs	r2, #0
 8003102:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003106:	4807      	ldr	r0, [pc, #28]	; (8003124 <ST7735_Reset+0x28>)
 8003108:	f004 f93a 	bl	8007380 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 800310c:	2005      	movs	r0, #5
 800310e:	f000 ffd1 	bl	80040b4 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8003112:	2201      	movs	r2, #1
 8003114:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8003118:	4802      	ldr	r0, [pc, #8]	; (8003124 <ST7735_Reset+0x28>)
 800311a:	f004 f931 	bl	8007380 <HAL_GPIO_WritePin>
}
 800311e:	bf00      	nop
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	58021000 	.word	0x58021000

08003128 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8003132:	2200      	movs	r2, #0
 8003134:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003138:	4806      	ldr	r0, [pc, #24]	; (8003154 <ST7735_WriteCommand+0x2c>)
 800313a:	f004 f921 	bl	8007380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800313e:	1df9      	adds	r1, r7, #7
 8003140:	f04f 33ff 	mov.w	r3, #4294967295
 8003144:	2201      	movs	r2, #1
 8003146:	4804      	ldr	r0, [pc, #16]	; (8003158 <ST7735_WriteCommand+0x30>)
 8003148:	f006 ff56 	bl	8009ff8 <HAL_SPI_Transmit>
}
 800314c:	bf00      	nop
 800314e:	3708      	adds	r7, #8
 8003150:	46bd      	mov	sp, r7
 8003152:	bd80      	pop	{r7, pc}
 8003154:	58021800 	.word	0x58021800
 8003158:	2400025c 	.word	0x2400025c

0800315c <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 800315c:	b580      	push	{r7, lr}
 800315e:	b082      	sub	sp, #8
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
 8003164:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003166:	2201      	movs	r2, #1
 8003168:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800316c:	4807      	ldr	r0, [pc, #28]	; (800318c <ST7735_WriteData+0x30>)
 800316e:	f004 f907 	bl	8007380 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8003172:	683b      	ldr	r3, [r7, #0]
 8003174:	b29a      	uxth	r2, r3
 8003176:	f04f 33ff 	mov.w	r3, #4294967295
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4804      	ldr	r0, [pc, #16]	; (8003190 <ST7735_WriteData+0x34>)
 800317e:	f006 ff3b 	bl	8009ff8 <HAL_SPI_Transmit>
}
 8003182:	bf00      	nop
 8003184:	3708      	adds	r7, #8
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	58021800 	.word	0x58021800
 8003190:	2400025c 	.word	0x2400025c

08003194 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 80031a6:	e034      	b.n	8003212 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	1c5a      	adds	r2, r3, #1
 80031ac:	607a      	str	r2, [r7, #4]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 80031b2:	7afb      	ldrb	r3, [r7, #11]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7ff ffb7 	bl	8003128 <ST7735_WriteCommand>

		numArgs = *addr++;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	1c5a      	adds	r2, r3, #1
 80031be:	607a      	str	r2, [r7, #4]
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80031c4:	7abb      	ldrb	r3, [r7, #10]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031cc:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 80031ce:	7abb      	ldrb	r3, [r7, #10]
 80031d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031d4:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 80031d6:	7abb      	ldrb	r3, [r7, #10]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d008      	beq.n	80031ee <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 80031dc:	7abb      	ldrb	r3, [r7, #10]
 80031de:	4619      	mov	r1, r3
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ffbb 	bl	800315c <ST7735_WriteData>
			addr += numArgs;
 80031e6:	7abb      	ldrb	r3, [r7, #10]
 80031e8:	687a      	ldr	r2, [r7, #4]
 80031ea:	4413      	add	r3, r2
 80031ec:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80031ee:	89bb      	ldrh	r3, [r7, #12]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00e      	beq.n	8003212 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	1c5a      	adds	r2, r3, #1
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 80031fe:	89bb      	ldrh	r3, [r7, #12]
 8003200:	2bff      	cmp	r3, #255	; 0xff
 8003202:	d102      	bne.n	800320a <ST7735_ExecuteCommandList+0x76>
 8003204:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8003208:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 800320a:	89bb      	ldrh	r3, [r7, #12]
 800320c:	4618      	mov	r0, r3
 800320e:	f000 ff51 	bl	80040b4 <HAL_Delay>
	while(numCommands--) {
 8003212:	7bfb      	ldrb	r3, [r7, #15]
 8003214:	1e5a      	subs	r2, r3, #1
 8003216:	73fa      	strb	r2, [r7, #15]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d1c5      	bne.n	80031a8 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 800321c:	bf00      	nop
 800321e:	bf00      	nop
 8003220:	3710      	adds	r7, #16
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}

08003226 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8003226:	b590      	push	{r4, r7, lr}
 8003228:	b085      	sub	sp, #20
 800322a:	af00      	add	r7, sp, #0
 800322c:	4604      	mov	r4, r0
 800322e:	4608      	mov	r0, r1
 8003230:	4611      	mov	r1, r2
 8003232:	461a      	mov	r2, r3
 8003234:	4623      	mov	r3, r4
 8003236:	71fb      	strb	r3, [r7, #7]
 8003238:	4603      	mov	r3, r0
 800323a:	71bb      	strb	r3, [r7, #6]
 800323c:	460b      	mov	r3, r1
 800323e:	717b      	strb	r3, [r7, #5]
 8003240:	4613      	mov	r3, r2
 8003242:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8003244:	202a      	movs	r0, #42	; 0x2a
 8003246:	f7ff ff6f 	bl	8003128 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800324a:	2300      	movs	r3, #0
 800324c:	733b      	strb	r3, [r7, #12]
 800324e:	79fb      	ldrb	r3, [r7, #7]
 8003250:	3302      	adds	r3, #2
 8003252:	b2db      	uxtb	r3, r3
 8003254:	737b      	strb	r3, [r7, #13]
 8003256:	2300      	movs	r3, #0
 8003258:	73bb      	strb	r3, [r7, #14]
 800325a:	797b      	ldrb	r3, [r7, #5]
 800325c:	3302      	adds	r3, #2
 800325e:	b2db      	uxtb	r3, r3
 8003260:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8003262:	f107 030c 	add.w	r3, r7, #12
 8003266:	2104      	movs	r1, #4
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff ff77 	bl	800315c <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 800326e:	202b      	movs	r0, #43	; 0x2b
 8003270:	f7ff ff5a 	bl	8003128 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8003274:	79bb      	ldrb	r3, [r7, #6]
 8003276:	3301      	adds	r3, #1
 8003278:	b2db      	uxtb	r3, r3
 800327a:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 800327c:	793b      	ldrb	r3, [r7, #4]
 800327e:	3301      	adds	r3, #1
 8003280:	b2db      	uxtb	r3, r3
 8003282:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8003284:	f107 030c 	add.w	r3, r7, #12
 8003288:	2104      	movs	r1, #4
 800328a:	4618      	mov	r0, r3
 800328c:	f7ff ff66 	bl	800315c <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8003290:	202c      	movs	r0, #44	; 0x2c
 8003292:	f7ff ff49 	bl	8003128 <ST7735_WriteCommand>
}
 8003296:	bf00      	nop
 8003298:	3714      	adds	r7, #20
 800329a:	46bd      	mov	sp, r7
 800329c:	bd90      	pop	{r4, r7, pc}
	...

080032a0 <ST7735_Init>:

void ST7735_Init() {
 80032a0:	b580      	push	{r7, lr}
 80032a2:	af00      	add	r7, sp, #0
	ST7735_Select();
 80032a4:	f7ff fefa 	bl	800309c <ST7735_Select>
	ST7735_Select1();
 80032a8:	f7ff ff10 	bl	80030cc <ST7735_Select1>
	ST7735_Reset();
 80032ac:	f7ff ff26 	bl	80030fc <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 80032b0:	4807      	ldr	r0, [pc, #28]	; (80032d0 <ST7735_Init+0x30>)
 80032b2:	f7ff ff6f 	bl	8003194 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80032b6:	4807      	ldr	r0, [pc, #28]	; (80032d4 <ST7735_Init+0x34>)
 80032b8:	f7ff ff6c 	bl	8003194 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 80032bc:	4806      	ldr	r0, [pc, #24]	; (80032d8 <ST7735_Init+0x38>)
 80032be:	f7ff ff69 	bl	8003194 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 80032c2:	f7ff fef7 	bl	80030b4 <ST7735_Unselect>
	ST7735_Unselect1();
 80032c6:	f7ff ff0d 	bl	80030e4 <ST7735_Unselect1>
}
 80032ca:	bf00      	nop
 80032cc:	bd80      	pop	{r7, pc}
 80032ce:	bf00      	nop
 80032d0:	0800ec50 	.word	0x0800ec50
 80032d4:	0800ec8c 	.word	0x0800ec8c
 80032d8:	0800ec9c 	.word	0x0800ec9c

080032dc <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80032dc:	b082      	sub	sp, #8
 80032de:	b590      	push	{r4, r7, lr}
 80032e0:	b089      	sub	sp, #36	; 0x24
 80032e2:	af00      	add	r7, sp, #0
 80032e4:	637b      	str	r3, [r7, #52]	; 0x34
 80032e6:	4603      	mov	r3, r0
 80032e8:	80fb      	strh	r3, [r7, #6]
 80032ea:	460b      	mov	r3, r1
 80032ec:	80bb      	strh	r3, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80032f2:	88fb      	ldrh	r3, [r7, #6]
 80032f4:	b2d8      	uxtb	r0, r3
 80032f6:	88bb      	ldrh	r3, [r7, #4]
 80032f8:	b2d9      	uxtb	r1, r3
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	b2da      	uxtb	r2, r3
 80032fe:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8003302:	4413      	add	r3, r2
 8003304:	b2db      	uxtb	r3, r3
 8003306:	3b01      	subs	r3, #1
 8003308:	b2dc      	uxtb	r4, r3
 800330a:	88bb      	ldrh	r3, [r7, #4]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003312:	4413      	add	r3, r2
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3b01      	subs	r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4622      	mov	r2, r4
 800331c:	f7ff ff83 	bl	8003226 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8003320:	2300      	movs	r3, #0
 8003322:	61fb      	str	r3, [r7, #28]
 8003324:	e043      	b.n	80033ae <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8003326:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003328:	78fb      	ldrb	r3, [r7, #3]
 800332a:	3b20      	subs	r3, #32
 800332c:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	4619      	mov	r1, r3
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	440b      	add	r3, r1
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	4413      	add	r3, r2
 800333e:	881b      	ldrh	r3, [r3, #0]
 8003340:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8003342:	2300      	movs	r3, #0
 8003344:	61bb      	str	r3, [r7, #24]
 8003346:	e029      	b.n	800339c <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d00e      	beq.n	8003376 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8003358:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800335a:	0a1b      	lsrs	r3, r3, #8
 800335c:	b29b      	uxth	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	743b      	strb	r3, [r7, #16]
 8003362:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003364:	b2db      	uxtb	r3, r3
 8003366:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8003368:	f107 0310 	add.w	r3, r7, #16
 800336c:	2102      	movs	r1, #2
 800336e:	4618      	mov	r0, r3
 8003370:	f7ff fef4 	bl	800315c <ST7735_WriteData>
 8003374:	e00f      	b.n	8003396 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8003376:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800337a:	0a1b      	lsrs	r3, r3, #8
 800337c:	b29b      	uxth	r3, r3
 800337e:	b2db      	uxtb	r3, r3
 8003380:	733b      	strb	r3, [r7, #12]
 8003382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003386:	b2db      	uxtb	r3, r3
 8003388:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 800338a:	f107 030c 	add.w	r3, r7, #12
 800338e:	2102      	movs	r1, #2
 8003390:	4618      	mov	r0, r3
 8003392:	f7ff fee3 	bl	800315c <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	3301      	adds	r3, #1
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80033a0:	461a      	mov	r2, r3
 80033a2:	69bb      	ldr	r3, [r7, #24]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d3cf      	bcc.n	8003348 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 80033a8:	69fb      	ldr	r3, [r7, #28]
 80033aa:	3301      	adds	r3, #1
 80033ac:	61fb      	str	r3, [r7, #28]
 80033ae:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80033b2:	461a      	mov	r2, r3
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d3b5      	bcc.n	8003326 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 80033ba:	bf00      	nop
 80033bc:	bf00      	nop
 80033be:	3724      	adds	r7, #36	; 0x24
 80033c0:	46bd      	mov	sp, r7
 80033c2:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80033c6:	b002      	add	sp, #8
 80033c8:	4770      	bx	lr

080033ca <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80033ca:	b082      	sub	sp, #8
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b086      	sub	sp, #24
 80033d0:	af04      	add	r7, sp, #16
 80033d2:	603a      	str	r2, [r7, #0]
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	4603      	mov	r3, r0
 80033d8:	80fb      	strh	r3, [r7, #6]
 80033da:	460b      	mov	r3, r1
 80033dc:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 80033de:	f7ff fe5d 	bl	800309c <ST7735_Select>

	while(*str) {
 80033e2:	e02d      	b.n	8003440 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80033e4:	88fb      	ldrh	r3, [r7, #6]
 80033e6:	7d3a      	ldrb	r2, [r7, #20]
 80033e8:	4413      	add	r3, r2
 80033ea:	2b7f      	cmp	r3, #127	; 0x7f
 80033ec:	dd13      	ble.n	8003416 <ST7735_WriteString+0x4c>
			x = 0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80033f2:	7d7b      	ldrb	r3, [r7, #21]
 80033f4:	b29a      	uxth	r2, r3
 80033f6:	88bb      	ldrh	r3, [r7, #4]
 80033f8:	4413      	add	r3, r2
 80033fa:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 80033fc:	88bb      	ldrh	r3, [r7, #4]
 80033fe:	7d7a      	ldrb	r2, [r7, #21]
 8003400:	4413      	add	r3, r2
 8003402:	2b7f      	cmp	r3, #127	; 0x7f
 8003404:	dc21      	bgt.n	800344a <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	2b20      	cmp	r3, #32
 800340c:	d103      	bne.n	8003416 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	3301      	adds	r3, #1
 8003412:	603b      	str	r3, [r7, #0]
				continue;
 8003414:	e014      	b.n	8003440 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	88b9      	ldrh	r1, [r7, #4]
 800341c:	88f8      	ldrh	r0, [r7, #6]
 800341e:	8c3b      	ldrh	r3, [r7, #32]
 8003420:	9302      	str	r3, [sp, #8]
 8003422:	8bbb      	ldrh	r3, [r7, #28]
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	f7ff ff56 	bl	80032dc <ST7735_WriteChar>
		x += font.width;
 8003430:	7d3b      	ldrb	r3, [r7, #20]
 8003432:	b29a      	uxth	r2, r3
 8003434:	88fb      	ldrh	r3, [r7, #6]
 8003436:	4413      	add	r3, r2
 8003438:	80fb      	strh	r3, [r7, #6]
		str++;
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	3301      	adds	r3, #1
 800343e:	603b      	str	r3, [r7, #0]
	while(*str) {
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1cd      	bne.n	80033e4 <ST7735_WriteString+0x1a>
 8003448:	e000      	b.n	800344c <ST7735_WriteString+0x82>
				break;
 800344a:	bf00      	nop
	}

	ST7735_Unselect();
 800344c:	f7ff fe32 	bl	80030b4 <ST7735_Unselect>
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800345a:	b002      	add	sp, #8
 800345c:	4770      	bx	lr

0800345e <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800345e:	b082      	sub	sp, #8
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af04      	add	r7, sp, #16
 8003466:	603a      	str	r2, [r7, #0]
 8003468:	617b      	str	r3, [r7, #20]
 800346a:	4603      	mov	r3, r0
 800346c:	80fb      	strh	r3, [r7, #6]
 800346e:	460b      	mov	r3, r1
 8003470:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8003472:	f7ff fe2b 	bl	80030cc <ST7735_Select1>

	while(*str) {
 8003476:	e02d      	b.n	80034d4 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8003478:	88fb      	ldrh	r3, [r7, #6]
 800347a:	7d3a      	ldrb	r2, [r7, #20]
 800347c:	4413      	add	r3, r2
 800347e:	2b7f      	cmp	r3, #127	; 0x7f
 8003480:	dd13      	ble.n	80034aa <ST7735_WriteString1+0x4c>
			x = 0;
 8003482:	2300      	movs	r3, #0
 8003484:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003486:	7d7b      	ldrb	r3, [r7, #21]
 8003488:	b29a      	uxth	r2, r3
 800348a:	88bb      	ldrh	r3, [r7, #4]
 800348c:	4413      	add	r3, r2
 800348e:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8003490:	88bb      	ldrh	r3, [r7, #4]
 8003492:	7d7a      	ldrb	r2, [r7, #21]
 8003494:	4413      	add	r3, r2
 8003496:	2b7f      	cmp	r3, #127	; 0x7f
 8003498:	dc21      	bgt.n	80034de <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d103      	bne.n	80034aa <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	3301      	adds	r3, #1
 80034a6:	603b      	str	r3, [r7, #0]
				continue;
 80034a8:	e014      	b.n	80034d4 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	781a      	ldrb	r2, [r3, #0]
 80034ae:	88b9      	ldrh	r1, [r7, #4]
 80034b0:	88f8      	ldrh	r0, [r7, #6]
 80034b2:	8c3b      	ldrh	r3, [r7, #32]
 80034b4:	9302      	str	r3, [sp, #8]
 80034b6:	8bbb      	ldrh	r3, [r7, #28]
 80034b8:	9301      	str	r3, [sp, #4]
 80034ba:	69bb      	ldr	r3, [r7, #24]
 80034bc:	9300      	str	r3, [sp, #0]
 80034be:	697b      	ldr	r3, [r7, #20]
 80034c0:	f7ff ff0c 	bl	80032dc <ST7735_WriteChar>
		x += font.width;
 80034c4:	7d3b      	ldrb	r3, [r7, #20]
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	4413      	add	r3, r2
 80034cc:	80fb      	strh	r3, [r7, #6]
		str++;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	603b      	str	r3, [r7, #0]
	while(*str) {
 80034d4:	683b      	ldr	r3, [r7, #0]
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1cd      	bne.n	8003478 <ST7735_WriteString1+0x1a>
 80034dc:	e000      	b.n	80034e0 <ST7735_WriteString1+0x82>
				break;
 80034de:	bf00      	nop
	}

	ST7735_Unselect1();
 80034e0:	f7ff fe00 	bl	80030e4 <ST7735_Unselect1>
}
 80034e4:	bf00      	nop
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80034ee:	b002      	add	sp, #8
 80034f0:	4770      	bx	lr

080034f2 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 80034f2:	b082      	sub	sp, #8
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b086      	sub	sp, #24
 80034f8:	af04      	add	r7, sp, #16
 80034fa:	603a      	str	r2, [r7, #0]
 80034fc:	617b      	str	r3, [r7, #20]
 80034fe:	4603      	mov	r3, r0
 8003500:	80fb      	strh	r3, [r7, #6]
 8003502:	460b      	mov	r3, r1
 8003504:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8003506:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800350a:	2b00      	cmp	r3, #0
 800350c:	d102      	bne.n	8003514 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 800350e:	f7ff fdc5 	bl	800309c <ST7735_Select>
 8003512:	e034      	b.n	800357e <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8003514:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003518:	2b01      	cmp	r3, #1
 800351a:	d130      	bne.n	800357e <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 800351c:	f7ff fdd6 	bl	80030cc <ST7735_Select1>

	}


	while(*str) {
 8003520:	e02d      	b.n	800357e <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	7d3a      	ldrb	r2, [r7, #20]
 8003526:	4413      	add	r3, r2
 8003528:	2b7f      	cmp	r3, #127	; 0x7f
 800352a:	dd13      	ble.n	8003554 <ST7735_WriteStringNSS+0x62>
			x = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8003530:	7d7b      	ldrb	r3, [r7, #21]
 8003532:	b29a      	uxth	r2, r3
 8003534:	88bb      	ldrh	r3, [r7, #4]
 8003536:	4413      	add	r3, r2
 8003538:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800353a:	88bb      	ldrh	r3, [r7, #4]
 800353c:	7d7a      	ldrb	r2, [r7, #21]
 800353e:	4413      	add	r3, r2
 8003540:	2b7f      	cmp	r3, #127	; 0x7f
 8003542:	dc21      	bgt.n	8003588 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	2b20      	cmp	r3, #32
 800354a:	d103      	bne.n	8003554 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	3301      	adds	r3, #1
 8003550:	603b      	str	r3, [r7, #0]
				continue;
 8003552:	e014      	b.n	800357e <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	781a      	ldrb	r2, [r3, #0]
 8003558:	88b9      	ldrh	r1, [r7, #4]
 800355a:	88f8      	ldrh	r0, [r7, #6]
 800355c:	8c3b      	ldrh	r3, [r7, #32]
 800355e:	9302      	str	r3, [sp, #8]
 8003560:	8bbb      	ldrh	r3, [r7, #28]
 8003562:	9301      	str	r3, [sp, #4]
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	f7ff feb7 	bl	80032dc <ST7735_WriteChar>
		x += font.width;
 800356e:	7d3b      	ldrb	r3, [r7, #20]
 8003570:	b29a      	uxth	r2, r3
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	4413      	add	r3, r2
 8003576:	80fb      	strh	r3, [r7, #6]
		str++;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	3301      	adds	r3, #1
 800357c:	603b      	str	r3, [r7, #0]
	while(*str) {
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d1cd      	bne.n	8003522 <ST7735_WriteStringNSS+0x30>
 8003586:	e000      	b.n	800358a <ST7735_WriteStringNSS+0x98>
				break;
 8003588:	bf00      	nop
	}
	if(NSS == 0){
 800358a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8003592:	f7ff fd8f 	bl	80030b4 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8003596:	e005      	b.n	80035a4 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8003598:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80035a0:	f7ff fda0 	bl	80030e4 <ST7735_Unselect1>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035ae:	b002      	add	sp, #8
 80035b0:	4770      	bx	lr
	...

080035b4 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4604      	mov	r4, r0
 80035bc:	4608      	mov	r0, r1
 80035be:	4611      	mov	r1, r2
 80035c0:	461a      	mov	r2, r3
 80035c2:	4623      	mov	r3, r4
 80035c4:	80fb      	strh	r3, [r7, #6]
 80035c6:	4603      	mov	r3, r0
 80035c8:	80bb      	strh	r3, [r7, #4]
 80035ca:	460b      	mov	r3, r1
 80035cc:	807b      	strh	r3, [r7, #2]
 80035ce:	4613      	mov	r3, r2
 80035d0:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80035d2:	88fb      	ldrh	r3, [r7, #6]
 80035d4:	2b7f      	cmp	r3, #127	; 0x7f
 80035d6:	d858      	bhi.n	800368a <ST7735_FillRectangle+0xd6>
 80035d8:	88bb      	ldrh	r3, [r7, #4]
 80035da:	2b7f      	cmp	r3, #127	; 0x7f
 80035dc:	d855      	bhi.n	800368a <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80035de:	88fa      	ldrh	r2, [r7, #6]
 80035e0:	887b      	ldrh	r3, [r7, #2]
 80035e2:	4413      	add	r3, r2
 80035e4:	2b80      	cmp	r3, #128	; 0x80
 80035e6:	dd03      	ble.n	80035f0 <ST7735_FillRectangle+0x3c>
 80035e8:	88fb      	ldrh	r3, [r7, #6]
 80035ea:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80035ee:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80035f0:	88ba      	ldrh	r2, [r7, #4]
 80035f2:	883b      	ldrh	r3, [r7, #0]
 80035f4:	4413      	add	r3, r2
 80035f6:	2b80      	cmp	r3, #128	; 0x80
 80035f8:	dd03      	ble.n	8003602 <ST7735_FillRectangle+0x4e>
 80035fa:	88bb      	ldrh	r3, [r7, #4]
 80035fc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8003600:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8003602:	f7ff fd4b 	bl	800309c <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8003606:	88fb      	ldrh	r3, [r7, #6]
 8003608:	b2d8      	uxtb	r0, r3
 800360a:	88bb      	ldrh	r3, [r7, #4]
 800360c:	b2d9      	uxtb	r1, r3
 800360e:	88fb      	ldrh	r3, [r7, #6]
 8003610:	b2da      	uxtb	r2, r3
 8003612:	887b      	ldrh	r3, [r7, #2]
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4413      	add	r3, r2
 8003618:	b2db      	uxtb	r3, r3
 800361a:	3b01      	subs	r3, #1
 800361c:	b2dc      	uxtb	r4, r3
 800361e:	88bb      	ldrh	r3, [r7, #4]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	883b      	ldrh	r3, [r7, #0]
 8003624:	b2db      	uxtb	r3, r3
 8003626:	4413      	add	r3, r2
 8003628:	b2db      	uxtb	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b2db      	uxtb	r3, r3
 800362e:	4622      	mov	r2, r4
 8003630:	f7ff fdf9 	bl	8003226 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8003634:	8c3b      	ldrh	r3, [r7, #32]
 8003636:	0a1b      	lsrs	r3, r3, #8
 8003638:	b29b      	uxth	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	733b      	strb	r3, [r7, #12]
 800363e:	8c3b      	ldrh	r3, [r7, #32]
 8003640:	b2db      	uxtb	r3, r3
 8003642:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8003644:	2201      	movs	r2, #1
 8003646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800364a:	4812      	ldr	r0, [pc, #72]	; (8003694 <ST7735_FillRectangle+0xe0>)
 800364c:	f003 fe98 	bl	8007380 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003650:	883b      	ldrh	r3, [r7, #0]
 8003652:	80bb      	strh	r3, [r7, #4]
 8003654:	e013      	b.n	800367e <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	80fb      	strh	r3, [r7, #6]
 800365a:	e00a      	b.n	8003672 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800365c:	f107 010c 	add.w	r1, r7, #12
 8003660:	f04f 33ff 	mov.w	r3, #4294967295
 8003664:	2202      	movs	r2, #2
 8003666:	480c      	ldr	r0, [pc, #48]	; (8003698 <ST7735_FillRectangle+0xe4>)
 8003668:	f006 fcc6 	bl	8009ff8 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	3b01      	subs	r3, #1
 8003670:	80fb      	strh	r3, [r7, #6]
 8003672:	88fb      	ldrh	r3, [r7, #6]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1f1      	bne.n	800365c <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8003678:	88bb      	ldrh	r3, [r7, #4]
 800367a:	3b01      	subs	r3, #1
 800367c:	80bb      	strh	r3, [r7, #4]
 800367e:	88bb      	ldrh	r3, [r7, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1e8      	bne.n	8003656 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8003684:	f7ff fd16 	bl	80030b4 <ST7735_Unselect>
 8003688:	e000      	b.n	800368c <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800368a:	bf00      	nop
}
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bd90      	pop	{r4, r7, pc}
 8003692:	bf00      	nop
 8003694:	58021800 	.word	0x58021800
 8003698:	2400025c 	.word	0x2400025c

0800369c <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b085      	sub	sp, #20
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	4604      	mov	r4, r0
 80036a4:	4608      	mov	r0, r1
 80036a6:	4611      	mov	r1, r2
 80036a8:	461a      	mov	r2, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	80fb      	strh	r3, [r7, #6]
 80036ae:	4603      	mov	r3, r0
 80036b0:	80bb      	strh	r3, [r7, #4]
 80036b2:	460b      	mov	r3, r1
 80036b4:	807b      	strh	r3, [r7, #2]
 80036b6:	4613      	mov	r3, r2
 80036b8:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80036ba:	88fb      	ldrh	r3, [r7, #6]
 80036bc:	2b7f      	cmp	r3, #127	; 0x7f
 80036be:	d858      	bhi.n	8003772 <ST7735_FillRectangle1+0xd6>
 80036c0:	88bb      	ldrh	r3, [r7, #4]
 80036c2:	2b7f      	cmp	r3, #127	; 0x7f
 80036c4:	d855      	bhi.n	8003772 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80036c6:	88fa      	ldrh	r2, [r7, #6]
 80036c8:	887b      	ldrh	r3, [r7, #2]
 80036ca:	4413      	add	r3, r2
 80036cc:	2b80      	cmp	r3, #128	; 0x80
 80036ce:	dd03      	ble.n	80036d8 <ST7735_FillRectangle1+0x3c>
 80036d0:	88fb      	ldrh	r3, [r7, #6]
 80036d2:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80036d6:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80036d8:	88ba      	ldrh	r2, [r7, #4]
 80036da:	883b      	ldrh	r3, [r7, #0]
 80036dc:	4413      	add	r3, r2
 80036de:	2b80      	cmp	r3, #128	; 0x80
 80036e0:	dd03      	ble.n	80036ea <ST7735_FillRectangle1+0x4e>
 80036e2:	88bb      	ldrh	r3, [r7, #4]
 80036e4:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80036e8:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 80036ea:	f7ff fcef 	bl	80030cc <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80036ee:	88fb      	ldrh	r3, [r7, #6]
 80036f0:	b2d8      	uxtb	r0, r3
 80036f2:	88bb      	ldrh	r3, [r7, #4]
 80036f4:	b2d9      	uxtb	r1, r3
 80036f6:	88fb      	ldrh	r3, [r7, #6]
 80036f8:	b2da      	uxtb	r2, r3
 80036fa:	887b      	ldrh	r3, [r7, #2]
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	4413      	add	r3, r2
 8003700:	b2db      	uxtb	r3, r3
 8003702:	3b01      	subs	r3, #1
 8003704:	b2dc      	uxtb	r4, r3
 8003706:	88bb      	ldrh	r3, [r7, #4]
 8003708:	b2da      	uxtb	r2, r3
 800370a:	883b      	ldrh	r3, [r7, #0]
 800370c:	b2db      	uxtb	r3, r3
 800370e:	4413      	add	r3, r2
 8003710:	b2db      	uxtb	r3, r3
 8003712:	3b01      	subs	r3, #1
 8003714:	b2db      	uxtb	r3, r3
 8003716:	4622      	mov	r2, r4
 8003718:	f7ff fd85 	bl	8003226 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800371c:	8c3b      	ldrh	r3, [r7, #32]
 800371e:	0a1b      	lsrs	r3, r3, #8
 8003720:	b29b      	uxth	r3, r3
 8003722:	b2db      	uxtb	r3, r3
 8003724:	733b      	strb	r3, [r7, #12]
 8003726:	8c3b      	ldrh	r3, [r7, #32]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800372c:	2201      	movs	r2, #1
 800372e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003732:	4812      	ldr	r0, [pc, #72]	; (800377c <ST7735_FillRectangle1+0xe0>)
 8003734:	f003 fe24 	bl	8007380 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003738:	883b      	ldrh	r3, [r7, #0]
 800373a:	80bb      	strh	r3, [r7, #4]
 800373c:	e013      	b.n	8003766 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 800373e:	887b      	ldrh	r3, [r7, #2]
 8003740:	80fb      	strh	r3, [r7, #6]
 8003742:	e00a      	b.n	800375a <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003744:	f107 010c 	add.w	r1, r7, #12
 8003748:	f04f 33ff 	mov.w	r3, #4294967295
 800374c:	2202      	movs	r2, #2
 800374e:	480c      	ldr	r0, [pc, #48]	; (8003780 <ST7735_FillRectangle1+0xe4>)
 8003750:	f006 fc52 	bl	8009ff8 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003754:	88fb      	ldrh	r3, [r7, #6]
 8003756:	3b01      	subs	r3, #1
 8003758:	80fb      	strh	r3, [r7, #6]
 800375a:	88fb      	ldrh	r3, [r7, #6]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d1f1      	bne.n	8003744 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8003760:	88bb      	ldrh	r3, [r7, #4]
 8003762:	3b01      	subs	r3, #1
 8003764:	80bb      	strh	r3, [r7, #4]
 8003766:	88bb      	ldrh	r3, [r7, #4]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1e8      	bne.n	800373e <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 800376c:	f7ff fcba 	bl	80030e4 <ST7735_Unselect1>
 8003770:	e000      	b.n	8003774 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003772:	bf00      	nop
}
 8003774:	3714      	adds	r7, #20
 8003776:	46bd      	mov	sp, r7
 8003778:	bd90      	pop	{r4, r7, pc}
 800377a:	bf00      	nop
 800377c:	58021800 	.word	0x58021800
 8003780:	2400025c 	.word	0x2400025c

08003784 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8003784:	b590      	push	{r4, r7, lr}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	4604      	mov	r4, r0
 800378c:	4608      	mov	r0, r1
 800378e:	4611      	mov	r1, r2
 8003790:	461a      	mov	r2, r3
 8003792:	4623      	mov	r3, r4
 8003794:	80fb      	strh	r3, [r7, #6]
 8003796:	4603      	mov	r3, r0
 8003798:	80bb      	strh	r3, [r7, #4]
 800379a:	460b      	mov	r3, r1
 800379c:	807b      	strh	r3, [r7, #2]
 800379e:	4613      	mov	r3, r2
 80037a0:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80037a2:	88fb      	ldrh	r3, [r7, #6]
 80037a4:	2b7f      	cmp	r3, #127	; 0x7f
 80037a6:	d86e      	bhi.n	8003886 <ST7735_FillRectangleNSS+0x102>
 80037a8:	88bb      	ldrh	r3, [r7, #4]
 80037aa:	2b7f      	cmp	r3, #127	; 0x7f
 80037ac:	d86b      	bhi.n	8003886 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80037ae:	88fa      	ldrh	r2, [r7, #6]
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	4413      	add	r3, r2
 80037b4:	2b80      	cmp	r3, #128	; 0x80
 80037b6:	dd03      	ble.n	80037c0 <ST7735_FillRectangleNSS+0x3c>
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80037be:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80037c0:	88ba      	ldrh	r2, [r7, #4]
 80037c2:	883b      	ldrh	r3, [r7, #0]
 80037c4:	4413      	add	r3, r2
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	dd03      	ble.n	80037d2 <ST7735_FillRectangleNSS+0x4e>
 80037ca:	88bb      	ldrh	r3, [r7, #4]
 80037cc:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80037d0:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 80037d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 80037da:	f7ff fc5f 	bl	800309c <ST7735_Select>
 80037de:	e005      	b.n	80037ec <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 80037e0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	d101      	bne.n	80037ec <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 80037e8:	f7ff fc70 	bl	80030cc <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80037ec:	88fb      	ldrh	r3, [r7, #6]
 80037ee:	b2d8      	uxtb	r0, r3
 80037f0:	88bb      	ldrh	r3, [r7, #4]
 80037f2:	b2d9      	uxtb	r1, r3
 80037f4:	88fb      	ldrh	r3, [r7, #6]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	887b      	ldrh	r3, [r7, #2]
 80037fa:	b2db      	uxtb	r3, r3
 80037fc:	4413      	add	r3, r2
 80037fe:	b2db      	uxtb	r3, r3
 8003800:	3b01      	subs	r3, #1
 8003802:	b2dc      	uxtb	r4, r3
 8003804:	88bb      	ldrh	r3, [r7, #4]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	883b      	ldrh	r3, [r7, #0]
 800380a:	b2db      	uxtb	r3, r3
 800380c:	4413      	add	r3, r2
 800380e:	b2db      	uxtb	r3, r3
 8003810:	3b01      	subs	r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	4622      	mov	r2, r4
 8003816:	f7ff fd06 	bl	8003226 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 800381a:	8c3b      	ldrh	r3, [r7, #32]
 800381c:	0a1b      	lsrs	r3, r3, #8
 800381e:	b29b      	uxth	r3, r3
 8003820:	b2db      	uxtb	r3, r3
 8003822:	733b      	strb	r3, [r7, #12]
 8003824:	8c3b      	ldrh	r3, [r7, #32]
 8003826:	b2db      	uxtb	r3, r3
 8003828:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800382a:	2201      	movs	r2, #1
 800382c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003830:	4817      	ldr	r0, [pc, #92]	; (8003890 <ST7735_FillRectangleNSS+0x10c>)
 8003832:	f003 fda5 	bl	8007380 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8003836:	883b      	ldrh	r3, [r7, #0]
 8003838:	80bb      	strh	r3, [r7, #4]
 800383a:	e013      	b.n	8003864 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 800383c:	887b      	ldrh	r3, [r7, #2]
 800383e:	80fb      	strh	r3, [r7, #6]
 8003840:	e00a      	b.n	8003858 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8003842:	f107 010c 	add.w	r1, r7, #12
 8003846:	f04f 33ff 	mov.w	r3, #4294967295
 800384a:	2202      	movs	r2, #2
 800384c:	4811      	ldr	r0, [pc, #68]	; (8003894 <ST7735_FillRectangleNSS+0x110>)
 800384e:	f006 fbd3 	bl	8009ff8 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	3b01      	subs	r3, #1
 8003856:	80fb      	strh	r3, [r7, #6]
 8003858:	88fb      	ldrh	r3, [r7, #6]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d1f1      	bne.n	8003842 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 800385e:	88bb      	ldrh	r3, [r7, #4]
 8003860:	3b01      	subs	r3, #1
 8003862:	80bb      	strh	r3, [r7, #4]
 8003864:	88bb      	ldrh	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d1e8      	bne.n	800383c <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 800386a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8003872:	f7ff fc1f 	bl	80030b4 <ST7735_Unselect>
 8003876:	e007      	b.n	8003888 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8003878:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800387c:	2b01      	cmp	r3, #1
 800387e:	d103      	bne.n	8003888 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8003880:	f7ff fc30 	bl	80030e4 <ST7735_Unselect1>
 8003884:	e000      	b.n	8003888 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8003886:	bf00      	nop
	}
}
 8003888:	3714      	adds	r7, #20
 800388a:	46bd      	mov	sp, r7
 800388c:	bd90      	pop	{r4, r7, pc}
 800388e:	bf00      	nop
 8003890:	58021800 	.word	0x58021800
 8003894:	2400025c 	.word	0x2400025c

08003898 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af02      	add	r7, sp, #8
 800389e:	4603      	mov	r3, r0
 80038a0:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80038a2:	88fb      	ldrh	r3, [r7, #6]
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2380      	movs	r3, #128	; 0x80
 80038a8:	2280      	movs	r2, #128	; 0x80
 80038aa:	2100      	movs	r1, #0
 80038ac:	2000      	movs	r0, #0
 80038ae:	f7ff fe81 	bl	80035b4 <ST7735_FillRectangle>
}
 80038b2:	bf00      	nop
 80038b4:	3708      	adds	r7, #8
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}

080038ba <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80038ba:	b580      	push	{r7, lr}
 80038bc:	b084      	sub	sp, #16
 80038be:	af02      	add	r7, sp, #8
 80038c0:	4603      	mov	r3, r0
 80038c2:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80038c4:	88fb      	ldrh	r3, [r7, #6]
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	2380      	movs	r3, #128	; 0x80
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	2100      	movs	r1, #0
 80038ce:	2000      	movs	r0, #0
 80038d0:	f7ff fee4 	bl	800369c <ST7735_FillRectangle1>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	b083      	sub	sp, #12
 80038e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038e2:	4b0a      	ldr	r3, [pc, #40]	; (800390c <HAL_MspInit+0x30>)
 80038e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <HAL_MspInit+0x30>)
 80038ea:	f043 0302 	orr.w	r3, r3, #2
 80038ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_MspInit+0x30>)
 80038f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80038f8:	f003 0302 	and.w	r3, r3, #2
 80038fc:	607b      	str	r3, [r7, #4]
 80038fe:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003900:	bf00      	nop
 8003902:	370c      	adds	r7, #12
 8003904:	46bd      	mov	sp, r7
 8003906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390a:	4770      	bx	lr
 800390c:	58024400 	.word	0x58024400

08003910 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b08e      	sub	sp, #56	; 0x38
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800391c:	2200      	movs	r2, #0
 800391e:	601a      	str	r2, [r3, #0]
 8003920:	605a      	str	r2, [r3, #4]
 8003922:	609a      	str	r2, [r3, #8]
 8003924:	60da      	str	r2, [r3, #12]
 8003926:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a59      	ldr	r2, [pc, #356]	; (8003a94 <HAL_ETH_MspInit+0x184>)
 800392e:	4293      	cmp	r3, r2
 8003930:	f040 80ab 	bne.w	8003a8a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8003934:	4b58      	ldr	r3, [pc, #352]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003936:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800393a:	4a57      	ldr	r2, [pc, #348]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 800393c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003940:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003944:	4b54      	ldr	r3, [pc, #336]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003946:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800394a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800394e:	623b      	str	r3, [r7, #32]
 8003950:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8003952:	4b51      	ldr	r3, [pc, #324]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003954:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003958:	4a4f      	ldr	r2, [pc, #316]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 800395a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800395e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003962:	4b4d      	ldr	r3, [pc, #308]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003964:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800396c:	61fb      	str	r3, [r7, #28]
 800396e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8003970:	4b49      	ldr	r3, [pc, #292]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003972:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003976:	4a48      	ldr	r2, [pc, #288]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003978:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800397c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003980:	4b45      	ldr	r3, [pc, #276]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003982:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800398e:	4b42      	ldr	r3, [pc, #264]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003990:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003994:	4a40      	ldr	r2, [pc, #256]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800399e:	4b3e      	ldr	r3, [pc, #248]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039ac:	4b3a      	ldr	r3, [pc, #232]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039b2:	4a39      	ldr	r2, [pc, #228]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039b4:	f043 0301 	orr.w	r3, r3, #1
 80039b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039bc:	4b36      	ldr	r3, [pc, #216]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039c2:	f003 0301 	and.w	r3, r3, #1
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80039ca:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039d0:	4a31      	ldr	r2, [pc, #196]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039d2:	f043 0302 	orr.w	r3, r3, #2
 80039d6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039da:	4b2f      	ldr	r3, [pc, #188]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	60fb      	str	r3, [r7, #12]
 80039e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80039e8:	4b2b      	ldr	r3, [pc, #172]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039ee:	4a2a      	ldr	r2, [pc, #168]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039f4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80039f8:	4b27      	ldr	r3, [pc, #156]	; (8003a98 <HAL_ETH_MspInit+0x188>)
 80039fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80039fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a02:	60bb      	str	r3, [r7, #8]
 8003a04:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8003a06:	2332      	movs	r3, #50	; 0x32
 8003a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a0a:	2302      	movs	r3, #2
 8003a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a12:	2300      	movs	r3, #0
 8003a14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a16:	230b      	movs	r3, #11
 8003a18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a1e:	4619      	mov	r1, r3
 8003a20:	481e      	ldr	r0, [pc, #120]	; (8003a9c <HAL_ETH_MspInit+0x18c>)
 8003a22:	f003 fae5 	bl	8006ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8003a26:	2386      	movs	r3, #134	; 0x86
 8003a28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a2a:	2302      	movs	r3, #2
 8003a2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a36:	230b      	movs	r3, #11
 8003a38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a3e:	4619      	mov	r1, r3
 8003a40:	4817      	ldr	r0, [pc, #92]	; (8003aa0 <HAL_ETH_MspInit+0x190>)
 8003a42:	f003 fad5 	bl	8006ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a50:	2300      	movs	r3, #0
 8003a52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a54:	2300      	movs	r3, #0
 8003a56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a58:	230b      	movs	r3, #11
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a60:	4619      	mov	r1, r3
 8003a62:	4810      	ldr	r0, [pc, #64]	; (8003aa4 <HAL_ETH_MspInit+0x194>)
 8003a64:	f003 fac4 	bl	8006ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8003a68:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8003a6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a6e:	2302      	movs	r3, #2
 8003a70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	2300      	movs	r3, #0
 8003a74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a76:	2300      	movs	r3, #0
 8003a78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8003a7a:	230b      	movs	r3, #11
 8003a7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003a7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003a82:	4619      	mov	r1, r3
 8003a84:	4808      	ldr	r0, [pc, #32]	; (8003aa8 <HAL_ETH_MspInit+0x198>)
 8003a86:	f003 fab3 	bl	8006ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8003a8a:	bf00      	nop
 8003a8c:	3738      	adds	r7, #56	; 0x38
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}
 8003a92:	bf00      	nop
 8003a94:	40028000 	.word	0x40028000
 8003a98:	58024400 	.word	0x58024400
 8003a9c:	58020800 	.word	0x58020800
 8003aa0:	58020000 	.word	0x58020000
 8003aa4:	58020400 	.word	0x58020400
 8003aa8:	58021800 	.word	0x58021800

08003aac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b08a      	sub	sp, #40	; 0x28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0314 	add.w	r3, r7, #20
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a2a      	ldr	r2, [pc, #168]	; (8003b74 <HAL_SPI_MspInit+0xc8>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d14d      	bne.n	8003b6a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003ace:	4b2a      	ldr	r3, [pc, #168]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003ad0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ad4:	4a28      	ldr	r2, [pc, #160]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ada:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ade:	4b26      	ldr	r3, [pc, #152]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003ae0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003ae4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ae8:	613b      	str	r3, [r7, #16]
 8003aea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aec:	4b22      	ldr	r3, [pc, #136]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003aee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003af2:	4a21      	ldr	r2, [pc, #132]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003af4:	f043 0302 	orr.w	r3, r3, #2
 8003af8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003afc:	4b1e      	ldr	r3, [pc, #120]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003afe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	60fb      	str	r3, [r7, #12]
 8003b08:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003b0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b10:	4a19      	ldr	r2, [pc, #100]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003b12:	f043 0304 	orr.w	r3, r3, #4
 8003b16:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003b1a:	4b17      	ldr	r3, [pc, #92]	; (8003b78 <HAL_SPI_MspInit+0xcc>)
 8003b1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	60bb      	str	r3, [r7, #8]
 8003b26:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003b28:	2304      	movs	r3, #4
 8003b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b30:	2302      	movs	r3, #2
 8003b32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b34:	2300      	movs	r3, #0
 8003b36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8003b38:	2307      	movs	r3, #7
 8003b3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b3c:	f107 0314 	add.w	r3, r7, #20
 8003b40:	4619      	mov	r1, r3
 8003b42:	480e      	ldr	r0, [pc, #56]	; (8003b7c <HAL_SPI_MspInit+0xd0>)
 8003b44:	f003 fa54 	bl	8006ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003b48:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b4e:	2302      	movs	r3, #2
 8003b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003b52:	2302      	movs	r3, #2
 8003b54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b56:	2300      	movs	r3, #0
 8003b58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b5a:	2306      	movs	r3, #6
 8003b5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003b5e:	f107 0314 	add.w	r3, r7, #20
 8003b62:	4619      	mov	r1, r3
 8003b64:	4806      	ldr	r0, [pc, #24]	; (8003b80 <HAL_SPI_MspInit+0xd4>)
 8003b66:	f003 fa43 	bl	8006ff0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003b6a:	bf00      	nop
 8003b6c:	3728      	adds	r7, #40	; 0x28
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
 8003b72:	bf00      	nop
 8003b74:	40003c00 	.word	0x40003c00
 8003b78:	58024400 	.word	0x58024400
 8003b7c:	58020400 	.word	0x58020400
 8003b80:	58020800 	.word	0x58020800

08003b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0e      	ldr	r2, [pc, #56]	; (8003bcc <HAL_TIM_Base_MspInit+0x48>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d116      	bne.n	8003bc4 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b96:	4b0e      	ldr	r3, [pc, #56]	; (8003bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003b98:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003b9c:	4a0c      	ldr	r2, [pc, #48]	; (8003bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003b9e:	f043 0320 	orr.w	r3, r3, #32
 8003ba2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003ba6:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_TIM_Base_MspInit+0x4c>)
 8003ba8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003bac:	f003 0320 	and.w	r3, r3, #32
 8003bb0:	60fb      	str	r3, [r7, #12]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	2100      	movs	r1, #0
 8003bb8:	2037      	movs	r0, #55	; 0x37
 8003bba:	f000 fb9a 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003bbe:	2037      	movs	r0, #55	; 0x37
 8003bc0:	f000 fbb1 	bl	8004326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003bc4:	bf00      	nop
 8003bc6:	3710      	adds	r7, #16
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}
 8003bcc:	40001400 	.word	0x40001400
 8003bd0:	58024400 	.word	0x58024400

08003bd4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0b8      	sub	sp, #224	; 0xe0
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bdc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003bec:	f107 0310 	add.w	r3, r7, #16
 8003bf0:	22bc      	movs	r2, #188	; 0xbc
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f009 f88d 	bl	800cd14 <memset>
  if(huart->Instance==USART3)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a57      	ldr	r2, [pc, #348]	; (8003d5c <HAL_UART_MspInit+0x188>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	f040 80a6 	bne.w	8003d52 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003c06:	2302      	movs	r3, #2
 8003c08:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003c10:	f107 0310 	add.w	r3, r7, #16
 8003c14:	4618      	mov	r0, r3
 8003c16:	f004 fd81 	bl	800871c <HAL_RCCEx_PeriphCLKConfig>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d001      	beq.n	8003c24 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8003c20:	f7ff fa36 	bl	8003090 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003c24:	4b4e      	ldr	r3, [pc, #312]	; (8003d60 <HAL_UART_MspInit+0x18c>)
 8003c26:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c2a:	4a4d      	ldr	r2, [pc, #308]	; (8003d60 <HAL_UART_MspInit+0x18c>)
 8003c2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c30:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003c34:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_UART_MspInit+0x18c>)
 8003c36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003c3a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_UART_MspInit+0x18c>)
 8003c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c48:	4a45      	ldr	r2, [pc, #276]	; (8003d60 <HAL_UART_MspInit+0x18c>)
 8003c4a:	f043 0308 	orr.w	r3, r3, #8
 8003c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003c52:	4b43      	ldr	r3, [pc, #268]	; (8003d60 <HAL_UART_MspInit+0x18c>)
 8003c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003c58:	f003 0308 	and.w	r3, r3, #8
 8003c5c:	60bb      	str	r3, [r7, #8]
 8003c5e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8003c60:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003c64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c74:	2300      	movs	r3, #0
 8003c76:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c7a:	2307      	movs	r3, #7
 8003c7c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003c80:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8003c84:	4619      	mov	r1, r3
 8003c86:	4837      	ldr	r0, [pc, #220]	; (8003d64 <HAL_UART_MspInit+0x190>)
 8003c88:	f003 f9b2 	bl	8006ff0 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003c8c:	4b36      	ldr	r3, [pc, #216]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003c8e:	4a37      	ldr	r2, [pc, #220]	; (8003d6c <HAL_UART_MspInit+0x198>)
 8003c90:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8003c92:	4b35      	ldr	r3, [pc, #212]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003c94:	222d      	movs	r2, #45	; 0x2d
 8003c96:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c98:	4b33      	ldr	r3, [pc, #204]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c9e:	4b32      	ldr	r3, [pc, #200]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ca4:	4b30      	ldr	r3, [pc, #192]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003ca6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003caa:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cac:	4b2e      	ldr	r3, [pc, #184]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cb2:	4b2d      	ldr	r3, [pc, #180]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003cb8:	4b2b      	ldr	r3, [pc, #172]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003cba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003cbe:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003cc0:	4b29      	ldr	r3, [pc, #164]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003cc6:	4b28      	ldr	r3, [pc, #160]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003ccc:	4826      	ldr	r0, [pc, #152]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003cce:	f000 fb45 	bl	800435c <HAL_DMA_Init>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8003cd8:	f7ff f9da 	bl	8003090 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a22      	ldr	r2, [pc, #136]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003ce0:	67da      	str	r2, [r3, #124]	; 0x7c
 8003ce2:	4a21      	ldr	r2, [pc, #132]	; (8003d68 <HAL_UART_MspInit+0x194>)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8003ce8:	4b21      	ldr	r3, [pc, #132]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003cea:	4a22      	ldr	r2, [pc, #136]	; (8003d74 <HAL_UART_MspInit+0x1a0>)
 8003cec:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8003cee:	4b20      	ldr	r3, [pc, #128]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003cf0:	222e      	movs	r2, #46	; 0x2e
 8003cf2:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003cf4:	4b1e      	ldr	r3, [pc, #120]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003cf6:	2240      	movs	r2, #64	; 0x40
 8003cf8:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003d00:	4b1b      	ldr	r3, [pc, #108]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d02:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d06:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003d08:	4b19      	ldr	r3, [pc, #100]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003d0e:	4b18      	ldr	r3, [pc, #96]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8003d14:	4b16      	ldr	r3, [pc, #88]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d16:	2200      	movs	r2, #0
 8003d18:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003d1a:	4b15      	ldr	r3, [pc, #84]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003d20:	4b13      	ldr	r3, [pc, #76]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8003d26:	4812      	ldr	r0, [pc, #72]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d28:	f000 fb18 	bl	800435c <HAL_DMA_Init>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d001      	beq.n	8003d36 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8003d32:	f7ff f9ad 	bl	8003090 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a0d      	ldr	r2, [pc, #52]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d3a:	679a      	str	r2, [r3, #120]	; 0x78
 8003d3c:	4a0c      	ldr	r2, [pc, #48]	; (8003d70 <HAL_UART_MspInit+0x19c>)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	2027      	movs	r0, #39	; 0x27
 8003d48:	f000 fad3 	bl	80042f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003d4c:	2027      	movs	r0, #39	; 0x27
 8003d4e:	f000 faea 	bl	8004326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003d52:	bf00      	nop
 8003d54:	37e0      	adds	r7, #224	; 0xe0
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40004800 	.word	0x40004800
 8003d60:	58024400 	.word	0x58024400
 8003d64:	58020c00 	.word	0x58020c00
 8003d68:	240003c0 	.word	0x240003c0
 8003d6c:	40020028 	.word	0x40020028
 8003d70:	24000438 	.word	0x24000438
 8003d74:	40020070 	.word	0x40020070

08003d78 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b08a      	sub	sp, #40	; 0x28
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	f107 0314 	add.w	r3, r7, #20
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	605a      	str	r2, [r3, #4]
 8003d8a:	609a      	str	r2, [r3, #8]
 8003d8c:	60da      	str	r2, [r3, #12]
 8003d8e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a22      	ldr	r2, [pc, #136]	; (8003e20 <HAL_PCD_MspInit+0xa8>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d13d      	bne.n	8003e16 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8003d9a:	f003 fcf5 	bl	8007788 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d9e:	4b21      	ldr	r3, [pc, #132]	; (8003e24 <HAL_PCD_MspInit+0xac>)
 8003da0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003da4:	4a1f      	ldr	r2, [pc, #124]	; (8003e24 <HAL_PCD_MspInit+0xac>)
 8003da6:	f043 0301 	orr.w	r3, r3, #1
 8003daa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <HAL_PCD_MspInit+0xac>)
 8003db0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	613b      	str	r3, [r7, #16]
 8003dba:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8003dbc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003dc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc2:	2302      	movs	r3, #2
 8003dc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dca:	2300      	movs	r3, #0
 8003dcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8003dce:	230a      	movs	r3, #10
 8003dd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dd2:	f107 0314 	add.w	r3, r7, #20
 8003dd6:	4619      	mov	r1, r3
 8003dd8:	4813      	ldr	r0, [pc, #76]	; (8003e28 <HAL_PCD_MspInit+0xb0>)
 8003dda:	f003 f909 	bl	8006ff0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003dde:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003de4:	2300      	movs	r3, #0
 8003de6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003de8:	2300      	movs	r3, #0
 8003dea:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dec:	f107 0314 	add.w	r3, r7, #20
 8003df0:	4619      	mov	r1, r3
 8003df2:	480d      	ldr	r0, [pc, #52]	; (8003e28 <HAL_PCD_MspInit+0xb0>)
 8003df4:	f003 f8fc 	bl	8006ff0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8003df8:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <HAL_PCD_MspInit+0xac>)
 8003dfa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003dfe:	4a09      	ldr	r2, [pc, #36]	; (8003e24 <HAL_PCD_MspInit+0xac>)
 8003e00:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <HAL_PCD_MspInit+0xac>)
 8003e0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8003e0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e12:	60fb      	str	r3, [r7, #12]
 8003e14:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	; 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40080000 	.word	0x40080000
 8003e24:	58024400 	.word	0x58024400
 8003e28:	58020000 	.word	0x58020000

08003e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e30:	e7fe      	b.n	8003e30 <NMI_Handler+0x4>

08003e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e32:	b480      	push	{r7}
 8003e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e36:	e7fe      	b.n	8003e36 <HardFault_Handler+0x4>

08003e38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e3c:	e7fe      	b.n	8003e3c <MemManage_Handler+0x4>

08003e3e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e42:	e7fe      	b.n	8003e42 <BusFault_Handler+0x4>

08003e44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e48:	e7fe      	b.n	8003e48 <UsageFault_Handler+0x4>

08003e4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e4e:	bf00      	nop
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e5c:	bf00      	nop
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e66:	b480      	push	{r7}
 8003e68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e6a:	bf00      	nop
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e78:	f000 f8fc 	bl	8004074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e7c:	bf00      	nop
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8003e84:	4802      	ldr	r0, [pc, #8]	; (8003e90 <DMA1_Stream1_IRQHandler+0x10>)
 8003e86:	f001 fb29 	bl	80054dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8003e8a:	bf00      	nop
 8003e8c:	bd80      	pop	{r7, pc}
 8003e8e:	bf00      	nop
 8003e90:	240003c0 	.word	0x240003c0

08003e94 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8003e98:	4802      	ldr	r0, [pc, #8]	; (8003ea4 <DMA1_Stream4_IRQHandler+0x10>)
 8003e9a:	f001 fb1f 	bl	80054dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8003e9e:	bf00      	nop
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	24000438 	.word	0x24000438

08003ea8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003eac:	4802      	ldr	r0, [pc, #8]	; (8003eb8 <USART3_IRQHandler+0x10>)
 8003eae:	f006 ff59 	bl	800ad64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003eb2:	bf00      	nop
 8003eb4:	bd80      	pop	{r7, pc}
 8003eb6:	bf00      	nop
 8003eb8:	24000330 	.word	0x24000330

08003ebc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ec0:	4802      	ldr	r0, [pc, #8]	; (8003ecc <TIM7_IRQHandler+0x10>)
 8003ec2:	f006 fc72 	bl	800a7aa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	240002e4 	.word	0x240002e4

08003ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b086      	sub	sp, #24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ed8:	4a14      	ldr	r2, [pc, #80]	; (8003f2c <_sbrk+0x5c>)
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <_sbrk+0x60>)
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ee4:	4b13      	ldr	r3, [pc, #76]	; (8003f34 <_sbrk+0x64>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eec:	4b11      	ldr	r3, [pc, #68]	; (8003f34 <_sbrk+0x64>)
 8003eee:	4a12      	ldr	r2, [pc, #72]	; (8003f38 <_sbrk+0x68>)
 8003ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ef2:	4b10      	ldr	r3, [pc, #64]	; (8003f34 <_sbrk+0x64>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4413      	add	r3, r2
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d207      	bcs.n	8003f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003f00:	f008 fede 	bl	800ccc0 <__errno>
 8003f04:	4603      	mov	r3, r0
 8003f06:	220c      	movs	r2, #12
 8003f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8003f0e:	e009      	b.n	8003f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003f10:	4b08      	ldr	r3, [pc, #32]	; (8003f34 <_sbrk+0x64>)
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003f16:	4b07      	ldr	r3, [pc, #28]	; (8003f34 <_sbrk+0x64>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a05      	ldr	r2, [pc, #20]	; (8003f34 <_sbrk+0x64>)
 8003f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3718      	adds	r7, #24
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	24080000 	.word	0x24080000
 8003f30:	00000400 	.word	0x00000400
 8003f34:	24000ea8 	.word	0x24000ea8
 8003f38:	24000ec0 	.word	0x24000ec0

08003f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003f40:	f7fe fc0e 	bl	8002760 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f44:	480c      	ldr	r0, [pc, #48]	; (8003f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f46:	490d      	ldr	r1, [pc, #52]	; (8003f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f48:	4a0d      	ldr	r2, [pc, #52]	; (8003f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f4c:	e002      	b.n	8003f54 <LoopCopyDataInit>

08003f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f52:	3304      	adds	r3, #4

08003f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f58:	d3f9      	bcc.n	8003f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f5a:	4a0a      	ldr	r2, [pc, #40]	; (8003f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f5c:	4c0a      	ldr	r4, [pc, #40]	; (8003f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f60:	e001      	b.n	8003f66 <LoopFillZerobss>

08003f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f64:	3204      	adds	r2, #4

08003f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f68:	d3fb      	bcc.n	8003f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f6a:	f008 feaf 	bl	800cccc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f6e:	f7fe fc8d 	bl	800288c <main>
  bx  lr
 8003f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003f7c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8003f80:	0800ed3c 	.word	0x0800ed3c
  ldr r2, =_sbss
 8003f84:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8003f88:	24000ec0 	.word	0x24000ec0

08003f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f8c:	e7fe      	b.n	8003f8c <ADC3_IRQHandler>
	...

08003f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f96:	2003      	movs	r0, #3
 8003f98:	f000 f9a0 	bl	80042dc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003f9c:	f004 f9e8 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 8003fa0:	4602      	mov	r2, r0
 8003fa2:	4b15      	ldr	r3, [pc, #84]	; (8003ff8 <HAL_Init+0x68>)
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	0a1b      	lsrs	r3, r3, #8
 8003fa8:	f003 030f 	and.w	r3, r3, #15
 8003fac:	4913      	ldr	r1, [pc, #76]	; (8003ffc <HAL_Init+0x6c>)
 8003fae:	5ccb      	ldrb	r3, [r1, r3]
 8003fb0:	f003 031f 	and.w	r3, r3, #31
 8003fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8003fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003fba:	4b0f      	ldr	r3, [pc, #60]	; (8003ff8 <HAL_Init+0x68>)
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 030f 	and.w	r3, r3, #15
 8003fc2:	4a0e      	ldr	r2, [pc, #56]	; (8003ffc <HAL_Init+0x6c>)
 8003fc4:	5cd3      	ldrb	r3, [r2, r3]
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <HAL_Init+0x70>)
 8003fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003fd4:	4a0b      	ldr	r2, [pc, #44]	; (8004004 <HAL_Init+0x74>)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f000 f814 	bl	8004008 <HAL_InitTick>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d001      	beq.n	8003fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e002      	b.n	8003ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003fea:	f7ff fc77 	bl	80038dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fee:	2300      	movs	r3, #0
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	3708      	adds	r7, #8
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	bd80      	pop	{r7, pc}
 8003ff8:	58024400 	.word	0x58024400
 8003ffc:	0800d778 	.word	0x0800d778
 8004000:	24000008 	.word	0x24000008
 8004004:	24000004 	.word	0x24000004

08004008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b082      	sub	sp, #8
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004010:	4b15      	ldr	r3, [pc, #84]	; (8004068 <HAL_InitTick+0x60>)
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	2b00      	cmp	r3, #0
 8004016:	d101      	bne.n	800401c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004018:	2301      	movs	r3, #1
 800401a:	e021      	b.n	8004060 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800401c:	4b13      	ldr	r3, [pc, #76]	; (800406c <HAL_InitTick+0x64>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	4b11      	ldr	r3, [pc, #68]	; (8004068 <HAL_InitTick+0x60>)
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	4619      	mov	r1, r3
 8004026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800402a:	fbb3 f3f1 	udiv	r3, r3, r1
 800402e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004032:	4618      	mov	r0, r3
 8004034:	f000 f985 	bl	8004342 <HAL_SYSTICK_Config>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e00e      	b.n	8004060 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2b0f      	cmp	r3, #15
 8004046:	d80a      	bhi.n	800405e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004048:	2200      	movs	r2, #0
 800404a:	6879      	ldr	r1, [r7, #4]
 800404c:	f04f 30ff 	mov.w	r0, #4294967295
 8004050:	f000 f94f 	bl	80042f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004054:	4a06      	ldr	r2, [pc, #24]	; (8004070 <HAL_InitTick+0x68>)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
 800405c:	e000      	b.n	8004060 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
}
 8004060:	4618      	mov	r0, r3
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	24000020 	.word	0x24000020
 800406c:	24000004 	.word	0x24000004
 8004070:	2400001c 	.word	0x2400001c

08004074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004078:	4b06      	ldr	r3, [pc, #24]	; (8004094 <HAL_IncTick+0x20>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	461a      	mov	r2, r3
 800407e:	4b06      	ldr	r3, [pc, #24]	; (8004098 <HAL_IncTick+0x24>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4413      	add	r3, r2
 8004084:	4a04      	ldr	r2, [pc, #16]	; (8004098 <HAL_IncTick+0x24>)
 8004086:	6013      	str	r3, [r2, #0]
}
 8004088:	bf00      	nop
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	24000020 	.word	0x24000020
 8004098:	24000eac 	.word	0x24000eac

0800409c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0
  return uwTick;
 80040a0:	4b03      	ldr	r3, [pc, #12]	; (80040b0 <HAL_GetTick+0x14>)
 80040a2:	681b      	ldr	r3, [r3, #0]
}
 80040a4:	4618      	mov	r0, r3
 80040a6:	46bd      	mov	sp, r7
 80040a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	24000eac 	.word	0x24000eac

080040b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80040bc:	f7ff ffee 	bl	800409c <HAL_GetTick>
 80040c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040cc:	d005      	beq.n	80040da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80040ce:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_Delay+0x44>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	461a      	mov	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4413      	add	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80040da:	bf00      	nop
 80040dc:	f7ff ffde 	bl	800409c <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d8f7      	bhi.n	80040dc <HAL_Delay+0x28>
  {
  }
}
 80040ec:	bf00      	nop
 80040ee:	bf00      	nop
 80040f0:	3710      	adds	r7, #16
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
 80040f6:	bf00      	nop
 80040f8:	24000020 	.word	0x24000020

080040fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80040fc:	b480      	push	{r7}
 80040fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004100:	4b03      	ldr	r3, [pc, #12]	; (8004110 <HAL_GetREVID+0x14>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	0c1b      	lsrs	r3, r3, #16
}
 8004106:	4618      	mov	r0, r3
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	5c001000 	.word	0x5c001000

08004114 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004114:	b480      	push	{r7}
 8004116:	b083      	sub	sp, #12
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800411c:	4b06      	ldr	r3, [pc, #24]	; (8004138 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800411e:	685b      	ldr	r3, [r3, #4]
 8004120:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004124:	4904      	ldr	r1, [pc, #16]	; (8004138 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4313      	orrs	r3, r2
 800412a:	604b      	str	r3, [r1, #4]
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	58000400 	.word	0x58000400

0800413c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f003 0307 	and.w	r3, r3, #7
 800414a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800414c:	4b0b      	ldr	r3, [pc, #44]	; (800417c <__NVIC_SetPriorityGrouping+0x40>)
 800414e:	68db      	ldr	r3, [r3, #12]
 8004150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004158:	4013      	ands	r3, r2
 800415a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004164:	4b06      	ldr	r3, [pc, #24]	; (8004180 <__NVIC_SetPriorityGrouping+0x44>)
 8004166:	4313      	orrs	r3, r2
 8004168:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800416a:	4a04      	ldr	r2, [pc, #16]	; (800417c <__NVIC_SetPriorityGrouping+0x40>)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	60d3      	str	r3, [r2, #12]
}
 8004170:	bf00      	nop
 8004172:	3714      	adds	r7, #20
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr
 800417c:	e000ed00 	.word	0xe000ed00
 8004180:	05fa0000 	.word	0x05fa0000

08004184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004188:	4b04      	ldr	r3, [pc, #16]	; (800419c <__NVIC_GetPriorityGrouping+0x18>)
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	0a1b      	lsrs	r3, r3, #8
 800418e:	f003 0307 	and.w	r3, r3, #7
}
 8004192:	4618      	mov	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	4603      	mov	r3, r0
 80041a8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	db0b      	blt.n	80041ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041b2:	88fb      	ldrh	r3, [r7, #6]
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4907      	ldr	r1, [pc, #28]	; (80041d8 <__NVIC_EnableIRQ+0x38>)
 80041ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041be:	095b      	lsrs	r3, r3, #5
 80041c0:	2001      	movs	r0, #1
 80041c2:	fa00 f202 	lsl.w	r2, r0, r2
 80041c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	e000e100 	.word	0xe000e100

080041dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041dc:	b480      	push	{r7}
 80041de:	b083      	sub	sp, #12
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	4603      	mov	r3, r0
 80041e4:	6039      	str	r1, [r7, #0]
 80041e6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80041e8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	db0a      	blt.n	8004206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	490c      	ldr	r1, [pc, #48]	; (8004228 <__NVIC_SetPriority+0x4c>)
 80041f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80041fa:	0112      	lsls	r2, r2, #4
 80041fc:	b2d2      	uxtb	r2, r2
 80041fe:	440b      	add	r3, r1
 8004200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004204:	e00a      	b.n	800421c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <__NVIC_SetPriority+0x50>)
 800420c:	88fb      	ldrh	r3, [r7, #6]
 800420e:	f003 030f 	and.w	r3, r3, #15
 8004212:	3b04      	subs	r3, #4
 8004214:	0112      	lsls	r2, r2, #4
 8004216:	b2d2      	uxtb	r2, r2
 8004218:	440b      	add	r3, r1
 800421a:	761a      	strb	r2, [r3, #24]
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr
 8004228:	e000e100 	.word	0xe000e100
 800422c:	e000ed00 	.word	0xe000ed00

08004230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004230:	b480      	push	{r7}
 8004232:	b089      	sub	sp, #36	; 0x24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f003 0307 	and.w	r3, r3, #7
 8004242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	f1c3 0307 	rsb	r3, r3, #7
 800424a:	2b04      	cmp	r3, #4
 800424c:	bf28      	it	cs
 800424e:	2304      	movcs	r3, #4
 8004250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3304      	adds	r3, #4
 8004256:	2b06      	cmp	r3, #6
 8004258:	d902      	bls.n	8004260 <NVIC_EncodePriority+0x30>
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	3b03      	subs	r3, #3
 800425e:	e000      	b.n	8004262 <NVIC_EncodePriority+0x32>
 8004260:	2300      	movs	r3, #0
 8004262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004264:	f04f 32ff 	mov.w	r2, #4294967295
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	fa02 f303 	lsl.w	r3, r2, r3
 800426e:	43da      	mvns	r2, r3
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	401a      	ands	r2, r3
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004278:	f04f 31ff 	mov.w	r1, #4294967295
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	fa01 f303 	lsl.w	r3, r1, r3
 8004282:	43d9      	mvns	r1, r3
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004288:	4313      	orrs	r3, r2
         );
}
 800428a:	4618      	mov	r0, r3
 800428c:	3724      	adds	r7, #36	; 0x24
 800428e:	46bd      	mov	sp, r7
 8004290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004294:	4770      	bx	lr
	...

08004298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	3b01      	subs	r3, #1
 80042a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a8:	d301      	bcc.n	80042ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80042aa:	2301      	movs	r3, #1
 80042ac:	e00f      	b.n	80042ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042ae:	4a0a      	ldr	r2, [pc, #40]	; (80042d8 <SysTick_Config+0x40>)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042b6:	210f      	movs	r1, #15
 80042b8:	f04f 30ff 	mov.w	r0, #4294967295
 80042bc:	f7ff ff8e 	bl	80041dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042c0:	4b05      	ldr	r3, [pc, #20]	; (80042d8 <SysTick_Config+0x40>)
 80042c2:	2200      	movs	r2, #0
 80042c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042c6:	4b04      	ldr	r3, [pc, #16]	; (80042d8 <SysTick_Config+0x40>)
 80042c8:	2207      	movs	r2, #7
 80042ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
 80042d6:	bf00      	nop
 80042d8:	e000e010 	.word	0xe000e010

080042dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b082      	sub	sp, #8
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042e4:	6878      	ldr	r0, [r7, #4]
 80042e6:	f7ff ff29 	bl	800413c <__NVIC_SetPriorityGrouping>
}
 80042ea:	bf00      	nop
 80042ec:	3708      	adds	r7, #8
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042f2:	b580      	push	{r7, lr}
 80042f4:	b086      	sub	sp, #24
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	4603      	mov	r3, r0
 80042fa:	60b9      	str	r1, [r7, #8]
 80042fc:	607a      	str	r2, [r7, #4]
 80042fe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004300:	f7ff ff40 	bl	8004184 <__NVIC_GetPriorityGrouping>
 8004304:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	68b9      	ldr	r1, [r7, #8]
 800430a:	6978      	ldr	r0, [r7, #20]
 800430c:	f7ff ff90 	bl	8004230 <NVIC_EncodePriority>
 8004310:	4602      	mov	r2, r0
 8004312:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004316:	4611      	mov	r1, r2
 8004318:	4618      	mov	r0, r3
 800431a:	f7ff ff5f 	bl	80041dc <__NVIC_SetPriority>
}
 800431e:	bf00      	nop
 8004320:	3718      	adds	r7, #24
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b082      	sub	sp, #8
 800432a:	af00      	add	r7, sp, #0
 800432c:	4603      	mov	r3, r0
 800432e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004330:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004334:	4618      	mov	r0, r3
 8004336:	f7ff ff33 	bl	80041a0 <__NVIC_EnableIRQ>
}
 800433a:	bf00      	nop
 800433c:	3708      	adds	r7, #8
 800433e:	46bd      	mov	sp, r7
 8004340:	bd80      	pop	{r7, pc}

08004342 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b082      	sub	sp, #8
 8004346:	af00      	add	r7, sp, #0
 8004348:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800434a:	6878      	ldr	r0, [r7, #4]
 800434c:	f7ff ffa4 	bl	8004298 <SysTick_Config>
 8004350:	4603      	mov	r3, r0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
	...

0800435c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b086      	sub	sp, #24
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7ff fe9a 	bl	800409c <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e316      	b.n	80049a2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a66      	ldr	r2, [pc, #408]	; (8004514 <HAL_DMA_Init+0x1b8>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d04a      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a65      	ldr	r2, [pc, #404]	; (8004518 <HAL_DMA_Init+0x1bc>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d045      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a63      	ldr	r2, [pc, #396]	; (800451c <HAL_DMA_Init+0x1c0>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d040      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a62      	ldr	r2, [pc, #392]	; (8004520 <HAL_DMA_Init+0x1c4>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d03b      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a60      	ldr	r2, [pc, #384]	; (8004524 <HAL_DMA_Init+0x1c8>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d036      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a5f      	ldr	r2, [pc, #380]	; (8004528 <HAL_DMA_Init+0x1cc>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d031      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a5d      	ldr	r2, [pc, #372]	; (800452c <HAL_DMA_Init+0x1d0>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d02c      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	4a5c      	ldr	r2, [pc, #368]	; (8004530 <HAL_DMA_Init+0x1d4>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d027      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a5a      	ldr	r2, [pc, #360]	; (8004534 <HAL_DMA_Init+0x1d8>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d022      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a59      	ldr	r2, [pc, #356]	; (8004538 <HAL_DMA_Init+0x1dc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d01d      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a57      	ldr	r2, [pc, #348]	; (800453c <HAL_DMA_Init+0x1e0>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d018      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a56      	ldr	r2, [pc, #344]	; (8004540 <HAL_DMA_Init+0x1e4>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d013      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a54      	ldr	r2, [pc, #336]	; (8004544 <HAL_DMA_Init+0x1e8>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d00e      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a53      	ldr	r2, [pc, #332]	; (8004548 <HAL_DMA_Init+0x1ec>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d009      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4a51      	ldr	r2, [pc, #324]	; (800454c <HAL_DMA_Init+0x1f0>)
 8004406:	4293      	cmp	r3, r2
 8004408:	d004      	beq.n	8004414 <HAL_DMA_Init+0xb8>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a50      	ldr	r2, [pc, #320]	; (8004550 <HAL_DMA_Init+0x1f4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d101      	bne.n	8004418 <HAL_DMA_Init+0xbc>
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_DMA_Init+0xbe>
 8004418:	2300      	movs	r3, #0
 800441a:	2b00      	cmp	r3, #0
 800441c:	f000 813b 	beq.w	8004696 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a37      	ldr	r2, [pc, #220]	; (8004514 <HAL_DMA_Init+0x1b8>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d04a      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a36      	ldr	r2, [pc, #216]	; (8004518 <HAL_DMA_Init+0x1bc>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d045      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a34      	ldr	r2, [pc, #208]	; (800451c <HAL_DMA_Init+0x1c0>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d040      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a33      	ldr	r2, [pc, #204]	; (8004520 <HAL_DMA_Init+0x1c4>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d03b      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a31      	ldr	r2, [pc, #196]	; (8004524 <HAL_DMA_Init+0x1c8>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d036      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a30      	ldr	r2, [pc, #192]	; (8004528 <HAL_DMA_Init+0x1cc>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d031      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a2e      	ldr	r2, [pc, #184]	; (800452c <HAL_DMA_Init+0x1d0>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d02c      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a2d      	ldr	r2, [pc, #180]	; (8004530 <HAL_DMA_Init+0x1d4>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d027      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2b      	ldr	r2, [pc, #172]	; (8004534 <HAL_DMA_Init+0x1d8>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d022      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <HAL_DMA_Init+0x1dc>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d01d      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a28      	ldr	r2, [pc, #160]	; (800453c <HAL_DMA_Init+0x1e0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d018      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a27      	ldr	r2, [pc, #156]	; (8004540 <HAL_DMA_Init+0x1e4>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d013      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a25      	ldr	r2, [pc, #148]	; (8004544 <HAL_DMA_Init+0x1e8>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00e      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a24      	ldr	r2, [pc, #144]	; (8004548 <HAL_DMA_Init+0x1ec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d009      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a22      	ldr	r2, [pc, #136]	; (800454c <HAL_DMA_Init+0x1f0>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d004      	beq.n	80044d0 <HAL_DMA_Init+0x174>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a21      	ldr	r2, [pc, #132]	; (8004550 <HAL_DMA_Init+0x1f4>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d108      	bne.n	80044e2 <HAL_DMA_Init+0x186>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]
 80044e0:	e007      	b.n	80044f2 <HAL_DMA_Init+0x196>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f022 0201 	bic.w	r2, r2, #1
 80044f0:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80044f2:	e02f      	b.n	8004554 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044f4:	f7ff fdd2 	bl	800409c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b05      	cmp	r3, #5
 8004500:	d928      	bls.n	8004554 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2203      	movs	r2, #3
 800450c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e246      	b.n	80049a2 <HAL_DMA_Init+0x646>
 8004514:	40020010 	.word	0x40020010
 8004518:	40020028 	.word	0x40020028
 800451c:	40020040 	.word	0x40020040
 8004520:	40020058 	.word	0x40020058
 8004524:	40020070 	.word	0x40020070
 8004528:	40020088 	.word	0x40020088
 800452c:	400200a0 	.word	0x400200a0
 8004530:	400200b8 	.word	0x400200b8
 8004534:	40020410 	.word	0x40020410
 8004538:	40020428 	.word	0x40020428
 800453c:	40020440 	.word	0x40020440
 8004540:	40020458 	.word	0x40020458
 8004544:	40020470 	.word	0x40020470
 8004548:	40020488 	.word	0x40020488
 800454c:	400204a0 	.word	0x400204a0
 8004550:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d1c8      	bne.n	80044f4 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	4b83      	ldr	r3, [pc, #524]	; (800477c <HAL_DMA_Init+0x420>)
 800456e:	4013      	ands	r3, r2
 8004570:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800457a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004586:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004592:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d107      	bne.n	80045b8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	4313      	orrs	r3, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80045b8:	4b71      	ldr	r3, [pc, #452]	; (8004780 <HAL_DMA_Init+0x424>)
 80045ba:	681a      	ldr	r2, [r3, #0]
 80045bc:	4b71      	ldr	r3, [pc, #452]	; (8004784 <HAL_DMA_Init+0x428>)
 80045be:	4013      	ands	r3, r2
 80045c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045c4:	d328      	bcc.n	8004618 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2b28      	cmp	r3, #40	; 0x28
 80045cc:	d903      	bls.n	80045d6 <HAL_DMA_Init+0x27a>
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	2b2e      	cmp	r3, #46	; 0x2e
 80045d4:	d917      	bls.n	8004606 <HAL_DMA_Init+0x2aa>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	2b3e      	cmp	r3, #62	; 0x3e
 80045dc:	d903      	bls.n	80045e6 <HAL_DMA_Init+0x28a>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	2b42      	cmp	r3, #66	; 0x42
 80045e4:	d90f      	bls.n	8004606 <HAL_DMA_Init+0x2aa>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	2b46      	cmp	r3, #70	; 0x46
 80045ec:	d903      	bls.n	80045f6 <HAL_DMA_Init+0x29a>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	2b48      	cmp	r3, #72	; 0x48
 80045f4:	d907      	bls.n	8004606 <HAL_DMA_Init+0x2aa>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	2b4e      	cmp	r3, #78	; 0x4e
 80045fc:	d905      	bls.n	800460a <HAL_DMA_Init+0x2ae>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	2b52      	cmp	r3, #82	; 0x52
 8004604:	d801      	bhi.n	800460a <HAL_DMA_Init+0x2ae>
 8004606:	2301      	movs	r3, #1
 8004608:	e000      	b.n	800460c <HAL_DMA_Init+0x2b0>
 800460a:	2300      	movs	r3, #0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004616:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	695b      	ldr	r3, [r3, #20]
 8004626:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	4313      	orrs	r3, r2
 8004638:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800463e:	2b04      	cmp	r3, #4
 8004640:	d117      	bne.n	8004672 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f001 ff1d 	bl	8006494 <DMA_CheckFifoParam>
 800465a:	4603      	mov	r3, r0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d008      	beq.n	8004672 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2240      	movs	r2, #64	; 0x40
 8004664:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	e197      	b.n	80049a2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	697a      	ldr	r2, [r7, #20]
 8004678:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f001 fe58 	bl	8006330 <DMA_CalcBaseAndBitshift>
 8004680:	4603      	mov	r3, r0
 8004682:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004688:	f003 031f 	and.w	r3, r3, #31
 800468c:	223f      	movs	r2, #63	; 0x3f
 800468e:	409a      	lsls	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	609a      	str	r2, [r3, #8]
 8004694:	e0cd      	b.n	8004832 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a3b      	ldr	r2, [pc, #236]	; (8004788 <HAL_DMA_Init+0x42c>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d022      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a39      	ldr	r2, [pc, #228]	; (800478c <HAL_DMA_Init+0x430>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d01d      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a38      	ldr	r2, [pc, #224]	; (8004790 <HAL_DMA_Init+0x434>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d018      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a36      	ldr	r2, [pc, #216]	; (8004794 <HAL_DMA_Init+0x438>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d013      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a35      	ldr	r2, [pc, #212]	; (8004798 <HAL_DMA_Init+0x43c>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d00e      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a33      	ldr	r2, [pc, #204]	; (800479c <HAL_DMA_Init+0x440>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d009      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4a32      	ldr	r2, [pc, #200]	; (80047a0 <HAL_DMA_Init+0x444>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d004      	beq.n	80046e6 <HAL_DMA_Init+0x38a>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4a30      	ldr	r2, [pc, #192]	; (80047a4 <HAL_DMA_Init+0x448>)
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d101      	bne.n	80046ea <HAL_DMA_Init+0x38e>
 80046e6:	2301      	movs	r3, #1
 80046e8:	e000      	b.n	80046ec <HAL_DMA_Init+0x390>
 80046ea:	2300      	movs	r3, #0
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8097 	beq.w	8004820 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	4a24      	ldr	r2, [pc, #144]	; (8004788 <HAL_DMA_Init+0x42c>)
 80046f8:	4293      	cmp	r3, r2
 80046fa:	d021      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a22      	ldr	r2, [pc, #136]	; (800478c <HAL_DMA_Init+0x430>)
 8004702:	4293      	cmp	r3, r2
 8004704:	d01c      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a21      	ldr	r2, [pc, #132]	; (8004790 <HAL_DMA_Init+0x434>)
 800470c:	4293      	cmp	r3, r2
 800470e:	d017      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4a1f      	ldr	r2, [pc, #124]	; (8004794 <HAL_DMA_Init+0x438>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d012      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a1e      	ldr	r2, [pc, #120]	; (8004798 <HAL_DMA_Init+0x43c>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d00d      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <HAL_DMA_Init+0x440>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d008      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1b      	ldr	r2, [pc, #108]	; (80047a0 <HAL_DMA_Init+0x444>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d003      	beq.n	8004740 <HAL_DMA_Init+0x3e4>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a19      	ldr	r2, [pc, #100]	; (80047a4 <HAL_DMA_Init+0x448>)
 800473e:	4293      	cmp	r3, r2
 8004740:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2202      	movs	r2, #2
 8004746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	4b12      	ldr	r3, [pc, #72]	; (80047a8 <HAL_DMA_Init+0x44c>)
 800475e:	4013      	ands	r3, r2
 8004760:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	2b40      	cmp	r3, #64	; 0x40
 8004768:	d020      	beq.n	80047ac <HAL_DMA_Init+0x450>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	689b      	ldr	r3, [r3, #8]
 800476e:	2b80      	cmp	r3, #128	; 0x80
 8004770:	d102      	bne.n	8004778 <HAL_DMA_Init+0x41c>
 8004772:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004776:	e01a      	b.n	80047ae <HAL_DMA_Init+0x452>
 8004778:	2300      	movs	r3, #0
 800477a:	e018      	b.n	80047ae <HAL_DMA_Init+0x452>
 800477c:	fe10803f 	.word	0xfe10803f
 8004780:	5c001000 	.word	0x5c001000
 8004784:	ffff0000 	.word	0xffff0000
 8004788:	58025408 	.word	0x58025408
 800478c:	5802541c 	.word	0x5802541c
 8004790:	58025430 	.word	0x58025430
 8004794:	58025444 	.word	0x58025444
 8004798:	58025458 	.word	0x58025458
 800479c:	5802546c 	.word	0x5802546c
 80047a0:	58025480 	.word	0x58025480
 80047a4:	58025494 	.word	0x58025494
 80047a8:	fffe000f 	.word	0xfffe000f
 80047ac:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	68d2      	ldr	r2, [r2, #12]
 80047b2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047b4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80047bc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80047c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	699b      	ldr	r3, [r3, #24]
 80047ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80047cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80047d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80047dc:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	697a      	ldr	r2, [r7, #20]
 80047ea:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	461a      	mov	r2, r3
 80047f2:	4b6e      	ldr	r3, [pc, #440]	; (80049ac <HAL_DMA_Init+0x650>)
 80047f4:	4413      	add	r3, r2
 80047f6:	4a6e      	ldr	r2, [pc, #440]	; (80049b0 <HAL_DMA_Init+0x654>)
 80047f8:	fba2 2303 	umull	r2, r3, r2, r3
 80047fc:	091b      	lsrs	r3, r3, #4
 80047fe:	009a      	lsls	r2, r3, #2
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004804:	6878      	ldr	r0, [r7, #4]
 8004806:	f001 fd93 	bl	8006330 <DMA_CalcBaseAndBitshift>
 800480a:	4603      	mov	r3, r0
 800480c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2201      	movs	r2, #1
 8004818:	409a      	lsls	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	605a      	str	r2, [r3, #4]
 800481e:	e008      	b.n	8004832 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2240      	movs	r2, #64	; 0x40
 8004824:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2203      	movs	r2, #3
 800482a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e0b7      	b.n	80049a2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a5f      	ldr	r2, [pc, #380]	; (80049b4 <HAL_DMA_Init+0x658>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d072      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	4a5d      	ldr	r2, [pc, #372]	; (80049b8 <HAL_DMA_Init+0x65c>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d06d      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a5c      	ldr	r2, [pc, #368]	; (80049bc <HAL_DMA_Init+0x660>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d068      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a5a      	ldr	r2, [pc, #360]	; (80049c0 <HAL_DMA_Init+0x664>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d063      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a59      	ldr	r2, [pc, #356]	; (80049c4 <HAL_DMA_Init+0x668>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d05e      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	4a57      	ldr	r2, [pc, #348]	; (80049c8 <HAL_DMA_Init+0x66c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d059      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a56      	ldr	r2, [pc, #344]	; (80049cc <HAL_DMA_Init+0x670>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d054      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a54      	ldr	r2, [pc, #336]	; (80049d0 <HAL_DMA_Init+0x674>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d04f      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a53      	ldr	r2, [pc, #332]	; (80049d4 <HAL_DMA_Init+0x678>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d04a      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <HAL_DMA_Init+0x67c>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d045      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a50      	ldr	r2, [pc, #320]	; (80049dc <HAL_DMA_Init+0x680>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d040      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a4e      	ldr	r2, [pc, #312]	; (80049e0 <HAL_DMA_Init+0x684>)
 80048a6:	4293      	cmp	r3, r2
 80048a8:	d03b      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4a4d      	ldr	r2, [pc, #308]	; (80049e4 <HAL_DMA_Init+0x688>)
 80048b0:	4293      	cmp	r3, r2
 80048b2:	d036      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	4a4b      	ldr	r2, [pc, #300]	; (80049e8 <HAL_DMA_Init+0x68c>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d031      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <HAL_DMA_Init+0x690>)
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d02c      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a48      	ldr	r2, [pc, #288]	; (80049f0 <HAL_DMA_Init+0x694>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d027      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4a47      	ldr	r2, [pc, #284]	; (80049f4 <HAL_DMA_Init+0x698>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d022      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	4a45      	ldr	r2, [pc, #276]	; (80049f8 <HAL_DMA_Init+0x69c>)
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d01d      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a44      	ldr	r2, [pc, #272]	; (80049fc <HAL_DMA_Init+0x6a0>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d018      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a42      	ldr	r2, [pc, #264]	; (8004a00 <HAL_DMA_Init+0x6a4>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d013      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a41      	ldr	r2, [pc, #260]	; (8004a04 <HAL_DMA_Init+0x6a8>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d00e      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a3f      	ldr	r2, [pc, #252]	; (8004a08 <HAL_DMA_Init+0x6ac>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d009      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a3e      	ldr	r2, [pc, #248]	; (8004a0c <HAL_DMA_Init+0x6b0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d004      	beq.n	8004922 <HAL_DMA_Init+0x5c6>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a3c      	ldr	r2, [pc, #240]	; (8004a10 <HAL_DMA_Init+0x6b4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d101      	bne.n	8004926 <HAL_DMA_Init+0x5ca>
 8004922:	2301      	movs	r3, #1
 8004924:	e000      	b.n	8004928 <HAL_DMA_Init+0x5cc>
 8004926:	2300      	movs	r3, #0
 8004928:	2b00      	cmp	r3, #0
 800492a:	d032      	beq.n	8004992 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800492c:	6878      	ldr	r0, [r7, #4]
 800492e:	f001 fe2d 	bl	800658c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	689b      	ldr	r3, [r3, #8]
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d102      	bne.n	8004940 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685a      	ldr	r2, [r3, #4]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004948:	b2d2      	uxtb	r2, r2
 800494a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004950:	687a      	ldr	r2, [r7, #4]
 8004952:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004954:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	685b      	ldr	r3, [r3, #4]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d010      	beq.n	8004980 <HAL_DMA_Init+0x624>
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	2b08      	cmp	r3, #8
 8004964:	d80c      	bhi.n	8004980 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f001 feaa 	bl	80066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004970:	2200      	movs	r2, #0
 8004972:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004978:	687a      	ldr	r2, [r7, #4]
 800497a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800497c:	605a      	str	r2, [r3, #4]
 800497e:	e008      	b.n	8004992 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2201      	movs	r2, #1
 800499c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80049a0:	2300      	movs	r3, #0
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}
 80049aa:	bf00      	nop
 80049ac:	a7fdabf8 	.word	0xa7fdabf8
 80049b0:	cccccccd 	.word	0xcccccccd
 80049b4:	40020010 	.word	0x40020010
 80049b8:	40020028 	.word	0x40020028
 80049bc:	40020040 	.word	0x40020040
 80049c0:	40020058 	.word	0x40020058
 80049c4:	40020070 	.word	0x40020070
 80049c8:	40020088 	.word	0x40020088
 80049cc:	400200a0 	.word	0x400200a0
 80049d0:	400200b8 	.word	0x400200b8
 80049d4:	40020410 	.word	0x40020410
 80049d8:	40020428 	.word	0x40020428
 80049dc:	40020440 	.word	0x40020440
 80049e0:	40020458 	.word	0x40020458
 80049e4:	40020470 	.word	0x40020470
 80049e8:	40020488 	.word	0x40020488
 80049ec:	400204a0 	.word	0x400204a0
 80049f0:	400204b8 	.word	0x400204b8
 80049f4:	58025408 	.word	0x58025408
 80049f8:	5802541c 	.word	0x5802541c
 80049fc:	58025430 	.word	0x58025430
 8004a00:	58025444 	.word	0x58025444
 8004a04:	58025458 	.word	0x58025458
 8004a08:	5802546c 	.word	0x5802546c
 8004a0c:	58025480 	.word	0x58025480
 8004a10:	58025494 	.word	0x58025494

08004a14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8004a1c:	f7ff fb3e 	bl	800409c <HAL_GetTick>
 8004a20:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e2dc      	b.n	8004fe6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a32:	b2db      	uxtb	r3, r3
 8004a34:	2b02      	cmp	r3, #2
 8004a36:	d008      	beq.n	8004a4a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2280      	movs	r2, #128	; 0x80
 8004a3c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	e2cd      	b.n	8004fe6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	4a76      	ldr	r2, [pc, #472]	; (8004c28 <HAL_DMA_Abort+0x214>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d04a      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a74      	ldr	r2, [pc, #464]	; (8004c2c <HAL_DMA_Abort+0x218>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d045      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a73      	ldr	r2, [pc, #460]	; (8004c30 <HAL_DMA_Abort+0x21c>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d040      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a71      	ldr	r2, [pc, #452]	; (8004c34 <HAL_DMA_Abort+0x220>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d03b      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a70      	ldr	r2, [pc, #448]	; (8004c38 <HAL_DMA_Abort+0x224>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d036      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a6e      	ldr	r2, [pc, #440]	; (8004c3c <HAL_DMA_Abort+0x228>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d031      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a6d      	ldr	r2, [pc, #436]	; (8004c40 <HAL_DMA_Abort+0x22c>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d02c      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a6b      	ldr	r2, [pc, #428]	; (8004c44 <HAL_DMA_Abort+0x230>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d027      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4a6a      	ldr	r2, [pc, #424]	; (8004c48 <HAL_DMA_Abort+0x234>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	d022      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a68      	ldr	r2, [pc, #416]	; (8004c4c <HAL_DMA_Abort+0x238>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01d      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a67      	ldr	r2, [pc, #412]	; (8004c50 <HAL_DMA_Abort+0x23c>)
 8004ab4:	4293      	cmp	r3, r2
 8004ab6:	d018      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_DMA_Abort+0x240>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d013      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a64      	ldr	r2, [pc, #400]	; (8004c58 <HAL_DMA_Abort+0x244>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d00e      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a62      	ldr	r2, [pc, #392]	; (8004c5c <HAL_DMA_Abort+0x248>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d009      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a61      	ldr	r2, [pc, #388]	; (8004c60 <HAL_DMA_Abort+0x24c>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d004      	beq.n	8004aea <HAL_DMA_Abort+0xd6>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a5f      	ldr	r2, [pc, #380]	; (8004c64 <HAL_DMA_Abort+0x250>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d101      	bne.n	8004aee <HAL_DMA_Abort+0xda>
 8004aea:	2301      	movs	r3, #1
 8004aec:	e000      	b.n	8004af0 <HAL_DMA_Abort+0xdc>
 8004aee:	2300      	movs	r3, #0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d013      	beq.n	8004b1c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 021e 	bic.w	r2, r2, #30
 8004b02:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	695a      	ldr	r2, [r3, #20]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b12:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	617b      	str	r3, [r7, #20]
 8004b1a:	e00a      	b.n	8004b32 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 020e 	bic.w	r2, r2, #14
 8004b2a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	4a3c      	ldr	r2, [pc, #240]	; (8004c28 <HAL_DMA_Abort+0x214>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d072      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	4a3a      	ldr	r2, [pc, #232]	; (8004c2c <HAL_DMA_Abort+0x218>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d06d      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a39      	ldr	r2, [pc, #228]	; (8004c30 <HAL_DMA_Abort+0x21c>)
 8004b4c:	4293      	cmp	r3, r2
 8004b4e:	d068      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a37      	ldr	r2, [pc, #220]	; (8004c34 <HAL_DMA_Abort+0x220>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d063      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	4a36      	ldr	r2, [pc, #216]	; (8004c38 <HAL_DMA_Abort+0x224>)
 8004b60:	4293      	cmp	r3, r2
 8004b62:	d05e      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	4a34      	ldr	r2, [pc, #208]	; (8004c3c <HAL_DMA_Abort+0x228>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d059      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4a33      	ldr	r2, [pc, #204]	; (8004c40 <HAL_DMA_Abort+0x22c>)
 8004b74:	4293      	cmp	r3, r2
 8004b76:	d054      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a31      	ldr	r2, [pc, #196]	; (8004c44 <HAL_DMA_Abort+0x230>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d04f      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	4a30      	ldr	r2, [pc, #192]	; (8004c48 <HAL_DMA_Abort+0x234>)
 8004b88:	4293      	cmp	r3, r2
 8004b8a:	d04a      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a2e      	ldr	r2, [pc, #184]	; (8004c4c <HAL_DMA_Abort+0x238>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d045      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a2d      	ldr	r2, [pc, #180]	; (8004c50 <HAL_DMA_Abort+0x23c>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d040      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4a2b      	ldr	r2, [pc, #172]	; (8004c54 <HAL_DMA_Abort+0x240>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d03b      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	4a2a      	ldr	r2, [pc, #168]	; (8004c58 <HAL_DMA_Abort+0x244>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d036      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a28      	ldr	r2, [pc, #160]	; (8004c5c <HAL_DMA_Abort+0x248>)
 8004bba:	4293      	cmp	r3, r2
 8004bbc:	d031      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a27      	ldr	r2, [pc, #156]	; (8004c60 <HAL_DMA_Abort+0x24c>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d02c      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a25      	ldr	r2, [pc, #148]	; (8004c64 <HAL_DMA_Abort+0x250>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d027      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4a24      	ldr	r2, [pc, #144]	; (8004c68 <HAL_DMA_Abort+0x254>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d022      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	4a22      	ldr	r2, [pc, #136]	; (8004c6c <HAL_DMA_Abort+0x258>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d01d      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	4a21      	ldr	r2, [pc, #132]	; (8004c70 <HAL_DMA_Abort+0x25c>)
 8004bec:	4293      	cmp	r3, r2
 8004bee:	d018      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a1f      	ldr	r2, [pc, #124]	; (8004c74 <HAL_DMA_Abort+0x260>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d013      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a1e      	ldr	r2, [pc, #120]	; (8004c78 <HAL_DMA_Abort+0x264>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d00e      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_DMA_Abort+0x268>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d009      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a1b      	ldr	r2, [pc, #108]	; (8004c80 <HAL_DMA_Abort+0x26c>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d004      	beq.n	8004c22 <HAL_DMA_Abort+0x20e>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a19      	ldr	r2, [pc, #100]	; (8004c84 <HAL_DMA_Abort+0x270>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d132      	bne.n	8004c88 <HAL_DMA_Abort+0x274>
 8004c22:	2301      	movs	r3, #1
 8004c24:	e031      	b.n	8004c8a <HAL_DMA_Abort+0x276>
 8004c26:	bf00      	nop
 8004c28:	40020010 	.word	0x40020010
 8004c2c:	40020028 	.word	0x40020028
 8004c30:	40020040 	.word	0x40020040
 8004c34:	40020058 	.word	0x40020058
 8004c38:	40020070 	.word	0x40020070
 8004c3c:	40020088 	.word	0x40020088
 8004c40:	400200a0 	.word	0x400200a0
 8004c44:	400200b8 	.word	0x400200b8
 8004c48:	40020410 	.word	0x40020410
 8004c4c:	40020428 	.word	0x40020428
 8004c50:	40020440 	.word	0x40020440
 8004c54:	40020458 	.word	0x40020458
 8004c58:	40020470 	.word	0x40020470
 8004c5c:	40020488 	.word	0x40020488
 8004c60:	400204a0 	.word	0x400204a0
 8004c64:	400204b8 	.word	0x400204b8
 8004c68:	58025408 	.word	0x58025408
 8004c6c:	5802541c 	.word	0x5802541c
 8004c70:	58025430 	.word	0x58025430
 8004c74:	58025444 	.word	0x58025444
 8004c78:	58025458 	.word	0x58025458
 8004c7c:	5802546c 	.word	0x5802546c
 8004c80:	58025480 	.word	0x58025480
 8004c84:	58025494 	.word	0x58025494
 8004c88:	2300      	movs	r3, #0
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d007      	beq.n	8004c9e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004c9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	4a6d      	ldr	r2, [pc, #436]	; (8004e58 <HAL_DMA_Abort+0x444>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d04a      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a6b      	ldr	r2, [pc, #428]	; (8004e5c <HAL_DMA_Abort+0x448>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d045      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a6a      	ldr	r2, [pc, #424]	; (8004e60 <HAL_DMA_Abort+0x44c>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d040      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a68      	ldr	r2, [pc, #416]	; (8004e64 <HAL_DMA_Abort+0x450>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d03b      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a67      	ldr	r2, [pc, #412]	; (8004e68 <HAL_DMA_Abort+0x454>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d036      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	4a65      	ldr	r2, [pc, #404]	; (8004e6c <HAL_DMA_Abort+0x458>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d031      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a64      	ldr	r2, [pc, #400]	; (8004e70 <HAL_DMA_Abort+0x45c>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d02c      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a62      	ldr	r2, [pc, #392]	; (8004e74 <HAL_DMA_Abort+0x460>)
 8004cea:	4293      	cmp	r3, r2
 8004cec:	d027      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4a61      	ldr	r2, [pc, #388]	; (8004e78 <HAL_DMA_Abort+0x464>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d022      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	4a5f      	ldr	r2, [pc, #380]	; (8004e7c <HAL_DMA_Abort+0x468>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01d      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5e      	ldr	r2, [pc, #376]	; (8004e80 <HAL_DMA_Abort+0x46c>)
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d018      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a5c      	ldr	r2, [pc, #368]	; (8004e84 <HAL_DMA_Abort+0x470>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d013      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a5b      	ldr	r2, [pc, #364]	; (8004e88 <HAL_DMA_Abort+0x474>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d00e      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a59      	ldr	r2, [pc, #356]	; (8004e8c <HAL_DMA_Abort+0x478>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d009      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_DMA_Abort+0x47c>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d004      	beq.n	8004d3e <HAL_DMA_Abort+0x32a>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a56      	ldr	r2, [pc, #344]	; (8004e94 <HAL_DMA_Abort+0x480>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d108      	bne.n	8004d50 <HAL_DMA_Abort+0x33c>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f022 0201 	bic.w	r2, r2, #1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	e007      	b.n	8004d60 <HAL_DMA_Abort+0x34c>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f022 0201 	bic.w	r2, r2, #1
 8004d5e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d60:	e013      	b.n	8004d8a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004d62:	f7ff f99b 	bl	800409c <HAL_GetTick>
 8004d66:	4602      	mov	r2, r0
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	1ad3      	subs	r3, r2, r3
 8004d6c:	2b05      	cmp	r3, #5
 8004d6e:	d90c      	bls.n	8004d8a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	2220      	movs	r2, #32
 8004d74:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2203      	movs	r2, #3
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e12d      	b.n	8004fe6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0301 	and.w	r3, r3, #1
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1e5      	bne.n	8004d62 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	4a2f      	ldr	r2, [pc, #188]	; (8004e58 <HAL_DMA_Abort+0x444>)
 8004d9c:	4293      	cmp	r3, r2
 8004d9e:	d04a      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	4a2d      	ldr	r2, [pc, #180]	; (8004e5c <HAL_DMA_Abort+0x448>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d045      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a2c      	ldr	r2, [pc, #176]	; (8004e60 <HAL_DMA_Abort+0x44c>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d040      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a2a      	ldr	r2, [pc, #168]	; (8004e64 <HAL_DMA_Abort+0x450>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d03b      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a29      	ldr	r2, [pc, #164]	; (8004e68 <HAL_DMA_Abort+0x454>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d036      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a27      	ldr	r2, [pc, #156]	; (8004e6c <HAL_DMA_Abort+0x458>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d031      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a26      	ldr	r2, [pc, #152]	; (8004e70 <HAL_DMA_Abort+0x45c>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d02c      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a24      	ldr	r2, [pc, #144]	; (8004e74 <HAL_DMA_Abort+0x460>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d027      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <HAL_DMA_Abort+0x464>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d022      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a21      	ldr	r2, [pc, #132]	; (8004e7c <HAL_DMA_Abort+0x468>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d01d      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a20      	ldr	r2, [pc, #128]	; (8004e80 <HAL_DMA_Abort+0x46c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d018      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1e      	ldr	r2, [pc, #120]	; (8004e84 <HAL_DMA_Abort+0x470>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d013      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a1d      	ldr	r2, [pc, #116]	; (8004e88 <HAL_DMA_Abort+0x474>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d00e      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a1b      	ldr	r2, [pc, #108]	; (8004e8c <HAL_DMA_Abort+0x478>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d009      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a1a      	ldr	r2, [pc, #104]	; (8004e90 <HAL_DMA_Abort+0x47c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d004      	beq.n	8004e36 <HAL_DMA_Abort+0x422>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a18      	ldr	r2, [pc, #96]	; (8004e94 <HAL_DMA_Abort+0x480>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d101      	bne.n	8004e3a <HAL_DMA_Abort+0x426>
 8004e36:	2301      	movs	r3, #1
 8004e38:	e000      	b.n	8004e3c <HAL_DMA_Abort+0x428>
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d02b      	beq.n	8004e98 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e44:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e4a:	f003 031f 	and.w	r3, r3, #31
 8004e4e:	223f      	movs	r2, #63	; 0x3f
 8004e50:	409a      	lsls	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	609a      	str	r2, [r3, #8]
 8004e56:	e02a      	b.n	8004eae <HAL_DMA_Abort+0x49a>
 8004e58:	40020010 	.word	0x40020010
 8004e5c:	40020028 	.word	0x40020028
 8004e60:	40020040 	.word	0x40020040
 8004e64:	40020058 	.word	0x40020058
 8004e68:	40020070 	.word	0x40020070
 8004e6c:	40020088 	.word	0x40020088
 8004e70:	400200a0 	.word	0x400200a0
 8004e74:	400200b8 	.word	0x400200b8
 8004e78:	40020410 	.word	0x40020410
 8004e7c:	40020428 	.word	0x40020428
 8004e80:	40020440 	.word	0x40020440
 8004e84:	40020458 	.word	0x40020458
 8004e88:	40020470 	.word	0x40020470
 8004e8c:	40020488 	.word	0x40020488
 8004e90:	400204a0 	.word	0x400204a0
 8004e94:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ea2:	f003 031f 	and.w	r3, r3, #31
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	409a      	lsls	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a4f      	ldr	r2, [pc, #316]	; (8004ff0 <HAL_DMA_Abort+0x5dc>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d072      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a4d      	ldr	r2, [pc, #308]	; (8004ff4 <HAL_DMA_Abort+0x5e0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d06d      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a4c      	ldr	r2, [pc, #304]	; (8004ff8 <HAL_DMA_Abort+0x5e4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d068      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a4a      	ldr	r2, [pc, #296]	; (8004ffc <HAL_DMA_Abort+0x5e8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d063      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a49      	ldr	r2, [pc, #292]	; (8005000 <HAL_DMA_Abort+0x5ec>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d05e      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a47      	ldr	r2, [pc, #284]	; (8005004 <HAL_DMA_Abort+0x5f0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d059      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	4a46      	ldr	r2, [pc, #280]	; (8005008 <HAL_DMA_Abort+0x5f4>)
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d054      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4a44      	ldr	r2, [pc, #272]	; (800500c <HAL_DMA_Abort+0x5f8>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d04f      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	4a43      	ldr	r2, [pc, #268]	; (8005010 <HAL_DMA_Abort+0x5fc>)
 8004f04:	4293      	cmp	r3, r2
 8004f06:	d04a      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a41      	ldr	r2, [pc, #260]	; (8005014 <HAL_DMA_Abort+0x600>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d045      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	4a40      	ldr	r2, [pc, #256]	; (8005018 <HAL_DMA_Abort+0x604>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d040      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a3e      	ldr	r2, [pc, #248]	; (800501c <HAL_DMA_Abort+0x608>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d03b      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a3d      	ldr	r2, [pc, #244]	; (8005020 <HAL_DMA_Abort+0x60c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d036      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a3b      	ldr	r2, [pc, #236]	; (8005024 <HAL_DMA_Abort+0x610>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d031      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	4a3a      	ldr	r2, [pc, #232]	; (8005028 <HAL_DMA_Abort+0x614>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d02c      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a38      	ldr	r2, [pc, #224]	; (800502c <HAL_DMA_Abort+0x618>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d027      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	4a37      	ldr	r2, [pc, #220]	; (8005030 <HAL_DMA_Abort+0x61c>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d022      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a35      	ldr	r2, [pc, #212]	; (8005034 <HAL_DMA_Abort+0x620>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d01d      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4a34      	ldr	r2, [pc, #208]	; (8005038 <HAL_DMA_Abort+0x624>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d018      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a32      	ldr	r2, [pc, #200]	; (800503c <HAL_DMA_Abort+0x628>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4a31      	ldr	r2, [pc, #196]	; (8005040 <HAL_DMA_Abort+0x62c>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d00e      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	4a2f      	ldr	r2, [pc, #188]	; (8005044 <HAL_DMA_Abort+0x630>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d009      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	; (8005048 <HAL_DMA_Abort+0x634>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d004      	beq.n	8004f9e <HAL_DMA_Abort+0x58a>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	4a2c      	ldr	r2, [pc, #176]	; (800504c <HAL_DMA_Abort+0x638>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d101      	bne.n	8004fa2 <HAL_DMA_Abort+0x58e>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_DMA_Abort+0x590>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d015      	beq.n	8004fd4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004fac:	687a      	ldr	r2, [r7, #4]
 8004fae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004fb0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d00c      	beq.n	8004fd4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004fd2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3718      	adds	r7, #24
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	40020010 	.word	0x40020010
 8004ff4:	40020028 	.word	0x40020028
 8004ff8:	40020040 	.word	0x40020040
 8004ffc:	40020058 	.word	0x40020058
 8005000:	40020070 	.word	0x40020070
 8005004:	40020088 	.word	0x40020088
 8005008:	400200a0 	.word	0x400200a0
 800500c:	400200b8 	.word	0x400200b8
 8005010:	40020410 	.word	0x40020410
 8005014:	40020428 	.word	0x40020428
 8005018:	40020440 	.word	0x40020440
 800501c:	40020458 	.word	0x40020458
 8005020:	40020470 	.word	0x40020470
 8005024:	40020488 	.word	0x40020488
 8005028:	400204a0 	.word	0x400204a0
 800502c:	400204b8 	.word	0x400204b8
 8005030:	58025408 	.word	0x58025408
 8005034:	5802541c 	.word	0x5802541c
 8005038:	58025430 	.word	0x58025430
 800503c:	58025444 	.word	0x58025444
 8005040:	58025458 	.word	0x58025458
 8005044:	5802546c 	.word	0x5802546c
 8005048:	58025480 	.word	0x58025480
 800504c:	58025494 	.word	0x58025494

08005050 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e237      	b.n	80054d2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005068:	b2db      	uxtb	r3, r3
 800506a:	2b02      	cmp	r3, #2
 800506c:	d004      	beq.n	8005078 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2280      	movs	r2, #128	; 0x80
 8005072:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005074:	2301      	movs	r3, #1
 8005076:	e22c      	b.n	80054d2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	4a5c      	ldr	r2, [pc, #368]	; (80051f0 <HAL_DMA_Abort_IT+0x1a0>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d04a      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	4a5b      	ldr	r2, [pc, #364]	; (80051f4 <HAL_DMA_Abort_IT+0x1a4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d045      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a59      	ldr	r2, [pc, #356]	; (80051f8 <HAL_DMA_Abort_IT+0x1a8>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d040      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	4a58      	ldr	r2, [pc, #352]	; (80051fc <HAL_DMA_Abort_IT+0x1ac>)
 800509c:	4293      	cmp	r3, r2
 800509e:	d03b      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	4a56      	ldr	r2, [pc, #344]	; (8005200 <HAL_DMA_Abort_IT+0x1b0>)
 80050a6:	4293      	cmp	r3, r2
 80050a8:	d036      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a55      	ldr	r2, [pc, #340]	; (8005204 <HAL_DMA_Abort_IT+0x1b4>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d031      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a53      	ldr	r2, [pc, #332]	; (8005208 <HAL_DMA_Abort_IT+0x1b8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d02c      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	4a52      	ldr	r2, [pc, #328]	; (800520c <HAL_DMA_Abort_IT+0x1bc>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d027      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a50      	ldr	r2, [pc, #320]	; (8005210 <HAL_DMA_Abort_IT+0x1c0>)
 80050ce:	4293      	cmp	r3, r2
 80050d0:	d022      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a4f      	ldr	r2, [pc, #316]	; (8005214 <HAL_DMA_Abort_IT+0x1c4>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d01d      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4d      	ldr	r2, [pc, #308]	; (8005218 <HAL_DMA_Abort_IT+0x1c8>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d018      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	4a4c      	ldr	r2, [pc, #304]	; (800521c <HAL_DMA_Abort_IT+0x1cc>)
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d013      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	4a4a      	ldr	r2, [pc, #296]	; (8005220 <HAL_DMA_Abort_IT+0x1d0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00e      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a49      	ldr	r2, [pc, #292]	; (8005224 <HAL_DMA_Abort_IT+0x1d4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d009      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a47      	ldr	r2, [pc, #284]	; (8005228 <HAL_DMA_Abort_IT+0x1d8>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d004      	beq.n	8005118 <HAL_DMA_Abort_IT+0xc8>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a46      	ldr	r2, [pc, #280]	; (800522c <HAL_DMA_Abort_IT+0x1dc>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d101      	bne.n	800511c <HAL_DMA_Abort_IT+0xcc>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <HAL_DMA_Abort_IT+0xce>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	f000 8086 	beq.w	8005230 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2204      	movs	r2, #4
 8005128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a2f      	ldr	r2, [pc, #188]	; (80051f0 <HAL_DMA_Abort_IT+0x1a0>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d04a      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a2e      	ldr	r2, [pc, #184]	; (80051f4 <HAL_DMA_Abort_IT+0x1a4>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d045      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2c      	ldr	r2, [pc, #176]	; (80051f8 <HAL_DMA_Abort_IT+0x1a8>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d040      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2b      	ldr	r2, [pc, #172]	; (80051fc <HAL_DMA_Abort_IT+0x1ac>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d03b      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a29      	ldr	r2, [pc, #164]	; (8005200 <HAL_DMA_Abort_IT+0x1b0>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d036      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a28      	ldr	r2, [pc, #160]	; (8005204 <HAL_DMA_Abort_IT+0x1b4>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d031      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a26      	ldr	r2, [pc, #152]	; (8005208 <HAL_DMA_Abort_IT+0x1b8>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d02c      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a25      	ldr	r2, [pc, #148]	; (800520c <HAL_DMA_Abort_IT+0x1bc>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d027      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a23      	ldr	r2, [pc, #140]	; (8005210 <HAL_DMA_Abort_IT+0x1c0>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d022      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a22      	ldr	r2, [pc, #136]	; (8005214 <HAL_DMA_Abort_IT+0x1c4>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d01d      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a20      	ldr	r2, [pc, #128]	; (8005218 <HAL_DMA_Abort_IT+0x1c8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d018      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a1f      	ldr	r2, [pc, #124]	; (800521c <HAL_DMA_Abort_IT+0x1cc>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d013      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a1d      	ldr	r2, [pc, #116]	; (8005220 <HAL_DMA_Abort_IT+0x1d0>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d00e      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	4a1c      	ldr	r2, [pc, #112]	; (8005224 <HAL_DMA_Abort_IT+0x1d4>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d009      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a1a      	ldr	r2, [pc, #104]	; (8005228 <HAL_DMA_Abort_IT+0x1d8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d004      	beq.n	80051cc <HAL_DMA_Abort_IT+0x17c>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a19      	ldr	r2, [pc, #100]	; (800522c <HAL_DMA_Abort_IT+0x1dc>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d108      	bne.n	80051de <HAL_DMA_Abort_IT+0x18e>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f022 0201 	bic.w	r2, r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	e178      	b.n	80054d0 <HAL_DMA_Abort_IT+0x480>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f022 0201 	bic.w	r2, r2, #1
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	e16f      	b.n	80054d0 <HAL_DMA_Abort_IT+0x480>
 80051f0:	40020010 	.word	0x40020010
 80051f4:	40020028 	.word	0x40020028
 80051f8:	40020040 	.word	0x40020040
 80051fc:	40020058 	.word	0x40020058
 8005200:	40020070 	.word	0x40020070
 8005204:	40020088 	.word	0x40020088
 8005208:	400200a0 	.word	0x400200a0
 800520c:	400200b8 	.word	0x400200b8
 8005210:	40020410 	.word	0x40020410
 8005214:	40020428 	.word	0x40020428
 8005218:	40020440 	.word	0x40020440
 800521c:	40020458 	.word	0x40020458
 8005220:	40020470 	.word	0x40020470
 8005224:	40020488 	.word	0x40020488
 8005228:	400204a0 	.word	0x400204a0
 800522c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681a      	ldr	r2, [r3, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 020e 	bic.w	r2, r2, #14
 800523e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	4a6c      	ldr	r2, [pc, #432]	; (80053f8 <HAL_DMA_Abort_IT+0x3a8>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d04a      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	4a6b      	ldr	r2, [pc, #428]	; (80053fc <HAL_DMA_Abort_IT+0x3ac>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d045      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	4a69      	ldr	r2, [pc, #420]	; (8005400 <HAL_DMA_Abort_IT+0x3b0>)
 800525a:	4293      	cmp	r3, r2
 800525c:	d040      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	4a68      	ldr	r2, [pc, #416]	; (8005404 <HAL_DMA_Abort_IT+0x3b4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d03b      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a66      	ldr	r2, [pc, #408]	; (8005408 <HAL_DMA_Abort_IT+0x3b8>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d036      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	4a65      	ldr	r2, [pc, #404]	; (800540c <HAL_DMA_Abort_IT+0x3bc>)
 8005278:	4293      	cmp	r3, r2
 800527a:	d031      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4a63      	ldr	r2, [pc, #396]	; (8005410 <HAL_DMA_Abort_IT+0x3c0>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02c      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a62      	ldr	r2, [pc, #392]	; (8005414 <HAL_DMA_Abort_IT+0x3c4>)
 800528c:	4293      	cmp	r3, r2
 800528e:	d027      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a60      	ldr	r2, [pc, #384]	; (8005418 <HAL_DMA_Abort_IT+0x3c8>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d022      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a5f      	ldr	r2, [pc, #380]	; (800541c <HAL_DMA_Abort_IT+0x3cc>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d01d      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a5d      	ldr	r2, [pc, #372]	; (8005420 <HAL_DMA_Abort_IT+0x3d0>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d018      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	4a5c      	ldr	r2, [pc, #368]	; (8005424 <HAL_DMA_Abort_IT+0x3d4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d013      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a5a      	ldr	r2, [pc, #360]	; (8005428 <HAL_DMA_Abort_IT+0x3d8>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d00e      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a59      	ldr	r2, [pc, #356]	; (800542c <HAL_DMA_Abort_IT+0x3dc>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d009      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4a57      	ldr	r2, [pc, #348]	; (8005430 <HAL_DMA_Abort_IT+0x3e0>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d004      	beq.n	80052e0 <HAL_DMA_Abort_IT+0x290>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a56      	ldr	r2, [pc, #344]	; (8005434 <HAL_DMA_Abort_IT+0x3e4>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d108      	bne.n	80052f2 <HAL_DMA_Abort_IT+0x2a2>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f022 0201 	bic.w	r2, r2, #1
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	e007      	b.n	8005302 <HAL_DMA_Abort_IT+0x2b2>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f022 0201 	bic.w	r2, r2, #1
 8005300:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	4a3c      	ldr	r2, [pc, #240]	; (80053f8 <HAL_DMA_Abort_IT+0x3a8>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d072      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	4a3a      	ldr	r2, [pc, #232]	; (80053fc <HAL_DMA_Abort_IT+0x3ac>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d06d      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4a39      	ldr	r2, [pc, #228]	; (8005400 <HAL_DMA_Abort_IT+0x3b0>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d068      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	4a37      	ldr	r2, [pc, #220]	; (8005404 <HAL_DMA_Abort_IT+0x3b4>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d063      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a36      	ldr	r2, [pc, #216]	; (8005408 <HAL_DMA_Abort_IT+0x3b8>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d05e      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	4a34      	ldr	r2, [pc, #208]	; (800540c <HAL_DMA_Abort_IT+0x3bc>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d059      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4a33      	ldr	r2, [pc, #204]	; (8005410 <HAL_DMA_Abort_IT+0x3c0>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d054      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	4a31      	ldr	r2, [pc, #196]	; (8005414 <HAL_DMA_Abort_IT+0x3c4>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d04f      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a30      	ldr	r2, [pc, #192]	; (8005418 <HAL_DMA_Abort_IT+0x3c8>)
 8005358:	4293      	cmp	r3, r2
 800535a:	d04a      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a2e      	ldr	r2, [pc, #184]	; (800541c <HAL_DMA_Abort_IT+0x3cc>)
 8005362:	4293      	cmp	r3, r2
 8005364:	d045      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	4a2d      	ldr	r2, [pc, #180]	; (8005420 <HAL_DMA_Abort_IT+0x3d0>)
 800536c:	4293      	cmp	r3, r2
 800536e:	d040      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a2b      	ldr	r2, [pc, #172]	; (8005424 <HAL_DMA_Abort_IT+0x3d4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d03b      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	4a2a      	ldr	r2, [pc, #168]	; (8005428 <HAL_DMA_Abort_IT+0x3d8>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d036      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	4a28      	ldr	r2, [pc, #160]	; (800542c <HAL_DMA_Abort_IT+0x3dc>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d031      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4a27      	ldr	r2, [pc, #156]	; (8005430 <HAL_DMA_Abort_IT+0x3e0>)
 8005394:	4293      	cmp	r3, r2
 8005396:	d02c      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	4a25      	ldr	r2, [pc, #148]	; (8005434 <HAL_DMA_Abort_IT+0x3e4>)
 800539e:	4293      	cmp	r3, r2
 80053a0:	d027      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4a24      	ldr	r2, [pc, #144]	; (8005438 <HAL_DMA_Abort_IT+0x3e8>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d022      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a22      	ldr	r2, [pc, #136]	; (800543c <HAL_DMA_Abort_IT+0x3ec>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d01d      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	4a21      	ldr	r2, [pc, #132]	; (8005440 <HAL_DMA_Abort_IT+0x3f0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d018      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	4a1f      	ldr	r2, [pc, #124]	; (8005444 <HAL_DMA_Abort_IT+0x3f4>)
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d013      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	4a1e      	ldr	r2, [pc, #120]	; (8005448 <HAL_DMA_Abort_IT+0x3f8>)
 80053d0:	4293      	cmp	r3, r2
 80053d2:	d00e      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a1c      	ldr	r2, [pc, #112]	; (800544c <HAL_DMA_Abort_IT+0x3fc>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d009      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1b      	ldr	r2, [pc, #108]	; (8005450 <HAL_DMA_Abort_IT+0x400>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d004      	beq.n	80053f2 <HAL_DMA_Abort_IT+0x3a2>
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	4a19      	ldr	r2, [pc, #100]	; (8005454 <HAL_DMA_Abort_IT+0x404>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d132      	bne.n	8005458 <HAL_DMA_Abort_IT+0x408>
 80053f2:	2301      	movs	r3, #1
 80053f4:	e031      	b.n	800545a <HAL_DMA_Abort_IT+0x40a>
 80053f6:	bf00      	nop
 80053f8:	40020010 	.word	0x40020010
 80053fc:	40020028 	.word	0x40020028
 8005400:	40020040 	.word	0x40020040
 8005404:	40020058 	.word	0x40020058
 8005408:	40020070 	.word	0x40020070
 800540c:	40020088 	.word	0x40020088
 8005410:	400200a0 	.word	0x400200a0
 8005414:	400200b8 	.word	0x400200b8
 8005418:	40020410 	.word	0x40020410
 800541c:	40020428 	.word	0x40020428
 8005420:	40020440 	.word	0x40020440
 8005424:	40020458 	.word	0x40020458
 8005428:	40020470 	.word	0x40020470
 800542c:	40020488 	.word	0x40020488
 8005430:	400204a0 	.word	0x400204a0
 8005434:	400204b8 	.word	0x400204b8
 8005438:	58025408 	.word	0x58025408
 800543c:	5802541c 	.word	0x5802541c
 8005440:	58025430 	.word	0x58025430
 8005444:	58025444 	.word	0x58025444
 8005448:	58025458 	.word	0x58025458
 800544c:	5802546c 	.word	0x5802546c
 8005450:	58025480 	.word	0x58025480
 8005454:	58025494 	.word	0x58025494
 8005458:	2300      	movs	r3, #0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d028      	beq.n	80054b0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005462:	681a      	ldr	r2, [r3, #0]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005468:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800546c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005472:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005478:	f003 031f 	and.w	r3, r3, #31
 800547c:	2201      	movs	r2, #1
 800547e:	409a      	lsls	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005488:	687a      	ldr	r2, [r7, #4]
 800548a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800548c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00c      	beq.n	80054b0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800549a:	681a      	ldr	r2, [r3, #0]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80054a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80054a4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054aa:	687a      	ldr	r2, [r7, #4]
 80054ac:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80054ae:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054cc:	6878      	ldr	r0, [r7, #4]
 80054ce:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3710      	adds	r7, #16
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}
 80054da:	bf00      	nop

080054dc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b08a      	sub	sp, #40	; 0x28
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80054e8:	4b67      	ldr	r3, [pc, #412]	; (8005688 <HAL_DMA_IRQHandler+0x1ac>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a67      	ldr	r2, [pc, #412]	; (800568c <HAL_DMA_IRQHandler+0x1b0>)
 80054ee:	fba2 2303 	umull	r2, r3, r2, r3
 80054f2:	0a9b      	lsrs	r3, r3, #10
 80054f4:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054fa:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005500:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	4a5f      	ldr	r2, [pc, #380]	; (8005690 <HAL_DMA_IRQHandler+0x1b4>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d04a      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4a5d      	ldr	r2, [pc, #372]	; (8005694 <HAL_DMA_IRQHandler+0x1b8>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d045      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	4a5c      	ldr	r2, [pc, #368]	; (8005698 <HAL_DMA_IRQHandler+0x1bc>)
 8005528:	4293      	cmp	r3, r2
 800552a:	d040      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a5a      	ldr	r2, [pc, #360]	; (800569c <HAL_DMA_IRQHandler+0x1c0>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d03b      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4a59      	ldr	r2, [pc, #356]	; (80056a0 <HAL_DMA_IRQHandler+0x1c4>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d036      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a57      	ldr	r2, [pc, #348]	; (80056a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005546:	4293      	cmp	r3, r2
 8005548:	d031      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a56      	ldr	r2, [pc, #344]	; (80056a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005550:	4293      	cmp	r3, r2
 8005552:	d02c      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a54      	ldr	r2, [pc, #336]	; (80056ac <HAL_DMA_IRQHandler+0x1d0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d027      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	4a53      	ldr	r2, [pc, #332]	; (80056b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d022      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	4a51      	ldr	r2, [pc, #324]	; (80056b4 <HAL_DMA_IRQHandler+0x1d8>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01d      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a50      	ldr	r2, [pc, #320]	; (80056b8 <HAL_DMA_IRQHandler+0x1dc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d018      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a4e      	ldr	r2, [pc, #312]	; (80056bc <HAL_DMA_IRQHandler+0x1e0>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d013      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	4a4d      	ldr	r2, [pc, #308]	; (80056c0 <HAL_DMA_IRQHandler+0x1e4>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d00e      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	4a4b      	ldr	r2, [pc, #300]	; (80056c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d009      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4a4a      	ldr	r2, [pc, #296]	; (80056c8 <HAL_DMA_IRQHandler+0x1ec>)
 80055a0:	4293      	cmp	r3, r2
 80055a2:	d004      	beq.n	80055ae <HAL_DMA_IRQHandler+0xd2>
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a48      	ldr	r2, [pc, #288]	; (80056cc <HAL_DMA_IRQHandler+0x1f0>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d101      	bne.n	80055b2 <HAL_DMA_IRQHandler+0xd6>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e000      	b.n	80055b4 <HAL_DMA_IRQHandler+0xd8>
 80055b2:	2300      	movs	r3, #0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f000 842b 	beq.w	8005e10 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055be:	f003 031f 	and.w	r3, r3, #31
 80055c2:	2208      	movs	r2, #8
 80055c4:	409a      	lsls	r2, r3
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	4013      	ands	r3, r2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 80a2 	beq.w	8005714 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a2e      	ldr	r2, [pc, #184]	; (8005690 <HAL_DMA_IRQHandler+0x1b4>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d04a      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2d      	ldr	r2, [pc, #180]	; (8005694 <HAL_DMA_IRQHandler+0x1b8>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d045      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2b      	ldr	r2, [pc, #172]	; (8005698 <HAL_DMA_IRQHandler+0x1bc>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d040      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a2a      	ldr	r2, [pc, #168]	; (800569c <HAL_DMA_IRQHandler+0x1c0>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d03b      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a28      	ldr	r2, [pc, #160]	; (80056a0 <HAL_DMA_IRQHandler+0x1c4>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d036      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a27      	ldr	r2, [pc, #156]	; (80056a4 <HAL_DMA_IRQHandler+0x1c8>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d031      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a25      	ldr	r2, [pc, #148]	; (80056a8 <HAL_DMA_IRQHandler+0x1cc>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d02c      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a24      	ldr	r2, [pc, #144]	; (80056ac <HAL_DMA_IRQHandler+0x1d0>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d027      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a22      	ldr	r2, [pc, #136]	; (80056b0 <HAL_DMA_IRQHandler+0x1d4>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d022      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a21      	ldr	r2, [pc, #132]	; (80056b4 <HAL_DMA_IRQHandler+0x1d8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d01d      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1f      	ldr	r2, [pc, #124]	; (80056b8 <HAL_DMA_IRQHandler+0x1dc>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d018      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1e      	ldr	r2, [pc, #120]	; (80056bc <HAL_DMA_IRQHandler+0x1e0>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d013      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_DMA_IRQHandler+0x1e4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d00e      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1b      	ldr	r2, [pc, #108]	; (80056c4 <HAL_DMA_IRQHandler+0x1e8>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d009      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a19      	ldr	r2, [pc, #100]	; (80056c8 <HAL_DMA_IRQHandler+0x1ec>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d004      	beq.n	8005670 <HAL_DMA_IRQHandler+0x194>
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a18      	ldr	r2, [pc, #96]	; (80056cc <HAL_DMA_IRQHandler+0x1f0>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d12f      	bne.n	80056d0 <HAL_DMA_IRQHandler+0x1f4>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0304 	and.w	r3, r3, #4
 800567a:	2b00      	cmp	r3, #0
 800567c:	bf14      	ite	ne
 800567e:	2301      	movne	r3, #1
 8005680:	2300      	moveq	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	e02e      	b.n	80056e4 <HAL_DMA_IRQHandler+0x208>
 8005686:	bf00      	nop
 8005688:	24000004 	.word	0x24000004
 800568c:	1b4e81b5 	.word	0x1b4e81b5
 8005690:	40020010 	.word	0x40020010
 8005694:	40020028 	.word	0x40020028
 8005698:	40020040 	.word	0x40020040
 800569c:	40020058 	.word	0x40020058
 80056a0:	40020070 	.word	0x40020070
 80056a4:	40020088 	.word	0x40020088
 80056a8:	400200a0 	.word	0x400200a0
 80056ac:	400200b8 	.word	0x400200b8
 80056b0:	40020410 	.word	0x40020410
 80056b4:	40020428 	.word	0x40020428
 80056b8:	40020440 	.word	0x40020440
 80056bc:	40020458 	.word	0x40020458
 80056c0:	40020470 	.word	0x40020470
 80056c4:	40020488 	.word	0x40020488
 80056c8:	400204a0 	.word	0x400204a0
 80056cc:	400204b8 	.word	0x400204b8
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	bf14      	ite	ne
 80056de:	2301      	movne	r3, #1
 80056e0:	2300      	moveq	r3, #0
 80056e2:	b2db      	uxtb	r3, r3
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d015      	beq.n	8005714 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0204 	bic.w	r2, r2, #4
 80056f6:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056fc:	f003 031f 	and.w	r3, r3, #31
 8005700:	2208      	movs	r2, #8
 8005702:	409a      	lsls	r2, r3
 8005704:	6a3b      	ldr	r3, [r7, #32]
 8005706:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800570c:	f043 0201 	orr.w	r2, r3, #1
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005718:	f003 031f 	and.w	r3, r3, #31
 800571c:	69ba      	ldr	r2, [r7, #24]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	f003 0301 	and.w	r3, r3, #1
 8005726:	2b00      	cmp	r3, #0
 8005728:	d06e      	beq.n	8005808 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	4a69      	ldr	r2, [pc, #420]	; (80058d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d04a      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a67      	ldr	r2, [pc, #412]	; (80058d8 <HAL_DMA_IRQHandler+0x3fc>)
 800573a:	4293      	cmp	r3, r2
 800573c:	d045      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4a66      	ldr	r2, [pc, #408]	; (80058dc <HAL_DMA_IRQHandler+0x400>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d040      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	4a64      	ldr	r2, [pc, #400]	; (80058e0 <HAL_DMA_IRQHandler+0x404>)
 800574e:	4293      	cmp	r3, r2
 8005750:	d03b      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a63      	ldr	r2, [pc, #396]	; (80058e4 <HAL_DMA_IRQHandler+0x408>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d036      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a61      	ldr	r2, [pc, #388]	; (80058e8 <HAL_DMA_IRQHandler+0x40c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d031      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	4a60      	ldr	r2, [pc, #384]	; (80058ec <HAL_DMA_IRQHandler+0x410>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d02c      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a5e      	ldr	r2, [pc, #376]	; (80058f0 <HAL_DMA_IRQHandler+0x414>)
 8005776:	4293      	cmp	r3, r2
 8005778:	d027      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	4a5d      	ldr	r2, [pc, #372]	; (80058f4 <HAL_DMA_IRQHandler+0x418>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	4a5b      	ldr	r2, [pc, #364]	; (80058f8 <HAL_DMA_IRQHandler+0x41c>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d01d      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	4a5a      	ldr	r2, [pc, #360]	; (80058fc <HAL_DMA_IRQHandler+0x420>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d018      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a58      	ldr	r2, [pc, #352]	; (8005900 <HAL_DMA_IRQHandler+0x424>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d013      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	4a57      	ldr	r2, [pc, #348]	; (8005904 <HAL_DMA_IRQHandler+0x428>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d00e      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a55      	ldr	r2, [pc, #340]	; (8005908 <HAL_DMA_IRQHandler+0x42c>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d009      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	4a54      	ldr	r2, [pc, #336]	; (800590c <HAL_DMA_IRQHandler+0x430>)
 80057bc:	4293      	cmp	r3, r2
 80057be:	d004      	beq.n	80057ca <HAL_DMA_IRQHandler+0x2ee>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4a52      	ldr	r2, [pc, #328]	; (8005910 <HAL_DMA_IRQHandler+0x434>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d10a      	bne.n	80057e0 <HAL_DMA_IRQHandler+0x304>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	e003      	b.n	80057e8 <HAL_DMA_IRQHandler+0x30c>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	2300      	movs	r3, #0
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d00d      	beq.n	8005808 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057f0:	f003 031f 	and.w	r3, r3, #31
 80057f4:	2201      	movs	r2, #1
 80057f6:	409a      	lsls	r2, r3
 80057f8:	6a3b      	ldr	r3, [r7, #32]
 80057fa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005800:	f043 0202 	orr.w	r2, r3, #2
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800580c:	f003 031f 	and.w	r3, r3, #31
 8005810:	2204      	movs	r2, #4
 8005812:	409a      	lsls	r2, r3
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	4013      	ands	r3, r2
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 808f 	beq.w	800593c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <HAL_DMA_IRQHandler+0x3f8>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d04a      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a2a      	ldr	r2, [pc, #168]	; (80058d8 <HAL_DMA_IRQHandler+0x3fc>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d045      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a29      	ldr	r2, [pc, #164]	; (80058dc <HAL_DMA_IRQHandler+0x400>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d040      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a27      	ldr	r2, [pc, #156]	; (80058e0 <HAL_DMA_IRQHandler+0x404>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d03b      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a26      	ldr	r2, [pc, #152]	; (80058e4 <HAL_DMA_IRQHandler+0x408>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d036      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a24      	ldr	r2, [pc, #144]	; (80058e8 <HAL_DMA_IRQHandler+0x40c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d031      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a23      	ldr	r2, [pc, #140]	; (80058ec <HAL_DMA_IRQHandler+0x410>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d02c      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a21      	ldr	r2, [pc, #132]	; (80058f0 <HAL_DMA_IRQHandler+0x414>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d027      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a20      	ldr	r2, [pc, #128]	; (80058f4 <HAL_DMA_IRQHandler+0x418>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d022      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	4a1e      	ldr	r2, [pc, #120]	; (80058f8 <HAL_DMA_IRQHandler+0x41c>)
 800587e:	4293      	cmp	r3, r2
 8005880:	d01d      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a1d      	ldr	r2, [pc, #116]	; (80058fc <HAL_DMA_IRQHandler+0x420>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d018      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a1b      	ldr	r2, [pc, #108]	; (8005900 <HAL_DMA_IRQHandler+0x424>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d013      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a1a      	ldr	r2, [pc, #104]	; (8005904 <HAL_DMA_IRQHandler+0x428>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d00e      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4a18      	ldr	r2, [pc, #96]	; (8005908 <HAL_DMA_IRQHandler+0x42c>)
 80058a6:	4293      	cmp	r3, r2
 80058a8:	d009      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	4a17      	ldr	r2, [pc, #92]	; (800590c <HAL_DMA_IRQHandler+0x430>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d004      	beq.n	80058be <HAL_DMA_IRQHandler+0x3e2>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a15      	ldr	r2, [pc, #84]	; (8005910 <HAL_DMA_IRQHandler+0x434>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d12a      	bne.n	8005914 <HAL_DMA_IRQHandler+0x438>
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0302 	and.w	r3, r3, #2
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	bf14      	ite	ne
 80058cc:	2301      	movne	r3, #1
 80058ce:	2300      	moveq	r3, #0
 80058d0:	b2db      	uxtb	r3, r3
 80058d2:	e023      	b.n	800591c <HAL_DMA_IRQHandler+0x440>
 80058d4:	40020010 	.word	0x40020010
 80058d8:	40020028 	.word	0x40020028
 80058dc:	40020040 	.word	0x40020040
 80058e0:	40020058 	.word	0x40020058
 80058e4:	40020070 	.word	0x40020070
 80058e8:	40020088 	.word	0x40020088
 80058ec:	400200a0 	.word	0x400200a0
 80058f0:	400200b8 	.word	0x400200b8
 80058f4:	40020410 	.word	0x40020410
 80058f8:	40020428 	.word	0x40020428
 80058fc:	40020440 	.word	0x40020440
 8005900:	40020458 	.word	0x40020458
 8005904:	40020470 	.word	0x40020470
 8005908:	40020488 	.word	0x40020488
 800590c:	400204a0 	.word	0x400204a0
 8005910:	400204b8 	.word	0x400204b8
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00d      	beq.n	800593c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005924:	f003 031f 	and.w	r3, r3, #31
 8005928:	2204      	movs	r2, #4
 800592a:	409a      	lsls	r2, r3
 800592c:	6a3b      	ldr	r3, [r7, #32]
 800592e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005934:	f043 0204 	orr.w	r2, r3, #4
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005940:	f003 031f 	and.w	r3, r3, #31
 8005944:	2210      	movs	r2, #16
 8005946:	409a      	lsls	r2, r3
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	4013      	ands	r3, r2
 800594c:	2b00      	cmp	r3, #0
 800594e:	f000 80a6 	beq.w	8005a9e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	4a85      	ldr	r2, [pc, #532]	; (8005b6c <HAL_DMA_IRQHandler+0x690>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d04a      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a83      	ldr	r2, [pc, #524]	; (8005b70 <HAL_DMA_IRQHandler+0x694>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d045      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a82      	ldr	r2, [pc, #520]	; (8005b74 <HAL_DMA_IRQHandler+0x698>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d040      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a80      	ldr	r2, [pc, #512]	; (8005b78 <HAL_DMA_IRQHandler+0x69c>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d03b      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a7f      	ldr	r2, [pc, #508]	; (8005b7c <HAL_DMA_IRQHandler+0x6a0>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d036      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a7d      	ldr	r2, [pc, #500]	; (8005b80 <HAL_DMA_IRQHandler+0x6a4>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d031      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a7c      	ldr	r2, [pc, #496]	; (8005b84 <HAL_DMA_IRQHandler+0x6a8>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d02c      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a7a      	ldr	r2, [pc, #488]	; (8005b88 <HAL_DMA_IRQHandler+0x6ac>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d027      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a79      	ldr	r2, [pc, #484]	; (8005b8c <HAL_DMA_IRQHandler+0x6b0>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d022      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a77      	ldr	r2, [pc, #476]	; (8005b90 <HAL_DMA_IRQHandler+0x6b4>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d01d      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a76      	ldr	r2, [pc, #472]	; (8005b94 <HAL_DMA_IRQHandler+0x6b8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d018      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a74      	ldr	r2, [pc, #464]	; (8005b98 <HAL_DMA_IRQHandler+0x6bc>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d013      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a73      	ldr	r2, [pc, #460]	; (8005b9c <HAL_DMA_IRQHandler+0x6c0>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d00e      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a71      	ldr	r2, [pc, #452]	; (8005ba0 <HAL_DMA_IRQHandler+0x6c4>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d009      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a70      	ldr	r2, [pc, #448]	; (8005ba4 <HAL_DMA_IRQHandler+0x6c8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d004      	beq.n	80059f2 <HAL_DMA_IRQHandler+0x516>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a6e      	ldr	r2, [pc, #440]	; (8005ba8 <HAL_DMA_IRQHandler+0x6cc>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d10a      	bne.n	8005a08 <HAL_DMA_IRQHandler+0x52c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	f003 0308 	and.w	r3, r3, #8
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	bf14      	ite	ne
 8005a00:	2301      	movne	r3, #1
 8005a02:	2300      	moveq	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
 8005a06:	e009      	b.n	8005a1c <HAL_DMA_IRQHandler+0x540>
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 0304 	and.w	r3, r3, #4
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	bf14      	ite	ne
 8005a16:	2301      	movne	r3, #1
 8005a18:	2300      	moveq	r3, #0
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d03e      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a24:	f003 031f 	and.w	r3, r3, #31
 8005a28:	2210      	movs	r2, #16
 8005a2a:	409a      	lsls	r2, r3
 8005a2c:	6a3b      	ldr	r3, [r7, #32]
 8005a2e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d018      	beq.n	8005a70 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d108      	bne.n	8005a5e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d024      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	4798      	blx	r3
 8005a5c:	e01f      	b.n	8005a9e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d01b      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	4798      	blx	r3
 8005a6e:	e016      	b.n	8005a9e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d107      	bne.n	8005a8e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f022 0208 	bic.w	r2, r2, #8
 8005a8c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d003      	beq.n	8005a9e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005aa2:	f003 031f 	and.w	r3, r3, #31
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	409a      	lsls	r2, r3
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	4013      	ands	r3, r2
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	f000 8110 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a2c      	ldr	r2, [pc, #176]	; (8005b6c <HAL_DMA_IRQHandler+0x690>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d04a      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4a2b      	ldr	r2, [pc, #172]	; (8005b70 <HAL_DMA_IRQHandler+0x694>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d045      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	4a29      	ldr	r2, [pc, #164]	; (8005b74 <HAL_DMA_IRQHandler+0x698>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d040      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a28      	ldr	r2, [pc, #160]	; (8005b78 <HAL_DMA_IRQHandler+0x69c>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d03b      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a26      	ldr	r2, [pc, #152]	; (8005b7c <HAL_DMA_IRQHandler+0x6a0>)
 8005ae2:	4293      	cmp	r3, r2
 8005ae4:	d036      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4a25      	ldr	r2, [pc, #148]	; (8005b80 <HAL_DMA_IRQHandler+0x6a4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d031      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a23      	ldr	r2, [pc, #140]	; (8005b84 <HAL_DMA_IRQHandler+0x6a8>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d02c      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	4a22      	ldr	r2, [pc, #136]	; (8005b88 <HAL_DMA_IRQHandler+0x6ac>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d027      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4a20      	ldr	r2, [pc, #128]	; (8005b8c <HAL_DMA_IRQHandler+0x6b0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d022      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	4a1f      	ldr	r2, [pc, #124]	; (8005b90 <HAL_DMA_IRQHandler+0x6b4>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	d01d      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a1d      	ldr	r2, [pc, #116]	; (8005b94 <HAL_DMA_IRQHandler+0x6b8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d018      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	4a1c      	ldr	r2, [pc, #112]	; (8005b98 <HAL_DMA_IRQHandler+0x6bc>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d013      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <HAL_DMA_IRQHandler+0x6c0>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d00e      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a19      	ldr	r2, [pc, #100]	; (8005ba0 <HAL_DMA_IRQHandler+0x6c4>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d009      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	4a17      	ldr	r2, [pc, #92]	; (8005ba4 <HAL_DMA_IRQHandler+0x6c8>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d004      	beq.n	8005b54 <HAL_DMA_IRQHandler+0x678>
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a16      	ldr	r2, [pc, #88]	; (8005ba8 <HAL_DMA_IRQHandler+0x6cc>)
 8005b50:	4293      	cmp	r3, r2
 8005b52:	d12b      	bne.n	8005bac <HAL_DMA_IRQHandler+0x6d0>
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f003 0310 	and.w	r3, r3, #16
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	bf14      	ite	ne
 8005b62:	2301      	movne	r3, #1
 8005b64:	2300      	moveq	r3, #0
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	e02a      	b.n	8005bc0 <HAL_DMA_IRQHandler+0x6e4>
 8005b6a:	bf00      	nop
 8005b6c:	40020010 	.word	0x40020010
 8005b70:	40020028 	.word	0x40020028
 8005b74:	40020040 	.word	0x40020040
 8005b78:	40020058 	.word	0x40020058
 8005b7c:	40020070 	.word	0x40020070
 8005b80:	40020088 	.word	0x40020088
 8005b84:	400200a0 	.word	0x400200a0
 8005b88:	400200b8 	.word	0x400200b8
 8005b8c:	40020410 	.word	0x40020410
 8005b90:	40020428 	.word	0x40020428
 8005b94:	40020440 	.word	0x40020440
 8005b98:	40020458 	.word	0x40020458
 8005b9c:	40020470 	.word	0x40020470
 8005ba0:	40020488 	.word	0x40020488
 8005ba4:	400204a0 	.word	0x400204a0
 8005ba8:	400204b8 	.word	0x400204b8
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f003 0302 	and.w	r3, r3, #2
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	bf14      	ite	ne
 8005bba:	2301      	movne	r3, #1
 8005bbc:	2300      	moveq	r3, #0
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f000 8087 	beq.w	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2220      	movs	r2, #32
 8005bd0:	409a      	lsls	r2, r3
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005bdc:	b2db      	uxtb	r3, r3
 8005bde:	2b04      	cmp	r3, #4
 8005be0:	d139      	bne.n	8005c56 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f022 0216 	bic.w	r2, r2, #22
 8005bf0:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	695a      	ldr	r2, [r3, #20]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005c00:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d103      	bne.n	8005c12 <HAL_DMA_IRQHandler+0x736>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d007      	beq.n	8005c22 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	f022 0208 	bic.w	r2, r2, #8
 8005c20:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c26:	f003 031f 	and.w	r3, r3, #31
 8005c2a:	223f      	movs	r2, #63	; 0x3f
 8005c2c:	409a      	lsls	r2, r3
 8005c2e:	6a3b      	ldr	r3, [r7, #32]
 8005c30:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 834a 	beq.w	80062e0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	4798      	blx	r3
          }
          return;
 8005c54:	e344      	b.n	80062e0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d018      	beq.n	8005c96 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d108      	bne.n	8005c84 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d02c      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	4798      	blx	r3
 8005c82:	e027      	b.n	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d023      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	4798      	blx	r3
 8005c94:	e01e      	b.n	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10f      	bne.n	8005cc4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	681a      	ldr	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f022 0210 	bic.w	r2, r2, #16
 8005cb2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d003      	beq.n	8005cd4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f000 8306 	beq.w	80062ea <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce2:	f003 0301 	and.w	r3, r3, #1
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 8088 	beq.w	8005dfc <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2204      	movs	r2, #4
 8005cf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a7a      	ldr	r2, [pc, #488]	; (8005ee4 <HAL_DMA_IRQHandler+0xa08>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d04a      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a79      	ldr	r2, [pc, #484]	; (8005ee8 <HAL_DMA_IRQHandler+0xa0c>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d045      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a77      	ldr	r2, [pc, #476]	; (8005eec <HAL_DMA_IRQHandler+0xa10>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d040      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a76      	ldr	r2, [pc, #472]	; (8005ef0 <HAL_DMA_IRQHandler+0xa14>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d03b      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a74      	ldr	r2, [pc, #464]	; (8005ef4 <HAL_DMA_IRQHandler+0xa18>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d036      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a73      	ldr	r2, [pc, #460]	; (8005ef8 <HAL_DMA_IRQHandler+0xa1c>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d031      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a71      	ldr	r2, [pc, #452]	; (8005efc <HAL_DMA_IRQHandler+0xa20>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d02c      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a70      	ldr	r2, [pc, #448]	; (8005f00 <HAL_DMA_IRQHandler+0xa24>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d027      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	4a6e      	ldr	r2, [pc, #440]	; (8005f04 <HAL_DMA_IRQHandler+0xa28>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d022      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	4a6d      	ldr	r2, [pc, #436]	; (8005f08 <HAL_DMA_IRQHandler+0xa2c>)
 8005d54:	4293      	cmp	r3, r2
 8005d56:	d01d      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	4a6b      	ldr	r2, [pc, #428]	; (8005f0c <HAL_DMA_IRQHandler+0xa30>)
 8005d5e:	4293      	cmp	r3, r2
 8005d60:	d018      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	4a6a      	ldr	r2, [pc, #424]	; (8005f10 <HAL_DMA_IRQHandler+0xa34>)
 8005d68:	4293      	cmp	r3, r2
 8005d6a:	d013      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a68      	ldr	r2, [pc, #416]	; (8005f14 <HAL_DMA_IRQHandler+0xa38>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d00e      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a67      	ldr	r2, [pc, #412]	; (8005f18 <HAL_DMA_IRQHandler+0xa3c>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d009      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4a65      	ldr	r2, [pc, #404]	; (8005f1c <HAL_DMA_IRQHandler+0xa40>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d004      	beq.n	8005d94 <HAL_DMA_IRQHandler+0x8b8>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	4a64      	ldr	r2, [pc, #400]	; (8005f20 <HAL_DMA_IRQHandler+0xa44>)
 8005d90:	4293      	cmp	r3, r2
 8005d92:	d108      	bne.n	8005da6 <HAL_DMA_IRQHandler+0x8ca>
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	681a      	ldr	r2, [r3, #0]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	f022 0201 	bic.w	r2, r2, #1
 8005da2:	601a      	str	r2, [r3, #0]
 8005da4:	e007      	b.n	8005db6 <HAL_DMA_IRQHandler+0x8da>
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0201 	bic.w	r2, r2, #1
 8005db4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	3301      	adds	r3, #1
 8005dba:	60fb      	str	r3, [r7, #12]
 8005dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d307      	bcc.n	8005dd2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f003 0301 	and.w	r3, r3, #1
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d1f2      	bne.n	8005db6 <HAL_DMA_IRQHandler+0x8da>
 8005dd0:	e000      	b.n	8005dd4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8005dd2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0301 	and.w	r3, r3, #1
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2203      	movs	r2, #3
 8005de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8005dea:	e003      	b.n	8005df4 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2201      	movs	r2, #1
 8005df0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2200      	movs	r2, #0
 8005df8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 8272 	beq.w	80062ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	4798      	blx	r3
 8005e0e:	e26c      	b.n	80062ea <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a43      	ldr	r2, [pc, #268]	; (8005f24 <HAL_DMA_IRQHandler+0xa48>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d022      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a42      	ldr	r2, [pc, #264]	; (8005f28 <HAL_DMA_IRQHandler+0xa4c>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d01d      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4a40      	ldr	r2, [pc, #256]	; (8005f2c <HAL_DMA_IRQHandler+0xa50>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d018      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	4a3f      	ldr	r2, [pc, #252]	; (8005f30 <HAL_DMA_IRQHandler+0xa54>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d013      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a3d      	ldr	r2, [pc, #244]	; (8005f34 <HAL_DMA_IRQHandler+0xa58>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d00e      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	4a3c      	ldr	r2, [pc, #240]	; (8005f38 <HAL_DMA_IRQHandler+0xa5c>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d009      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a3a      	ldr	r2, [pc, #232]	; (8005f3c <HAL_DMA_IRQHandler+0xa60>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d004      	beq.n	8005e60 <HAL_DMA_IRQHandler+0x984>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a39      	ldr	r2, [pc, #228]	; (8005f40 <HAL_DMA_IRQHandler+0xa64>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d101      	bne.n	8005e64 <HAL_DMA_IRQHandler+0x988>
 8005e60:	2301      	movs	r3, #1
 8005e62:	e000      	b.n	8005e66 <HAL_DMA_IRQHandler+0x98a>
 8005e64:	2300      	movs	r3, #0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	f000 823f 	beq.w	80062ea <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e78:	f003 031f 	and.w	r3, r3, #31
 8005e7c:	2204      	movs	r2, #4
 8005e7e:	409a      	lsls	r2, r3
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	f000 80cd 	beq.w	8006024 <HAL_DMA_IRQHandler+0xb48>
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	f003 0304 	and.w	r3, r3, #4
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	f000 80c7 	beq.w	8006024 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	2204      	movs	r2, #4
 8005ea0:	409a      	lsls	r2, r3
 8005ea2:	69fb      	ldr	r3, [r7, #28]
 8005ea4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ea6:	693b      	ldr	r3, [r7, #16]
 8005ea8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d049      	beq.n	8005f44 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d109      	bne.n	8005ece <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	f000 8210 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ec8:	6878      	ldr	r0, [r7, #4]
 8005eca:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ecc:	e20a      	b.n	80062e4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	f000 8206 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005ee0:	e200      	b.n	80062e4 <HAL_DMA_IRQHandler+0xe08>
 8005ee2:	bf00      	nop
 8005ee4:	40020010 	.word	0x40020010
 8005ee8:	40020028 	.word	0x40020028
 8005eec:	40020040 	.word	0x40020040
 8005ef0:	40020058 	.word	0x40020058
 8005ef4:	40020070 	.word	0x40020070
 8005ef8:	40020088 	.word	0x40020088
 8005efc:	400200a0 	.word	0x400200a0
 8005f00:	400200b8 	.word	0x400200b8
 8005f04:	40020410 	.word	0x40020410
 8005f08:	40020428 	.word	0x40020428
 8005f0c:	40020440 	.word	0x40020440
 8005f10:	40020458 	.word	0x40020458
 8005f14:	40020470 	.word	0x40020470
 8005f18:	40020488 	.word	0x40020488
 8005f1c:	400204a0 	.word	0x400204a0
 8005f20:	400204b8 	.word	0x400204b8
 8005f24:	58025408 	.word	0x58025408
 8005f28:	5802541c 	.word	0x5802541c
 8005f2c:	58025430 	.word	0x58025430
 8005f30:	58025444 	.word	0x58025444
 8005f34:	58025458 	.word	0x58025458
 8005f38:	5802546c 	.word	0x5802546c
 8005f3c:	58025480 	.word	0x58025480
 8005f40:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d160      	bne.n	8006010 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a7f      	ldr	r2, [pc, #508]	; (8006150 <HAL_DMA_IRQHandler+0xc74>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d04a      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a7d      	ldr	r2, [pc, #500]	; (8006154 <HAL_DMA_IRQHandler+0xc78>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d045      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a7c      	ldr	r2, [pc, #496]	; (8006158 <HAL_DMA_IRQHandler+0xc7c>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d040      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7a      	ldr	r2, [pc, #488]	; (800615c <HAL_DMA_IRQHandler+0xc80>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d03b      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a79      	ldr	r2, [pc, #484]	; (8006160 <HAL_DMA_IRQHandler+0xc84>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d036      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a77      	ldr	r2, [pc, #476]	; (8006164 <HAL_DMA_IRQHandler+0xc88>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d031      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	4a76      	ldr	r2, [pc, #472]	; (8006168 <HAL_DMA_IRQHandler+0xc8c>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d02c      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a74      	ldr	r2, [pc, #464]	; (800616c <HAL_DMA_IRQHandler+0xc90>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d027      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a73      	ldr	r2, [pc, #460]	; (8006170 <HAL_DMA_IRQHandler+0xc94>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a71      	ldr	r2, [pc, #452]	; (8006174 <HAL_DMA_IRQHandler+0xc98>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d01d      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a70      	ldr	r2, [pc, #448]	; (8006178 <HAL_DMA_IRQHandler+0xc9c>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a6e      	ldr	r2, [pc, #440]	; (800617c <HAL_DMA_IRQHandler+0xca0>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a6d      	ldr	r2, [pc, #436]	; (8006180 <HAL_DMA_IRQHandler+0xca4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a6b      	ldr	r2, [pc, #428]	; (8006184 <HAL_DMA_IRQHandler+0xca8>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a6a      	ldr	r2, [pc, #424]	; (8006188 <HAL_DMA_IRQHandler+0xcac>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_DMA_IRQHandler+0xb12>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a68      	ldr	r2, [pc, #416]	; (800618c <HAL_DMA_IRQHandler+0xcb0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d108      	bne.n	8006000 <HAL_DMA_IRQHandler+0xb24>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f022 0208 	bic.w	r2, r2, #8
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	e007      	b.n	8006010 <HAL_DMA_IRQHandler+0xb34>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0204 	bic.w	r2, r2, #4
 800600e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8165 	beq.w	80062e4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	6878      	ldr	r0, [r7, #4]
 8006020:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006022:	e15f      	b.n	80062e4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006028:	f003 031f 	and.w	r3, r3, #31
 800602c:	2202      	movs	r2, #2
 800602e:	409a      	lsls	r2, r3
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	4013      	ands	r3, r2
 8006034:	2b00      	cmp	r3, #0
 8006036:	f000 80c5 	beq.w	80061c4 <HAL_DMA_IRQHandler+0xce8>
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	f003 0302 	and.w	r3, r3, #2
 8006040:	2b00      	cmp	r3, #0
 8006042:	f000 80bf 	beq.w	80061c4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800604a:	f003 031f 	and.w	r3, r3, #31
 800604e:	2202      	movs	r2, #2
 8006050:	409a      	lsls	r2, r3
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d018      	beq.n	8006092 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d109      	bne.n	800607e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800606e:	2b00      	cmp	r3, #0
 8006070:	f000 813a 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800607c:	e134      	b.n	80062e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006082:	2b00      	cmp	r3, #0
 8006084:	f000 8130 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006090:	e12a      	b.n	80062e8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b00      	cmp	r3, #0
 800609a:	f040 8089 	bne.w	80061b0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a2b      	ldr	r2, [pc, #172]	; (8006150 <HAL_DMA_IRQHandler+0xc74>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d04a      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a29      	ldr	r2, [pc, #164]	; (8006154 <HAL_DMA_IRQHandler+0xc78>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d045      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a28      	ldr	r2, [pc, #160]	; (8006158 <HAL_DMA_IRQHandler+0xc7c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d040      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a26      	ldr	r2, [pc, #152]	; (800615c <HAL_DMA_IRQHandler+0xc80>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d03b      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a25      	ldr	r2, [pc, #148]	; (8006160 <HAL_DMA_IRQHandler+0xc84>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d036      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a23      	ldr	r2, [pc, #140]	; (8006164 <HAL_DMA_IRQHandler+0xc88>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d031      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a22      	ldr	r2, [pc, #136]	; (8006168 <HAL_DMA_IRQHandler+0xc8c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d02c      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a20      	ldr	r2, [pc, #128]	; (800616c <HAL_DMA_IRQHandler+0xc90>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d027      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1f      	ldr	r2, [pc, #124]	; (8006170 <HAL_DMA_IRQHandler+0xc94>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d022      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a1d      	ldr	r2, [pc, #116]	; (8006174 <HAL_DMA_IRQHandler+0xc98>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d01d      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a1c      	ldr	r2, [pc, #112]	; (8006178 <HAL_DMA_IRQHandler+0xc9c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d018      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a1a      	ldr	r2, [pc, #104]	; (800617c <HAL_DMA_IRQHandler+0xca0>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d013      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a19      	ldr	r2, [pc, #100]	; (8006180 <HAL_DMA_IRQHandler+0xca4>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d00e      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a17      	ldr	r2, [pc, #92]	; (8006184 <HAL_DMA_IRQHandler+0xca8>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d009      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	4a16      	ldr	r2, [pc, #88]	; (8006188 <HAL_DMA_IRQHandler+0xcac>)
 8006130:	4293      	cmp	r3, r2
 8006132:	d004      	beq.n	800613e <HAL_DMA_IRQHandler+0xc62>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4a14      	ldr	r2, [pc, #80]	; (800618c <HAL_DMA_IRQHandler+0xcb0>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d128      	bne.n	8006190 <HAL_DMA_IRQHandler+0xcb4>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	681a      	ldr	r2, [r3, #0]
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f022 0214 	bic.w	r2, r2, #20
 800614c:	601a      	str	r2, [r3, #0]
 800614e:	e027      	b.n	80061a0 <HAL_DMA_IRQHandler+0xcc4>
 8006150:	40020010 	.word	0x40020010
 8006154:	40020028 	.word	0x40020028
 8006158:	40020040 	.word	0x40020040
 800615c:	40020058 	.word	0x40020058
 8006160:	40020070 	.word	0x40020070
 8006164:	40020088 	.word	0x40020088
 8006168:	400200a0 	.word	0x400200a0
 800616c:	400200b8 	.word	0x400200b8
 8006170:	40020410 	.word	0x40020410
 8006174:	40020428 	.word	0x40020428
 8006178:	40020440 	.word	0x40020440
 800617c:	40020458 	.word	0x40020458
 8006180:	40020470 	.word	0x40020470
 8006184:	40020488 	.word	0x40020488
 8006188:	400204a0 	.word	0x400204a0
 800618c:	400204b8 	.word	0x400204b8
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	681a      	ldr	r2, [r3, #0]
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	f022 020a 	bic.w	r2, r2, #10
 800619e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	f000 8097 	beq.w	80062e8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80061c2:	e091      	b.n	80062e8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c8:	f003 031f 	and.w	r3, r3, #31
 80061cc:	2208      	movs	r2, #8
 80061ce:	409a      	lsls	r2, r3
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	4013      	ands	r3, r2
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	f000 8088 	beq.w	80062ea <HAL_DMA_IRQHandler+0xe0e>
 80061da:	693b      	ldr	r3, [r7, #16]
 80061dc:	f003 0308 	and.w	r3, r3, #8
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	f000 8082 	beq.w	80062ea <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a41      	ldr	r2, [pc, #260]	; (80062f0 <HAL_DMA_IRQHandler+0xe14>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d04a      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a3f      	ldr	r2, [pc, #252]	; (80062f4 <HAL_DMA_IRQHandler+0xe18>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d045      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a3e      	ldr	r2, [pc, #248]	; (80062f8 <HAL_DMA_IRQHandler+0xe1c>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d040      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a3c      	ldr	r2, [pc, #240]	; (80062fc <HAL_DMA_IRQHandler+0xe20>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d03b      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a3b      	ldr	r2, [pc, #236]	; (8006300 <HAL_DMA_IRQHandler+0xe24>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d036      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a39      	ldr	r2, [pc, #228]	; (8006304 <HAL_DMA_IRQHandler+0xe28>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d031      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	4a38      	ldr	r2, [pc, #224]	; (8006308 <HAL_DMA_IRQHandler+0xe2c>)
 8006228:	4293      	cmp	r3, r2
 800622a:	d02c      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4a36      	ldr	r2, [pc, #216]	; (800630c <HAL_DMA_IRQHandler+0xe30>)
 8006232:	4293      	cmp	r3, r2
 8006234:	d027      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	4a35      	ldr	r2, [pc, #212]	; (8006310 <HAL_DMA_IRQHandler+0xe34>)
 800623c:	4293      	cmp	r3, r2
 800623e:	d022      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	4a33      	ldr	r2, [pc, #204]	; (8006314 <HAL_DMA_IRQHandler+0xe38>)
 8006246:	4293      	cmp	r3, r2
 8006248:	d01d      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <HAL_DMA_IRQHandler+0xe3c>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d018      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4a30      	ldr	r2, [pc, #192]	; (800631c <HAL_DMA_IRQHandler+0xe40>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d013      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	4a2f      	ldr	r2, [pc, #188]	; (8006320 <HAL_DMA_IRQHandler+0xe44>)
 8006264:	4293      	cmp	r3, r2
 8006266:	d00e      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	4a2d      	ldr	r2, [pc, #180]	; (8006324 <HAL_DMA_IRQHandler+0xe48>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d009      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a2c      	ldr	r2, [pc, #176]	; (8006328 <HAL_DMA_IRQHandler+0xe4c>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d004      	beq.n	8006286 <HAL_DMA_IRQHandler+0xdaa>
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	4a2a      	ldr	r2, [pc, #168]	; (800632c <HAL_DMA_IRQHandler+0xe50>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d108      	bne.n	8006298 <HAL_DMA_IRQHandler+0xdbc>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681a      	ldr	r2, [r3, #0]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f022 021c 	bic.w	r2, r2, #28
 8006294:	601a      	str	r2, [r3, #0]
 8006296:	e007      	b.n	80062a8 <HAL_DMA_IRQHandler+0xdcc>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 020e 	bic.w	r2, r2, #14
 80062a6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	2201      	movs	r2, #1
 80062b2:	409a      	lsls	r2, r3
 80062b4:	69fb      	ldr	r3, [r7, #28]
 80062b6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2201      	movs	r2, #1
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2201      	movs	r2, #1
 80062c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2200      	movs	r2, #0
 80062ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d009      	beq.n	80062ea <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	4798      	blx	r3
 80062de:	e004      	b.n	80062ea <HAL_DMA_IRQHandler+0xe0e>
          return;
 80062e0:	bf00      	nop
 80062e2:	e002      	b.n	80062ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e4:	bf00      	nop
 80062e6:	e000      	b.n	80062ea <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80062e8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80062ea:	3728      	adds	r7, #40	; 0x28
 80062ec:	46bd      	mov	sp, r7
 80062ee:	bd80      	pop	{r7, pc}
 80062f0:	40020010 	.word	0x40020010
 80062f4:	40020028 	.word	0x40020028
 80062f8:	40020040 	.word	0x40020040
 80062fc:	40020058 	.word	0x40020058
 8006300:	40020070 	.word	0x40020070
 8006304:	40020088 	.word	0x40020088
 8006308:	400200a0 	.word	0x400200a0
 800630c:	400200b8 	.word	0x400200b8
 8006310:	40020410 	.word	0x40020410
 8006314:	40020428 	.word	0x40020428
 8006318:	40020440 	.word	0x40020440
 800631c:	40020458 	.word	0x40020458
 8006320:	40020470 	.word	0x40020470
 8006324:	40020488 	.word	0x40020488
 8006328:	400204a0 	.word	0x400204a0
 800632c:	400204b8 	.word	0x400204b8

08006330 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006330:	b480      	push	{r7}
 8006332:	b085      	sub	sp, #20
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	4a42      	ldr	r2, [pc, #264]	; (8006448 <DMA_CalcBaseAndBitshift+0x118>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d04a      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a41      	ldr	r2, [pc, #260]	; (800644c <DMA_CalcBaseAndBitshift+0x11c>)
 8006348:	4293      	cmp	r3, r2
 800634a:	d045      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	4a3f      	ldr	r2, [pc, #252]	; (8006450 <DMA_CalcBaseAndBitshift+0x120>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d040      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a3e      	ldr	r2, [pc, #248]	; (8006454 <DMA_CalcBaseAndBitshift+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d03b      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	4a3c      	ldr	r2, [pc, #240]	; (8006458 <DMA_CalcBaseAndBitshift+0x128>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d036      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4a3b      	ldr	r2, [pc, #236]	; (800645c <DMA_CalcBaseAndBitshift+0x12c>)
 8006370:	4293      	cmp	r3, r2
 8006372:	d031      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	4a39      	ldr	r2, [pc, #228]	; (8006460 <DMA_CalcBaseAndBitshift+0x130>)
 800637a:	4293      	cmp	r3, r2
 800637c:	d02c      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	4a38      	ldr	r2, [pc, #224]	; (8006464 <DMA_CalcBaseAndBitshift+0x134>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d027      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a36      	ldr	r2, [pc, #216]	; (8006468 <DMA_CalcBaseAndBitshift+0x138>)
 800638e:	4293      	cmp	r3, r2
 8006390:	d022      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	4a35      	ldr	r2, [pc, #212]	; (800646c <DMA_CalcBaseAndBitshift+0x13c>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d01d      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a33      	ldr	r2, [pc, #204]	; (8006470 <DMA_CalcBaseAndBitshift+0x140>)
 80063a2:	4293      	cmp	r3, r2
 80063a4:	d018      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a32      	ldr	r2, [pc, #200]	; (8006474 <DMA_CalcBaseAndBitshift+0x144>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d013      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	4a30      	ldr	r2, [pc, #192]	; (8006478 <DMA_CalcBaseAndBitshift+0x148>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d00e      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	4a2f      	ldr	r2, [pc, #188]	; (800647c <DMA_CalcBaseAndBitshift+0x14c>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d009      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a2d      	ldr	r2, [pc, #180]	; (8006480 <DMA_CalcBaseAndBitshift+0x150>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d004      	beq.n	80063d8 <DMA_CalcBaseAndBitshift+0xa8>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4a2c      	ldr	r2, [pc, #176]	; (8006484 <DMA_CalcBaseAndBitshift+0x154>)
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d101      	bne.n	80063dc <DMA_CalcBaseAndBitshift+0xac>
 80063d8:	2301      	movs	r3, #1
 80063da:	e000      	b.n	80063de <DMA_CalcBaseAndBitshift+0xae>
 80063dc:	2300      	movs	r3, #0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d024      	beq.n	800642c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	3b10      	subs	r3, #16
 80063ea:	4a27      	ldr	r2, [pc, #156]	; (8006488 <DMA_CalcBaseAndBitshift+0x158>)
 80063ec:	fba2 2303 	umull	r2, r3, r2, r3
 80063f0:	091b      	lsrs	r3, r3, #4
 80063f2:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	4a24      	ldr	r2, [pc, #144]	; (800648c <DMA_CalcBaseAndBitshift+0x15c>)
 80063fc:	5cd3      	ldrb	r3, [r2, r3]
 80063fe:	461a      	mov	r2, r3
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2b03      	cmp	r3, #3
 8006408:	d908      	bls.n	800641c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	461a      	mov	r2, r3
 8006410:	4b1f      	ldr	r3, [pc, #124]	; (8006490 <DMA_CalcBaseAndBitshift+0x160>)
 8006412:	4013      	ands	r3, r2
 8006414:	1d1a      	adds	r2, r3, #4
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	659a      	str	r2, [r3, #88]	; 0x58
 800641a:	e00d      	b.n	8006438 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	461a      	mov	r2, r3
 8006422:	4b1b      	ldr	r3, [pc, #108]	; (8006490 <DMA_CalcBaseAndBitshift+0x160>)
 8006424:	4013      	ands	r3, r2
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	6593      	str	r3, [r2, #88]	; 0x58
 800642a:	e005      	b.n	8006438 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800643c:	4618      	mov	r0, r3
 800643e:	3714      	adds	r7, #20
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	40020010 	.word	0x40020010
 800644c:	40020028 	.word	0x40020028
 8006450:	40020040 	.word	0x40020040
 8006454:	40020058 	.word	0x40020058
 8006458:	40020070 	.word	0x40020070
 800645c:	40020088 	.word	0x40020088
 8006460:	400200a0 	.word	0x400200a0
 8006464:	400200b8 	.word	0x400200b8
 8006468:	40020410 	.word	0x40020410
 800646c:	40020428 	.word	0x40020428
 8006470:	40020440 	.word	0x40020440
 8006474:	40020458 	.word	0x40020458
 8006478:	40020470 	.word	0x40020470
 800647c:	40020488 	.word	0x40020488
 8006480:	400204a0 	.word	0x400204a0
 8006484:	400204b8 	.word	0x400204b8
 8006488:	aaaaaaab 	.word	0xaaaaaaab
 800648c:	0800ecc8 	.word	0x0800ecc8
 8006490:	fffffc00 	.word	0xfffffc00

08006494 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006494:	b480      	push	{r7}
 8006496:	b085      	sub	sp, #20
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800649c:	2300      	movs	r3, #0
 800649e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	699b      	ldr	r3, [r3, #24]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d120      	bne.n	80064ea <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064ac:	2b03      	cmp	r3, #3
 80064ae:	d858      	bhi.n	8006562 <DMA_CheckFifoParam+0xce>
 80064b0:	a201      	add	r2, pc, #4	; (adr r2, 80064b8 <DMA_CheckFifoParam+0x24>)
 80064b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064b6:	bf00      	nop
 80064b8:	080064c9 	.word	0x080064c9
 80064bc:	080064db 	.word	0x080064db
 80064c0:	080064c9 	.word	0x080064c9
 80064c4:	08006563 	.word	0x08006563
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d048      	beq.n	8006566 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064d8:	e045      	b.n	8006566 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80064e2:	d142      	bne.n	800656a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80064e4:	2301      	movs	r3, #1
 80064e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80064e8:	e03f      	b.n	800656a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80064f2:	d123      	bne.n	800653c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	d838      	bhi.n	800656e <DMA_CheckFifoParam+0xda>
 80064fc:	a201      	add	r2, pc, #4	; (adr r2, 8006504 <DMA_CheckFifoParam+0x70>)
 80064fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006502:	bf00      	nop
 8006504:	08006515 	.word	0x08006515
 8006508:	0800651b 	.word	0x0800651b
 800650c:	08006515 	.word	0x08006515
 8006510:	0800652d 	.word	0x0800652d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8006514:	2301      	movs	r3, #1
 8006516:	73fb      	strb	r3, [r7, #15]
        break;
 8006518:	e030      	b.n	800657c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006522:	2b00      	cmp	r3, #0
 8006524:	d025      	beq.n	8006572 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800652a:	e022      	b.n	8006572 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006530:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006534:	d11f      	bne.n	8006576 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800653a:	e01c      	b.n	8006576 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006540:	2b02      	cmp	r3, #2
 8006542:	d902      	bls.n	800654a <DMA_CheckFifoParam+0xb6>
 8006544:	2b03      	cmp	r3, #3
 8006546:	d003      	beq.n	8006550 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8006548:	e018      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800654a:	2301      	movs	r3, #1
 800654c:	73fb      	strb	r3, [r7, #15]
        break;
 800654e:	e015      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006554:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006558:	2b00      	cmp	r3, #0
 800655a:	d00e      	beq.n	800657a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	73fb      	strb	r3, [r7, #15]
    break;
 8006560:	e00b      	b.n	800657a <DMA_CheckFifoParam+0xe6>
        break;
 8006562:	bf00      	nop
 8006564:	e00a      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 8006566:	bf00      	nop
 8006568:	e008      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 800656a:	bf00      	nop
 800656c:	e006      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 800656e:	bf00      	nop
 8006570:	e004      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 8006572:	bf00      	nop
 8006574:	e002      	b.n	800657c <DMA_CheckFifoParam+0xe8>
        break;
 8006576:	bf00      	nop
 8006578:	e000      	b.n	800657c <DMA_CheckFifoParam+0xe8>
    break;
 800657a:	bf00      	nop
    }
  }

  return status;
 800657c:	7bfb      	ldrb	r3, [r7, #15]
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006588:	4770      	bx	lr
 800658a:	bf00      	nop

0800658c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	4a38      	ldr	r2, [pc, #224]	; (8006680 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80065a0:	4293      	cmp	r3, r2
 80065a2:	d022      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a36      	ldr	r2, [pc, #216]	; (8006684 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d01d      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4a35      	ldr	r2, [pc, #212]	; (8006688 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d018      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4a33      	ldr	r2, [pc, #204]	; (800668c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d013      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	4a32      	ldr	r2, [pc, #200]	; (8006690 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80065c8:	4293      	cmp	r3, r2
 80065ca:	d00e      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	4a30      	ldr	r2, [pc, #192]	; (8006694 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80065d2:	4293      	cmp	r3, r2
 80065d4:	d009      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2f      	ldr	r2, [pc, #188]	; (8006698 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d004      	beq.n	80065ea <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a2d      	ldr	r2, [pc, #180]	; (800669c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d101      	bne.n	80065ee <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80065ea:	2301      	movs	r3, #1
 80065ec:	e000      	b.n	80065f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80065ee:	2300      	movs	r3, #0
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d01a      	beq.n	800662a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	3b08      	subs	r3, #8
 80065fc:	4a28      	ldr	r2, [pc, #160]	; (80066a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80065fe:	fba2 2303 	umull	r2, r3, r2, r3
 8006602:	091b      	lsrs	r3, r3, #4
 8006604:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4b26      	ldr	r3, [pc, #152]	; (80066a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800660a:	4413      	add	r3, r2
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	4a24      	ldr	r2, [pc, #144]	; (80066a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8006618:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	2201      	movs	r2, #1
 8006622:	409a      	lsls	r2, r3
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8006628:	e024      	b.n	8006674 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	b2db      	uxtb	r3, r3
 8006630:	3b10      	subs	r3, #16
 8006632:	4a1e      	ldr	r2, [pc, #120]	; (80066ac <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	091b      	lsrs	r3, r3, #4
 800663a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800663c:	68bb      	ldr	r3, [r7, #8]
 800663e:	4a1c      	ldr	r2, [pc, #112]	; (80066b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8006640:	4293      	cmp	r3, r2
 8006642:	d806      	bhi.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	4a1b      	ldr	r2, [pc, #108]	; (80066b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d902      	bls.n	8006652 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	3308      	adds	r3, #8
 8006650:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8006652:	68fa      	ldr	r2, [r7, #12]
 8006654:	4b18      	ldr	r3, [pc, #96]	; (80066b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8006656:	4413      	add	r3, r2
 8006658:	009b      	lsls	r3, r3, #2
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	4a16      	ldr	r2, [pc, #88]	; (80066bc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8006664:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 031f 	and.w	r3, r3, #31
 800666c:	2201      	movs	r2, #1
 800666e:	409a      	lsls	r2, r3
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006674:	bf00      	nop
 8006676:	3714      	adds	r7, #20
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr
 8006680:	58025408 	.word	0x58025408
 8006684:	5802541c 	.word	0x5802541c
 8006688:	58025430 	.word	0x58025430
 800668c:	58025444 	.word	0x58025444
 8006690:	58025458 	.word	0x58025458
 8006694:	5802546c 	.word	0x5802546c
 8006698:	58025480 	.word	0x58025480
 800669c:	58025494 	.word	0x58025494
 80066a0:	cccccccd 	.word	0xcccccccd
 80066a4:	16009600 	.word	0x16009600
 80066a8:	58025880 	.word	0x58025880
 80066ac:	aaaaaaab 	.word	0xaaaaaaab
 80066b0:	400204b8 	.word	0x400204b8
 80066b4:	4002040f 	.word	0x4002040f
 80066b8:	10008200 	.word	0x10008200
 80066bc:	40020880 	.word	0x40020880

080066c0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80066c0:	b480      	push	{r7}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d04a      	beq.n	800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d847      	bhi.n	800676c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	4a25      	ldr	r2, [pc, #148]	; (8006778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d022      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	4a24      	ldr	r2, [pc, #144]	; (800677c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d01d      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a22      	ldr	r2, [pc, #136]	; (8006780 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d018      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	4a21      	ldr	r2, [pc, #132]	; (8006784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8006700:	4293      	cmp	r3, r2
 8006702:	d013      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a1f      	ldr	r2, [pc, #124]	; (8006788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d00e      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a1e      	ldr	r2, [pc, #120]	; (800678c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d009      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a1c      	ldr	r2, [pc, #112]	; (8006790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d004      	beq.n	800672c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a1b      	ldr	r2, [pc, #108]	; (8006794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8006728:	4293      	cmp	r3, r2
 800672a:	d101      	bne.n	8006730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800672c:	2301      	movs	r3, #1
 800672e:	e000      	b.n	8006732 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8006730:	2300      	movs	r3, #0
 8006732:	2b00      	cmp	r3, #0
 8006734:	d00a      	beq.n	800674c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8006736:	68fa      	ldr	r2, [r7, #12]
 8006738:	4b17      	ldr	r3, [pc, #92]	; (8006798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	461a      	mov	r2, r3
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8006748:	671a      	str	r2, [r3, #112]	; 0x70
 800674a:	e009      	b.n	8006760 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4b14      	ldr	r3, [pc, #80]	; (80067a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	4a11      	ldr	r2, [pc, #68]	; (80067a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800675e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3b01      	subs	r3, #1
 8006764:	2201      	movs	r2, #1
 8006766:	409a      	lsls	r2, r3
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800676c:	bf00      	nop
 800676e:	3714      	adds	r7, #20
 8006770:	46bd      	mov	sp, r7
 8006772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006776:	4770      	bx	lr
 8006778:	58025408 	.word	0x58025408
 800677c:	5802541c 	.word	0x5802541c
 8006780:	58025430 	.word	0x58025430
 8006784:	58025444 	.word	0x58025444
 8006788:	58025458 	.word	0x58025458
 800678c:	5802546c 	.word	0x5802546c
 8006790:	58025480 	.word	0x58025480
 8006794:	58025494 	.word	0x58025494
 8006798:	1600963f 	.word	0x1600963f
 800679c:	58025940 	.word	0x58025940
 80067a0:	1000823f 	.word	0x1000823f
 80067a4:	40020940 	.word	0x40020940

080067a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d101      	bne.n	80067ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80067b6:	2301      	movs	r3, #1
 80067b8:	e0cf      	b.n	800695a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2223      	movs	r2, #35	; 0x23
 80067c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80067cc:	6878      	ldr	r0, [r7, #4]
 80067ce:	f7fd f89f 	bl	8003910 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067d2:	4b64      	ldr	r3, [pc, #400]	; (8006964 <HAL_ETH_Init+0x1bc>)
 80067d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067d8:	4a62      	ldr	r2, [pc, #392]	; (8006964 <HAL_ETH_Init+0x1bc>)
 80067da:	f043 0302 	orr.w	r3, r3, #2
 80067de:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80067e2:	4b60      	ldr	r3, [pc, #384]	; (8006964 <HAL_ETH_Init+0x1bc>)
 80067e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067e8:	f003 0302 	and.w	r3, r3, #2
 80067ec:	60bb      	str	r3, [r7, #8]
 80067ee:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	7a1b      	ldrb	r3, [r3, #8]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d103      	bne.n	8006800 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80067f8:	2000      	movs	r0, #0
 80067fa:	f7fd fc8b 	bl	8004114 <HAL_SYSCFG_ETHInterfaceSelect>
 80067fe:	e003      	b.n	8006808 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006800:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006804:	f7fd fc86 	bl	8004114 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006808:	4b57      	ldr	r3, [pc, #348]	; (8006968 <HAL_ETH_Init+0x1c0>)
 800680a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6812      	ldr	r2, [r2, #0]
 800681a:	f043 0301 	orr.w	r3, r3, #1
 800681e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006822:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006824:	f7fd fc3a 	bl	800409c <HAL_GetTick>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800682a:	e011      	b.n	8006850 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800682c:	f7fd fc36 	bl	800409c <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800683a:	d909      	bls.n	8006850 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2204      	movs	r2, #4
 8006840:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	22e0      	movs	r2, #224	; 0xe0
 8006848:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800684c:	2301      	movs	r3, #1
 800684e:	e084      	b.n	800695a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	f003 0301 	and.w	r3, r3, #1
 800685e:	2b00      	cmp	r3, #0
 8006860:	d1e4      	bne.n	800682c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 f886 	bl	8006974 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8006868:	f001 fefc 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 800686c:	4603      	mov	r3, r0
 800686e:	4a3f      	ldr	r2, [pc, #252]	; (800696c <HAL_ETH_Init+0x1c4>)
 8006870:	fba2 2303 	umull	r2, r3, r2, r3
 8006874:	0c9a      	lsrs	r2, r3, #18
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3a01      	subs	r2, #1
 800687c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f000 fa71 	bl	8006d68 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800688e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006892:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	6812      	ldr	r2, [r2, #0]
 800689a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800689e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068a2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	f003 0303 	and.w	r3, r3, #3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d009      	beq.n	80068c6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2201      	movs	r2, #1
 80068b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	22e0      	movs	r2, #224	; 0xe0
 80068be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	e049      	b.n	800695a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068ce:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80068d2:	4b27      	ldr	r3, [pc, #156]	; (8006970 <HAL_ETH_Init+0x1c8>)
 80068d4:	4013      	ands	r3, r2
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6952      	ldr	r2, [r2, #20]
 80068da:	0051      	lsls	r1, r2, #1
 80068dc:	687a      	ldr	r2, [r7, #4]
 80068de:	6812      	ldr	r2, [r2, #0]
 80068e0:	430b      	orrs	r3, r1
 80068e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068e6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80068ea:	6878      	ldr	r0, [r7, #4]
 80068ec:	f000 fad9 	bl	8006ea2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80068f0:	6878      	ldr	r0, [r7, #4]
 80068f2:	f000 fb1f 	bl	8006f34 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	3305      	adds	r3, #5
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	021a      	lsls	r2, r3, #8
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	3304      	adds	r3, #4
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	4619      	mov	r1, r3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	430a      	orrs	r2, r1
 8006910:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	3303      	adds	r3, #3
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	061a      	lsls	r2, r3, #24
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685b      	ldr	r3, [r3, #4]
 8006922:	3302      	adds	r3, #2
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	041b      	lsls	r3, r3, #16
 8006928:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	3301      	adds	r3, #1
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006934:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8006942:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006944:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	2210      	movs	r2, #16
 8006954:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006958:	2300      	movs	r3, #0
}
 800695a:	4618      	mov	r0, r3
 800695c:	3710      	adds	r7, #16
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	58024400 	.word	0x58024400
 8006968:	58000400 	.word	0x58000400
 800696c:	431bde83 	.word	0x431bde83
 8006970:	ffff8001 	.word	0xffff8001

08006974 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006984:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800698c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800698e:	f001 fe69 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 8006992:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006994:	68bb      	ldr	r3, [r7, #8]
 8006996:	4a1e      	ldr	r2, [pc, #120]	; (8006a10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d908      	bls.n	80069ae <HAL_ETH_SetMDIOClockRange+0x3a>
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	4a1d      	ldr	r2, [pc, #116]	; (8006a14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80069a0:	4293      	cmp	r3, r2
 80069a2:	d804      	bhi.n	80069ae <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80069aa:	60fb      	str	r3, [r7, #12]
 80069ac:	e027      	b.n	80069fe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	4a18      	ldr	r2, [pc, #96]	; (8006a14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d908      	bls.n	80069c8 <HAL_ETH_SetMDIOClockRange+0x54>
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	4a17      	ldr	r2, [pc, #92]	; (8006a18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d204      	bcs.n	80069c8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80069c4:	60fb      	str	r3, [r7, #12]
 80069c6:	e01a      	b.n	80069fe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	4a13      	ldr	r2, [pc, #76]	; (8006a18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80069cc:	4293      	cmp	r3, r2
 80069ce:	d303      	bcc.n	80069d8 <HAL_ETH_SetMDIOClockRange+0x64>
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	4a12      	ldr	r2, [pc, #72]	; (8006a1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80069d4:	4293      	cmp	r3, r2
 80069d6:	d911      	bls.n	80069fc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	4a10      	ldr	r2, [pc, #64]	; (8006a1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80069dc:	4293      	cmp	r3, r2
 80069de:	d908      	bls.n	80069f2 <HAL_ETH_SetMDIOClockRange+0x7e>
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	4a0f      	ldr	r2, [pc, #60]	; (8006a20 <HAL_ETH_SetMDIOClockRange+0xac>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d804      	bhi.n	80069f2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069ee:	60fb      	str	r3, [r7, #12]
 80069f0:	e005      	b.n	80069fe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069f8:	60fb      	str	r3, [r7, #12]
 80069fa:	e000      	b.n	80069fe <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80069fc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006a08:	bf00      	nop
 8006a0a:	3710      	adds	r7, #16
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	01312cff 	.word	0x01312cff
 8006a14:	02160ebf 	.word	0x02160ebf
 8006a18:	03938700 	.word	0x03938700
 8006a1c:	05f5e0ff 	.word	0x05f5e0ff
 8006a20:	08f0d17f 	.word	0x08f0d17f

08006a24 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006a2e:	683b      	ldr	r3, [r7, #0]
 8006a30:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006a38:	683b      	ldr	r3, [r7, #0]
 8006a3a:	791b      	ldrb	r3, [r3, #4]
 8006a3c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	7b1b      	ldrb	r3, [r3, #12]
 8006a44:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006a46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	7b5b      	ldrb	r3, [r3, #13]
 8006a4c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006a4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	7b9b      	ldrb	r3, [r3, #14]
 8006a54:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006a56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	7bdb      	ldrb	r3, [r3, #15]
 8006a5c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006a5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006a60:	683a      	ldr	r2, [r7, #0]
 8006a62:	7c12      	ldrb	r2, [r2, #16]
 8006a64:	2a00      	cmp	r2, #0
 8006a66:	d102      	bne.n	8006a6e <ETH_SetMACConfig+0x4a>
 8006a68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a6c:	e000      	b.n	8006a70 <ETH_SetMACConfig+0x4c>
 8006a6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006a70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006a72:	683a      	ldr	r2, [r7, #0]
 8006a74:	7c52      	ldrb	r2, [r2, #17]
 8006a76:	2a00      	cmp	r2, #0
 8006a78:	d102      	bne.n	8006a80 <ETH_SetMACConfig+0x5c>
 8006a7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006a7e:	e000      	b.n	8006a82 <ETH_SetMACConfig+0x5e>
 8006a80:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006a82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	7c9b      	ldrb	r3, [r3, #18]
 8006a88:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006a8a:	431a      	orrs	r2, r3
               macconf->Speed |
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006a90:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006a96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006a98:	683b      	ldr	r3, [r7, #0]
 8006a9a:	7f1b      	ldrb	r3, [r3, #28]
 8006a9c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	7f5b      	ldrb	r3, [r3, #29]
 8006aa4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006aa6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006aa8:	683a      	ldr	r2, [r7, #0]
 8006aaa:	7f92      	ldrb	r2, [r2, #30]
 8006aac:	2a00      	cmp	r2, #0
 8006aae:	d102      	bne.n	8006ab6 <ETH_SetMACConfig+0x92>
 8006ab0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006ab4:	e000      	b.n	8006ab8 <ETH_SetMACConfig+0x94>
 8006ab6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006ab8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	7fdb      	ldrb	r3, [r3, #31]
 8006abe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006ac0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006ac2:	683a      	ldr	r2, [r7, #0]
 8006ac4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006ac8:	2a00      	cmp	r2, #0
 8006aca:	d102      	bne.n	8006ad2 <ETH_SetMACConfig+0xae>
 8006acc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006ad0:	e000      	b.n	8006ad4 <ETH_SetMACConfig+0xb0>
 8006ad2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006ad4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006ada:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ae2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006ae4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006ae6:	683b      	ldr	r3, [r7, #0]
 8006ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006aea:	4313      	orrs	r3, r2
 8006aec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	681a      	ldr	r2, [r3, #0]
 8006af4:	4b56      	ldr	r3, [pc, #344]	; (8006c50 <ETH_SetMACConfig+0x22c>)
 8006af6:	4013      	ands	r3, r2
 8006af8:	687a      	ldr	r2, [r7, #4]
 8006afa:	6812      	ldr	r2, [r2, #0]
 8006afc:	68f9      	ldr	r1, [r7, #12]
 8006afe:	430b      	orrs	r3, r1
 8006b00:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b06:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b0e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006b10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006b18:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8006b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8006b22:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8006b24:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8006b26:	683a      	ldr	r2, [r7, #0]
 8006b28:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8006b2c:	2a00      	cmp	r2, #0
 8006b2e:	d102      	bne.n	8006b36 <ETH_SetMACConfig+0x112>
 8006b30:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006b34:	e000      	b.n	8006b38 <ETH_SetMACConfig+0x114>
 8006b36:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8006b38:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8006b3e:	4313      	orrs	r3, r2
 8006b40:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	4b42      	ldr	r3, [pc, #264]	; (8006c54 <ETH_SetMACConfig+0x230>)
 8006b4a:	4013      	ands	r3, r2
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	6812      	ldr	r2, [r2, #0]
 8006b50:	68f9      	ldr	r1, [r7, #12]
 8006b52:	430b      	orrs	r3, r1
 8006b54:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b5c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8006b62:	4313      	orrs	r3, r2
 8006b64:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	68da      	ldr	r2, [r3, #12]
 8006b6c:	4b3a      	ldr	r3, [pc, #232]	; (8006c58 <ETH_SetMACConfig+0x234>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	6812      	ldr	r2, [r2, #0]
 8006b74:	68f9      	ldr	r1, [r7, #12]
 8006b76:	430b      	orrs	r3, r1
 8006b78:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8006b80:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006b86:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8006b88:	683a      	ldr	r2, [r7, #0]
 8006b8a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8006b8e:	2a00      	cmp	r2, #0
 8006b90:	d101      	bne.n	8006b96 <ETH_SetMACConfig+0x172>
 8006b92:	2280      	movs	r2, #128	; 0x80
 8006b94:	e000      	b.n	8006b98 <ETH_SetMACConfig+0x174>
 8006b96:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8006b98:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b9e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006baa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8006bae:	4013      	ands	r3, r2
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	6812      	ldr	r2, [r2, #0]
 8006bb4:	68f9      	ldr	r1, [r7, #12]
 8006bb6:	430b      	orrs	r3, r1
 8006bb8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8006bc0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8006bc2:	683b      	ldr	r3, [r7, #0]
 8006bc4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8006bc8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bd6:	f023 0103 	bic.w	r1, r3, #3
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	68fa      	ldr	r2, [r7, #12]
 8006be0:	430a      	orrs	r2, r1
 8006be2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006bee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8006c0a:	2a00      	cmp	r2, #0
 8006c0c:	d101      	bne.n	8006c12 <ETH_SetMACConfig+0x1ee>
 8006c0e:	2240      	movs	r2, #64	; 0x40
 8006c10:	e000      	b.n	8006c14 <ETH_SetMACConfig+0x1f0>
 8006c12:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8006c14:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8006c1c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8006c1e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8006c26:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006c34:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68fa      	ldr	r2, [r7, #12]
 8006c3e:	430a      	orrs	r2, r1
 8006c40:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8006c44:	bf00      	nop
 8006c46:	3714      	adds	r7, #20
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	00048083 	.word	0x00048083
 8006c54:	c0f88000 	.word	0xc0f88000
 8006c58:	fffffef0 	.word	0xfffffef0

08006c5c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b085      	sub	sp, #20
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	4b38      	ldr	r3, [pc, #224]	; (8006d54 <ETH_SetDMAConfig+0xf8>)
 8006c72:	4013      	ands	r3, r2
 8006c74:	683a      	ldr	r2, [r7, #0]
 8006c76:	6811      	ldr	r1, [r2, #0]
 8006c78:	687a      	ldr	r2, [r7, #4]
 8006c7a:	6812      	ldr	r2, [r2, #0]
 8006c7c:	430b      	orrs	r3, r1
 8006c7e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006c82:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	791b      	ldrb	r3, [r3, #4]
 8006c88:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006c8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	7b1b      	ldrb	r3, [r3, #12]
 8006c94:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8006c96:	4313      	orrs	r3, r2
 8006c98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	4b2c      	ldr	r3, [pc, #176]	; (8006d58 <ETH_SetDMAConfig+0xfc>)
 8006ca6:	4013      	ands	r3, r2
 8006ca8:	687a      	ldr	r2, [r7, #4]
 8006caa:	6812      	ldr	r2, [r2, #0]
 8006cac:	68f9      	ldr	r1, [r7, #12]
 8006cae:	430b      	orrs	r3, r1
 8006cb0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006cb4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006cb6:	683b      	ldr	r3, [r7, #0]
 8006cb8:	7b5b      	ldrb	r3, [r3, #13]
 8006cba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ccc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8006cd0:	4b22      	ldr	r3, [pc, #136]	; (8006d5c <ETH_SetDMAConfig+0x100>)
 8006cd2:	4013      	ands	r3, r2
 8006cd4:	687a      	ldr	r2, [r7, #4]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	68f9      	ldr	r1, [r7, #12]
 8006cda:	430b      	orrs	r3, r1
 8006cdc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006ce0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	7d1b      	ldrb	r3, [r3, #20]
 8006cec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8006cee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	7f5b      	ldrb	r3, [r3, #29]
 8006cf4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d02:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8006d06:	4b16      	ldr	r3, [pc, #88]	; (8006d60 <ETH_SetDMAConfig+0x104>)
 8006d08:	4013      	ands	r3, r2
 8006d0a:	687a      	ldr	r2, [r7, #4]
 8006d0c:	6812      	ldr	r2, [r2, #0]
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	430b      	orrs	r3, r1
 8006d12:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d16:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006d1a:	683b      	ldr	r3, [r7, #0]
 8006d1c:	7f1b      	ldrb	r3, [r3, #28]
 8006d1e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d30:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006d34:	4b0b      	ldr	r3, [pc, #44]	; (8006d64 <ETH_SetDMAConfig+0x108>)
 8006d36:	4013      	ands	r3, r2
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6812      	ldr	r2, [r2, #0]
 8006d3c:	68f9      	ldr	r1, [r7, #12]
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006d44:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8006d48:	bf00      	nop
 8006d4a:	3714      	adds	r7, #20
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d52:	4770      	bx	lr
 8006d54:	ffff87fd 	.word	0xffff87fd
 8006d58:	ffff2ffe 	.word	0xffff2ffe
 8006d5c:	fffec000 	.word	0xfffec000
 8006d60:	ffc0efef 	.word	0xffc0efef
 8006d64:	7fc0ffff 	.word	0x7fc0ffff

08006d68 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b0a4      	sub	sp, #144	; 0x90
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8006d70:	2301      	movs	r3, #1
 8006d72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8006d76:	2300      	movs	r3, #0
 8006d78:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8006d80:	2300      	movs	r3, #0
 8006d82:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8006d86:	2301      	movs	r3, #1
 8006d88:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8006d92:	2301      	movs	r3, #1
 8006d94:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8006d98:	2300      	movs	r3, #0
 8006d9a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8006da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006da8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8006daa:	2300      	movs	r3, #0
 8006dac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8006db0:	2300      	movs	r3, #0
 8006db2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8006db4:	2300      	movs	r3, #0
 8006db6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8006dc0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8006dc4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8006dc6:	2300      	movs	r3, #0
 8006dc8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8006dd0:	2301      	movs	r3, #1
 8006dd2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8006ddc:	2300      	movs	r3, #0
 8006dde:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8006de2:	2300      	movs	r3, #0
 8006de4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8006de6:	2300      	movs	r3, #0
 8006de8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8006dea:	2300      	movs	r3, #0
 8006dec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8006dee:	2300      	movs	r3, #0
 8006df0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8006df4:	2300      	movs	r3, #0
 8006df6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8006e00:	2320      	movs	r3, #32
 8006e02:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8006e06:	2301      	movs	r3, #1
 8006e08:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8006e12:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8006e16:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8006e18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006e1c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8006e1e:	2300      	movs	r3, #0
 8006e20:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8006e24:	2302      	movs	r3, #2
 8006e26:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8006e30:	2300      	movs	r3, #0
 8006e32:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8006e36:	2300      	movs	r3, #0
 8006e38:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8006e3c:	2301      	movs	r3, #1
 8006e3e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8006e42:	2300      	movs	r3, #0
 8006e44:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8006e46:	2301      	movs	r3, #1
 8006e48:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8006e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e50:	4619      	mov	r1, r3
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f7ff fde6 	bl	8006a24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8006e58:	2301      	movs	r3, #1
 8006e5a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8006e60:	2300      	movs	r3, #0
 8006e62:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8006e64:	2300      	movs	r3, #0
 8006e66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8006e72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e76:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8006e7c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006e80:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8006e82:	2300      	movs	r3, #0
 8006e84:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8006e88:	f44f 7306 	mov.w	r3, #536	; 0x218
 8006e8c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8006e8e:	f107 0308 	add.w	r3, r7, #8
 8006e92:	4619      	mov	r1, r3
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f7ff fee1 	bl	8006c5c <ETH_SetDMAConfig>
}
 8006e9a:	bf00      	nop
 8006e9c:	3790      	adds	r7, #144	; 0x90
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8006ea2:	b480      	push	{r7}
 8006ea4:	b085      	sub	sp, #20
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60fb      	str	r3, [r7, #12]
 8006eae:	e01d      	b.n	8006eec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	68d9      	ldr	r1, [r3, #12]
 8006eb4:	68fa      	ldr	r2, [r7, #12]
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	005b      	lsls	r3, r3, #1
 8006eba:	4413      	add	r3, r2
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	440b      	add	r3, r1
 8006ec0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	2200      	movs	r2, #0
 8006ecc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8006eda:	68b9      	ldr	r1, [r7, #8]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	3206      	adds	r2, #6
 8006ee2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3301      	adds	r3, #1
 8006eea:	60fb      	str	r3, [r7, #12]
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b03      	cmp	r3, #3
 8006ef0:	d9de      	bls.n	8006eb0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f00:	461a      	mov	r2, r3
 8006f02:	2303      	movs	r3, #3
 8006f04:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	68da      	ldr	r2, [r3, #12]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f14:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	68da      	ldr	r2, [r3, #12]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006f24:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8006f28:	bf00      	nop
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b085      	sub	sp, #20
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	60fb      	str	r3, [r7, #12]
 8006f40:	e023      	b.n	8006f8a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	6919      	ldr	r1, [r3, #16]
 8006f46:	68fa      	ldr	r2, [r7, #12]
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	00db      	lsls	r3, r3, #3
 8006f50:	440b      	add	r3, r1
 8006f52:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2200      	movs	r2, #0
 8006f5e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006f6c:	68bb      	ldr	r3, [r7, #8]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006f72:	68bb      	ldr	r3, [r7, #8]
 8006f74:	2200      	movs	r2, #0
 8006f76:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006f78:	68b9      	ldr	r1, [r7, #8]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	68fa      	ldr	r2, [r7, #12]
 8006f7e:	3212      	adds	r2, #18
 8006f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	d9d8      	bls.n	8006f42 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2200      	movs	r2, #0
 8006fac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	2303      	movs	r3, #3
 8006fba:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691a      	ldr	r2, [r3, #16]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006fde:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006fe2:	bf00      	nop
 8006fe4:	3714      	adds	r7, #20
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr
	...

08006ff0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b089      	sub	sp, #36	; 0x24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
 8006ff8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006ffe:	4b89      	ldr	r3, [pc, #548]	; (8007224 <HAL_GPIO_Init+0x234>)
 8007000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007002:	e194      	b.n	800732e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	681a      	ldr	r2, [r3, #0]
 8007008:	2101      	movs	r1, #1
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	4013      	ands	r3, r2
 8007012:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b00      	cmp	r3, #0
 8007018:	f000 8186 	beq.w	8007328 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	f003 0303 	and.w	r3, r3, #3
 8007024:	2b01      	cmp	r3, #1
 8007026:	d005      	beq.n	8007034 <HAL_GPIO_Init+0x44>
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	685b      	ldr	r3, [r3, #4]
 800702c:	f003 0303 	and.w	r3, r3, #3
 8007030:	2b02      	cmp	r3, #2
 8007032:	d130      	bne.n	8007096 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800703a:	69fb      	ldr	r3, [r7, #28]
 800703c:	005b      	lsls	r3, r3, #1
 800703e:	2203      	movs	r2, #3
 8007040:	fa02 f303 	lsl.w	r3, r2, r3
 8007044:	43db      	mvns	r3, r3
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	4013      	ands	r3, r2
 800704a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800704c:	683b      	ldr	r3, [r7, #0]
 800704e:	68da      	ldr	r2, [r3, #12]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	005b      	lsls	r3, r3, #1
 8007054:	fa02 f303 	lsl.w	r3, r2, r3
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	4313      	orrs	r3, r2
 800705c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800706a:	2201      	movs	r2, #1
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	fa02 f303 	lsl.w	r3, r2, r3
 8007072:	43db      	mvns	r3, r3
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	4013      	ands	r3, r2
 8007078:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	685b      	ldr	r3, [r3, #4]
 800707e:	091b      	lsrs	r3, r3, #4
 8007080:	f003 0201 	and.w	r2, r3, #1
 8007084:	69fb      	ldr	r3, [r7, #28]
 8007086:	fa02 f303 	lsl.w	r3, r2, r3
 800708a:	69ba      	ldr	r2, [r7, #24]
 800708c:	4313      	orrs	r3, r2
 800708e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	69ba      	ldr	r2, [r7, #24]
 8007094:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	685b      	ldr	r3, [r3, #4]
 800709a:	f003 0303 	and.w	r3, r3, #3
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d017      	beq.n	80070d2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	68db      	ldr	r3, [r3, #12]
 80070a6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80070a8:	69fb      	ldr	r3, [r7, #28]
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	2203      	movs	r2, #3
 80070ae:	fa02 f303 	lsl.w	r3, r2, r3
 80070b2:	43db      	mvns	r3, r3
 80070b4:	69ba      	ldr	r2, [r7, #24]
 80070b6:	4013      	ands	r3, r2
 80070b8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	689a      	ldr	r2, [r3, #8]
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	005b      	lsls	r3, r3, #1
 80070c2:	fa02 f303 	lsl.w	r3, r2, r3
 80070c6:	69ba      	ldr	r2, [r7, #24]
 80070c8:	4313      	orrs	r3, r2
 80070ca:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	f003 0303 	and.w	r3, r3, #3
 80070da:	2b02      	cmp	r3, #2
 80070dc:	d123      	bne.n	8007126 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80070de:	69fb      	ldr	r3, [r7, #28]
 80070e0:	08da      	lsrs	r2, r3, #3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	3208      	adds	r2, #8
 80070e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80070ec:	69fb      	ldr	r3, [r7, #28]
 80070ee:	f003 0307 	and.w	r3, r3, #7
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	220f      	movs	r2, #15
 80070f6:	fa02 f303 	lsl.w	r3, r2, r3
 80070fa:	43db      	mvns	r3, r3
 80070fc:	69ba      	ldr	r2, [r7, #24]
 80070fe:	4013      	ands	r3, r2
 8007100:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	691a      	ldr	r2, [r3, #16]
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	f003 0307 	and.w	r3, r3, #7
 800710c:	009b      	lsls	r3, r3, #2
 800710e:	fa02 f303 	lsl.w	r3, r2, r3
 8007112:	69ba      	ldr	r2, [r7, #24]
 8007114:	4313      	orrs	r3, r2
 8007116:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007118:	69fb      	ldr	r3, [r7, #28]
 800711a:	08da      	lsrs	r2, r3, #3
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	3208      	adds	r2, #8
 8007120:	69b9      	ldr	r1, [r7, #24]
 8007122:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	2203      	movs	r2, #3
 8007132:	fa02 f303 	lsl.w	r3, r2, r3
 8007136:	43db      	mvns	r3, r3
 8007138:	69ba      	ldr	r2, [r7, #24]
 800713a:	4013      	ands	r3, r2
 800713c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f003 0203 	and.w	r2, r3, #3
 8007146:	69fb      	ldr	r3, [r7, #28]
 8007148:	005b      	lsls	r3, r3, #1
 800714a:	fa02 f303 	lsl.w	r3, r2, r3
 800714e:	69ba      	ldr	r2, [r7, #24]
 8007150:	4313      	orrs	r3, r2
 8007152:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	69ba      	ldr	r2, [r7, #24]
 8007158:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	685b      	ldr	r3, [r3, #4]
 800715e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007162:	2b00      	cmp	r3, #0
 8007164:	f000 80e0 	beq.w	8007328 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007168:	4b2f      	ldr	r3, [pc, #188]	; (8007228 <HAL_GPIO_Init+0x238>)
 800716a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800716e:	4a2e      	ldr	r2, [pc, #184]	; (8007228 <HAL_GPIO_Init+0x238>)
 8007170:	f043 0302 	orr.w	r3, r3, #2
 8007174:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007178:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_GPIO_Init+0x238>)
 800717a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800717e:	f003 0302 	and.w	r3, r3, #2
 8007182:	60fb      	str	r3, [r7, #12]
 8007184:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007186:	4a29      	ldr	r2, [pc, #164]	; (800722c <HAL_GPIO_Init+0x23c>)
 8007188:	69fb      	ldr	r3, [r7, #28]
 800718a:	089b      	lsrs	r3, r3, #2
 800718c:	3302      	adds	r3, #2
 800718e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007192:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007194:	69fb      	ldr	r3, [r7, #28]
 8007196:	f003 0303 	and.w	r3, r3, #3
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	220f      	movs	r2, #15
 800719e:	fa02 f303 	lsl.w	r3, r2, r3
 80071a2:	43db      	mvns	r3, r3
 80071a4:	69ba      	ldr	r2, [r7, #24]
 80071a6:	4013      	ands	r3, r2
 80071a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a20      	ldr	r2, [pc, #128]	; (8007230 <HAL_GPIO_Init+0x240>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d052      	beq.n	8007258 <HAL_GPIO_Init+0x268>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	4a1f      	ldr	r2, [pc, #124]	; (8007234 <HAL_GPIO_Init+0x244>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d031      	beq.n	800721e <HAL_GPIO_Init+0x22e>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	4a1e      	ldr	r2, [pc, #120]	; (8007238 <HAL_GPIO_Init+0x248>)
 80071be:	4293      	cmp	r3, r2
 80071c0:	d02b      	beq.n	800721a <HAL_GPIO_Init+0x22a>
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	4a1d      	ldr	r2, [pc, #116]	; (800723c <HAL_GPIO_Init+0x24c>)
 80071c6:	4293      	cmp	r3, r2
 80071c8:	d025      	beq.n	8007216 <HAL_GPIO_Init+0x226>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a1c      	ldr	r2, [pc, #112]	; (8007240 <HAL_GPIO_Init+0x250>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d01f      	beq.n	8007212 <HAL_GPIO_Init+0x222>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a1b      	ldr	r2, [pc, #108]	; (8007244 <HAL_GPIO_Init+0x254>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d019      	beq.n	800720e <HAL_GPIO_Init+0x21e>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a1a      	ldr	r2, [pc, #104]	; (8007248 <HAL_GPIO_Init+0x258>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d013      	beq.n	800720a <HAL_GPIO_Init+0x21a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a19      	ldr	r2, [pc, #100]	; (800724c <HAL_GPIO_Init+0x25c>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d00d      	beq.n	8007206 <HAL_GPIO_Init+0x216>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a18      	ldr	r2, [pc, #96]	; (8007250 <HAL_GPIO_Init+0x260>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d007      	beq.n	8007202 <HAL_GPIO_Init+0x212>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a17      	ldr	r2, [pc, #92]	; (8007254 <HAL_GPIO_Init+0x264>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d101      	bne.n	80071fe <HAL_GPIO_Init+0x20e>
 80071fa:	2309      	movs	r3, #9
 80071fc:	e02d      	b.n	800725a <HAL_GPIO_Init+0x26a>
 80071fe:	230a      	movs	r3, #10
 8007200:	e02b      	b.n	800725a <HAL_GPIO_Init+0x26a>
 8007202:	2308      	movs	r3, #8
 8007204:	e029      	b.n	800725a <HAL_GPIO_Init+0x26a>
 8007206:	2307      	movs	r3, #7
 8007208:	e027      	b.n	800725a <HAL_GPIO_Init+0x26a>
 800720a:	2306      	movs	r3, #6
 800720c:	e025      	b.n	800725a <HAL_GPIO_Init+0x26a>
 800720e:	2305      	movs	r3, #5
 8007210:	e023      	b.n	800725a <HAL_GPIO_Init+0x26a>
 8007212:	2304      	movs	r3, #4
 8007214:	e021      	b.n	800725a <HAL_GPIO_Init+0x26a>
 8007216:	2303      	movs	r3, #3
 8007218:	e01f      	b.n	800725a <HAL_GPIO_Init+0x26a>
 800721a:	2302      	movs	r3, #2
 800721c:	e01d      	b.n	800725a <HAL_GPIO_Init+0x26a>
 800721e:	2301      	movs	r3, #1
 8007220:	e01b      	b.n	800725a <HAL_GPIO_Init+0x26a>
 8007222:	bf00      	nop
 8007224:	58000080 	.word	0x58000080
 8007228:	58024400 	.word	0x58024400
 800722c:	58000400 	.word	0x58000400
 8007230:	58020000 	.word	0x58020000
 8007234:	58020400 	.word	0x58020400
 8007238:	58020800 	.word	0x58020800
 800723c:	58020c00 	.word	0x58020c00
 8007240:	58021000 	.word	0x58021000
 8007244:	58021400 	.word	0x58021400
 8007248:	58021800 	.word	0x58021800
 800724c:	58021c00 	.word	0x58021c00
 8007250:	58022000 	.word	0x58022000
 8007254:	58022400 	.word	0x58022400
 8007258:	2300      	movs	r3, #0
 800725a:	69fa      	ldr	r2, [r7, #28]
 800725c:	f002 0203 	and.w	r2, r2, #3
 8007260:	0092      	lsls	r2, r2, #2
 8007262:	4093      	lsls	r3, r2
 8007264:	69ba      	ldr	r2, [r7, #24]
 8007266:	4313      	orrs	r3, r2
 8007268:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800726a:	4938      	ldr	r1, [pc, #224]	; (800734c <HAL_GPIO_Init+0x35c>)
 800726c:	69fb      	ldr	r3, [r7, #28]
 800726e:	089b      	lsrs	r3, r3, #2
 8007270:	3302      	adds	r3, #2
 8007272:	69ba      	ldr	r2, [r7, #24]
 8007274:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007278:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	43db      	mvns	r3, r3
 8007284:	69ba      	ldr	r2, [r7, #24]
 8007286:	4013      	ands	r3, r2
 8007288:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800728a:	683b      	ldr	r3, [r7, #0]
 800728c:	685b      	ldr	r3, [r3, #4]
 800728e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007292:	2b00      	cmp	r3, #0
 8007294:	d003      	beq.n	800729e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007296:	69ba      	ldr	r2, [r7, #24]
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	4313      	orrs	r3, r2
 800729c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800729e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072a2:	69bb      	ldr	r3, [r7, #24]
 80072a4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80072a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	43db      	mvns	r3, r3
 80072b2:	69ba      	ldr	r2, [r7, #24]
 80072b4:	4013      	ands	r3, r2
 80072b6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80072c4:	69ba      	ldr	r2, [r7, #24]
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	4313      	orrs	r3, r2
 80072ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80072cc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80072d0:	69bb      	ldr	r3, [r7, #24]
 80072d2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	43db      	mvns	r3, r3
 80072de:	69ba      	ldr	r2, [r7, #24]
 80072e0:	4013      	ands	r3, r2
 80072e2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	685b      	ldr	r3, [r3, #4]
 80072e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d003      	beq.n	80072f8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80072f0:	69ba      	ldr	r2, [r7, #24]
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	4313      	orrs	r3, r2
 80072f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80072f8:	697b      	ldr	r3, [r7, #20]
 80072fa:	69ba      	ldr	r2, [r7, #24]
 80072fc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007304:	693b      	ldr	r3, [r7, #16]
 8007306:	43db      	mvns	r3, r3
 8007308:	69ba      	ldr	r2, [r7, #24]
 800730a:	4013      	ands	r3, r2
 800730c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007316:	2b00      	cmp	r3, #0
 8007318:	d003      	beq.n	8007322 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800731a:	69ba      	ldr	r2, [r7, #24]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4313      	orrs	r3, r2
 8007320:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007322:	697b      	ldr	r3, [r7, #20]
 8007324:	69ba      	ldr	r2, [r7, #24]
 8007326:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007328:	69fb      	ldr	r3, [r7, #28]
 800732a:	3301      	adds	r3, #1
 800732c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	69fb      	ldr	r3, [r7, #28]
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
 8007338:	2b00      	cmp	r3, #0
 800733a:	f47f ae63 	bne.w	8007004 <HAL_GPIO_Init+0x14>
  }
}
 800733e:	bf00      	nop
 8007340:	bf00      	nop
 8007342:	3724      	adds	r7, #36	; 0x24
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr
 800734c:	58000400 	.word	0x58000400

08007350 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007350:	b480      	push	{r7}
 8007352:	b085      	sub	sp, #20
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	691a      	ldr	r2, [r3, #16]
 8007360:	887b      	ldrh	r3, [r7, #2]
 8007362:	4013      	ands	r3, r2
 8007364:	2b00      	cmp	r3, #0
 8007366:	d002      	beq.n	800736e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007368:	2301      	movs	r3, #1
 800736a:	73fb      	strb	r3, [r7, #15]
 800736c:	e001      	b.n	8007372 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800736e:	2300      	movs	r3, #0
 8007370:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007372:	7bfb      	ldrb	r3, [r7, #15]
}
 8007374:	4618      	mov	r0, r3
 8007376:	3714      	adds	r7, #20
 8007378:	46bd      	mov	sp, r7
 800737a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737e:	4770      	bx	lr

08007380 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007380:	b480      	push	{r7}
 8007382:	b083      	sub	sp, #12
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
 8007388:	460b      	mov	r3, r1
 800738a:	807b      	strh	r3, [r7, #2]
 800738c:	4613      	mov	r3, r2
 800738e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007390:	787b      	ldrb	r3, [r7, #1]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d003      	beq.n	800739e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007396:	887a      	ldrh	r2, [r7, #2]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800739c:	e003      	b.n	80073a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800739e:	887b      	ldrh	r3, [r7, #2]
 80073a0:	041a      	lsls	r2, r3, #16
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	619a      	str	r2, [r3, #24]
}
 80073a6:	bf00      	nop
 80073a8:	370c      	adds	r7, #12
 80073aa:	46bd      	mov	sp, r7
 80073ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b0:	4770      	bx	lr

080073b2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80073b2:	b480      	push	{r7}
 80073b4:	b085      	sub	sp, #20
 80073b6:	af00      	add	r7, sp, #0
 80073b8:	6078      	str	r0, [r7, #4]
 80073ba:	460b      	mov	r3, r1
 80073bc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	695b      	ldr	r3, [r3, #20]
 80073c2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80073c4:	887a      	ldrh	r2, [r7, #2]
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	4013      	ands	r3, r2
 80073ca:	041a      	lsls	r2, r3, #16
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	43d9      	mvns	r1, r3
 80073d0:	887b      	ldrh	r3, [r7, #2]
 80073d2:	400b      	ands	r3, r1
 80073d4:	431a      	orrs	r2, r3
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	619a      	str	r2, [r3, #24]
}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
	...

080073e8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b083      	sub	sp, #12
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80073f0:	4a08      	ldr	r2, [pc, #32]	; (8007414 <HAL_HSEM_FastTake+0x2c>)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	3320      	adds	r3, #32
 80073f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80073fa:	4a07      	ldr	r2, [pc, #28]	; (8007418 <HAL_HSEM_FastTake+0x30>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d101      	bne.n	8007404 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	e000      	b.n	8007406 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007404:	2301      	movs	r3, #1
}
 8007406:	4618      	mov	r0, r3
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	58026400 	.word	0x58026400
 8007418:	80000300 	.word	0x80000300

0800741c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007426:	4906      	ldr	r1, [pc, #24]	; (8007440 <HAL_HSEM_Release+0x24>)
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007434:	bf00      	nop
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743e:	4770      	bx	lr
 8007440:	58026400 	.word	0x58026400

08007444 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8007444:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007446:	b08f      	sub	sp, #60	; 0x3c
 8007448:	af0a      	add	r7, sp, #40	; 0x28
 800744a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d101      	bne.n	8007456 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8007452:	2301      	movs	r3, #1
 8007454:	e116      	b.n	8007684 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8007462:	b2db      	uxtb	r3, r3
 8007464:	2b00      	cmp	r3, #0
 8007466:	d106      	bne.n	8007476 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fc fc81 	bl	8003d78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2203      	movs	r2, #3
 800747a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007486:	2b00      	cmp	r3, #0
 8007488:	d102      	bne.n	8007490 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f005 f977 	bl	800c788 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	603b      	str	r3, [r7, #0]
 80074a0:	687e      	ldr	r6, [r7, #4]
 80074a2:	466d      	mov	r5, sp
 80074a4:	f106 0410 	add.w	r4, r6, #16
 80074a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80074ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80074b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80074b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80074b8:	1d33      	adds	r3, r6, #4
 80074ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80074bc:	6838      	ldr	r0, [r7, #0]
 80074be:	f005 f8f5 	bl	800c6ac <USB_CoreInit>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	2202      	movs	r2, #2
 80074cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
 80074d2:	e0d7      	b.n	8007684 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	2100      	movs	r1, #0
 80074da:	4618      	mov	r0, r3
 80074dc:	f005 f965 	bl	800c7aa <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	73fb      	strb	r3, [r7, #15]
 80074e4:	e04a      	b.n	800757c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80074e6:	7bfa      	ldrb	r2, [r7, #15]
 80074e8:	6879      	ldr	r1, [r7, #4]
 80074ea:	4613      	mov	r3, r2
 80074ec:	00db      	lsls	r3, r3, #3
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	333d      	adds	r3, #61	; 0x3d
 80074f6:	2201      	movs	r2, #1
 80074f8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80074fa:	7bfa      	ldrb	r2, [r7, #15]
 80074fc:	6879      	ldr	r1, [r7, #4]
 80074fe:	4613      	mov	r3, r2
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	4413      	add	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	440b      	add	r3, r1
 8007508:	333c      	adds	r3, #60	; 0x3c
 800750a:	7bfa      	ldrb	r2, [r7, #15]
 800750c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800750e:	7bfa      	ldrb	r2, [r7, #15]
 8007510:	7bfb      	ldrb	r3, [r7, #15]
 8007512:	b298      	uxth	r0, r3
 8007514:	6879      	ldr	r1, [r7, #4]
 8007516:	4613      	mov	r3, r2
 8007518:	00db      	lsls	r3, r3, #3
 800751a:	4413      	add	r3, r2
 800751c:	009b      	lsls	r3, r3, #2
 800751e:	440b      	add	r3, r1
 8007520:	3344      	adds	r3, #68	; 0x44
 8007522:	4602      	mov	r2, r0
 8007524:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8007526:	7bfa      	ldrb	r2, [r7, #15]
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	4413      	add	r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	3340      	adds	r3, #64	; 0x40
 8007536:	2200      	movs	r2, #0
 8007538:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800753a:	7bfa      	ldrb	r2, [r7, #15]
 800753c:	6879      	ldr	r1, [r7, #4]
 800753e:	4613      	mov	r3, r2
 8007540:	00db      	lsls	r3, r3, #3
 8007542:	4413      	add	r3, r2
 8007544:	009b      	lsls	r3, r3, #2
 8007546:	440b      	add	r3, r1
 8007548:	3348      	adds	r3, #72	; 0x48
 800754a:	2200      	movs	r2, #0
 800754c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800754e:	7bfa      	ldrb	r2, [r7, #15]
 8007550:	6879      	ldr	r1, [r7, #4]
 8007552:	4613      	mov	r3, r2
 8007554:	00db      	lsls	r3, r3, #3
 8007556:	4413      	add	r3, r2
 8007558:	009b      	lsls	r3, r3, #2
 800755a:	440b      	add	r3, r1
 800755c:	334c      	adds	r3, #76	; 0x4c
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8007562:	7bfa      	ldrb	r2, [r7, #15]
 8007564:	6879      	ldr	r1, [r7, #4]
 8007566:	4613      	mov	r3, r2
 8007568:	00db      	lsls	r3, r3, #3
 800756a:	4413      	add	r3, r2
 800756c:	009b      	lsls	r3, r3, #2
 800756e:	440b      	add	r3, r1
 8007570:	3354      	adds	r3, #84	; 0x54
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007576:	7bfb      	ldrb	r3, [r7, #15]
 8007578:	3301      	adds	r3, #1
 800757a:	73fb      	strb	r3, [r7, #15]
 800757c:	7bfa      	ldrb	r2, [r7, #15]
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d3af      	bcc.n	80074e6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007586:	2300      	movs	r3, #0
 8007588:	73fb      	strb	r3, [r7, #15]
 800758a:	e044      	b.n	8007616 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800758c:	7bfa      	ldrb	r2, [r7, #15]
 800758e:	6879      	ldr	r1, [r7, #4]
 8007590:	4613      	mov	r3, r2
 8007592:	00db      	lsls	r3, r3, #3
 8007594:	4413      	add	r3, r2
 8007596:	009b      	lsls	r3, r3, #2
 8007598:	440b      	add	r3, r1
 800759a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800759e:	2200      	movs	r2, #0
 80075a0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80075a2:	7bfa      	ldrb	r2, [r7, #15]
 80075a4:	6879      	ldr	r1, [r7, #4]
 80075a6:	4613      	mov	r3, r2
 80075a8:	00db      	lsls	r3, r3, #3
 80075aa:	4413      	add	r3, r2
 80075ac:	009b      	lsls	r3, r3, #2
 80075ae:	440b      	add	r3, r1
 80075b0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80075b4:	7bfa      	ldrb	r2, [r7, #15]
 80075b6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80075b8:	7bfa      	ldrb	r2, [r7, #15]
 80075ba:	6879      	ldr	r1, [r7, #4]
 80075bc:	4613      	mov	r3, r2
 80075be:	00db      	lsls	r3, r3, #3
 80075c0:	4413      	add	r3, r2
 80075c2:	009b      	lsls	r3, r3, #2
 80075c4:	440b      	add	r3, r1
 80075c6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80075ce:	7bfa      	ldrb	r2, [r7, #15]
 80075d0:	6879      	ldr	r1, [r7, #4]
 80075d2:	4613      	mov	r3, r2
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	4413      	add	r3, r2
 80075d8:	009b      	lsls	r3, r3, #2
 80075da:	440b      	add	r3, r1
 80075dc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80075e0:	2200      	movs	r2, #0
 80075e2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80075e4:	7bfa      	ldrb	r2, [r7, #15]
 80075e6:	6879      	ldr	r1, [r7, #4]
 80075e8:	4613      	mov	r3, r2
 80075ea:	00db      	lsls	r3, r3, #3
 80075ec:	4413      	add	r3, r2
 80075ee:	009b      	lsls	r3, r3, #2
 80075f0:	440b      	add	r3, r1
 80075f2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80075f6:	2200      	movs	r2, #0
 80075f8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80075fa:	7bfa      	ldrb	r2, [r7, #15]
 80075fc:	6879      	ldr	r1, [r7, #4]
 80075fe:	4613      	mov	r3, r2
 8007600:	00db      	lsls	r3, r3, #3
 8007602:	4413      	add	r3, r2
 8007604:	009b      	lsls	r3, r3, #2
 8007606:	440b      	add	r3, r1
 8007608:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800760c:	2200      	movs	r2, #0
 800760e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8007610:	7bfb      	ldrb	r3, [r7, #15]
 8007612:	3301      	adds	r3, #1
 8007614:	73fb      	strb	r3, [r7, #15]
 8007616:	7bfa      	ldrb	r2, [r7, #15]
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	429a      	cmp	r2, r3
 800761e:	d3b5      	bcc.n	800758c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	603b      	str	r3, [r7, #0]
 8007626:	687e      	ldr	r6, [r7, #4]
 8007628:	466d      	mov	r5, sp
 800762a:	f106 0410 	add.w	r4, r6, #16
 800762e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007630:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007632:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007634:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007636:	e894 0003 	ldmia.w	r4, {r0, r1}
 800763a:	e885 0003 	stmia.w	r5, {r0, r1}
 800763e:	1d33      	adds	r3, r6, #4
 8007640:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007642:	6838      	ldr	r0, [r7, #0]
 8007644:	f005 f8fe 	bl	800c844 <USB_DevInit>
 8007648:	4603      	mov	r3, r0
 800764a:	2b00      	cmp	r3, #0
 800764c:	d005      	beq.n	800765a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2202      	movs	r2, #2
 8007652:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e014      	b.n	8007684 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2201      	movs	r2, #1
 8007666:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800766e:	2b01      	cmp	r3, #1
 8007670:	d102      	bne.n	8007678 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f000 f80a 	bl	800768c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	4618      	mov	r0, r3
 800767e:	f005 fabc 	bl	800cbfa <USB_DevDisconnect>

  return HAL_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	3714      	adds	r7, #20
 8007688:	46bd      	mov	sp, r7
 800768a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800768c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800768c:	b480      	push	{r7}
 800768e:	b085      	sub	sp, #20
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	699b      	ldr	r3, [r3, #24]
 80076ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80076ba:	4b05      	ldr	r3, [pc, #20]	; (80076d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80076bc:	4313      	orrs	r3, r2
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80076c2:	2300      	movs	r3, #0
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3714      	adds	r7, #20
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr
 80076d0:	10000003 	.word	0x10000003

080076d4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b084      	sub	sp, #16
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80076dc:	4b29      	ldr	r3, [pc, #164]	; (8007784 <HAL_PWREx_ConfigSupply+0xb0>)
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	f003 0307 	and.w	r3, r3, #7
 80076e4:	2b06      	cmp	r3, #6
 80076e6:	d00a      	beq.n	80076fe <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80076e8:	4b26      	ldr	r3, [pc, #152]	; (8007784 <HAL_PWREx_ConfigSupply+0xb0>)
 80076ea:	68db      	ldr	r3, [r3, #12]
 80076ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076f0:	687a      	ldr	r2, [r7, #4]
 80076f2:	429a      	cmp	r2, r3
 80076f4:	d001      	beq.n	80076fa <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80076f6:	2301      	movs	r3, #1
 80076f8:	e040      	b.n	800777c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e03e      	b.n	800777c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80076fe:	4b21      	ldr	r3, [pc, #132]	; (8007784 <HAL_PWREx_ConfigSupply+0xb0>)
 8007700:	68db      	ldr	r3, [r3, #12]
 8007702:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8007706:	491f      	ldr	r1, [pc, #124]	; (8007784 <HAL_PWREx_ConfigSupply+0xb0>)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	4313      	orrs	r3, r2
 800770c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800770e:	f7fc fcc5 	bl	800409c <HAL_GetTick>
 8007712:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007714:	e009      	b.n	800772a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007716:	f7fc fcc1 	bl	800409c <HAL_GetTick>
 800771a:	4602      	mov	r2, r0
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	1ad3      	subs	r3, r2, r3
 8007720:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007724:	d901      	bls.n	800772a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007726:	2301      	movs	r3, #1
 8007728:	e028      	b.n	800777c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800772a:	4b16      	ldr	r3, [pc, #88]	; (8007784 <HAL_PWREx_ConfigSupply+0xb0>)
 800772c:	685b      	ldr	r3, [r3, #4]
 800772e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007736:	d1ee      	bne.n	8007716 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2b1e      	cmp	r3, #30
 800773c:	d008      	beq.n	8007750 <HAL_PWREx_ConfigSupply+0x7c>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2b2e      	cmp	r3, #46	; 0x2e
 8007742:	d005      	beq.n	8007750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b1d      	cmp	r3, #29
 8007748:	d002      	beq.n	8007750 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b2d      	cmp	r3, #45	; 0x2d
 800774e:	d114      	bne.n	800777a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007750:	f7fc fca4 	bl	800409c <HAL_GetTick>
 8007754:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007756:	e009      	b.n	800776c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8007758:	f7fc fca0 	bl	800409c <HAL_GetTick>
 800775c:	4602      	mov	r2, r0
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	1ad3      	subs	r3, r2, r3
 8007762:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007766:	d901      	bls.n	800776c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8007768:	2301      	movs	r3, #1
 800776a:	e007      	b.n	800777c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800776c:	4b05      	ldr	r3, [pc, #20]	; (8007784 <HAL_PWREx_ConfigSupply+0xb0>)
 800776e:	68db      	ldr	r3, [r3, #12]
 8007770:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007774:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007778:	d1ee      	bne.n	8007758 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800777a:	2300      	movs	r3, #0
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	58024800 	.word	0x58024800

08007788 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007788:	b480      	push	{r7}
 800778a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800778c:	4b05      	ldr	r3, [pc, #20]	; (80077a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	4a04      	ldr	r2, [pc, #16]	; (80077a4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8007792:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007796:	60d3      	str	r3, [r2, #12]
}
 8007798:	bf00      	nop
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr
 80077a2:	bf00      	nop
 80077a4:	58024800 	.word	0x58024800

080077a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b08c      	sub	sp, #48	; 0x30
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d102      	bne.n	80077bc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80077b6:	2301      	movs	r3, #1
 80077b8:	f000 bc1d 	b.w	8007ff6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 0301 	and.w	r3, r3, #1
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 8087 	beq.w	80078d8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077ca:	4b99      	ldr	r3, [pc, #612]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80077cc:	691b      	ldr	r3, [r3, #16]
 80077ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80077d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80077d4:	4b96      	ldr	r3, [pc, #600]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80077d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80077da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077dc:	2b10      	cmp	r3, #16
 80077de:	d007      	beq.n	80077f0 <HAL_RCC_OscConfig+0x48>
 80077e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077e2:	2b18      	cmp	r3, #24
 80077e4:	d110      	bne.n	8007808 <HAL_RCC_OscConfig+0x60>
 80077e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e8:	f003 0303 	and.w	r3, r3, #3
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d10b      	bne.n	8007808 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80077f0:	4b8f      	ldr	r3, [pc, #572]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d06c      	beq.n	80078d6 <HAL_RCC_OscConfig+0x12e>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d168      	bne.n	80078d6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8007804:	2301      	movs	r3, #1
 8007806:	e3f6      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	685b      	ldr	r3, [r3, #4]
 800780c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007810:	d106      	bne.n	8007820 <HAL_RCC_OscConfig+0x78>
 8007812:	4b87      	ldr	r3, [pc, #540]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	4a86      	ldr	r2, [pc, #536]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800781c:	6013      	str	r3, [r2, #0]
 800781e:	e02e      	b.n	800787e <HAL_RCC_OscConfig+0xd6>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10c      	bne.n	8007842 <HAL_RCC_OscConfig+0x9a>
 8007828:	4b81      	ldr	r3, [pc, #516]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a80      	ldr	r2, [pc, #512]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800782e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007832:	6013      	str	r3, [r2, #0]
 8007834:	4b7e      	ldr	r3, [pc, #504]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a7d      	ldr	r2, [pc, #500]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800783a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800783e:	6013      	str	r3, [r2, #0]
 8007840:	e01d      	b.n	800787e <HAL_RCC_OscConfig+0xd6>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800784a:	d10c      	bne.n	8007866 <HAL_RCC_OscConfig+0xbe>
 800784c:	4b78      	ldr	r3, [pc, #480]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	4a77      	ldr	r2, [pc, #476]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007852:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007856:	6013      	str	r3, [r2, #0]
 8007858:	4b75      	ldr	r3, [pc, #468]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4a74      	ldr	r2, [pc, #464]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800785e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007862:	6013      	str	r3, [r2, #0]
 8007864:	e00b      	b.n	800787e <HAL_RCC_OscConfig+0xd6>
 8007866:	4b72      	ldr	r3, [pc, #456]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a71      	ldr	r2, [pc, #452]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800786c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007870:	6013      	str	r3, [r2, #0]
 8007872:	4b6f      	ldr	r3, [pc, #444]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a6e      	ldr	r2, [pc, #440]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007878:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b00      	cmp	r3, #0
 8007884:	d013      	beq.n	80078ae <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007886:	f7fc fc09 	bl	800409c <HAL_GetTick>
 800788a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800788c:	e008      	b.n	80078a0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800788e:	f7fc fc05 	bl	800409c <HAL_GetTick>
 8007892:	4602      	mov	r2, r0
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	1ad3      	subs	r3, r2, r3
 8007898:	2b64      	cmp	r3, #100	; 0x64
 800789a:	d901      	bls.n	80078a0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800789c:	2303      	movs	r3, #3
 800789e:	e3aa      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80078a0:	4b63      	ldr	r3, [pc, #396]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d0f0      	beq.n	800788e <HAL_RCC_OscConfig+0xe6>
 80078ac:	e014      	b.n	80078d8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078ae:	f7fc fbf5 	bl	800409c <HAL_GetTick>
 80078b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078b4:	e008      	b.n	80078c8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b6:	f7fc fbf1 	bl	800409c <HAL_GetTick>
 80078ba:	4602      	mov	r2, r0
 80078bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078be:	1ad3      	subs	r3, r2, r3
 80078c0:	2b64      	cmp	r3, #100	; 0x64
 80078c2:	d901      	bls.n	80078c8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80078c4:	2303      	movs	r3, #3
 80078c6:	e396      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80078c8:	4b59      	ldr	r3, [pc, #356]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1f0      	bne.n	80078b6 <HAL_RCC_OscConfig+0x10e>
 80078d4:	e000      	b.n	80078d8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	f000 80cb 	beq.w	8007a7c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078e6:	4b52      	ldr	r3, [pc, #328]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80078ee:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80078f0:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80078f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80078f6:	6a3b      	ldr	r3, [r7, #32]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d007      	beq.n	800790c <HAL_RCC_OscConfig+0x164>
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	2b18      	cmp	r3, #24
 8007900:	d156      	bne.n	80079b0 <HAL_RCC_OscConfig+0x208>
 8007902:	69fb      	ldr	r3, [r7, #28]
 8007904:	f003 0303 	and.w	r3, r3, #3
 8007908:	2b00      	cmp	r3, #0
 800790a:	d151      	bne.n	80079b0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800790c:	4b48      	ldr	r3, [pc, #288]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_OscConfig+0x17c>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	68db      	ldr	r3, [r3, #12]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8007920:	2301      	movs	r3, #1
 8007922:	e368      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007924:	4b42      	ldr	r3, [pc, #264]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f023 0219 	bic.w	r2, r3, #25
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	68db      	ldr	r3, [r3, #12]
 8007930:	493f      	ldr	r1, [pc, #252]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007936:	f7fc fbb1 	bl	800409c <HAL_GetTick>
 800793a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800793c:	e008      	b.n	8007950 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800793e:	f7fc fbad 	bl	800409c <HAL_GetTick>
 8007942:	4602      	mov	r2, r0
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	2b02      	cmp	r3, #2
 800794a:	d901      	bls.n	8007950 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800794c:	2303      	movs	r3, #3
 800794e:	e352      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007950:	4b37      	ldr	r3, [pc, #220]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f003 0304 	and.w	r3, r3, #4
 8007958:	2b00      	cmp	r3, #0
 800795a:	d0f0      	beq.n	800793e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800795c:	f7fc fbce 	bl	80040fc <HAL_GetREVID>
 8007960:	4603      	mov	r3, r0
 8007962:	f241 0203 	movw	r2, #4099	; 0x1003
 8007966:	4293      	cmp	r3, r2
 8007968:	d817      	bhi.n	800799a <HAL_RCC_OscConfig+0x1f2>
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	691b      	ldr	r3, [r3, #16]
 800796e:	2b40      	cmp	r3, #64	; 0x40
 8007970:	d108      	bne.n	8007984 <HAL_RCC_OscConfig+0x1dc>
 8007972:	4b2f      	ldr	r3, [pc, #188]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800797a:	4a2d      	ldr	r2, [pc, #180]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800797c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007980:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007982:	e07b      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007984:	4b2a      	ldr	r3, [pc, #168]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007986:	685b      	ldr	r3, [r3, #4]
 8007988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	4927      	ldr	r1, [pc, #156]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007994:	4313      	orrs	r3, r2
 8007996:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007998:	e070      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800799a:	4b25      	ldr	r3, [pc, #148]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	691b      	ldr	r3, [r3, #16]
 80079a6:	061b      	lsls	r3, r3, #24
 80079a8:	4921      	ldr	r1, [pc, #132]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079aa:	4313      	orrs	r3, r2
 80079ac:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079ae:	e065      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d048      	beq.n	8007a4a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079b8:	4b1d      	ldr	r3, [pc, #116]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f023 0219 	bic.w	r2, r3, #25
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	68db      	ldr	r3, [r3, #12]
 80079c4:	491a      	ldr	r1, [pc, #104]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079c6:	4313      	orrs	r3, r2
 80079c8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079ca:	f7fc fb67 	bl	800409c <HAL_GetTick>
 80079ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079d0:	e008      	b.n	80079e4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80079d2:	f7fc fb63 	bl	800409c <HAL_GetTick>
 80079d6:	4602      	mov	r2, r0
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079da:	1ad3      	subs	r3, r2, r3
 80079dc:	2b02      	cmp	r3, #2
 80079de:	d901      	bls.n	80079e4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e308      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e4:	4b12      	ldr	r3, [pc, #72]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 0304 	and.w	r3, r3, #4
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d0f0      	beq.n	80079d2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f0:	f7fc fb84 	bl	80040fc <HAL_GetREVID>
 80079f4:	4603      	mov	r3, r0
 80079f6:	f241 0203 	movw	r2, #4099	; 0x1003
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d81a      	bhi.n	8007a34 <HAL_RCC_OscConfig+0x28c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	2b40      	cmp	r3, #64	; 0x40
 8007a04:	d108      	bne.n	8007a18 <HAL_RCC_OscConfig+0x270>
 8007a06:	4b0a      	ldr	r3, [pc, #40]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007a0e:	4a08      	ldr	r2, [pc, #32]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a14:	6053      	str	r3, [r2, #4]
 8007a16:	e031      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
 8007a18:	4b05      	ldr	r3, [pc, #20]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	691b      	ldr	r3, [r3, #16]
 8007a24:	031b      	lsls	r3, r3, #12
 8007a26:	4902      	ldr	r1, [pc, #8]	; (8007a30 <HAL_RCC_OscConfig+0x288>)
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	604b      	str	r3, [r1, #4]
 8007a2c:	e026      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
 8007a2e:	bf00      	nop
 8007a30:	58024400 	.word	0x58024400
 8007a34:	4b9a      	ldr	r3, [pc, #616]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a36:	685b      	ldr	r3, [r3, #4]
 8007a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	691b      	ldr	r3, [r3, #16]
 8007a40:	061b      	lsls	r3, r3, #24
 8007a42:	4997      	ldr	r1, [pc, #604]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	604b      	str	r3, [r1, #4]
 8007a48:	e018      	b.n	8007a7c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a4a:	4b95      	ldr	r3, [pc, #596]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	4a94      	ldr	r2, [pc, #592]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a50:	f023 0301 	bic.w	r3, r3, #1
 8007a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a56:	f7fc fb21 	bl	800409c <HAL_GetTick>
 8007a5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a5c:	e008      	b.n	8007a70 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007a5e:	f7fc fb1d 	bl	800409c <HAL_GetTick>
 8007a62:	4602      	mov	r2, r0
 8007a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a66:	1ad3      	subs	r3, r2, r3
 8007a68:	2b02      	cmp	r3, #2
 8007a6a:	d901      	bls.n	8007a70 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007a6c:	2303      	movs	r3, #3
 8007a6e:	e2c2      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007a70:	4b8b      	ldr	r3, [pc, #556]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0304 	and.w	r3, r3, #4
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d1f0      	bne.n	8007a5e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f003 0310 	and.w	r3, r3, #16
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 80a9 	beq.w	8007bdc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a8a:	4b85      	ldr	r3, [pc, #532]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a8c:	691b      	ldr	r3, [r3, #16]
 8007a8e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a92:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a94:	4b82      	ldr	r3, [pc, #520]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007a9a:	69bb      	ldr	r3, [r7, #24]
 8007a9c:	2b08      	cmp	r3, #8
 8007a9e:	d007      	beq.n	8007ab0 <HAL_RCC_OscConfig+0x308>
 8007aa0:	69bb      	ldr	r3, [r7, #24]
 8007aa2:	2b18      	cmp	r3, #24
 8007aa4:	d13a      	bne.n	8007b1c <HAL_RCC_OscConfig+0x374>
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	f003 0303 	and.w	r3, r3, #3
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d135      	bne.n	8007b1c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ab0:	4b7b      	ldr	r3, [pc, #492]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x320>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	69db      	ldr	r3, [r3, #28]
 8007ac0:	2b80      	cmp	r3, #128	; 0x80
 8007ac2:	d001      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007ac4:	2301      	movs	r3, #1
 8007ac6:	e296      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ac8:	f7fc fb18 	bl	80040fc <HAL_GetREVID>
 8007acc:	4603      	mov	r3, r0
 8007ace:	f241 0203 	movw	r2, #4099	; 0x1003
 8007ad2:	4293      	cmp	r3, r2
 8007ad4:	d817      	bhi.n	8007b06 <HAL_RCC_OscConfig+0x35e>
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	2b20      	cmp	r3, #32
 8007adc:	d108      	bne.n	8007af0 <HAL_RCC_OscConfig+0x348>
 8007ade:	4b70      	ldr	r3, [pc, #448]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	685b      	ldr	r3, [r3, #4]
 8007ae2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007ae6:	4a6e      	ldr	r2, [pc, #440]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ae8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007aec:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007aee:	e075      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007af0:	4b6b      	ldr	r3, [pc, #428]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	6a1b      	ldr	r3, [r3, #32]
 8007afc:	069b      	lsls	r3, r3, #26
 8007afe:	4968      	ldr	r1, [pc, #416]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b00:	4313      	orrs	r3, r2
 8007b02:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b04:	e06a      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b06:	4b66      	ldr	r3, [pc, #408]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b08:	68db      	ldr	r3, [r3, #12]
 8007b0a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	6a1b      	ldr	r3, [r3, #32]
 8007b12:	061b      	lsls	r3, r3, #24
 8007b14:	4962      	ldr	r1, [pc, #392]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b1a:	e05f      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	69db      	ldr	r3, [r3, #28]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d042      	beq.n	8007baa <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007b24:	4b5e      	ldr	r3, [pc, #376]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a5d      	ldr	r2, [pc, #372]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b30:	f7fc fab4 	bl	800409c <HAL_GetTick>
 8007b34:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b36:	e008      	b.n	8007b4a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007b38:	f7fc fab0 	bl	800409c <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d901      	bls.n	8007b4a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	e255      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007b4a:	4b55      	ldr	r3, [pc, #340]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d0f0      	beq.n	8007b38 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b56:	f7fc fad1 	bl	80040fc <HAL_GetREVID>
 8007b5a:	4603      	mov	r3, r0
 8007b5c:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d817      	bhi.n	8007b94 <HAL_RCC_OscConfig+0x3ec>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6a1b      	ldr	r3, [r3, #32]
 8007b68:	2b20      	cmp	r3, #32
 8007b6a:	d108      	bne.n	8007b7e <HAL_RCC_OscConfig+0x3d6>
 8007b6c:	4b4c      	ldr	r3, [pc, #304]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007b74:	4a4a      	ldr	r2, [pc, #296]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007b7a:	6053      	str	r3, [r2, #4]
 8007b7c:	e02e      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
 8007b7e:	4b48      	ldr	r3, [pc, #288]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	069b      	lsls	r3, r3, #26
 8007b8c:	4944      	ldr	r1, [pc, #272]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b8e:	4313      	orrs	r3, r2
 8007b90:	604b      	str	r3, [r1, #4]
 8007b92:	e023      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
 8007b94:	4b42      	ldr	r3, [pc, #264]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6a1b      	ldr	r3, [r3, #32]
 8007ba0:	061b      	lsls	r3, r3, #24
 8007ba2:	493f      	ldr	r1, [pc, #252]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007ba4:	4313      	orrs	r3, r2
 8007ba6:	60cb      	str	r3, [r1, #12]
 8007ba8:	e018      	b.n	8007bdc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007baa:	4b3d      	ldr	r3, [pc, #244]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a3c      	ldr	r2, [pc, #240]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bb0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007bb4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bb6:	f7fc fa71 	bl	800409c <HAL_GetTick>
 8007bba:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bbc:	e008      	b.n	8007bd0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8007bbe:	f7fc fa6d 	bl	800409c <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	2b02      	cmp	r3, #2
 8007bca:	d901      	bls.n	8007bd0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bcc:	2303      	movs	r3, #3
 8007bce:	e212      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007bd0:	4b33      	ldr	r3, [pc, #204]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d1f0      	bne.n	8007bbe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 0308 	and.w	r3, r3, #8
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d036      	beq.n	8007c56 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	695b      	ldr	r3, [r3, #20]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d019      	beq.n	8007c24 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bf0:	4b2b      	ldr	r3, [pc, #172]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bf2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bf4:	4a2a      	ldr	r2, [pc, #168]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007bf6:	f043 0301 	orr.w	r3, r3, #1
 8007bfa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bfc:	f7fc fa4e 	bl	800409c <HAL_GetTick>
 8007c00:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c02:	e008      	b.n	8007c16 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c04:	f7fc fa4a 	bl	800409c <HAL_GetTick>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c0c:	1ad3      	subs	r3, r2, r3
 8007c0e:	2b02      	cmp	r3, #2
 8007c10:	d901      	bls.n	8007c16 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007c12:	2303      	movs	r3, #3
 8007c14:	e1ef      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c16:	4b22      	ldr	r3, [pc, #136]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c1a:	f003 0302 	and.w	r3, r3, #2
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d0f0      	beq.n	8007c04 <HAL_RCC_OscConfig+0x45c>
 8007c22:	e018      	b.n	8007c56 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c24:	4b1e      	ldr	r3, [pc, #120]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c28:	4a1d      	ldr	r2, [pc, #116]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c2a:	f023 0301 	bic.w	r3, r3, #1
 8007c2e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c30:	f7fc fa34 	bl	800409c <HAL_GetTick>
 8007c34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c36:	e008      	b.n	8007c4a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007c38:	f7fc fa30 	bl	800409c <HAL_GetTick>
 8007c3c:	4602      	mov	r2, r0
 8007c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c40:	1ad3      	subs	r3, r2, r3
 8007c42:	2b02      	cmp	r3, #2
 8007c44:	d901      	bls.n	8007c4a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007c46:	2303      	movs	r3, #3
 8007c48:	e1d5      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007c4a:	4b15      	ldr	r3, [pc, #84]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c4e:	f003 0302 	and.w	r3, r3, #2
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d1f0      	bne.n	8007c38 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 0320 	and.w	r3, r3, #32
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d039      	beq.n	8007cd6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d01c      	beq.n	8007ca4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007c6a:	4b0d      	ldr	r3, [pc, #52]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007c74:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007c76:	f7fc fa11 	bl	800409c <HAL_GetTick>
 8007c7a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c7c:	e008      	b.n	8007c90 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007c7e:	f7fc fa0d 	bl	800409c <HAL_GetTick>
 8007c82:	4602      	mov	r2, r0
 8007c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c86:	1ad3      	subs	r3, r2, r3
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d901      	bls.n	8007c90 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007c8c:	2303      	movs	r3, #3
 8007c8e:	e1b2      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007c90:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <HAL_RCC_OscConfig+0x4f8>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d0f0      	beq.n	8007c7e <HAL_RCC_OscConfig+0x4d6>
 8007c9c:	e01b      	b.n	8007cd6 <HAL_RCC_OscConfig+0x52e>
 8007c9e:	bf00      	nop
 8007ca0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007ca4:	4b9b      	ldr	r3, [pc, #620]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	4a9a      	ldr	r2, [pc, #616]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007caa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007cae:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007cb0:	f7fc f9f4 	bl	800409c <HAL_GetTick>
 8007cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cb6:	e008      	b.n	8007cca <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8007cb8:	f7fc f9f0 	bl	800409c <HAL_GetTick>
 8007cbc:	4602      	mov	r2, r0
 8007cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc0:	1ad3      	subs	r3, r2, r3
 8007cc2:	2b02      	cmp	r3, #2
 8007cc4:	d901      	bls.n	8007cca <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	e195      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007cca:	4b92      	ldr	r3, [pc, #584]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d1f0      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f003 0304 	and.w	r3, r3, #4
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	f000 8081 	beq.w	8007de6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007ce4:	4b8c      	ldr	r3, [pc, #560]	; (8007f18 <HAL_RCC_OscConfig+0x770>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a8b      	ldr	r2, [pc, #556]	; (8007f18 <HAL_RCC_OscConfig+0x770>)
 8007cea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cee:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007cf0:	f7fc f9d4 	bl	800409c <HAL_GetTick>
 8007cf4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007cf6:	e008      	b.n	8007d0a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007cf8:	f7fc f9d0 	bl	800409c <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b64      	cmp	r3, #100	; 0x64
 8007d04:	d901      	bls.n	8007d0a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	e175      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d0a:	4b83      	ldr	r3, [pc, #524]	; (8007f18 <HAL_RCC_OscConfig+0x770>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f0      	beq.n	8007cf8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d106      	bne.n	8007d2c <HAL_RCC_OscConfig+0x584>
 8007d1e:	4b7d      	ldr	r3, [pc, #500]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d22:	4a7c      	ldr	r2, [pc, #496]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d24:	f043 0301 	orr.w	r3, r3, #1
 8007d28:	6713      	str	r3, [r2, #112]	; 0x70
 8007d2a:	e02d      	b.n	8007d88 <HAL_RCC_OscConfig+0x5e0>
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d10c      	bne.n	8007d4e <HAL_RCC_OscConfig+0x5a6>
 8007d34:	4b77      	ldr	r3, [pc, #476]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d38:	4a76      	ldr	r2, [pc, #472]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	f023 0301 	bic.w	r3, r3, #1
 8007d3e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d40:	4b74      	ldr	r3, [pc, #464]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d44:	4a73      	ldr	r2, [pc, #460]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d46:	f023 0304 	bic.w	r3, r3, #4
 8007d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d4c:	e01c      	b.n	8007d88 <HAL_RCC_OscConfig+0x5e0>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	689b      	ldr	r3, [r3, #8]
 8007d52:	2b05      	cmp	r3, #5
 8007d54:	d10c      	bne.n	8007d70 <HAL_RCC_OscConfig+0x5c8>
 8007d56:	4b6f      	ldr	r3, [pc, #444]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d5a:	4a6e      	ldr	r2, [pc, #440]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d5c:	f043 0304 	orr.w	r3, r3, #4
 8007d60:	6713      	str	r3, [r2, #112]	; 0x70
 8007d62:	4b6c      	ldr	r3, [pc, #432]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d66:	4a6b      	ldr	r2, [pc, #428]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d68:	f043 0301 	orr.w	r3, r3, #1
 8007d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d6e:	e00b      	b.n	8007d88 <HAL_RCC_OscConfig+0x5e0>
 8007d70:	4b68      	ldr	r3, [pc, #416]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	4a67      	ldr	r2, [pc, #412]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d76:	f023 0301 	bic.w	r3, r3, #1
 8007d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d7c:	4b65      	ldr	r3, [pc, #404]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d80:	4a64      	ldr	r2, [pc, #400]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007d82:	f023 0304 	bic.w	r3, r3, #4
 8007d86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d015      	beq.n	8007dbc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d90:	f7fc f984 	bl	800409c <HAL_GetTick>
 8007d94:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007d96:	e00a      	b.n	8007dae <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007d98:	f7fc f980 	bl	800409c <HAL_GetTick>
 8007d9c:	4602      	mov	r2, r0
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007da6:	4293      	cmp	r3, r2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e123      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007dae:	4b59      	ldr	r3, [pc, #356]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007db2:	f003 0302 	and.w	r3, r3, #2
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d0ee      	beq.n	8007d98 <HAL_RCC_OscConfig+0x5f0>
 8007dba:	e014      	b.n	8007de6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dbc:	f7fc f96e 	bl	800409c <HAL_GetTick>
 8007dc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dc2:	e00a      	b.n	8007dda <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dc4:	f7fc f96a 	bl	800409c <HAL_GetTick>
 8007dc8:	4602      	mov	r2, r0
 8007dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d901      	bls.n	8007dda <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007dd6:	2303      	movs	r3, #3
 8007dd8:	e10d      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007dda:	4b4e      	ldr	r3, [pc, #312]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dde:	f003 0302 	and.w	r3, r3, #2
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1ee      	bne.n	8007dc4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	f000 8102 	beq.w	8007ff4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007df0:	4b48      	ldr	r3, [pc, #288]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007df8:	2b18      	cmp	r3, #24
 8007dfa:	f000 80bd 	beq.w	8007f78 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	2b02      	cmp	r3, #2
 8007e04:	f040 809e 	bne.w	8007f44 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e08:	4b42      	ldr	r3, [pc, #264]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a41      	ldr	r2, [pc, #260]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e14:	f7fc f942 	bl	800409c <HAL_GetTick>
 8007e18:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e1a:	e008      	b.n	8007e2e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007e1c:	f7fc f93e 	bl	800409c <HAL_GetTick>
 8007e20:	4602      	mov	r2, r0
 8007e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e24:	1ad3      	subs	r3, r2, r3
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d901      	bls.n	8007e2e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007e2a:	2303      	movs	r3, #3
 8007e2c:	e0e3      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007e2e:	4b39      	ldr	r3, [pc, #228]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1f0      	bne.n	8007e1c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e3a:	4b36      	ldr	r3, [pc, #216]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e3e:	4b37      	ldr	r3, [pc, #220]	; (8007f1c <HAL_RCC_OscConfig+0x774>)
 8007e40:	4013      	ands	r3, r2
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007e4a:	0112      	lsls	r2, r2, #4
 8007e4c:	430a      	orrs	r2, r1
 8007e4e:	4931      	ldr	r1, [pc, #196]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e50:	4313      	orrs	r3, r2
 8007e52:	628b      	str	r3, [r1, #40]	; 0x28
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e58:	3b01      	subs	r3, #1
 8007e5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e62:	3b01      	subs	r3, #1
 8007e64:	025b      	lsls	r3, r3, #9
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	431a      	orrs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e6e:	3b01      	subs	r3, #1
 8007e70:	041b      	lsls	r3, r3, #16
 8007e72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	3b01      	subs	r3, #1
 8007e7e:	061b      	lsls	r3, r3, #24
 8007e80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007e84:	4923      	ldr	r1, [pc, #140]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e86:	4313      	orrs	r3, r2
 8007e88:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8007e8a:	4b22      	ldr	r3, [pc, #136]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e8e:	4a21      	ldr	r2, [pc, #132]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e90:	f023 0301 	bic.w	r3, r3, #1
 8007e94:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007e96:	4b1f      	ldr	r3, [pc, #124]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007e98:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007e9a:	4b21      	ldr	r3, [pc, #132]	; (8007f20 <HAL_RCC_OscConfig+0x778>)
 8007e9c:	4013      	ands	r3, r2
 8007e9e:	687a      	ldr	r2, [r7, #4]
 8007ea0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007ea2:	00d2      	lsls	r2, r2, #3
 8007ea4:	491b      	ldr	r1, [pc, #108]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ea6:	4313      	orrs	r3, r2
 8007ea8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007eaa:	4b1a      	ldr	r3, [pc, #104]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	f023 020c 	bic.w	r2, r3, #12
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb6:	4917      	ldr	r1, [pc, #92]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eb8:	4313      	orrs	r3, r2
 8007eba:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007ebc:	4b15      	ldr	r3, [pc, #84]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ec0:	f023 0202 	bic.w	r2, r3, #2
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ec8:	4912      	ldr	r1, [pc, #72]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eca:	4313      	orrs	r3, r2
 8007ecc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007ece:	4b11      	ldr	r3, [pc, #68]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed2:	4a10      	ldr	r2, [pc, #64]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ed4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ed8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007eda:	4b0e      	ldr	r3, [pc, #56]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ede:	4a0d      	ldr	r2, [pc, #52]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ee0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007ee6:	4b0b      	ldr	r3, [pc, #44]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eea:	4a0a      	ldr	r2, [pc, #40]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007eec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007ef2:	4b08      	ldr	r3, [pc, #32]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	4a07      	ldr	r2, [pc, #28]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007ef8:	f043 0301 	orr.w	r3, r3, #1
 8007efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007efe:	4b05      	ldr	r3, [pc, #20]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4a04      	ldr	r2, [pc, #16]	; (8007f14 <HAL_RCC_OscConfig+0x76c>)
 8007f04:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007f08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f0a:	f7fc f8c7 	bl	800409c <HAL_GetTick>
 8007f0e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f10:	e011      	b.n	8007f36 <HAL_RCC_OscConfig+0x78e>
 8007f12:	bf00      	nop
 8007f14:	58024400 	.word	0x58024400
 8007f18:	58024800 	.word	0x58024800
 8007f1c:	fffffc0c 	.word	0xfffffc0c
 8007f20:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f24:	f7fc f8ba 	bl	800409c <HAL_GetTick>
 8007f28:	4602      	mov	r2, r0
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	1ad3      	subs	r3, r2, r3
 8007f2e:	2b02      	cmp	r3, #2
 8007f30:	d901      	bls.n	8007f36 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007f32:	2303      	movs	r3, #3
 8007f34:	e05f      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007f36:	4b32      	ldr	r3, [pc, #200]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d0f0      	beq.n	8007f24 <HAL_RCC_OscConfig+0x77c>
 8007f42:	e057      	b.n	8007ff4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f44:	4b2e      	ldr	r3, [pc, #184]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4a2d      	ldr	r2, [pc, #180]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f4a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f4e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f50:	f7fc f8a4 	bl	800409c <HAL_GetTick>
 8007f54:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f56:	e008      	b.n	8007f6a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007f58:	f7fc f8a0 	bl	800409c <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	2b02      	cmp	r3, #2
 8007f64:	d901      	bls.n	8007f6a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007f66:	2303      	movs	r3, #3
 8007f68:	e045      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007f6a:	4b25      	ldr	r3, [pc, #148]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d1f0      	bne.n	8007f58 <HAL_RCC_OscConfig+0x7b0>
 8007f76:	e03d      	b.n	8007ff4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8007f78:	4b21      	ldr	r3, [pc, #132]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8007f7e:	4b20      	ldr	r3, [pc, #128]	; (8008000 <HAL_RCC_OscConfig+0x858>)
 8007f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f82:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d031      	beq.n	8007ff0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f003 0203 	and.w	r2, r3, #3
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d12a      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	091b      	lsrs	r3, r3, #4
 8007f9e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d122      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007fb4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d11a      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	0a5b      	lsrs	r3, r3, #9
 8007fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fc6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	d111      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	0c1b      	lsrs	r3, r3, #16
 8007fd0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007fda:	429a      	cmp	r2, r3
 8007fdc:	d108      	bne.n	8007ff0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	0e1b      	lsrs	r3, r3, #24
 8007fe2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fea:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d001      	beq.n	8007ff4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	e000      	b.n	8007ff6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007ff4:	2300      	movs	r3, #0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3730      	adds	r7, #48	; 0x30
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}
 8007ffe:	bf00      	nop
 8008000:	58024400 	.word	0x58024400

08008004 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b086      	sub	sp, #24
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
 800800c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d101      	bne.n	8008018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e19c      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008018:	4b8a      	ldr	r3, [pc, #552]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 030f 	and.w	r3, r3, #15
 8008020:	683a      	ldr	r2, [r7, #0]
 8008022:	429a      	cmp	r2, r3
 8008024:	d910      	bls.n	8008048 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008026:	4b87      	ldr	r3, [pc, #540]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f023 020f 	bic.w	r2, r3, #15
 800802e:	4985      	ldr	r1, [pc, #532]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	4313      	orrs	r3, r2
 8008034:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008036:	4b83      	ldr	r3, [pc, #524]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 030f 	and.w	r3, r3, #15
 800803e:	683a      	ldr	r2, [r7, #0]
 8008040:	429a      	cmp	r2, r3
 8008042:	d001      	beq.n	8008048 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008044:	2301      	movs	r3, #1
 8008046:	e184      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b00      	cmp	r3, #0
 8008052:	d010      	beq.n	8008076 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	691a      	ldr	r2, [r3, #16]
 8008058:	4b7b      	ldr	r3, [pc, #492]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800805a:	699b      	ldr	r3, [r3, #24]
 800805c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008060:	429a      	cmp	r2, r3
 8008062:	d908      	bls.n	8008076 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008064:	4b78      	ldr	r3, [pc, #480]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008066:	699b      	ldr	r3, [r3, #24]
 8008068:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	4975      	ldr	r1, [pc, #468]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008072:	4313      	orrs	r3, r2
 8008074:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0308 	and.w	r3, r3, #8
 800807e:	2b00      	cmp	r3, #0
 8008080:	d010      	beq.n	80080a4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	695a      	ldr	r2, [r3, #20]
 8008086:	4b70      	ldr	r3, [pc, #448]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008088:	69db      	ldr	r3, [r3, #28]
 800808a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800808e:	429a      	cmp	r2, r3
 8008090:	d908      	bls.n	80080a4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008092:	4b6d      	ldr	r3, [pc, #436]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008094:	69db      	ldr	r3, [r3, #28]
 8008096:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	695b      	ldr	r3, [r3, #20]
 800809e:	496a      	ldr	r1, [pc, #424]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080a0:	4313      	orrs	r3, r2
 80080a2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 0310 	and.w	r3, r3, #16
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d010      	beq.n	80080d2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	699a      	ldr	r2, [r3, #24]
 80080b4:	4b64      	ldr	r3, [pc, #400]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080b6:	69db      	ldr	r3, [r3, #28]
 80080b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80080bc:	429a      	cmp	r2, r3
 80080be:	d908      	bls.n	80080d2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80080c0:	4b61      	ldr	r3, [pc, #388]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080c2:	69db      	ldr	r3, [r3, #28]
 80080c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	699b      	ldr	r3, [r3, #24]
 80080cc:	495e      	ldr	r1, [pc, #376]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 0320 	and.w	r3, r3, #32
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d010      	beq.n	8008100 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	69da      	ldr	r2, [r3, #28]
 80080e2:	4b59      	ldr	r3, [pc, #356]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d908      	bls.n	8008100 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80080ee:	4b56      	ldr	r3, [pc, #344]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	69db      	ldr	r3, [r3, #28]
 80080fa:	4953      	ldr	r1, [pc, #332]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	f003 0302 	and.w	r3, r3, #2
 8008108:	2b00      	cmp	r3, #0
 800810a:	d010      	beq.n	800812e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	68da      	ldr	r2, [r3, #12]
 8008110:	4b4d      	ldr	r3, [pc, #308]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008112:	699b      	ldr	r3, [r3, #24]
 8008114:	f003 030f 	and.w	r3, r3, #15
 8008118:	429a      	cmp	r2, r3
 800811a:	d908      	bls.n	800812e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800811c:	4b4a      	ldr	r3, [pc, #296]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800811e:	699b      	ldr	r3, [r3, #24]
 8008120:	f023 020f 	bic.w	r2, r3, #15
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
 8008128:	4947      	ldr	r1, [pc, #284]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800812a:	4313      	orrs	r3, r2
 800812c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	f003 0301 	and.w	r3, r3, #1
 8008136:	2b00      	cmp	r3, #0
 8008138:	d055      	beq.n	80081e6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800813a:	4b43      	ldr	r3, [pc, #268]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800813c:	699b      	ldr	r3, [r3, #24]
 800813e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	689b      	ldr	r3, [r3, #8]
 8008146:	4940      	ldr	r1, [pc, #256]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008148:	4313      	orrs	r3, r2
 800814a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	2b02      	cmp	r3, #2
 8008152:	d107      	bne.n	8008164 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008154:	4b3c      	ldr	r3, [pc, #240]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800815c:	2b00      	cmp	r3, #0
 800815e:	d121      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008160:	2301      	movs	r3, #1
 8008162:	e0f6      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	685b      	ldr	r3, [r3, #4]
 8008168:	2b03      	cmp	r3, #3
 800816a:	d107      	bne.n	800817c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800816c:	4b36      	ldr	r3, [pc, #216]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008174:	2b00      	cmp	r3, #0
 8008176:	d115      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	e0ea      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	685b      	ldr	r3, [r3, #4]
 8008180:	2b01      	cmp	r3, #1
 8008182:	d107      	bne.n	8008194 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008184:	4b30      	ldr	r3, [pc, #192]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800818c:	2b00      	cmp	r3, #0
 800818e:	d109      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8008190:	2301      	movs	r3, #1
 8008192:	e0de      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008194:	4b2c      	ldr	r3, [pc, #176]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	f003 0304 	and.w	r3, r3, #4
 800819c:	2b00      	cmp	r3, #0
 800819e:	d101      	bne.n	80081a4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80081a0:	2301      	movs	r3, #1
 80081a2:	e0d6      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081a4:	4b28      	ldr	r3, [pc, #160]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	f023 0207 	bic.w	r2, r3, #7
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	685b      	ldr	r3, [r3, #4]
 80081b0:	4925      	ldr	r1, [pc, #148]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081b2:	4313      	orrs	r3, r2
 80081b4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80081b6:	f7fb ff71 	bl	800409c <HAL_GetTick>
 80081ba:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081bc:	e00a      	b.n	80081d4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081be:	f7fb ff6d 	bl	800409c <HAL_GetTick>
 80081c2:	4602      	mov	r2, r0
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	1ad3      	subs	r3, r2, r3
 80081c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d901      	bls.n	80081d4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80081d0:	2303      	movs	r3, #3
 80081d2:	e0be      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081d4:	4b1c      	ldr	r3, [pc, #112]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081d6:	691b      	ldr	r3, [r3, #16]
 80081d8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	685b      	ldr	r3, [r3, #4]
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	429a      	cmp	r2, r3
 80081e4:	d1eb      	bne.n	80081be <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f003 0302 	and.w	r3, r3, #2
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d010      	beq.n	8008214 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68da      	ldr	r2, [r3, #12]
 80081f6:	4b14      	ldr	r3, [pc, #80]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 80081f8:	699b      	ldr	r3, [r3, #24]
 80081fa:	f003 030f 	and.w	r3, r3, #15
 80081fe:	429a      	cmp	r2, r3
 8008200:	d208      	bcs.n	8008214 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008202:	4b11      	ldr	r3, [pc, #68]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	f023 020f 	bic.w	r2, r3, #15
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	490e      	ldr	r1, [pc, #56]	; (8008248 <HAL_RCC_ClockConfig+0x244>)
 8008210:	4313      	orrs	r3, r2
 8008212:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008214:	4b0b      	ldr	r3, [pc, #44]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f003 030f 	and.w	r3, r3, #15
 800821c:	683a      	ldr	r2, [r7, #0]
 800821e:	429a      	cmp	r2, r3
 8008220:	d214      	bcs.n	800824c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008222:	4b08      	ldr	r3, [pc, #32]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f023 020f 	bic.w	r2, r3, #15
 800822a:	4906      	ldr	r1, [pc, #24]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	4313      	orrs	r3, r2
 8008230:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008232:	4b04      	ldr	r3, [pc, #16]	; (8008244 <HAL_RCC_ClockConfig+0x240>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	f003 030f 	and.w	r3, r3, #15
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	429a      	cmp	r2, r3
 800823e:	d005      	beq.n	800824c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008240:	2301      	movs	r3, #1
 8008242:	e086      	b.n	8008352 <HAL_RCC_ClockConfig+0x34e>
 8008244:	52002000 	.word	0x52002000
 8008248:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0304 	and.w	r3, r3, #4
 8008254:	2b00      	cmp	r3, #0
 8008256:	d010      	beq.n	800827a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	691a      	ldr	r2, [r3, #16]
 800825c:	4b3f      	ldr	r3, [pc, #252]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800825e:	699b      	ldr	r3, [r3, #24]
 8008260:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008264:	429a      	cmp	r2, r3
 8008266:	d208      	bcs.n	800827a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008268:	4b3c      	ldr	r3, [pc, #240]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	691b      	ldr	r3, [r3, #16]
 8008274:	4939      	ldr	r1, [pc, #228]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008276:	4313      	orrs	r3, r2
 8008278:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0308 	and.w	r3, r3, #8
 8008282:	2b00      	cmp	r3, #0
 8008284:	d010      	beq.n	80082a8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	695a      	ldr	r2, [r3, #20]
 800828a:	4b34      	ldr	r3, [pc, #208]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800828c:	69db      	ldr	r3, [r3, #28]
 800828e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008292:	429a      	cmp	r2, r3
 8008294:	d208      	bcs.n	80082a8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008296:	4b31      	ldr	r3, [pc, #196]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008298:	69db      	ldr	r3, [r3, #28]
 800829a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	492e      	ldr	r1, [pc, #184]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082a4:	4313      	orrs	r3, r2
 80082a6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f003 0310 	and.w	r3, r3, #16
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d010      	beq.n	80082d6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699a      	ldr	r2, [r3, #24]
 80082b8:	4b28      	ldr	r3, [pc, #160]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082ba:	69db      	ldr	r3, [r3, #28]
 80082bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082c0:	429a      	cmp	r2, r3
 80082c2:	d208      	bcs.n	80082d6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082c4:	4b25      	ldr	r3, [pc, #148]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082c6:	69db      	ldr	r3, [r3, #28]
 80082c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	4922      	ldr	r1, [pc, #136]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082d2:	4313      	orrs	r3, r2
 80082d4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d010      	beq.n	8008304 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69da      	ldr	r2, [r3, #28]
 80082e6:	4b1d      	ldr	r3, [pc, #116]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082e8:	6a1b      	ldr	r3, [r3, #32]
 80082ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082ee:	429a      	cmp	r2, r3
 80082f0:	d208      	bcs.n	8008304 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80082f2:	4b1a      	ldr	r3, [pc, #104]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 80082f4:	6a1b      	ldr	r3, [r3, #32]
 80082f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	69db      	ldr	r3, [r3, #28]
 80082fe:	4917      	ldr	r1, [pc, #92]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008300:	4313      	orrs	r3, r2
 8008302:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008304:	f000 f834 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 8008308:	4602      	mov	r2, r0
 800830a:	4b14      	ldr	r3, [pc, #80]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 800830c:	699b      	ldr	r3, [r3, #24]
 800830e:	0a1b      	lsrs	r3, r3, #8
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	4912      	ldr	r1, [pc, #72]	; (8008360 <HAL_RCC_ClockConfig+0x35c>)
 8008316:	5ccb      	ldrb	r3, [r1, r3]
 8008318:	f003 031f 	and.w	r3, r3, #31
 800831c:	fa22 f303 	lsr.w	r3, r2, r3
 8008320:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008322:	4b0e      	ldr	r3, [pc, #56]	; (800835c <HAL_RCC_ClockConfig+0x358>)
 8008324:	699b      	ldr	r3, [r3, #24]
 8008326:	f003 030f 	and.w	r3, r3, #15
 800832a:	4a0d      	ldr	r2, [pc, #52]	; (8008360 <HAL_RCC_ClockConfig+0x35c>)
 800832c:	5cd3      	ldrb	r3, [r2, r3]
 800832e:	f003 031f 	and.w	r3, r3, #31
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	fa22 f303 	lsr.w	r3, r2, r3
 8008338:	4a0a      	ldr	r2, [pc, #40]	; (8008364 <HAL_RCC_ClockConfig+0x360>)
 800833a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800833c:	4a0a      	ldr	r2, [pc, #40]	; (8008368 <HAL_RCC_ClockConfig+0x364>)
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8008342:	4b0a      	ldr	r3, [pc, #40]	; (800836c <HAL_RCC_ClockConfig+0x368>)
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4618      	mov	r0, r3
 8008348:	f7fb fe5e 	bl	8004008 <HAL_InitTick>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008350:	7bfb      	ldrb	r3, [r7, #15]
}
 8008352:	4618      	mov	r0, r3
 8008354:	3718      	adds	r7, #24
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}
 800835a:	bf00      	nop
 800835c:	58024400 	.word	0x58024400
 8008360:	0800d778 	.word	0x0800d778
 8008364:	24000008 	.word	0x24000008
 8008368:	24000004 	.word	0x24000004
 800836c:	2400001c 	.word	0x2400001c

08008370 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008370:	b480      	push	{r7}
 8008372:	b089      	sub	sp, #36	; 0x24
 8008374:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008376:	4bb3      	ldr	r3, [pc, #716]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800837e:	2b18      	cmp	r3, #24
 8008380:	f200 8155 	bhi.w	800862e <HAL_RCC_GetSysClockFreq+0x2be>
 8008384:	a201      	add	r2, pc, #4	; (adr r2, 800838c <HAL_RCC_GetSysClockFreq+0x1c>)
 8008386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838a:	bf00      	nop
 800838c:	080083f1 	.word	0x080083f1
 8008390:	0800862f 	.word	0x0800862f
 8008394:	0800862f 	.word	0x0800862f
 8008398:	0800862f 	.word	0x0800862f
 800839c:	0800862f 	.word	0x0800862f
 80083a0:	0800862f 	.word	0x0800862f
 80083a4:	0800862f 	.word	0x0800862f
 80083a8:	0800862f 	.word	0x0800862f
 80083ac:	08008417 	.word	0x08008417
 80083b0:	0800862f 	.word	0x0800862f
 80083b4:	0800862f 	.word	0x0800862f
 80083b8:	0800862f 	.word	0x0800862f
 80083bc:	0800862f 	.word	0x0800862f
 80083c0:	0800862f 	.word	0x0800862f
 80083c4:	0800862f 	.word	0x0800862f
 80083c8:	0800862f 	.word	0x0800862f
 80083cc:	0800841d 	.word	0x0800841d
 80083d0:	0800862f 	.word	0x0800862f
 80083d4:	0800862f 	.word	0x0800862f
 80083d8:	0800862f 	.word	0x0800862f
 80083dc:	0800862f 	.word	0x0800862f
 80083e0:	0800862f 	.word	0x0800862f
 80083e4:	0800862f 	.word	0x0800862f
 80083e8:	0800862f 	.word	0x0800862f
 80083ec:	08008423 	.word	0x08008423
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80083f0:	4b94      	ldr	r3, [pc, #592]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f003 0320 	and.w	r3, r3, #32
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d009      	beq.n	8008410 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80083fc:	4b91      	ldr	r3, [pc, #580]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	08db      	lsrs	r3, r3, #3
 8008402:	f003 0303 	and.w	r3, r3, #3
 8008406:	4a90      	ldr	r2, [pc, #576]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800840e:	e111      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8008410:	4b8d      	ldr	r3, [pc, #564]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008412:	61bb      	str	r3, [r7, #24]
    break;
 8008414:	e10e      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8008416:	4b8d      	ldr	r3, [pc, #564]	; (800864c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008418:	61bb      	str	r3, [r7, #24]
    break;
 800841a:	e10b      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800841c:	4b8c      	ldr	r3, [pc, #560]	; (8008650 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800841e:	61bb      	str	r3, [r7, #24]
    break;
 8008420:	e108      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008422:	4b88      	ldr	r3, [pc, #544]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008426:	f003 0303 	and.w	r3, r3, #3
 800842a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800842c:	4b85      	ldr	r3, [pc, #532]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800842e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008430:	091b      	lsrs	r3, r3, #4
 8008432:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008436:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008438:	4b82      	ldr	r3, [pc, #520]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800843a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800843c:	f003 0301 	and.w	r3, r3, #1
 8008440:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8008442:	4b80      	ldr	r3, [pc, #512]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008444:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008446:	08db      	lsrs	r3, r3, #3
 8008448:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800844c:	68fa      	ldr	r2, [r7, #12]
 800844e:	fb02 f303 	mul.w	r3, r2, r3
 8008452:	ee07 3a90 	vmov	s15, r3
 8008456:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800845a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80e1 	beq.w	8008628 <HAL_RCC_GetSysClockFreq+0x2b8>
 8008466:	697b      	ldr	r3, [r7, #20]
 8008468:	2b02      	cmp	r3, #2
 800846a:	f000 8083 	beq.w	8008574 <HAL_RCC_GetSysClockFreq+0x204>
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	2b02      	cmp	r3, #2
 8008472:	f200 80a1 	bhi.w	80085b8 <HAL_RCC_GetSysClockFreq+0x248>
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	2b00      	cmp	r3, #0
 800847a:	d003      	beq.n	8008484 <HAL_RCC_GetSysClockFreq+0x114>
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d056      	beq.n	8008530 <HAL_RCC_GetSysClockFreq+0x1c0>
 8008482:	e099      	b.n	80085b8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008484:	4b6f      	ldr	r3, [pc, #444]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f003 0320 	and.w	r3, r3, #32
 800848c:	2b00      	cmp	r3, #0
 800848e:	d02d      	beq.n	80084ec <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008490:	4b6c      	ldr	r3, [pc, #432]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	08db      	lsrs	r3, r3, #3
 8008496:	f003 0303 	and.w	r3, r3, #3
 800849a:	4a6b      	ldr	r2, [pc, #428]	; (8008648 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800849c:	fa22 f303 	lsr.w	r3, r2, r3
 80084a0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	ee07 3a90 	vmov	s15, r3
 80084a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	ee07 3a90 	vmov	s15, r3
 80084b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084ba:	4b62      	ldr	r3, [pc, #392]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c2:	ee07 3a90 	vmov	s15, r3
 80084c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80084ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80084ce:	eddf 5a61 	vldr	s11, [pc, #388]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 80084d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80084d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80084da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80084de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80084e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80084e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80084ea:	e087      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80084ec:	693b      	ldr	r3, [r7, #16]
 80084ee:	ee07 3a90 	vmov	s15, r3
 80084f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80084f6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008658 <HAL_RCC_GetSysClockFreq+0x2e8>
 80084fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80084fe:	4b51      	ldr	r3, [pc, #324]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008502:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008506:	ee07 3a90 	vmov	s15, r3
 800850a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800850e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008512:	eddf 5a50 	vldr	s11, [pc, #320]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008516:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800851a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800851e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008522:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008526:	ee67 7a27 	vmul.f32	s15, s14, s15
 800852a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800852e:	e065      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	ee07 3a90 	vmov	s15, r3
 8008536:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800853a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800865c <HAL_RCC_GetSysClockFreq+0x2ec>
 800853e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008542:	4b40      	ldr	r3, [pc, #256]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800854a:	ee07 3a90 	vmov	s15, r3
 800854e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008552:	ed97 6a02 	vldr	s12, [r7, #8]
 8008556:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 800855a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800855e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008562:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008566:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800856a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800856e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008572:	e043      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	ee07 3a90 	vmov	s15, r3
 800857a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800857e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008660 <HAL_RCC_GetSysClockFreq+0x2f0>
 8008582:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008586:	4b2f      	ldr	r3, [pc, #188]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800858a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800858e:	ee07 3a90 	vmov	s15, r3
 8008592:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008596:	ed97 6a02 	vldr	s12, [r7, #8]
 800859a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 800859e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085b6:	e021      	b.n	80085fc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	ee07 3a90 	vmov	s15, r3
 80085be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085c2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800865c <HAL_RCC_GetSysClockFreq+0x2ec>
 80085c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ca:	4b1e      	ldr	r3, [pc, #120]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085d2:	ee07 3a90 	vmov	s15, r3
 80085d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085da:	ed97 6a02 	vldr	s12, [r7, #8]
 80085de:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8008654 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085f6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80085fa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80085fc:	4b11      	ldr	r3, [pc, #68]	; (8008644 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008600:	0a5b      	lsrs	r3, r3, #9
 8008602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008606:	3301      	adds	r3, #1
 8008608:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	ee07 3a90 	vmov	s15, r3
 8008610:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008614:	edd7 6a07 	vldr	s13, [r7, #28]
 8008618:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800861c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008620:	ee17 3a90 	vmov	r3, s15
 8008624:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8008626:	e005      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8008628:	2300      	movs	r3, #0
 800862a:	61bb      	str	r3, [r7, #24]
    break;
 800862c:	e002      	b.n	8008634 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800862e:	4b07      	ldr	r3, [pc, #28]	; (800864c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008630:	61bb      	str	r3, [r7, #24]
    break;
 8008632:	bf00      	nop
  }

  return sysclockfreq;
 8008634:	69bb      	ldr	r3, [r7, #24]
}
 8008636:	4618      	mov	r0, r3
 8008638:	3724      	adds	r7, #36	; 0x24
 800863a:	46bd      	mov	sp, r7
 800863c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008640:	4770      	bx	lr
 8008642:	bf00      	nop
 8008644:	58024400 	.word	0x58024400
 8008648:	03d09000 	.word	0x03d09000
 800864c:	003d0900 	.word	0x003d0900
 8008650:	007a1200 	.word	0x007a1200
 8008654:	46000000 	.word	0x46000000
 8008658:	4c742400 	.word	0x4c742400
 800865c:	4a742400 	.word	0x4a742400
 8008660:	4af42400 	.word	0x4af42400

08008664 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008664:	b580      	push	{r7, lr}
 8008666:	b082      	sub	sp, #8
 8008668:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800866a:	f7ff fe81 	bl	8008370 <HAL_RCC_GetSysClockFreq>
 800866e:	4602      	mov	r2, r0
 8008670:	4b10      	ldr	r3, [pc, #64]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x50>)
 8008672:	699b      	ldr	r3, [r3, #24]
 8008674:	0a1b      	lsrs	r3, r3, #8
 8008676:	f003 030f 	and.w	r3, r3, #15
 800867a:	490f      	ldr	r1, [pc, #60]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x54>)
 800867c:	5ccb      	ldrb	r3, [r1, r3]
 800867e:	f003 031f 	and.w	r3, r3, #31
 8008682:	fa22 f303 	lsr.w	r3, r2, r3
 8008686:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008688:	4b0a      	ldr	r3, [pc, #40]	; (80086b4 <HAL_RCC_GetHCLKFreq+0x50>)
 800868a:	699b      	ldr	r3, [r3, #24]
 800868c:	f003 030f 	and.w	r3, r3, #15
 8008690:	4a09      	ldr	r2, [pc, #36]	; (80086b8 <HAL_RCC_GetHCLKFreq+0x54>)
 8008692:	5cd3      	ldrb	r3, [r2, r3]
 8008694:	f003 031f 	and.w	r3, r3, #31
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	fa22 f303 	lsr.w	r3, r2, r3
 800869e:	4a07      	ldr	r2, [pc, #28]	; (80086bc <HAL_RCC_GetHCLKFreq+0x58>)
 80086a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80086a2:	4a07      	ldr	r2, [pc, #28]	; (80086c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80086a8:	4b04      	ldr	r3, [pc, #16]	; (80086bc <HAL_RCC_GetHCLKFreq+0x58>)
 80086aa:	681b      	ldr	r3, [r3, #0]
}
 80086ac:	4618      	mov	r0, r3
 80086ae:	3708      	adds	r7, #8
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	58024400 	.word	0x58024400
 80086b8:	0800d778 	.word	0x0800d778
 80086bc:	24000008 	.word	0x24000008
 80086c0:	24000004 	.word	0x24000004

080086c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80086c8:	f7ff ffcc 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 80086cc:	4602      	mov	r2, r0
 80086ce:	4b06      	ldr	r3, [pc, #24]	; (80086e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80086d0:	69db      	ldr	r3, [r3, #28]
 80086d2:	091b      	lsrs	r3, r3, #4
 80086d4:	f003 0307 	and.w	r3, r3, #7
 80086d8:	4904      	ldr	r1, [pc, #16]	; (80086ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80086da:	5ccb      	ldrb	r3, [r1, r3]
 80086dc:	f003 031f 	and.w	r3, r3, #31
 80086e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	bd80      	pop	{r7, pc}
 80086e8:	58024400 	.word	0x58024400
 80086ec:	0800d778 	.word	0x0800d778

080086f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80086f4:	f7ff ffb6 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 80086f8:	4602      	mov	r2, r0
 80086fa:	4b06      	ldr	r3, [pc, #24]	; (8008714 <HAL_RCC_GetPCLK2Freq+0x24>)
 80086fc:	69db      	ldr	r3, [r3, #28]
 80086fe:	0a1b      	lsrs	r3, r3, #8
 8008700:	f003 0307 	and.w	r3, r3, #7
 8008704:	4904      	ldr	r1, [pc, #16]	; (8008718 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008706:	5ccb      	ldrb	r3, [r1, r3]
 8008708:	f003 031f 	and.w	r3, r3, #31
 800870c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8008710:	4618      	mov	r0, r3
 8008712:	bd80      	pop	{r7, pc}
 8008714:	58024400 	.word	0x58024400
 8008718:	0800d778 	.word	0x0800d778

0800871c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008724:	2300      	movs	r3, #0
 8008726:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008728:	2300      	movs	r3, #0
 800872a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008734:	2b00      	cmp	r3, #0
 8008736:	d03f      	beq.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800873c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008740:	d02a      	beq.n	8008798 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8008742:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008746:	d824      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008748:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800874c:	d018      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800874e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008752:	d81e      	bhi.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8008754:	2b00      	cmp	r3, #0
 8008756:	d003      	beq.n	8008760 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8008758:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800875c:	d007      	beq.n	800876e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800875e:	e018      	b.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008760:	4ba3      	ldr	r3, [pc, #652]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008764:	4aa2      	ldr	r2, [pc, #648]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008766:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800876a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800876c:	e015      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	3304      	adds	r3, #4
 8008772:	2102      	movs	r1, #2
 8008774:	4618      	mov	r0, r3
 8008776:	f001 f9d5 	bl	8009b24 <RCCEx_PLL2_Config>
 800877a:	4603      	mov	r3, r0
 800877c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800877e:	e00c      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	3324      	adds	r3, #36	; 0x24
 8008784:	2102      	movs	r1, #2
 8008786:	4618      	mov	r0, r3
 8008788:	f001 fa7e 	bl	8009c88 <RCCEx_PLL3_Config>
 800878c:	4603      	mov	r3, r0
 800878e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8008790:	e003      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	75fb      	strb	r3, [r7, #23]
      break;
 8008796:	e000      	b.n	800879a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8008798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800879a:	7dfb      	ldrb	r3, [r7, #23]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d109      	bne.n	80087b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80087a0:	4b93      	ldr	r3, [pc, #588]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80087ac:	4990      	ldr	r1, [pc, #576]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ae:	4313      	orrs	r3, r2
 80087b0:	650b      	str	r3, [r1, #80]	; 0x50
 80087b2:	e001      	b.n	80087b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80087b4:	7dfb      	ldrb	r3, [r7, #23]
 80087b6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d03d      	beq.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087c8:	2b04      	cmp	r3, #4
 80087ca:	d826      	bhi.n	800881a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087e9 	.word	0x080087e9
 80087d8:	080087f7 	.word	0x080087f7
 80087dc:	08008809 	.word	0x08008809
 80087e0:	08008821 	.word	0x08008821
 80087e4:	08008821 	.word	0x08008821
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80087e8:	4b81      	ldr	r3, [pc, #516]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087ec:	4a80      	ldr	r2, [pc, #512]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80087ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80087f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80087f4:	e015      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	3304      	adds	r3, #4
 80087fa:	2100      	movs	r1, #0
 80087fc:	4618      	mov	r0, r3
 80087fe:	f001 f991 	bl	8009b24 <RCCEx_PLL2_Config>
 8008802:	4603      	mov	r3, r0
 8008804:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008806:	e00c      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	3324      	adds	r3, #36	; 0x24
 800880c:	2100      	movs	r1, #0
 800880e:	4618      	mov	r0, r3
 8008810:	f001 fa3a 	bl	8009c88 <RCCEx_PLL3_Config>
 8008814:	4603      	mov	r3, r0
 8008816:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008818:	e003      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	75fb      	strb	r3, [r7, #23]
      break;
 800881e:	e000      	b.n	8008822 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8008820:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008822:	7dfb      	ldrb	r3, [r7, #23]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d109      	bne.n	800883c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008828:	4b71      	ldr	r3, [pc, #452]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800882a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800882c:	f023 0207 	bic.w	r2, r3, #7
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008834:	496e      	ldr	r1, [pc, #440]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008836:	4313      	orrs	r3, r2
 8008838:	650b      	str	r3, [r1, #80]	; 0x50
 800883a:	e001      	b.n	8008840 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800883c:	7dfb      	ldrb	r3, [r7, #23]
 800883e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008848:	2b00      	cmp	r3, #0
 800884a:	d042      	beq.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008850:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008854:	d02b      	beq.n	80088ae <HAL_RCCEx_PeriphCLKConfig+0x192>
 8008856:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800885a:	d825      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800885c:	2bc0      	cmp	r3, #192	; 0xc0
 800885e:	d028      	beq.n	80088b2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8008860:	2bc0      	cmp	r3, #192	; 0xc0
 8008862:	d821      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8008864:	2b80      	cmp	r3, #128	; 0x80
 8008866:	d016      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8008868:	2b80      	cmp	r3, #128	; 0x80
 800886a:	d81d      	bhi.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800886c:	2b00      	cmp	r3, #0
 800886e:	d002      	beq.n	8008876 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8008870:	2b40      	cmp	r3, #64	; 0x40
 8008872:	d007      	beq.n	8008884 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8008874:	e018      	b.n	80088a8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008876:	4b5e      	ldr	r3, [pc, #376]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887a:	4a5d      	ldr	r2, [pc, #372]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800887c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008880:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008882:	e017      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	3304      	adds	r3, #4
 8008888:	2100      	movs	r1, #0
 800888a:	4618      	mov	r0, r3
 800888c:	f001 f94a 	bl	8009b24 <RCCEx_PLL2_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8008894:	e00e      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	3324      	adds	r3, #36	; 0x24
 800889a:	2100      	movs	r1, #0
 800889c:	4618      	mov	r0, r3
 800889e:	f001 f9f3 	bl	8009c88 <RCCEx_PLL3_Config>
 80088a2:	4603      	mov	r3, r0
 80088a4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80088a6:	e005      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80088a8:	2301      	movs	r3, #1
 80088aa:	75fb      	strb	r3, [r7, #23]
      break;
 80088ac:	e002      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088ae:	bf00      	nop
 80088b0:	e000      	b.n	80088b4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80088b2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80088b4:	7dfb      	ldrb	r3, [r7, #23]
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d109      	bne.n	80088ce <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80088ba:	4b4d      	ldr	r3, [pc, #308]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088be:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80088c6:	494a      	ldr	r1, [pc, #296]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	650b      	str	r3, [r1, #80]	; 0x50
 80088cc:	e001      	b.n	80088d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088ce:	7dfb      	ldrb	r3, [r7, #23]
 80088d0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d049      	beq.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80088e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088e8:	d030      	beq.n	800894c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80088ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80088ee:	d82a      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088f4:	d02c      	beq.n	8008950 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80088f6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80088fa:	d824      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80088fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008900:	d018      	beq.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8008902:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008906:	d81e      	bhi.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8008908:	2b00      	cmp	r3, #0
 800890a:	d003      	beq.n	8008914 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800890c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008910:	d007      	beq.n	8008922 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8008912:	e018      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008914:	4b36      	ldr	r3, [pc, #216]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	4a35      	ldr	r2, [pc, #212]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800891a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800891e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008920:	e017      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	3304      	adds	r3, #4
 8008926:	2100      	movs	r1, #0
 8008928:	4618      	mov	r0, r3
 800892a:	f001 f8fb 	bl	8009b24 <RCCEx_PLL2_Config>
 800892e:	4603      	mov	r3, r0
 8008930:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8008932:	e00e      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	3324      	adds	r3, #36	; 0x24
 8008938:	2100      	movs	r1, #0
 800893a:	4618      	mov	r0, r3
 800893c:	f001 f9a4 	bl	8009c88 <RCCEx_PLL3_Config>
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8008944:	e005      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8008946:	2301      	movs	r3, #1
 8008948:	75fb      	strb	r3, [r7, #23]
      break;
 800894a:	e002      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800894c:	bf00      	nop
 800894e:	e000      	b.n	8008952 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8008950:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008952:	7dfb      	ldrb	r3, [r7, #23]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d10a      	bne.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008958:	4b25      	ldr	r3, [pc, #148]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800895a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800895c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008966:	4922      	ldr	r1, [pc, #136]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8008968:	4313      	orrs	r3, r2
 800896a:	658b      	str	r3, [r1, #88]	; 0x58
 800896c:	e001      	b.n	8008972 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800896e:	7dfb      	ldrb	r3, [r7, #23]
 8008970:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800897a:	2b00      	cmp	r3, #0
 800897c:	d04b      	beq.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008984:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008988:	d030      	beq.n	80089ec <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800898a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800898e:	d82a      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8008990:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008994:	d02e      	beq.n	80089f4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8008996:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800899a:	d824      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800899c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a0:	d018      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80089a2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80089a6:	d81e      	bhi.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d003      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80089ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80089b0:	d007      	beq.n	80089c2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80089b2:	e018      	b.n	80089e6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b4:	4b0e      	ldr	r3, [pc, #56]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089b8:	4a0d      	ldr	r2, [pc, #52]	; (80089f0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80089ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089c0:	e019      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	3304      	adds	r3, #4
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f001 f8ab 	bl	8009b24 <RCCEx_PLL2_Config>
 80089ce:	4603      	mov	r3, r0
 80089d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80089d2:	e010      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	3324      	adds	r3, #36	; 0x24
 80089d8:	2100      	movs	r1, #0
 80089da:	4618      	mov	r0, r3
 80089dc:	f001 f954 	bl	8009c88 <RCCEx_PLL3_Config>
 80089e0:	4603      	mov	r3, r0
 80089e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80089e4:	e007      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80089e6:	2301      	movs	r3, #1
 80089e8:	75fb      	strb	r3, [r7, #23]
      break;
 80089ea:	e004      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80089ec:	bf00      	nop
 80089ee:	e002      	b.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80089f0:	58024400 	.word	0x58024400
      break;
 80089f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80089f6:	7dfb      	ldrb	r3, [r7, #23]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d10a      	bne.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80089fc:	4b99      	ldr	r3, [pc, #612]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80089fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a00:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008a0a:	4996      	ldr	r1, [pc, #600]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a0c:	4313      	orrs	r3, r2
 8008a0e:	658b      	str	r3, [r1, #88]	; 0x58
 8008a10:	e001      	b.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a12:	7dfb      	ldrb	r3, [r7, #23]
 8008a14:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d032      	beq.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a26:	2b30      	cmp	r3, #48	; 0x30
 8008a28:	d01c      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8008a2a:	2b30      	cmp	r3, #48	; 0x30
 8008a2c:	d817      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008a2e:	2b20      	cmp	r3, #32
 8008a30:	d00c      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8008a32:	2b20      	cmp	r3, #32
 8008a34:	d813      	bhi.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d016      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8008a3a:	2b10      	cmp	r3, #16
 8008a3c:	d10f      	bne.n	8008a5e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a3e:	4b89      	ldr	r3, [pc, #548]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a42:	4a88      	ldr	r2, [pc, #544]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a4a:	e00e      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	3304      	adds	r3, #4
 8008a50:	2102      	movs	r1, #2
 8008a52:	4618      	mov	r0, r3
 8008a54:	f001 f866 	bl	8009b24 <RCCEx_PLL2_Config>
 8008a58:	4603      	mov	r3, r0
 8008a5a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8008a5c:	e005      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	75fb      	strb	r3, [r7, #23]
      break;
 8008a62:	e002      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008a64:	bf00      	nop
 8008a66:	e000      	b.n	8008a6a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8008a68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008a6a:	7dfb      	ldrb	r3, [r7, #23]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d109      	bne.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008a70:	4b7c      	ldr	r3, [pc, #496]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a74:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008a7c:	4979      	ldr	r1, [pc, #484]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008a82:	e001      	b.n	8008a88 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a84:	7dfb      	ldrb	r3, [r7, #23]
 8008a86:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d047      	beq.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008a98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a9c:	d030      	beq.n	8008b00 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8008a9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008aa2:	d82a      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008aa4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aa8:	d02c      	beq.n	8008b04 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8008aaa:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008aae:	d824      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008ab0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ab4:	d018      	beq.n	8008ae8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8008ab6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aba:	d81e      	bhi.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d003      	beq.n	8008ac8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8008ac0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac4:	d007      	beq.n	8008ad6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8008ac6:	e018      	b.n	8008afa <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ac8:	4b66      	ldr	r3, [pc, #408]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008acc:	4a65      	ldr	r2, [pc, #404]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008ace:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ad2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ad4:	e017      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	3304      	adds	r3, #4
 8008ada:	2100      	movs	r1, #0
 8008adc:	4618      	mov	r0, r3
 8008ade:	f001 f821 	bl	8009b24 <RCCEx_PLL2_Config>
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008ae6:	e00e      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	3324      	adds	r3, #36	; 0x24
 8008aec:	2100      	movs	r1, #0
 8008aee:	4618      	mov	r0, r3
 8008af0:	f001 f8ca 	bl	8009c88 <RCCEx_PLL3_Config>
 8008af4:	4603      	mov	r3, r0
 8008af6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8008af8:	e005      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	75fb      	strb	r3, [r7, #23]
      break;
 8008afe:	e002      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008b00:	bf00      	nop
 8008b02:	e000      	b.n	8008b06 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8008b04:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008b06:	7dfb      	ldrb	r3, [r7, #23]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d109      	bne.n	8008b20 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008b0c:	4b55      	ldr	r3, [pc, #340]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b10:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b18:	4952      	ldr	r1, [pc, #328]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008b1a:	4313      	orrs	r3, r2
 8008b1c:	650b      	str	r3, [r1, #80]	; 0x50
 8008b1e:	e001      	b.n	8008b24 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b20:	7dfb      	ldrb	r3, [r7, #23]
 8008b22:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d049      	beq.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b38:	d02e      	beq.n	8008b98 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8008b3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008b3e:	d828      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b40:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b44:	d02a      	beq.n	8008b9c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8008b46:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008b4a:	d822      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b4c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b50:	d026      	beq.n	8008ba0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8008b52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008b56:	d81c      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b5c:	d010      	beq.n	8008b80 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8008b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008b62:	d816      	bhi.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d01d      	beq.n	8008ba4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8008b68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b6c:	d111      	bne.n	8008b92 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	3304      	adds	r3, #4
 8008b72:	2101      	movs	r1, #1
 8008b74:	4618      	mov	r0, r3
 8008b76:	f000 ffd5 	bl	8009b24 <RCCEx_PLL2_Config>
 8008b7a:	4603      	mov	r3, r0
 8008b7c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b7e:	e012      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	3324      	adds	r3, #36	; 0x24
 8008b84:	2101      	movs	r1, #1
 8008b86:	4618      	mov	r0, r3
 8008b88:	f001 f87e 	bl	8009c88 <RCCEx_PLL3_Config>
 8008b8c:	4603      	mov	r3, r0
 8008b8e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8008b90:	e009      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008b92:	2301      	movs	r3, #1
 8008b94:	75fb      	strb	r3, [r7, #23]
      break;
 8008b96:	e006      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e004      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008b9c:	bf00      	nop
 8008b9e:	e002      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e000      	b.n	8008ba6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8008ba4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008ba6:	7dfb      	ldrb	r3, [r7, #23]
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d109      	bne.n	8008bc0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008bac:	4b2d      	ldr	r3, [pc, #180]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008bb8:	492a      	ldr	r1, [pc, #168]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008bba:	4313      	orrs	r3, r2
 8008bbc:	650b      	str	r3, [r1, #80]	; 0x50
 8008bbe:	e001      	b.n	8008bc4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bc0:	7dfb      	ldrb	r3, [r7, #23]
 8008bc2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d04d      	beq.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008bd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008bda:	d02e      	beq.n	8008c3a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8008bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008be0:	d828      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008be6:	d02a      	beq.n	8008c3e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8008be8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008bec:	d822      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008bee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf2:	d026      	beq.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8008bf4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008bf8:	d81c      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008bfa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008bfe:	d010      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8008c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c04:	d816      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d01d      	beq.n	8008c46 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8008c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c0e:	d111      	bne.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	3304      	adds	r3, #4
 8008c14:	2101      	movs	r1, #1
 8008c16:	4618      	mov	r0, r3
 8008c18:	f000 ff84 	bl	8009b24 <RCCEx_PLL2_Config>
 8008c1c:	4603      	mov	r3, r0
 8008c1e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c20:	e012      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	3324      	adds	r3, #36	; 0x24
 8008c26:	2101      	movs	r1, #1
 8008c28:	4618      	mov	r0, r3
 8008c2a:	f001 f82d 	bl	8009c88 <RCCEx_PLL3_Config>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8008c32:	e009      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	75fb      	strb	r3, [r7, #23]
      break;
 8008c38:	e006      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c3a:	bf00      	nop
 8008c3c:	e004      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c3e:	bf00      	nop
 8008c40:	e002      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c42:	bf00      	nop
 8008c44:	e000      	b.n	8008c48 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8008c46:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008c48:	7dfb      	ldrb	r3, [r7, #23]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d10c      	bne.n	8008c68 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008c4e:	4b05      	ldr	r3, [pc, #20]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c52:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c5c:	4901      	ldr	r1, [pc, #4]	; (8008c64 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	658b      	str	r3, [r1, #88]	; 0x58
 8008c62:	e003      	b.n	8008c6c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8008c64:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c68:	7dfb      	ldrb	r3, [r7, #23]
 8008c6a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d02f      	beq.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c80:	d00e      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8008c82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008c86:	d814      	bhi.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d015      	beq.n	8008cb8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8008c8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008c90:	d10f      	bne.n	8008cb2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008c92:	4baf      	ldr	r3, [pc, #700]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c96:	4aae      	ldr	r2, [pc, #696]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008c98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008c9e:	e00c      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	3304      	adds	r3, #4
 8008ca4:	2101      	movs	r1, #1
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f000 ff3c 	bl	8009b24 <RCCEx_PLL2_Config>
 8008cac:	4603      	mov	r3, r0
 8008cae:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8008cb0:	e003      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008cb2:	2301      	movs	r3, #1
 8008cb4:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb6:	e000      	b.n	8008cba <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8008cb8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008cba:	7dfb      	ldrb	r3, [r7, #23]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008cc0:	4ba3      	ldr	r3, [pc, #652]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008cc4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ccc:	49a0      	ldr	r1, [pc, #640]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008cce:	4313      	orrs	r3, r2
 8008cd0:	650b      	str	r3, [r1, #80]	; 0x50
 8008cd2:	e001      	b.n	8008cd8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	d032      	beq.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d81b      	bhi.n	8008d24 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8008cec:	a201      	add	r2, pc, #4	; (adr r2, 8008cf4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d2b 	.word	0x08008d2b
 8008cf8:	08008d05 	.word	0x08008d05
 8008cfc:	08008d13 	.word	0x08008d13
 8008d00:	08008d2b 	.word	0x08008d2b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d04:	4b92      	ldr	r3, [pc, #584]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d08:	4a91      	ldr	r2, [pc, #580]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d10:	e00c      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3304      	adds	r3, #4
 8008d16:	2102      	movs	r1, #2
 8008d18:	4618      	mov	r0, r3
 8008d1a:	f000 ff03 	bl	8009b24 <RCCEx_PLL2_Config>
 8008d1e:	4603      	mov	r3, r0
 8008d20:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8008d22:	e003      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8008d24:	2301      	movs	r3, #1
 8008d26:	75fb      	strb	r3, [r7, #23]
      break;
 8008d28:	e000      	b.n	8008d2c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8008d2a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008d2c:	7dfb      	ldrb	r3, [r7, #23]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d109      	bne.n	8008d46 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008d32:	4b87      	ldr	r3, [pc, #540]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d36:	f023 0203 	bic.w	r2, r3, #3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d3e:	4984      	ldr	r1, [pc, #528]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d40:	4313      	orrs	r3, r2
 8008d42:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008d44:	e001      	b.n	8008d4a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d46:	7dfb      	ldrb	r3, [r7, #23]
 8008d48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	f000 8086 	beq.w	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008d58:	4b7e      	ldr	r3, [pc, #504]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a7d      	ldr	r2, [pc, #500]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d5e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d62:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d64:	f7fb f99a 	bl	800409c <HAL_GetTick>
 8008d68:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d6a:	e009      	b.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d6c:	f7fb f996 	bl	800409c <HAL_GetTick>
 8008d70:	4602      	mov	r2, r0
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	1ad3      	subs	r3, r2, r3
 8008d76:	2b64      	cmp	r3, #100	; 0x64
 8008d78:	d902      	bls.n	8008d80 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	75fb      	strb	r3, [r7, #23]
        break;
 8008d7e:	e005      	b.n	8008d8c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d80:	4b74      	ldr	r3, [pc, #464]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d0ef      	beq.n	8008d6c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8008d8c:	7dfb      	ldrb	r3, [r7, #23]
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d166      	bne.n	8008e60 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8008d92:	4b6f      	ldr	r3, [pc, #444]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008d94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008d9c:	4053      	eors	r3, r2
 8008d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d013      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008da6:	4b6a      	ldr	r3, [pc, #424]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008daa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008dae:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008db0:	4b67      	ldr	r3, [pc, #412]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008db2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db4:	4a66      	ldr	r2, [pc, #408]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008db6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008dba:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008dbc:	4b64      	ldr	r3, [pc, #400]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dc0:	4a63      	ldr	r2, [pc, #396]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8008dc8:	4a61      	ldr	r2, [pc, #388]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008dd4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008dd8:	d115      	bne.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dda:	f7fb f95f 	bl	800409c <HAL_GetTick>
 8008dde:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008de0:	e00b      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008de2:	f7fb f95b 	bl	800409c <HAL_GetTick>
 8008de6:	4602      	mov	r2, r0
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	1ad3      	subs	r3, r2, r3
 8008dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8008df0:	4293      	cmp	r3, r2
 8008df2:	d902      	bls.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	75fb      	strb	r3, [r7, #23]
            break;
 8008df8:	e005      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dfa:	4b55      	ldr	r3, [pc, #340]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dfe:	f003 0302 	and.w	r3, r3, #2
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0ed      	beq.n	8008de2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8008e06:	7dfb      	ldrb	r3, [r7, #23]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d126      	bne.n	8008e5a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008e1a:	d10d      	bne.n	8008e38 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8008e1c:	4b4c      	ldr	r3, [pc, #304]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e1e:	691b      	ldr	r3, [r3, #16]
 8008e20:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e2a:	0919      	lsrs	r1, r3, #4
 8008e2c:	4b4a      	ldr	r3, [pc, #296]	; (8008f58 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8008e2e:	400b      	ands	r3, r1
 8008e30:	4947      	ldr	r1, [pc, #284]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	610b      	str	r3, [r1, #16]
 8008e36:	e005      	b.n	8008e44 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008e38:	4b45      	ldr	r3, [pc, #276]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	4a44      	ldr	r2, [pc, #272]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008e42:	6113      	str	r3, [r2, #16]
 8008e44:	4b42      	ldr	r3, [pc, #264]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e46:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008e4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008e52:	493f      	ldr	r1, [pc, #252]	; (8008f50 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	670b      	str	r3, [r1, #112]	; 0x70
 8008e58:	e004      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008e5a:	7dfb      	ldrb	r3, [r7, #23]
 8008e5c:	75bb      	strb	r3, [r7, #22]
 8008e5e:	e001      	b.n	8008e64 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e60:	7dfb      	ldrb	r3, [r7, #23]
 8008e62:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0301 	and.w	r3, r3, #1
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	f000 8085 	beq.w	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e76:	2b28      	cmp	r3, #40	; 0x28
 8008e78:	d866      	bhi.n	8008f48 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8008e7a:	a201      	add	r2, pc, #4	; (adr r2, 8008e80 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8008e7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e80:	08008f5d 	.word	0x08008f5d
 8008e84:	08008f49 	.word	0x08008f49
 8008e88:	08008f49 	.word	0x08008f49
 8008e8c:	08008f49 	.word	0x08008f49
 8008e90:	08008f49 	.word	0x08008f49
 8008e94:	08008f49 	.word	0x08008f49
 8008e98:	08008f49 	.word	0x08008f49
 8008e9c:	08008f49 	.word	0x08008f49
 8008ea0:	08008f25 	.word	0x08008f25
 8008ea4:	08008f49 	.word	0x08008f49
 8008ea8:	08008f49 	.word	0x08008f49
 8008eac:	08008f49 	.word	0x08008f49
 8008eb0:	08008f49 	.word	0x08008f49
 8008eb4:	08008f49 	.word	0x08008f49
 8008eb8:	08008f49 	.word	0x08008f49
 8008ebc:	08008f49 	.word	0x08008f49
 8008ec0:	08008f37 	.word	0x08008f37
 8008ec4:	08008f49 	.word	0x08008f49
 8008ec8:	08008f49 	.word	0x08008f49
 8008ecc:	08008f49 	.word	0x08008f49
 8008ed0:	08008f49 	.word	0x08008f49
 8008ed4:	08008f49 	.word	0x08008f49
 8008ed8:	08008f49 	.word	0x08008f49
 8008edc:	08008f49 	.word	0x08008f49
 8008ee0:	08008f5d 	.word	0x08008f5d
 8008ee4:	08008f49 	.word	0x08008f49
 8008ee8:	08008f49 	.word	0x08008f49
 8008eec:	08008f49 	.word	0x08008f49
 8008ef0:	08008f49 	.word	0x08008f49
 8008ef4:	08008f49 	.word	0x08008f49
 8008ef8:	08008f49 	.word	0x08008f49
 8008efc:	08008f49 	.word	0x08008f49
 8008f00:	08008f5d 	.word	0x08008f5d
 8008f04:	08008f49 	.word	0x08008f49
 8008f08:	08008f49 	.word	0x08008f49
 8008f0c:	08008f49 	.word	0x08008f49
 8008f10:	08008f49 	.word	0x08008f49
 8008f14:	08008f49 	.word	0x08008f49
 8008f18:	08008f49 	.word	0x08008f49
 8008f1c:	08008f49 	.word	0x08008f49
 8008f20:	08008f5d 	.word	0x08008f5d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	3304      	adds	r3, #4
 8008f28:	2101      	movs	r1, #1
 8008f2a:	4618      	mov	r0, r3
 8008f2c:	f000 fdfa 	bl	8009b24 <RCCEx_PLL2_Config>
 8008f30:	4603      	mov	r3, r0
 8008f32:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f34:	e013      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3324      	adds	r3, #36	; 0x24
 8008f3a:	2101      	movs	r1, #1
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fea3 	bl	8009c88 <RCCEx_PLL3_Config>
 8008f42:	4603      	mov	r3, r0
 8008f44:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008f46:	e00a      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008f48:	2301      	movs	r3, #1
 8008f4a:	75fb      	strb	r3, [r7, #23]
      break;
 8008f4c:	e007      	b.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008f4e:	bf00      	nop
 8008f50:	58024400 	.word	0x58024400
 8008f54:	58024800 	.word	0x58024800
 8008f58:	00ffffcf 	.word	0x00ffffcf
      break;
 8008f5c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008f5e:	7dfb      	ldrb	r3, [r7, #23]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d109      	bne.n	8008f78 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008f64:	4b96      	ldr	r3, [pc, #600]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f68:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008f70:	4993      	ldr	r1, [pc, #588]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008f72:	4313      	orrs	r3, r2
 8008f74:	654b      	str	r3, [r1, #84]	; 0x54
 8008f76:	e001      	b.n	8008f7c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f78:	7dfb      	ldrb	r3, [r7, #23]
 8008f7a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0302 	and.w	r3, r3, #2
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d038      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f8c:	2b05      	cmp	r3, #5
 8008f8e:	d821      	bhi.n	8008fd4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8008f90:	a201      	add	r2, pc, #4	; (adr r2, 8008f98 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8008f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f96:	bf00      	nop
 8008f98:	08008fdb 	.word	0x08008fdb
 8008f9c:	08008fb1 	.word	0x08008fb1
 8008fa0:	08008fc3 	.word	0x08008fc3
 8008fa4:	08008fdb 	.word	0x08008fdb
 8008fa8:	08008fdb 	.word	0x08008fdb
 8008fac:	08008fdb 	.word	0x08008fdb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	3304      	adds	r3, #4
 8008fb4:	2101      	movs	r1, #1
 8008fb6:	4618      	mov	r0, r3
 8008fb8:	f000 fdb4 	bl	8009b24 <RCCEx_PLL2_Config>
 8008fbc:	4603      	mov	r3, r0
 8008fbe:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fc0:	e00c      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	3324      	adds	r3, #36	; 0x24
 8008fc6:	2101      	movs	r1, #1
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f000 fe5d 	bl	8009c88 <RCCEx_PLL3_Config>
 8008fce:	4603      	mov	r3, r0
 8008fd0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8008fd2:	e003      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	75fb      	strb	r3, [r7, #23]
      break;
 8008fd8:	e000      	b.n	8008fdc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8008fda:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008fdc:	7dfb      	ldrb	r3, [r7, #23]
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d109      	bne.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008fe2:	4b77      	ldr	r3, [pc, #476]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe6:	f023 0207 	bic.w	r2, r3, #7
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fee:	4974      	ldr	r1, [pc, #464]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008ff0:	4313      	orrs	r3, r2
 8008ff2:	654b      	str	r3, [r1, #84]	; 0x54
 8008ff4:	e001      	b.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ff6:	7dfb      	ldrb	r3, [r7, #23]
 8008ff8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f003 0304 	and.w	r3, r3, #4
 8009002:	2b00      	cmp	r3, #0
 8009004:	d03a      	beq.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800900c:	2b05      	cmp	r3, #5
 800900e:	d821      	bhi.n	8009054 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8009010:	a201      	add	r2, pc, #4	; (adr r2, 8009018 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8009012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009016:	bf00      	nop
 8009018:	0800905b 	.word	0x0800905b
 800901c:	08009031 	.word	0x08009031
 8009020:	08009043 	.word	0x08009043
 8009024:	0800905b 	.word	0x0800905b
 8009028:	0800905b 	.word	0x0800905b
 800902c:	0800905b 	.word	0x0800905b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	3304      	adds	r3, #4
 8009034:	2101      	movs	r1, #1
 8009036:	4618      	mov	r0, r3
 8009038:	f000 fd74 	bl	8009b24 <RCCEx_PLL2_Config>
 800903c:	4603      	mov	r3, r0
 800903e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009040:	e00c      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	3324      	adds	r3, #36	; 0x24
 8009046:	2101      	movs	r1, #1
 8009048:	4618      	mov	r0, r3
 800904a:	f000 fe1d 	bl	8009c88 <RCCEx_PLL3_Config>
 800904e:	4603      	mov	r3, r0
 8009050:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8009052:	e003      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009054:	2301      	movs	r3, #1
 8009056:	75fb      	strb	r3, [r7, #23]
      break;
 8009058:	e000      	b.n	800905c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800905a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800905c:	7dfb      	ldrb	r3, [r7, #23]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009062:	4b57      	ldr	r3, [pc, #348]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009066:	f023 0207 	bic.w	r2, r3, #7
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009070:	4953      	ldr	r1, [pc, #332]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009072:	4313      	orrs	r3, r2
 8009074:	658b      	str	r3, [r1, #88]	; 0x58
 8009076:	e001      	b.n	800907c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009078:	7dfb      	ldrb	r3, [r7, #23]
 800907a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f003 0320 	and.w	r3, r3, #32
 8009084:	2b00      	cmp	r3, #0
 8009086:	d04b      	beq.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800908e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009092:	d02e      	beq.n	80090f2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8009094:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009098:	d828      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800909a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800909e:	d02a      	beq.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80090a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80090a4:	d822      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80090a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090aa:	d026      	beq.n	80090fa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80090ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80090b0:	d81c      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80090b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090b6:	d010      	beq.n	80090da <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80090b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80090bc:	d816      	bhi.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d01d      	beq.n	80090fe <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80090c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80090c6:	d111      	bne.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	3304      	adds	r3, #4
 80090cc:	2100      	movs	r1, #0
 80090ce:	4618      	mov	r0, r3
 80090d0:	f000 fd28 	bl	8009b24 <RCCEx_PLL2_Config>
 80090d4:	4603      	mov	r3, r0
 80090d6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090d8:	e012      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	3324      	adds	r3, #36	; 0x24
 80090de:	2102      	movs	r1, #2
 80090e0:	4618      	mov	r0, r3
 80090e2:	f000 fdd1 	bl	8009c88 <RCCEx_PLL3_Config>
 80090e6:	4603      	mov	r3, r0
 80090e8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80090ea:	e009      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
      break;
 80090f0:	e006      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090f2:	bf00      	nop
 80090f4:	e004      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090f6:	bf00      	nop
 80090f8:	e002      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090fa:	bf00      	nop
 80090fc:	e000      	b.n	8009100 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80090fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009100:	7dfb      	ldrb	r3, [r7, #23]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d10a      	bne.n	800911c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009106:	4b2e      	ldr	r3, [pc, #184]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800910a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009114:	492a      	ldr	r1, [pc, #168]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8009116:	4313      	orrs	r3, r2
 8009118:	654b      	str	r3, [r1, #84]	; 0x54
 800911a:	e001      	b.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800911c:	7dfb      	ldrb	r3, [r7, #23]
 800911e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009128:	2b00      	cmp	r3, #0
 800912a:	d04d      	beq.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009132:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009136:	d02e      	beq.n	8009196 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8009138:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800913c:	d828      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800913e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009142:	d02a      	beq.n	800919a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8009144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009148:	d822      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800914a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800914e:	d026      	beq.n	800919e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8009150:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009154:	d81c      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009156:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800915a:	d010      	beq.n	800917e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800915c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009160:	d816      	bhi.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8009162:	2b00      	cmp	r3, #0
 8009164:	d01d      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8009166:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800916a:	d111      	bne.n	8009190 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	3304      	adds	r3, #4
 8009170:	2100      	movs	r1, #0
 8009172:	4618      	mov	r0, r3
 8009174:	f000 fcd6 	bl	8009b24 <RCCEx_PLL2_Config>
 8009178:	4603      	mov	r3, r0
 800917a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800917c:	e012      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	3324      	adds	r3, #36	; 0x24
 8009182:	2102      	movs	r1, #2
 8009184:	4618      	mov	r0, r3
 8009186:	f000 fd7f 	bl	8009c88 <RCCEx_PLL3_Config>
 800918a:	4603      	mov	r3, r0
 800918c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800918e:	e009      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	75fb      	strb	r3, [r7, #23]
      break;
 8009194:	e006      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8009196:	bf00      	nop
 8009198:	e004      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800919a:	bf00      	nop
 800919c:	e002      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800919e:	bf00      	nop
 80091a0:	e000      	b.n	80091a4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80091a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091a4:	7dfb      	ldrb	r3, [r7, #23]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d10c      	bne.n	80091c4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80091aa:	4b05      	ldr	r3, [pc, #20]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80091ae:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80091b8:	4901      	ldr	r1, [pc, #4]	; (80091c0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	658b      	str	r3, [r1, #88]	; 0x58
 80091be:	e003      	b.n	80091c8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80091c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80091c4:	7dfb      	ldrb	r3, [r7, #23]
 80091c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d04b      	beq.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091da:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091de:	d02e      	beq.n	800923e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80091e0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80091e4:	d828      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091ea:	d02a      	beq.n	8009242 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80091ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80091f0:	d822      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091f2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091f6:	d026      	beq.n	8009246 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80091f8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80091fc:	d81c      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80091fe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009202:	d010      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8009204:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009208:	d816      	bhi.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800920a:	2b00      	cmp	r3, #0
 800920c:	d01d      	beq.n	800924a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800920e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009212:	d111      	bne.n	8009238 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	3304      	adds	r3, #4
 8009218:	2100      	movs	r1, #0
 800921a:	4618      	mov	r0, r3
 800921c:	f000 fc82 	bl	8009b24 <RCCEx_PLL2_Config>
 8009220:	4603      	mov	r3, r0
 8009222:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009224:	e012      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	3324      	adds	r3, #36	; 0x24
 800922a:	2102      	movs	r1, #2
 800922c:	4618      	mov	r0, r3
 800922e:	f000 fd2b 	bl	8009c88 <RCCEx_PLL3_Config>
 8009232:	4603      	mov	r3, r0
 8009234:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8009236:	e009      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009238:	2301      	movs	r3, #1
 800923a:	75fb      	strb	r3, [r7, #23]
      break;
 800923c:	e006      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800923e:	bf00      	nop
 8009240:	e004      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009242:	bf00      	nop
 8009244:	e002      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8009246:	bf00      	nop
 8009248:	e000      	b.n	800924c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800924a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800924c:	7dfb      	ldrb	r3, [r7, #23]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d10a      	bne.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8009252:	4b9d      	ldr	r3, [pc, #628]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009256:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009260:	4999      	ldr	r1, [pc, #612]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009262:	4313      	orrs	r3, r2
 8009264:	658b      	str	r3, [r1, #88]	; 0x58
 8009266:	e001      	b.n	800926c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009268:	7dfb      	ldrb	r3, [r7, #23]
 800926a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	f003 0308 	and.w	r3, r3, #8
 8009274:	2b00      	cmp	r3, #0
 8009276:	d01a      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800927e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009282:	d10a      	bne.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	3324      	adds	r3, #36	; 0x24
 8009288:	2102      	movs	r1, #2
 800928a:	4618      	mov	r0, r3
 800928c:	f000 fcfc 	bl	8009c88 <RCCEx_PLL3_Config>
 8009290:	4603      	mov	r3, r0
 8009292:	2b00      	cmp	r3, #0
 8009294:	d001      	beq.n	800929a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8009296:	2301      	movs	r3, #1
 8009298:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800929a:	4b8b      	ldr	r3, [pc, #556]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800929c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800929e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80092a8:	4987      	ldr	r1, [pc, #540]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0310 	and.w	r3, r3, #16
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d01a      	beq.n	80092f0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092c4:	d10a      	bne.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	3324      	adds	r3, #36	; 0x24
 80092ca:	2102      	movs	r1, #2
 80092cc:	4618      	mov	r0, r3
 80092ce:	f000 fcdb 	bl	8009c88 <RCCEx_PLL3_Config>
 80092d2:	4603      	mov	r3, r0
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d001      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80092d8:	2301      	movs	r3, #1
 80092da:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092dc:	4b7a      	ldr	r3, [pc, #488]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80092ea:	4977      	ldr	r1, [pc, #476]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80092ec:	4313      	orrs	r3, r2
 80092ee:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d034      	beq.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009302:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009306:	d01d      	beq.n	8009344 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8009308:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800930c:	d817      	bhi.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800930e:	2b00      	cmp	r3, #0
 8009310:	d003      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8009312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009316:	d009      	beq.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8009318:	e011      	b.n	800933e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	3304      	adds	r3, #4
 800931e:	2100      	movs	r1, #0
 8009320:	4618      	mov	r0, r3
 8009322:	f000 fbff 	bl	8009b24 <RCCEx_PLL2_Config>
 8009326:	4603      	mov	r3, r0
 8009328:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800932a:	e00c      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	3324      	adds	r3, #36	; 0x24
 8009330:	2102      	movs	r1, #2
 8009332:	4618      	mov	r0, r3
 8009334:	f000 fca8 	bl	8009c88 <RCCEx_PLL3_Config>
 8009338:	4603      	mov	r3, r0
 800933a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800933c:	e003      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	75fb      	strb	r3, [r7, #23]
      break;
 8009342:	e000      	b.n	8009346 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8009344:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009346:	7dfb      	ldrb	r3, [r7, #23]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d10a      	bne.n	8009362 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800934c:	4b5e      	ldr	r3, [pc, #376]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800934e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009350:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800935a:	495b      	ldr	r1, [pc, #364]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800935c:	4313      	orrs	r3, r2
 800935e:	658b      	str	r3, [r1, #88]	; 0x58
 8009360:	e001      	b.n	8009366 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009362:	7dfb      	ldrb	r3, [r7, #23]
 8009364:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800936e:	2b00      	cmp	r3, #0
 8009370:	d033      	beq.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009378:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800937c:	d01c      	beq.n	80093b8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800937e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009382:	d816      	bhi.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8009384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009388:	d003      	beq.n	8009392 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800938a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800938e:	d007      	beq.n	80093a0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8009390:	e00f      	b.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009392:	4b4d      	ldr	r3, [pc, #308]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009396:	4a4c      	ldr	r2, [pc, #304]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800939c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800939e:	e00c      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	2101      	movs	r1, #1
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fc6e 	bl	8009c88 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80093b0:	e003      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
      break;
 80093b6:	e000      	b.n	80093ba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80093b8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80093ba:	7dfb      	ldrb	r3, [r7, #23]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10a      	bne.n	80093d6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80093c0:	4b41      	ldr	r3, [pc, #260]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093ce:	493e      	ldr	r1, [pc, #248]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093d0:	4313      	orrs	r3, r2
 80093d2:	654b      	str	r3, [r1, #84]	; 0x54
 80093d4:	e001      	b.n	80093da <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d029      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d003      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80093ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80093f2:	d007      	beq.n	8009404 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80093f4:	e00f      	b.n	8009416 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80093f6:	4b34      	ldr	r3, [pc, #208]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093fa:	4a33      	ldr	r2, [pc, #204]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80093fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009400:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009402:	e00b      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	3304      	adds	r3, #4
 8009408:	2102      	movs	r1, #2
 800940a:	4618      	mov	r0, r3
 800940c:	f000 fb8a 	bl	8009b24 <RCCEx_PLL2_Config>
 8009410:	4603      	mov	r3, r0
 8009412:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8009414:	e002      	b.n	800941c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	75fb      	strb	r3, [r7, #23]
      break;
 800941a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800941c:	7dfb      	ldrb	r3, [r7, #23]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d109      	bne.n	8009436 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009422:	4b29      	ldr	r3, [pc, #164]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009426:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800942e:	4926      	ldr	r1, [pc, #152]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009430:	4313      	orrs	r3, r2
 8009432:	64cb      	str	r3, [r1, #76]	; 0x4c
 8009434:	e001      	b.n	800943a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009436:	7dfb      	ldrb	r3, [r7, #23]
 8009438:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d00a      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	3324      	adds	r3, #36	; 0x24
 800944a:	2102      	movs	r1, #2
 800944c:	4618      	mov	r0, r3
 800944e:	f000 fc1b 	bl	8009c88 <RCCEx_PLL3_Config>
 8009452:	4603      	mov	r3, r0
 8009454:	2b00      	cmp	r3, #0
 8009456:	d001      	beq.n	800945c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009464:	2b00      	cmp	r3, #0
 8009466:	d033      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800946c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009470:	d017      	beq.n	80094a2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8009472:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009476:	d811      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009478:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800947c:	d013      	beq.n	80094a6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800947e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009482:	d80b      	bhi.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8009484:	2b00      	cmp	r3, #0
 8009486:	d010      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8009488:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800948c:	d106      	bne.n	800949c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800948e:	4b0e      	ldr	r3, [pc, #56]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009490:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009492:	4a0d      	ldr	r2, [pc, #52]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8009494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009498:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800949a:	e007      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800949c:	2301      	movs	r3, #1
 800949e:	75fb      	strb	r3, [r7, #23]
      break;
 80094a0:	e004      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80094a2:	bf00      	nop
 80094a4:	e002      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80094a6:	bf00      	nop
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80094aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80094ac:	7dfb      	ldrb	r3, [r7, #23]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d10c      	bne.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80094b2:	4b05      	ldr	r3, [pc, #20]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094be:	4902      	ldr	r1, [pc, #8]	; (80094c8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80094c0:	4313      	orrs	r3, r2
 80094c2:	654b      	str	r3, [r1, #84]	; 0x54
 80094c4:	e004      	b.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80094c6:	bf00      	nop
 80094c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80094cc:	7dfb      	ldrb	r3, [r7, #23]
 80094ce:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d008      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80094dc:	4b31      	ldr	r3, [pc, #196]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80094e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80094e8:	492e      	ldr	r1, [pc, #184]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094ea:	4313      	orrs	r3, r2
 80094ec:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d009      	beq.n	800950e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80094fa:	4b2a      	ldr	r3, [pc, #168]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009508:	4926      	ldr	r1, [pc, #152]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800950a:	4313      	orrs	r3, r2
 800950c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009516:	2b00      	cmp	r3, #0
 8009518:	d008      	beq.n	800952c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800951a:	4b22      	ldr	r3, [pc, #136]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800951c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800951e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009526:	491f      	ldr	r1, [pc, #124]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009528:	4313      	orrs	r3, r2
 800952a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009534:	2b00      	cmp	r3, #0
 8009536:	d00d      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009538:	4b1a      	ldr	r3, [pc, #104]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800953a:	691b      	ldr	r3, [r3, #16]
 800953c:	4a19      	ldr	r2, [pc, #100]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800953e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009542:	6113      	str	r3, [r2, #16]
 8009544:	4b17      	ldr	r3, [pc, #92]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009546:	691a      	ldr	r2, [r3, #16]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800954e:	4915      	ldr	r1, [pc, #84]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8009550:	4313      	orrs	r3, r2
 8009552:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	2b00      	cmp	r3, #0
 800955a:	da08      	bge.n	800956e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800955c:	4b11      	ldr	r3, [pc, #68]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800955e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009560:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009568:	490e      	ldr	r1, [pc, #56]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800956a:	4313      	orrs	r3, r2
 800956c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009576:	2b00      	cmp	r3, #0
 8009578:	d009      	beq.n	800958e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800957a:	4b0a      	ldr	r3, [pc, #40]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800957c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800957e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009588:	4906      	ldr	r1, [pc, #24]	; (80095a4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800958a:	4313      	orrs	r3, r2
 800958c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800958e:	7dbb      	ldrb	r3, [r7, #22]
 8009590:	2b00      	cmp	r3, #0
 8009592:	d101      	bne.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8009594:	2300      	movs	r3, #0
 8009596:	e000      	b.n	800959a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8009598:	2301      	movs	r3, #1
}
 800959a:	4618      	mov	r0, r3
 800959c:	3718      	adds	r7, #24
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	58024400 	.word	0x58024400

080095a8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80095ac:	f7ff f85a 	bl	8008664 <HAL_RCC_GetHCLKFreq>
 80095b0:	4602      	mov	r2, r0
 80095b2:	4b06      	ldr	r3, [pc, #24]	; (80095cc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80095b4:	6a1b      	ldr	r3, [r3, #32]
 80095b6:	091b      	lsrs	r3, r3, #4
 80095b8:	f003 0307 	and.w	r3, r3, #7
 80095bc:	4904      	ldr	r1, [pc, #16]	; (80095d0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80095be:	5ccb      	ldrb	r3, [r1, r3]
 80095c0:	f003 031f 	and.w	r3, r3, #31
 80095c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80095c8:	4618      	mov	r0, r3
 80095ca:	bd80      	pop	{r7, pc}
 80095cc:	58024400 	.word	0x58024400
 80095d0:	0800d778 	.word	0x0800d778

080095d4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80095d4:	b480      	push	{r7}
 80095d6:	b089      	sub	sp, #36	; 0x24
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80095dc:	4ba1      	ldr	r3, [pc, #644]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e0:	f003 0303 	and.w	r3, r3, #3
 80095e4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80095e6:	4b9f      	ldr	r3, [pc, #636]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095ea:	0b1b      	lsrs	r3, r3, #12
 80095ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80095f0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80095f2:	4b9c      	ldr	r3, [pc, #624]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80095f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f6:	091b      	lsrs	r3, r3, #4
 80095f8:	f003 0301 	and.w	r3, r3, #1
 80095fc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80095fe:	4b99      	ldr	r3, [pc, #612]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009600:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009602:	08db      	lsrs	r3, r3, #3
 8009604:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009608:	693a      	ldr	r2, [r7, #16]
 800960a:	fb02 f303 	mul.w	r3, r2, r3
 800960e:	ee07 3a90 	vmov	s15, r3
 8009612:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009616:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	2b00      	cmp	r3, #0
 800961e:	f000 8111 	beq.w	8009844 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	2b02      	cmp	r3, #2
 8009626:	f000 8083 	beq.w	8009730 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800962a:	69bb      	ldr	r3, [r7, #24]
 800962c:	2b02      	cmp	r3, #2
 800962e:	f200 80a1 	bhi.w	8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8009632:	69bb      	ldr	r3, [r7, #24]
 8009634:	2b00      	cmp	r3, #0
 8009636:	d003      	beq.n	8009640 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8009638:	69bb      	ldr	r3, [r7, #24]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d056      	beq.n	80096ec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800963e:	e099      	b.n	8009774 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009640:	4b88      	ldr	r3, [pc, #544]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	f003 0320 	and.w	r3, r3, #32
 8009648:	2b00      	cmp	r3, #0
 800964a:	d02d      	beq.n	80096a8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800964c:	4b85      	ldr	r3, [pc, #532]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	08db      	lsrs	r3, r3, #3
 8009652:	f003 0303 	and.w	r3, r3, #3
 8009656:	4a84      	ldr	r2, [pc, #528]	; (8009868 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8009658:	fa22 f303 	lsr.w	r3, r2, r3
 800965c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	ee07 3a90 	vmov	s15, r3
 8009664:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	ee07 3a90 	vmov	s15, r3
 800966e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009672:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009676:	4b7b      	ldr	r3, [pc, #492]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800967a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800967e:	ee07 3a90 	vmov	s15, r3
 8009682:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009686:	ed97 6a03 	vldr	s12, [r7, #12]
 800968a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800968e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009692:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009696:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800969a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800969e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096a2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80096a6:	e087      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	ee07 3a90 	vmov	s15, r3
 80096ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096b2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009870 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80096b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096ba:	4b6a      	ldr	r3, [pc, #424]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80096bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096c2:	ee07 3a90 	vmov	s15, r3
 80096c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80096ce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80096d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096da:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096e6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80096ea:	e065      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80096ec:	697b      	ldr	r3, [r7, #20]
 80096ee:	ee07 3a90 	vmov	s15, r3
 80096f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80096f6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80096fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80096fe:	4b59      	ldr	r3, [pc, #356]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009702:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009706:	ee07 3a90 	vmov	s15, r3
 800970a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800970e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009712:	eddf 5a56 	vldr	s11, [pc, #344]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8009716:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800971a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800971e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009722:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009726:	ee67 7a27 	vmul.f32	s15, s14, s15
 800972a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800972e:	e043      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	ee07 3a90 	vmov	s15, r3
 8009736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800973a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009878 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800973e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009742:	4b48      	ldr	r3, [pc, #288]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800974a:	ee07 3a90 	vmov	s15, r3
 800974e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009752:	ed97 6a03 	vldr	s12, [r7, #12]
 8009756:	eddf 5a45 	vldr	s11, [pc, #276]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800975a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800975e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009762:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009766:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800976a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800976e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009772:	e021      	b.n	80097b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8009774:	697b      	ldr	r3, [r7, #20]
 8009776:	ee07 3a90 	vmov	s15, r3
 800977a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800977e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009874 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8009782:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009786:	4b37      	ldr	r3, [pc, #220]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800978e:	ee07 3a90 	vmov	s15, r3
 8009792:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009796:	ed97 6a03 	vldr	s12, [r7, #12]
 800979a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800986c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800979e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80097a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80097a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80097aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80097ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80097b2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80097b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80097b8:	4b2a      	ldr	r3, [pc, #168]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097bc:	0a5b      	lsrs	r3, r3, #9
 80097be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097c2:	ee07 3a90 	vmov	s15, r3
 80097c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80097d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80097d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80097da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80097de:	ee17 2a90 	vmov	r2, s15
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80097e6:	4b1f      	ldr	r3, [pc, #124]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80097e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ea:	0c1b      	lsrs	r3, r3, #16
 80097ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80097f0:	ee07 3a90 	vmov	s15, r3
 80097f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80097f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80097fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009800:	edd7 6a07 	vldr	s13, [r7, #28]
 8009804:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009808:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800980c:	ee17 2a90 	vmov	r2, s15
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8009814:	4b13      	ldr	r3, [pc, #76]	; (8009864 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8009816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009818:	0e1b      	lsrs	r3, r3, #24
 800981a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800981e:	ee07 3a90 	vmov	s15, r3
 8009822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009826:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800982a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800982e:	edd7 6a07 	vldr	s13, [r7, #28]
 8009832:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009836:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800983a:	ee17 2a90 	vmov	r2, s15
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8009842:	e008      	b.n	8009856 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2200      	movs	r2, #0
 800984e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	609a      	str	r2, [r3, #8]
}
 8009856:	bf00      	nop
 8009858:	3724      	adds	r7, #36	; 0x24
 800985a:	46bd      	mov	sp, r7
 800985c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009860:	4770      	bx	lr
 8009862:	bf00      	nop
 8009864:	58024400 	.word	0x58024400
 8009868:	03d09000 	.word	0x03d09000
 800986c:	46000000 	.word	0x46000000
 8009870:	4c742400 	.word	0x4c742400
 8009874:	4a742400 	.word	0x4a742400
 8009878:	4af42400 	.word	0x4af42400

0800987c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800987c:	b480      	push	{r7}
 800987e:	b089      	sub	sp, #36	; 0x24
 8009880:	af00      	add	r7, sp, #0
 8009882:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8009884:	4ba1      	ldr	r3, [pc, #644]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009888:	f003 0303 	and.w	r3, r3, #3
 800988c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800988e:	4b9f      	ldr	r3, [pc, #636]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009892:	0d1b      	lsrs	r3, r3, #20
 8009894:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009898:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800989a:	4b9c      	ldr	r3, [pc, #624]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800989c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800989e:	0a1b      	lsrs	r3, r3, #8
 80098a0:	f003 0301 	and.w	r3, r3, #1
 80098a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80098a6:	4b99      	ldr	r3, [pc, #612]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098aa:	08db      	lsrs	r3, r3, #3
 80098ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80098b0:	693a      	ldr	r2, [r7, #16]
 80098b2:	fb02 f303 	mul.w	r3, r2, r3
 80098b6:	ee07 3a90 	vmov	s15, r3
 80098ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80098be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8111 	beq.w	8009aec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80098ca:	69bb      	ldr	r3, [r7, #24]
 80098cc:	2b02      	cmp	r3, #2
 80098ce:	f000 8083 	beq.w	80099d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80098d2:	69bb      	ldr	r3, [r7, #24]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	f200 80a1 	bhi.w	8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d003      	beq.n	80098e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b01      	cmp	r3, #1
 80098e4:	d056      	beq.n	8009994 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80098e6:	e099      	b.n	8009a1c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80098e8:	4b88      	ldr	r3, [pc, #544]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	f003 0320 	and.w	r3, r3, #32
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d02d      	beq.n	8009950 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80098f4:	4b85      	ldr	r3, [pc, #532]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	08db      	lsrs	r3, r3, #3
 80098fa:	f003 0303 	and.w	r3, r3, #3
 80098fe:	4a84      	ldr	r2, [pc, #528]	; (8009b10 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8009900:	fa22 f303 	lsr.w	r3, r2, r3
 8009904:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	ee07 3a90 	vmov	s15, r3
 800990c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009910:	697b      	ldr	r3, [r7, #20]
 8009912:	ee07 3a90 	vmov	s15, r3
 8009916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800991a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800991e:	4b7b      	ldr	r3, [pc, #492]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009922:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009926:	ee07 3a90 	vmov	s15, r3
 800992a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800992e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009932:	eddf 5a78 	vldr	s11, [pc, #480]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009936:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800993a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800993e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009942:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009946:	ee67 7a27 	vmul.f32	s15, s14, s15
 800994a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800994e:	e087      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009950:	697b      	ldr	r3, [r7, #20]
 8009952:	ee07 3a90 	vmov	s15, r3
 8009956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800995a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8009b18 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800995e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009962:	4b6a      	ldr	r3, [pc, #424]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009966:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800996a:	ee07 3a90 	vmov	s15, r3
 800996e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009972:	ed97 6a03 	vldr	s12, [r7, #12]
 8009976:	eddf 5a67 	vldr	s11, [pc, #412]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800997a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800997e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009982:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009986:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800998a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800998e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009992:	e065      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009994:	697b      	ldr	r3, [r7, #20]
 8009996:	ee07 3a90 	vmov	s15, r3
 800999a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800999e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80099a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099a6:	4b59      	ldr	r3, [pc, #356]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099ae:	ee07 3a90 	vmov	s15, r3
 80099b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099b6:	ed97 6a03 	vldr	s12, [r7, #12]
 80099ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80099be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80099c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80099c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80099ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80099ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80099d2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80099d6:	e043      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80099d8:	697b      	ldr	r3, [r7, #20]
 80099da:	ee07 3a90 	vmov	s15, r3
 80099de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80099e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8009b20 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80099e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80099ea:	4b48      	ldr	r3, [pc, #288]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80099ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80099f2:	ee07 3a90 	vmov	s15, r3
 80099f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80099fa:	ed97 6a03 	vldr	s12, [r7, #12]
 80099fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a16:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a1a:	e021      	b.n	8009a60 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	ee07 3a90 	vmov	s15, r3
 8009a22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a26:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009b1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8009a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009a2e:	4b37      	ldr	r3, [pc, #220]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009a36:	ee07 3a90 	vmov	s15, r3
 8009a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8009a42:	eddf 5a34 	vldr	s11, [pc, #208]	; 8009b14 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8009a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009a4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8009a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009a5a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8009a5e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8009a60:	4b2a      	ldr	r3, [pc, #168]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a64:	0a5b      	lsrs	r3, r3, #9
 8009a66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a6a:	ee07 3a90 	vmov	s15, r3
 8009a6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009a76:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009a7a:	edd7 6a07 	vldr	s13, [r7, #28]
 8009a7e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009a82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009a86:	ee17 2a90 	vmov	r2, s15
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8009a8e:	4b1f      	ldr	r3, [pc, #124]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a92:	0c1b      	lsrs	r3, r3, #16
 8009a94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a98:	ee07 3a90 	vmov	s15, r3
 8009a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009aa0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009aa4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009aa8:	edd7 6a07 	vldr	s13, [r7, #28]
 8009aac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ab0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ab4:	ee17 2a90 	vmov	r2, s15
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8009abc:	4b13      	ldr	r3, [pc, #76]	; (8009b0c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8009abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac0:	0e1b      	lsrs	r3, r3, #24
 8009ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac6:	ee07 3a90 	vmov	s15, r3
 8009aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009ace:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8009ad2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8009ad6:	edd7 6a07 	vldr	s13, [r7, #28]
 8009ada:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009ade:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8009ae2:	ee17 2a90 	vmov	r2, s15
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8009aea:	e008      	b.n	8009afe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2200      	movs	r2, #0
 8009af0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	2200      	movs	r2, #0
 8009af6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	609a      	str	r2, [r3, #8]
}
 8009afe:	bf00      	nop
 8009b00:	3724      	adds	r7, #36	; 0x24
 8009b02:	46bd      	mov	sp, r7
 8009b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b08:	4770      	bx	lr
 8009b0a:	bf00      	nop
 8009b0c:	58024400 	.word	0x58024400
 8009b10:	03d09000 	.word	0x03d09000
 8009b14:	46000000 	.word	0x46000000
 8009b18:	4c742400 	.word	0x4c742400
 8009b1c:	4a742400 	.word	0x4a742400
 8009b20:	4af42400 	.word	0x4af42400

08009b24 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009b24:	b580      	push	{r7, lr}
 8009b26:	b084      	sub	sp, #16
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009b32:	4b53      	ldr	r3, [pc, #332]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b36:	f003 0303 	and.w	r3, r3, #3
 8009b3a:	2b03      	cmp	r3, #3
 8009b3c:	d101      	bne.n	8009b42 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e099      	b.n	8009c76 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009b42:	4b4f      	ldr	r3, [pc, #316]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	4a4e      	ldr	r2, [pc, #312]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b48:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009b4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b4e:	f7fa faa5 	bl	800409c <HAL_GetTick>
 8009b52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b54:	e008      	b.n	8009b68 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009b56:	f7fa faa1 	bl	800409c <HAL_GetTick>
 8009b5a:	4602      	mov	r2, r0
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	1ad3      	subs	r3, r2, r3
 8009b60:	2b02      	cmp	r3, #2
 8009b62:	d901      	bls.n	8009b68 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009b64:	2303      	movs	r3, #3
 8009b66:	e086      	b.n	8009c76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009b68:	4b45      	ldr	r3, [pc, #276]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d1f0      	bne.n	8009b56 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009b74:	4b42      	ldr	r3, [pc, #264]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b78:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	031b      	lsls	r3, r3, #12
 8009b82:	493f      	ldr	r1, [pc, #252]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009b84:	4313      	orrs	r3, r2
 8009b86:	628b      	str	r3, [r1, #40]	; 0x28
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	3b01      	subs	r3, #1
 8009b8e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	025b      	lsls	r3, r3, #9
 8009b9a:	b29b      	uxth	r3, r3
 8009b9c:	431a      	orrs	r2, r3
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68db      	ldr	r3, [r3, #12]
 8009ba2:	3b01      	subs	r3, #1
 8009ba4:	041b      	lsls	r3, r3, #16
 8009ba6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009baa:	431a      	orrs	r2, r3
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	691b      	ldr	r3, [r3, #16]
 8009bb0:	3b01      	subs	r3, #1
 8009bb2:	061b      	lsls	r3, r3, #24
 8009bb4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009bb8:	4931      	ldr	r1, [pc, #196]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bba:	4313      	orrs	r3, r2
 8009bbc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009bbe:	4b30      	ldr	r3, [pc, #192]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	695b      	ldr	r3, [r3, #20]
 8009bca:	492d      	ldr	r1, [pc, #180]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009bd0:	4b2b      	ldr	r3, [pc, #172]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bd4:	f023 0220 	bic.w	r2, r3, #32
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	4928      	ldr	r1, [pc, #160]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bde:	4313      	orrs	r3, r2
 8009be0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009be2:	4b27      	ldr	r3, [pc, #156]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009be4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009be6:	4a26      	ldr	r2, [pc, #152]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009be8:	f023 0310 	bic.w	r3, r3, #16
 8009bec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009bee:	4b24      	ldr	r3, [pc, #144]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bf0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009bf2:	4b24      	ldr	r3, [pc, #144]	; (8009c84 <RCCEx_PLL2_Config+0x160>)
 8009bf4:	4013      	ands	r3, r2
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	69d2      	ldr	r2, [r2, #28]
 8009bfa:	00d2      	lsls	r2, r2, #3
 8009bfc:	4920      	ldr	r1, [pc, #128]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009bfe:	4313      	orrs	r3, r2
 8009c00:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009c02:	4b1f      	ldr	r3, [pc, #124]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c06:	4a1e      	ldr	r2, [pc, #120]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c08:	f043 0310 	orr.w	r3, r3, #16
 8009c0c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d106      	bne.n	8009c22 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009c14:	4b1a      	ldr	r3, [pc, #104]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c18:	4a19      	ldr	r2, [pc, #100]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c1a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009c1e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c20:	e00f      	b.n	8009c42 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d106      	bne.n	8009c36 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009c28:	4b15      	ldr	r3, [pc, #84]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c2c:	4a14      	ldr	r2, [pc, #80]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c32:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009c34:	e005      	b.n	8009c42 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009c36:	4b12      	ldr	r3, [pc, #72]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	4a11      	ldr	r2, [pc, #68]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c3c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009c40:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009c42:	4b0f      	ldr	r3, [pc, #60]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	4a0e      	ldr	r2, [pc, #56]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c48:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009c4c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c4e:	f7fa fa25 	bl	800409c <HAL_GetTick>
 8009c52:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c54:	e008      	b.n	8009c68 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8009c56:	f7fa fa21 	bl	800409c <HAL_GetTick>
 8009c5a:	4602      	mov	r2, r0
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	1ad3      	subs	r3, r2, r3
 8009c60:	2b02      	cmp	r3, #2
 8009c62:	d901      	bls.n	8009c68 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e006      	b.n	8009c76 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009c68:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <RCCEx_PLL2_Config+0x15c>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d0f0      	beq.n	8009c56 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009c74:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c76:	4618      	mov	r0, r3
 8009c78:	3710      	adds	r7, #16
 8009c7a:	46bd      	mov	sp, r7
 8009c7c:	bd80      	pop	{r7, pc}
 8009c7e:	bf00      	nop
 8009c80:	58024400 	.word	0x58024400
 8009c84:	ffff0007 	.word	0xffff0007

08009c88 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
 8009c90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009c92:	2300      	movs	r3, #0
 8009c94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009c96:	4b53      	ldr	r3, [pc, #332]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c9a:	f003 0303 	and.w	r3, r3, #3
 8009c9e:	2b03      	cmp	r3, #3
 8009ca0:	d101      	bne.n	8009ca6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009ca2:	2301      	movs	r3, #1
 8009ca4:	e099      	b.n	8009dda <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009ca6:	4b4f      	ldr	r3, [pc, #316]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a4e      	ldr	r2, [pc, #312]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009cac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009cb0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009cb2:	f7fa f9f3 	bl	800409c <HAL_GetTick>
 8009cb6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009cb8:	e008      	b.n	8009ccc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009cba:	f7fa f9ef 	bl	800409c <HAL_GetTick>
 8009cbe:	4602      	mov	r2, r0
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	1ad3      	subs	r3, r2, r3
 8009cc4:	2b02      	cmp	r3, #2
 8009cc6:	d901      	bls.n	8009ccc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009cc8:	2303      	movs	r3, #3
 8009cca:	e086      	b.n	8009dda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009ccc:	4b45      	ldr	r3, [pc, #276]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d1f0      	bne.n	8009cba <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009cd8:	4b42      	ldr	r3, [pc, #264]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009cdc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	051b      	lsls	r3, r3, #20
 8009ce6:	493f      	ldr	r1, [pc, #252]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	628b      	str	r3, [r1, #40]	; 0x28
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	685b      	ldr	r3, [r3, #4]
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	689b      	ldr	r3, [r3, #8]
 8009cfa:	3b01      	subs	r3, #1
 8009cfc:	025b      	lsls	r3, r3, #9
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	431a      	orrs	r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	3b01      	subs	r3, #1
 8009d08:	041b      	lsls	r3, r3, #16
 8009d0a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009d0e:	431a      	orrs	r2, r3
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	691b      	ldr	r3, [r3, #16]
 8009d14:	3b01      	subs	r3, #1
 8009d16:	061b      	lsls	r3, r3, #24
 8009d18:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009d1c:	4931      	ldr	r1, [pc, #196]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d1e:	4313      	orrs	r3, r2
 8009d20:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009d22:	4b30      	ldr	r3, [pc, #192]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d26:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	492d      	ldr	r1, [pc, #180]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d30:	4313      	orrs	r3, r2
 8009d32:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009d34:	4b2b      	ldr	r3, [pc, #172]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	699b      	ldr	r3, [r3, #24]
 8009d40:	4928      	ldr	r1, [pc, #160]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d42:	4313      	orrs	r3, r2
 8009d44:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009d46:	4b27      	ldr	r3, [pc, #156]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	4a26      	ldr	r2, [pc, #152]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009d50:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009d52:	4b24      	ldr	r3, [pc, #144]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009d56:	4b24      	ldr	r3, [pc, #144]	; (8009de8 <RCCEx_PLL3_Config+0x160>)
 8009d58:	4013      	ands	r3, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	69d2      	ldr	r2, [r2, #28]
 8009d5e:	00d2      	lsls	r2, r2, #3
 8009d60:	4920      	ldr	r1, [pc, #128]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d62:	4313      	orrs	r3, r2
 8009d64:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009d66:	4b1f      	ldr	r3, [pc, #124]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	4a1e      	ldr	r2, [pc, #120]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009d70:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d106      	bne.n	8009d86 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009d78:	4b1a      	ldr	r3, [pc, #104]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d7c:	4a19      	ldr	r2, [pc, #100]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009d82:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d84:	e00f      	b.n	8009da6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	d106      	bne.n	8009d9a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8009d8c:	4b15      	ldr	r3, [pc, #84]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d90:	4a14      	ldr	r2, [pc, #80]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d92:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d96:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009d98:	e005      	b.n	8009da6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8009d9a:	4b12      	ldr	r3, [pc, #72]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9e:	4a11      	ldr	r2, [pc, #68]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009da0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009da4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8009da6:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	4a0e      	ldr	r2, [pc, #56]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009dac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009db0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009db2:	f7fa f973 	bl	800409c <HAL_GetTick>
 8009db6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009db8:	e008      	b.n	8009dcc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8009dba:	f7fa f96f 	bl	800409c <HAL_GetTick>
 8009dbe:	4602      	mov	r2, r0
 8009dc0:	68bb      	ldr	r3, [r7, #8]
 8009dc2:	1ad3      	subs	r3, r2, r3
 8009dc4:	2b02      	cmp	r3, #2
 8009dc6:	d901      	bls.n	8009dcc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009dc8:	2303      	movs	r3, #3
 8009dca:	e006      	b.n	8009dda <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8009dcc:	4b05      	ldr	r3, [pc, #20]	; (8009de4 <RCCEx_PLL3_Config+0x15c>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d0f0      	beq.n	8009dba <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8009dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3710      	adds	r7, #16
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}
 8009de2:	bf00      	nop
 8009de4:	58024400 	.word	0x58024400
 8009de8:	ffff0007 	.word	0xffff0007

08009dec <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d101      	bne.n	8009dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e0f1      	b.n	8009fe2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a78      	ldr	r2, [pc, #480]	; (8009fec <HAL_SPI_Init+0x200>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d00f      	beq.n	8009e2e <HAL_SPI_Init+0x42>
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	4a77      	ldr	r2, [pc, #476]	; (8009ff0 <HAL_SPI_Init+0x204>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d00a      	beq.n	8009e2e <HAL_SPI_Init+0x42>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	4a75      	ldr	r2, [pc, #468]	; (8009ff4 <HAL_SPI_Init+0x208>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d005      	beq.n	8009e2e <HAL_SPI_Init+0x42>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	68db      	ldr	r3, [r3, #12]
 8009e26:	2b0f      	cmp	r3, #15
 8009e28:	d901      	bls.n	8009e2e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e0d9      	b.n	8009fe2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8009e2e:	6878      	ldr	r0, [r7, #4]
 8009e30:	f000 fba2 	bl	800a578 <SPI_GetPacketSize>
 8009e34:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	4a6c      	ldr	r2, [pc, #432]	; (8009fec <HAL_SPI_Init+0x200>)
 8009e3c:	4293      	cmp	r3, r2
 8009e3e:	d00c      	beq.n	8009e5a <HAL_SPI_Init+0x6e>
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	4a6a      	ldr	r2, [pc, #424]	; (8009ff0 <HAL_SPI_Init+0x204>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d007      	beq.n	8009e5a <HAL_SPI_Init+0x6e>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	4a69      	ldr	r2, [pc, #420]	; (8009ff4 <HAL_SPI_Init+0x208>)
 8009e50:	4293      	cmp	r3, r2
 8009e52:	d002      	beq.n	8009e5a <HAL_SPI_Init+0x6e>
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	2b08      	cmp	r3, #8
 8009e58:	d811      	bhi.n	8009e7e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8009e5e:	4a63      	ldr	r2, [pc, #396]	; (8009fec <HAL_SPI_Init+0x200>)
 8009e60:	4293      	cmp	r3, r2
 8009e62:	d009      	beq.n	8009e78 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a61      	ldr	r2, [pc, #388]	; (8009ff0 <HAL_SPI_Init+0x204>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d004      	beq.n	8009e78 <HAL_SPI_Init+0x8c>
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	4a60      	ldr	r2, [pc, #384]	; (8009ff4 <HAL_SPI_Init+0x208>)
 8009e74:	4293      	cmp	r3, r2
 8009e76:	d104      	bne.n	8009e82 <HAL_SPI_Init+0x96>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2b10      	cmp	r3, #16
 8009e7c:	d901      	bls.n	8009e82 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8009e7e:	2301      	movs	r3, #1
 8009e80:	e0af      	b.n	8009fe2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009e88:	b2db      	uxtb	r3, r3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d106      	bne.n	8009e9c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7f9 fe08 	bl	8003aac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	681a      	ldr	r2, [r3, #0]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	f022 0201 	bic.w	r2, r2, #1
 8009eb2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	689b      	ldr	r3, [r3, #8]
 8009eba:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8009ebe:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	699b      	ldr	r3, [r3, #24]
 8009ec4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009ec8:	d119      	bne.n	8009efe <HAL_SPI_Init+0x112>
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	685b      	ldr	r3, [r3, #4]
 8009ece:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009ed2:	d103      	bne.n	8009edc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d008      	beq.n	8009eee <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10c      	bne.n	8009efe <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009ee8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009eec:	d107      	bne.n	8009efe <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	681a      	ldr	r2, [r3, #0]
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009efc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	69da      	ldr	r2, [r3, #28]
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f06:	431a      	orrs	r2, r3
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	431a      	orrs	r2, r3
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f10:	ea42 0103 	orr.w	r1, r2, r3
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	68da      	ldr	r2, [r3, #12]
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	430a      	orrs	r2, r1
 8009f1e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f28:	431a      	orrs	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f2e:	431a      	orrs	r2, r3
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	699b      	ldr	r3, [r3, #24]
 8009f34:	431a      	orrs	r2, r3
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	691b      	ldr	r3, [r3, #16]
 8009f3a:	431a      	orrs	r2, r3
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	695b      	ldr	r3, [r3, #20]
 8009f40:	431a      	orrs	r2, r3
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	6a1b      	ldr	r3, [r3, #32]
 8009f46:	431a      	orrs	r2, r3
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	685b      	ldr	r3, [r3, #4]
 8009f4c:	431a      	orrs	r2, r3
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009f52:	431a      	orrs	r2, r3
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	689b      	ldr	r3, [r3, #8]
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f5e:	ea42 0103 	orr.w	r1, r2, r3
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	430a      	orrs	r2, r1
 8009f6c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d113      	bne.n	8009f9e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	689b      	ldr	r3, [r3, #8]
 8009f7c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009f88:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	689b      	ldr	r3, [r3, #8]
 8009f90:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009f9c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f022 0201 	bic.w	r2, r2, #1
 8009fac:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	685b      	ldr	r3, [r3, #4]
 8009fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d00a      	beq.n	8009fd0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	430a      	orrs	r2, r1
 8009fce:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2201      	movs	r2, #1
 8009fdc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009fe0:	2300      	movs	r3, #0
}
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	40013000 	.word	0x40013000
 8009ff0:	40003800 	.word	0x40003800
 8009ff4:	40003c00 	.word	0x40003c00

08009ff8 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08a      	sub	sp, #40	; 0x28
 8009ffc:	af02      	add	r7, sp, #8
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	603b      	str	r3, [r7, #0]
 800a004:	4613      	mov	r3, r2
 800a006:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	3320      	adds	r3, #32
 800a00e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a010:	2300      	movs	r3, #0
 800a012:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a01a:	2b01      	cmp	r3, #1
 800a01c:	d101      	bne.n	800a022 <HAL_SPI_Transmit+0x2a>
 800a01e:	2302      	movs	r3, #2
 800a020:	e1d7      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2201      	movs	r2, #1
 800a026:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a02a:	f7fa f837 	bl	800409c <HAL_GetTick>
 800a02e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a036:	b2db      	uxtb	r3, r3
 800a038:	2b01      	cmp	r3, #1
 800a03a:	d007      	beq.n	800a04c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a03c:	2302      	movs	r3, #2
 800a03e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	2200      	movs	r2, #0
 800a044:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a048:	7efb      	ldrb	r3, [r7, #27]
 800a04a:	e1c2      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d002      	beq.n	800a058 <HAL_SPI_Transmit+0x60>
 800a052:	88fb      	ldrh	r3, [r7, #6]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d107      	bne.n	800a068 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a058:	2301      	movs	r3, #1
 800a05a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	2200      	movs	r2, #0
 800a060:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a064:	7efb      	ldrb	r3, [r7, #27]
 800a066:	e1b4      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	2203      	movs	r2, #3
 800a06c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	2200      	movs	r2, #0
 800a074:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	68ba      	ldr	r2, [r7, #8]
 800a07c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	88fa      	ldrh	r2, [r7, #6]
 800a082:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	88fa      	ldrh	r2, [r7, #6]
 800a08a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	2200      	movs	r2, #0
 800a092:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2200      	movs	r2, #0
 800a0a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	689b      	ldr	r3, [r3, #8]
 800a0b4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a0b8:	d107      	bne.n	800a0ca <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	681a      	ldr	r2, [r3, #0]
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a0c8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	685a      	ldr	r2, [r3, #4]
 800a0d0:	4b96      	ldr	r3, [pc, #600]	; (800a32c <HAL_SPI_Transmit+0x334>)
 800a0d2:	4013      	ands	r3, r2
 800a0d4:	88f9      	ldrh	r1, [r7, #6]
 800a0d6:	68fa      	ldr	r2, [r7, #12]
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	430b      	orrs	r3, r1
 800a0dc:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f042 0201 	orr.w	r2, r2, #1
 800a0ec:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	685b      	ldr	r3, [r3, #4]
 800a0f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a0f6:	d107      	bne.n	800a108 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	68db      	ldr	r3, [r3, #12]
 800a10c:	2b0f      	cmp	r3, #15
 800a10e:	d947      	bls.n	800a1a0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a110:	e03f      	b.n	800a192 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	f003 0302 	and.w	r3, r3, #2
 800a11c:	2b02      	cmp	r3, #2
 800a11e:	d114      	bne.n	800a14a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	6812      	ldr	r2, [r2, #0]
 800a12a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a130:	1d1a      	adds	r2, r3, #4
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a13c:	b29b      	uxth	r3, r3
 800a13e:	3b01      	subs	r3, #1
 800a140:	b29a      	uxth	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a148:	e023      	b.n	800a192 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a14a:	f7f9 ffa7 	bl	800409c <HAL_GetTick>
 800a14e:	4602      	mov	r2, r0
 800a150:	697b      	ldr	r3, [r7, #20]
 800a152:	1ad3      	subs	r3, r2, r3
 800a154:	683a      	ldr	r2, [r7, #0]
 800a156:	429a      	cmp	r2, r3
 800a158:	d803      	bhi.n	800a162 <HAL_SPI_Transmit+0x16a>
 800a15a:	683b      	ldr	r3, [r7, #0]
 800a15c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a160:	d102      	bne.n	800a168 <HAL_SPI_Transmit+0x170>
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	2b00      	cmp	r3, #0
 800a166:	d114      	bne.n	800a192 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a168:	68f8      	ldr	r0, [r7, #12]
 800a16a:	f000 f937 	bl	800a3dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	2200      	movs	r2, #0
 800a172:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a17c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	2201      	movs	r2, #1
 800a18a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a18e:	2303      	movs	r3, #3
 800a190:	e11f      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a198:	b29b      	uxth	r3, r3
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d1b9      	bne.n	800a112 <HAL_SPI_Transmit+0x11a>
 800a19e:	e0f2      	b.n	800a386 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b07      	cmp	r3, #7
 800a1a6:	f240 80e7 	bls.w	800a378 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a1aa:	e05d      	b.n	800a268 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	695b      	ldr	r3, [r3, #20]
 800a1b2:	f003 0302 	and.w	r3, r3, #2
 800a1b6:	2b02      	cmp	r3, #2
 800a1b8:	d132      	bne.n	800a220 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d918      	bls.n	800a1f8 <HAL_SPI_Transmit+0x200>
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d014      	beq.n	800a1f8 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1de:	1d1a      	adds	r2, r3, #4
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	3b02      	subs	r3, #2
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a1f6:	e037      	b.n	800a268 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1fc:	881a      	ldrh	r2, [r3, #0]
 800a1fe:	69fb      	ldr	r3, [r7, #28]
 800a200:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a206:	1c9a      	adds	r2, r3, #2
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a212:	b29b      	uxth	r3, r3
 800a214:	3b01      	subs	r3, #1
 800a216:	b29a      	uxth	r2, r3
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a21e:	e023      	b.n	800a268 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a220:	f7f9 ff3c 	bl	800409c <HAL_GetTick>
 800a224:	4602      	mov	r2, r0
 800a226:	697b      	ldr	r3, [r7, #20]
 800a228:	1ad3      	subs	r3, r2, r3
 800a22a:	683a      	ldr	r2, [r7, #0]
 800a22c:	429a      	cmp	r2, r3
 800a22e:	d803      	bhi.n	800a238 <HAL_SPI_Transmit+0x240>
 800a230:	683b      	ldr	r3, [r7, #0]
 800a232:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a236:	d102      	bne.n	800a23e <HAL_SPI_Transmit+0x246>
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d114      	bne.n	800a268 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a23e:	68f8      	ldr	r0, [r7, #12]
 800a240:	f000 f8cc 	bl	800a3dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	2200      	movs	r2, #0
 800a248:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a252:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	2201      	movs	r2, #1
 800a260:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a264:	2303      	movs	r3, #3
 800a266:	e0b4      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a26e:	b29b      	uxth	r3, r3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d19b      	bne.n	800a1ac <HAL_SPI_Transmit+0x1b4>
 800a274:	e087      	b.n	800a386 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	f003 0302 	and.w	r3, r3, #2
 800a280:	2b02      	cmp	r3, #2
 800a282:	d155      	bne.n	800a330 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a28a:	b29b      	uxth	r3, r3
 800a28c:	2b03      	cmp	r3, #3
 800a28e:	d918      	bls.n	800a2c2 <HAL_SPI_Transmit+0x2ca>
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a294:	2b40      	cmp	r3, #64	; 0x40
 800a296:	d914      	bls.n	800a2c2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	6812      	ldr	r2, [r2, #0]
 800a2a2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2a8:	1d1a      	adds	r2, r3, #4
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2b4:	b29b      	uxth	r3, r3
 800a2b6:	3b04      	subs	r3, #4
 800a2b8:	b29a      	uxth	r2, r3
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2c0:	e05a      	b.n	800a378 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	2b01      	cmp	r3, #1
 800a2cc:	d917      	bls.n	800a2fe <HAL_SPI_Transmit+0x306>
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d013      	beq.n	800a2fe <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2da:	881a      	ldrh	r2, [r3, #0]
 800a2dc:	69fb      	ldr	r3, [r7, #28]
 800a2de:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2e4:	1c9a      	adds	r2, r3, #2
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a2f0:	b29b      	uxth	r3, r3
 800a2f2:	3b02      	subs	r3, #2
 800a2f4:	b29a      	uxth	r2, r3
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a2fc:	e03c      	b.n	800a378 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	3320      	adds	r3, #32
 800a308:	7812      	ldrb	r2, [r2, #0]
 800a30a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a310:	1c5a      	adds	r2, r3, #1
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a31c:	b29b      	uxth	r3, r3
 800a31e:	3b01      	subs	r3, #1
 800a320:	b29a      	uxth	r2, r3
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a328:	e026      	b.n	800a378 <HAL_SPI_Transmit+0x380>
 800a32a:	bf00      	nop
 800a32c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a330:	f7f9 feb4 	bl	800409c <HAL_GetTick>
 800a334:	4602      	mov	r2, r0
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	1ad3      	subs	r3, r2, r3
 800a33a:	683a      	ldr	r2, [r7, #0]
 800a33c:	429a      	cmp	r2, r3
 800a33e:	d803      	bhi.n	800a348 <HAL_SPI_Transmit+0x350>
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a346:	d102      	bne.n	800a34e <HAL_SPI_Transmit+0x356>
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d114      	bne.n	800a378 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 f844 	bl	800a3dc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a362:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	2201      	movs	r2, #1
 800a370:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a374:	2303      	movs	r3, #3
 800a376:	e02c      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a37e:	b29b      	uxth	r3, r3
 800a380:	2b00      	cmp	r3, #0
 800a382:	f47f af78 	bne.w	800a276 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	9300      	str	r3, [sp, #0]
 800a38a:	697b      	ldr	r3, [r7, #20]
 800a38c:	2200      	movs	r2, #0
 800a38e:	2108      	movs	r1, #8
 800a390:	68f8      	ldr	r0, [r7, #12]
 800a392:	f000 f8c3 	bl	800a51c <SPI_WaitOnFlagUntilTimeout>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d007      	beq.n	800a3ac <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3a2:	f043 0220 	orr.w	r2, r3, #32
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a3ac:	68f8      	ldr	r0, [r7, #12]
 800a3ae:	f000 f815 	bl	800a3dc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	2200      	movs	r2, #0
 800a3b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	2201      	movs	r2, #1
 800a3be:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d001      	beq.n	800a3d0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800a3cc:	2301      	movs	r3, #1
 800a3ce:	e000      	b.n	800a3d2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800a3d0:	7efb      	ldrb	r3, [r7, #27]
}
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	3720      	adds	r7, #32
 800a3d6:	46bd      	mov	sp, r7
 800a3d8:	bd80      	pop	{r7, pc}
 800a3da:	bf00      	nop

0800a3dc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800a3dc:	b480      	push	{r7}
 800a3de:	b085      	sub	sp, #20
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	695b      	ldr	r3, [r3, #20]
 800a3ea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	699a      	ldr	r2, [r3, #24]
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f042 0208 	orr.w	r2, r2, #8
 800a3fa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	699a      	ldr	r2, [r3, #24]
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	f042 0210 	orr.w	r2, r2, #16
 800a40a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f022 0201 	bic.w	r2, r2, #1
 800a41a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	6919      	ldr	r1, [r3, #16]
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	4b3c      	ldr	r3, [pc, #240]	; (800a518 <SPI_CloseTransfer+0x13c>)
 800a428:	400b      	ands	r3, r1
 800a42a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	689a      	ldr	r2, [r3, #8]
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a43a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a442:	b2db      	uxtb	r3, r3
 800a444:	2b04      	cmp	r3, #4
 800a446:	d014      	beq.n	800a472 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	f003 0320 	and.w	r3, r3, #32
 800a44e:	2b00      	cmp	r3, #0
 800a450:	d00f      	beq.n	800a472 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a458:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699a      	ldr	r2, [r3, #24]
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	f042 0220 	orr.w	r2, r2, #32
 800a470:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a478:	b2db      	uxtb	r3, r3
 800a47a:	2b03      	cmp	r3, #3
 800a47c:	d014      	beq.n	800a4a8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a484:	2b00      	cmp	r3, #0
 800a486:	d00f      	beq.n	800a4a8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a48e:	f043 0204 	orr.w	r2, r3, #4
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	699a      	ldr	r2, [r3, #24]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a4a6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00f      	beq.n	800a4d2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4b8:	f043 0201 	orr.w	r2, r3, #1
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	699a      	ldr	r2, [r3, #24]
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4d0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d00f      	beq.n	800a4fc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a4e2:	f043 0208 	orr.w	r2, r3, #8
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	699a      	ldr	r2, [r3, #24]
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a4fa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800a4fc:	687b      	ldr	r3, [r7, #4]
 800a4fe:	2200      	movs	r2, #0
 800a500:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	2200      	movs	r2, #0
 800a508:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800a50c:	bf00      	nop
 800a50e:	3714      	adds	r7, #20
 800a510:	46bd      	mov	sp, r7
 800a512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a516:	4770      	bx	lr
 800a518:	fffffc90 	.word	0xfffffc90

0800a51c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800a51c:	b580      	push	{r7, lr}
 800a51e:	b084      	sub	sp, #16
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	60b9      	str	r1, [r7, #8]
 800a526:	603b      	str	r3, [r7, #0]
 800a528:	4613      	mov	r3, r2
 800a52a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a52c:	e010      	b.n	800a550 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a52e:	f7f9 fdb5 	bl	800409c <HAL_GetTick>
 800a532:	4602      	mov	r2, r0
 800a534:	683b      	ldr	r3, [r7, #0]
 800a536:	1ad3      	subs	r3, r2, r3
 800a538:	69ba      	ldr	r2, [r7, #24]
 800a53a:	429a      	cmp	r2, r3
 800a53c:	d803      	bhi.n	800a546 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800a53e:	69bb      	ldr	r3, [r7, #24]
 800a540:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a544:	d102      	bne.n	800a54c <SPI_WaitOnFlagUntilTimeout+0x30>
 800a546:	69bb      	ldr	r3, [r7, #24]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d101      	bne.n	800a550 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800a54c:	2303      	movs	r3, #3
 800a54e:	e00f      	b.n	800a570 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	695a      	ldr	r2, [r3, #20]
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	4013      	ands	r3, r2
 800a55a:	68ba      	ldr	r2, [r7, #8]
 800a55c:	429a      	cmp	r2, r3
 800a55e:	bf0c      	ite	eq
 800a560:	2301      	moveq	r3, #1
 800a562:	2300      	movne	r3, #0
 800a564:	b2db      	uxtb	r3, r3
 800a566:	461a      	mov	r2, r3
 800a568:	79fb      	ldrb	r3, [r7, #7]
 800a56a:	429a      	cmp	r2, r3
 800a56c:	d0df      	beq.n	800a52e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800a56e:	2300      	movs	r3, #0
}
 800a570:	4618      	mov	r0, r3
 800a572:	3710      	adds	r7, #16
 800a574:	46bd      	mov	sp, r7
 800a576:	bd80      	pop	{r7, pc}

0800a578 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800a578:	b480      	push	{r7}
 800a57a:	b085      	sub	sp, #20
 800a57c:	af00      	add	r7, sp, #0
 800a57e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a584:	095b      	lsrs	r3, r3, #5
 800a586:	3301      	adds	r3, #1
 800a588:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	68db      	ldr	r3, [r3, #12]
 800a58e:	3301      	adds	r3, #1
 800a590:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800a592:	68bb      	ldr	r3, [r7, #8]
 800a594:	3307      	adds	r3, #7
 800a596:	08db      	lsrs	r3, r3, #3
 800a598:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800a59a:	68bb      	ldr	r3, [r7, #8]
 800a59c:	68fa      	ldr	r2, [r7, #12]
 800a59e:	fb02 f303 	mul.w	r3, r2, r3
}
 800a5a2:	4618      	mov	r0, r3
 800a5a4:	3714      	adds	r7, #20
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr

0800a5ae <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a5ae:	b580      	push	{r7, lr}
 800a5b0:	b082      	sub	sp, #8
 800a5b2:	af00      	add	r7, sp, #0
 800a5b4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d101      	bne.n	800a5c0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a5bc:	2301      	movs	r3, #1
 800a5be:	e049      	b.n	800a654 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5c6:	b2db      	uxtb	r3, r3
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d106      	bne.n	800a5da <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5cc:	687b      	ldr	r3, [r7, #4]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a5d4:	6878      	ldr	r0, [r7, #4]
 800a5d6:	f7f9 fad5 	bl	8003b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	2202      	movs	r2, #2
 800a5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681a      	ldr	r2, [r3, #0]
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	3304      	adds	r3, #4
 800a5ea:	4619      	mov	r1, r3
 800a5ec:	4610      	mov	r0, r2
 800a5ee:	f000 fa23 	bl	800aa38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	2201      	movs	r2, #1
 800a5f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	2201      	movs	r2, #1
 800a5fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2201      	movs	r2, #1
 800a606:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2201      	movs	r2, #1
 800a60e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2201      	movs	r2, #1
 800a616:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	2201      	movs	r2, #1
 800a61e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	2201      	movs	r2, #1
 800a626:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	2201      	movs	r2, #1
 800a62e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2201      	movs	r2, #1
 800a636:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2201      	movs	r2, #1
 800a63e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	2201      	movs	r2, #1
 800a646:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	2201      	movs	r2, #1
 800a64e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a652:	2300      	movs	r3, #0
}
 800a654:	4618      	mov	r0, r3
 800a656:	3708      	adds	r7, #8
 800a658:	46bd      	mov	sp, r7
 800a65a:	bd80      	pop	{r7, pc}

0800a65c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a66a:	b2db      	uxtb	r3, r3
 800a66c:	2b01      	cmp	r3, #1
 800a66e:	d001      	beq.n	800a674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a670:	2301      	movs	r3, #1
 800a672:	e054      	b.n	800a71e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2202      	movs	r2, #2
 800a678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	68da      	ldr	r2, [r3, #12]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	f042 0201 	orr.w	r2, r2, #1
 800a68a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	4a26      	ldr	r2, [pc, #152]	; (800a72c <HAL_TIM_Base_Start_IT+0xd0>)
 800a692:	4293      	cmp	r3, r2
 800a694:	d022      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a69e:	d01d      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	4a22      	ldr	r2, [pc, #136]	; (800a730 <HAL_TIM_Base_Start_IT+0xd4>)
 800a6a6:	4293      	cmp	r3, r2
 800a6a8:	d018      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	4a21      	ldr	r2, [pc, #132]	; (800a734 <HAL_TIM_Base_Start_IT+0xd8>)
 800a6b0:	4293      	cmp	r3, r2
 800a6b2:	d013      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	4a1f      	ldr	r2, [pc, #124]	; (800a738 <HAL_TIM_Base_Start_IT+0xdc>)
 800a6ba:	4293      	cmp	r3, r2
 800a6bc:	d00e      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	4a1e      	ldr	r2, [pc, #120]	; (800a73c <HAL_TIM_Base_Start_IT+0xe0>)
 800a6c4:	4293      	cmp	r3, r2
 800a6c6:	d009      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a1c      	ldr	r2, [pc, #112]	; (800a740 <HAL_TIM_Base_Start_IT+0xe4>)
 800a6ce:	4293      	cmp	r3, r2
 800a6d0:	d004      	beq.n	800a6dc <HAL_TIM_Base_Start_IT+0x80>
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	4a1b      	ldr	r2, [pc, #108]	; (800a744 <HAL_TIM_Base_Start_IT+0xe8>)
 800a6d8:	4293      	cmp	r3, r2
 800a6da:	d115      	bne.n	800a708 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	689a      	ldr	r2, [r3, #8]
 800a6e2:	4b19      	ldr	r3, [pc, #100]	; (800a748 <HAL_TIM_Base_Start_IT+0xec>)
 800a6e4:	4013      	ands	r3, r2
 800a6e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2b06      	cmp	r3, #6
 800a6ec:	d015      	beq.n	800a71a <HAL_TIM_Base_Start_IT+0xbe>
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a6f4:	d011      	beq.n	800a71a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f042 0201 	orr.w	r2, r2, #1
 800a704:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a706:	e008      	b.n	800a71a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	681a      	ldr	r2, [r3, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	f042 0201 	orr.w	r2, r2, #1
 800a716:	601a      	str	r2, [r3, #0]
 800a718:	e000      	b.n	800a71c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a71a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800a71c:	2300      	movs	r3, #0
}
 800a71e:	4618      	mov	r0, r3
 800a720:	3714      	adds	r7, #20
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	40010000 	.word	0x40010000
 800a730:	40000400 	.word	0x40000400
 800a734:	40000800 	.word	0x40000800
 800a738:	40000c00 	.word	0x40000c00
 800a73c:	40010400 	.word	0x40010400
 800a740:	40001800 	.word	0x40001800
 800a744:	40014000 	.word	0x40014000
 800a748:	00010007 	.word	0x00010007

0800a74c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	681b      	ldr	r3, [r3, #0]
 800a758:	68da      	ldr	r2, [r3, #12]
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	f022 0201 	bic.w	r2, r2, #1
 800a762:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	6a1a      	ldr	r2, [r3, #32]
 800a76a:	f241 1311 	movw	r3, #4369	; 0x1111
 800a76e:	4013      	ands	r3, r2
 800a770:	2b00      	cmp	r3, #0
 800a772:	d10f      	bne.n	800a794 <HAL_TIM_Base_Stop_IT+0x48>
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	6a1a      	ldr	r2, [r3, #32]
 800a77a:	f240 4344 	movw	r3, #1092	; 0x444
 800a77e:	4013      	ands	r3, r2
 800a780:	2b00      	cmp	r3, #0
 800a782:	d107      	bne.n	800a794 <HAL_TIM_Base_Stop_IT+0x48>
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681a      	ldr	r2, [r3, #0]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0201 	bic.w	r2, r2, #1
 800a792:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	2201      	movs	r2, #1
 800a798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a79c:	2300      	movs	r3, #0
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a8:	4770      	bx	lr

0800a7aa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a7aa:	b580      	push	{r7, lr}
 800a7ac:	b082      	sub	sp, #8
 800a7ae:	af00      	add	r7, sp, #0
 800a7b0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	691b      	ldr	r3, [r3, #16]
 800a7b8:	f003 0302 	and.w	r3, r3, #2
 800a7bc:	2b02      	cmp	r3, #2
 800a7be:	d122      	bne.n	800a806 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	68db      	ldr	r3, [r3, #12]
 800a7c6:	f003 0302 	and.w	r3, r3, #2
 800a7ca:	2b02      	cmp	r3, #2
 800a7cc:	d11b      	bne.n	800a806 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	f06f 0202 	mvn.w	r2, #2
 800a7d6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2201      	movs	r2, #1
 800a7dc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	699b      	ldr	r3, [r3, #24]
 800a7e4:	f003 0303 	and.w	r3, r3, #3
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d003      	beq.n	800a7f4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 f905 	bl	800a9fc <HAL_TIM_IC_CaptureCallback>
 800a7f2:	e005      	b.n	800a800 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a7f4:	6878      	ldr	r0, [r7, #4]
 800a7f6:	f000 f8f7 	bl	800a9e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a7fa:	6878      	ldr	r0, [r7, #4]
 800a7fc:	f000 f908 	bl	800aa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	691b      	ldr	r3, [r3, #16]
 800a80c:	f003 0304 	and.w	r3, r3, #4
 800a810:	2b04      	cmp	r3, #4
 800a812:	d122      	bne.n	800a85a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	68db      	ldr	r3, [r3, #12]
 800a81a:	f003 0304 	and.w	r3, r3, #4
 800a81e:	2b04      	cmp	r3, #4
 800a820:	d11b      	bne.n	800a85a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	f06f 0204 	mvn.w	r2, #4
 800a82a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2202      	movs	r2, #2
 800a830:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	699b      	ldr	r3, [r3, #24]
 800a838:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a83c:	2b00      	cmp	r3, #0
 800a83e:	d003      	beq.n	800a848 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a840:	6878      	ldr	r0, [r7, #4]
 800a842:	f000 f8db 	bl	800a9fc <HAL_TIM_IC_CaptureCallback>
 800a846:	e005      	b.n	800a854 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a848:	6878      	ldr	r0, [r7, #4]
 800a84a:	f000 f8cd 	bl	800a9e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a84e:	6878      	ldr	r0, [r7, #4]
 800a850:	f000 f8de 	bl	800aa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	2200      	movs	r2, #0
 800a858:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	691b      	ldr	r3, [r3, #16]
 800a860:	f003 0308 	and.w	r3, r3, #8
 800a864:	2b08      	cmp	r3, #8
 800a866:	d122      	bne.n	800a8ae <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	68db      	ldr	r3, [r3, #12]
 800a86e:	f003 0308 	and.w	r3, r3, #8
 800a872:	2b08      	cmp	r3, #8
 800a874:	d11b      	bne.n	800a8ae <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f06f 0208 	mvn.w	r2, #8
 800a87e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2204      	movs	r2, #4
 800a884:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	69db      	ldr	r3, [r3, #28]
 800a88c:	f003 0303 	and.w	r3, r3, #3
 800a890:	2b00      	cmp	r3, #0
 800a892:	d003      	beq.n	800a89c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a894:	6878      	ldr	r0, [r7, #4]
 800a896:	f000 f8b1 	bl	800a9fc <HAL_TIM_IC_CaptureCallback>
 800a89a:	e005      	b.n	800a8a8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f8a3 	bl	800a9e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 f8b4 	bl	800aa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	691b      	ldr	r3, [r3, #16]
 800a8b4:	f003 0310 	and.w	r3, r3, #16
 800a8b8:	2b10      	cmp	r3, #16
 800a8ba:	d122      	bne.n	800a902 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	68db      	ldr	r3, [r3, #12]
 800a8c2:	f003 0310 	and.w	r3, r3, #16
 800a8c6:	2b10      	cmp	r3, #16
 800a8c8:	d11b      	bne.n	800a902 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	f06f 0210 	mvn.w	r2, #16
 800a8d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	2208      	movs	r2, #8
 800a8d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	681b      	ldr	r3, [r3, #0]
 800a8de:	69db      	ldr	r3, [r3, #28]
 800a8e0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d003      	beq.n	800a8f0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8e8:	6878      	ldr	r0, [r7, #4]
 800a8ea:	f000 f887 	bl	800a9fc <HAL_TIM_IC_CaptureCallback>
 800a8ee:	e005      	b.n	800a8fc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f000 f879 	bl	800a9e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8f6:	6878      	ldr	r0, [r7, #4]
 800a8f8:	f000 f88a 	bl	800aa10 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	2200      	movs	r2, #0
 800a900:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	691b      	ldr	r3, [r3, #16]
 800a908:	f003 0301 	and.w	r3, r3, #1
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d10e      	bne.n	800a92e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68db      	ldr	r3, [r3, #12]
 800a916:	f003 0301 	and.w	r3, r3, #1
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d107      	bne.n	800a92e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	f06f 0201 	mvn.w	r2, #1
 800a926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a928:	6878      	ldr	r0, [r7, #4]
 800a92a:	f7f8 fb95 	bl	8003058 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	691b      	ldr	r3, [r3, #16]
 800a934:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a938:	2b80      	cmp	r3, #128	; 0x80
 800a93a:	d10e      	bne.n	800a95a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	68db      	ldr	r3, [r3, #12]
 800a942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a946:	2b80      	cmp	r3, #128	; 0x80
 800a948:	d107      	bne.n	800a95a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 f9a1 	bl	800ac9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	691b      	ldr	r3, [r3, #16]
 800a960:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a964:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a968:	d10e      	bne.n	800a988 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	68db      	ldr	r3, [r3, #12]
 800a970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a974:	2b80      	cmp	r3, #128	; 0x80
 800a976:	d107      	bne.n	800a988 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a980:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a982:	6878      	ldr	r0, [r7, #4]
 800a984:	f000 f994 	bl	800acb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	691b      	ldr	r3, [r3, #16]
 800a98e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a992:	2b40      	cmp	r3, #64	; 0x40
 800a994:	d10e      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	68db      	ldr	r3, [r3, #12]
 800a99c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9a0:	2b40      	cmp	r3, #64	; 0x40
 800a9a2:	d107      	bne.n	800a9b4 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f000 f838 	bl	800aa24 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	691b      	ldr	r3, [r3, #16]
 800a9ba:	f003 0320 	and.w	r3, r3, #32
 800a9be:	2b20      	cmp	r3, #32
 800a9c0:	d10e      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	f003 0320 	and.w	r3, r3, #32
 800a9cc:	2b20      	cmp	r3, #32
 800a9ce:	d107      	bne.n	800a9e0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	f06f 0220 	mvn.w	r2, #32
 800a9d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	f000 f954 	bl	800ac88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a9e0:	bf00      	nop
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a9f0:	bf00      	nop
 800a9f2:	370c      	adds	r7, #12
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fa:	4770      	bx	lr

0800a9fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a9fc:	b480      	push	{r7}
 800a9fe:	b083      	sub	sp, #12
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aa04:	bf00      	nop
 800aa06:	370c      	adds	r7, #12
 800aa08:	46bd      	mov	sp, r7
 800aa0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0e:	4770      	bx	lr

0800aa10 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b083      	sub	sp, #12
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800aa18:	bf00      	nop
 800aa1a:	370c      	adds	r7, #12
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa22:	4770      	bx	lr

0800aa24 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800aa24:	b480      	push	{r7}
 800aa26:	b083      	sub	sp, #12
 800aa28:	af00      	add	r7, sp, #0
 800aa2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800aa2c:	bf00      	nop
 800aa2e:	370c      	adds	r7, #12
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr

0800aa38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b085      	sub	sp, #20
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
 800aa40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	4a40      	ldr	r2, [pc, #256]	; (800ab4c <TIM_Base_SetConfig+0x114>)
 800aa4c:	4293      	cmp	r3, r2
 800aa4e:	d013      	beq.n	800aa78 <TIM_Base_SetConfig+0x40>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa56:	d00f      	beq.n	800aa78 <TIM_Base_SetConfig+0x40>
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	4a3d      	ldr	r2, [pc, #244]	; (800ab50 <TIM_Base_SetConfig+0x118>)
 800aa5c:	4293      	cmp	r3, r2
 800aa5e:	d00b      	beq.n	800aa78 <TIM_Base_SetConfig+0x40>
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	4a3c      	ldr	r2, [pc, #240]	; (800ab54 <TIM_Base_SetConfig+0x11c>)
 800aa64:	4293      	cmp	r3, r2
 800aa66:	d007      	beq.n	800aa78 <TIM_Base_SetConfig+0x40>
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	4a3b      	ldr	r2, [pc, #236]	; (800ab58 <TIM_Base_SetConfig+0x120>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d003      	beq.n	800aa78 <TIM_Base_SetConfig+0x40>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	4a3a      	ldr	r2, [pc, #232]	; (800ab5c <TIM_Base_SetConfig+0x124>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d108      	bne.n	800aa8a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	685b      	ldr	r3, [r3, #4]
 800aa84:	68fa      	ldr	r2, [r7, #12]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a2f      	ldr	r2, [pc, #188]	; (800ab4c <TIM_Base_SetConfig+0x114>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d01f      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa98:	d01b      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	4a2c      	ldr	r2, [pc, #176]	; (800ab50 <TIM_Base_SetConfig+0x118>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d017      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	4a2b      	ldr	r2, [pc, #172]	; (800ab54 <TIM_Base_SetConfig+0x11c>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d013      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a2a      	ldr	r2, [pc, #168]	; (800ab58 <TIM_Base_SetConfig+0x120>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d00f      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	4a29      	ldr	r2, [pc, #164]	; (800ab5c <TIM_Base_SetConfig+0x124>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d00b      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	4a28      	ldr	r2, [pc, #160]	; (800ab60 <TIM_Base_SetConfig+0x128>)
 800aabe:	4293      	cmp	r3, r2
 800aac0:	d007      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	4a27      	ldr	r2, [pc, #156]	; (800ab64 <TIM_Base_SetConfig+0x12c>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d003      	beq.n	800aad2 <TIM_Base_SetConfig+0x9a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	4a26      	ldr	r2, [pc, #152]	; (800ab68 <TIM_Base_SetConfig+0x130>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d108      	bne.n	800aae4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aad8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800aada:	683b      	ldr	r3, [r7, #0]
 800aadc:	68db      	ldr	r3, [r3, #12]
 800aade:	68fa      	ldr	r2, [r7, #12]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	695b      	ldr	r3, [r3, #20]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	68fa      	ldr	r2, [r7, #12]
 800aaf6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aaf8:	683b      	ldr	r3, [r7, #0]
 800aafa:	689a      	ldr	r2, [r3, #8]
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ab00:	683b      	ldr	r3, [r7, #0]
 800ab02:	681a      	ldr	r2, [r3, #0]
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	4a10      	ldr	r2, [pc, #64]	; (800ab4c <TIM_Base_SetConfig+0x114>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d00f      	beq.n	800ab30 <TIM_Base_SetConfig+0xf8>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	4a12      	ldr	r2, [pc, #72]	; (800ab5c <TIM_Base_SetConfig+0x124>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d00b      	beq.n	800ab30 <TIM_Base_SetConfig+0xf8>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	4a11      	ldr	r2, [pc, #68]	; (800ab60 <TIM_Base_SetConfig+0x128>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d007      	beq.n	800ab30 <TIM_Base_SetConfig+0xf8>
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	4a10      	ldr	r2, [pc, #64]	; (800ab64 <TIM_Base_SetConfig+0x12c>)
 800ab24:	4293      	cmp	r3, r2
 800ab26:	d003      	beq.n	800ab30 <TIM_Base_SetConfig+0xf8>
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	4a0f      	ldr	r2, [pc, #60]	; (800ab68 <TIM_Base_SetConfig+0x130>)
 800ab2c:	4293      	cmp	r3, r2
 800ab2e:	d103      	bne.n	800ab38 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ab30:	683b      	ldr	r3, [r7, #0]
 800ab32:	691a      	ldr	r2, [r3, #16]
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	2201      	movs	r2, #1
 800ab3c:	615a      	str	r2, [r3, #20]
}
 800ab3e:	bf00      	nop
 800ab40:	3714      	adds	r7, #20
 800ab42:	46bd      	mov	sp, r7
 800ab44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab48:	4770      	bx	lr
 800ab4a:	bf00      	nop
 800ab4c:	40010000 	.word	0x40010000
 800ab50:	40000400 	.word	0x40000400
 800ab54:	40000800 	.word	0x40000800
 800ab58:	40000c00 	.word	0x40000c00
 800ab5c:	40010400 	.word	0x40010400
 800ab60:	40014000 	.word	0x40014000
 800ab64:	40014400 	.word	0x40014400
 800ab68:	40014800 	.word	0x40014800

0800ab6c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab6c:	b480      	push	{r7}
 800ab6e:	b085      	sub	sp, #20
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
 800ab74:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab7c:	2b01      	cmp	r3, #1
 800ab7e:	d101      	bne.n	800ab84 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab80:	2302      	movs	r3, #2
 800ab82:	e06d      	b.n	800ac60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2201      	movs	r2, #1
 800ab88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	2202      	movs	r2, #2
 800ab90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	689b      	ldr	r3, [r3, #8]
 800aba2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	4a30      	ldr	r2, [pc, #192]	; (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d004      	beq.n	800abb8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a2f      	ldr	r2, [pc, #188]	; (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d108      	bne.n	800abca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800abbe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	4313      	orrs	r3, r2
 800abc8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abd0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	681b      	ldr	r3, [r3, #0]
 800abd6:	68fa      	ldr	r2, [r7, #12]
 800abd8:	4313      	orrs	r3, r2
 800abda:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	68fa      	ldr	r2, [r7, #12]
 800abe2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	4a20      	ldr	r2, [pc, #128]	; (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d022      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf6:	d01d      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a1d      	ldr	r2, [pc, #116]	; (800ac74 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d018      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a1c      	ldr	r2, [pc, #112]	; (800ac78 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d013      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	4a1a      	ldr	r2, [pc, #104]	; (800ac7c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ac12:	4293      	cmp	r3, r2
 800ac14:	d00e      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	4a15      	ldr	r2, [pc, #84]	; (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d009      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	4a16      	ldr	r2, [pc, #88]	; (800ac80 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d004      	beq.n	800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	681b      	ldr	r3, [r3, #0]
 800ac2e:	4a15      	ldr	r2, [pc, #84]	; (800ac84 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac30:	4293      	cmp	r3, r2
 800ac32:	d10c      	bne.n	800ac4e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac34:	68bb      	ldr	r3, [r7, #8]
 800ac36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac3c:	683b      	ldr	r3, [r7, #0]
 800ac3e:	689b      	ldr	r3, [r3, #8]
 800ac40:	68ba      	ldr	r2, [r7, #8]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	68ba      	ldr	r2, [r7, #8]
 800ac4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2201      	movs	r2, #1
 800ac52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac56:	687b      	ldr	r3, [r7, #4]
 800ac58:	2200      	movs	r2, #0
 800ac5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac5e:	2300      	movs	r3, #0
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3714      	adds	r7, #20
 800ac64:	46bd      	mov	sp, r7
 800ac66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6a:	4770      	bx	lr
 800ac6c:	40010000 	.word	0x40010000
 800ac70:	40010400 	.word	0x40010400
 800ac74:	40000400 	.word	0x40000400
 800ac78:	40000800 	.word	0x40000800
 800ac7c:	40000c00 	.word	0x40000c00
 800ac80:	40001800 	.word	0x40001800
 800ac84:	40014000 	.word	0x40014000

0800ac88 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b083      	sub	sp, #12
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac90:	bf00      	nop
 800ac92:	370c      	adds	r7, #12
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b083      	sub	sp, #12
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800aca4:	bf00      	nop
 800aca6:	370c      	adds	r7, #12
 800aca8:	46bd      	mov	sp, r7
 800acaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acae:	4770      	bx	lr

0800acb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800acb8:	bf00      	nop
 800acba:	370c      	adds	r7, #12
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b082      	sub	sp, #8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d101      	bne.n	800acd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800acd2:	2301      	movs	r3, #1
 800acd4:	e042      	b.n	800ad5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d106      	bne.n	800acee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f7f8 ff73 	bl	8003bd4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	2224      	movs	r2, #36	; 0x24
 800acf2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	681a      	ldr	r2, [r3, #0]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	f022 0201 	bic.w	r2, r2, #1
 800ad04:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f000 fbea 	bl	800b4e0 <UART_SetConfig>
 800ad0c:	4603      	mov	r3, r0
 800ad0e:	2b01      	cmp	r3, #1
 800ad10:	d101      	bne.n	800ad16 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	e022      	b.n	800ad5c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d002      	beq.n	800ad24 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f001 f946 	bl	800bfb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	685a      	ldr	r2, [r3, #4]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800ad32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	689a      	ldr	r2, [r3, #8]
 800ad3a:	687b      	ldr	r3, [r7, #4]
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800ad42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	681a      	ldr	r2, [r3, #0]
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	f042 0201 	orr.w	r2, r2, #1
 800ad52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f001 f9cd 	bl	800c0f4 <UART_CheckIdleState>
 800ad5a:	4603      	mov	r3, r0
}
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	3708      	adds	r7, #8
 800ad60:	46bd      	mov	sp, r7
 800ad62:	bd80      	pop	{r7, pc}

0800ad64 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	b0ba      	sub	sp, #232	; 0xe8
 800ad68:	af00      	add	r7, sp, #0
 800ad6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	69db      	ldr	r3, [r3, #28]
 800ad72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad8a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ad8e:	f640 030f 	movw	r3, #2063	; 0x80f
 800ad92:	4013      	ands	r3, r2
 800ad94:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ad98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d11b      	bne.n	800add8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ada0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d015      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800adac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adb0:	f003 0320 	and.w	r3, r3, #32
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d105      	bne.n	800adc4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800adb8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800adbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d009      	beq.n	800add8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 835a 	beq.w	800b482 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	4798      	blx	r3
      }
      return;
 800add6:	e354      	b.n	800b482 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800add8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800addc:	2b00      	cmp	r3, #0
 800adde:	f000 811f 	beq.w	800b020 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ade2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ade6:	4b8b      	ldr	r3, [pc, #556]	; (800b014 <HAL_UART_IRQHandler+0x2b0>)
 800ade8:	4013      	ands	r3, r2
 800adea:	2b00      	cmp	r3, #0
 800adec:	d106      	bne.n	800adfc <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800adee:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800adf2:	4b89      	ldr	r3, [pc, #548]	; (800b018 <HAL_UART_IRQHandler+0x2b4>)
 800adf4:	4013      	ands	r3, r2
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f000 8112 	beq.w	800b020 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800adfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae00:	f003 0301 	and.w	r3, r3, #1
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d011      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
 800ae08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00b      	beq.n	800ae2c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	2201      	movs	r2, #1
 800ae1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae22:	f043 0201 	orr.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae30:	f003 0302 	and.w	r3, r3, #2
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d011      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
 800ae38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae3c:	f003 0301 	and.w	r3, r3, #1
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00b      	beq.n	800ae5c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	2202      	movs	r2, #2
 800ae4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae52:	f043 0204 	orr.w	r2, r3, #4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ae5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae60:	f003 0304 	and.w	r3, r3, #4
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d011      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
 800ae68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ae6c:	f003 0301 	and.w	r3, r3, #1
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00b      	beq.n	800ae8c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	2204      	movs	r2, #4
 800ae7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ae82:	f043 0202 	orr.w	r2, r3, #2
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ae90:	f003 0308 	and.w	r3, r3, #8
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d017      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ae98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae9c:	f003 0320 	and.w	r3, r3, #32
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d105      	bne.n	800aeb0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800aea4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800aea8:	4b5a      	ldr	r3, [pc, #360]	; (800b014 <HAL_UART_IRQHandler+0x2b0>)
 800aeaa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d00b      	beq.n	800aec8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	2208      	movs	r2, #8
 800aeb6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aebe:	f043 0208 	orr.w	r2, r3, #8
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aec8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800aecc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d012      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
 800aed4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800aed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d00c      	beq.n	800aefa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aee8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aef0:	f043 0220 	orr.w	r2, r3, #32
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af00:	2b00      	cmp	r3, #0
 800af02:	f000 82c0 	beq.w	800b486 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800af06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af0a:	f003 0320 	and.w	r3, r3, #32
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d013      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800af12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af16:	f003 0320 	and.w	r3, r3, #32
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d105      	bne.n	800af2a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800af1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800af22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af36:	6878      	ldr	r0, [r7, #4]
 800af38:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800af40:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	689b      	ldr	r3, [r3, #8]
 800af4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af4e:	2b40      	cmp	r3, #64	; 0x40
 800af50:	d005      	beq.n	800af5e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800af52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800af56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d04f      	beq.n	800affe <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f001 f9dc 	bl	800c31c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	689b      	ldr	r3, [r3, #8]
 800af6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6e:	2b40      	cmp	r3, #64	; 0x40
 800af70:	d141      	bne.n	800aff6 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	3308      	adds	r3, #8
 800af78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af80:	e853 3f00 	ldrex	r3, [r3]
 800af84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800af88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800af8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	3308      	adds	r3, #8
 800af9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800af9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800afa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800afaa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800afae:	e841 2300 	strex	r3, r2, [r1]
 800afb2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800afb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1d9      	bne.n	800af72 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d013      	beq.n	800afee <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afca:	4a14      	ldr	r2, [pc, #80]	; (800b01c <HAL_UART_IRQHandler+0x2b8>)
 800afcc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fa f83c 	bl	8005050 <HAL_DMA_Abort_IT>
 800afd8:	4603      	mov	r3, r0
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d017      	beq.n	800b00e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800afe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800afe4:	687a      	ldr	r2, [r7, #4]
 800afe6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800afe8:	4610      	mov	r0, r2
 800afea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afec:	e00f      	b.n	800b00e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f000 fa60 	bl	800b4b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aff4:	e00b      	b.n	800b00e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aff6:	6878      	ldr	r0, [r7, #4]
 800aff8:	f000 fa5c 	bl	800b4b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800affc:	e007      	b.n	800b00e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa58 	bl	800b4b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	2200      	movs	r2, #0
 800b008:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800b00c:	e23b      	b.n	800b486 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b00e:	bf00      	nop
    return;
 800b010:	e239      	b.n	800b486 <HAL_UART_IRQHandler+0x722>
 800b012:	bf00      	nop
 800b014:	10000001 	.word	0x10000001
 800b018:	04000120 	.word	0x04000120
 800b01c:	0800c3e9 	.word	0x0800c3e9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b024:	2b01      	cmp	r3, #1
 800b026:	f040 81ce 	bne.w	800b3c6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b02a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b02e:	f003 0310 	and.w	r3, r3, #16
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 81c7 	beq.w	800b3c6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b038:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b03c:	f003 0310 	and.w	r3, r3, #16
 800b040:	2b00      	cmp	r3, #0
 800b042:	f000 81c0 	beq.w	800b3c6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	2210      	movs	r2, #16
 800b04c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	689b      	ldr	r3, [r3, #8]
 800b054:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b058:	2b40      	cmp	r3, #64	; 0x40
 800b05a:	f040 813b 	bne.w	800b2d4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	4a8b      	ldr	r2, [pc, #556]	; (800b294 <HAL_UART_IRQHandler+0x530>)
 800b066:	4293      	cmp	r3, r2
 800b068:	d059      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a89      	ldr	r2, [pc, #548]	; (800b298 <HAL_UART_IRQHandler+0x534>)
 800b072:	4293      	cmp	r3, r2
 800b074:	d053      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a87      	ldr	r2, [pc, #540]	; (800b29c <HAL_UART_IRQHandler+0x538>)
 800b07e:	4293      	cmp	r3, r2
 800b080:	d04d      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a85      	ldr	r2, [pc, #532]	; (800b2a0 <HAL_UART_IRQHandler+0x53c>)
 800b08a:	4293      	cmp	r3, r2
 800b08c:	d047      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	4a83      	ldr	r2, [pc, #524]	; (800b2a4 <HAL_UART_IRQHandler+0x540>)
 800b096:	4293      	cmp	r3, r2
 800b098:	d041      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a81      	ldr	r2, [pc, #516]	; (800b2a8 <HAL_UART_IRQHandler+0x544>)
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d03b      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	4a7f      	ldr	r2, [pc, #508]	; (800b2ac <HAL_UART_IRQHandler+0x548>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d035      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	4a7d      	ldr	r2, [pc, #500]	; (800b2b0 <HAL_UART_IRQHandler+0x54c>)
 800b0ba:	4293      	cmp	r3, r2
 800b0bc:	d02f      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0c2:	681b      	ldr	r3, [r3, #0]
 800b0c4:	4a7b      	ldr	r2, [pc, #492]	; (800b2b4 <HAL_UART_IRQHandler+0x550>)
 800b0c6:	4293      	cmp	r3, r2
 800b0c8:	d029      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	4a79      	ldr	r2, [pc, #484]	; (800b2b8 <HAL_UART_IRQHandler+0x554>)
 800b0d2:	4293      	cmp	r3, r2
 800b0d4:	d023      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	4a77      	ldr	r2, [pc, #476]	; (800b2bc <HAL_UART_IRQHandler+0x558>)
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d01d      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a75      	ldr	r2, [pc, #468]	; (800b2c0 <HAL_UART_IRQHandler+0x55c>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d017      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0f2:	681b      	ldr	r3, [r3, #0]
 800b0f4:	4a73      	ldr	r2, [pc, #460]	; (800b2c4 <HAL_UART_IRQHandler+0x560>)
 800b0f6:	4293      	cmp	r3, r2
 800b0f8:	d011      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	4a71      	ldr	r2, [pc, #452]	; (800b2c8 <HAL_UART_IRQHandler+0x564>)
 800b102:	4293      	cmp	r3, r2
 800b104:	d00b      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b10a:	681b      	ldr	r3, [r3, #0]
 800b10c:	4a6f      	ldr	r2, [pc, #444]	; (800b2cc <HAL_UART_IRQHandler+0x568>)
 800b10e:	4293      	cmp	r3, r2
 800b110:	d005      	beq.n	800b11e <HAL_UART_IRQHandler+0x3ba>
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	4a6d      	ldr	r2, [pc, #436]	; (800b2d0 <HAL_UART_IRQHandler+0x56c>)
 800b11a:	4293      	cmp	r3, r2
 800b11c:	d105      	bne.n	800b12a <HAL_UART_IRQHandler+0x3c6>
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	b29b      	uxth	r3, r3
 800b128:	e004      	b.n	800b134 <HAL_UART_IRQHandler+0x3d0>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	685b      	ldr	r3, [r3, #4]
 800b132:	b29b      	uxth	r3, r3
 800b134:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b138:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	f000 81a4 	beq.w	800b48a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b148:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b14c:	429a      	cmp	r2, r3
 800b14e:	f080 819c 	bcs.w	800b48a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b158:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b160:	69db      	ldr	r3, [r3, #28]
 800b162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b166:	f000 8086 	beq.w	800b276 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b172:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b17e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b182:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b186:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	461a      	mov	r2, r3
 800b190:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b194:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800b198:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b19c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b1a0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b1a4:	e841 2300 	strex	r3, r2, [r1]
 800b1a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b1ac:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d1da      	bne.n	800b16a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	3308      	adds	r3, #8
 800b1ba:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b1be:	e853 3f00 	ldrex	r3, [r3]
 800b1c2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b1c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b1c6:	f023 0301 	bic.w	r3, r3, #1
 800b1ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	3308      	adds	r3, #8
 800b1d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b1d8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b1dc:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b1e0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b1e4:	e841 2300 	strex	r3, r2, [r1]
 800b1e8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b1ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d1e1      	bne.n	800b1b4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	3308      	adds	r3, #8
 800b1f6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1f8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b1fa:	e853 3f00 	ldrex	r3, [r3]
 800b1fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b202:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b206:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	3308      	adds	r3, #8
 800b210:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b214:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b216:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b218:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b21a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b21c:	e841 2300 	strex	r3, r2, [r1]
 800b220:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b222:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b224:	2b00      	cmp	r3, #0
 800b226:	d1e3      	bne.n	800b1f0 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	2220      	movs	r2, #32
 800b22c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	2200      	movs	r2, #0
 800b234:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b23c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b23e:	e853 3f00 	ldrex	r3, [r3]
 800b242:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b244:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b246:	f023 0310 	bic.w	r3, r3, #16
 800b24a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b24e:	687b      	ldr	r3, [r7, #4]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	461a      	mov	r2, r3
 800b254:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b258:	65bb      	str	r3, [r7, #88]	; 0x58
 800b25a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b25c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b25e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b260:	e841 2300 	strex	r3, r2, [r1]
 800b264:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b266:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d1e4      	bne.n	800b236 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b270:	4618      	mov	r0, r3
 800b272:	f7f9 fbcf 	bl	8004a14 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b282:	b29b      	uxth	r3, r3
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	b29b      	uxth	r3, r3
 800b288:	4619      	mov	r1, r3
 800b28a:	6878      	ldr	r0, [r7, #4]
 800b28c:	f000 f91c 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b290:	e0fb      	b.n	800b48a <HAL_UART_IRQHandler+0x726>
 800b292:	bf00      	nop
 800b294:	40020010 	.word	0x40020010
 800b298:	40020028 	.word	0x40020028
 800b29c:	40020040 	.word	0x40020040
 800b2a0:	40020058 	.word	0x40020058
 800b2a4:	40020070 	.word	0x40020070
 800b2a8:	40020088 	.word	0x40020088
 800b2ac:	400200a0 	.word	0x400200a0
 800b2b0:	400200b8 	.word	0x400200b8
 800b2b4:	40020410 	.word	0x40020410
 800b2b8:	40020428 	.word	0x40020428
 800b2bc:	40020440 	.word	0x40020440
 800b2c0:	40020458 	.word	0x40020458
 800b2c4:	40020470 	.word	0x40020470
 800b2c8:	40020488 	.word	0x40020488
 800b2cc:	400204a0 	.word	0x400204a0
 800b2d0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2e0:	b29b      	uxth	r3, r3
 800b2e2:	1ad3      	subs	r3, r2, r3
 800b2e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800b2ee:	b29b      	uxth	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 80cc 	beq.w	800b48e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800b2f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	f000 80c7 	beq.w	800b48e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b308:	e853 3f00 	ldrex	r3, [r3]
 800b30c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b30e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b310:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b314:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	681b      	ldr	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b322:	647b      	str	r3, [r7, #68]	; 0x44
 800b324:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b326:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b328:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b32a:	e841 2300 	strex	r3, r2, [r1]
 800b32e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b330:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b332:	2b00      	cmp	r3, #0
 800b334:	d1e4      	bne.n	800b300 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	3308      	adds	r3, #8
 800b33c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b340:	e853 3f00 	ldrex	r3, [r3]
 800b344:	623b      	str	r3, [r7, #32]
   return(result);
 800b346:	6a3a      	ldr	r2, [r7, #32]
 800b348:	4b54      	ldr	r3, [pc, #336]	; (800b49c <HAL_UART_IRQHandler+0x738>)
 800b34a:	4013      	ands	r3, r2
 800b34c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	3308      	adds	r3, #8
 800b356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b35a:	633a      	str	r2, [r7, #48]	; 0x30
 800b35c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b35e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b362:	e841 2300 	strex	r3, r2, [r1]
 800b366:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b368:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d1e3      	bne.n	800b336 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	2220      	movs	r2, #32
 800b372:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2200      	movs	r2, #0
 800b37a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2200      	movs	r2, #0
 800b380:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	e853 3f00 	ldrex	r3, [r3]
 800b38e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	f023 0310 	bic.w	r3, r3, #16
 800b396:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	461a      	mov	r2, r3
 800b3a0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b3a4:	61fb      	str	r3, [r7, #28]
 800b3a6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3a8:	69b9      	ldr	r1, [r7, #24]
 800b3aa:	69fa      	ldr	r2, [r7, #28]
 800b3ac:	e841 2300 	strex	r3, r2, [r1]
 800b3b0:	617b      	str	r3, [r7, #20]
   return(result);
 800b3b2:	697b      	ldr	r3, [r7, #20]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d1e4      	bne.n	800b382 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b3b8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3bc:	4619      	mov	r1, r3
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	f000 f882 	bl	800b4c8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b3c4:	e063      	b.n	800b48e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b3c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d00e      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x68c>
 800b3d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b3d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d008      	beq.n	800b3f0 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800b3e6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f001 f83e 	bl	800c46a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b3ee:	e051      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800b3f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b3f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d014      	beq.n	800b426 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800b3fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b404:	2b00      	cmp	r3, #0
 800b406:	d105      	bne.n	800b414 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800b408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b40c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b410:	2b00      	cmp	r3, #0
 800b412:	d008      	beq.n	800b426 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d03a      	beq.n	800b492 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	4798      	blx	r3
    }
    return;
 800b424:	e035      	b.n	800b492 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b42a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d009      	beq.n	800b446 <HAL_UART_IRQHandler+0x6e2>
 800b432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d003      	beq.n	800b446 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f000 ffe8 	bl	800c414 <UART_EndTransmit_IT>
    return;
 800b444:	e026      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800b446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b44a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d009      	beq.n	800b466 <HAL_UART_IRQHandler+0x702>
 800b452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b456:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d003      	beq.n	800b466 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	f001 f817 	bl	800c492 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b464:	e016      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800b466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b46a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b46e:	2b00      	cmp	r3, #0
 800b470:	d010      	beq.n	800b494 <HAL_UART_IRQHandler+0x730>
 800b472:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b476:	2b00      	cmp	r3, #0
 800b478:	da0c      	bge.n	800b494 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800b47a:	6878      	ldr	r0, [r7, #4]
 800b47c:	f000 ffff 	bl	800c47e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b480:	e008      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
      return;
 800b482:	bf00      	nop
 800b484:	e006      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
    return;
 800b486:	bf00      	nop
 800b488:	e004      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
      return;
 800b48a:	bf00      	nop
 800b48c:	e002      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
      return;
 800b48e:	bf00      	nop
 800b490:	e000      	b.n	800b494 <HAL_UART_IRQHandler+0x730>
    return;
 800b492:	bf00      	nop
  }
}
 800b494:	37e8      	adds	r7, #232	; 0xe8
 800b496:	46bd      	mov	sp, r7
 800b498:	bd80      	pop	{r7, pc}
 800b49a:	bf00      	nop
 800b49c:	effffffe 	.word	0xeffffffe

0800b4a0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4a0:	b480      	push	{r7}
 800b4a2:	b083      	sub	sp, #12
 800b4a4:	af00      	add	r7, sp, #0
 800b4a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b4bc:	bf00      	nop
 800b4be:	370c      	adds	r7, #12
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c6:	4770      	bx	lr

0800b4c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b4c8:	b480      	push	{r7}
 800b4ca:	b083      	sub	sp, #12
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b4d4:	bf00      	nop
 800b4d6:	370c      	adds	r7, #12
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4de:	4770      	bx	lr

0800b4e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b4e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b4e4:	b092      	sub	sp, #72	; 0x48
 800b4e6:	af00      	add	r7, sp, #0
 800b4e8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b4ea:	2300      	movs	r3, #0
 800b4ec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b4f0:	697b      	ldr	r3, [r7, #20]
 800b4f2:	689a      	ldr	r2, [r3, #8]
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	691b      	ldr	r3, [r3, #16]
 800b4f8:	431a      	orrs	r2, r3
 800b4fa:	697b      	ldr	r3, [r7, #20]
 800b4fc:	695b      	ldr	r3, [r3, #20]
 800b4fe:	431a      	orrs	r2, r3
 800b500:	697b      	ldr	r3, [r7, #20]
 800b502:	69db      	ldr	r3, [r3, #28]
 800b504:	4313      	orrs	r3, r2
 800b506:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b508:	697b      	ldr	r3, [r7, #20]
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	681a      	ldr	r2, [r3, #0]
 800b50e:	4bbe      	ldr	r3, [pc, #760]	; (800b808 <UART_SetConfig+0x328>)
 800b510:	4013      	ands	r3, r2
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	6812      	ldr	r2, [r2, #0]
 800b516:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b518:	430b      	orrs	r3, r1
 800b51a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	685b      	ldr	r3, [r3, #4]
 800b522:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b526:	697b      	ldr	r3, [r7, #20]
 800b528:	68da      	ldr	r2, [r3, #12]
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	430a      	orrs	r2, r1
 800b530:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	699b      	ldr	r3, [r3, #24]
 800b536:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	4ab3      	ldr	r2, [pc, #716]	; (800b80c <UART_SetConfig+0x32c>)
 800b53e:	4293      	cmp	r3, r2
 800b540:	d004      	beq.n	800b54c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b542:	697b      	ldr	r3, [r7, #20]
 800b544:	6a1b      	ldr	r3, [r3, #32]
 800b546:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b548:	4313      	orrs	r3, r2
 800b54a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b54c:	697b      	ldr	r3, [r7, #20]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	689a      	ldr	r2, [r3, #8]
 800b552:	4baf      	ldr	r3, [pc, #700]	; (800b810 <UART_SetConfig+0x330>)
 800b554:	4013      	ands	r3, r2
 800b556:	697a      	ldr	r2, [r7, #20]
 800b558:	6812      	ldr	r2, [r2, #0]
 800b55a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800b55c:	430b      	orrs	r3, r1
 800b55e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800b560:	697b      	ldr	r3, [r7, #20]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b566:	f023 010f 	bic.w	r1, r3, #15
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	430a      	orrs	r2, r1
 800b574:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b576:	697b      	ldr	r3, [r7, #20]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	4aa6      	ldr	r2, [pc, #664]	; (800b814 <UART_SetConfig+0x334>)
 800b57c:	4293      	cmp	r3, r2
 800b57e:	d177      	bne.n	800b670 <UART_SetConfig+0x190>
 800b580:	4ba5      	ldr	r3, [pc, #660]	; (800b818 <UART_SetConfig+0x338>)
 800b582:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b584:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b588:	2b28      	cmp	r3, #40	; 0x28
 800b58a:	d86d      	bhi.n	800b668 <UART_SetConfig+0x188>
 800b58c:	a201      	add	r2, pc, #4	; (adr r2, 800b594 <UART_SetConfig+0xb4>)
 800b58e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b592:	bf00      	nop
 800b594:	0800b639 	.word	0x0800b639
 800b598:	0800b669 	.word	0x0800b669
 800b59c:	0800b669 	.word	0x0800b669
 800b5a0:	0800b669 	.word	0x0800b669
 800b5a4:	0800b669 	.word	0x0800b669
 800b5a8:	0800b669 	.word	0x0800b669
 800b5ac:	0800b669 	.word	0x0800b669
 800b5b0:	0800b669 	.word	0x0800b669
 800b5b4:	0800b641 	.word	0x0800b641
 800b5b8:	0800b669 	.word	0x0800b669
 800b5bc:	0800b669 	.word	0x0800b669
 800b5c0:	0800b669 	.word	0x0800b669
 800b5c4:	0800b669 	.word	0x0800b669
 800b5c8:	0800b669 	.word	0x0800b669
 800b5cc:	0800b669 	.word	0x0800b669
 800b5d0:	0800b669 	.word	0x0800b669
 800b5d4:	0800b649 	.word	0x0800b649
 800b5d8:	0800b669 	.word	0x0800b669
 800b5dc:	0800b669 	.word	0x0800b669
 800b5e0:	0800b669 	.word	0x0800b669
 800b5e4:	0800b669 	.word	0x0800b669
 800b5e8:	0800b669 	.word	0x0800b669
 800b5ec:	0800b669 	.word	0x0800b669
 800b5f0:	0800b669 	.word	0x0800b669
 800b5f4:	0800b651 	.word	0x0800b651
 800b5f8:	0800b669 	.word	0x0800b669
 800b5fc:	0800b669 	.word	0x0800b669
 800b600:	0800b669 	.word	0x0800b669
 800b604:	0800b669 	.word	0x0800b669
 800b608:	0800b669 	.word	0x0800b669
 800b60c:	0800b669 	.word	0x0800b669
 800b610:	0800b669 	.word	0x0800b669
 800b614:	0800b659 	.word	0x0800b659
 800b618:	0800b669 	.word	0x0800b669
 800b61c:	0800b669 	.word	0x0800b669
 800b620:	0800b669 	.word	0x0800b669
 800b624:	0800b669 	.word	0x0800b669
 800b628:	0800b669 	.word	0x0800b669
 800b62c:	0800b669 	.word	0x0800b669
 800b630:	0800b669 	.word	0x0800b669
 800b634:	0800b661 	.word	0x0800b661
 800b638:	2301      	movs	r3, #1
 800b63a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b63e:	e222      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b640:	2304      	movs	r3, #4
 800b642:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b646:	e21e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b648:	2308      	movs	r3, #8
 800b64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b64e:	e21a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b650:	2310      	movs	r3, #16
 800b652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b656:	e216      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b658:	2320      	movs	r3, #32
 800b65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b65e:	e212      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b660:	2340      	movs	r3, #64	; 0x40
 800b662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b666:	e20e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b668:	2380      	movs	r3, #128	; 0x80
 800b66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b66e:	e20a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b670:	697b      	ldr	r3, [r7, #20]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	4a69      	ldr	r2, [pc, #420]	; (800b81c <UART_SetConfig+0x33c>)
 800b676:	4293      	cmp	r3, r2
 800b678:	d130      	bne.n	800b6dc <UART_SetConfig+0x1fc>
 800b67a:	4b67      	ldr	r3, [pc, #412]	; (800b818 <UART_SetConfig+0x338>)
 800b67c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b67e:	f003 0307 	and.w	r3, r3, #7
 800b682:	2b05      	cmp	r3, #5
 800b684:	d826      	bhi.n	800b6d4 <UART_SetConfig+0x1f4>
 800b686:	a201      	add	r2, pc, #4	; (adr r2, 800b68c <UART_SetConfig+0x1ac>)
 800b688:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b68c:	0800b6a5 	.word	0x0800b6a5
 800b690:	0800b6ad 	.word	0x0800b6ad
 800b694:	0800b6b5 	.word	0x0800b6b5
 800b698:	0800b6bd 	.word	0x0800b6bd
 800b69c:	0800b6c5 	.word	0x0800b6c5
 800b6a0:	0800b6cd 	.word	0x0800b6cd
 800b6a4:	2300      	movs	r3, #0
 800b6a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6aa:	e1ec      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6ac:	2304      	movs	r3, #4
 800b6ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6b2:	e1e8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6b4:	2308      	movs	r3, #8
 800b6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ba:	e1e4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6bc:	2310      	movs	r3, #16
 800b6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6c2:	e1e0      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6c4:	2320      	movs	r3, #32
 800b6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6ca:	e1dc      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6cc:	2340      	movs	r3, #64	; 0x40
 800b6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6d2:	e1d8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6d4:	2380      	movs	r3, #128	; 0x80
 800b6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b6da:	e1d4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	4a4f      	ldr	r2, [pc, #316]	; (800b820 <UART_SetConfig+0x340>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d130      	bne.n	800b748 <UART_SetConfig+0x268>
 800b6e6:	4b4c      	ldr	r3, [pc, #304]	; (800b818 <UART_SetConfig+0x338>)
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ea:	f003 0307 	and.w	r3, r3, #7
 800b6ee:	2b05      	cmp	r3, #5
 800b6f0:	d826      	bhi.n	800b740 <UART_SetConfig+0x260>
 800b6f2:	a201      	add	r2, pc, #4	; (adr r2, 800b6f8 <UART_SetConfig+0x218>)
 800b6f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f8:	0800b711 	.word	0x0800b711
 800b6fc:	0800b719 	.word	0x0800b719
 800b700:	0800b721 	.word	0x0800b721
 800b704:	0800b729 	.word	0x0800b729
 800b708:	0800b731 	.word	0x0800b731
 800b70c:	0800b739 	.word	0x0800b739
 800b710:	2300      	movs	r3, #0
 800b712:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b716:	e1b6      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b718:	2304      	movs	r3, #4
 800b71a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b71e:	e1b2      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b720:	2308      	movs	r3, #8
 800b722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b726:	e1ae      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b728:	2310      	movs	r3, #16
 800b72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b72e:	e1aa      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b730:	2320      	movs	r3, #32
 800b732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b736:	e1a6      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b738:	2340      	movs	r3, #64	; 0x40
 800b73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b73e:	e1a2      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b740:	2380      	movs	r3, #128	; 0x80
 800b742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b746:	e19e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	4a35      	ldr	r2, [pc, #212]	; (800b824 <UART_SetConfig+0x344>)
 800b74e:	4293      	cmp	r3, r2
 800b750:	d130      	bne.n	800b7b4 <UART_SetConfig+0x2d4>
 800b752:	4b31      	ldr	r3, [pc, #196]	; (800b818 <UART_SetConfig+0x338>)
 800b754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b756:	f003 0307 	and.w	r3, r3, #7
 800b75a:	2b05      	cmp	r3, #5
 800b75c:	d826      	bhi.n	800b7ac <UART_SetConfig+0x2cc>
 800b75e:	a201      	add	r2, pc, #4	; (adr r2, 800b764 <UART_SetConfig+0x284>)
 800b760:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b764:	0800b77d 	.word	0x0800b77d
 800b768:	0800b785 	.word	0x0800b785
 800b76c:	0800b78d 	.word	0x0800b78d
 800b770:	0800b795 	.word	0x0800b795
 800b774:	0800b79d 	.word	0x0800b79d
 800b778:	0800b7a5 	.word	0x0800b7a5
 800b77c:	2300      	movs	r3, #0
 800b77e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b782:	e180      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b784:	2304      	movs	r3, #4
 800b786:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b78a:	e17c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b78c:	2308      	movs	r3, #8
 800b78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b792:	e178      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b794:	2310      	movs	r3, #16
 800b796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b79a:	e174      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b79c:	2320      	movs	r3, #32
 800b79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7a2:	e170      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7a4:	2340      	movs	r3, #64	; 0x40
 800b7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7aa:	e16c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7ac:	2380      	movs	r3, #128	; 0x80
 800b7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7b2:	e168      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7b4:	697b      	ldr	r3, [r7, #20]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a1b      	ldr	r2, [pc, #108]	; (800b828 <UART_SetConfig+0x348>)
 800b7ba:	4293      	cmp	r3, r2
 800b7bc:	d142      	bne.n	800b844 <UART_SetConfig+0x364>
 800b7be:	4b16      	ldr	r3, [pc, #88]	; (800b818 <UART_SetConfig+0x338>)
 800b7c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c2:	f003 0307 	and.w	r3, r3, #7
 800b7c6:	2b05      	cmp	r3, #5
 800b7c8:	d838      	bhi.n	800b83c <UART_SetConfig+0x35c>
 800b7ca:	a201      	add	r2, pc, #4	; (adr r2, 800b7d0 <UART_SetConfig+0x2f0>)
 800b7cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7d0:	0800b7e9 	.word	0x0800b7e9
 800b7d4:	0800b7f1 	.word	0x0800b7f1
 800b7d8:	0800b7f9 	.word	0x0800b7f9
 800b7dc:	0800b801 	.word	0x0800b801
 800b7e0:	0800b82d 	.word	0x0800b82d
 800b7e4:	0800b835 	.word	0x0800b835
 800b7e8:	2300      	movs	r3, #0
 800b7ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7ee:	e14a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7f0:	2304      	movs	r3, #4
 800b7f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7f6:	e146      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b7f8:	2308      	movs	r3, #8
 800b7fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b7fe:	e142      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b800:	2310      	movs	r3, #16
 800b802:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b806:	e13e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b808:	cfff69f3 	.word	0xcfff69f3
 800b80c:	58000c00 	.word	0x58000c00
 800b810:	11fff4ff 	.word	0x11fff4ff
 800b814:	40011000 	.word	0x40011000
 800b818:	58024400 	.word	0x58024400
 800b81c:	40004400 	.word	0x40004400
 800b820:	40004800 	.word	0x40004800
 800b824:	40004c00 	.word	0x40004c00
 800b828:	40005000 	.word	0x40005000
 800b82c:	2320      	movs	r3, #32
 800b82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b832:	e128      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b834:	2340      	movs	r3, #64	; 0x40
 800b836:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b83a:	e124      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b83c:	2380      	movs	r3, #128	; 0x80
 800b83e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b842:	e120      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b844:	697b      	ldr	r3, [r7, #20]
 800b846:	681b      	ldr	r3, [r3, #0]
 800b848:	4acb      	ldr	r2, [pc, #812]	; (800bb78 <UART_SetConfig+0x698>)
 800b84a:	4293      	cmp	r3, r2
 800b84c:	d176      	bne.n	800b93c <UART_SetConfig+0x45c>
 800b84e:	4bcb      	ldr	r3, [pc, #812]	; (800bb7c <UART_SetConfig+0x69c>)
 800b850:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b852:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b856:	2b28      	cmp	r3, #40	; 0x28
 800b858:	d86c      	bhi.n	800b934 <UART_SetConfig+0x454>
 800b85a:	a201      	add	r2, pc, #4	; (adr r2, 800b860 <UART_SetConfig+0x380>)
 800b85c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b860:	0800b905 	.word	0x0800b905
 800b864:	0800b935 	.word	0x0800b935
 800b868:	0800b935 	.word	0x0800b935
 800b86c:	0800b935 	.word	0x0800b935
 800b870:	0800b935 	.word	0x0800b935
 800b874:	0800b935 	.word	0x0800b935
 800b878:	0800b935 	.word	0x0800b935
 800b87c:	0800b935 	.word	0x0800b935
 800b880:	0800b90d 	.word	0x0800b90d
 800b884:	0800b935 	.word	0x0800b935
 800b888:	0800b935 	.word	0x0800b935
 800b88c:	0800b935 	.word	0x0800b935
 800b890:	0800b935 	.word	0x0800b935
 800b894:	0800b935 	.word	0x0800b935
 800b898:	0800b935 	.word	0x0800b935
 800b89c:	0800b935 	.word	0x0800b935
 800b8a0:	0800b915 	.word	0x0800b915
 800b8a4:	0800b935 	.word	0x0800b935
 800b8a8:	0800b935 	.word	0x0800b935
 800b8ac:	0800b935 	.word	0x0800b935
 800b8b0:	0800b935 	.word	0x0800b935
 800b8b4:	0800b935 	.word	0x0800b935
 800b8b8:	0800b935 	.word	0x0800b935
 800b8bc:	0800b935 	.word	0x0800b935
 800b8c0:	0800b91d 	.word	0x0800b91d
 800b8c4:	0800b935 	.word	0x0800b935
 800b8c8:	0800b935 	.word	0x0800b935
 800b8cc:	0800b935 	.word	0x0800b935
 800b8d0:	0800b935 	.word	0x0800b935
 800b8d4:	0800b935 	.word	0x0800b935
 800b8d8:	0800b935 	.word	0x0800b935
 800b8dc:	0800b935 	.word	0x0800b935
 800b8e0:	0800b925 	.word	0x0800b925
 800b8e4:	0800b935 	.word	0x0800b935
 800b8e8:	0800b935 	.word	0x0800b935
 800b8ec:	0800b935 	.word	0x0800b935
 800b8f0:	0800b935 	.word	0x0800b935
 800b8f4:	0800b935 	.word	0x0800b935
 800b8f8:	0800b935 	.word	0x0800b935
 800b8fc:	0800b935 	.word	0x0800b935
 800b900:	0800b92d 	.word	0x0800b92d
 800b904:	2301      	movs	r3, #1
 800b906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b90a:	e0bc      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b90c:	2304      	movs	r3, #4
 800b90e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b912:	e0b8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b914:	2308      	movs	r3, #8
 800b916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b91a:	e0b4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b91c:	2310      	movs	r3, #16
 800b91e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b922:	e0b0      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b924:	2320      	movs	r3, #32
 800b926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b92a:	e0ac      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b92c:	2340      	movs	r3, #64	; 0x40
 800b92e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b932:	e0a8      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b934:	2380      	movs	r3, #128	; 0x80
 800b936:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b93a:	e0a4      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b93c:	697b      	ldr	r3, [r7, #20]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	4a8f      	ldr	r2, [pc, #572]	; (800bb80 <UART_SetConfig+0x6a0>)
 800b942:	4293      	cmp	r3, r2
 800b944:	d130      	bne.n	800b9a8 <UART_SetConfig+0x4c8>
 800b946:	4b8d      	ldr	r3, [pc, #564]	; (800bb7c <UART_SetConfig+0x69c>)
 800b948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b94a:	f003 0307 	and.w	r3, r3, #7
 800b94e:	2b05      	cmp	r3, #5
 800b950:	d826      	bhi.n	800b9a0 <UART_SetConfig+0x4c0>
 800b952:	a201      	add	r2, pc, #4	; (adr r2, 800b958 <UART_SetConfig+0x478>)
 800b954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b958:	0800b971 	.word	0x0800b971
 800b95c:	0800b979 	.word	0x0800b979
 800b960:	0800b981 	.word	0x0800b981
 800b964:	0800b989 	.word	0x0800b989
 800b968:	0800b991 	.word	0x0800b991
 800b96c:	0800b999 	.word	0x0800b999
 800b970:	2300      	movs	r3, #0
 800b972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b976:	e086      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b978:	2304      	movs	r3, #4
 800b97a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b97e:	e082      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b980:	2308      	movs	r3, #8
 800b982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b986:	e07e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b988:	2310      	movs	r3, #16
 800b98a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b98e:	e07a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b990:	2320      	movs	r3, #32
 800b992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b996:	e076      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b998:	2340      	movs	r3, #64	; 0x40
 800b99a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b99e:	e072      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9a0:	2380      	movs	r3, #128	; 0x80
 800b9a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9a6:	e06e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	4a75      	ldr	r2, [pc, #468]	; (800bb84 <UART_SetConfig+0x6a4>)
 800b9ae:	4293      	cmp	r3, r2
 800b9b0:	d130      	bne.n	800ba14 <UART_SetConfig+0x534>
 800b9b2:	4b72      	ldr	r3, [pc, #456]	; (800bb7c <UART_SetConfig+0x69c>)
 800b9b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9b6:	f003 0307 	and.w	r3, r3, #7
 800b9ba:	2b05      	cmp	r3, #5
 800b9bc:	d826      	bhi.n	800ba0c <UART_SetConfig+0x52c>
 800b9be:	a201      	add	r2, pc, #4	; (adr r2, 800b9c4 <UART_SetConfig+0x4e4>)
 800b9c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9c4:	0800b9dd 	.word	0x0800b9dd
 800b9c8:	0800b9e5 	.word	0x0800b9e5
 800b9cc:	0800b9ed 	.word	0x0800b9ed
 800b9d0:	0800b9f5 	.word	0x0800b9f5
 800b9d4:	0800b9fd 	.word	0x0800b9fd
 800b9d8:	0800ba05 	.word	0x0800ba05
 800b9dc:	2300      	movs	r3, #0
 800b9de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9e2:	e050      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9e4:	2304      	movs	r3, #4
 800b9e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9ea:	e04c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9ec:	2308      	movs	r3, #8
 800b9ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9f2:	e048      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9f4:	2310      	movs	r3, #16
 800b9f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800b9fa:	e044      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800b9fc:	2320      	movs	r3, #32
 800b9fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba02:	e040      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba04:	2340      	movs	r3, #64	; 0x40
 800ba06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba0a:	e03c      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba0c:	2380      	movs	r3, #128	; 0x80
 800ba0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba12:	e038      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	4a5b      	ldr	r2, [pc, #364]	; (800bb88 <UART_SetConfig+0x6a8>)
 800ba1a:	4293      	cmp	r3, r2
 800ba1c:	d130      	bne.n	800ba80 <UART_SetConfig+0x5a0>
 800ba1e:	4b57      	ldr	r3, [pc, #348]	; (800bb7c <UART_SetConfig+0x69c>)
 800ba20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba22:	f003 0307 	and.w	r3, r3, #7
 800ba26:	2b05      	cmp	r3, #5
 800ba28:	d826      	bhi.n	800ba78 <UART_SetConfig+0x598>
 800ba2a:	a201      	add	r2, pc, #4	; (adr r2, 800ba30 <UART_SetConfig+0x550>)
 800ba2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba30:	0800ba49 	.word	0x0800ba49
 800ba34:	0800ba51 	.word	0x0800ba51
 800ba38:	0800ba59 	.word	0x0800ba59
 800ba3c:	0800ba61 	.word	0x0800ba61
 800ba40:	0800ba69 	.word	0x0800ba69
 800ba44:	0800ba71 	.word	0x0800ba71
 800ba48:	2302      	movs	r3, #2
 800ba4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba4e:	e01a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba50:	2304      	movs	r3, #4
 800ba52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba56:	e016      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba58:	2308      	movs	r3, #8
 800ba5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba5e:	e012      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba60:	2310      	movs	r3, #16
 800ba62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba66:	e00e      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba68:	2320      	movs	r3, #32
 800ba6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba6e:	e00a      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba70:	2340      	movs	r3, #64	; 0x40
 800ba72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba76:	e006      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba78:	2380      	movs	r3, #128	; 0x80
 800ba7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ba7e:	e002      	b.n	800ba86 <UART_SetConfig+0x5a6>
 800ba80:	2380      	movs	r3, #128	; 0x80
 800ba82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	4a3f      	ldr	r2, [pc, #252]	; (800bb88 <UART_SetConfig+0x6a8>)
 800ba8c:	4293      	cmp	r3, r2
 800ba8e:	f040 80f8 	bne.w	800bc82 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800ba92:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800ba96:	2b20      	cmp	r3, #32
 800ba98:	dc46      	bgt.n	800bb28 <UART_SetConfig+0x648>
 800ba9a:	2b02      	cmp	r3, #2
 800ba9c:	f2c0 8082 	blt.w	800bba4 <UART_SetConfig+0x6c4>
 800baa0:	3b02      	subs	r3, #2
 800baa2:	2b1e      	cmp	r3, #30
 800baa4:	d87e      	bhi.n	800bba4 <UART_SetConfig+0x6c4>
 800baa6:	a201      	add	r2, pc, #4	; (adr r2, 800baac <UART_SetConfig+0x5cc>)
 800baa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800baac:	0800bb2f 	.word	0x0800bb2f
 800bab0:	0800bba5 	.word	0x0800bba5
 800bab4:	0800bb37 	.word	0x0800bb37
 800bab8:	0800bba5 	.word	0x0800bba5
 800babc:	0800bba5 	.word	0x0800bba5
 800bac0:	0800bba5 	.word	0x0800bba5
 800bac4:	0800bb47 	.word	0x0800bb47
 800bac8:	0800bba5 	.word	0x0800bba5
 800bacc:	0800bba5 	.word	0x0800bba5
 800bad0:	0800bba5 	.word	0x0800bba5
 800bad4:	0800bba5 	.word	0x0800bba5
 800bad8:	0800bba5 	.word	0x0800bba5
 800badc:	0800bba5 	.word	0x0800bba5
 800bae0:	0800bba5 	.word	0x0800bba5
 800bae4:	0800bb57 	.word	0x0800bb57
 800bae8:	0800bba5 	.word	0x0800bba5
 800baec:	0800bba5 	.word	0x0800bba5
 800baf0:	0800bba5 	.word	0x0800bba5
 800baf4:	0800bba5 	.word	0x0800bba5
 800baf8:	0800bba5 	.word	0x0800bba5
 800bafc:	0800bba5 	.word	0x0800bba5
 800bb00:	0800bba5 	.word	0x0800bba5
 800bb04:	0800bba5 	.word	0x0800bba5
 800bb08:	0800bba5 	.word	0x0800bba5
 800bb0c:	0800bba5 	.word	0x0800bba5
 800bb10:	0800bba5 	.word	0x0800bba5
 800bb14:	0800bba5 	.word	0x0800bba5
 800bb18:	0800bba5 	.word	0x0800bba5
 800bb1c:	0800bba5 	.word	0x0800bba5
 800bb20:	0800bba5 	.word	0x0800bba5
 800bb24:	0800bb97 	.word	0x0800bb97
 800bb28:	2b40      	cmp	r3, #64	; 0x40
 800bb2a:	d037      	beq.n	800bb9c <UART_SetConfig+0x6bc>
 800bb2c:	e03a      	b.n	800bba4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bb2e:	f7fd fd3b 	bl	80095a8 <HAL_RCCEx_GetD3PCLK1Freq>
 800bb32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bb34:	e03c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bb36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	f7fd fd4a 	bl	80095d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bb40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb42:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb44:	e034      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bb46:	f107 0318 	add.w	r3, r7, #24
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f7fd fe96 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb54:	e02c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb56:	4b09      	ldr	r3, [pc, #36]	; (800bb7c <UART_SetConfig+0x69c>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f003 0320 	and.w	r3, r3, #32
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d016      	beq.n	800bb90 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bb62:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <UART_SetConfig+0x69c>)
 800bb64:	681b      	ldr	r3, [r3, #0]
 800bb66:	08db      	lsrs	r3, r3, #3
 800bb68:	f003 0303 	and.w	r3, r3, #3
 800bb6c:	4a07      	ldr	r2, [pc, #28]	; (800bb8c <UART_SetConfig+0x6ac>)
 800bb6e:	fa22 f303 	lsr.w	r3, r2, r3
 800bb72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bb74:	e01c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
 800bb76:	bf00      	nop
 800bb78:	40011400 	.word	0x40011400
 800bb7c:	58024400 	.word	0x58024400
 800bb80:	40007800 	.word	0x40007800
 800bb84:	40007c00 	.word	0x40007c00
 800bb88:	58000c00 	.word	0x58000c00
 800bb8c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800bb90:	4b9d      	ldr	r3, [pc, #628]	; (800be08 <UART_SetConfig+0x928>)
 800bb92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb94:	e00c      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bb96:	4b9d      	ldr	r3, [pc, #628]	; (800be0c <UART_SetConfig+0x92c>)
 800bb98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bb9a:	e009      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bb9c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bba0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bba2:	e005      	b.n	800bbb0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800bba4:	2300      	movs	r3, #0
 800bba6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bbae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800bbb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	f000 81de 	beq.w	800bf74 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbbc:	4a94      	ldr	r2, [pc, #592]	; (800be10 <UART_SetConfig+0x930>)
 800bbbe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bbca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	685a      	ldr	r2, [r3, #4]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	005b      	lsls	r3, r3, #1
 800bbd4:	4413      	add	r3, r2
 800bbd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbd8:	429a      	cmp	r2, r3
 800bbda:	d305      	bcc.n	800bbe8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	685b      	ldr	r3, [r3, #4]
 800bbe0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbe4:	429a      	cmp	r2, r3
 800bbe6:	d903      	bls.n	800bbf0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800bbe8:	2301      	movs	r3, #1
 800bbea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bbee:	e1c1      	b.n	800bf74 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbf2:	2200      	movs	r2, #0
 800bbf4:	60bb      	str	r3, [r7, #8]
 800bbf6:	60fa      	str	r2, [r7, #12]
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbfc:	4a84      	ldr	r2, [pc, #528]	; (800be10 <UART_SetConfig+0x930>)
 800bbfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc02:	b29b      	uxth	r3, r3
 800bc04:	2200      	movs	r2, #0
 800bc06:	603b      	str	r3, [r7, #0]
 800bc08:	607a      	str	r2, [r7, #4]
 800bc0a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc0e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800bc12:	f7f4 fbb5 	bl	8000380 <__aeabi_uldivmod>
 800bc16:	4602      	mov	r2, r0
 800bc18:	460b      	mov	r3, r1
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	f04f 0200 	mov.w	r2, #0
 800bc22:	f04f 0300 	mov.w	r3, #0
 800bc26:	020b      	lsls	r3, r1, #8
 800bc28:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc2c:	0202      	lsls	r2, r0, #8
 800bc2e:	6979      	ldr	r1, [r7, #20]
 800bc30:	6849      	ldr	r1, [r1, #4]
 800bc32:	0849      	lsrs	r1, r1, #1
 800bc34:	2000      	movs	r0, #0
 800bc36:	460c      	mov	r4, r1
 800bc38:	4605      	mov	r5, r0
 800bc3a:	eb12 0804 	adds.w	r8, r2, r4
 800bc3e:	eb43 0905 	adc.w	r9, r3, r5
 800bc42:	697b      	ldr	r3, [r7, #20]
 800bc44:	685b      	ldr	r3, [r3, #4]
 800bc46:	2200      	movs	r2, #0
 800bc48:	469a      	mov	sl, r3
 800bc4a:	4693      	mov	fp, r2
 800bc4c:	4652      	mov	r2, sl
 800bc4e:	465b      	mov	r3, fp
 800bc50:	4640      	mov	r0, r8
 800bc52:	4649      	mov	r1, r9
 800bc54:	f7f4 fb94 	bl	8000380 <__aeabi_uldivmod>
 800bc58:	4602      	mov	r2, r0
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	4613      	mov	r3, r2
 800bc5e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bc60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bc66:	d308      	bcc.n	800bc7a <UART_SetConfig+0x79a>
 800bc68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bc6e:	d204      	bcs.n	800bc7a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800bc70:	697b      	ldr	r3, [r7, #20]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bc76:	60da      	str	r2, [r3, #12]
 800bc78:	e17c      	b.n	800bf74 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800bc80:	e178      	b.n	800bf74 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	69db      	ldr	r3, [r3, #28]
 800bc86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bc8a:	f040 80c5 	bne.w	800be18 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800bc8e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800bc92:	2b20      	cmp	r3, #32
 800bc94:	dc48      	bgt.n	800bd28 <UART_SetConfig+0x848>
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	db7b      	blt.n	800bd92 <UART_SetConfig+0x8b2>
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	d879      	bhi.n	800bd92 <UART_SetConfig+0x8b2>
 800bc9e:	a201      	add	r2, pc, #4	; (adr r2, 800bca4 <UART_SetConfig+0x7c4>)
 800bca0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca4:	0800bd2f 	.word	0x0800bd2f
 800bca8:	0800bd37 	.word	0x0800bd37
 800bcac:	0800bd93 	.word	0x0800bd93
 800bcb0:	0800bd93 	.word	0x0800bd93
 800bcb4:	0800bd3f 	.word	0x0800bd3f
 800bcb8:	0800bd93 	.word	0x0800bd93
 800bcbc:	0800bd93 	.word	0x0800bd93
 800bcc0:	0800bd93 	.word	0x0800bd93
 800bcc4:	0800bd4f 	.word	0x0800bd4f
 800bcc8:	0800bd93 	.word	0x0800bd93
 800bccc:	0800bd93 	.word	0x0800bd93
 800bcd0:	0800bd93 	.word	0x0800bd93
 800bcd4:	0800bd93 	.word	0x0800bd93
 800bcd8:	0800bd93 	.word	0x0800bd93
 800bcdc:	0800bd93 	.word	0x0800bd93
 800bce0:	0800bd93 	.word	0x0800bd93
 800bce4:	0800bd5f 	.word	0x0800bd5f
 800bce8:	0800bd93 	.word	0x0800bd93
 800bcec:	0800bd93 	.word	0x0800bd93
 800bcf0:	0800bd93 	.word	0x0800bd93
 800bcf4:	0800bd93 	.word	0x0800bd93
 800bcf8:	0800bd93 	.word	0x0800bd93
 800bcfc:	0800bd93 	.word	0x0800bd93
 800bd00:	0800bd93 	.word	0x0800bd93
 800bd04:	0800bd93 	.word	0x0800bd93
 800bd08:	0800bd93 	.word	0x0800bd93
 800bd0c:	0800bd93 	.word	0x0800bd93
 800bd10:	0800bd93 	.word	0x0800bd93
 800bd14:	0800bd93 	.word	0x0800bd93
 800bd18:	0800bd93 	.word	0x0800bd93
 800bd1c:	0800bd93 	.word	0x0800bd93
 800bd20:	0800bd93 	.word	0x0800bd93
 800bd24:	0800bd85 	.word	0x0800bd85
 800bd28:	2b40      	cmp	r3, #64	; 0x40
 800bd2a:	d02e      	beq.n	800bd8a <UART_SetConfig+0x8aa>
 800bd2c:	e031      	b.n	800bd92 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd2e:	f7fc fcc9 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800bd32:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd34:	e033      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd36:	f7fc fcdb 	bl	80086f0 <HAL_RCC_GetPCLK2Freq>
 800bd3a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bd3c:	e02f      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bd42:	4618      	mov	r0, r3
 800bd44:	f7fd fc46 	bl	80095d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bd4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd4c:	e027      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd4e:	f107 0318 	add.w	r3, r7, #24
 800bd52:	4618      	mov	r0, r3
 800bd54:	f7fd fd92 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd58:	69fb      	ldr	r3, [r7, #28]
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd5c:	e01f      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd5e:	4b2d      	ldr	r3, [pc, #180]	; (800be14 <UART_SetConfig+0x934>)
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	f003 0320 	and.w	r3, r3, #32
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d009      	beq.n	800bd7e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd6a:	4b2a      	ldr	r3, [pc, #168]	; (800be14 <UART_SetConfig+0x934>)
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	08db      	lsrs	r3, r3, #3
 800bd70:	f003 0303 	and.w	r3, r3, #3
 800bd74:	4a24      	ldr	r2, [pc, #144]	; (800be08 <UART_SetConfig+0x928>)
 800bd76:	fa22 f303 	lsr.w	r3, r2, r3
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bd7c:	e00f      	b.n	800bd9e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800bd7e:	4b22      	ldr	r3, [pc, #136]	; (800be08 <UART_SetConfig+0x928>)
 800bd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd82:	e00c      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bd84:	4b21      	ldr	r3, [pc, #132]	; (800be0c <UART_SetConfig+0x92c>)
 800bd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd88:	e009      	b.n	800bd9e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bd8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bd8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bd90:	e005      	b.n	800bd9e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800bd92:	2300      	movs	r3, #0
 800bd94:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bd96:	2301      	movs	r3, #1
 800bd98:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bd9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80e7 	beq.w	800bf74 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda6:	697b      	ldr	r3, [r7, #20]
 800bda8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdaa:	4a19      	ldr	r2, [pc, #100]	; (800be10 <UART_SetConfig+0x930>)
 800bdac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdb0:	461a      	mov	r2, r3
 800bdb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdb4:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdb8:	005a      	lsls	r2, r3, #1
 800bdba:	697b      	ldr	r3, [r7, #20]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	441a      	add	r2, r3
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdce:	2b0f      	cmp	r3, #15
 800bdd0:	d916      	bls.n	800be00 <UART_SetConfig+0x920>
 800bdd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdd8:	d212      	bcs.n	800be00 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bddc:	b29b      	uxth	r3, r3
 800bdde:	f023 030f 	bic.w	r3, r3, #15
 800bde2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bde4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bde6:	085b      	lsrs	r3, r3, #1
 800bde8:	b29b      	uxth	r3, r3
 800bdea:	f003 0307 	and.w	r3, r3, #7
 800bdee:	b29a      	uxth	r2, r3
 800bdf0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800bdf2:	4313      	orrs	r3, r2
 800bdf4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800bdf6:	697b      	ldr	r3, [r7, #20]
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800bdfc:	60da      	str	r2, [r3, #12]
 800bdfe:	e0b9      	b.n	800bf74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800be00:	2301      	movs	r3, #1
 800be02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800be06:	e0b5      	b.n	800bf74 <UART_SetConfig+0xa94>
 800be08:	03d09000 	.word	0x03d09000
 800be0c:	003d0900 	.word	0x003d0900
 800be10:	0800ecd0 	.word	0x0800ecd0
 800be14:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800be18:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800be1c:	2b20      	cmp	r3, #32
 800be1e:	dc49      	bgt.n	800beb4 <UART_SetConfig+0x9d4>
 800be20:	2b00      	cmp	r3, #0
 800be22:	db7c      	blt.n	800bf1e <UART_SetConfig+0xa3e>
 800be24:	2b20      	cmp	r3, #32
 800be26:	d87a      	bhi.n	800bf1e <UART_SetConfig+0xa3e>
 800be28:	a201      	add	r2, pc, #4	; (adr r2, 800be30 <UART_SetConfig+0x950>)
 800be2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be2e:	bf00      	nop
 800be30:	0800bebb 	.word	0x0800bebb
 800be34:	0800bec3 	.word	0x0800bec3
 800be38:	0800bf1f 	.word	0x0800bf1f
 800be3c:	0800bf1f 	.word	0x0800bf1f
 800be40:	0800becb 	.word	0x0800becb
 800be44:	0800bf1f 	.word	0x0800bf1f
 800be48:	0800bf1f 	.word	0x0800bf1f
 800be4c:	0800bf1f 	.word	0x0800bf1f
 800be50:	0800bedb 	.word	0x0800bedb
 800be54:	0800bf1f 	.word	0x0800bf1f
 800be58:	0800bf1f 	.word	0x0800bf1f
 800be5c:	0800bf1f 	.word	0x0800bf1f
 800be60:	0800bf1f 	.word	0x0800bf1f
 800be64:	0800bf1f 	.word	0x0800bf1f
 800be68:	0800bf1f 	.word	0x0800bf1f
 800be6c:	0800bf1f 	.word	0x0800bf1f
 800be70:	0800beeb 	.word	0x0800beeb
 800be74:	0800bf1f 	.word	0x0800bf1f
 800be78:	0800bf1f 	.word	0x0800bf1f
 800be7c:	0800bf1f 	.word	0x0800bf1f
 800be80:	0800bf1f 	.word	0x0800bf1f
 800be84:	0800bf1f 	.word	0x0800bf1f
 800be88:	0800bf1f 	.word	0x0800bf1f
 800be8c:	0800bf1f 	.word	0x0800bf1f
 800be90:	0800bf1f 	.word	0x0800bf1f
 800be94:	0800bf1f 	.word	0x0800bf1f
 800be98:	0800bf1f 	.word	0x0800bf1f
 800be9c:	0800bf1f 	.word	0x0800bf1f
 800bea0:	0800bf1f 	.word	0x0800bf1f
 800bea4:	0800bf1f 	.word	0x0800bf1f
 800bea8:	0800bf1f 	.word	0x0800bf1f
 800beac:	0800bf1f 	.word	0x0800bf1f
 800beb0:	0800bf11 	.word	0x0800bf11
 800beb4:	2b40      	cmp	r3, #64	; 0x40
 800beb6:	d02e      	beq.n	800bf16 <UART_SetConfig+0xa36>
 800beb8:	e031      	b.n	800bf1e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800beba:	f7fc fc03 	bl	80086c4 <HAL_RCC_GetPCLK1Freq>
 800bebe:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bec0:	e033      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bec2:	f7fc fc15 	bl	80086f0 <HAL_RCC_GetPCLK2Freq>
 800bec6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800bec8:	e02f      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800beca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800bece:	4618      	mov	r0, r3
 800bed0:	f7fd fb80 	bl	80095d4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bed8:	e027      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800beda:	f107 0318 	add.w	r3, r7, #24
 800bede:	4618      	mov	r0, r3
 800bee0:	f7fd fccc 	bl	800987c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bee8:	e01f      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800beea:	4b2d      	ldr	r3, [pc, #180]	; (800bfa0 <UART_SetConfig+0xac0>)
 800beec:	681b      	ldr	r3, [r3, #0]
 800beee:	f003 0320 	and.w	r3, r3, #32
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d009      	beq.n	800bf0a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bef6:	4b2a      	ldr	r3, [pc, #168]	; (800bfa0 <UART_SetConfig+0xac0>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	08db      	lsrs	r3, r3, #3
 800befc:	f003 0303 	and.w	r3, r3, #3
 800bf00:	4a28      	ldr	r2, [pc, #160]	; (800bfa4 <UART_SetConfig+0xac4>)
 800bf02:	fa22 f303 	lsr.w	r3, r2, r3
 800bf06:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800bf08:	e00f      	b.n	800bf2a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800bf0a:	4b26      	ldr	r3, [pc, #152]	; (800bfa4 <UART_SetConfig+0xac4>)
 800bf0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf0e:	e00c      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800bf10:	4b25      	ldr	r3, [pc, #148]	; (800bfa8 <UART_SetConfig+0xac8>)
 800bf12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf14:	e009      	b.n	800bf2a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800bf16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800bf1c:	e005      	b.n	800bf2a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800bf1e:	2300      	movs	r3, #0
 800bf20:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800bf22:	2301      	movs	r3, #1
 800bf24:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800bf28:	bf00      	nop
    }

    if (pclk != 0U)
 800bf2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d021      	beq.n	800bf74 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bf30:	697b      	ldr	r3, [r7, #20]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	4a1d      	ldr	r2, [pc, #116]	; (800bfac <UART_SetConfig+0xacc>)
 800bf36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf3e:	fbb3 f2f2 	udiv	r2, r3, r2
 800bf42:	697b      	ldr	r3, [r7, #20]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	085b      	lsrs	r3, r3, #1
 800bf48:	441a      	add	r2, r3
 800bf4a:	697b      	ldr	r3, [r7, #20]
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf52:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bf54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf56:	2b0f      	cmp	r3, #15
 800bf58:	d909      	bls.n	800bf6e <UART_SetConfig+0xa8e>
 800bf5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bf60:	d205      	bcs.n	800bf6e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bf62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf64:	b29a      	uxth	r2, r3
 800bf66:	697b      	ldr	r3, [r7, #20]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	60da      	str	r2, [r3, #12]
 800bf6c:	e002      	b.n	800bf74 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800bf6e:	2301      	movs	r3, #1
 800bf70:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bf74:	697b      	ldr	r3, [r7, #20]
 800bf76:	2201      	movs	r2, #1
 800bf78:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800bf7c:	697b      	ldr	r3, [r7, #20]
 800bf7e:	2201      	movs	r2, #1
 800bf80:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	2200      	movs	r2, #0
 800bf88:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800bf90:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800bf94:	4618      	mov	r0, r3
 800bf96:	3748      	adds	r7, #72	; 0x48
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bf9e:	bf00      	nop
 800bfa0:	58024400 	.word	0x58024400
 800bfa4:	03d09000 	.word	0x03d09000
 800bfa8:	003d0900 	.word	0x003d0900
 800bfac:	0800ecd0 	.word	0x0800ecd0

0800bfb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfbc:	f003 0301 	and.w	r3, r3, #1
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d00a      	beq.n	800bfda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	681b      	ldr	r3, [r3, #0]
 800bfd6:	430a      	orrs	r2, r1
 800bfd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfde:	f003 0302 	and.w	r3, r3, #2
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00a      	beq.n	800bffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	430a      	orrs	r2, r1
 800bffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c000:	f003 0304 	and.w	r3, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	d00a      	beq.n	800c01e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	681b      	ldr	r3, [r3, #0]
 800c00c:	685b      	ldr	r3, [r3, #4]
 800c00e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	430a      	orrs	r2, r1
 800c01c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c022:	f003 0308 	and.w	r3, r3, #8
 800c026:	2b00      	cmp	r3, #0
 800c028:	d00a      	beq.n	800c040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	681b      	ldr	r3, [r3, #0]
 800c02e:	685b      	ldr	r3, [r3, #4]
 800c030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	430a      	orrs	r2, r1
 800c03e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c044:	f003 0310 	and.w	r3, r3, #16
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d00a      	beq.n	800c062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	689b      	ldr	r3, [r3, #8]
 800c052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	430a      	orrs	r2, r1
 800c060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c066:	f003 0320 	and.w	r3, r3, #32
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d00a      	beq.n	800c084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	681b      	ldr	r3, [r3, #0]
 800c072:	689b      	ldr	r3, [r3, #8]
 800c074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	430a      	orrs	r2, r1
 800c082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d01a      	beq.n	800c0c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	430a      	orrs	r2, r1
 800c0a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c0ae:	d10a      	bne.n	800c0c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	685b      	ldr	r3, [r3, #4]
 800c0b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	681b      	ldr	r3, [r3, #0]
 800c0c2:	430a      	orrs	r2, r1
 800c0c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c0ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d00a      	beq.n	800c0e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	685b      	ldr	r3, [r3, #4]
 800c0d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	430a      	orrs	r2, r1
 800c0e6:	605a      	str	r2, [r3, #4]
  }
}
 800c0e8:	bf00      	nop
 800c0ea:	370c      	adds	r7, #12
 800c0ec:	46bd      	mov	sp, r7
 800c0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f2:	4770      	bx	lr

0800c0f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b086      	sub	sp, #24
 800c0f8:	af02      	add	r7, sp, #8
 800c0fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2200      	movs	r2, #0
 800c100:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c104:	f7f7 ffca 	bl	800409c <HAL_GetTick>
 800c108:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	f003 0308 	and.w	r3, r3, #8
 800c114:	2b08      	cmp	r3, #8
 800c116:	d10e      	bne.n	800c136 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c118:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2200      	movs	r2, #0
 800c122:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c126:	6878      	ldr	r0, [r7, #4]
 800c128:	f000 f82f 	bl	800c18a <UART_WaitOnFlagUntilTimeout>
 800c12c:	4603      	mov	r3, r0
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d001      	beq.n	800c136 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c132:	2303      	movs	r3, #3
 800c134:	e025      	b.n	800c182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0304 	and.w	r3, r3, #4
 800c140:	2b04      	cmp	r3, #4
 800c142:	d10e      	bne.n	800c162 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c148:	9300      	str	r3, [sp, #0]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2200      	movs	r2, #0
 800c14e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c152:	6878      	ldr	r0, [r7, #4]
 800c154:	f000 f819 	bl	800c18a <UART_WaitOnFlagUntilTimeout>
 800c158:	4603      	mov	r3, r0
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d001      	beq.n	800c162 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c15e:	2303      	movs	r3, #3
 800c160:	e00f      	b.n	800c182 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	2220      	movs	r2, #32
 800c166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800c16a:	687b      	ldr	r3, [r7, #4]
 800c16c:	2220      	movs	r2, #32
 800c16e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c180:	2300      	movs	r3, #0
}
 800c182:	4618      	mov	r0, r3
 800c184:	3710      	adds	r7, #16
 800c186:	46bd      	mov	sp, r7
 800c188:	bd80      	pop	{r7, pc}

0800c18a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c18a:	b580      	push	{r7, lr}
 800c18c:	b09c      	sub	sp, #112	; 0x70
 800c18e:	af00      	add	r7, sp, #0
 800c190:	60f8      	str	r0, [r7, #12]
 800c192:	60b9      	str	r1, [r7, #8]
 800c194:	603b      	str	r3, [r7, #0]
 800c196:	4613      	mov	r3, r2
 800c198:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c19a:	e0a9      	b.n	800c2f0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c19c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c19e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1a2:	f000 80a5 	beq.w	800c2f0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c1a6:	f7f7 ff79 	bl	800409c <HAL_GetTick>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	683b      	ldr	r3, [r7, #0]
 800c1ae:	1ad3      	subs	r3, r2, r3
 800c1b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800c1b2:	429a      	cmp	r2, r3
 800c1b4:	d302      	bcc.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x32>
 800c1b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	d140      	bne.n	800c23e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	681b      	ldr	r3, [r3, #0]
 800c1c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1c4:	e853 3f00 	ldrex	r3, [r3]
 800c1c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800c1ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c1d0:	667b      	str	r3, [r7, #100]	; 0x64
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	461a      	mov	r2, r3
 800c1d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1da:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800c1e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c1e2:	e841 2300 	strex	r3, r2, [r1]
 800c1e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800c1e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d1e6      	bne.n	800c1bc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	3308      	adds	r3, #8
 800c1f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c1f8:	e853 3f00 	ldrex	r3, [r3]
 800c1fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c200:	f023 0301 	bic.w	r3, r3, #1
 800c204:	663b      	str	r3, [r7, #96]	; 0x60
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	3308      	adds	r3, #8
 800c20c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800c20e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c210:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c212:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800c214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c216:	e841 2300 	strex	r3, r2, [r1]
 800c21a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800c21c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d1e5      	bne.n	800c1ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	2220      	movs	r2, #32
 800c226:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800c22a:	68fb      	ldr	r3, [r7, #12]
 800c22c:	2220      	movs	r2, #32
 800c22e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	2200      	movs	r2, #0
 800c236:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800c23a:	2303      	movs	r3, #3
 800c23c:	e069      	b.n	800c312 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	f003 0304 	and.w	r3, r3, #4
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d051      	beq.n	800c2f0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c25a:	d149      	bne.n	800c2f0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c264:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800c266:	68fb      	ldr	r3, [r7, #12]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c26c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26e:	e853 3f00 	ldrex	r3, [r3]
 800c272:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c276:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800c27a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	461a      	mov	r2, r3
 800c282:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c284:	637b      	str	r3, [r7, #52]	; 0x34
 800c286:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c288:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800c28a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c28c:	e841 2300 	strex	r3, r2, [r1]
 800c290:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800c292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1e6      	bne.n	800c266 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	3308      	adds	r3, #8
 800c29e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2a0:	697b      	ldr	r3, [r7, #20]
 800c2a2:	e853 3f00 	ldrex	r3, [r3]
 800c2a6:	613b      	str	r3, [r7, #16]
   return(result);
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f023 0301 	bic.w	r3, r3, #1
 800c2ae:	66bb      	str	r3, [r7, #104]	; 0x68
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	3308      	adds	r3, #8
 800c2b6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800c2b8:	623a      	str	r2, [r7, #32]
 800c2ba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2bc:	69f9      	ldr	r1, [r7, #28]
 800c2be:	6a3a      	ldr	r2, [r7, #32]
 800c2c0:	e841 2300 	strex	r3, r2, [r1]
 800c2c4:	61bb      	str	r3, [r7, #24]
   return(result);
 800c2c6:	69bb      	ldr	r3, [r7, #24]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d1e5      	bne.n	800c298 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	2220      	movs	r2, #32
 800c2d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800c2d4:	68fb      	ldr	r3, [r7, #12]
 800c2d6:	2220      	movs	r2, #32
 800c2d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c2dc:	68fb      	ldr	r3, [r7, #12]
 800c2de:	2220      	movs	r2, #32
 800c2e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	2200      	movs	r2, #0
 800c2e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800c2ec:	2303      	movs	r3, #3
 800c2ee:	e010      	b.n	800c312 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	69da      	ldr	r2, [r3, #28]
 800c2f6:	68bb      	ldr	r3, [r7, #8]
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	68ba      	ldr	r2, [r7, #8]
 800c2fc:	429a      	cmp	r2, r3
 800c2fe:	bf0c      	ite	eq
 800c300:	2301      	moveq	r3, #1
 800c302:	2300      	movne	r3, #0
 800c304:	b2db      	uxtb	r3, r3
 800c306:	461a      	mov	r2, r3
 800c308:	79fb      	ldrb	r3, [r7, #7]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	f43f af46 	beq.w	800c19c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3770      	adds	r7, #112	; 0x70
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
	...

0800c31c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c31c:	b480      	push	{r7}
 800c31e:	b095      	sub	sp, #84	; 0x54
 800c320:	af00      	add	r7, sp, #0
 800c322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c32a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c32c:	e853 3f00 	ldrex	r3, [r3]
 800c330:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c334:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c338:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	681b      	ldr	r3, [r3, #0]
 800c33e:	461a      	mov	r2, r3
 800c340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c342:	643b      	str	r3, [r7, #64]	; 0x40
 800c344:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c346:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c348:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c34a:	e841 2300 	strex	r3, r2, [r1]
 800c34e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c350:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c352:	2b00      	cmp	r3, #0
 800c354:	d1e6      	bne.n	800c324 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	681b      	ldr	r3, [r3, #0]
 800c35a:	3308      	adds	r3, #8
 800c35c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c35e:	6a3b      	ldr	r3, [r7, #32]
 800c360:	e853 3f00 	ldrex	r3, [r3]
 800c364:	61fb      	str	r3, [r7, #28]
   return(result);
 800c366:	69fa      	ldr	r2, [r7, #28]
 800c368:	4b1e      	ldr	r3, [pc, #120]	; (800c3e4 <UART_EndRxTransfer+0xc8>)
 800c36a:	4013      	ands	r3, r2
 800c36c:	64bb      	str	r3, [r7, #72]	; 0x48
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	3308      	adds	r3, #8
 800c374:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c376:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c378:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c37a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c37e:	e841 2300 	strex	r3, r2, [r1]
 800c382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c386:	2b00      	cmp	r3, #0
 800c388:	d1e5      	bne.n	800c356 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c38e:	2b01      	cmp	r3, #1
 800c390:	d118      	bne.n	800c3c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c398:	68fb      	ldr	r3, [r7, #12]
 800c39a:	e853 3f00 	ldrex	r3, [r3]
 800c39e:	60bb      	str	r3, [r7, #8]
   return(result);
 800c3a0:	68bb      	ldr	r3, [r7, #8]
 800c3a2:	f023 0310 	bic.w	r3, r3, #16
 800c3a6:	647b      	str	r3, [r7, #68]	; 0x44
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	461a      	mov	r2, r3
 800c3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c3b0:	61bb      	str	r3, [r7, #24]
 800c3b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3b4:	6979      	ldr	r1, [r7, #20]
 800c3b6:	69ba      	ldr	r2, [r7, #24]
 800c3b8:	e841 2300 	strex	r3, r2, [r1]
 800c3bc:	613b      	str	r3, [r7, #16]
   return(result);
 800c3be:	693b      	ldr	r3, [r7, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d1e6      	bne.n	800c392 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2220      	movs	r2, #32
 800c3c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	2200      	movs	r2, #0
 800c3d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	2200      	movs	r2, #0
 800c3d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800c3d8:	bf00      	nop
 800c3da:	3754      	adds	r7, #84	; 0x54
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr
 800c3e4:	effffffe 	.word	0xeffffffe

0800c3e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c3e8:	b580      	push	{r7, lr}
 800c3ea:	b084      	sub	sp, #16
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3f4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	2200      	movs	r2, #0
 800c3fa:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	2200      	movs	r2, #0
 800c402:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f7ff f854 	bl	800b4b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c40c:	bf00      	nop
 800c40e:	3710      	adds	r7, #16
 800c410:	46bd      	mov	sp, r7
 800c412:	bd80      	pop	{r7, pc}

0800c414 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c414:	b580      	push	{r7, lr}
 800c416:	b088      	sub	sp, #32
 800c418:	af00      	add	r7, sp, #0
 800c41a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	e853 3f00 	ldrex	r3, [r3]
 800c428:	60bb      	str	r3, [r7, #8]
   return(result);
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c430:	61fb      	str	r3, [r7, #28]
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	461a      	mov	r2, r3
 800c438:	69fb      	ldr	r3, [r7, #28]
 800c43a:	61bb      	str	r3, [r7, #24]
 800c43c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43e:	6979      	ldr	r1, [r7, #20]
 800c440:	69ba      	ldr	r2, [r7, #24]
 800c442:	e841 2300 	strex	r3, r2, [r1]
 800c446:	613b      	str	r3, [r7, #16]
   return(result);
 800c448:	693b      	ldr	r3, [r7, #16]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d1e6      	bne.n	800c41c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2220      	movs	r2, #32
 800c452:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	2200      	movs	r2, #0
 800c45a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f7ff f81f 	bl	800b4a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c462:	bf00      	nop
 800c464:	3720      	adds	r7, #32
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}

0800c46a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c46a:	b480      	push	{r7}
 800c46c:	b083      	sub	sp, #12
 800c46e:	af00      	add	r7, sp, #0
 800c470:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c472:	bf00      	nop
 800c474:	370c      	adds	r7, #12
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr

0800c47e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800c47e:	b480      	push	{r7}
 800c480:	b083      	sub	sp, #12
 800c482:	af00      	add	r7, sp, #0
 800c484:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800c486:	bf00      	nop
 800c488:	370c      	adds	r7, #12
 800c48a:	46bd      	mov	sp, r7
 800c48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c490:	4770      	bx	lr

0800c492 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800c492:	b480      	push	{r7}
 800c494:	b083      	sub	sp, #12
 800c496:	af00      	add	r7, sp, #0
 800c498:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800c49a:	bf00      	nop
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4a4:	4770      	bx	lr

0800c4a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c4a6:	b480      	push	{r7}
 800c4a8:	b085      	sub	sp, #20
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d101      	bne.n	800c4bc <HAL_UARTEx_DisableFifoMode+0x16>
 800c4b8:	2302      	movs	r3, #2
 800c4ba:	e027      	b.n	800c50c <HAL_UARTEx_DisableFifoMode+0x66>
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	2201      	movs	r2, #1
 800c4c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2224      	movs	r2, #36	; 0x24
 800c4c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	681a      	ldr	r2, [r3, #0]
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f022 0201 	bic.w	r2, r2, #1
 800c4e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c4ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	68fa      	ldr	r2, [r7, #12]
 800c4f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2220      	movs	r2, #32
 800c4fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c50a:	2300      	movs	r3, #0
}
 800c50c:	4618      	mov	r0, r3
 800c50e:	3714      	adds	r7, #20
 800c510:	46bd      	mov	sp, r7
 800c512:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c516:	4770      	bx	lr

0800c518 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c518:	b580      	push	{r7, lr}
 800c51a:	b084      	sub	sp, #16
 800c51c:	af00      	add	r7, sp, #0
 800c51e:	6078      	str	r0, [r7, #4]
 800c520:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c528:	2b01      	cmp	r3, #1
 800c52a:	d101      	bne.n	800c530 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c52c:	2302      	movs	r3, #2
 800c52e:	e02d      	b.n	800c58c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c530:	687b      	ldr	r3, [r7, #4]
 800c532:	2201      	movs	r2, #1
 800c534:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2224      	movs	r2, #36	; 0x24
 800c53c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	681b      	ldr	r3, [r3, #0]
 800c546:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f022 0201 	bic.w	r2, r2, #1
 800c556:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	681b      	ldr	r3, [r3, #0]
 800c55c:	689b      	ldr	r3, [r3, #8]
 800c55e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c562:	687b      	ldr	r3, [r7, #4]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	683a      	ldr	r2, [r7, #0]
 800c568:	430a      	orrs	r2, r1
 800c56a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 f84f 	bl	800c610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	68fa      	ldr	r2, [r7, #12]
 800c578:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	2220      	movs	r2, #32
 800c57e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	2200      	movs	r2, #0
 800c586:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3710      	adds	r7, #16
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}

0800c594 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b084      	sub	sp, #16
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c5a4:	2b01      	cmp	r3, #1
 800c5a6:	d101      	bne.n	800c5ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c5a8:	2302      	movs	r3, #2
 800c5aa:	e02d      	b.n	800c608 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	2201      	movs	r2, #1
 800c5b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	2224      	movs	r2, #36	; 0x24
 800c5b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	681b      	ldr	r3, [r3, #0]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	681a      	ldr	r2, [r3, #0]
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	f022 0201 	bic.w	r2, r2, #1
 800c5d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	689b      	ldr	r3, [r3, #8]
 800c5da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	683a      	ldr	r2, [r7, #0]
 800c5e4:	430a      	orrs	r2, r1
 800c5e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f000 f811 	bl	800c610 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	68fa      	ldr	r2, [r7, #12]
 800c5f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	2220      	movs	r2, #32
 800c5fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2200      	movs	r2, #0
 800c602:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800c606:	2300      	movs	r3, #0
}
 800c608:	4618      	mov	r0, r3
 800c60a:	3710      	adds	r7, #16
 800c60c:	46bd      	mov	sp, r7
 800c60e:	bd80      	pop	{r7, pc}

0800c610 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c610:	b480      	push	{r7}
 800c612:	b085      	sub	sp, #20
 800c614:	af00      	add	r7, sp, #0
 800c616:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d108      	bne.n	800c632 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	2201      	movs	r2, #1
 800c624:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2201      	movs	r2, #1
 800c62c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c630:	e031      	b.n	800c696 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c632:	2310      	movs	r3, #16
 800c634:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c636:	2310      	movs	r3, #16
 800c638:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	0e5b      	lsrs	r3, r3, #25
 800c642:	b2db      	uxtb	r3, r3
 800c644:	f003 0307 	and.w	r3, r3, #7
 800c648:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	689b      	ldr	r3, [r3, #8]
 800c650:	0f5b      	lsrs	r3, r3, #29
 800c652:	b2db      	uxtb	r3, r3
 800c654:	f003 0307 	and.w	r3, r3, #7
 800c658:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	7b3a      	ldrb	r2, [r7, #12]
 800c65e:	4911      	ldr	r1, [pc, #68]	; (800c6a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c660:	5c8a      	ldrb	r2, [r1, r2]
 800c662:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c666:	7b3a      	ldrb	r2, [r7, #12]
 800c668:	490f      	ldr	r1, [pc, #60]	; (800c6a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c66a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c66c:	fb93 f3f2 	sdiv	r3, r3, r2
 800c670:	b29a      	uxth	r2, r3
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c678:	7bfb      	ldrb	r3, [r7, #15]
 800c67a:	7b7a      	ldrb	r2, [r7, #13]
 800c67c:	4909      	ldr	r1, [pc, #36]	; (800c6a4 <UARTEx_SetNbDataToProcess+0x94>)
 800c67e:	5c8a      	ldrb	r2, [r1, r2]
 800c680:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c684:	7b7a      	ldrb	r2, [r7, #13]
 800c686:	4908      	ldr	r1, [pc, #32]	; (800c6a8 <UARTEx_SetNbDataToProcess+0x98>)
 800c688:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c68a:	fb93 f3f2 	sdiv	r3, r3, r2
 800c68e:	b29a      	uxth	r2, r3
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c696:	bf00      	nop
 800c698:	3714      	adds	r7, #20
 800c69a:	46bd      	mov	sp, r7
 800c69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6a0:	4770      	bx	lr
 800c6a2:	bf00      	nop
 800c6a4:	0800ece8 	.word	0x0800ece8
 800c6a8:	0800ecf0 	.word	0x0800ecf0

0800c6ac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c6ac:	b084      	sub	sp, #16
 800c6ae:	b580      	push	{r7, lr}
 800c6b0:	b084      	sub	sp, #16
 800c6b2:	af00      	add	r7, sp, #0
 800c6b4:	6078      	str	r0, [r7, #4]
 800c6b6:	f107 001c 	add.w	r0, r7, #28
 800c6ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c6be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	d120      	bne.n	800c706 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6c8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	68da      	ldr	r2, [r3, #12]
 800c6d4:	4b2a      	ldr	r3, [pc, #168]	; (800c780 <USB_CoreInit+0xd4>)
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	687a      	ldr	r2, [r7, #4]
 800c6da:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800c6e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6ea:	2b01      	cmp	r3, #1
 800c6ec:	d105      	bne.n	800c6fa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	68db      	ldr	r3, [r3, #12]
 800c6f2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c6fa:	6878      	ldr	r0, [r7, #4]
 800c6fc:	f000 faac 	bl	800cc58 <USB_CoreReset>
 800c700:	4603      	mov	r3, r0
 800c702:	73fb      	strb	r3, [r7, #15]
 800c704:	e01a      	b.n	800c73c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	68db      	ldr	r3, [r3, #12]
 800c70a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800c712:	6878      	ldr	r0, [r7, #4]
 800c714:	f000 faa0 	bl	800cc58 <USB_CoreReset>
 800c718:	4603      	mov	r3, r0
 800c71a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800c71c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c71e:	2b00      	cmp	r3, #0
 800c720:	d106      	bne.n	800c730 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c726:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	639a      	str	r2, [r3, #56]	; 0x38
 800c72e:	e005      	b.n	800c73c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c734:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800c73c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c73e:	2b01      	cmp	r3, #1
 800c740:	d116      	bne.n	800c770 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c746:	b29a      	uxth	r2, r3
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c750:	4b0c      	ldr	r3, [pc, #48]	; (800c784 <USB_CoreInit+0xd8>)
 800c752:	4313      	orrs	r3, r2
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	689b      	ldr	r3, [r3, #8]
 800c75c:	f043 0206 	orr.w	r2, r3, #6
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	689b      	ldr	r3, [r3, #8]
 800c768:	f043 0220 	orr.w	r2, r3, #32
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800c770:	7bfb      	ldrb	r3, [r7, #15]
}
 800c772:	4618      	mov	r0, r3
 800c774:	3710      	adds	r7, #16
 800c776:	46bd      	mov	sp, r7
 800c778:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c77c:	b004      	add	sp, #16
 800c77e:	4770      	bx	lr
 800c780:	ffbdffbf 	.word	0xffbdffbf
 800c784:	03ee0000 	.word	0x03ee0000

0800c788 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800c788:	b480      	push	{r7}
 800c78a:	b083      	sub	sp, #12
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	f023 0201 	bic.w	r2, r3, #1
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800c79c:	2300      	movs	r3, #0
}
 800c79e:	4618      	mov	r0, r3
 800c7a0:	370c      	adds	r7, #12
 800c7a2:	46bd      	mov	sp, r7
 800c7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a8:	4770      	bx	lr

0800c7aa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b084      	sub	sp, #16
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	6078      	str	r0, [r7, #4]
 800c7b2:	460b      	mov	r3, r1
 800c7b4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800c7c6:	78fb      	ldrb	r3, [r7, #3]
 800c7c8:	2b01      	cmp	r3, #1
 800c7ca:	d115      	bne.n	800c7f8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	68db      	ldr	r3, [r3, #12]
 800c7d0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c7d8:	2001      	movs	r0, #1
 800c7da:	f7f7 fc6b 	bl	80040b4 <HAL_Delay>
      ms++;
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3301      	adds	r3, #1
 800c7e2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800c7e4:	6878      	ldr	r0, [r7, #4]
 800c7e6:	f000 fa29 	bl	800cc3c <USB_GetMode>
 800c7ea:	4603      	mov	r3, r0
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d01e      	beq.n	800c82e <USB_SetCurrentMode+0x84>
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2b31      	cmp	r3, #49	; 0x31
 800c7f4:	d9f0      	bls.n	800c7d8 <USB_SetCurrentMode+0x2e>
 800c7f6:	e01a      	b.n	800c82e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800c7f8:	78fb      	ldrb	r3, [r7, #3]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d115      	bne.n	800c82a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68db      	ldr	r3, [r3, #12]
 800c802:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800c806:	687b      	ldr	r3, [r7, #4]
 800c808:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800c80a:	2001      	movs	r0, #1
 800c80c:	f7f7 fc52 	bl	80040b4 <HAL_Delay>
      ms++;
 800c810:	68fb      	ldr	r3, [r7, #12]
 800c812:	3301      	adds	r3, #1
 800c814:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800c816:	6878      	ldr	r0, [r7, #4]
 800c818:	f000 fa10 	bl	800cc3c <USB_GetMode>
 800c81c:	4603      	mov	r3, r0
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <USB_SetCurrentMode+0x84>
 800c822:	68fb      	ldr	r3, [r7, #12]
 800c824:	2b31      	cmp	r3, #49	; 0x31
 800c826:	d9f0      	bls.n	800c80a <USB_SetCurrentMode+0x60>
 800c828:	e001      	b.n	800c82e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800c82a:	2301      	movs	r3, #1
 800c82c:	e005      	b.n	800c83a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	2b32      	cmp	r3, #50	; 0x32
 800c832:	d101      	bne.n	800c838 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800c834:	2301      	movs	r3, #1
 800c836:	e000      	b.n	800c83a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
	...

0800c844 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c844:	b084      	sub	sp, #16
 800c846:	b580      	push	{r7, lr}
 800c848:	b086      	sub	sp, #24
 800c84a:	af00      	add	r7, sp, #0
 800c84c:	6078      	str	r0, [r7, #4]
 800c84e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c852:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c856:	2300      	movs	r3, #0
 800c858:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800c85e:	2300      	movs	r3, #0
 800c860:	613b      	str	r3, [r7, #16]
 800c862:	e009      	b.n	800c878 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	693b      	ldr	r3, [r7, #16]
 800c868:	3340      	adds	r3, #64	; 0x40
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	4413      	add	r3, r2
 800c86e:	2200      	movs	r2, #0
 800c870:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800c872:	693b      	ldr	r3, [r7, #16]
 800c874:	3301      	adds	r3, #1
 800c876:	613b      	str	r3, [r7, #16]
 800c878:	693b      	ldr	r3, [r7, #16]
 800c87a:	2b0e      	cmp	r3, #14
 800c87c:	d9f2      	bls.n	800c864 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800c87e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c880:	2b00      	cmp	r3, #0
 800c882:	d11c      	bne.n	800c8be <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c88a:	685b      	ldr	r3, [r3, #4]
 800c88c:	68fa      	ldr	r2, [r7, #12]
 800c88e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c892:	f043 0302 	orr.w	r3, r3, #2
 800c896:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c89c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	601a      	str	r2, [r3, #0]
 800c8bc:	e005      	b.n	800c8ca <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c8c2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c8ca:	68fb      	ldr	r3, [r7, #12]
 800c8cc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c8d0:	461a      	mov	r2, r3
 800c8d2:	2300      	movs	r3, #0
 800c8d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8dc:	4619      	mov	r1, r3
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	680b      	ldr	r3, [r1, #0]
 800c8e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800c8ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8ec:	2b01      	cmp	r3, #1
 800c8ee:	d10c      	bne.n	800c90a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800c8f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d104      	bne.n	800c900 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800c8f6:	2100      	movs	r1, #0
 800c8f8:	6878      	ldr	r0, [r7, #4]
 800c8fa:	f000 f965 	bl	800cbc8 <USB_SetDevSpeed>
 800c8fe:	e008      	b.n	800c912 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800c900:	2101      	movs	r1, #1
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f960 	bl	800cbc8 <USB_SetDevSpeed>
 800c908:	e003      	b.n	800c912 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800c90a:	2103      	movs	r1, #3
 800c90c:	6878      	ldr	r0, [r7, #4]
 800c90e:	f000 f95b 	bl	800cbc8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c912:	2110      	movs	r1, #16
 800c914:	6878      	ldr	r0, [r7, #4]
 800c916:	f000 f8f3 	bl	800cb00 <USB_FlushTxFifo>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d001      	beq.n	800c924 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800c920:	2301      	movs	r3, #1
 800c922:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c924:	6878      	ldr	r0, [r7, #4]
 800c926:	f000 f91f 	bl	800cb68 <USB_FlushRxFifo>
 800c92a:	4603      	mov	r3, r0
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d001      	beq.n	800c934 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800c930:	2301      	movs	r3, #1
 800c932:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800c934:	68fb      	ldr	r3, [r7, #12]
 800c936:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c93a:	461a      	mov	r2, r3
 800c93c:	2300      	movs	r3, #0
 800c93e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c946:	461a      	mov	r2, r3
 800c948:	2300      	movs	r3, #0
 800c94a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800c94c:	68fb      	ldr	r3, [r7, #12]
 800c94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c952:	461a      	mov	r2, r3
 800c954:	2300      	movs	r3, #0
 800c956:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c958:	2300      	movs	r3, #0
 800c95a:	613b      	str	r3, [r7, #16]
 800c95c:	e043      	b.n	800c9e6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c95e:	693b      	ldr	r3, [r7, #16]
 800c960:	015a      	lsls	r2, r3, #5
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	4413      	add	r3, r2
 800c966:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c970:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c974:	d118      	bne.n	800c9a8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d10a      	bne.n	800c992 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	015a      	lsls	r2, r3, #5
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	4413      	add	r3, r2
 800c984:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c988:	461a      	mov	r2, r3
 800c98a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800c98e:	6013      	str	r3, [r2, #0]
 800c990:	e013      	b.n	800c9ba <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800c992:	693b      	ldr	r3, [r7, #16]
 800c994:	015a      	lsls	r2, r3, #5
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	4413      	add	r3, r2
 800c99a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c99e:	461a      	mov	r2, r3
 800c9a0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800c9a4:	6013      	str	r3, [r2, #0]
 800c9a6:	e008      	b.n	800c9ba <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800c9a8:	693b      	ldr	r3, [r7, #16]
 800c9aa:	015a      	lsls	r2, r3, #5
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	4413      	add	r3, r2
 800c9b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	015a      	lsls	r2, r3, #5
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	4413      	add	r3, r2
 800c9c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c6:	461a      	mov	r2, r3
 800c9c8:	2300      	movs	r3, #0
 800c9ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800c9cc:	693b      	ldr	r3, [r7, #16]
 800c9ce:	015a      	lsls	r2, r3, #5
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	4413      	add	r3, r2
 800c9d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9d8:	461a      	mov	r2, r3
 800c9da:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800c9de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	3301      	adds	r3, #1
 800c9e4:	613b      	str	r3, [r7, #16]
 800c9e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	429a      	cmp	r2, r3
 800c9ec:	d3b7      	bcc.n	800c95e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	613b      	str	r3, [r7, #16]
 800c9f2:	e043      	b.n	800ca7c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c9f4:	693b      	ldr	r3, [r7, #16]
 800c9f6:	015a      	lsls	r2, r3, #5
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	4413      	add	r3, r2
 800c9fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca0a:	d118      	bne.n	800ca3e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ca0c:	693b      	ldr	r3, [r7, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10a      	bne.n	800ca28 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ca12:	693b      	ldr	r3, [r7, #16]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca1e:	461a      	mov	r2, r3
 800ca20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ca24:	6013      	str	r3, [r2, #0]
 800ca26:	e013      	b.n	800ca50 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ca28:	693b      	ldr	r3, [r7, #16]
 800ca2a:	015a      	lsls	r2, r3, #5
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	4413      	add	r3, r2
 800ca30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca34:	461a      	mov	r2, r3
 800ca36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ca3a:	6013      	str	r3, [r2, #0]
 800ca3c:	e008      	b.n	800ca50 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	015a      	lsls	r2, r3, #5
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	4413      	add	r3, r2
 800ca46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca4a:	461a      	mov	r2, r3
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ca50:	693b      	ldr	r3, [r7, #16]
 800ca52:	015a      	lsls	r2, r3, #5
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	4413      	add	r3, r2
 800ca58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	2300      	movs	r3, #0
 800ca60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ca62:	693b      	ldr	r3, [r7, #16]
 800ca64:	015a      	lsls	r2, r3, #5
 800ca66:	68fb      	ldr	r3, [r7, #12]
 800ca68:	4413      	add	r3, r2
 800ca6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca6e:	461a      	mov	r2, r3
 800ca70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ca74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	3301      	adds	r3, #1
 800ca7a:	613b      	str	r3, [r7, #16]
 800ca7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca7e:	693a      	ldr	r2, [r7, #16]
 800ca80:	429a      	cmp	r2, r3
 800ca82:	d3b7      	bcc.n	800c9f4 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ca8a:	691b      	ldr	r3, [r3, #16]
 800ca8c:	68fa      	ldr	r2, [r7, #12]
 800ca8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ca92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ca96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800caa4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800caa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d105      	bne.n	800cab8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	699b      	ldr	r3, [r3, #24]
 800cab0:	f043 0210 	orr.w	r2, r3, #16
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699a      	ldr	r2, [r3, #24]
 800cabc:	4b0e      	ldr	r3, [pc, #56]	; (800caf8 <USB_DevInit+0x2b4>)
 800cabe:	4313      	orrs	r3, r2
 800cac0:	687a      	ldr	r2, [r7, #4]
 800cac2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800cac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d005      	beq.n	800cad6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	699b      	ldr	r3, [r3, #24]
 800cace:	f043 0208 	orr.w	r2, r3, #8
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800cad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cad8:	2b01      	cmp	r3, #1
 800cada:	d105      	bne.n	800cae8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	699a      	ldr	r2, [r3, #24]
 800cae0:	4b06      	ldr	r3, [pc, #24]	; (800cafc <USB_DevInit+0x2b8>)
 800cae2:	4313      	orrs	r3, r2
 800cae4:	687a      	ldr	r2, [r7, #4]
 800cae6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800cae8:	7dfb      	ldrb	r3, [r7, #23]
}
 800caea:	4618      	mov	r0, r3
 800caec:	3718      	adds	r7, #24
 800caee:	46bd      	mov	sp, r7
 800caf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800caf4:	b004      	add	sp, #16
 800caf6:	4770      	bx	lr
 800caf8:	803c3800 	.word	0x803c3800
 800cafc:	40000004 	.word	0x40000004

0800cb00 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800cb00:	b480      	push	{r7}
 800cb02:	b085      	sub	sp, #20
 800cb04:	af00      	add	r7, sp, #0
 800cb06:	6078      	str	r0, [r7, #4]
 800cb08:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800cb0a:	2300      	movs	r3, #0
 800cb0c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	3301      	adds	r3, #1
 800cb12:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb14:	68fb      	ldr	r3, [r7, #12]
 800cb16:	4a13      	ldr	r2, [pc, #76]	; (800cb64 <USB_FlushTxFifo+0x64>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d901      	bls.n	800cb20 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800cb1c:	2303      	movs	r3, #3
 800cb1e:	e01b      	b.n	800cb58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	691b      	ldr	r3, [r3, #16]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	daf2      	bge.n	800cb0e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800cb28:	2300      	movs	r3, #0
 800cb2a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	019b      	lsls	r3, r3, #6
 800cb30:	f043 0220 	orr.w	r2, r3, #32
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	3301      	adds	r3, #1
 800cb3c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	4a08      	ldr	r2, [pc, #32]	; (800cb64 <USB_FlushTxFifo+0x64>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	d901      	bls.n	800cb4a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800cb46:	2303      	movs	r3, #3
 800cb48:	e006      	b.n	800cb58 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	691b      	ldr	r3, [r3, #16]
 800cb4e:	f003 0320 	and.w	r3, r3, #32
 800cb52:	2b20      	cmp	r3, #32
 800cb54:	d0f0      	beq.n	800cb38 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800cb56:	2300      	movs	r3, #0
}
 800cb58:	4618      	mov	r0, r3
 800cb5a:	3714      	adds	r7, #20
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb62:	4770      	bx	lr
 800cb64:	00030d40 	.word	0x00030d40

0800cb68 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800cb68:	b480      	push	{r7}
 800cb6a:	b085      	sub	sp, #20
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cb70:	2300      	movs	r3, #0
 800cb72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	3301      	adds	r3, #1
 800cb78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	4a11      	ldr	r2, [pc, #68]	; (800cbc4 <USB_FlushRxFifo+0x5c>)
 800cb7e:	4293      	cmp	r3, r2
 800cb80:	d901      	bls.n	800cb86 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800cb82:	2303      	movs	r3, #3
 800cb84:	e018      	b.n	800cbb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	691b      	ldr	r3, [r3, #16]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	daf2      	bge.n	800cb74 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800cb8e:	2300      	movs	r3, #0
 800cb90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	2210      	movs	r2, #16
 800cb96:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	3301      	adds	r3, #1
 800cb9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	4a08      	ldr	r2, [pc, #32]	; (800cbc4 <USB_FlushRxFifo+0x5c>)
 800cba2:	4293      	cmp	r3, r2
 800cba4:	d901      	bls.n	800cbaa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800cba6:	2303      	movs	r3, #3
 800cba8:	e006      	b.n	800cbb8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	691b      	ldr	r3, [r3, #16]
 800cbae:	f003 0310 	and.w	r3, r3, #16
 800cbb2:	2b10      	cmp	r3, #16
 800cbb4:	d0f0      	beq.n	800cb98 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800cbb6:	2300      	movs	r3, #0
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3714      	adds	r7, #20
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbc2:	4770      	bx	lr
 800cbc4:	00030d40 	.word	0x00030d40

0800cbc8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800cbc8:	b480      	push	{r7}
 800cbca:	b085      	sub	sp, #20
 800cbcc:	af00      	add	r7, sp, #0
 800cbce:	6078      	str	r0, [r7, #4]
 800cbd0:	460b      	mov	r3, r1
 800cbd2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbde:	681a      	ldr	r2, [r3, #0]
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	68f9      	ldr	r1, [r7, #12]
 800cbe4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cbe8:	4313      	orrs	r3, r2
 800cbea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800cbec:	2300      	movs	r3, #0
}
 800cbee:	4618      	mov	r0, r3
 800cbf0:	3714      	adds	r7, #20
 800cbf2:	46bd      	mov	sp, r7
 800cbf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf8:	4770      	bx	lr

0800cbfa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cbfa:	b480      	push	{r7}
 800cbfc:	b085      	sub	sp, #20
 800cbfe:	af00      	add	r7, sp, #0
 800cc00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	68fa      	ldr	r2, [r7, #12]
 800cc10:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cc14:	f023 0303 	bic.w	r3, r3, #3
 800cc18:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cc1a:	68fb      	ldr	r3, [r7, #12]
 800cc1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc20:	685b      	ldr	r3, [r3, #4]
 800cc22:	68fa      	ldr	r2, [r7, #12]
 800cc24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cc28:	f043 0302 	orr.w	r3, r3, #2
 800cc2c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cc2e:	2300      	movs	r3, #0
}
 800cc30:	4618      	mov	r0, r3
 800cc32:	3714      	adds	r7, #20
 800cc34:	46bd      	mov	sp, r7
 800cc36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3a:	4770      	bx	lr

0800cc3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cc3c:	b480      	push	{r7}
 800cc3e:	b083      	sub	sp, #12
 800cc40:	af00      	add	r7, sp, #0
 800cc42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	695b      	ldr	r3, [r3, #20]
 800cc48:	f003 0301 	and.w	r3, r3, #1
}
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	370c      	adds	r7, #12
 800cc50:	46bd      	mov	sp, r7
 800cc52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc56:	4770      	bx	lr

0800cc58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800cc58:	b480      	push	{r7}
 800cc5a:	b085      	sub	sp, #20
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800cc60:	2300      	movs	r3, #0
 800cc62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	3301      	adds	r3, #1
 800cc68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	4a13      	ldr	r2, [pc, #76]	; (800ccbc <USB_CoreReset+0x64>)
 800cc6e:	4293      	cmp	r3, r2
 800cc70:	d901      	bls.n	800cc76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800cc72:	2303      	movs	r3, #3
 800cc74:	e01b      	b.n	800ccae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	daf2      	bge.n	800cc64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800cc7e:	2300      	movs	r3, #0
 800cc80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	691b      	ldr	r3, [r3, #16]
 800cc86:	f043 0201 	orr.w	r2, r3, #1
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	3301      	adds	r3, #1
 800cc92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cc94:	68fb      	ldr	r3, [r7, #12]
 800cc96:	4a09      	ldr	r2, [pc, #36]	; (800ccbc <USB_CoreReset+0x64>)
 800cc98:	4293      	cmp	r3, r2
 800cc9a:	d901      	bls.n	800cca0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cc9c:	2303      	movs	r3, #3
 800cc9e:	e006      	b.n	800ccae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	691b      	ldr	r3, [r3, #16]
 800cca4:	f003 0301 	and.w	r3, r3, #1
 800cca8:	2b01      	cmp	r3, #1
 800ccaa:	d0f0      	beq.n	800cc8e <USB_CoreReset+0x36>

  return HAL_OK;
 800ccac:	2300      	movs	r3, #0
}
 800ccae:	4618      	mov	r0, r3
 800ccb0:	3714      	adds	r7, #20
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccb8:	4770      	bx	lr
 800ccba:	bf00      	nop
 800ccbc:	00030d40 	.word	0x00030d40

0800ccc0 <__errno>:
 800ccc0:	4b01      	ldr	r3, [pc, #4]	; (800ccc8 <__errno+0x8>)
 800ccc2:	6818      	ldr	r0, [r3, #0]
 800ccc4:	4770      	bx	lr
 800ccc6:	bf00      	nop
 800ccc8:	24000024 	.word	0x24000024

0800cccc <__libc_init_array>:
 800cccc:	b570      	push	{r4, r5, r6, lr}
 800ccce:	4d0d      	ldr	r5, [pc, #52]	; (800cd04 <__libc_init_array+0x38>)
 800ccd0:	4c0d      	ldr	r4, [pc, #52]	; (800cd08 <__libc_init_array+0x3c>)
 800ccd2:	1b64      	subs	r4, r4, r5
 800ccd4:	10a4      	asrs	r4, r4, #2
 800ccd6:	2600      	movs	r6, #0
 800ccd8:	42a6      	cmp	r6, r4
 800ccda:	d109      	bne.n	800ccf0 <__libc_init_array+0x24>
 800ccdc:	4d0b      	ldr	r5, [pc, #44]	; (800cd0c <__libc_init_array+0x40>)
 800ccde:	4c0c      	ldr	r4, [pc, #48]	; (800cd10 <__libc_init_array+0x44>)
 800cce0:	f000 fc8e 	bl	800d600 <_init>
 800cce4:	1b64      	subs	r4, r4, r5
 800cce6:	10a4      	asrs	r4, r4, #2
 800cce8:	2600      	movs	r6, #0
 800ccea:	42a6      	cmp	r6, r4
 800ccec:	d105      	bne.n	800ccfa <__libc_init_array+0x2e>
 800ccee:	bd70      	pop	{r4, r5, r6, pc}
 800ccf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccf4:	4798      	blx	r3
 800ccf6:	3601      	adds	r6, #1
 800ccf8:	e7ee      	b.n	800ccd8 <__libc_init_array+0xc>
 800ccfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800ccfe:	4798      	blx	r3
 800cd00:	3601      	adds	r6, #1
 800cd02:	e7f2      	b.n	800ccea <__libc_init_array+0x1e>
 800cd04:	0800ed34 	.word	0x0800ed34
 800cd08:	0800ed34 	.word	0x0800ed34
 800cd0c:	0800ed34 	.word	0x0800ed34
 800cd10:	0800ed38 	.word	0x0800ed38

0800cd14 <memset>:
 800cd14:	4402      	add	r2, r0
 800cd16:	4603      	mov	r3, r0
 800cd18:	4293      	cmp	r3, r2
 800cd1a:	d100      	bne.n	800cd1e <memset+0xa>
 800cd1c:	4770      	bx	lr
 800cd1e:	f803 1b01 	strb.w	r1, [r3], #1
 800cd22:	e7f9      	b.n	800cd18 <memset+0x4>

0800cd24 <_free_r>:
 800cd24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cd26:	2900      	cmp	r1, #0
 800cd28:	d044      	beq.n	800cdb4 <_free_r+0x90>
 800cd2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd2e:	9001      	str	r0, [sp, #4]
 800cd30:	2b00      	cmp	r3, #0
 800cd32:	f1a1 0404 	sub.w	r4, r1, #4
 800cd36:	bfb8      	it	lt
 800cd38:	18e4      	addlt	r4, r4, r3
 800cd3a:	f000 f903 	bl	800cf44 <__malloc_lock>
 800cd3e:	4a1e      	ldr	r2, [pc, #120]	; (800cdb8 <_free_r+0x94>)
 800cd40:	9801      	ldr	r0, [sp, #4]
 800cd42:	6813      	ldr	r3, [r2, #0]
 800cd44:	b933      	cbnz	r3, 800cd54 <_free_r+0x30>
 800cd46:	6063      	str	r3, [r4, #4]
 800cd48:	6014      	str	r4, [r2, #0]
 800cd4a:	b003      	add	sp, #12
 800cd4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cd50:	f000 b8fe 	b.w	800cf50 <__malloc_unlock>
 800cd54:	42a3      	cmp	r3, r4
 800cd56:	d908      	bls.n	800cd6a <_free_r+0x46>
 800cd58:	6825      	ldr	r5, [r4, #0]
 800cd5a:	1961      	adds	r1, r4, r5
 800cd5c:	428b      	cmp	r3, r1
 800cd5e:	bf01      	itttt	eq
 800cd60:	6819      	ldreq	r1, [r3, #0]
 800cd62:	685b      	ldreq	r3, [r3, #4]
 800cd64:	1949      	addeq	r1, r1, r5
 800cd66:	6021      	streq	r1, [r4, #0]
 800cd68:	e7ed      	b.n	800cd46 <_free_r+0x22>
 800cd6a:	461a      	mov	r2, r3
 800cd6c:	685b      	ldr	r3, [r3, #4]
 800cd6e:	b10b      	cbz	r3, 800cd74 <_free_r+0x50>
 800cd70:	42a3      	cmp	r3, r4
 800cd72:	d9fa      	bls.n	800cd6a <_free_r+0x46>
 800cd74:	6811      	ldr	r1, [r2, #0]
 800cd76:	1855      	adds	r5, r2, r1
 800cd78:	42a5      	cmp	r5, r4
 800cd7a:	d10b      	bne.n	800cd94 <_free_r+0x70>
 800cd7c:	6824      	ldr	r4, [r4, #0]
 800cd7e:	4421      	add	r1, r4
 800cd80:	1854      	adds	r4, r2, r1
 800cd82:	42a3      	cmp	r3, r4
 800cd84:	6011      	str	r1, [r2, #0]
 800cd86:	d1e0      	bne.n	800cd4a <_free_r+0x26>
 800cd88:	681c      	ldr	r4, [r3, #0]
 800cd8a:	685b      	ldr	r3, [r3, #4]
 800cd8c:	6053      	str	r3, [r2, #4]
 800cd8e:	4421      	add	r1, r4
 800cd90:	6011      	str	r1, [r2, #0]
 800cd92:	e7da      	b.n	800cd4a <_free_r+0x26>
 800cd94:	d902      	bls.n	800cd9c <_free_r+0x78>
 800cd96:	230c      	movs	r3, #12
 800cd98:	6003      	str	r3, [r0, #0]
 800cd9a:	e7d6      	b.n	800cd4a <_free_r+0x26>
 800cd9c:	6825      	ldr	r5, [r4, #0]
 800cd9e:	1961      	adds	r1, r4, r5
 800cda0:	428b      	cmp	r3, r1
 800cda2:	bf04      	itt	eq
 800cda4:	6819      	ldreq	r1, [r3, #0]
 800cda6:	685b      	ldreq	r3, [r3, #4]
 800cda8:	6063      	str	r3, [r4, #4]
 800cdaa:	bf04      	itt	eq
 800cdac:	1949      	addeq	r1, r1, r5
 800cdae:	6021      	streq	r1, [r4, #0]
 800cdb0:	6054      	str	r4, [r2, #4]
 800cdb2:	e7ca      	b.n	800cd4a <_free_r+0x26>
 800cdb4:	b003      	add	sp, #12
 800cdb6:	bd30      	pop	{r4, r5, pc}
 800cdb8:	24000eb0 	.word	0x24000eb0

0800cdbc <sbrk_aligned>:
 800cdbc:	b570      	push	{r4, r5, r6, lr}
 800cdbe:	4e0e      	ldr	r6, [pc, #56]	; (800cdf8 <sbrk_aligned+0x3c>)
 800cdc0:	460c      	mov	r4, r1
 800cdc2:	6831      	ldr	r1, [r6, #0]
 800cdc4:	4605      	mov	r5, r0
 800cdc6:	b911      	cbnz	r1, 800cdce <sbrk_aligned+0x12>
 800cdc8:	f000 f88c 	bl	800cee4 <_sbrk_r>
 800cdcc:	6030      	str	r0, [r6, #0]
 800cdce:	4621      	mov	r1, r4
 800cdd0:	4628      	mov	r0, r5
 800cdd2:	f000 f887 	bl	800cee4 <_sbrk_r>
 800cdd6:	1c43      	adds	r3, r0, #1
 800cdd8:	d00a      	beq.n	800cdf0 <sbrk_aligned+0x34>
 800cdda:	1cc4      	adds	r4, r0, #3
 800cddc:	f024 0403 	bic.w	r4, r4, #3
 800cde0:	42a0      	cmp	r0, r4
 800cde2:	d007      	beq.n	800cdf4 <sbrk_aligned+0x38>
 800cde4:	1a21      	subs	r1, r4, r0
 800cde6:	4628      	mov	r0, r5
 800cde8:	f000 f87c 	bl	800cee4 <_sbrk_r>
 800cdec:	3001      	adds	r0, #1
 800cdee:	d101      	bne.n	800cdf4 <sbrk_aligned+0x38>
 800cdf0:	f04f 34ff 	mov.w	r4, #4294967295
 800cdf4:	4620      	mov	r0, r4
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	24000eb4 	.word	0x24000eb4

0800cdfc <_malloc_r>:
 800cdfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce00:	1ccd      	adds	r5, r1, #3
 800ce02:	f025 0503 	bic.w	r5, r5, #3
 800ce06:	3508      	adds	r5, #8
 800ce08:	2d0c      	cmp	r5, #12
 800ce0a:	bf38      	it	cc
 800ce0c:	250c      	movcc	r5, #12
 800ce0e:	2d00      	cmp	r5, #0
 800ce10:	4607      	mov	r7, r0
 800ce12:	db01      	blt.n	800ce18 <_malloc_r+0x1c>
 800ce14:	42a9      	cmp	r1, r5
 800ce16:	d905      	bls.n	800ce24 <_malloc_r+0x28>
 800ce18:	230c      	movs	r3, #12
 800ce1a:	603b      	str	r3, [r7, #0]
 800ce1c:	2600      	movs	r6, #0
 800ce1e:	4630      	mov	r0, r6
 800ce20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ce24:	4e2e      	ldr	r6, [pc, #184]	; (800cee0 <_malloc_r+0xe4>)
 800ce26:	f000 f88d 	bl	800cf44 <__malloc_lock>
 800ce2a:	6833      	ldr	r3, [r6, #0]
 800ce2c:	461c      	mov	r4, r3
 800ce2e:	bb34      	cbnz	r4, 800ce7e <_malloc_r+0x82>
 800ce30:	4629      	mov	r1, r5
 800ce32:	4638      	mov	r0, r7
 800ce34:	f7ff ffc2 	bl	800cdbc <sbrk_aligned>
 800ce38:	1c43      	adds	r3, r0, #1
 800ce3a:	4604      	mov	r4, r0
 800ce3c:	d14d      	bne.n	800ceda <_malloc_r+0xde>
 800ce3e:	6834      	ldr	r4, [r6, #0]
 800ce40:	4626      	mov	r6, r4
 800ce42:	2e00      	cmp	r6, #0
 800ce44:	d140      	bne.n	800cec8 <_malloc_r+0xcc>
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	4631      	mov	r1, r6
 800ce4a:	4638      	mov	r0, r7
 800ce4c:	eb04 0803 	add.w	r8, r4, r3
 800ce50:	f000 f848 	bl	800cee4 <_sbrk_r>
 800ce54:	4580      	cmp	r8, r0
 800ce56:	d13a      	bne.n	800cece <_malloc_r+0xd2>
 800ce58:	6821      	ldr	r1, [r4, #0]
 800ce5a:	3503      	adds	r5, #3
 800ce5c:	1a6d      	subs	r5, r5, r1
 800ce5e:	f025 0503 	bic.w	r5, r5, #3
 800ce62:	3508      	adds	r5, #8
 800ce64:	2d0c      	cmp	r5, #12
 800ce66:	bf38      	it	cc
 800ce68:	250c      	movcc	r5, #12
 800ce6a:	4629      	mov	r1, r5
 800ce6c:	4638      	mov	r0, r7
 800ce6e:	f7ff ffa5 	bl	800cdbc <sbrk_aligned>
 800ce72:	3001      	adds	r0, #1
 800ce74:	d02b      	beq.n	800cece <_malloc_r+0xd2>
 800ce76:	6823      	ldr	r3, [r4, #0]
 800ce78:	442b      	add	r3, r5
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	e00e      	b.n	800ce9c <_malloc_r+0xa0>
 800ce7e:	6822      	ldr	r2, [r4, #0]
 800ce80:	1b52      	subs	r2, r2, r5
 800ce82:	d41e      	bmi.n	800cec2 <_malloc_r+0xc6>
 800ce84:	2a0b      	cmp	r2, #11
 800ce86:	d916      	bls.n	800ceb6 <_malloc_r+0xba>
 800ce88:	1961      	adds	r1, r4, r5
 800ce8a:	42a3      	cmp	r3, r4
 800ce8c:	6025      	str	r5, [r4, #0]
 800ce8e:	bf18      	it	ne
 800ce90:	6059      	strne	r1, [r3, #4]
 800ce92:	6863      	ldr	r3, [r4, #4]
 800ce94:	bf08      	it	eq
 800ce96:	6031      	streq	r1, [r6, #0]
 800ce98:	5162      	str	r2, [r4, r5]
 800ce9a:	604b      	str	r3, [r1, #4]
 800ce9c:	4638      	mov	r0, r7
 800ce9e:	f104 060b 	add.w	r6, r4, #11
 800cea2:	f000 f855 	bl	800cf50 <__malloc_unlock>
 800cea6:	f026 0607 	bic.w	r6, r6, #7
 800ceaa:	1d23      	adds	r3, r4, #4
 800ceac:	1af2      	subs	r2, r6, r3
 800ceae:	d0b6      	beq.n	800ce1e <_malloc_r+0x22>
 800ceb0:	1b9b      	subs	r3, r3, r6
 800ceb2:	50a3      	str	r3, [r4, r2]
 800ceb4:	e7b3      	b.n	800ce1e <_malloc_r+0x22>
 800ceb6:	6862      	ldr	r2, [r4, #4]
 800ceb8:	42a3      	cmp	r3, r4
 800ceba:	bf0c      	ite	eq
 800cebc:	6032      	streq	r2, [r6, #0]
 800cebe:	605a      	strne	r2, [r3, #4]
 800cec0:	e7ec      	b.n	800ce9c <_malloc_r+0xa0>
 800cec2:	4623      	mov	r3, r4
 800cec4:	6864      	ldr	r4, [r4, #4]
 800cec6:	e7b2      	b.n	800ce2e <_malloc_r+0x32>
 800cec8:	4634      	mov	r4, r6
 800ceca:	6876      	ldr	r6, [r6, #4]
 800cecc:	e7b9      	b.n	800ce42 <_malloc_r+0x46>
 800cece:	230c      	movs	r3, #12
 800ced0:	603b      	str	r3, [r7, #0]
 800ced2:	4638      	mov	r0, r7
 800ced4:	f000 f83c 	bl	800cf50 <__malloc_unlock>
 800ced8:	e7a1      	b.n	800ce1e <_malloc_r+0x22>
 800ceda:	6025      	str	r5, [r4, #0]
 800cedc:	e7de      	b.n	800ce9c <_malloc_r+0xa0>
 800cede:	bf00      	nop
 800cee0:	24000eb0 	.word	0x24000eb0

0800cee4 <_sbrk_r>:
 800cee4:	b538      	push	{r3, r4, r5, lr}
 800cee6:	4d06      	ldr	r5, [pc, #24]	; (800cf00 <_sbrk_r+0x1c>)
 800cee8:	2300      	movs	r3, #0
 800ceea:	4604      	mov	r4, r0
 800ceec:	4608      	mov	r0, r1
 800ceee:	602b      	str	r3, [r5, #0]
 800cef0:	f7f6 ffee 	bl	8003ed0 <_sbrk>
 800cef4:	1c43      	adds	r3, r0, #1
 800cef6:	d102      	bne.n	800cefe <_sbrk_r+0x1a>
 800cef8:	682b      	ldr	r3, [r5, #0]
 800cefa:	b103      	cbz	r3, 800cefe <_sbrk_r+0x1a>
 800cefc:	6023      	str	r3, [r4, #0]
 800cefe:	bd38      	pop	{r3, r4, r5, pc}
 800cf00:	24000eb8 	.word	0x24000eb8

0800cf04 <siprintf>:
 800cf04:	b40e      	push	{r1, r2, r3}
 800cf06:	b500      	push	{lr}
 800cf08:	b09c      	sub	sp, #112	; 0x70
 800cf0a:	ab1d      	add	r3, sp, #116	; 0x74
 800cf0c:	9002      	str	r0, [sp, #8]
 800cf0e:	9006      	str	r0, [sp, #24]
 800cf10:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cf14:	4809      	ldr	r0, [pc, #36]	; (800cf3c <siprintf+0x38>)
 800cf16:	9107      	str	r1, [sp, #28]
 800cf18:	9104      	str	r1, [sp, #16]
 800cf1a:	4909      	ldr	r1, [pc, #36]	; (800cf40 <siprintf+0x3c>)
 800cf1c:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf20:	9105      	str	r1, [sp, #20]
 800cf22:	6800      	ldr	r0, [r0, #0]
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	a902      	add	r1, sp, #8
 800cf28:	f000 f874 	bl	800d014 <_svfiprintf_r>
 800cf2c:	9b02      	ldr	r3, [sp, #8]
 800cf2e:	2200      	movs	r2, #0
 800cf30:	701a      	strb	r2, [r3, #0]
 800cf32:	b01c      	add	sp, #112	; 0x70
 800cf34:	f85d eb04 	ldr.w	lr, [sp], #4
 800cf38:	b003      	add	sp, #12
 800cf3a:	4770      	bx	lr
 800cf3c:	24000024 	.word	0x24000024
 800cf40:	ffff0208 	.word	0xffff0208

0800cf44 <__malloc_lock>:
 800cf44:	4801      	ldr	r0, [pc, #4]	; (800cf4c <__malloc_lock+0x8>)
 800cf46:	f000 baf9 	b.w	800d53c <__retarget_lock_acquire_recursive>
 800cf4a:	bf00      	nop
 800cf4c:	24000ebc 	.word	0x24000ebc

0800cf50 <__malloc_unlock>:
 800cf50:	4801      	ldr	r0, [pc, #4]	; (800cf58 <__malloc_unlock+0x8>)
 800cf52:	f000 baf4 	b.w	800d53e <__retarget_lock_release_recursive>
 800cf56:	bf00      	nop
 800cf58:	24000ebc 	.word	0x24000ebc

0800cf5c <__ssputs_r>:
 800cf5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf60:	688e      	ldr	r6, [r1, #8]
 800cf62:	429e      	cmp	r6, r3
 800cf64:	4682      	mov	sl, r0
 800cf66:	460c      	mov	r4, r1
 800cf68:	4690      	mov	r8, r2
 800cf6a:	461f      	mov	r7, r3
 800cf6c:	d838      	bhi.n	800cfe0 <__ssputs_r+0x84>
 800cf6e:	898a      	ldrh	r2, [r1, #12]
 800cf70:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf74:	d032      	beq.n	800cfdc <__ssputs_r+0x80>
 800cf76:	6825      	ldr	r5, [r4, #0]
 800cf78:	6909      	ldr	r1, [r1, #16]
 800cf7a:	eba5 0901 	sub.w	r9, r5, r1
 800cf7e:	6965      	ldr	r5, [r4, #20]
 800cf80:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf88:	3301      	adds	r3, #1
 800cf8a:	444b      	add	r3, r9
 800cf8c:	106d      	asrs	r5, r5, #1
 800cf8e:	429d      	cmp	r5, r3
 800cf90:	bf38      	it	cc
 800cf92:	461d      	movcc	r5, r3
 800cf94:	0553      	lsls	r3, r2, #21
 800cf96:	d531      	bpl.n	800cffc <__ssputs_r+0xa0>
 800cf98:	4629      	mov	r1, r5
 800cf9a:	f7ff ff2f 	bl	800cdfc <_malloc_r>
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	b950      	cbnz	r0, 800cfb8 <__ssputs_r+0x5c>
 800cfa2:	230c      	movs	r3, #12
 800cfa4:	f8ca 3000 	str.w	r3, [sl]
 800cfa8:	89a3      	ldrh	r3, [r4, #12]
 800cfaa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfae:	81a3      	strh	r3, [r4, #12]
 800cfb0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb8:	6921      	ldr	r1, [r4, #16]
 800cfba:	464a      	mov	r2, r9
 800cfbc:	f000 fac0 	bl	800d540 <memcpy>
 800cfc0:	89a3      	ldrh	r3, [r4, #12]
 800cfc2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cfc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfca:	81a3      	strh	r3, [r4, #12]
 800cfcc:	6126      	str	r6, [r4, #16]
 800cfce:	6165      	str	r5, [r4, #20]
 800cfd0:	444e      	add	r6, r9
 800cfd2:	eba5 0509 	sub.w	r5, r5, r9
 800cfd6:	6026      	str	r6, [r4, #0]
 800cfd8:	60a5      	str	r5, [r4, #8]
 800cfda:	463e      	mov	r6, r7
 800cfdc:	42be      	cmp	r6, r7
 800cfde:	d900      	bls.n	800cfe2 <__ssputs_r+0x86>
 800cfe0:	463e      	mov	r6, r7
 800cfe2:	6820      	ldr	r0, [r4, #0]
 800cfe4:	4632      	mov	r2, r6
 800cfe6:	4641      	mov	r1, r8
 800cfe8:	f000 fab8 	bl	800d55c <memmove>
 800cfec:	68a3      	ldr	r3, [r4, #8]
 800cfee:	1b9b      	subs	r3, r3, r6
 800cff0:	60a3      	str	r3, [r4, #8]
 800cff2:	6823      	ldr	r3, [r4, #0]
 800cff4:	4433      	add	r3, r6
 800cff6:	6023      	str	r3, [r4, #0]
 800cff8:	2000      	movs	r0, #0
 800cffa:	e7db      	b.n	800cfb4 <__ssputs_r+0x58>
 800cffc:	462a      	mov	r2, r5
 800cffe:	f000 fac7 	bl	800d590 <_realloc_r>
 800d002:	4606      	mov	r6, r0
 800d004:	2800      	cmp	r0, #0
 800d006:	d1e1      	bne.n	800cfcc <__ssputs_r+0x70>
 800d008:	6921      	ldr	r1, [r4, #16]
 800d00a:	4650      	mov	r0, sl
 800d00c:	f7ff fe8a 	bl	800cd24 <_free_r>
 800d010:	e7c7      	b.n	800cfa2 <__ssputs_r+0x46>
	...

0800d014 <_svfiprintf_r>:
 800d014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d018:	4698      	mov	r8, r3
 800d01a:	898b      	ldrh	r3, [r1, #12]
 800d01c:	061b      	lsls	r3, r3, #24
 800d01e:	b09d      	sub	sp, #116	; 0x74
 800d020:	4607      	mov	r7, r0
 800d022:	460d      	mov	r5, r1
 800d024:	4614      	mov	r4, r2
 800d026:	d50e      	bpl.n	800d046 <_svfiprintf_r+0x32>
 800d028:	690b      	ldr	r3, [r1, #16]
 800d02a:	b963      	cbnz	r3, 800d046 <_svfiprintf_r+0x32>
 800d02c:	2140      	movs	r1, #64	; 0x40
 800d02e:	f7ff fee5 	bl	800cdfc <_malloc_r>
 800d032:	6028      	str	r0, [r5, #0]
 800d034:	6128      	str	r0, [r5, #16]
 800d036:	b920      	cbnz	r0, 800d042 <_svfiprintf_r+0x2e>
 800d038:	230c      	movs	r3, #12
 800d03a:	603b      	str	r3, [r7, #0]
 800d03c:	f04f 30ff 	mov.w	r0, #4294967295
 800d040:	e0d1      	b.n	800d1e6 <_svfiprintf_r+0x1d2>
 800d042:	2340      	movs	r3, #64	; 0x40
 800d044:	616b      	str	r3, [r5, #20]
 800d046:	2300      	movs	r3, #0
 800d048:	9309      	str	r3, [sp, #36]	; 0x24
 800d04a:	2320      	movs	r3, #32
 800d04c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d050:	f8cd 800c 	str.w	r8, [sp, #12]
 800d054:	2330      	movs	r3, #48	; 0x30
 800d056:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d200 <_svfiprintf_r+0x1ec>
 800d05a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d05e:	f04f 0901 	mov.w	r9, #1
 800d062:	4623      	mov	r3, r4
 800d064:	469a      	mov	sl, r3
 800d066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d06a:	b10a      	cbz	r2, 800d070 <_svfiprintf_r+0x5c>
 800d06c:	2a25      	cmp	r2, #37	; 0x25
 800d06e:	d1f9      	bne.n	800d064 <_svfiprintf_r+0x50>
 800d070:	ebba 0b04 	subs.w	fp, sl, r4
 800d074:	d00b      	beq.n	800d08e <_svfiprintf_r+0x7a>
 800d076:	465b      	mov	r3, fp
 800d078:	4622      	mov	r2, r4
 800d07a:	4629      	mov	r1, r5
 800d07c:	4638      	mov	r0, r7
 800d07e:	f7ff ff6d 	bl	800cf5c <__ssputs_r>
 800d082:	3001      	adds	r0, #1
 800d084:	f000 80aa 	beq.w	800d1dc <_svfiprintf_r+0x1c8>
 800d088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d08a:	445a      	add	r2, fp
 800d08c:	9209      	str	r2, [sp, #36]	; 0x24
 800d08e:	f89a 3000 	ldrb.w	r3, [sl]
 800d092:	2b00      	cmp	r3, #0
 800d094:	f000 80a2 	beq.w	800d1dc <_svfiprintf_r+0x1c8>
 800d098:	2300      	movs	r3, #0
 800d09a:	f04f 32ff 	mov.w	r2, #4294967295
 800d09e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d0a2:	f10a 0a01 	add.w	sl, sl, #1
 800d0a6:	9304      	str	r3, [sp, #16]
 800d0a8:	9307      	str	r3, [sp, #28]
 800d0aa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d0ae:	931a      	str	r3, [sp, #104]	; 0x68
 800d0b0:	4654      	mov	r4, sl
 800d0b2:	2205      	movs	r2, #5
 800d0b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0b8:	4851      	ldr	r0, [pc, #324]	; (800d200 <_svfiprintf_r+0x1ec>)
 800d0ba:	f7f3 f911 	bl	80002e0 <memchr>
 800d0be:	9a04      	ldr	r2, [sp, #16]
 800d0c0:	b9d8      	cbnz	r0, 800d0fa <_svfiprintf_r+0xe6>
 800d0c2:	06d0      	lsls	r0, r2, #27
 800d0c4:	bf44      	itt	mi
 800d0c6:	2320      	movmi	r3, #32
 800d0c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0cc:	0711      	lsls	r1, r2, #28
 800d0ce:	bf44      	itt	mi
 800d0d0:	232b      	movmi	r3, #43	; 0x2b
 800d0d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d0d6:	f89a 3000 	ldrb.w	r3, [sl]
 800d0da:	2b2a      	cmp	r3, #42	; 0x2a
 800d0dc:	d015      	beq.n	800d10a <_svfiprintf_r+0xf6>
 800d0de:	9a07      	ldr	r2, [sp, #28]
 800d0e0:	4654      	mov	r4, sl
 800d0e2:	2000      	movs	r0, #0
 800d0e4:	f04f 0c0a 	mov.w	ip, #10
 800d0e8:	4621      	mov	r1, r4
 800d0ea:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0ee:	3b30      	subs	r3, #48	; 0x30
 800d0f0:	2b09      	cmp	r3, #9
 800d0f2:	d94e      	bls.n	800d192 <_svfiprintf_r+0x17e>
 800d0f4:	b1b0      	cbz	r0, 800d124 <_svfiprintf_r+0x110>
 800d0f6:	9207      	str	r2, [sp, #28]
 800d0f8:	e014      	b.n	800d124 <_svfiprintf_r+0x110>
 800d0fa:	eba0 0308 	sub.w	r3, r0, r8
 800d0fe:	fa09 f303 	lsl.w	r3, r9, r3
 800d102:	4313      	orrs	r3, r2
 800d104:	9304      	str	r3, [sp, #16]
 800d106:	46a2      	mov	sl, r4
 800d108:	e7d2      	b.n	800d0b0 <_svfiprintf_r+0x9c>
 800d10a:	9b03      	ldr	r3, [sp, #12]
 800d10c:	1d19      	adds	r1, r3, #4
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	9103      	str	r1, [sp, #12]
 800d112:	2b00      	cmp	r3, #0
 800d114:	bfbb      	ittet	lt
 800d116:	425b      	neglt	r3, r3
 800d118:	f042 0202 	orrlt.w	r2, r2, #2
 800d11c:	9307      	strge	r3, [sp, #28]
 800d11e:	9307      	strlt	r3, [sp, #28]
 800d120:	bfb8      	it	lt
 800d122:	9204      	strlt	r2, [sp, #16]
 800d124:	7823      	ldrb	r3, [r4, #0]
 800d126:	2b2e      	cmp	r3, #46	; 0x2e
 800d128:	d10c      	bne.n	800d144 <_svfiprintf_r+0x130>
 800d12a:	7863      	ldrb	r3, [r4, #1]
 800d12c:	2b2a      	cmp	r3, #42	; 0x2a
 800d12e:	d135      	bne.n	800d19c <_svfiprintf_r+0x188>
 800d130:	9b03      	ldr	r3, [sp, #12]
 800d132:	1d1a      	adds	r2, r3, #4
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	9203      	str	r2, [sp, #12]
 800d138:	2b00      	cmp	r3, #0
 800d13a:	bfb8      	it	lt
 800d13c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d140:	3402      	adds	r4, #2
 800d142:	9305      	str	r3, [sp, #20]
 800d144:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d210 <_svfiprintf_r+0x1fc>
 800d148:	7821      	ldrb	r1, [r4, #0]
 800d14a:	2203      	movs	r2, #3
 800d14c:	4650      	mov	r0, sl
 800d14e:	f7f3 f8c7 	bl	80002e0 <memchr>
 800d152:	b140      	cbz	r0, 800d166 <_svfiprintf_r+0x152>
 800d154:	2340      	movs	r3, #64	; 0x40
 800d156:	eba0 000a 	sub.w	r0, r0, sl
 800d15a:	fa03 f000 	lsl.w	r0, r3, r0
 800d15e:	9b04      	ldr	r3, [sp, #16]
 800d160:	4303      	orrs	r3, r0
 800d162:	3401      	adds	r4, #1
 800d164:	9304      	str	r3, [sp, #16]
 800d166:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16a:	4826      	ldr	r0, [pc, #152]	; (800d204 <_svfiprintf_r+0x1f0>)
 800d16c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d170:	2206      	movs	r2, #6
 800d172:	f7f3 f8b5 	bl	80002e0 <memchr>
 800d176:	2800      	cmp	r0, #0
 800d178:	d038      	beq.n	800d1ec <_svfiprintf_r+0x1d8>
 800d17a:	4b23      	ldr	r3, [pc, #140]	; (800d208 <_svfiprintf_r+0x1f4>)
 800d17c:	bb1b      	cbnz	r3, 800d1c6 <_svfiprintf_r+0x1b2>
 800d17e:	9b03      	ldr	r3, [sp, #12]
 800d180:	3307      	adds	r3, #7
 800d182:	f023 0307 	bic.w	r3, r3, #7
 800d186:	3308      	adds	r3, #8
 800d188:	9303      	str	r3, [sp, #12]
 800d18a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d18c:	4433      	add	r3, r6
 800d18e:	9309      	str	r3, [sp, #36]	; 0x24
 800d190:	e767      	b.n	800d062 <_svfiprintf_r+0x4e>
 800d192:	fb0c 3202 	mla	r2, ip, r2, r3
 800d196:	460c      	mov	r4, r1
 800d198:	2001      	movs	r0, #1
 800d19a:	e7a5      	b.n	800d0e8 <_svfiprintf_r+0xd4>
 800d19c:	2300      	movs	r3, #0
 800d19e:	3401      	adds	r4, #1
 800d1a0:	9305      	str	r3, [sp, #20]
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	f04f 0c0a 	mov.w	ip, #10
 800d1a8:	4620      	mov	r0, r4
 800d1aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d1ae:	3a30      	subs	r2, #48	; 0x30
 800d1b0:	2a09      	cmp	r2, #9
 800d1b2:	d903      	bls.n	800d1bc <_svfiprintf_r+0x1a8>
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d0c5      	beq.n	800d144 <_svfiprintf_r+0x130>
 800d1b8:	9105      	str	r1, [sp, #20]
 800d1ba:	e7c3      	b.n	800d144 <_svfiprintf_r+0x130>
 800d1bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800d1c0:	4604      	mov	r4, r0
 800d1c2:	2301      	movs	r3, #1
 800d1c4:	e7f0      	b.n	800d1a8 <_svfiprintf_r+0x194>
 800d1c6:	ab03      	add	r3, sp, #12
 800d1c8:	9300      	str	r3, [sp, #0]
 800d1ca:	462a      	mov	r2, r5
 800d1cc:	4b0f      	ldr	r3, [pc, #60]	; (800d20c <_svfiprintf_r+0x1f8>)
 800d1ce:	a904      	add	r1, sp, #16
 800d1d0:	4638      	mov	r0, r7
 800d1d2:	f3af 8000 	nop.w
 800d1d6:	1c42      	adds	r2, r0, #1
 800d1d8:	4606      	mov	r6, r0
 800d1da:	d1d6      	bne.n	800d18a <_svfiprintf_r+0x176>
 800d1dc:	89ab      	ldrh	r3, [r5, #12]
 800d1de:	065b      	lsls	r3, r3, #25
 800d1e0:	f53f af2c 	bmi.w	800d03c <_svfiprintf_r+0x28>
 800d1e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1e6:	b01d      	add	sp, #116	; 0x74
 800d1e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ec:	ab03      	add	r3, sp, #12
 800d1ee:	9300      	str	r3, [sp, #0]
 800d1f0:	462a      	mov	r2, r5
 800d1f2:	4b06      	ldr	r3, [pc, #24]	; (800d20c <_svfiprintf_r+0x1f8>)
 800d1f4:	a904      	add	r1, sp, #16
 800d1f6:	4638      	mov	r0, r7
 800d1f8:	f000 f87a 	bl	800d2f0 <_printf_i>
 800d1fc:	e7eb      	b.n	800d1d6 <_svfiprintf_r+0x1c2>
 800d1fe:	bf00      	nop
 800d200:	0800ecf8 	.word	0x0800ecf8
 800d204:	0800ed02 	.word	0x0800ed02
 800d208:	00000000 	.word	0x00000000
 800d20c:	0800cf5d 	.word	0x0800cf5d
 800d210:	0800ecfe 	.word	0x0800ecfe

0800d214 <_printf_common>:
 800d214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	4616      	mov	r6, r2
 800d21a:	4699      	mov	r9, r3
 800d21c:	688a      	ldr	r2, [r1, #8]
 800d21e:	690b      	ldr	r3, [r1, #16]
 800d220:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d224:	4293      	cmp	r3, r2
 800d226:	bfb8      	it	lt
 800d228:	4613      	movlt	r3, r2
 800d22a:	6033      	str	r3, [r6, #0]
 800d22c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d230:	4607      	mov	r7, r0
 800d232:	460c      	mov	r4, r1
 800d234:	b10a      	cbz	r2, 800d23a <_printf_common+0x26>
 800d236:	3301      	adds	r3, #1
 800d238:	6033      	str	r3, [r6, #0]
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	0699      	lsls	r1, r3, #26
 800d23e:	bf42      	ittt	mi
 800d240:	6833      	ldrmi	r3, [r6, #0]
 800d242:	3302      	addmi	r3, #2
 800d244:	6033      	strmi	r3, [r6, #0]
 800d246:	6825      	ldr	r5, [r4, #0]
 800d248:	f015 0506 	ands.w	r5, r5, #6
 800d24c:	d106      	bne.n	800d25c <_printf_common+0x48>
 800d24e:	f104 0a19 	add.w	sl, r4, #25
 800d252:	68e3      	ldr	r3, [r4, #12]
 800d254:	6832      	ldr	r2, [r6, #0]
 800d256:	1a9b      	subs	r3, r3, r2
 800d258:	42ab      	cmp	r3, r5
 800d25a:	dc26      	bgt.n	800d2aa <_printf_common+0x96>
 800d25c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d260:	1e13      	subs	r3, r2, #0
 800d262:	6822      	ldr	r2, [r4, #0]
 800d264:	bf18      	it	ne
 800d266:	2301      	movne	r3, #1
 800d268:	0692      	lsls	r2, r2, #26
 800d26a:	d42b      	bmi.n	800d2c4 <_printf_common+0xb0>
 800d26c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d270:	4649      	mov	r1, r9
 800d272:	4638      	mov	r0, r7
 800d274:	47c0      	blx	r8
 800d276:	3001      	adds	r0, #1
 800d278:	d01e      	beq.n	800d2b8 <_printf_common+0xa4>
 800d27a:	6823      	ldr	r3, [r4, #0]
 800d27c:	68e5      	ldr	r5, [r4, #12]
 800d27e:	6832      	ldr	r2, [r6, #0]
 800d280:	f003 0306 	and.w	r3, r3, #6
 800d284:	2b04      	cmp	r3, #4
 800d286:	bf08      	it	eq
 800d288:	1aad      	subeq	r5, r5, r2
 800d28a:	68a3      	ldr	r3, [r4, #8]
 800d28c:	6922      	ldr	r2, [r4, #16]
 800d28e:	bf0c      	ite	eq
 800d290:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d294:	2500      	movne	r5, #0
 800d296:	4293      	cmp	r3, r2
 800d298:	bfc4      	itt	gt
 800d29a:	1a9b      	subgt	r3, r3, r2
 800d29c:	18ed      	addgt	r5, r5, r3
 800d29e:	2600      	movs	r6, #0
 800d2a0:	341a      	adds	r4, #26
 800d2a2:	42b5      	cmp	r5, r6
 800d2a4:	d11a      	bne.n	800d2dc <_printf_common+0xc8>
 800d2a6:	2000      	movs	r0, #0
 800d2a8:	e008      	b.n	800d2bc <_printf_common+0xa8>
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	4652      	mov	r2, sl
 800d2ae:	4649      	mov	r1, r9
 800d2b0:	4638      	mov	r0, r7
 800d2b2:	47c0      	blx	r8
 800d2b4:	3001      	adds	r0, #1
 800d2b6:	d103      	bne.n	800d2c0 <_printf_common+0xac>
 800d2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800d2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2c0:	3501      	adds	r5, #1
 800d2c2:	e7c6      	b.n	800d252 <_printf_common+0x3e>
 800d2c4:	18e1      	adds	r1, r4, r3
 800d2c6:	1c5a      	adds	r2, r3, #1
 800d2c8:	2030      	movs	r0, #48	; 0x30
 800d2ca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d2ce:	4422      	add	r2, r4
 800d2d0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d2d4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d2d8:	3302      	adds	r3, #2
 800d2da:	e7c7      	b.n	800d26c <_printf_common+0x58>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4649      	mov	r1, r9
 800d2e2:	4638      	mov	r0, r7
 800d2e4:	47c0      	blx	r8
 800d2e6:	3001      	adds	r0, #1
 800d2e8:	d0e6      	beq.n	800d2b8 <_printf_common+0xa4>
 800d2ea:	3601      	adds	r6, #1
 800d2ec:	e7d9      	b.n	800d2a2 <_printf_common+0x8e>
	...

0800d2f0 <_printf_i>:
 800d2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f4:	7e0f      	ldrb	r7, [r1, #24]
 800d2f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2f8:	2f78      	cmp	r7, #120	; 0x78
 800d2fa:	4691      	mov	r9, r2
 800d2fc:	4680      	mov	r8, r0
 800d2fe:	460c      	mov	r4, r1
 800d300:	469a      	mov	sl, r3
 800d302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d306:	d807      	bhi.n	800d318 <_printf_i+0x28>
 800d308:	2f62      	cmp	r7, #98	; 0x62
 800d30a:	d80a      	bhi.n	800d322 <_printf_i+0x32>
 800d30c:	2f00      	cmp	r7, #0
 800d30e:	f000 80d8 	beq.w	800d4c2 <_printf_i+0x1d2>
 800d312:	2f58      	cmp	r7, #88	; 0x58
 800d314:	f000 80a3 	beq.w	800d45e <_printf_i+0x16e>
 800d318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d31c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d320:	e03a      	b.n	800d398 <_printf_i+0xa8>
 800d322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d326:	2b15      	cmp	r3, #21
 800d328:	d8f6      	bhi.n	800d318 <_printf_i+0x28>
 800d32a:	a101      	add	r1, pc, #4	; (adr r1, 800d330 <_printf_i+0x40>)
 800d32c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d330:	0800d389 	.word	0x0800d389
 800d334:	0800d39d 	.word	0x0800d39d
 800d338:	0800d319 	.word	0x0800d319
 800d33c:	0800d319 	.word	0x0800d319
 800d340:	0800d319 	.word	0x0800d319
 800d344:	0800d319 	.word	0x0800d319
 800d348:	0800d39d 	.word	0x0800d39d
 800d34c:	0800d319 	.word	0x0800d319
 800d350:	0800d319 	.word	0x0800d319
 800d354:	0800d319 	.word	0x0800d319
 800d358:	0800d319 	.word	0x0800d319
 800d35c:	0800d4a9 	.word	0x0800d4a9
 800d360:	0800d3cd 	.word	0x0800d3cd
 800d364:	0800d48b 	.word	0x0800d48b
 800d368:	0800d319 	.word	0x0800d319
 800d36c:	0800d319 	.word	0x0800d319
 800d370:	0800d4cb 	.word	0x0800d4cb
 800d374:	0800d319 	.word	0x0800d319
 800d378:	0800d3cd 	.word	0x0800d3cd
 800d37c:	0800d319 	.word	0x0800d319
 800d380:	0800d319 	.word	0x0800d319
 800d384:	0800d493 	.word	0x0800d493
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	1d1a      	adds	r2, r3, #4
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	602a      	str	r2, [r5, #0]
 800d390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d398:	2301      	movs	r3, #1
 800d39a:	e0a3      	b.n	800d4e4 <_printf_i+0x1f4>
 800d39c:	6820      	ldr	r0, [r4, #0]
 800d39e:	6829      	ldr	r1, [r5, #0]
 800d3a0:	0606      	lsls	r6, r0, #24
 800d3a2:	f101 0304 	add.w	r3, r1, #4
 800d3a6:	d50a      	bpl.n	800d3be <_printf_i+0xce>
 800d3a8:	680e      	ldr	r6, [r1, #0]
 800d3aa:	602b      	str	r3, [r5, #0]
 800d3ac:	2e00      	cmp	r6, #0
 800d3ae:	da03      	bge.n	800d3b8 <_printf_i+0xc8>
 800d3b0:	232d      	movs	r3, #45	; 0x2d
 800d3b2:	4276      	negs	r6, r6
 800d3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d3b8:	485e      	ldr	r0, [pc, #376]	; (800d534 <_printf_i+0x244>)
 800d3ba:	230a      	movs	r3, #10
 800d3bc:	e019      	b.n	800d3f2 <_printf_i+0x102>
 800d3be:	680e      	ldr	r6, [r1, #0]
 800d3c0:	602b      	str	r3, [r5, #0]
 800d3c2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d3c6:	bf18      	it	ne
 800d3c8:	b236      	sxthne	r6, r6
 800d3ca:	e7ef      	b.n	800d3ac <_printf_i+0xbc>
 800d3cc:	682b      	ldr	r3, [r5, #0]
 800d3ce:	6820      	ldr	r0, [r4, #0]
 800d3d0:	1d19      	adds	r1, r3, #4
 800d3d2:	6029      	str	r1, [r5, #0]
 800d3d4:	0601      	lsls	r1, r0, #24
 800d3d6:	d501      	bpl.n	800d3dc <_printf_i+0xec>
 800d3d8:	681e      	ldr	r6, [r3, #0]
 800d3da:	e002      	b.n	800d3e2 <_printf_i+0xf2>
 800d3dc:	0646      	lsls	r6, r0, #25
 800d3de:	d5fb      	bpl.n	800d3d8 <_printf_i+0xe8>
 800d3e0:	881e      	ldrh	r6, [r3, #0]
 800d3e2:	4854      	ldr	r0, [pc, #336]	; (800d534 <_printf_i+0x244>)
 800d3e4:	2f6f      	cmp	r7, #111	; 0x6f
 800d3e6:	bf0c      	ite	eq
 800d3e8:	2308      	moveq	r3, #8
 800d3ea:	230a      	movne	r3, #10
 800d3ec:	2100      	movs	r1, #0
 800d3ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3f2:	6865      	ldr	r5, [r4, #4]
 800d3f4:	60a5      	str	r5, [r4, #8]
 800d3f6:	2d00      	cmp	r5, #0
 800d3f8:	bfa2      	ittt	ge
 800d3fa:	6821      	ldrge	r1, [r4, #0]
 800d3fc:	f021 0104 	bicge.w	r1, r1, #4
 800d400:	6021      	strge	r1, [r4, #0]
 800d402:	b90e      	cbnz	r6, 800d408 <_printf_i+0x118>
 800d404:	2d00      	cmp	r5, #0
 800d406:	d04d      	beq.n	800d4a4 <_printf_i+0x1b4>
 800d408:	4615      	mov	r5, r2
 800d40a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d40e:	fb03 6711 	mls	r7, r3, r1, r6
 800d412:	5dc7      	ldrb	r7, [r0, r7]
 800d414:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d418:	4637      	mov	r7, r6
 800d41a:	42bb      	cmp	r3, r7
 800d41c:	460e      	mov	r6, r1
 800d41e:	d9f4      	bls.n	800d40a <_printf_i+0x11a>
 800d420:	2b08      	cmp	r3, #8
 800d422:	d10b      	bne.n	800d43c <_printf_i+0x14c>
 800d424:	6823      	ldr	r3, [r4, #0]
 800d426:	07de      	lsls	r6, r3, #31
 800d428:	d508      	bpl.n	800d43c <_printf_i+0x14c>
 800d42a:	6923      	ldr	r3, [r4, #16]
 800d42c:	6861      	ldr	r1, [r4, #4]
 800d42e:	4299      	cmp	r1, r3
 800d430:	bfde      	ittt	le
 800d432:	2330      	movle	r3, #48	; 0x30
 800d434:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d438:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d43c:	1b52      	subs	r2, r2, r5
 800d43e:	6122      	str	r2, [r4, #16]
 800d440:	f8cd a000 	str.w	sl, [sp]
 800d444:	464b      	mov	r3, r9
 800d446:	aa03      	add	r2, sp, #12
 800d448:	4621      	mov	r1, r4
 800d44a:	4640      	mov	r0, r8
 800d44c:	f7ff fee2 	bl	800d214 <_printf_common>
 800d450:	3001      	adds	r0, #1
 800d452:	d14c      	bne.n	800d4ee <_printf_i+0x1fe>
 800d454:	f04f 30ff 	mov.w	r0, #4294967295
 800d458:	b004      	add	sp, #16
 800d45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45e:	4835      	ldr	r0, [pc, #212]	; (800d534 <_printf_i+0x244>)
 800d460:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d464:	6829      	ldr	r1, [r5, #0]
 800d466:	6823      	ldr	r3, [r4, #0]
 800d468:	f851 6b04 	ldr.w	r6, [r1], #4
 800d46c:	6029      	str	r1, [r5, #0]
 800d46e:	061d      	lsls	r5, r3, #24
 800d470:	d514      	bpl.n	800d49c <_printf_i+0x1ac>
 800d472:	07df      	lsls	r7, r3, #31
 800d474:	bf44      	itt	mi
 800d476:	f043 0320 	orrmi.w	r3, r3, #32
 800d47a:	6023      	strmi	r3, [r4, #0]
 800d47c:	b91e      	cbnz	r6, 800d486 <_printf_i+0x196>
 800d47e:	6823      	ldr	r3, [r4, #0]
 800d480:	f023 0320 	bic.w	r3, r3, #32
 800d484:	6023      	str	r3, [r4, #0]
 800d486:	2310      	movs	r3, #16
 800d488:	e7b0      	b.n	800d3ec <_printf_i+0xfc>
 800d48a:	6823      	ldr	r3, [r4, #0]
 800d48c:	f043 0320 	orr.w	r3, r3, #32
 800d490:	6023      	str	r3, [r4, #0]
 800d492:	2378      	movs	r3, #120	; 0x78
 800d494:	4828      	ldr	r0, [pc, #160]	; (800d538 <_printf_i+0x248>)
 800d496:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d49a:	e7e3      	b.n	800d464 <_printf_i+0x174>
 800d49c:	0659      	lsls	r1, r3, #25
 800d49e:	bf48      	it	mi
 800d4a0:	b2b6      	uxthmi	r6, r6
 800d4a2:	e7e6      	b.n	800d472 <_printf_i+0x182>
 800d4a4:	4615      	mov	r5, r2
 800d4a6:	e7bb      	b.n	800d420 <_printf_i+0x130>
 800d4a8:	682b      	ldr	r3, [r5, #0]
 800d4aa:	6826      	ldr	r6, [r4, #0]
 800d4ac:	6961      	ldr	r1, [r4, #20]
 800d4ae:	1d18      	adds	r0, r3, #4
 800d4b0:	6028      	str	r0, [r5, #0]
 800d4b2:	0635      	lsls	r5, r6, #24
 800d4b4:	681b      	ldr	r3, [r3, #0]
 800d4b6:	d501      	bpl.n	800d4bc <_printf_i+0x1cc>
 800d4b8:	6019      	str	r1, [r3, #0]
 800d4ba:	e002      	b.n	800d4c2 <_printf_i+0x1d2>
 800d4bc:	0670      	lsls	r0, r6, #25
 800d4be:	d5fb      	bpl.n	800d4b8 <_printf_i+0x1c8>
 800d4c0:	8019      	strh	r1, [r3, #0]
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	6123      	str	r3, [r4, #16]
 800d4c6:	4615      	mov	r5, r2
 800d4c8:	e7ba      	b.n	800d440 <_printf_i+0x150>
 800d4ca:	682b      	ldr	r3, [r5, #0]
 800d4cc:	1d1a      	adds	r2, r3, #4
 800d4ce:	602a      	str	r2, [r5, #0]
 800d4d0:	681d      	ldr	r5, [r3, #0]
 800d4d2:	6862      	ldr	r2, [r4, #4]
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	4628      	mov	r0, r5
 800d4d8:	f7f2 ff02 	bl	80002e0 <memchr>
 800d4dc:	b108      	cbz	r0, 800d4e2 <_printf_i+0x1f2>
 800d4de:	1b40      	subs	r0, r0, r5
 800d4e0:	6060      	str	r0, [r4, #4]
 800d4e2:	6863      	ldr	r3, [r4, #4]
 800d4e4:	6123      	str	r3, [r4, #16]
 800d4e6:	2300      	movs	r3, #0
 800d4e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4ec:	e7a8      	b.n	800d440 <_printf_i+0x150>
 800d4ee:	6923      	ldr	r3, [r4, #16]
 800d4f0:	462a      	mov	r2, r5
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	4640      	mov	r0, r8
 800d4f6:	47d0      	blx	sl
 800d4f8:	3001      	adds	r0, #1
 800d4fa:	d0ab      	beq.n	800d454 <_printf_i+0x164>
 800d4fc:	6823      	ldr	r3, [r4, #0]
 800d4fe:	079b      	lsls	r3, r3, #30
 800d500:	d413      	bmi.n	800d52a <_printf_i+0x23a>
 800d502:	68e0      	ldr	r0, [r4, #12]
 800d504:	9b03      	ldr	r3, [sp, #12]
 800d506:	4298      	cmp	r0, r3
 800d508:	bfb8      	it	lt
 800d50a:	4618      	movlt	r0, r3
 800d50c:	e7a4      	b.n	800d458 <_printf_i+0x168>
 800d50e:	2301      	movs	r3, #1
 800d510:	4632      	mov	r2, r6
 800d512:	4649      	mov	r1, r9
 800d514:	4640      	mov	r0, r8
 800d516:	47d0      	blx	sl
 800d518:	3001      	adds	r0, #1
 800d51a:	d09b      	beq.n	800d454 <_printf_i+0x164>
 800d51c:	3501      	adds	r5, #1
 800d51e:	68e3      	ldr	r3, [r4, #12]
 800d520:	9903      	ldr	r1, [sp, #12]
 800d522:	1a5b      	subs	r3, r3, r1
 800d524:	42ab      	cmp	r3, r5
 800d526:	dcf2      	bgt.n	800d50e <_printf_i+0x21e>
 800d528:	e7eb      	b.n	800d502 <_printf_i+0x212>
 800d52a:	2500      	movs	r5, #0
 800d52c:	f104 0619 	add.w	r6, r4, #25
 800d530:	e7f5      	b.n	800d51e <_printf_i+0x22e>
 800d532:	bf00      	nop
 800d534:	0800ed09 	.word	0x0800ed09
 800d538:	0800ed1a 	.word	0x0800ed1a

0800d53c <__retarget_lock_acquire_recursive>:
 800d53c:	4770      	bx	lr

0800d53e <__retarget_lock_release_recursive>:
 800d53e:	4770      	bx	lr

0800d540 <memcpy>:
 800d540:	440a      	add	r2, r1
 800d542:	4291      	cmp	r1, r2
 800d544:	f100 33ff 	add.w	r3, r0, #4294967295
 800d548:	d100      	bne.n	800d54c <memcpy+0xc>
 800d54a:	4770      	bx	lr
 800d54c:	b510      	push	{r4, lr}
 800d54e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d552:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d556:	4291      	cmp	r1, r2
 800d558:	d1f9      	bne.n	800d54e <memcpy+0xe>
 800d55a:	bd10      	pop	{r4, pc}

0800d55c <memmove>:
 800d55c:	4288      	cmp	r0, r1
 800d55e:	b510      	push	{r4, lr}
 800d560:	eb01 0402 	add.w	r4, r1, r2
 800d564:	d902      	bls.n	800d56c <memmove+0x10>
 800d566:	4284      	cmp	r4, r0
 800d568:	4623      	mov	r3, r4
 800d56a:	d807      	bhi.n	800d57c <memmove+0x20>
 800d56c:	1e43      	subs	r3, r0, #1
 800d56e:	42a1      	cmp	r1, r4
 800d570:	d008      	beq.n	800d584 <memmove+0x28>
 800d572:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d576:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d57a:	e7f8      	b.n	800d56e <memmove+0x12>
 800d57c:	4402      	add	r2, r0
 800d57e:	4601      	mov	r1, r0
 800d580:	428a      	cmp	r2, r1
 800d582:	d100      	bne.n	800d586 <memmove+0x2a>
 800d584:	bd10      	pop	{r4, pc}
 800d586:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d58a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d58e:	e7f7      	b.n	800d580 <memmove+0x24>

0800d590 <_realloc_r>:
 800d590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d594:	4680      	mov	r8, r0
 800d596:	4614      	mov	r4, r2
 800d598:	460e      	mov	r6, r1
 800d59a:	b921      	cbnz	r1, 800d5a6 <_realloc_r+0x16>
 800d59c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d5a0:	4611      	mov	r1, r2
 800d5a2:	f7ff bc2b 	b.w	800cdfc <_malloc_r>
 800d5a6:	b92a      	cbnz	r2, 800d5b4 <_realloc_r+0x24>
 800d5a8:	f7ff fbbc 	bl	800cd24 <_free_r>
 800d5ac:	4625      	mov	r5, r4
 800d5ae:	4628      	mov	r0, r5
 800d5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d5b4:	f000 f81b 	bl	800d5ee <_malloc_usable_size_r>
 800d5b8:	4284      	cmp	r4, r0
 800d5ba:	4607      	mov	r7, r0
 800d5bc:	d802      	bhi.n	800d5c4 <_realloc_r+0x34>
 800d5be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d5c2:	d812      	bhi.n	800d5ea <_realloc_r+0x5a>
 800d5c4:	4621      	mov	r1, r4
 800d5c6:	4640      	mov	r0, r8
 800d5c8:	f7ff fc18 	bl	800cdfc <_malloc_r>
 800d5cc:	4605      	mov	r5, r0
 800d5ce:	2800      	cmp	r0, #0
 800d5d0:	d0ed      	beq.n	800d5ae <_realloc_r+0x1e>
 800d5d2:	42bc      	cmp	r4, r7
 800d5d4:	4622      	mov	r2, r4
 800d5d6:	4631      	mov	r1, r6
 800d5d8:	bf28      	it	cs
 800d5da:	463a      	movcs	r2, r7
 800d5dc:	f7ff ffb0 	bl	800d540 <memcpy>
 800d5e0:	4631      	mov	r1, r6
 800d5e2:	4640      	mov	r0, r8
 800d5e4:	f7ff fb9e 	bl	800cd24 <_free_r>
 800d5e8:	e7e1      	b.n	800d5ae <_realloc_r+0x1e>
 800d5ea:	4635      	mov	r5, r6
 800d5ec:	e7df      	b.n	800d5ae <_realloc_r+0x1e>

0800d5ee <_malloc_usable_size_r>:
 800d5ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5f2:	1f18      	subs	r0, r3, #4
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	bfbc      	itt	lt
 800d5f8:	580b      	ldrlt	r3, [r1, r0]
 800d5fa:	18c0      	addlt	r0, r0, r3
 800d5fc:	4770      	bx	lr
	...

0800d600 <_init>:
 800d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d602:	bf00      	nop
 800d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d606:	bc08      	pop	{r3}
 800d608:	469e      	mov	lr, r3
 800d60a:	4770      	bx	lr

0800d60c <_fini>:
 800d60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60e:	bf00      	nop
 800d610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d612:	bc08      	pop	{r3}
 800d614:	469e      	mov	lr, r3
 800d616:	4770      	bx	lr
