
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bd88  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800c028  0800c028  0001c028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d6c4  0800d6c4  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d6c4  0800d6c4  0001d6c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d6cc  0800d6cc  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d6cc  0800d6cc  0001d6cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d6d0  0800d6d0  0001d6d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d6d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800d758  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800d7b8  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b78  24000144  0800d818  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800d818  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001fa18  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036e4  00000000  00000000  0003fb8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001458  00000000  00000000  00043270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001380  00000000  00000000  000446c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c561  00000000  00000000  00045a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001be57  00000000  00000000  00081fa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00187287  00000000  00000000  0009de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00225087  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059ec  00000000  00000000  002250d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800c010 	.word	0x0800c010

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800c010 	.word	0x0800c010

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b088      	sub	sp, #32
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3314      	adds	r3, #20
 80006fa:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	76fb      	strb	r3, [r7, #27]
 8000700:	e00b      	b.n	800071a <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	69f9      	ldr	r1, [r7, #28]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffbb 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	330c      	adds	r3, #12
 8000712:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000714:	7efb      	ldrb	r3, [r7, #27]
 8000716:	3301      	adds	r3, #1
 8000718:	76fb      	strb	r3, [r7, #27]
 800071a:	7efb      	ldrb	r3, [r7, #27]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d9f0      	bls.n	8000702 <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b088      	sub	sp, #32
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000744:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000746:	2300      	movs	r3, #0
 8000748:	76fb      	strb	r3, [r7, #27]
 800074a:	e00b      	b.n	8000764 <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	69f9      	ldr	r1, [r7, #28]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff96 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	330c      	adds	r3, #12
 800075c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800075e:	7efb      	ldrb	r3, [r7, #27]
 8000760:	3301      	adds	r3, #1
 8000762:	76fb      	strb	r3, [r7, #27]
 8000764:	7efb      	ldrb	r3, [r7, #27]
 8000766:	2b05      	cmp	r3, #5
 8000768:	d9f0      	bls.n	800074c <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8000774:	b580      	push	{r7, lr}
 8000776:	b088      	sub	sp, #32
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800078e:	61fb      	str	r3, [r7, #28]

		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000790:	2300      	movs	r3, #0
 8000792:	76fb      	strb	r3, [r7, #27]
 8000794:	e00b      	b.n	80007ae <YUGIOH_Clear_Card_All+0x3a>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	69f9      	ldr	r1, [r7, #28]
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff ff71 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007a2:	69fb      	ldr	r3, [r7, #28]
 80007a4:	330c      	adds	r3, #12
 80007a6:	61fb      	str	r3, [r7, #28]
		for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80007a8:	7efb      	ldrb	r3, [r7, #27]
 80007aa:	3301      	adds	r3, #1
 80007ac:	76fb      	strb	r3, [r7, #27]
 80007ae:	7efb      	ldrb	r3, [r7, #27]
 80007b0:	2b05      	cmp	r3, #5
 80007b2:	d9f0      	bls.n	8000796 <YUGIOH_Clear_Card_All+0x22>

		}
		ptrYUGIOHCard = player->GY;
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	334c      	adds	r3, #76	; 0x4c
 80007b8:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007ba:	2300      	movs	r3, #0
 80007bc:	76bb      	strb	r3, [r7, #26]
 80007be:	e00b      	b.n	80007d8 <YUGIOH_Clear_Card_All+0x64>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007c0:	f107 030c 	add.w	r3, r7, #12
 80007c4:	69f9      	ldr	r1, [r7, #28]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff5c 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007cc:	69fb      	ldr	r3, [r7, #28]
 80007ce:	330c      	adds	r3, #12
 80007d0:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80007d2:	7ebb      	ldrb	r3, [r7, #26]
 80007d4:	3301      	adds	r3, #1
 80007d6:	76bb      	strb	r3, [r7, #26]
 80007d8:	7ebb      	ldrb	r3, [r7, #26]
 80007da:	2b13      	cmp	r3, #19
 80007dc:	d9f0      	bls.n	80007c0 <YUGIOH_Clear_Card_All+0x4c>
		}
		ptrYUGIOHCard = player->cardOnBoard;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3304      	adds	r3, #4
 80007e2:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80007e4:	2300      	movs	r3, #0
 80007e6:	767b      	strb	r3, [r7, #25]
 80007e8:	e00b      	b.n	8000802 <YUGIOH_Clear_Card_All+0x8e>
			YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	69f9      	ldr	r1, [r7, #28]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff ff47 	bl	8000684 <YUGIOH_card_copy>
			ptrYUGIOHCard++;
 80007f6:	69fb      	ldr	r3, [r7, #28]
 80007f8:	330c      	adds	r3, #12
 80007fa:	61fb      	str	r3, [r7, #28]
		for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80007fc:	7e7b      	ldrb	r3, [r7, #25]
 80007fe:	3301      	adds	r3, #1
 8000800:	767b      	strb	r3, [r7, #25]
 8000802:	7e7b      	ldrb	r3, [r7, #25]
 8000804:	2b05      	cmp	r3, #5
 8000806:	d9f0      	bls.n	80007ea <YUGIOH_Clear_Card_All+0x76>
		}

		ptrYUGIOHCard = &player->CardInPlayed;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800080e:	61fb      	str	r3, [r7, #28]
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	69f9      	ldr	r1, [r7, #28]
 8000816:	4618      	mov	r0, r3
 8000818:	f7ff ff34 	bl	8000684 <YUGIOH_card_copy>
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}

08000824 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b086      	sub	sp, #24
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000832:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800083a:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000842:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800084a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800084c:	2306      	movs	r3, #6
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	e00c      	b.n	800086c <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8000852:	6939      	ldr	r1, [r7, #16]
 8000854:	6978      	ldr	r0, [r7, #20]
 8000856:	f7ff ff15 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 800085a:	697b      	ldr	r3, [r7, #20]
 800085c:	3b0c      	subs	r3, #12
 800085e:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	3b0c      	subs	r3, #12
 8000864:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	3b01      	subs	r3, #1
 800086a:	60fb      	str	r3, [r7, #12]
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2b00      	cmp	r3, #0
 8000870:	dcef      	bgt.n	8000852 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000872:	bf00      	nop
 8000874:	bf00      	nop
 8000876:	3718      	adds	r7, #24
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af04      	add	r7, sp, #16
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	3304      	adds	r3, #4
 800088a:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	3304      	adds	r3, #4
 8000890:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 8000892:	683b      	ldr	r3, [r7, #0]
 8000894:	3304      	adds	r3, #4
 8000896:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800089e:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80008a0:	683b      	ldr	r3, [r7, #0]
 80008a2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80008a6:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b02      	cmp	r3, #2
 80008ac:	f000 820b 	beq.w	8000cc6 <GAME_PLAY_Management+0x44a>
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	f300 8238 	bgt.w	8000d26 <GAME_PLAY_Management+0x4aa>
 80008b6:	2b00      	cmp	r3, #0
 80008b8:	d003      	beq.n	80008c2 <GAME_PLAY_Management+0x46>
 80008ba:	2b01      	cmp	r3, #1
 80008bc:	f000 81d3 	beq.w	8000c66 <GAME_PLAY_Management+0x3ea>
			state_game->F_flag = 0;
		}
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 80008c0:	e231      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008c2:	4baa      	ldr	r3, [pc, #680]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	9202      	str	r2, [sp, #8]
 80008c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008cc:	9201      	str	r2, [sp, #4]
 80008ce:	685a      	ldr	r2, [r3, #4]
 80008d0:	9200      	str	r2, [sp, #0]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	4aa6      	ldr	r2, [pc, #664]	; (8000b70 <GAME_PLAY_Management+0x2f4>)
 80008d6:	2105      	movs	r1, #5
 80008d8:	2005      	movs	r0, #5
 80008da:	f001 ff24 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008de:	4ba3      	ldr	r3, [pc, #652]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	9202      	str	r2, [sp, #8]
 80008e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e8:	9201      	str	r2, [sp, #4]
 80008ea:	685a      	ldr	r2, [r3, #4]
 80008ec:	9200      	str	r2, [sp, #0]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4aa0      	ldr	r2, [pc, #640]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 80008f2:	210f      	movs	r1, #15
 80008f4:	2000      	movs	r0, #0
 80008f6:	f001 ff16 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80008fa:	4b9f      	ldr	r3, [pc, #636]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	9202      	str	r2, [sp, #8]
 8000900:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000904:	9201      	str	r2, [sp, #4]
 8000906:	685a      	ldr	r2, [r3, #4]
 8000908:	9200      	str	r2, [sp, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a9b      	ldr	r2, [pc, #620]	; (8000b7c <GAME_PLAY_Management+0x300>)
 800090e:	2123      	movs	r1, #35	; 0x23
 8000910:	2008      	movs	r0, #8
 8000912:	f001 ff08 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000916:	4b98      	ldr	r3, [pc, #608]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000918:	2200      	movs	r2, #0
 800091a:	9202      	str	r2, [sp, #8]
 800091c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000920:	9201      	str	r2, [sp, #4]
 8000922:	685a      	ldr	r2, [r3, #4]
 8000924:	9200      	str	r2, [sp, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	4a95      	ldr	r2, [pc, #596]	; (8000b80 <GAME_PLAY_Management+0x304>)
 800092a:	213c      	movs	r1, #60	; 0x3c
 800092c:	2019      	movs	r0, #25
 800092e:	f001 fefa 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000932:	4b8e      	ldr	r3, [pc, #568]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000934:	2200      	movs	r2, #0
 8000936:	9202      	str	r2, [sp, #8]
 8000938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800093c:	9201      	str	r2, [sp, #4]
 800093e:	685a      	ldr	r2, [r3, #4]
 8000940:	9200      	str	r2, [sp, #0]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a8b      	ldr	r2, [pc, #556]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 8000946:	214b      	movs	r1, #75	; 0x4b
 8000948:	2000      	movs	r0, #0
 800094a:	f001 feec 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800094e:	4b87      	ldr	r3, [pc, #540]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000950:	2200      	movs	r2, #0
 8000952:	9202      	str	r2, [sp, #8]
 8000954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000958:	9201      	str	r2, [sp, #4]
 800095a:	685a      	ldr	r2, [r3, #4]
 800095c:	9200      	str	r2, [sp, #0]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a88      	ldr	r2, [pc, #544]	; (8000b84 <GAME_PLAY_Management+0x308>)
 8000962:	215a      	movs	r1, #90	; 0x5a
 8000964:	2000      	movs	r0, #0
 8000966:	f001 fede 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 800096a:	4b80      	ldr	r3, [pc, #512]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 800096c:	2200      	movs	r2, #0
 800096e:	9202      	str	r2, [sp, #8]
 8000970:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000974:	9201      	str	r2, [sp, #4]
 8000976:	685a      	ldr	r2, [r3, #4]
 8000978:	9200      	str	r2, [sp, #0]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4a82      	ldr	r2, [pc, #520]	; (8000b88 <GAME_PLAY_Management+0x30c>)
 800097e:	215a      	movs	r1, #90	; 0x5a
 8000980:	205d      	movs	r0, #93	; 0x5d
 8000982:	f001 fed0 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000986:	4b79      	ldr	r3, [pc, #484]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000988:	2200      	movs	r2, #0
 800098a:	9202      	str	r2, [sp, #8]
 800098c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000990:	9201      	str	r2, [sp, #4]
 8000992:	685a      	ldr	r2, [r3, #4]
 8000994:	9200      	str	r2, [sp, #0]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a7c      	ldr	r2, [pc, #496]	; (8000b8c <GAME_PLAY_Management+0x310>)
 800099a:	2169      	movs	r1, #105	; 0x69
 800099c:	2000      	movs	r0, #0
 800099e:	f001 fec2 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009a2:	4b72      	ldr	r3, [pc, #456]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	9202      	str	r2, [sp, #8]
 80009a8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009ac:	9201      	str	r2, [sp, #4]
 80009ae:	685a      	ldr	r2, [r3, #4]
 80009b0:	9200      	str	r2, [sp, #0]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a76      	ldr	r2, [pc, #472]	; (8000b90 <GAME_PLAY_Management+0x314>)
 80009b6:	2169      	movs	r1, #105	; 0x69
 80009b8:	2064      	movs	r0, #100	; 0x64
 80009ba:	f001 feb4 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009be:	4b6b      	ldr	r3, [pc, #428]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	9202      	str	r2, [sp, #8]
 80009c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009c8:	9201      	str	r2, [sp, #4]
 80009ca:	685a      	ldr	r2, [r3, #4]
 80009cc:	9200      	str	r2, [sp, #0]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a70      	ldr	r2, [pc, #448]	; (8000b94 <GAME_PLAY_Management+0x318>)
 80009d2:	2105      	movs	r1, #5
 80009d4:	2005      	movs	r0, #5
 80009d6:	f001 fef0 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009da:	4b64      	ldr	r3, [pc, #400]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 80009dc:	2200      	movs	r2, #0
 80009de:	9202      	str	r2, [sp, #8]
 80009e0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009e4:	9201      	str	r2, [sp, #4]
 80009e6:	685a      	ldr	r2, [r3, #4]
 80009e8:	9200      	str	r2, [sp, #0]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a61      	ldr	r2, [pc, #388]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 80009ee:	210f      	movs	r1, #15
 80009f0:	2000      	movs	r0, #0
 80009f2:	f001 fee2 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80009f6:	4b60      	ldr	r3, [pc, #384]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	9202      	str	r2, [sp, #8]
 80009fc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	685a      	ldr	r2, [r3, #4]
 8000a04:	9200      	str	r2, [sp, #0]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a5c      	ldr	r2, [pc, #368]	; (8000b7c <GAME_PLAY_Management+0x300>)
 8000a0a:	2123      	movs	r1, #35	; 0x23
 8000a0c:	2008      	movs	r0, #8
 8000a0e:	f001 fed4 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000a12:	4b59      	ldr	r3, [pc, #356]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	9202      	str	r2, [sp, #8]
 8000a18:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a1c:	9201      	str	r2, [sp, #4]
 8000a1e:	685a      	ldr	r2, [r3, #4]
 8000a20:	9200      	str	r2, [sp, #0]
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	4a56      	ldr	r2, [pc, #344]	; (8000b80 <GAME_PLAY_Management+0x304>)
 8000a26:	213c      	movs	r1, #60	; 0x3c
 8000a28:	2014      	movs	r0, #20
 8000a2a:	f001 fec6 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a2e:	4b4f      	ldr	r3, [pc, #316]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	9202      	str	r2, [sp, #8]
 8000a34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a38:	9201      	str	r2, [sp, #4]
 8000a3a:	685a      	ldr	r2, [r3, #4]
 8000a3c:	9200      	str	r2, [sp, #0]
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a4c      	ldr	r2, [pc, #304]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 8000a42:	214b      	movs	r1, #75	; 0x4b
 8000a44:	2000      	movs	r0, #0
 8000a46:	f001 feb8 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a4a:	4b48      	ldr	r3, [pc, #288]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	9202      	str	r2, [sp, #8]
 8000a50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a54:	9201      	str	r2, [sp, #4]
 8000a56:	685a      	ldr	r2, [r3, #4]
 8000a58:	9200      	str	r2, [sp, #0]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	4a49      	ldr	r2, [pc, #292]	; (8000b84 <GAME_PLAY_Management+0x308>)
 8000a5e:	215a      	movs	r1, #90	; 0x5a
 8000a60:	2000      	movs	r0, #0
 8000a62:	f001 feaa 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000a66:	4b41      	ldr	r3, [pc, #260]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	9202      	str	r2, [sp, #8]
 8000a6c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000a70:	9201      	str	r2, [sp, #4]
 8000a72:	685a      	ldr	r2, [r3, #4]
 8000a74:	9200      	str	r2, [sp, #0]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a43      	ldr	r2, [pc, #268]	; (8000b88 <GAME_PLAY_Management+0x30c>)
 8000a7a:	215a      	movs	r1, #90	; 0x5a
 8000a7c:	205d      	movs	r0, #93	; 0x5d
 8000a7e:	f001 fe9c 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a82:	4b3a      	ldr	r3, [pc, #232]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	9202      	str	r2, [sp, #8]
 8000a88:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a8c:	9201      	str	r2, [sp, #4]
 8000a8e:	685a      	ldr	r2, [r3, #4]
 8000a90:	9200      	str	r2, [sp, #0]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a3d      	ldr	r2, [pc, #244]	; (8000b8c <GAME_PLAY_Management+0x310>)
 8000a96:	2169      	movs	r1, #105	; 0x69
 8000a98:	2000      	movs	r0, #0
 8000a9a:	f001 fe8e 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000a9e:	4b33      	ldr	r3, [pc, #204]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	9202      	str	r2, [sp, #8]
 8000aa4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000aa8:	9201      	str	r2, [sp, #4]
 8000aaa:	685a      	ldr	r2, [r3, #4]
 8000aac:	9200      	str	r2, [sp, #0]
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	4a37      	ldr	r2, [pc, #220]	; (8000b90 <GAME_PLAY_Management+0x314>)
 8000ab2:	2169      	movs	r1, #105	; 0x69
 8000ab4:	2064      	movs	r0, #100	; 0x64
 8000ab6:	f001 fe80 	bl	80027ba <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000aba:	2108      	movs	r1, #8
 8000abc:	4836      	ldr	r0, [pc, #216]	; (8000b98 <GAME_PLAY_Management+0x31c>)
 8000abe:	f005 fcd9 	bl	8006474 <HAL_GPIO_ReadPin>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	f040 80c9 	bne.w	8000c5c <GAME_PLAY_Management+0x3e0>
			ptrPlayer1->life_point = 4000;
 8000aca:	697b      	ldr	r3, [r7, #20]
 8000acc:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ad0:	805a      	strh	r2, [r3, #2]
			ptrPlayer2->life_point = 4000;
 8000ad2:	693b      	ldr	r3, [r7, #16]
 8000ad4:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000ad8:	805a      	strh	r2, [r3, #2]
			ST7735_FillScreen(ST7735_BLACK);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f001 ffa0 	bl	8002a20 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000ae0:	2000      	movs	r0, #0
 8000ae2:	f001 ffae 	bl	8002a42 <ST7735_FillScreen1>
			ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000ae6:	4b21      	ldr	r3, [pc, #132]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	9202      	str	r2, [sp, #8]
 8000aec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000af0:	9201      	str	r2, [sp, #4]
 8000af2:	685a      	ldr	r2, [r3, #4]
 8000af4:	9200      	str	r2, [sp, #0]
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a1d      	ldr	r2, [pc, #116]	; (8000b70 <GAME_PLAY_Management+0x2f4>)
 8000afa:	2105      	movs	r1, #5
 8000afc:	2005      	movs	r0, #5
 8000afe:	f001 fe12 	bl	8002726 <ST7735_WriteString>
			ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b02:	4b1a      	ldr	r3, [pc, #104]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	9202      	str	r2, [sp, #8]
 8000b08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0c:	9201      	str	r2, [sp, #4]
 8000b0e:	685a      	ldr	r2, [r3, #4]
 8000b10:	9200      	str	r2, [sp, #0]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a17      	ldr	r2, [pc, #92]	; (8000b74 <GAME_PLAY_Management+0x2f8>)
 8000b16:	210f      	movs	r1, #15
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f001 fe04 	bl	8002726 <ST7735_WriteString>
			ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b1e:	4b16      	ldr	r3, [pc, #88]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	9202      	str	r2, [sp, #8]
 8000b24:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b28:	9201      	str	r2, [sp, #4]
 8000b2a:	685a      	ldr	r2, [r3, #4]
 8000b2c:	9200      	str	r2, [sp, #0]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a1a      	ldr	r2, [pc, #104]	; (8000b9c <GAME_PLAY_Management+0x320>)
 8000b32:	2123      	movs	r1, #35	; 0x23
 8000b34:	2019      	movs	r0, #25
 8000b36:	f001 fdf6 	bl	8002726 <ST7735_WriteString>
			ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b3a:	4b0f      	ldr	r3, [pc, #60]	; (8000b78 <GAME_PLAY_Management+0x2fc>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	9202      	str	r2, [sp, #8]
 8000b40:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b44:	9201      	str	r2, [sp, #4]
 8000b46:	685a      	ldr	r2, [r3, #4]
 8000b48:	9200      	str	r2, [sp, #0]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a14      	ldr	r2, [pc, #80]	; (8000ba0 <GAME_PLAY_Management+0x324>)
 8000b4e:	213c      	movs	r1, #60	; 0x3c
 8000b50:	2021      	movs	r0, #33	; 0x21
 8000b52:	f001 fde8 	bl	8002726 <ST7735_WriteString>
			ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b56:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <GAME_PLAY_Management+0x2f0>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	9202      	str	r2, [sp, #8]
 8000b5c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b60:	9201      	str	r2, [sp, #4]
 8000b62:	685a      	ldr	r2, [r3, #4]
 8000b64:	9200      	str	r2, [sp, #0]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	e01c      	b.n	8000ba4 <GAME_PLAY_Management+0x328>
 8000b6a:	bf00      	nop
 8000b6c:	24000008 	.word	0x24000008
 8000b70:	0800c028 	.word	0x0800c028
 8000b74:	0800c034 	.word	0x0800c034
 8000b78:	24000010 	.word	0x24000010
 8000b7c:	0800c048 	.word	0x0800c048
 8000b80:	0800c054 	.word	0x0800c054
 8000b84:	0800c05c 	.word	0x0800c05c
 8000b88:	0800c06c 	.word	0x0800c06c
 8000b8c:	0800c074 	.word	0x0800c074
 8000b90:	0800c084 	.word	0x0800c084
 8000b94:	0800c088 	.word	0x0800c088
 8000b98:	58020000 	.word	0x58020000
 8000b9c:	0800c094 	.word	0x0800c094
 8000ba0:	0800c09c 	.word	0x0800c09c
 8000ba4:	4a62      	ldr	r2, [pc, #392]	; (8000d30 <GAME_PLAY_Management+0x4b4>)
 8000ba6:	214b      	movs	r1, #75	; 0x4b
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f001 fdbc 	bl	8002726 <ST7735_WriteString>
			ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bae:	4b61      	ldr	r3, [pc, #388]	; (8000d34 <GAME_PLAY_Management+0x4b8>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	9202      	str	r2, [sp, #8]
 8000bb4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bb8:	9201      	str	r2, [sp, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	9200      	str	r2, [sp, #0]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a5d      	ldr	r2, [pc, #372]	; (8000d38 <GAME_PLAY_Management+0x4bc>)
 8000bc2:	2105      	movs	r1, #5
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f001 fdf8 	bl	80027ba <ST7735_WriteString1>
			ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000bca:	4b5a      	ldr	r3, [pc, #360]	; (8000d34 <GAME_PLAY_Management+0x4b8>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	9202      	str	r2, [sp, #8]
 8000bd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bd4:	9201      	str	r2, [sp, #4]
 8000bd6:	685a      	ldr	r2, [r3, #4]
 8000bd8:	9200      	str	r2, [sp, #0]
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a54      	ldr	r2, [pc, #336]	; (8000d30 <GAME_PLAY_Management+0x4b4>)
 8000bde:	210f      	movs	r1, #15
 8000be0:	2000      	movs	r0, #0
 8000be2:	f001 fdea 	bl	80027ba <ST7735_WriteString1>
			ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	9202      	str	r2, [sp, #8]
 8000bec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000bf0:	9201      	str	r2, [sp, #4]
 8000bf2:	685a      	ldr	r2, [r3, #4]
 8000bf4:	9200      	str	r2, [sp, #0]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a51      	ldr	r2, [pc, #324]	; (8000d40 <GAME_PLAY_Management+0x4c4>)
 8000bfa:	2123      	movs	r1, #35	; 0x23
 8000bfc:	2019      	movs	r0, #25
 8000bfe:	f001 fddc 	bl	80027ba <ST7735_WriteString1>
			ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000c02:	4b4e      	ldr	r3, [pc, #312]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	9202      	str	r2, [sp, #8]
 8000c08:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000c0c:	9201      	str	r2, [sp, #4]
 8000c0e:	685a      	ldr	r2, [r3, #4]
 8000c10:	9200      	str	r2, [sp, #0]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a4b      	ldr	r2, [pc, #300]	; (8000d44 <GAME_PLAY_Management+0x4c8>)
 8000c16:	213c      	movs	r1, #60	; 0x3c
 8000c18:	2025      	movs	r0, #37	; 0x25
 8000c1a:	f001 fdce 	bl	80027ba <ST7735_WriteString1>
			ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000c1e:	4b45      	ldr	r3, [pc, #276]	; (8000d34 <GAME_PLAY_Management+0x4b8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	9202      	str	r2, [sp, #8]
 8000c24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c28:	9201      	str	r2, [sp, #4]
 8000c2a:	685a      	ldr	r2, [r3, #4]
 8000c2c:	9200      	str	r2, [sp, #0]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a3f      	ldr	r2, [pc, #252]	; (8000d30 <GAME_PLAY_Management+0x4b4>)
 8000c32:	214b      	movs	r1, #75	; 0x4b
 8000c34:	2000      	movs	r0, #0
 8000c36:	f001 fdc0 	bl	80027ba <ST7735_WriteString1>
			HAL_Delay(3000);
 8000c3a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000c3e:	f002 facb 	bl	80031d8 <HAL_Delay>
			ST7735_FillScreen(ST7735_BLACK);
 8000c42:	2000      	movs	r0, #0
 8000c44:	f001 feec 	bl	8002a20 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000c48:	2000      	movs	r0, #0
 8000c4a:	f001 fefa 	bl	8002a42 <ST7735_FillScreen1>
			MainGUI();
 8000c4e:	f000 fee9 	bl	8001a24 <MainGUI>
			state_game->player_state = first_player;
 8000c52:	683b      	ldr	r3, [r7, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000c5a:	e064      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
			state_game->test = 98;
 8000c5c:	683b      	ldr	r3, [r7, #0]
 8000c5e:	2262      	movs	r2, #98	; 0x62
 8000c60:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 8000c64:	e05f      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
		if (state_game -> F_flag == 0){
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d125      	bne.n	8000cbc <GAME_PLAY_Management+0x440>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000c70:	4b32      	ldr	r3, [pc, #200]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	9202      	str	r2, [sp, #8]
 8000c76:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c7a:	9201      	str	r2, [sp, #4]
 8000c7c:	685a      	ldr	r2, [r3, #4]
 8000c7e:	9200      	str	r2, [sp, #0]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4a31      	ldr	r2, [pc, #196]	; (8000d48 <GAME_PLAY_Management+0x4cc>)
 8000c84:	215a      	movs	r1, #90	; 0x5a
 8000c86:	200f      	movs	r0, #15
 8000c88:	f001 fd97 	bl	80027ba <ST7735_WriteString1>
			HAL_Delay(2000);
 8000c8c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c90:	f002 faa2 	bl	80031d8 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000c94:	2300      	movs	r3, #0
 8000c96:	9300      	str	r3, [sp, #0]
 8000c98:	2326      	movs	r3, #38	; 0x26
 8000c9a:	2280      	movs	r2, #128	; 0x80
 8000c9c:	215a      	movs	r1, #90	; 0x5a
 8000c9e:	2000      	movs	r0, #0
 8000ca0:	f001 fe4a 	bl	8002938 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000caa:	3301      	adds	r3, #1
 8000cac:	b2da      	uxtb	r2, r3
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
			state_game->S_flag = 0;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000cbc:	6839      	ldr	r1, [r7, #0]
 8000cbe:	6878      	ldr	r0, [r7, #4]
 8000cc0:	f000 f844 	bl	8000d4c <GAME_PLAY_Phase_Management>
		break;
 8000cc4:	e02f      	b.n	8000d26 <GAME_PLAY_Management+0x4aa>
		if (state_game -> S_flag == 0){
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d125      	bne.n	8000d1c <GAME_PLAY_Management+0x4a0>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000cd0:	4b1a      	ldr	r3, [pc, #104]	; (8000d3c <GAME_PLAY_Management+0x4c0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	9202      	str	r2, [sp, #8]
 8000cd6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000cda:	9201      	str	r2, [sp, #4]
 8000cdc:	685a      	ldr	r2, [r3, #4]
 8000cde:	9200      	str	r2, [sp, #0]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a19      	ldr	r2, [pc, #100]	; (8000d48 <GAME_PLAY_Management+0x4cc>)
 8000ce4:	215a      	movs	r1, #90	; 0x5a
 8000ce6:	200f      	movs	r0, #15
 8000ce8:	f001 fd1d 	bl	8002726 <ST7735_WriteString>
			HAL_Delay(2000);
 8000cec:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000cf0:	f002 fa72 	bl	80031d8 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	9300      	str	r3, [sp, #0]
 8000cf8:	2326      	movs	r3, #38	; 0x26
 8000cfa:	2280      	movs	r2, #128	; 0x80
 8000cfc:	215a      	movs	r1, #90	; 0x5a
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f001 fda6 	bl	8002850 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	b2da      	uxtb	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
			state_game->F_flag = 0;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000d1c:	6839      	ldr	r1, [r7, #0]
 8000d1e:	6878      	ldr	r0, [r7, #4]
 8000d20:	f000 f814 	bl	8000d4c <GAME_PLAY_Phase_Management>
		break;
 8000d24:	bf00      	nop
}
 8000d26:	bf00      	nop
 8000d28:	3718      	adds	r7, #24
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	0800c034 	.word	0x0800c034
 8000d34:	24000008 	.word	0x24000008
 8000d38:	0800c088 	.word	0x0800c088
 8000d3c:	24000010 	.word	0x24000010
 8000d40:	0800c094 	.word	0x0800c094
 8000d44:	0800c0a4 	.word	0x0800c0a4
 8000d48:	0800c0ac 	.word	0x0800c0ac

08000d4c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b090      	sub	sp, #64	; 0x40
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Winner
	} STATE;
	STATE = state_game->STATE;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8000d5c:	763b      	strb	r3, [r7, #24]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8000d64:	75fb      	strb	r3, [r7, #23]

    enum _BATTLE {
    	selection, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
    } BATTLE;
    BATTLE = state_game->BATTLE;
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8000d6c:	75bb      	strb	r3, [r7, #22]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	3304      	adds	r3, #4
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
	Player *ptrPlayerDef = state_game->player;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	3304      	adds	r3, #4
 8000d78:	62bb      	str	r3, [r7, #40]	; 0x28

	if (state_game->player_state == first_player) {
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d107      	bne.n	8000d94 <GAME_PLAY_Phase_Management+0x48>
		ptrPlayerAtk = &state_game->player[0];
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	3304      	adds	r3, #4
 8000d88:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[1];
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8000d92:	e00b      	b.n	8000dac <GAME_PLAY_Phase_Management+0x60>
	} else if (state_game->player_state == second_player) {
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000d9a:	2b02      	cmp	r3, #2
 8000d9c:	d106      	bne.n	8000dac <GAME_PLAY_Phase_Management+0x60>
		ptrPlayerAtk = &state_game->player[1];
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000da4:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[0];
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	3304      	adds	r3, #4
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000dac:	7e3b      	ldrb	r3, [r7, #24]
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	f200 855b 	bhi.w	800186a <GAME_PLAY_Phase_Management+0xb1e>
 8000db4:	a201      	add	r2, pc, #4	; (adr r2, 8000dbc <GAME_PLAY_Phase_Management+0x70>)
 8000db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dba:	bf00      	nop
 8000dbc:	08000dcd 	.word	0x08000dcd
 8000dc0:	08000efb 	.word	0x08000efb
 8000dc4:	0800148f 	.word	0x0800148f
 8000dc8:	08001835 	.word	0x08001835
	case Drawn_Phase:
		//		ST7735_FillScreen(ST7735_BLACK);
		//		ST7735_FillScreen1(ST7735_BLACK);
		//		// MAIN display for draw phase state
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000dcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dce:	885b      	ldrh	r3, [r3, #2]
 8000dd0:	461a      	mov	r2, r3
 8000dd2:	49a5      	ldr	r1, [pc, #660]	; (8001068 <GAME_PLAY_Phase_Management+0x31c>)
 8000dd4:	48a5      	ldr	r0, [pc, #660]	; (800106c <GAME_PLAY_Phase_Management+0x320>)
 8000dd6:	f00a fd9d 	bl	800b914 <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000dda:	4ba5      	ldr	r3, [pc, #660]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	9202      	str	r2, [sp, #8]
 8000de0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000de4:	9201      	str	r2, [sp, #4]
 8000de6:	685a      	ldr	r2, [r3, #4]
 8000de8:	9200      	str	r2, [sp, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4a9f      	ldr	r2, [pc, #636]	; (800106c <GAME_PLAY_Phase_Management+0x320>)
 8000dee:	2114      	movs	r1, #20
 8000df0:	205a      	movs	r0, #90	; 0x5a
 8000df2:	f001 fc98 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000df6:	4b9e      	ldr	r3, [pc, #632]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	9202      	str	r2, [sp, #8]
 8000dfc:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e00:	9201      	str	r2, [sp, #4]
 8000e02:	685a      	ldr	r2, [r3, #4]
 8000e04:	9200      	str	r2, [sp, #0]
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a9a      	ldr	r2, [pc, #616]	; (8001074 <GAME_PLAY_Phase_Management+0x328>)
 8000e0a:	2123      	movs	r1, #35	; 0x23
 8000e0c:	203c      	movs	r0, #60	; 0x3c
 8000e0e:	f001 fc8a 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e12:	4b97      	ldr	r3, [pc, #604]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	9202      	str	r2, [sp, #8]
 8000e18:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	685a      	ldr	r2, [r3, #4]
 8000e20:	9200      	str	r2, [sp, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a94      	ldr	r2, [pc, #592]	; (8001078 <GAME_PLAY_Phase_Management+0x32c>)
 8000e26:	2132      	movs	r1, #50	; 0x32
 8000e28:	2069      	movs	r0, #105	; 0x69
 8000e2a:	f001 fc7c 	bl	8002726 <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000e2e:	4b90      	ldr	r3, [pc, #576]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	9202      	str	r2, [sp, #8]
 8000e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e38:	9201      	str	r2, [sp, #4]
 8000e3a:	685a      	ldr	r2, [r3, #4]
 8000e3c:	9200      	str	r2, [sp, #0]
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	4a8e      	ldr	r2, [pc, #568]	; (800107c <GAME_PLAY_Phase_Management+0x330>)
 8000e42:	215a      	movs	r1, #90	; 0x5a
 8000e44:	2005      	movs	r0, #5
 8000e46:	f001 fc6e 	bl	8002726 <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e4c:	885b      	ldrh	r3, [r3, #2]
 8000e4e:	461a      	mov	r2, r3
 8000e50:	4985      	ldr	r1, [pc, #532]	; (8001068 <GAME_PLAY_Phase_Management+0x31c>)
 8000e52:	488b      	ldr	r0, [pc, #556]	; (8001080 <GAME_PLAY_Phase_Management+0x334>)
 8000e54:	f00a fd5e 	bl	800b914 <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e58:	4b85      	ldr	r3, [pc, #532]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	9202      	str	r2, [sp, #8]
 8000e5e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e62:	9201      	str	r2, [sp, #4]
 8000e64:	685a      	ldr	r2, [r3, #4]
 8000e66:	9200      	str	r2, [sp, #0]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a85      	ldr	r2, [pc, #532]	; (8001080 <GAME_PLAY_Phase_Management+0x334>)
 8000e6c:	2114      	movs	r1, #20
 8000e6e:	205a      	movs	r0, #90	; 0x5a
 8000e70:	f001 fca3 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000e74:	4b7e      	ldr	r3, [pc, #504]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	9202      	str	r2, [sp, #8]
 8000e7a:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000e7e:	9201      	str	r2, [sp, #4]
 8000e80:	685a      	ldr	r2, [r3, #4]
 8000e82:	9200      	str	r2, [sp, #0]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a7b      	ldr	r2, [pc, #492]	; (8001074 <GAME_PLAY_Phase_Management+0x328>)
 8000e88:	2123      	movs	r1, #35	; 0x23
 8000e8a:	203c      	movs	r0, #60	; 0x3c
 8000e8c:	f001 fc95 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000e90:	4b77      	ldr	r3, [pc, #476]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	9202      	str	r2, [sp, #8]
 8000e96:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000e9a:	9201      	str	r2, [sp, #4]
 8000e9c:	685a      	ldr	r2, [r3, #4]
 8000e9e:	9200      	str	r2, [sp, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a75      	ldr	r2, [pc, #468]	; (8001078 <GAME_PLAY_Phase_Management+0x32c>)
 8000ea4:	2132      	movs	r1, #50	; 0x32
 8000ea6:	2069      	movs	r0, #105	; 0x69
 8000ea8:	f001 fc87 	bl	80027ba <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000eac:	4b70      	ldr	r3, [pc, #448]	; (8001070 <GAME_PLAY_Phase_Management+0x324>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	9202      	str	r2, [sp, #8]
 8000eb2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000eb6:	9201      	str	r2, [sp, #4]
 8000eb8:	685a      	ldr	r2, [r3, #4]
 8000eba:	9200      	str	r2, [sp, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	4a71      	ldr	r2, [pc, #452]	; (8001084 <GAME_PLAY_Phase_Management+0x338>)
 8000ec0:	215a      	movs	r1, #90	; 0x5a
 8000ec2:	2005      	movs	r0, #5
 8000ec4:	f001 fc79 	bl	80027ba <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000ec8:	2101      	movs	r1, #1
 8000eca:	486f      	ldr	r0, [pc, #444]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000ecc:	f005 fad2 	bl	8006474 <HAL_GPIO_ReadPin>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	f040 84c4 	bne.w	8001860 <GAME_PLAY_Phase_Management+0xb14>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	2201      	movs	r2, #1
 8000edc:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	2200      	movs	r2, #0
 8000eec:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000eee:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000ef2:	f002 f971 	bl	80031d8 <HAL_Delay>
		}
		break;
 8000ef6:	f000 bcb3 	b.w	8001860 <GAME_PLAY_Phase_Management+0xb14>
	case Main_Phase:

		switch (MAIN)
 8000efa:	7dfb      	ldrb	r3, [r7, #23]
 8000efc:	2b06      	cmp	r3, #6
 8000efe:	f200 84b1 	bhi.w	8001864 <GAME_PLAY_Phase_Management+0xb18>
 8000f02:	a201      	add	r2, pc, #4	; (adr r2, 8000f08 <GAME_PLAY_Phase_Management+0x1bc>)
 8000f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f08:	08000f25 	.word	0x08000f25
 8000f0c:	08000f71 	.word	0x08000f71
 8000f10:	08001095 	.word	0x08001095
 8000f14:	08001225 	.word	0x08001225
 8000f18:	080013e9 	.word	0x080013e9
 8000f1c:	0800139b 	.word	0x0800139b
 8000f20:	0800132d 	.word	0x0800132d
		{
		case await:
			if (state_game->action == 0)
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d117      	bne.n	8000f5c <GAME_PLAY_Phase_Management+0x210>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	4856      	ldr	r0, [pc, #344]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000f30:	f005 faa0 	bl	8006474 <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d10a      	bne.n	8000f50 <GAME_PLAY_Phase_Management+0x204>
						== GPIO_PIN_RESET){
					state_game->action =50;
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	2232      	movs	r2, #50	; 0x32
 8000f3e:	701a      	strb	r2, [r3, #0]
					state_game->STATE = Battle_Phase;
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	2202      	movs	r2, #2
 8000f44:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
					HAL_Delay(1500);
 8000f48:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000f4c:	f002 f944 	bl	80031d8 <HAL_Delay>
				}
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f52:	6839      	ldr	r1, [r7, #0]
 8000f54:	6878      	ldr	r0, [r7, #4]
 8000f56:	f000 fc91 	bl	800187c <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000f5a:	e28a      	b.n	8001472 <GAME_PLAY_Phase_Management+0x726>
			else if (state_game->action == 1)
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	2b01      	cmp	r3, #1
 8000f62:	f040 8286 	bne.w	8001472 <GAME_PLAY_Phase_Management+0x726>
				state_game->MAIN = select_position;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2201      	movs	r2, #1
 8000f6a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000f6e:	e280      	b.n	8001472 <GAME_PLAY_Phase_Management+0x726>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f72:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000f76:	613b      	str	r3, [r7, #16]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000f7e:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	2b01      	cmp	r3, #1
 8000f86:	d15e      	bne.n	8001046 <GAME_PLAY_Phase_Management+0x2fa>
			{
				if (state_game->player_state == first_player)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d135      	bne.n	8000ffe <GAME_PLAY_Phase_Management+0x2b2>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000f92:	2108      	movs	r1, #8
 8000f94:	483c      	ldr	r0, [pc, #240]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000f96:	f005 fa6d 	bl	8006474 <HAL_GPIO_ReadPin>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d106      	bne.n	8000fae <GAME_PLAY_Phase_Management+0x262>
					{
						ptrYugiohCard_src->cardState = 1;
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000fac:	e263      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000fae:	2102      	movs	r1, #2
 8000fb0:	4836      	ldr	r0, [pc, #216]	; (800108c <GAME_PLAY_Phase_Management+0x340>)
 8000fb2:	f005 fa5f 	bl	8006474 <HAL_GPIO_ReadPin>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d106      	bne.n	8000fca <GAME_PLAY_Phase_Management+0x27e>
						ptrYugiohCard_src->cardState = 0;
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	2202      	movs	r2, #2
 8000fc6:	701a      	strb	r2, [r3, #0]
			break;
 8000fc8:	e255      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000fca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000fce:	4830      	ldr	r0, [pc, #192]	; (8001090 <GAME_PLAY_Phase_Management+0x344>)
 8000fd0:	f005 fa50 	bl	8006474 <HAL_GPIO_ReadPin>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d104      	bne.n	8000fe4 <GAME_PLAY_Phase_Management+0x298>
						state_game->test = 22;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	2216      	movs	r2, #22
 8000fde:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000fe2:	e248      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000fe4:	2104      	movs	r1, #4
 8000fe6:	4828      	ldr	r0, [pc, #160]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 8000fe8:	f005 fa44 	bl	8006474 <HAL_GPIO_ReadPin>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	f040 8241 	bne.w	8001476 <GAME_PLAY_Phase_Management+0x72a>
						state_game->test = 33;
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	2221      	movs	r2, #33	; 0x21
 8000ff8:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000ffc:	e23b      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
				else if (state_game->player_state == second_player)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8001004:	2b02      	cmp	r3, #2
 8001006:	f040 8236 	bne.w	8001476 <GAME_PLAY_Phase_Management+0x72a>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 800100a:	2104      	movs	r1, #4
 800100c:	481e      	ldr	r0, [pc, #120]	; (8001088 <GAME_PLAY_Phase_Management+0x33c>)
 800100e:	f005 fa31 	bl	8006474 <HAL_GPIO_ReadPin>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d106      	bne.n	8001026 <GAME_PLAY_Phase_Management+0x2da>
						ptrYugiohCard_src->cardState = 1;
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	2201      	movs	r2, #1
 800101c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	2202      	movs	r2, #2
 8001022:	701a      	strb	r2, [r3, #0]
			break;
 8001024:	e227      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8001026:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800102a:	4819      	ldr	r0, [pc, #100]	; (8001090 <GAME_PLAY_Phase_Management+0x344>)
 800102c:	f005 fa22 	bl	8006474 <HAL_GPIO_ReadPin>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	f040 821f 	bne.w	8001476 <GAME_PLAY_Phase_Management+0x72a>
						ptrYugiohCard_src->cardState = 0;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2200      	movs	r2, #0
 800103c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	2202      	movs	r2, #2
 8001042:	701a      	strb	r2, [r3, #0]
			break;
 8001044:	e217      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
			else if (state_game->action == 2)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	2b02      	cmp	r3, #2
 800104c:	f040 8213 	bne.w	8001476 <GAME_PLAY_Phase_Management+0x72a>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001052:	6938      	ldr	r0, [r7, #16]
 8001054:	f7ff fb16 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	2203      	movs	r2, #3
 800105c:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	2202      	movs	r2, #2
 8001062:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001066:	e206      	b.n	8001476 <GAME_PLAY_Phase_Management+0x72a>
 8001068:	0800c0b8 	.word	0x0800c0b8
 800106c:	24000164 	.word	0x24000164
 8001070:	24000008 	.word	0x24000008
 8001074:	0800c0bc 	.word	0x0800c0bc
 8001078:	0800c084 	.word	0x0800c084
 800107c:	0800c0c8 	.word	0x0800c0c8
 8001080:	24000160 	.word	0x24000160
 8001084:	0800c0d8 	.word	0x0800c0d8
 8001088:	58020800 	.word	0x58020800
 800108c:	58020400 	.word	0x58020400
 8001090:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8001094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001096:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800109a:	613b      	str	r3, [r7, #16]

			if (state_game->action == 3)
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b03      	cmp	r3, #3
 80010a2:	f040 81ea 	bne.w	800147a <GAME_PLAY_Phase_Management+0x72e>
			{
				if (ptrYugiohCard_src->cardType == 3)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	785b      	ldrb	r3, [r3, #1]
 80010aa:	2b03      	cmp	r3, #3
 80010ac:	d12a      	bne.n	8001104 <GAME_PLAY_Phase_Management+0x3b8>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	799a      	ldrb	r2, [r3, #6]
 80010b2:	4bae      	ldr	r3, [pc, #696]	; (800136c <GAME_PLAY_Phase_Management+0x620>)
 80010b4:	fba3 1302 	umull	r1, r3, r3, r2
 80010b8:	0899      	lsrs	r1, r3, #2
 80010ba:	460b      	mov	r3, r1
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	440b      	add	r3, r1
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	1ad3      	subs	r3, r2, r3
 80010c4:	723b      	strb	r3, [r7, #8]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80010c6:	7a3a      	ldrb	r2, [r7, #8]
 80010c8:	4613      	mov	r3, r2
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	4413      	add	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010d2:	4413      	add	r3, r2
 80010d4:	3304      	adds	r3, #4
 80010d6:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80010d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010da:	6938      	ldr	r0, [r7, #16]
 80010dc:	f7ff fad2 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80010e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010e2:	f7ff fb22 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80010e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010e8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80010ec:	6939      	ldr	r1, [r7, #16]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f7ff fac8 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	2200      	movs	r2, #0
 80010fe:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8001102:	e1ba      	b.n	800147a <GAME_PLAY_Phase_Management+0x72e>
				else if (ptrYugiohCard_src->cardType == 2)
 8001104:	693b      	ldr	r3, [r7, #16]
 8001106:	785b      	ldrb	r3, [r3, #1]
 8001108:	2b02      	cmp	r3, #2
 800110a:	d144      	bne.n	8001196 <GAME_PLAY_Phase_Management+0x44a>
					state_game->count_chain = 1;
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	2201      	movs	r2, #1
 8001110:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->standPosition == 1){
 8001112:	693b      	ldr	r3, [r7, #16]
 8001114:	799b      	ldrb	r3, [r3, #6]
 8001116:	2b01      	cmp	r3, #1
 8001118:	d112      	bne.n	8001140 <GAME_PLAY_Phase_Management+0x3f4>
						state_game->test = 33;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	2221      	movs	r2, #33	; 0x21
 800111e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001122:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001124:	f7ff fb01 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	2204      	movs	r2, #4
 800112c:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 800112e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001130:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001134:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->MAIN = chaining_main_DEF;
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	2206      	movs	r2, #6
 800113a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800113e:	e19c      	b.n	800147a <GAME_PLAY_Phase_Management+0x72e>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	799a      	ldrb	r2, [r3, #6]
 8001144:	4b89      	ldr	r3, [pc, #548]	; (800136c <GAME_PLAY_Phase_Management+0x620>)
 8001146:	fba3 1302 	umull	r1, r3, r3, r2
 800114a:	0899      	lsrs	r1, r3, #2
 800114c:	460b      	mov	r3, r1
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	440b      	add	r3, r1
 8001152:	005b      	lsls	r3, r3, #1
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	727b      	strb	r3, [r7, #9]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001158:	7a7a      	ldrb	r2, [r7, #9]
 800115a:	4613      	mov	r3, r2
 800115c:	005b      	lsls	r3, r3, #1
 800115e:	4413      	add	r3, r2
 8001160:	009b      	lsls	r3, r3, #2
 8001162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001164:	4413      	add	r3, r2
 8001166:	3304      	adds	r3, #4
 8001168:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800116a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800116c:	6938      	ldr	r0, [r7, #16]
 800116e:	f7ff fa89 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001172:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001174:	f7ff fad9 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001178:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	4618      	mov	r0, r3
 8001182:	f7ff fa7f 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	2200      	movs	r2, #0
 800118a:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	2200      	movs	r2, #0
 8001190:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001194:	e171      	b.n	800147a <GAME_PLAY_Phase_Management+0x72e>
				else if (ptrYugiohCard_src->cardType == 1)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	785b      	ldrb	r3, [r3, #1]
 800119a:	2b01      	cmp	r3, #1
 800119c:	f040 816d 	bne.w	800147a <GAME_PLAY_Phase_Management+0x72e>
					state_game->test = 2;
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	2202      	movs	r2, #2
 80011a4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if (ptrYugiohCard_src->cardLevel < 7)
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	78db      	ldrb	r3, [r3, #3]
 80011ac:	2b06      	cmp	r3, #6
 80011ae:	d82e      	bhi.n	800120e <GAME_PLAY_Phase_Management+0x4c2>
						state_game->test = 1;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2201      	movs	r2, #1
 80011b4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	799a      	ldrb	r2, [r3, #6]
 80011bc:	4b6b      	ldr	r3, [pc, #428]	; (800136c <GAME_PLAY_Phase_Management+0x620>)
 80011be:	fba3 1302 	umull	r1, r3, r3, r2
 80011c2:	0899      	lsrs	r1, r3, #2
 80011c4:	460b      	mov	r3, r1
 80011c6:	005b      	lsls	r3, r3, #1
 80011c8:	440b      	add	r3, r1
 80011ca:	005b      	lsls	r3, r3, #1
 80011cc:	1ad3      	subs	r3, r2, r3
 80011ce:	72bb      	strb	r3, [r7, #10]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80011d0:	7aba      	ldrb	r2, [r7, #10]
 80011d2:	4613      	mov	r3, r2
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	4413      	add	r3, r2
 80011d8:	009b      	lsls	r3, r3, #2
 80011da:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011dc:	4413      	add	r3, r2
 80011de:	3304      	adds	r3, #4
 80011e0:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80011e4:	6938      	ldr	r0, [r7, #16]
 80011e6:	f7ff fa4d 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80011ea:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80011ec:	f7ff fa9d 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80011f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80011f6:	6939      	ldr	r1, [r7, #16]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fa43 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800120c:	e135      	b.n	800147a <GAME_PLAY_Phase_Management+0x72e>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800120e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001210:	f7ff fa8b 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	2204      	movs	r2, #4
 8001218:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	2203      	movs	r2, #3
 800121e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001222:	e12a      	b.n	800147a <GAME_PLAY_Phase_Management+0x72e>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800122a:	613b      	str	r3, [r7, #16]

			if (state_game->action == 4)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	2b04      	cmp	r3, #4
 8001232:	d105      	bne.n	8001240 <GAME_PLAY_Phase_Management+0x4f4>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001234:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001236:	6839      	ldr	r1, [r7, #0]
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fb1f 	bl	800187c <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
				}
			}
				break;
 800123e:	e11e      	b.n	800147e <GAME_PLAY_Phase_Management+0x732>
			else if (state_game->action == 5)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b05      	cmp	r3, #5
 8001246:	d105      	bne.n	8001254 <GAME_PLAY_Phase_Management+0x508>
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800124a:	6839      	ldr	r1, [r7, #0]
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f000 fb15 	bl	800187c <Player_Reading_Card>
				break;
 8001252:	e114      	b.n	800147e <GAME_PLAY_Phase_Management+0x732>
			else if (state_game->action == 6)
 8001254:	683b      	ldr	r3, [r7, #0]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	2b06      	cmp	r3, #6
 800125a:	f040 8110 	bne.w	800147e <GAME_PLAY_Phase_Management+0x732>
				uint8_t monsterflag = 0 ;
 800125e:	2300      	movs	r3, #0
 8001260:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8001264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001266:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800126c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800126e:	78db      	ldrb	r3, [r3, #3]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d804      	bhi.n	800127e <GAME_PLAY_Phase_Management+0x532>
					monsterflag += 1;
 8001274:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001278:	3301      	adds	r3, #1
 800127a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst++;
 800127e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001280:	330c      	adds	r3, #12
 8001282:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	78db      	ldrb	r3, [r3, #3]
 8001288:	2b04      	cmp	r3, #4
 800128a:	d804      	bhi.n	8001296 <GAME_PLAY_Phase_Management+0x54a>
					monsterflag += 1;
 800128c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001290:	3301      	adds	r3, #1
 8001292:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (monsterflag == 2)
 8001296:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800129a:	2b02      	cmp	r3, #2
 800129c:	d138      	bne.n	8001310 <GAME_PLAY_Phase_Management+0x5c4>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	799a      	ldrb	r2, [r3, #6]
 80012a2:	4b32      	ldr	r3, [pc, #200]	; (800136c <GAME_PLAY_Phase_Management+0x620>)
 80012a4:	fba3 1302 	umull	r1, r3, r3, r2
 80012a8:	0899      	lsrs	r1, r3, #2
 80012aa:	460b      	mov	r3, r1
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	440b      	add	r3, r1
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	1ad3      	subs	r3, r2, r3
 80012b4:	72fb      	strb	r3, [r7, #11]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80012b6:	7afa      	ldrb	r2, [r7, #11]
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c2:	4413      	add	r3, r2
 80012c4:	3304      	adds	r3, #4
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80012c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80012ca:	6938      	ldr	r0, [r7, #16]
 80012cc:	f7ff f9da 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[0]);
 80012d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80012d6:	4619      	mov	r1, r3
 80012d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012da:	f000 fb63 	bl	80019a4 <YUGIOH_To_GY>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[1]);
 80012de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e0:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 80012e4:	4619      	mov	r1, r3
 80012e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012e8:	f000 fb5c 	bl	80019a4 <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80012ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80012ee:	f7ff fa1c 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80012f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80012f8:	6939      	ldr	r1, [r7, #16]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff f9c2 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	2200      	movs	r2, #0
 8001304:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	2200      	movs	r2, #0
 800130a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				break;
 800130e:	e0b6      	b.n	800147e <GAME_PLAY_Phase_Management+0x732>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001310:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001312:	f7ff fa0a 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 8001316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001318:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800131c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800131e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001322:	4619      	mov	r1, r3
 8001324:	4610      	mov	r0, r2
 8001326:	f7ff f9ad 	bl	8000684 <YUGIOH_card_copy>
				break;
 800132a:	e0a8      	b.n	800147e <GAME_PLAY_Phase_Management+0x732>
		case chaining_main_DEF:
			state_game->test = 34;
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2222      	movs	r2, #34	; 0x22
 8001330:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	2b04      	cmp	r3, #4
 800133a:	d11b      	bne.n	8001374 <GAME_PLAY_Phase_Management+0x628>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 800133c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800133e:	6839      	ldr	r1, [r7, #0]
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f000 fa9b 	bl	800187c <Player_Reading_Card>
				state_game->test = 35;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	2223      	movs	r2, #35	; 0x23
 800134a:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 800134e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <GAME_PLAY_Phase_Management+0x624>)
 8001354:	f005 f88e 	bl	8006474 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8091 	bne.w	8001482 <GAME_PLAY_Phase_Management+0x736>
					state_game->MAIN = activate_effect;
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	2204      	movs	r2, #4
 8001364:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 8001368:	e08b      	b.n	8001482 <GAME_PLAY_Phase_Management+0x736>
 800136a:	bf00      	nop
 800136c:	aaaaaaab 	.word	0xaaaaaaab
 8001370:	58021400 	.word	0x58021400
			else if ((state_game->action == 5 )){
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b05      	cmp	r3, #5
 800137a:	f040 8082 	bne.w	8001482 <GAME_PLAY_Phase_Management+0x736>
				state_game->count_chain += 1;
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	785b      	ldrb	r3, [r3, #1]
 8001382:	3301      	adds	r3, #1
 8001384:	b2da      	uxtb	r2, r3
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	2205      	movs	r2, #5
 800138e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 8001392:	683b      	ldr	r3, [r7, #0]
 8001394:	2204      	movs	r2, #4
 8001396:	701a      	strb	r2, [r3, #0]
			break;
 8001398:	e073      	b.n	8001482 <GAME_PLAY_Phase_Management+0x736>
		case chaining_main_ATK:
			if(state_game->action == 4)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	2b04      	cmp	r3, #4
 80013a0:	d110      	bne.n	80013c4 <GAME_PLAY_Phase_Management+0x678>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80013a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80013a4:	6839      	ldr	r1, [r7, #0]
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f000 fa68 	bl	800187c <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 80013ac:	2102      	movs	r1, #2
 80013ae:	48a0      	ldr	r0, [pc, #640]	; (8001630 <GAME_PLAY_Phase_Management+0x8e4>)
 80013b0:	f005 f860 	bl	8006474 <HAL_GPIO_ReadPin>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d165      	bne.n	8001486 <GAME_PLAY_Phase_Management+0x73a>
					state_game->MAIN = activate_effect;
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	2204      	movs	r2, #4
 80013be:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 80013c2:	e060      	b.n	8001486 <GAME_PLAY_Phase_Management+0x73a>
			else if ((state_game->action == 5 )){
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b05      	cmp	r3, #5
 80013ca:	d15c      	bne.n	8001486 <GAME_PLAY_Phase_Management+0x73a>
				state_game->count_chain += 1;
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	785b      	ldrb	r3, [r3, #1]
 80013d0:	3301      	adds	r3, #1
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	2206      	movs	r2, #6
 80013dc:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	2204      	movs	r2, #4
 80013e4:	701a      	strb	r2, [r3, #0]
			break;
 80013e6:	e04e      	b.n	8001486 <GAME_PLAY_Phase_Management+0x73a>
		case activate_effect:
			ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 80013e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013ea:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013ee:	627b      	str	r3, [r7, #36]	; 0x24
			if(state_game->count_chain%2 == 0){
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	785b      	ldrb	r3, [r3, #1]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d145      	bne.n	800148a <GAME_PLAY_Phase_Management+0x73e>
				uint8_t counthing = state_game->count_chain;
 80013fe:	683b      	ldr	r3, [r7, #0]
 8001400:	785b      	ldrb	r3, [r3, #1]
 8001402:	733b      	strb	r3, [r7, #12]
				for (int i = 0; i <= counthing; i++) {
 8001404:	2300      	movs	r3, #0
 8001406:	61fb      	str	r3, [r7, #28]
 8001408:	e01d      	b.n	8001446 <GAME_PLAY_Phase_Management+0x6fa>
					if(ptrYugiohCard_dst->cardSignature == 11){
 800140a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800140c:	781b      	ldrb	r3, [r3, #0]
 800140e:	2b0b      	cmp	r3, #11
 8001410:	d107      	bne.n	8001422 <GAME_PLAY_Phase_Management+0x6d6>
						state_game->test = 11;
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	220b      	movs	r2, #11
 8001416:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(ptrPlayerAtk);
 800141a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800141c:	f000 fa67 	bl	80018ee <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
 8001420:	e00b      	b.n	800143a <GAME_PLAY_Phase_Management+0x6ee>
					}
					else if(ptrYugiohCard_dst->cardSignature == 12){
 8001422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b0c      	cmp	r3, #12
 8001428:	d107      	bne.n	800143a <GAME_PLAY_Phase_Management+0x6ee>
						state_game->test = 12;
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	220c      	movs	r2, #12
 800142e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(ptrPlayerAtk,ptrPlayerDef);
 8001432:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001434:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001436:	f000 fa7e 	bl	8001936 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
					}
					//					else if()
					ptrYugiohCard_dst++;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	330c      	adds	r3, #12
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i <= counthing; i++) {
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3301      	adds	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	7b3b      	ldrb	r3, [r7, #12]
 8001448:	69fa      	ldr	r2, [r7, #28]
 800144a:	429a      	cmp	r2, r3
 800144c:	dddd      	ble.n	800140a <GAME_PLAY_Phase_Management+0x6be>
				}
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800144e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001450:	f7ff f96b 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001456:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800145a:	6939      	ldr	r1, [r7, #16]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f911 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 0;
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	2200      	movs	r2, #0
 8001466:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = await;
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	2200      	movs	r2, #0
 800146c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			}
			break;
 8001470:	e00b      	b.n	800148a <GAME_PLAY_Phase_Management+0x73e>
			break;
 8001472:	bf00      	nop
 8001474:	e1f6      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
			break;
 8001476:	bf00      	nop
 8001478:	e1f4      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
			break;
 800147a:	bf00      	nop
 800147c:	e1f2      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
				break;
 800147e:	bf00      	nop
 8001480:	e1f0      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
			break;
 8001482:	bf00      	nop
 8001484:	e1ee      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
			break;
 8001486:	bf00      	nop
 8001488:	e1ec      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
			break;
 800148a:	bf00      	nop
		}
		break;
 800148c:	e1ea      	b.n	8001864 <GAME_PLAY_Phase_Management+0xb18>
		case Battle_Phase:

			switch(BATTLE){
 800148e:	7dbb      	ldrb	r3, [r7, #22]
 8001490:	2b05      	cmp	r3, #5
 8001492:	f200 81cf 	bhi.w	8001834 <GAME_PLAY_Phase_Management+0xae8>
 8001496:	a201      	add	r2, pc, #4	; (adr r2, 800149c <GAME_PLAY_Phase_Management+0x750>)
 8001498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800149c:	080014b5 	.word	0x080014b5
 80014a0:	0800163d 	.word	0x0800163d
 80014a4:	080015c7 	.word	0x080015c7
 80014a8:	08001835 	.word	0x08001835
 80014ac:	0800168f 	.word	0x0800168f
 80014b0:	080017f9 	.word	0x080017f9
			case selection:
				//ATK action 50
				if(state_game->action == 50){
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b32      	cmp	r3, #50	; 0x32
 80014ba:	d129      	bne.n	8001510 <GAME_PLAY_Phase_Management+0x7c4>
					Player_Reading_Card(RFIDmain, state_game, ptrPlayerDef);
 80014bc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80014be:	6839      	ldr	r1, [r7, #0]
 80014c0:	6878      	ldr	r0, [r7, #4]
 80014c2:	f000 f9db 	bl	800187c <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80014c6:	2101      	movs	r1, #1
 80014c8:	485a      	ldr	r0, [pc, #360]	; (8001634 <GAME_PLAY_Phase_Management+0x8e8>)
 80014ca:	f004 ffd3 	bl	8006474 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	f040 81a8 	bne.w	8001826 <GAME_PLAY_Phase_Management+0xada>
							== GPIO_PIN_RESET){
						if(state_game->player_state == first_player){
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d10b      	bne.n	80014f8 <GAME_PLAY_Phase_Management+0x7ac>
							state_game->action = 0;
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
							state_game->player_state = second_player;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	2202      	movs	r2, #2
 80014ea:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
							state_game->STATE = Drawn_Phase;
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	2200      	movs	r2, #0
 80014f2:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
							break;
						}
						ptrYugiohCard_dst++;
					}
					}
			break;
 80014f6:	e196      	b.n	8001826 <GAME_PLAY_Phase_Management+0xada>
							state_game->action = 0;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	2200      	movs	r2, #0
 80014fc:	701a      	strb	r2, [r3, #0]
							state_game->player_state = first_player;
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	2201      	movs	r2, #1
 8001502:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
							state_game->STATE = Drawn_Phase;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			break;
 800150e:	e18a      	b.n	8001826 <GAME_PLAY_Phase_Management+0xada>
				else if(state_game->action == 51){
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b33      	cmp	r3, #51	; 0x33
 8001516:	f040 8186 	bne.w	8001826 <GAME_PLAY_Phase_Management+0xada>
					uint8_t check_def_mon = 0;
 800151a:	2300      	movs	r3, #0
 800151c:	76fb      	strb	r3, [r7, #27]
					ptrYugiohCard_src = &ptrPlayerDef->cardOnBoard[3];
 800151e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001520:	3328      	adds	r3, #40	; 0x28
 8001522:	613b      	str	r3, [r7, #16]
					for(uint8_t i = 0;i < 3; ++i){
 8001524:	2300      	movs	r3, #0
 8001526:	76bb      	strb	r3, [r7, #26]
 8001528:	e009      	b.n	800153e <GAME_PLAY_Phase_Management+0x7f2>
						if(ptrYugiohCard_src->cardData == 0){
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <GAME_PLAY_Phase_Management+0x7ec>
							check_def_mon++;
 8001532:	7efb      	ldrb	r3, [r7, #27]
 8001534:	3301      	adds	r3, #1
 8001536:	76fb      	strb	r3, [r7, #27]
					for(uint8_t i = 0;i < 3; ++i){
 8001538:	7ebb      	ldrb	r3, [r7, #26]
 800153a:	3301      	adds	r3, #1
 800153c:	76bb      	strb	r3, [r7, #26]
 800153e:	7ebb      	ldrb	r3, [r7, #26]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d9f2      	bls.n	800152a <GAME_PLAY_Phase_Management+0x7de>
					ptrYugiohCard_src = &ptrPlayerDef->ChainBuffer[0];
 8001544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001546:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800154a:	613b      	str	r3, [r7, #16]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[3];
 800154c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800154e:	3328      	adds	r3, #40	; 0x28
 8001550:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 8001552:	2300      	movs	r3, #0
 8001554:	767b      	strb	r3, [r7, #25]
 8001556:	e030      	b.n	80015ba <GAME_PLAY_Phase_Management+0x86e>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	429a      	cmp	r2, r3
 8001562:	d124      	bne.n	80015ae <GAME_PLAY_Phase_Management+0x862>
							if(ptrYugiohCard_dst->cardState == 1){
 8001564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001566:	789b      	ldrb	r3, [r3, #2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d12a      	bne.n	80015c2 <GAME_PLAY_Phase_Management+0x876>
								YUGIOH_card_copy(ptrYugiohCard_dst, &ptrPlayerAtk->CardInPlayed);
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001572:	4619      	mov	r1, r3
 8001574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001576:	f7ff f885 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 800157a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
								if(check_def_mon == 3){
 8001582:	7efb      	ldrb	r3, [r7, #27]
 8001584:	2b03      	cmp	r3, #3
 8001586:	d103      	bne.n	8001590 <GAME_PLAY_Phase_Management+0x844>
									ptrYugiohCard_dst->targetPosition = 99;
 8001588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158a:	2263      	movs	r2, #99	; 0x63
 800158c:	71da      	strb	r2, [r3, #7]
 800158e:	e003      	b.n	8001598 <GAME_PLAY_Phase_Management+0x84c>
									ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	799a      	ldrb	r2, [r3, #6]
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerDef);
 8001598:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800159a:	f7ff f8c6 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	2234      	movs	r2, #52	; 0x34
 80015a2:	701a      	strb	r2, [r3, #0]
								state_game->BATTLE = counter_DEF;
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
							break;
 80015ac:	e009      	b.n	80015c2 <GAME_PLAY_Phase_Management+0x876>
						ptrYugiohCard_dst++;
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	330c      	adds	r3, #12
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 80015b4:	7e7b      	ldrb	r3, [r7, #25]
 80015b6:	3301      	adds	r3, #1
 80015b8:	767b      	strb	r3, [r7, #25]
 80015ba:	7e7b      	ldrb	r3, [r7, #25]
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d9cb      	bls.n	8001558 <GAME_PLAY_Phase_Management+0x80c>
			break;
 80015c0:	e131      	b.n	8001826 <GAME_PLAY_Phase_Management+0xada>
							break;
 80015c2:	bf00      	nop
			break;
 80015c4:	e12f      	b.n	8001826 <GAME_PLAY_Phase_Management+0xada>
			case counter_DEF:
				//action 52
//				state_game->test = 34;
				if(state_game->action == 52)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	2b34      	cmp	r3, #52	; 0x34
 80015cc:	d11d      	bne.n	800160a <GAME_PLAY_Phase_Management+0x8be>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80015ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80015d0:	6839      	ldr	r1, [r7, #0]
 80015d2:	6878      	ldr	r0, [r7, #4]
 80015d4:	f000 f952 	bl	800187c <Player_Reading_Card>
//					state_game->test = 35;
					if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 80015d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80015dc:	4816      	ldr	r0, [pc, #88]	; (8001638 <GAME_PLAY_Phase_Management+0x8ec>)
 80015de:	f004 ff49 	bl	8006474 <HAL_GPIO_ReadPin>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d103      	bne.n	80015f0 <GAME_PLAY_Phase_Management+0x8a4>
						state_game->BATTLE = calculate_damage;
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	2204      	movs	r2, #4
 80015ec:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					}
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 80015f0:	2102      	movs	r1, #2
 80015f2:	480f      	ldr	r0, [pc, #60]	; (8001630 <GAME_PLAY_Phase_Management+0x8e4>)
 80015f4:	f004 ff3e 	bl	8006474 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	f040 8115 	bne.w	800182a <GAME_PLAY_Phase_Management+0xade>
						state_game->BATTLE = calculate_damage;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2204      	movs	r2, #4
 8001604:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->BATTLE = counter_ATK;
					state_game->action = 54;
				}
				break;
 8001608:	e10f      	b.n	800182a <GAME_PLAY_Phase_Management+0xade>
				else if ((state_game->action == 53 )){
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b35      	cmp	r3, #53	; 0x35
 8001610:	f040 810b 	bne.w	800182a <GAME_PLAY_Phase_Management+0xade>
					state_game->count_chain += 1;
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	785b      	ldrb	r3, [r3, #1]
 8001618:	3301      	adds	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_ATK;
 8001620:	683b      	ldr	r3, [r7, #0]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 54;
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	2236      	movs	r2, #54	; 0x36
 800162c:	701a      	strb	r2, [r3, #0]
				break;
 800162e:	e0fc      	b.n	800182a <GAME_PLAY_Phase_Management+0xade>
 8001630:	58020400 	.word	0x58020400
 8001634:	58020800 	.word	0x58020800
 8001638:	58021400 	.word	0x58021400
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	781b      	ldrb	r3, [r3, #0]
 8001640:	2b36      	cmp	r3, #54	; 0x36
 8001642:	d111      	bne.n	8001668 <GAME_PLAY_Phase_Management+0x91c>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8001644:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001646:	6839      	ldr	r1, [r7, #0]
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 f917 	bl	800187c <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 800164e:	2102      	movs	r1, #2
 8001650:	4888      	ldr	r0, [pc, #544]	; (8001874 <GAME_PLAY_Phase_Management+0xb28>)
 8001652:	f004 ff0f 	bl	8006474 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	f040 80e8 	bne.w	800182e <GAME_PLAY_Phase_Management+0xae2>
						state_game->BATTLE = calculate_damage;
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	2204      	movs	r2, #4
 8001662:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->BATTLE = counter_DEF;
					state_game->action = 52;
				}
				break;
 8001666:	e0e2      	b.n	800182e <GAME_PLAY_Phase_Management+0xae2>
				else if ((state_game->action == 55 )){
 8001668:	683b      	ldr	r3, [r7, #0]
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b37      	cmp	r3, #55	; 0x37
 800166e:	f040 80de 	bne.w	800182e <GAME_PLAY_Phase_Management+0xae2>
					state_game->count_chain += 1;
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	785b      	ldrb	r3, [r3, #1]
 8001676:	3301      	adds	r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_DEF;
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	2202      	movs	r2, #2
 8001682:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 52;
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	2234      	movs	r2, #52	; 0x34
 800168a:	701a      	strb	r2, [r3, #0]
				break;
 800168c:	e0cf      	b.n	800182e <GAME_PLAY_Phase_Management+0xae2>
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 800168e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001690:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001694:	613b      	str	r3, [r7, #16]

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	791b      	ldrb	r3, [r3, #4]
 800169a:	73fb      	strb	r3, [r7, #15]

				if(ptrYugiohCard_src->targetPosition == 99){
 800169c:	693b      	ldr	r3, [r7, #16]
 800169e:	79db      	ldrb	r3, [r3, #7]
 80016a0:	2b63      	cmp	r3, #99	; 0x63
 80016a2:	d114      	bne.n	80016ce <GAME_PLAY_Phase_Management+0x982>
					ptrPlayerDef->life_point -= atk*100;
 80016a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016a6:	885a      	ldrh	r2, [r3, #2]
 80016a8:	7bfb      	ldrb	r3, [r7, #15]
 80016aa:	b29b      	uxth	r3, r3
 80016ac:	4619      	mov	r1, r3
 80016ae:	0249      	lsls	r1, r1, #9
 80016b0:	1ac9      	subs	r1, r1, r3
 80016b2:	0089      	lsls	r1, r1, #2
 80016b4:	4419      	add	r1, r3
 80016b6:	00c9      	lsls	r1, r1, #3
 80016b8:	1acb      	subs	r3, r1, r3
 80016ba:	009b      	lsls	r3, r3, #2
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4413      	add	r3, r2
 80016c0:	b29a      	uxth	r2, r3
 80016c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016c4:	805a      	strh	r2, [r3, #2]
					state_game->BATTLE = after_calculate;
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	2205      	movs	r2, #5
 80016ca:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				}

				ptrYugiohCard_dst = ptrPlayerDef->cardOnBoard;
 80016ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016d0:	3304      	adds	r3, #4
 80016d2:	627b      	str	r3, [r7, #36]	; 0x24

				ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	799b      	ldrb	r3, [r3, #6]
 80016d8:	461a      	mov	r2, r3
 80016da:	4613      	mov	r3, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	4413      	add	r3, r2
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80016e4:	4413      	add	r3, r2
 80016e6:	3304      	adds	r3, #4
 80016e8:	627b      	str	r3, [r7, #36]	; 0x24

				state_game->test = 54;
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	2236      	movs	r2, #54	; 0x36
 80016ee:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(ptrYugiohCard_dst->cardState == 0){
 80016f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f4:	789b      	ldrb	r3, [r3, #2]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d12b      	bne.n	8001752 <GAME_PLAY_Phase_Management+0xa06>
//					uint8_t atk = ptrYugiohCard_src->cardAtk;
					uint8_t def = ptrYugiohCard_dst->cardDef;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	795b      	ldrb	r3, [r3, #5]
 80016fe:	737b      	strb	r3, [r7, #13]
					if(atk < def){
 8001700:	7bfa      	ldrb	r2, [r7, #15]
 8001702:	7b7b      	ldrb	r3, [r7, #13]
 8001704:	429a      	cmp	r2, r3
 8001706:	d217      	bcs.n	8001738 <GAME_PLAY_Phase_Management+0x9ec>
						ptrPlayerAtk->life_point -= (def-atk)*100;
 8001708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800170a:	885a      	ldrh	r2, [r3, #2]
 800170c:	7b79      	ldrb	r1, [r7, #13]
 800170e:	7bfb      	ldrb	r3, [r7, #15]
 8001710:	1acb      	subs	r3, r1, r3
 8001712:	b29b      	uxth	r3, r3
 8001714:	4619      	mov	r1, r3
 8001716:	0249      	lsls	r1, r1, #9
 8001718:	1ac9      	subs	r1, r1, r3
 800171a:	0089      	lsls	r1, r1, #2
 800171c:	4419      	add	r1, r3
 800171e:	00c9      	lsls	r1, r1, #3
 8001720:	1acb      	subs	r3, r1, r3
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	b29b      	uxth	r3, r3
 8001726:	4413      	add	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172c:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = after_calculate;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	2205      	movs	r2, #5
 8001732:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
						ptrPlayerDef->life_point -= (atk-atk2)*100;
						state_game->BATTLE = after_calculate;
					}

				}
				break;
 8001736:	e07c      	b.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
					else if(atk > def){
 8001738:	7bfa      	ldrb	r2, [r7, #15]
 800173a:	7b7b      	ldrb	r3, [r7, #13]
 800173c:	429a      	cmp	r2, r3
 800173e:	d978      	bls.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 8001740:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001742:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001744:	f000 f92e 	bl	80019a4 <YUGIOH_To_GY>
						state_game->BATTLE = after_calculate;
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2205      	movs	r2, #5
 800174c:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 8001750:	e06f      	b.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
				else if(ptrYugiohCard_dst->cardState == 1){
 8001752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001754:	789b      	ldrb	r3, [r3, #2]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d16b      	bne.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 800175a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175c:	791b      	ldrb	r3, [r3, #4]
 800175e:	73bb      	strb	r3, [r7, #14]
					state_game->test = 60;
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	223c      	movs	r2, #60	; 0x3c
 8001764:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if(atk < atk2){
 8001768:	7bfa      	ldrb	r2, [r7, #15]
 800176a:	7bbb      	ldrb	r3, [r7, #14]
 800176c:	429a      	cmp	r2, r3
 800176e:	d21f      	bcs.n	80017b0 <GAME_PLAY_Phase_Management+0xa64>
						state_game->test = 61;
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	223d      	movs	r2, #61	; 0x3d
 8001774:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						ptrPlayerAtk->life_point -= (atk2-atk)*100;
 8001778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800177a:	885a      	ldrh	r2, [r3, #2]
 800177c:	7bb9      	ldrb	r1, [r7, #14]
 800177e:	7bfb      	ldrb	r3, [r7, #15]
 8001780:	1acb      	subs	r3, r1, r3
 8001782:	b29b      	uxth	r3, r3
 8001784:	4619      	mov	r1, r3
 8001786:	0249      	lsls	r1, r1, #9
 8001788:	1ac9      	subs	r1, r1, r3
 800178a:	0089      	lsls	r1, r1, #2
 800178c:	4419      	add	r1, r3
 800178e:	00c9      	lsls	r1, r1, #3
 8001790:	1acb      	subs	r3, r1, r3
 8001792:	009b      	lsls	r3, r3, #2
 8001794:	b29b      	uxth	r3, r3
 8001796:	4413      	add	r3, r2
 8001798:	b29a      	uxth	r2, r3
 800179a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800179c:	805a      	strh	r2, [r3, #2]
						YUGIOH_To_GY(ptrPlayerAtk, ptrYugiohCard_src);
 800179e:	6939      	ldr	r1, [r7, #16]
 80017a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80017a2:	f000 f8ff 	bl	80019a4 <YUGIOH_To_GY>
						state_game->BATTLE = after_calculate;
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	2205      	movs	r2, #5
 80017aa:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 80017ae:	e040      	b.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
					else if(atk > atk2){
 80017b0:	7bfa      	ldrb	r2, [r7, #15]
 80017b2:	7bbb      	ldrb	r3, [r7, #14]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d93c      	bls.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
						state_game->test = 70;
 80017b8:	683b      	ldr	r3, [r7, #0]
 80017ba:	2246      	movs	r2, #70	; 0x46
 80017bc:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 80017c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80017c4:	f000 f8ee 	bl	80019a4 <YUGIOH_To_GY>
						ptrPlayerDef->life_point -= (atk-atk2)*100;
 80017c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ca:	885a      	ldrh	r2, [r3, #2]
 80017cc:	7bf9      	ldrb	r1, [r7, #15]
 80017ce:	7bbb      	ldrb	r3, [r7, #14]
 80017d0:	1acb      	subs	r3, r1, r3
 80017d2:	b29b      	uxth	r3, r3
 80017d4:	4619      	mov	r1, r3
 80017d6:	0249      	lsls	r1, r1, #9
 80017d8:	1ac9      	subs	r1, r1, r3
 80017da:	0089      	lsls	r1, r1, #2
 80017dc:	4419      	add	r1, r3
 80017de:	00c9      	lsls	r1, r1, #3
 80017e0:	1acb      	subs	r3, r1, r3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	b29b      	uxth	r3, r3
 80017e6:	4413      	add	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ec:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = after_calculate;
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	2205      	movs	r2, #5
 80017f2:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 80017f6:	e01c      	b.n	8001832 <GAME_PLAY_Phase_Management+0xae6>
			case after_calculate:
				if(ptrPlayerDef->life_point == 0 || ptrPlayerDef->life_point >= 60000){
 80017f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <GAME_PLAY_Phase_Management+0xac0>
 8001800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001802:	885b      	ldrh	r3, [r3, #2]
 8001804:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8001808:	4293      	cmp	r3, r2
 800180a:	d904      	bls.n	8001816 <GAME_PLAY_Phase_Management+0xaca>
					state_game->STATE = Winner;
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	2203      	movs	r2, #3
 8001810:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
				}
				else{
					state_game->action = 50;
					state_game->BATTLE = selection;
				}
				break;
 8001814:	e00e      	b.n	8001834 <GAME_PLAY_Phase_Management+0xae8>
					state_game->action = 50;
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	2232      	movs	r2, #50	; 0x32
 800181a:	701a      	strb	r2, [r3, #0]
					state_game->BATTLE = selection;
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	2200      	movs	r2, #0
 8001820:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 8001824:	e006      	b.n	8001834 <GAME_PLAY_Phase_Management+0xae8>
			break;
 8001826:	bf00      	nop
 8001828:	e004      	b.n	8001834 <GAME_PLAY_Phase_Management+0xae8>
				break;
 800182a:	bf00      	nop
 800182c:	e002      	b.n	8001834 <GAME_PLAY_Phase_Management+0xae8>
				break;
 800182e:	bf00      	nop
 8001830:	e000      	b.n	8001834 <GAME_PLAY_Phase_Management+0xae8>
				break;
 8001832:	bf00      	nop
			}
		case Winner:
			if(HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8001834:	2108      	movs	r1, #8
 8001836:	4810      	ldr	r0, [pc, #64]	; (8001878 <GAME_PLAY_Phase_Management+0xb2c>)
 8001838:	f004 fe1c 	bl	8006474 <HAL_GPIO_ReadPin>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d112      	bne.n	8001868 <GAME_PLAY_Phase_Management+0xb1c>
					== GPIO_PIN_RESET){
				state_game->player_state = ready;
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
				state_game->STATE = Drawn_Phase;
 800184a:	683b      	ldr	r3, [r7, #0]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
				YUGIOH_Clear_Card_All(ptrPlayerAtk);
 8001852:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001854:	f7fe ff8e 	bl	8000774 <YUGIOH_Clear_Card_All>
				YUGIOH_Clear_Card_All(ptrPlayerDef);
 8001858:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800185a:	f7fe ff8b 	bl	8000774 <YUGIOH_Clear_Card_All>

			}
			break;
 800185e:	e003      	b.n	8001868 <GAME_PLAY_Phase_Management+0xb1c>
		break;
 8001860:	bf00      	nop
 8001862:	e002      	b.n	800186a <GAME_PLAY_Phase_Management+0xb1e>
		break;
 8001864:	bf00      	nop
 8001866:	e000      	b.n	800186a <GAME_PLAY_Phase_Management+0xb1e>
			break;
 8001868:	bf00      	nop

	}
}
 800186a:	bf00      	nop
 800186c:	3730      	adds	r7, #48	; 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	58020400 	.word	0x58020400
 8001878:	58020000 	.word	0x58020000

0800187c <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b088      	sub	sp, #32
 8001880:	af00      	add	r7, sp, #0
 8001882:	60f8      	str	r0, [r7, #12]
 8001884:	60b9      	str	r1, [r7, #8]
 8001886:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	3328      	adds	r3, #40	; 0x28
 800188c:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	881b      	ldrh	r3, [r3, #0]
 8001892:	461a      	mov	r2, r3
 8001894:	4613      	mov	r3, r2
 8001896:	011b      	lsls	r3, r3, #4
 8001898:	4413      	add	r3, r2
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	3328      	adds	r3, #40	; 0x28
 800189e:	68fa      	ldr	r2, [r7, #12]
 80018a0:	4413      	add	r3, r2
 80018a2:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	3314      	adds	r3, #20
 80018a8:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80018b0:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	78db      	ldrb	r3, [r3, #3]
 80018b6:	2b01      	cmp	r3, #1
 80018b8:	d115      	bne.n	80018e6 <Player_Reading_Card+0x6a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7fe ffb2 	bl	8000824 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80018c0:	6979      	ldr	r1, [r7, #20]
 80018c2:	69b8      	ldr	r0, [r7, #24]
 80018c4:	f7fe fede 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_dst->targetPosition = 255;
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	22ff      	movs	r2, #255	; 0xff
 80018cc:	71da      	strb	r2, [r3, #7]
		RFID_Clear_Card_Bufffer(ptrRFID);
 80018ce:	69f8      	ldr	r0, [r7, #28]
 80018d0:	f7fe ff07 	bl	80006e2 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	2200      	movs	r2, #0
 80018d8:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 80018da:	68bb      	ldr	r3, [r7, #8]
 80018dc:	781b      	ldrb	r3, [r3, #0]
 80018de:	3301      	adds	r3, #1
 80018e0:	b2da      	uxtb	r2, r3
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	701a      	strb	r2, [r3, #0]
	}
}
 80018e6:	bf00      	nop
 80018e8:	3720      	adds	r7, #32
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}

080018ee <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b088      	sub	sp, #32
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80018f6:	f107 030c 	add.w	r3, r7, #12
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	3328      	adds	r3, #40	; 0x28
 8001906:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001908:	2300      	movs	r3, #0
 800190a:	76fb      	strb	r3, [r7, #27]
 800190c:	e00b      	b.n	8001926 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	69f9      	ldr	r1, [r7, #28]
 8001914:	4618      	mov	r0, r3
 8001916:	f7fe feb5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	330c      	adds	r3, #12
 800191e:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001920:	7efb      	ldrb	r3, [r7, #27]
 8001922:	3301      	adds	r3, #1
 8001924:	76fb      	strb	r3, [r7, #27]
 8001926:	7efb      	ldrb	r3, [r7, #27]
 8001928:	2b02      	cmp	r3, #2
 800192a:	d9f0      	bls.n	800190e <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x20>
	}
}
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	3720      	adds	r7, #32
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8001936:	b580      	push	{r7, lr}
 8001938:	b088      	sub	sp, #32
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8001940:	f107 0308 	add.w	r3, r7, #8
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
 800194a:	609a      	str	r2, [r3, #8]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	3304      	adds	r3, #4
 8001950:	61fb      	str	r3, [r7, #28]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	3328      	adds	r3, #40	; 0x28
 8001956:	61fb      	str	r3, [r7, #28]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	3304      	adds	r3, #4
 800195c:	61bb      	str	r3, [r7, #24]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3328      	adds	r3, #40	; 0x28
 8001962:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001964:	2300      	movs	r3, #0
 8001966:	75fb      	strb	r3, [r7, #23]
 8001968:	e014      	b.n	8001994 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x5e>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player1);
 800196a:	f107 0308 	add.w	r3, r7, #8
 800196e:	69f9      	ldr	r1, [r7, #28]
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fe87 	bl	8000684 <YUGIOH_card_copy>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player2);
 8001976:	f107 0308 	add.w	r3, r7, #8
 800197a:	69b9      	ldr	r1, [r7, #24]
 800197c:	4618      	mov	r0, r3
 800197e:	f7fe fe81 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard_player1++;
 8001982:	69fb      	ldr	r3, [r7, #28]
 8001984:	330c      	adds	r3, #12
 8001986:	61fb      	str	r3, [r7, #28]
		ptrYUGIOHCard_player2++;
 8001988:	69bb      	ldr	r3, [r7, #24]
 800198a:	330c      	adds	r3, #12
 800198c:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800198e:	7dfb      	ldrb	r3, [r7, #23]
 8001990:	3301      	adds	r3, #1
 8001992:	75fb      	strb	r3, [r7, #23]
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	2b02      	cmp	r3, #2
 8001998:	d9e7      	bls.n	800196a <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x34>
	}
}
 800199a:	bf00      	nop
 800199c:	bf00      	nop
 800199e:	3720      	adds	r7, #32
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <YUGIOH_To_GY>:

//void YUGIOH_Clear_Card_New_G(Player *player1,Player *player2) {

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b088      	sub	sp, #32
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80019ae:	f107 0308 	add.w	r3, r7, #8
 80019b2:	2200      	movs	r2, #0
 80019b4:	601a      	str	r2, [r3, #0]
 80019b6:	605a      	str	r2, [r3, #4]
 80019b8:	609a      	str	r2, [r3, #8]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	334c      	adds	r3, #76	; 0x4c
 80019be:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f503 7392 	add.w	r3, r3, #292	; 0x124
 80019c6:	61fb      	str	r3, [r7, #28]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	334c      	adds	r3, #76	; 0x4c
 80019cc:	61bb      	str	r3, [r7, #24]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80019d4:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80019d6:	2314      	movs	r3, #20
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e00c      	b.n	80019f6 <YUGIOH_To_GY+0x52>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80019dc:	69b9      	ldr	r1, [r7, #24]
 80019de:	69f8      	ldr	r0, [r7, #28]
 80019e0:	f7fe fe50 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	3b0c      	subs	r3, #12
 80019e8:	61fb      	str	r3, [r7, #28]
		ptrYugiohCard_Buffer_dst--;
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	3b0c      	subs	r3, #12
 80019ee:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	3b01      	subs	r3, #1
 80019f4:	617b      	str	r3, [r7, #20]
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	dcef      	bgt.n	80019dc <YUGIOH_To_GY+0x38>
	}

	ptrYugiohCard_Buffer_src = card;
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	334c      	adds	r3, #76	; 0x4c
 8001a04:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001a06:	69b9      	ldr	r1, [r7, #24]
 8001a08:	69f8      	ldr	r0, [r7, #28]
 8001a0a:	f7fe fe3b 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 8001a0e:	f107 0308 	add.w	r3, r7, #8
 8001a12:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001a14:	69f9      	ldr	r1, [r7, #28]
 8001a16:	69b8      	ldr	r0, [r7, #24]
 8001a18:	f7fe fe34 	bl	8000684 <YUGIOH_card_copy>

}
 8001a1c:	bf00      	nop
 8001a1e:	3720      	adds	r7, #32
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}

08001a24 <MainGUI>:

void MainGUI(){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b084      	sub	sp, #16
 8001a28:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001a2a:	4b47      	ldr	r3, [pc, #284]	; (8001b48 <MainGUI+0x124>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	9202      	str	r2, [sp, #8]
 8001a30:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001a34:	9201      	str	r2, [sp, #4]
 8001a36:	685a      	ldr	r2, [r3, #4]
 8001a38:	9200      	str	r2, [sp, #0]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a43      	ldr	r2, [pc, #268]	; (8001b4c <MainGUI+0x128>)
 8001a3e:	2105      	movs	r1, #5
 8001a40:	2005      	movs	r0, #5
 8001a42:	f000 feba 	bl	80027ba <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a46:	4b40      	ldr	r3, [pc, #256]	; (8001b48 <MainGUI+0x124>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	9202      	str	r2, [sp, #8]
 8001a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a50:	9201      	str	r2, [sp, #4]
 8001a52:	685a      	ldr	r2, [r3, #4]
 8001a54:	9200      	str	r2, [sp, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a3d      	ldr	r2, [pc, #244]	; (8001b50 <MainGUI+0x12c>)
 8001a5a:	2114      	movs	r1, #20
 8001a5c:	2005      	movs	r0, #5
 8001a5e:	f000 feac 	bl	80027ba <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a62:	4b39      	ldr	r3, [pc, #228]	; (8001b48 <MainGUI+0x124>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	9202      	str	r2, [sp, #8]
 8001a68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a6c:	9201      	str	r2, [sp, #4]
 8001a6e:	685a      	ldr	r2, [r3, #4]
 8001a70:	9200      	str	r2, [sp, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a37      	ldr	r2, [pc, #220]	; (8001b54 <MainGUI+0x130>)
 8001a76:	2123      	movs	r1, #35	; 0x23
 8001a78:	2005      	movs	r0, #5
 8001a7a:	f000 fe9e 	bl	80027ba <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a7e:	4b32      	ldr	r3, [pc, #200]	; (8001b48 <MainGUI+0x124>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	9202      	str	r2, [sp, #8]
 8001a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a88:	9201      	str	r2, [sp, #4]
 8001a8a:	685a      	ldr	r2, [r3, #4]
 8001a8c:	9200      	str	r2, [sp, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a31      	ldr	r2, [pc, #196]	; (8001b58 <MainGUI+0x134>)
 8001a92:	2132      	movs	r1, #50	; 0x32
 8001a94:	2000      	movs	r0, #0
 8001a96:	f000 fe90 	bl	80027ba <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001a9a:	4b2b      	ldr	r3, [pc, #172]	; (8001b48 <MainGUI+0x124>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	9202      	str	r2, [sp, #8]
 8001aa0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001aa4:	9201      	str	r2, [sp, #4]
 8001aa6:	685a      	ldr	r2, [r3, #4]
 8001aa8:	9200      	str	r2, [sp, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4a2b      	ldr	r2, [pc, #172]	; (8001b5c <MainGUI+0x138>)
 8001aae:	213c      	movs	r1, #60	; 0x3c
 8001ab0:	2000      	movs	r0, #0
 8001ab2:	f000 fe82 	bl	80027ba <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001ab6:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <MainGUI+0x124>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	9202      	str	r2, [sp, #8]
 8001abc:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001ac0:	9201      	str	r2, [sp, #4]
 8001ac2:	685a      	ldr	r2, [r3, #4]
 8001ac4:	9200      	str	r2, [sp, #0]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <MainGUI+0x13c>)
 8001aca:	2105      	movs	r1, #5
 8001acc:	2005      	movs	r0, #5
 8001ace:	f000 fe2a 	bl	8002726 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001ad2:	4b1d      	ldr	r3, [pc, #116]	; (8001b48 <MainGUI+0x124>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	9202      	str	r2, [sp, #8]
 8001ad8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a1a      	ldr	r2, [pc, #104]	; (8001b50 <MainGUI+0x12c>)
 8001ae6:	2114      	movs	r1, #20
 8001ae8:	2005      	movs	r0, #5
 8001aea:	f000 fe1c 	bl	8002726 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MainGUI+0x124>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	9202      	str	r2, [sp, #8]
 8001af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	9200      	str	r2, [sp, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a14      	ldr	r2, [pc, #80]	; (8001b54 <MainGUI+0x130>)
 8001b02:	2123      	movs	r1, #35	; 0x23
 8001b04:	2005      	movs	r0, #5
 8001b06:	f000 fe0e 	bl	8002726 <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b0a:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <MainGUI+0x124>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	9202      	str	r2, [sp, #8]
 8001b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b14:	9201      	str	r2, [sp, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	9200      	str	r2, [sp, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <MainGUI+0x134>)
 8001b1e:	2132      	movs	r1, #50	; 0x32
 8001b20:	2000      	movs	r0, #0
 8001b22:	f000 fe00 	bl	8002726 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b26:	4b08      	ldr	r3, [pc, #32]	; (8001b48 <MainGUI+0x124>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	9202      	str	r2, [sp, #8]
 8001b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b30:	9201      	str	r2, [sp, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	9200      	str	r2, [sp, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a08      	ldr	r2, [pc, #32]	; (8001b5c <MainGUI+0x138>)
 8001b3a:	213c      	movs	r1, #60	; 0x3c
 8001b3c:	2000      	movs	r0, #0
 8001b3e:	f000 fdf2 	bl	8002726 <ST7735_WriteString>
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	24000008 	.word	0x24000008
 8001b4c:	0800c088 	.word	0x0800c088
 8001b50:	0800c0e4 	.word	0x0800c0e4
 8001b54:	0800c0f4 	.word	0x0800c0f4
 8001b58:	0800c0fc 	.word	0x0800c0fc
 8001b5c:	0800c034 	.word	0x0800c034
 8001b60:	0800c028 	.word	0x0800c028

08001b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b68:	4b3d      	ldr	r3, [pc, #244]	; (8001c60 <SystemInit+0xfc>)
 8001b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b6e:	4a3c      	ldr	r2, [pc, #240]	; (8001c60 <SystemInit+0xfc>)
 8001b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001b78:	4b39      	ldr	r3, [pc, #228]	; (8001c60 <SystemInit+0xfc>)
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	4a38      	ldr	r2, [pc, #224]	; (8001c60 <SystemInit+0xfc>)
 8001b7e:	f043 0310 	orr.w	r3, r3, #16
 8001b82:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001b84:	4b37      	ldr	r3, [pc, #220]	; (8001c64 <SystemInit+0x100>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 030f 	and.w	r3, r3, #15
 8001b8c:	2b06      	cmp	r3, #6
 8001b8e:	d807      	bhi.n	8001ba0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001b90:	4b34      	ldr	r3, [pc, #208]	; (8001c64 <SystemInit+0x100>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f023 030f 	bic.w	r3, r3, #15
 8001b98:	4a32      	ldr	r2, [pc, #200]	; (8001c64 <SystemInit+0x100>)
 8001b9a:	f043 0307 	orr.w	r3, r3, #7
 8001b9e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001ba0:	4b31      	ldr	r3, [pc, #196]	; (8001c68 <SystemInit+0x104>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a30      	ldr	r2, [pc, #192]	; (8001c68 <SystemInit+0x104>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001bac:	4b2e      	ldr	r3, [pc, #184]	; (8001c68 <SystemInit+0x104>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001bb2:	4b2d      	ldr	r3, [pc, #180]	; (8001c68 <SystemInit+0x104>)
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	492c      	ldr	r1, [pc, #176]	; (8001c68 <SystemInit+0x104>)
 8001bb8:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <SystemInit+0x108>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001bbe:	4b29      	ldr	r3, [pc, #164]	; (8001c64 <SystemInit+0x100>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0308 	and.w	r3, r3, #8
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d007      	beq.n	8001bda <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <SystemInit+0x100>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f023 030f 	bic.w	r3, r3, #15
 8001bd2:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <SystemInit+0x100>)
 8001bd4:	f043 0307 	orr.w	r3, r3, #7
 8001bd8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001bda:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <SystemInit+0x104>)
 8001bdc:	2200      	movs	r2, #0
 8001bde:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001be0:	4b21      	ldr	r3, [pc, #132]	; (8001c68 <SystemInit+0x104>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001be6:	4b20      	ldr	r3, [pc, #128]	; (8001c68 <SystemInit+0x104>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <SystemInit+0x104>)
 8001bee:	4a20      	ldr	r2, [pc, #128]	; (8001c70 <SystemInit+0x10c>)
 8001bf0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001bf2:	4b1d      	ldr	r3, [pc, #116]	; (8001c68 <SystemInit+0x104>)
 8001bf4:	4a1f      	ldr	r2, [pc, #124]	; (8001c74 <SystemInit+0x110>)
 8001bf6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001bf8:	4b1b      	ldr	r3, [pc, #108]	; (8001c68 <SystemInit+0x104>)
 8001bfa:	4a1f      	ldr	r2, [pc, #124]	; (8001c78 <SystemInit+0x114>)
 8001bfc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001bfe:	4b1a      	ldr	r3, [pc, #104]	; (8001c68 <SystemInit+0x104>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8001c04:	4b18      	ldr	r3, [pc, #96]	; (8001c68 <SystemInit+0x104>)
 8001c06:	4a1c      	ldr	r2, [pc, #112]	; (8001c78 <SystemInit+0x114>)
 8001c08:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8001c0a:	4b17      	ldr	r3, [pc, #92]	; (8001c68 <SystemInit+0x104>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8001c10:	4b15      	ldr	r3, [pc, #84]	; (8001c68 <SystemInit+0x104>)
 8001c12:	4a19      	ldr	r2, [pc, #100]	; (8001c78 <SystemInit+0x114>)
 8001c14:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8001c16:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <SystemInit+0x104>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c1c:	4b12      	ldr	r3, [pc, #72]	; (8001c68 <SystemInit+0x104>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4a11      	ldr	r2, [pc, #68]	; (8001c68 <SystemInit+0x104>)
 8001c22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c26:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001c28:	4b0f      	ldr	r3, [pc, #60]	; (8001c68 <SystemInit+0x104>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001c2e:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <SystemInit+0x118>)
 8001c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c32:	4a12      	ldr	r2, [pc, #72]	; (8001c7c <SystemInit+0x118>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <SystemInit+0x11c>)
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	4b11      	ldr	r3, [pc, #68]	; (8001c84 <SystemInit+0x120>)
 8001c40:	4013      	ands	r3, r2
 8001c42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c46:	d202      	bcs.n	8001c4e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001c48:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <SystemInit+0x124>)
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001c4e:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <SystemInit+0x128>)
 8001c50:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001c54:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr
 8001c60:	e000ed00 	.word	0xe000ed00
 8001c64:	52002000 	.word	0x52002000
 8001c68:	58024400 	.word	0x58024400
 8001c6c:	eaf6ed7f 	.word	0xeaf6ed7f
 8001c70:	02020200 	.word	0x02020200
 8001c74:	01ff0000 	.word	0x01ff0000
 8001c78:	01010280 	.word	0x01010280
 8001c7c:	580000c0 	.word	0x580000c0
 8001c80:	5c001000 	.word	0x5c001000
 8001c84:	ffff0000 	.word	0xffff0000
 8001c88:	51008108 	.word	0x51008108
 8001c8c:	52004000 	.word	0x52004000

08001c90 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c9a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001c9c:	bf00      	nop
 8001c9e:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <main+0xe8>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d004      	beq.n	8001cb4 <main+0x24>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	1e5a      	subs	r2, r3, #1
 8001cae:	607a      	str	r2, [r7, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	dcf4      	bgt.n	8001c9e <main+0xe>
	if ( timeout < 0 )
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	da01      	bge.n	8001cbe <main+0x2e>
	{
		Error_Handler();
 8001cba:	f000 fb97 	bl	80023ec <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cbe:	f001 f9f9 	bl	80030b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc2:	f000 f861 	bl	8001d88 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001cc6:	f000 f8e3 	bl	8001e90 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001cca:	4b2b      	ldr	r3, [pc, #172]	; (8001d78 <main+0xe8>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	4a29      	ldr	r2, [pc, #164]	; (8001d78 <main+0xe8>)
 8001cd2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001cd6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cda:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <main+0xe8>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ce0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce4:	603b      	str	r3, [r7, #0]
 8001ce6:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001ce8:	2000      	movs	r0, #0
 8001cea:	f004 fc0f 	bl	800650c <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001cee:	2100      	movs	r1, #0
 8001cf0:	2000      	movs	r0, #0
 8001cf2:	f004 fc25 	bl	8006540 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfa:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001cfc:	bf00      	nop
 8001cfe:	4b1e      	ldr	r3, [pc, #120]	; (8001d78 <main+0xe8>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d104      	bne.n	8001d14 <main+0x84>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1e5a      	subs	r2, r3, #1
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	dcf4      	bgt.n	8001cfe <main+0x6e>
	if ( timeout < 0 )
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	da01      	bge.n	8001d1e <main+0x8e>
	{
		Error_Handler();
 8001d1a:	f000 fb67 	bl	80023ec <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d1e:	f000 fa35 	bl	800218c <MX_GPIO_Init>
  MX_ETH_Init();
 8001d22:	f000 f8e7 	bl	8001ef4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001d26:	f000 f989 	bl	800203c <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001d2a:	f000 fa07 	bl	800213c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001d2e:	f000 f9d3 	bl	80020d8 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001d32:	f000 f92b 	bl	8001f8c <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8001d36:	f000 fc61 	bl	80025fc <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8001d3a:	2000      	movs	r0, #0
 8001d3c:	f000 fe81 	bl	8002a42 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001d40:	2000      	movs	r0, #0
 8001d42:	f000 fe6d 	bl	8002a20 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8001d46:	f001 fa3b 	bl	80031c0 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <main+0xec>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	2bc8      	cmp	r3, #200	; 0xc8
 8001d54:	d9f7      	bls.n	8001d46 <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 8001d56:	f001 fa33 	bl	80031c0 <HAL_GetTick>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	4a07      	ldr	r2, [pc, #28]	; (8001d7c <main+0xec>)
 8001d5e:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001d60:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d64:	4806      	ldr	r0, [pc, #24]	; (8001d80 <main+0xf0>)
 8001d66:	f004 fbb6 	bl	80064d6 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8001d6a:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001d6e:	4905      	ldr	r1, [pc, #20]	; (8001d84 <main+0xf4>)
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7fe fd83 	bl	800087c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8001d76:	e7e6      	b.n	8001d46 <main+0xb6>
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	24000c98 	.word	0x24000c98
 8001d80:	58020400 	.word	0x58020400
 8001d84:	24000964 	.word	0x24000964

08001d88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b09c      	sub	sp, #112	; 0x70
 8001d8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d92:	224c      	movs	r2, #76	; 0x4c
 8001d94:	2100      	movs	r1, #0
 8001d96:	4618      	mov	r0, r3
 8001d98:	f009 fcc4 	bl	800b724 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d9c:	1d3b      	adds	r3, r7, #4
 8001d9e:	2220      	movs	r2, #32
 8001da0:	2100      	movs	r1, #0
 8001da2:	4618      	mov	r0, r3
 8001da4:	f009 fcbe 	bl	800b724 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001da8:	2004      	movs	r0, #4
 8001daa:	f004 fd25 	bl	80067f8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001dae:	2300      	movs	r3, #0
 8001db0:	603b      	str	r3, [r7, #0]
 8001db2:	4b34      	ldr	r3, [pc, #208]	; (8001e84 <SystemClock_Config+0xfc>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	4a33      	ldr	r2, [pc, #204]	; (8001e84 <SystemClock_Config+0xfc>)
 8001db8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001dbc:	6193      	str	r3, [r2, #24]
 8001dbe:	4b31      	ldr	r3, [pc, #196]	; (8001e84 <SystemClock_Config+0xfc>)
 8001dc0:	699b      	ldr	r3, [r3, #24]
 8001dc2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dc6:	603b      	str	r3, [r7, #0]
 8001dc8:	4b2f      	ldr	r3, [pc, #188]	; (8001e88 <SystemClock_Config+0x100>)
 8001dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dcc:	4a2e      	ldr	r2, [pc, #184]	; (8001e88 <SystemClock_Config+0x100>)
 8001dce:	f043 0301 	orr.w	r3, r3, #1
 8001dd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001dd4:	4b2c      	ldr	r3, [pc, #176]	; (8001e88 <SystemClock_Config+0x100>)
 8001dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001de0:	bf00      	nop
 8001de2:	4b28      	ldr	r3, [pc, #160]	; (8001e84 <SystemClock_Config+0xfc>)
 8001de4:	699b      	ldr	r3, [r3, #24]
 8001de6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001dea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001dee:	d1f8      	bne.n	8001de2 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001df0:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <SystemClock_Config+0x104>)
 8001df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df4:	f023 0303 	bic.w	r3, r3, #3
 8001df8:	4a24      	ldr	r2, [pc, #144]	; (8001e8c <SystemClock_Config+0x104>)
 8001dfa:	f043 0302 	orr.w	r3, r3, #2
 8001dfe:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e00:	2301      	movs	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001e04:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001e12:	2301      	movs	r3, #1
 8001e14:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001e16:	2378      	movs	r3, #120	; 0x78
 8001e18:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001e1e:	2302      	movs	r3, #2
 8001e20:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001e22:	2302      	movs	r3, #2
 8001e24:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001e26:	230c      	movs	r3, #12
 8001e28:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fd48 	bl	80068cc <HAL_RCC_OscConfig>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001e42:	f000 fad3 	bl	80023ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e46:	233f      	movs	r3, #63	; 0x3f
 8001e48:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001e52:	2308      	movs	r3, #8
 8001e54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001e56:	2340      	movs	r3, #64	; 0x40
 8001e58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001e5a:	2340      	movs	r3, #64	; 0x40
 8001e5c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001e64:	2340      	movs	r3, #64	; 0x40
 8001e66:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001e68:	1d3b      	adds	r3, r7, #4
 8001e6a:	2104      	movs	r1, #4
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f005 f95b 	bl	8007128 <HAL_RCC_ClockConfig>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001e78:	f000 fab8 	bl	80023ec <Error_Handler>
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	3770      	adds	r7, #112	; 0x70
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	58024800 	.word	0x58024800
 8001e88:	58000400 	.word	0x58000400
 8001e8c:	58024400 	.word	0x58024400

08001e90 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b0b0      	sub	sp, #192	; 0xc0
 8001e94:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	22bc      	movs	r2, #188	; 0xbc
 8001e9a:	2100      	movs	r1, #0
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f009 fc41 	bl	800b724 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001ea2:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8001ea6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001eac:	2318      	movs	r3, #24
 8001eae:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001ebc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001ec0:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001eca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ece:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001ed0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ed8:	1d3b      	adds	r3, r7, #4
 8001eda:	4618      	mov	r0, r3
 8001edc:	f005 fcb0 	bl	8007840 <HAL_RCCEx_PeriphCLKConfig>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d001      	beq.n	8001eea <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001ee6:	f000 fa81 	bl	80023ec <Error_Handler>
  }
}
 8001eea:	bf00      	nop
 8001eec:	37c0      	adds	r7, #192	; 0xc0
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	bd80      	pop	{r7, pc}
	...

08001ef4 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001ef8:	4b1e      	ldr	r3, [pc, #120]	; (8001f74 <MX_ETH_Init+0x80>)
 8001efa:	4a1f      	ldr	r2, [pc, #124]	; (8001f78 <MX_ETH_Init+0x84>)
 8001efc:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001efe:	4b1f      	ldr	r3, [pc, #124]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001f0a:	4b1c      	ldr	r3, [pc, #112]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f0c:	22e1      	movs	r2, #225	; 0xe1
 8001f0e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001f10:	4b1a      	ldr	r3, [pc, #104]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001f16:	4b19      	ldr	r3, [pc, #100]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001f1c:	4b17      	ldr	r3, [pc, #92]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001f22:	4b14      	ldr	r3, [pc, #80]	; (8001f74 <MX_ETH_Init+0x80>)
 8001f24:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <MX_ETH_Init+0x88>)
 8001f26:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <MX_ETH_Init+0x80>)
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	; (8001f74 <MX_ETH_Init+0x80>)
 8001f30:	4a13      	ldr	r2, [pc, #76]	; (8001f80 <MX_ETH_Init+0x8c>)
 8001f32:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001f34:	4b0f      	ldr	r3, [pc, #60]	; (8001f74 <MX_ETH_Init+0x80>)
 8001f36:	4a13      	ldr	r2, [pc, #76]	; (8001f84 <MX_ETH_Init+0x90>)
 8001f38:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001f3a:	4b0e      	ldr	r3, [pc, #56]	; (8001f74 <MX_ETH_Init+0x80>)
 8001f3c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f40:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001f42:	480c      	ldr	r0, [pc, #48]	; (8001f74 <MX_ETH_Init+0x80>)
 8001f44:	f003 fcc2 	bl	80058cc <HAL_ETH_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001f4e:	f000 fa4d 	bl	80023ec <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001f52:	2238      	movs	r2, #56	; 0x38
 8001f54:	2100      	movs	r1, #0
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <MX_ETH_Init+0x94>)
 8001f58:	f009 fbe4 	bl	800b724 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001f5c:	4b0a      	ldr	r3, [pc, #40]	; (8001f88 <MX_ETH_Init+0x94>)
 8001f5e:	2221      	movs	r2, #33	; 0x21
 8001f60:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001f62:	4b09      	ldr	r3, [pc, #36]	; (8001f88 <MX_ETH_Init+0x94>)
 8001f64:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001f68:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001f6a:	4b07      	ldr	r3, [pc, #28]	; (8001f88 <MX_ETH_Init+0x94>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	240001a0 	.word	0x240001a0
 8001f78:	40028000 	.word	0x40028000
 8001f7c:	24000c9c 	.word	0x24000c9c
 8001f80:	240000e4 	.word	0x240000e4
 8001f84:	24000084 	.word	0x24000084
 8001f88:	24000168 	.word	0x24000168

08001f8c <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001f90:	4b28      	ldr	r3, [pc, #160]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001f92:	4a29      	ldr	r2, [pc, #164]	; (8002038 <MX_SPI3_Init+0xac>)
 8001f94:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001f96:	4b27      	ldr	r3, [pc, #156]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001f98:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001f9c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001f9e:	4b25      	ldr	r3, [pc, #148]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fa0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001fa4:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001fa6:	4b23      	ldr	r3, [pc, #140]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fa8:	2207      	movs	r2, #7
 8001faa:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fac:	4b21      	ldr	r3, [pc, #132]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001fb2:	4b20      	ldr	r3, [pc, #128]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001fb8:	4b1e      	ldr	r3, [pc, #120]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fba:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001fbe:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001fc0:	4b1c      	ldr	r3, [pc, #112]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fc2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001fce:	4b19      	ldr	r3, [pc, #100]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fd4:	4b17      	ldr	r3, [pc, #92]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001fda:	4b16      	ldr	r3, [pc, #88]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001fe0:	4b14      	ldr	r3, [pc, #80]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fe2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001fe6:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001fe8:	4b12      	ldr	r3, [pc, #72]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001fee:	4b11      	ldr	r3, [pc, #68]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ff4:	4b0f      	ldr	r3, [pc, #60]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001ffa:	4b0e      	ldr	r3, [pc, #56]	; (8002034 <MX_SPI3_Init+0xa8>)
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8002000:	4b0c      	ldr	r3, [pc, #48]	; (8002034 <MX_SPI3_Init+0xa8>)
 8002002:	2200      	movs	r2, #0
 8002004:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8002006:	4b0b      	ldr	r3, [pc, #44]	; (8002034 <MX_SPI3_Init+0xa8>)
 8002008:	2200      	movs	r2, #0
 800200a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800200c:	4b09      	ldr	r3, [pc, #36]	; (8002034 <MX_SPI3_Init+0xa8>)
 800200e:	2200      	movs	r2, #0
 8002010:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8002012:	4b08      	ldr	r3, [pc, #32]	; (8002034 <MX_SPI3_Init+0xa8>)
 8002014:	2200      	movs	r2, #0
 8002016:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <MX_SPI3_Init+0xa8>)
 800201a:	2200      	movs	r2, #0
 800201c:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800201e:	4805      	ldr	r0, [pc, #20]	; (8002034 <MX_SPI3_Init+0xa8>)
 8002020:	f006 ff76 	bl	8008f10 <HAL_SPI_Init>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800202a:	f000 f9df 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800202e:	bf00      	nop
 8002030:	bd80      	pop	{r7, pc}
 8002032:	bf00      	nop
 8002034:	24000250 	.word	0x24000250
 8002038:	40003c00 	.word	0x40003c00

0800203c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002040:	4b22      	ldr	r3, [pc, #136]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <MX_USART3_UART_Init+0x94>)
 8002044:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002048:	4a22      	ldr	r2, [pc, #136]	; (80020d4 <MX_USART3_UART_Init+0x98>)
 800204a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800204c:	4b1f      	ldr	r3, [pc, #124]	; (80020cc <MX_USART3_UART_Init+0x90>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002052:	4b1e      	ldr	r3, [pc, #120]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002054:	2200      	movs	r2, #0
 8002056:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002058:	4b1c      	ldr	r3, [pc, #112]	; (80020cc <MX_USART3_UART_Init+0x90>)
 800205a:	2200      	movs	r2, #0
 800205c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800205e:	4b1b      	ldr	r3, [pc, #108]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002060:	220c      	movs	r2, #12
 8002062:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002064:	4b19      	ldr	r3, [pc, #100]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002066:	2200      	movs	r2, #0
 8002068:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800206a:	4b18      	ldr	r3, [pc, #96]	; (80020cc <MX_USART3_UART_Init+0x90>)
 800206c:	2200      	movs	r2, #0
 800206e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002070:	4b16      	ldr	r3, [pc, #88]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002072:	2200      	movs	r2, #0
 8002074:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002076:	4b15      	ldr	r3, [pc, #84]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002078:	2200      	movs	r2, #0
 800207a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <MX_USART3_UART_Init+0x90>)
 800207e:	2200      	movs	r2, #0
 8002080:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002082:	4812      	ldr	r0, [pc, #72]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002084:	f007 fb25 	bl	80096d2 <HAL_UART_Init>
 8002088:	4603      	mov	r3, r0
 800208a:	2b00      	cmp	r3, #0
 800208c:	d001      	beq.n	8002092 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800208e:	f000 f9ad 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002092:	2100      	movs	r1, #0
 8002094:	480d      	ldr	r0, [pc, #52]	; (80020cc <MX_USART3_UART_Init+0x90>)
 8002096:	f008 ff47 	bl	800af28 <HAL_UARTEx_SetTxFifoThreshold>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80020a0:	f000 f9a4 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80020a4:	2100      	movs	r1, #0
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <MX_USART3_UART_Init+0x90>)
 80020a8:	f008 ff7c 	bl	800afa4 <HAL_UARTEx_SetRxFifoThreshold>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80020b2:	f000 f99b 	bl	80023ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80020b6:	4805      	ldr	r0, [pc, #20]	; (80020cc <MX_USART3_UART_Init+0x90>)
 80020b8:	f008 fefd 	bl	800aeb6 <HAL_UARTEx_DisableFifoMode>
 80020bc:	4603      	mov	r3, r0
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80020c2:	f000 f993 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	240002d8 	.word	0x240002d8
 80020d0:	40004800 	.word	0x40004800
 80020d4:	0005dc00 	.word	0x0005dc00

080020d8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80020dc:	4b15      	ldr	r3, [pc, #84]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020de:	4a16      	ldr	r2, [pc, #88]	; (8002138 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80020e0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80020e2:	4b14      	ldr	r3, [pc, #80]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020e4:	2209      	movs	r2, #9
 80020e6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80020e8:	4b12      	ldr	r3, [pc, #72]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020ea:	2202      	movs	r2, #2
 80020ec:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80020ee:	4b11      	ldr	r3, [pc, #68]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020f0:	2200      	movs	r2, #0
 80020f2:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80020f4:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020f6:	2202      	movs	r2, #2
 80020f8:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80020fa:	4b0e      	ldr	r3, [pc, #56]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8002100:	4b0c      	ldr	r3, [pc, #48]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002102:	2200      	movs	r2, #0
 8002104:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8002106:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002108:	2200      	movs	r2, #0
 800210a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800210c:	4b09      	ldr	r3, [pc, #36]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800210e:	2201      	movs	r2, #1
 8002110:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8002112:	4b08      	ldr	r3, [pc, #32]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002114:	2201      	movs	r2, #1
 8002116:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002118:	4b06      	ldr	r3, [pc, #24]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800211a:	2200      	movs	r2, #0
 800211c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8002120:	f004 fa22 	bl	8006568 <HAL_PCD_Init>
 8002124:	4603      	mov	r3, r0
 8002126:	2b00      	cmp	r3, #0
 8002128:	d001      	beq.n	800212e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800212a:	f000 f95f 	bl	80023ec <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	24000458 	.word	0x24000458
 8002138:	40080000 	.word	0x40080000

0800213c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b082      	sub	sp, #8
 8002140:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002142:	4b11      	ldr	r3, [pc, #68]	; (8002188 <MX_DMA_Init+0x4c>)
 8002144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002148:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <MX_DMA_Init+0x4c>)
 800214a:	f043 0301 	orr.w	r3, r3, #1
 800214e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002152:	4b0d      	ldr	r3, [pc, #52]	; (8002188 <MX_DMA_Init+0x4c>)
 8002154:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002158:	f003 0301 	and.w	r3, r3, #1
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002160:	2200      	movs	r2, #0
 8002162:	2100      	movs	r1, #0
 8002164:	200c      	movs	r0, #12
 8002166:	f001 f956 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800216a:	200c      	movs	r0, #12
 800216c:	f001 f96d 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8002170:	2200      	movs	r2, #0
 8002172:	2100      	movs	r1, #0
 8002174:	200f      	movs	r0, #15
 8002176:	f001 f94e 	bl	8003416 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 800217a:	200f      	movs	r0, #15
 800217c:	f001 f965 	bl	800344a <HAL_NVIC_EnableIRQ>

}
 8002180:	bf00      	nop
 8002182:	3708      	adds	r7, #8
 8002184:	46bd      	mov	sp, r7
 8002186:	bd80      	pop	{r7, pc}
 8002188:	58024400 	.word	0x58024400

0800218c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b08e      	sub	sp, #56	; 0x38
 8002190:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002192:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
 800219a:	605a      	str	r2, [r3, #4]
 800219c:	609a      	str	r2, [r3, #8]
 800219e:	60da      	str	r2, [r3, #12]
 80021a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a2:	4b8a      	ldr	r3, [pc, #552]	; (80023cc <MX_GPIO_Init+0x240>)
 80021a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021a8:	4a88      	ldr	r2, [pc, #544]	; (80023cc <MX_GPIO_Init+0x240>)
 80021aa:	f043 0304 	orr.w	r3, r3, #4
 80021ae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021b2:	4b86      	ldr	r3, [pc, #536]	; (80023cc <MX_GPIO_Init+0x240>)
 80021b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021b8:	f003 0304 	and.w	r3, r3, #4
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021c0:	4b82      	ldr	r3, [pc, #520]	; (80023cc <MX_GPIO_Init+0x240>)
 80021c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021c6:	4a81      	ldr	r2, [pc, #516]	; (80023cc <MX_GPIO_Init+0x240>)
 80021c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021cc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021d0:	4b7e      	ldr	r3, [pc, #504]	; (80023cc <MX_GPIO_Init+0x240>)
 80021d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021da:	61fb      	str	r3, [r7, #28]
 80021dc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	4b7b      	ldr	r3, [pc, #492]	; (80023cc <MX_GPIO_Init+0x240>)
 80021e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021e4:	4a79      	ldr	r2, [pc, #484]	; (80023cc <MX_GPIO_Init+0x240>)
 80021e6:	f043 0301 	orr.w	r3, r3, #1
 80021ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80021ee:	4b77      	ldr	r3, [pc, #476]	; (80023cc <MX_GPIO_Init+0x240>)
 80021f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fc:	4b73      	ldr	r3, [pc, #460]	; (80023cc <MX_GPIO_Init+0x240>)
 80021fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002202:	4a72      	ldr	r2, [pc, #456]	; (80023cc <MX_GPIO_Init+0x240>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800220c:	4b6f      	ldr	r3, [pc, #444]	; (80023cc <MX_GPIO_Init+0x240>)
 800220e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002212:	f003 0302 	and.w	r3, r3, #2
 8002216:	617b      	str	r3, [r7, #20]
 8002218:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800221a:	4b6c      	ldr	r3, [pc, #432]	; (80023cc <MX_GPIO_Init+0x240>)
 800221c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002220:	4a6a      	ldr	r2, [pc, #424]	; (80023cc <MX_GPIO_Init+0x240>)
 8002222:	f043 0320 	orr.w	r3, r3, #32
 8002226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800222a:	4b68      	ldr	r3, [pc, #416]	; (80023cc <MX_GPIO_Init+0x240>)
 800222c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002230:	f003 0320 	and.w	r3, r3, #32
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002238:	4b64      	ldr	r3, [pc, #400]	; (80023cc <MX_GPIO_Init+0x240>)
 800223a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800223e:	4a63      	ldr	r2, [pc, #396]	; (80023cc <MX_GPIO_Init+0x240>)
 8002240:	f043 0310 	orr.w	r3, r3, #16
 8002244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002248:	4b60      	ldr	r3, [pc, #384]	; (80023cc <MX_GPIO_Init+0x240>)
 800224a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224e:	f003 0310 	and.w	r3, r3, #16
 8002252:	60fb      	str	r3, [r7, #12]
 8002254:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <MX_GPIO_Init+0x240>)
 8002258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225c:	4a5b      	ldr	r2, [pc, #364]	; (80023cc <MX_GPIO_Init+0x240>)
 800225e:	f043 0308 	orr.w	r3, r3, #8
 8002262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002266:	4b59      	ldr	r3, [pc, #356]	; (80023cc <MX_GPIO_Init+0x240>)
 8002268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226c:	f003 0308 	and.w	r3, r3, #8
 8002270:	60bb      	str	r3, [r7, #8]
 8002272:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002274:	4b55      	ldr	r3, [pc, #340]	; (80023cc <MX_GPIO_Init+0x240>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	4a54      	ldr	r2, [pc, #336]	; (80023cc <MX_GPIO_Init+0x240>)
 800227c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002284:	4b51      	ldr	r3, [pc, #324]	; (80023cc <MX_GPIO_Init+0x240>)
 8002286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800228a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800228e:	607b      	str	r3, [r7, #4]
 8002290:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8002292:	2201      	movs	r2, #1
 8002294:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002298:	484d      	ldr	r0, [pc, #308]	; (80023d0 <MX_GPIO_Init+0x244>)
 800229a:	f004 f903 	bl	80064a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 800229e:	2200      	movs	r2, #0
 80022a0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022a4:	484a      	ldr	r0, [pc, #296]	; (80023d0 <MX_GPIO_Init+0x244>)
 80022a6:	f004 f8fd 	bl	80064a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80022aa:	2200      	movs	r2, #0
 80022ac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80022b0:	4848      	ldr	r0, [pc, #288]	; (80023d4 <MX_GPIO_Init+0x248>)
 80022b2:	f004 f8f7 	bl	80064a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80022b6:	2200      	movs	r2, #0
 80022b8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80022bc:	4846      	ldr	r0, [pc, #280]	; (80023d8 <MX_GPIO_Init+0x24c>)
 80022be:	f004 f8f1 	bl	80064a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80022c2:	2201      	movs	r2, #1
 80022c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022c8:	4844      	ldr	r0, [pc, #272]	; (80023dc <MX_GPIO_Init+0x250>)
 80022ca:	f004 f8eb 	bl	80064a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 80022ce:	230d      	movs	r3, #13
 80022d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022d2:	2300      	movs	r3, #0
 80022d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d6:	2300      	movs	r3, #0
 80022d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022de:	4619      	mov	r1, r3
 80022e0:	483f      	ldr	r0, [pc, #252]	; (80023e0 <MX_GPIO_Init+0x254>)
 80022e2:	f003 ff17 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80022e6:	2308      	movs	r3, #8
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80022f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80022f6:	4619      	mov	r1, r3
 80022f8:	483a      	ldr	r0, [pc, #232]	; (80023e4 <MX_GPIO_Init+0x258>)
 80022fa:	f003 ff0b 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80022fe:	2302      	movs	r3, #2
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002302:	2300      	movs	r3, #0
 8002304:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 800230a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800230e:	4619      	mov	r1, r3
 8002310:	4830      	ldr	r0, [pc, #192]	; (80023d4 <MX_GPIO_Init+0x248>)
 8002312:	f003 feff 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8002316:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800231a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800231c:	2300      	movs	r3, #0
 800231e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002320:	2300      	movs	r3, #0
 8002322:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8002324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002328:	4619      	mov	r1, r3
 800232a:	482f      	ldr	r0, [pc, #188]	; (80023e8 <MX_GPIO_Init+0x25c>)
 800232c:	f003 fef2 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002330:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8002334:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002336:	2301      	movs	r3, #1
 8002338:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002342:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002346:	4619      	mov	r1, r3
 8002348:	4821      	ldr	r0, [pc, #132]	; (80023d0 <MX_GPIO_Init+0x244>)
 800234a:	f003 fee3 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800234e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002352:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002354:	2301      	movs	r3, #1
 8002356:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002358:	2300      	movs	r3, #0
 800235a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235c:	2300      	movs	r3, #0
 800235e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002360:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002364:	4619      	mov	r1, r3
 8002366:	481b      	ldr	r0, [pc, #108]	; (80023d4 <MX_GPIO_Init+0x248>)
 8002368:	f003 fed4 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 800236c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002370:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002372:	2301      	movs	r3, #1
 8002374:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002376:	2300      	movs	r3, #0
 8002378:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800237a:	2300      	movs	r3, #0
 800237c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002382:	4619      	mov	r1, r3
 8002384:	4814      	ldr	r0, [pc, #80]	; (80023d8 <MX_GPIO_Init+0x24c>)
 8002386:	f003 fec5 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 800238a:	2380      	movs	r3, #128	; 0x80
 800238c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800238e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002392:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002394:	2300      	movs	r3, #0
 8002396:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002398:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800239c:	4619      	mov	r1, r3
 800239e:	480f      	ldr	r0, [pc, #60]	; (80023dc <MX_GPIO_Init+0x250>)
 80023a0:	f003 feb8 	bl	8006114 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80023a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023aa:	2301      	movs	r3, #1
 80023ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80023b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023ba:	4619      	mov	r1, r3
 80023bc:	4807      	ldr	r0, [pc, #28]	; (80023dc <MX_GPIO_Init+0x250>)
 80023be:	f003 fea9 	bl	8006114 <HAL_GPIO_Init>

}
 80023c2:	bf00      	nop
 80023c4:	3738      	adds	r7, #56	; 0x38
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	58024400 	.word	0x58024400
 80023d0:	58021000 	.word	0x58021000
 80023d4:	58020400 	.word	0x58020400
 80023d8:	58020c00 	.word	0x58020c00
 80023dc:	58021800 	.word	0x58021800
 80023e0:	58020800 	.word	0x58020800
 80023e4:	58020000 	.word	0x58020000
 80023e8:	58021400 	.word	0x58021400

080023ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023f0:	b672      	cpsid	i
}
 80023f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80023f4:	e7fe      	b.n	80023f4 <Error_Handler+0x8>
	...

080023f8 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80023fc:	2200      	movs	r2, #0
 80023fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002402:	4802      	ldr	r0, [pc, #8]	; (800240c <ST7735_Select+0x14>)
 8002404:	f004 f84e 	bl	80064a4 <HAL_GPIO_WritePin>
}
 8002408:	bf00      	nop
 800240a:	bd80      	pop	{r7, pc}
 800240c:	58021000 	.word	0x58021000

08002410 <ST7735_Unselect>:

void ST7735_Unselect() {
 8002410:	b580      	push	{r7, lr}
 8002412:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 8002414:	2201      	movs	r2, #1
 8002416:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800241a:	4802      	ldr	r0, [pc, #8]	; (8002424 <ST7735_Unselect+0x14>)
 800241c:	f004 f842 	bl	80064a4 <HAL_GPIO_WritePin>
}
 8002420:	bf00      	nop
 8002422:	bd80      	pop	{r7, pc}
 8002424:	58021000 	.word	0x58021000

08002428 <ST7735_Select1>:
static void ST7735_Select1() {
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002432:	4802      	ldr	r0, [pc, #8]	; (800243c <ST7735_Select1+0x14>)
 8002434:	f004 f836 	bl	80064a4 <HAL_GPIO_WritePin>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}
 800243c:	58021000 	.word	0x58021000

08002440 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800244a:	4802      	ldr	r0, [pc, #8]	; (8002454 <ST7735_Unselect1+0x14>)
 800244c:	f004 f82a 	bl	80064a4 <HAL_GPIO_WritePin>
}
 8002450:	bf00      	nop
 8002452:	bd80      	pop	{r7, pc}
 8002454:	58021000 	.word	0x58021000

08002458 <ST7735_Reset>:

static void ST7735_Reset() {
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800245c:	2200      	movs	r2, #0
 800245e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002462:	4807      	ldr	r0, [pc, #28]	; (8002480 <ST7735_Reset+0x28>)
 8002464:	f004 f81e 	bl	80064a4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002468:	2005      	movs	r0, #5
 800246a:	f000 feb5 	bl	80031d8 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800246e:	2201      	movs	r2, #1
 8002470:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002474:	4802      	ldr	r0, [pc, #8]	; (8002480 <ST7735_Reset+0x28>)
 8002476:	f004 f815 	bl	80064a4 <HAL_GPIO_WritePin>
}
 800247a:	bf00      	nop
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	58021000 	.word	0x58021000

08002484 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800248e:	2200      	movs	r2, #0
 8002490:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002494:	4806      	ldr	r0, [pc, #24]	; (80024b0 <ST7735_WriteCommand+0x2c>)
 8002496:	f004 f805 	bl	80064a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800249a:	1df9      	adds	r1, r7, #7
 800249c:	f04f 33ff 	mov.w	r3, #4294967295
 80024a0:	2201      	movs	r2, #1
 80024a2:	4804      	ldr	r0, [pc, #16]	; (80024b4 <ST7735_WriteCommand+0x30>)
 80024a4:	f006 fe3a 	bl	800911c <HAL_SPI_Transmit>
}
 80024a8:	bf00      	nop
 80024aa:	3708      	adds	r7, #8
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bd80      	pop	{r7, pc}
 80024b0:	58021800 	.word	0x58021800
 80024b4:	24000250 	.word	0x24000250

080024b8 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80024c2:	2201      	movs	r2, #1
 80024c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024c8:	4807      	ldr	r0, [pc, #28]	; (80024e8 <ST7735_WriteData+0x30>)
 80024ca:	f003 ffeb 	bl	80064a4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	b29a      	uxth	r2, r3
 80024d2:	f04f 33ff 	mov.w	r3, #4294967295
 80024d6:	6879      	ldr	r1, [r7, #4]
 80024d8:	4804      	ldr	r0, [pc, #16]	; (80024ec <ST7735_WriteData+0x34>)
 80024da:	f006 fe1f 	bl	800911c <HAL_SPI_Transmit>
}
 80024de:	bf00      	nop
 80024e0:	3708      	adds	r7, #8
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	58021800 	.word	0x58021800
 80024ec:	24000250 	.word	0x24000250

080024f0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b084      	sub	sp, #16
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 8002502:	e034      	b.n	800256e <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	1c5a      	adds	r2, r3, #1
 8002508:	607a      	str	r2, [r7, #4]
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 800250e:	7afb      	ldrb	r3, [r7, #11]
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff ffb7 	bl	8002484 <ST7735_WriteCommand>

        numArgs = *addr++;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	1c5a      	adds	r2, r3, #1
 800251a:	607a      	str	r2, [r7, #4]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8002520:	7abb      	ldrb	r3, [r7, #10]
 8002522:	b29b      	uxth	r3, r3
 8002524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002528:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 800252a:	7abb      	ldrb	r3, [r7, #10]
 800252c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002530:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 8002532:	7abb      	ldrb	r3, [r7, #10]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d008      	beq.n	800254a <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002538:	7abb      	ldrb	r3, [r7, #10]
 800253a:	4619      	mov	r1, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f7ff ffbb 	bl	80024b8 <ST7735_WriteData>
            addr += numArgs;
 8002542:	7abb      	ldrb	r3, [r7, #10]
 8002544:	687a      	ldr	r2, [r7, #4]
 8002546:	4413      	add	r3, r2
 8002548:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 800254a:	89bb      	ldrh	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d00e      	beq.n	800256e <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	1c5a      	adds	r2, r3, #1
 8002554:	607a      	str	r2, [r7, #4]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 800255a:	89bb      	ldrh	r3, [r7, #12]
 800255c:	2bff      	cmp	r3, #255	; 0xff
 800255e:	d102      	bne.n	8002566 <ST7735_ExecuteCommandList+0x76>
 8002560:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002564:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 8002566:	89bb      	ldrh	r3, [r7, #12]
 8002568:	4618      	mov	r0, r3
 800256a:	f000 fe35 	bl	80031d8 <HAL_Delay>
    while(numCommands--) {
 800256e:	7bfb      	ldrb	r3, [r7, #15]
 8002570:	1e5a      	subs	r2, r3, #1
 8002572:	73fa      	strb	r2, [r7, #15]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d1c5      	bne.n	8002504 <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002578:	bf00      	nop
 800257a:	bf00      	nop
 800257c:	3710      	adds	r7, #16
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002582:	b590      	push	{r4, r7, lr}
 8002584:	b085      	sub	sp, #20
 8002586:	af00      	add	r7, sp, #0
 8002588:	4604      	mov	r4, r0
 800258a:	4608      	mov	r0, r1
 800258c:	4611      	mov	r1, r2
 800258e:	461a      	mov	r2, r3
 8002590:	4623      	mov	r3, r4
 8002592:	71fb      	strb	r3, [r7, #7]
 8002594:	4603      	mov	r3, r0
 8002596:	71bb      	strb	r3, [r7, #6]
 8002598:	460b      	mov	r3, r1
 800259a:	717b      	strb	r3, [r7, #5]
 800259c:	4613      	mov	r3, r2
 800259e:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80025a0:	202a      	movs	r0, #42	; 0x2a
 80025a2:	f7ff ff6f 	bl	8002484 <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80025a6:	2300      	movs	r3, #0
 80025a8:	733b      	strb	r3, [r7, #12]
 80025aa:	79fb      	ldrb	r3, [r7, #7]
 80025ac:	3302      	adds	r3, #2
 80025ae:	b2db      	uxtb	r3, r3
 80025b0:	737b      	strb	r3, [r7, #13]
 80025b2:	2300      	movs	r3, #0
 80025b4:	73bb      	strb	r3, [r7, #14]
 80025b6:	797b      	ldrb	r3, [r7, #5]
 80025b8:	3302      	adds	r3, #2
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80025be:	f107 030c 	add.w	r3, r7, #12
 80025c2:	2104      	movs	r1, #4
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff ff77 	bl	80024b8 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80025ca:	202b      	movs	r0, #43	; 0x2b
 80025cc:	f7ff ff5a 	bl	8002484 <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80025d0:	79bb      	ldrb	r3, [r7, #6]
 80025d2:	3301      	adds	r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80025d8:	793b      	ldrb	r3, [r7, #4]
 80025da:	3301      	adds	r3, #1
 80025dc:	b2db      	uxtb	r3, r3
 80025de:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	2104      	movs	r1, #4
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7ff ff66 	bl	80024b8 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80025ec:	202c      	movs	r0, #44	; 0x2c
 80025ee:	f7ff ff49 	bl	8002484 <ST7735_WriteCommand>
}
 80025f2:	bf00      	nop
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd90      	pop	{r4, r7, pc}
	...

080025fc <ST7735_Init>:

void ST7735_Init() {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
    ST7735_Select();
 8002600:	f7ff fefa 	bl	80023f8 <ST7735_Select>
    ST7735_Select1();
 8002604:	f7ff ff10 	bl	8002428 <ST7735_Select1>
    ST7735_Reset();
 8002608:	f7ff ff26 	bl	8002458 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 800260c:	4807      	ldr	r0, [pc, #28]	; (800262c <ST7735_Init+0x30>)
 800260e:	f7ff ff6f 	bl	80024f0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 8002612:	4807      	ldr	r0, [pc, #28]	; (8002630 <ST7735_Init+0x34>)
 8002614:	f7ff ff6c 	bl	80024f0 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8002618:	4806      	ldr	r0, [pc, #24]	; (8002634 <ST7735_Init+0x38>)
 800261a:	f7ff ff69 	bl	80024f0 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 800261e:	f7ff fef7 	bl	8002410 <ST7735_Unselect>
    ST7735_Unselect1();
 8002622:	f7ff ff0d 	bl	8002440 <ST7735_Unselect1>
}
 8002626:	bf00      	nop
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	0800d5e8 	.word	0x0800d5e8
 8002630:	0800d624 	.word	0x0800d624
 8002634:	0800d634 	.word	0x0800d634

08002638 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002638:	b082      	sub	sp, #8
 800263a:	b590      	push	{r4, r7, lr}
 800263c:	b089      	sub	sp, #36	; 0x24
 800263e:	af00      	add	r7, sp, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
 8002642:	4603      	mov	r3, r0
 8002644:	80fb      	strh	r3, [r7, #6]
 8002646:	460b      	mov	r3, r1
 8002648:	80bb      	strh	r3, [r7, #4]
 800264a:	4613      	mov	r3, r2
 800264c:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 800264e:	88fb      	ldrh	r3, [r7, #6]
 8002650:	b2d8      	uxtb	r0, r3
 8002652:	88bb      	ldrh	r3, [r7, #4]
 8002654:	b2d9      	uxtb	r1, r3
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	b2da      	uxtb	r2, r3
 800265a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800265e:	4413      	add	r3, r2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	3b01      	subs	r3, #1
 8002664:	b2dc      	uxtb	r4, r3
 8002666:	88bb      	ldrh	r3, [r7, #4]
 8002668:	b2da      	uxtb	r2, r3
 800266a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800266e:	4413      	add	r3, r2
 8002670:	b2db      	uxtb	r3, r3
 8002672:	3b01      	subs	r3, #1
 8002674:	b2db      	uxtb	r3, r3
 8002676:	4622      	mov	r2, r4
 8002678:	f7ff ff83 	bl	8002582 <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 800267c:	2300      	movs	r3, #0
 800267e:	61fb      	str	r3, [r7, #28]
 8002680:	e043      	b.n	800270a <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 8002682:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	3b20      	subs	r3, #32
 8002688:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800268c:	fb01 f303 	mul.w	r3, r1, r3
 8002690:	4619      	mov	r1, r3
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	440b      	add	r3, r1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	4413      	add	r3, r2
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	e029      	b.n	80026f8 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 80026a4:	697a      	ldr	r2, [r7, #20]
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00e      	beq.n	80026d2 <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 80026b4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	b29b      	uxth	r3, r3
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	743b      	strb	r3, [r7, #16]
 80026be:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 80026c4:	f107 0310 	add.w	r3, r7, #16
 80026c8:	2102      	movs	r1, #2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7ff fef4 	bl	80024b8 <ST7735_WriteData>
 80026d0:	e00f      	b.n	80026f2 <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80026d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026d6:	0a1b      	lsrs	r3, r3, #8
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	733b      	strb	r3, [r7, #12]
 80026de:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80026e2:	b2db      	uxtb	r3, r3
 80026e4:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80026e6:	f107 030c 	add.w	r3, r7, #12
 80026ea:	2102      	movs	r1, #2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff fee3 	bl	80024b8 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	3301      	adds	r3, #1
 80026f6:	61bb      	str	r3, [r7, #24]
 80026f8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80026fc:	461a      	mov	r2, r3
 80026fe:	69bb      	ldr	r3, [r7, #24]
 8002700:	4293      	cmp	r3, r2
 8002702:	d3cf      	bcc.n	80026a4 <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	3301      	adds	r3, #1
 8002708:	61fb      	str	r3, [r7, #28]
 800270a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800270e:	461a      	mov	r2, r3
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	4293      	cmp	r3, r2
 8002714:	d3b5      	bcc.n	8002682 <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 8002716:	bf00      	nop
 8002718:	bf00      	nop
 800271a:	3724      	adds	r7, #36	; 0x24
 800271c:	46bd      	mov	sp, r7
 800271e:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8002722:	b002      	add	sp, #8
 8002724:	4770      	bx	lr

08002726 <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002726:	b082      	sub	sp, #8
 8002728:	b580      	push	{r7, lr}
 800272a:	b086      	sub	sp, #24
 800272c:	af04      	add	r7, sp, #16
 800272e:	603a      	str	r2, [r7, #0]
 8002730:	617b      	str	r3, [r7, #20]
 8002732:	4603      	mov	r3, r0
 8002734:	80fb      	strh	r3, [r7, #6]
 8002736:	460b      	mov	r3, r1
 8002738:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 800273a:	f7ff fe5d 	bl	80023f8 <ST7735_Select>

    while(*str) {
 800273e:	e02d      	b.n	800279c <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002740:	88fb      	ldrh	r3, [r7, #6]
 8002742:	7d3a      	ldrb	r2, [r7, #20]
 8002744:	4413      	add	r3, r2
 8002746:	2b7f      	cmp	r3, #127	; 0x7f
 8002748:	dd13      	ble.n	8002772 <ST7735_WriteString+0x4c>
            x = 0;
 800274a:	2300      	movs	r3, #0
 800274c:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 800274e:	7d7b      	ldrb	r3, [r7, #21]
 8002750:	b29a      	uxth	r2, r3
 8002752:	88bb      	ldrh	r3, [r7, #4]
 8002754:	4413      	add	r3, r2
 8002756:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002758:	88bb      	ldrh	r3, [r7, #4]
 800275a:	7d7a      	ldrb	r2, [r7, #21]
 800275c:	4413      	add	r3, r2
 800275e:	2b7f      	cmp	r3, #127	; 0x7f
 8002760:	dc21      	bgt.n	80027a6 <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	781b      	ldrb	r3, [r3, #0]
 8002766:	2b20      	cmp	r3, #32
 8002768:	d103      	bne.n	8002772 <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	3301      	adds	r3, #1
 800276e:	603b      	str	r3, [r7, #0]
                continue;
 8002770:	e014      	b.n	800279c <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	781a      	ldrb	r2, [r3, #0]
 8002776:	88b9      	ldrh	r1, [r7, #4]
 8002778:	88f8      	ldrh	r0, [r7, #6]
 800277a:	8c3b      	ldrh	r3, [r7, #32]
 800277c:	9302      	str	r3, [sp, #8]
 800277e:	8bbb      	ldrh	r3, [r7, #28]
 8002780:	9301      	str	r3, [sp, #4]
 8002782:	69bb      	ldr	r3, [r7, #24]
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	697b      	ldr	r3, [r7, #20]
 8002788:	f7ff ff56 	bl	8002638 <ST7735_WriteChar>
        x += font.width;
 800278c:	7d3b      	ldrb	r3, [r7, #20]
 800278e:	b29a      	uxth	r2, r3
 8002790:	88fb      	ldrh	r3, [r7, #6]
 8002792:	4413      	add	r3, r2
 8002794:	80fb      	strh	r3, [r7, #6]
        str++;
 8002796:	683b      	ldr	r3, [r7, #0]
 8002798:	3301      	adds	r3, #1
 800279a:	603b      	str	r3, [r7, #0]
    while(*str) {
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d1cd      	bne.n	8002740 <ST7735_WriteString+0x1a>
 80027a4:	e000      	b.n	80027a8 <ST7735_WriteString+0x82>
                break;
 80027a6:	bf00      	nop
    }

    ST7735_Unselect();
 80027a8:	f7ff fe32 	bl	8002410 <ST7735_Unselect>
}
 80027ac:	bf00      	nop
 80027ae:	3708      	adds	r7, #8
 80027b0:	46bd      	mov	sp, r7
 80027b2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027b6:	b002      	add	sp, #8
 80027b8:	4770      	bx	lr

080027ba <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80027ba:	b082      	sub	sp, #8
 80027bc:	b580      	push	{r7, lr}
 80027be:	b086      	sub	sp, #24
 80027c0:	af04      	add	r7, sp, #16
 80027c2:	603a      	str	r2, [r7, #0]
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	4603      	mov	r3, r0
 80027c8:	80fb      	strh	r3, [r7, #6]
 80027ca:	460b      	mov	r3, r1
 80027cc:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 80027ce:	f7ff fe2b 	bl	8002428 <ST7735_Select1>

    while(*str) {
 80027d2:	e02d      	b.n	8002830 <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80027d4:	88fb      	ldrh	r3, [r7, #6]
 80027d6:	7d3a      	ldrb	r2, [r7, #20]
 80027d8:	4413      	add	r3, r2
 80027da:	2b7f      	cmp	r3, #127	; 0x7f
 80027dc:	dd13      	ble.n	8002806 <ST7735_WriteString1+0x4c>
            x = 0;
 80027de:	2300      	movs	r3, #0
 80027e0:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80027e2:	7d7b      	ldrb	r3, [r7, #21]
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	88bb      	ldrh	r3, [r7, #4]
 80027e8:	4413      	add	r3, r2
 80027ea:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80027ec:	88bb      	ldrh	r3, [r7, #4]
 80027ee:	7d7a      	ldrb	r2, [r7, #21]
 80027f0:	4413      	add	r3, r2
 80027f2:	2b7f      	cmp	r3, #127	; 0x7f
 80027f4:	dc21      	bgt.n	800283a <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b20      	cmp	r3, #32
 80027fc:	d103      	bne.n	8002806 <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	3301      	adds	r3, #1
 8002802:	603b      	str	r3, [r7, #0]
                continue;
 8002804:	e014      	b.n	8002830 <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	781a      	ldrb	r2, [r3, #0]
 800280a:	88b9      	ldrh	r1, [r7, #4]
 800280c:	88f8      	ldrh	r0, [r7, #6]
 800280e:	8c3b      	ldrh	r3, [r7, #32]
 8002810:	9302      	str	r3, [sp, #8]
 8002812:	8bbb      	ldrh	r3, [r7, #28]
 8002814:	9301      	str	r3, [sp, #4]
 8002816:	69bb      	ldr	r3, [r7, #24]
 8002818:	9300      	str	r3, [sp, #0]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f7ff ff0c 	bl	8002638 <ST7735_WriteChar>
        x += font.width;
 8002820:	7d3b      	ldrb	r3, [r7, #20]
 8002822:	b29a      	uxth	r2, r3
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	4413      	add	r3, r2
 8002828:	80fb      	strh	r3, [r7, #6]
        str++;
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	3301      	adds	r3, #1
 800282e:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d1cd      	bne.n	80027d4 <ST7735_WriteString1+0x1a>
 8002838:	e000      	b.n	800283c <ST7735_WriteString1+0x82>
                break;
 800283a:	bf00      	nop
    }

    ST7735_Unselect1();
 800283c:	f7ff fe00 	bl	8002440 <ST7735_Unselect1>
}
 8002840:	bf00      	nop
 8002842:	3708      	adds	r7, #8
 8002844:	46bd      	mov	sp, r7
 8002846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800284a:	b002      	add	sp, #8
 800284c:	4770      	bx	lr
	...

08002850 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002850:	b590      	push	{r4, r7, lr}
 8002852:	b085      	sub	sp, #20
 8002854:	af00      	add	r7, sp, #0
 8002856:	4604      	mov	r4, r0
 8002858:	4608      	mov	r0, r1
 800285a:	4611      	mov	r1, r2
 800285c:	461a      	mov	r2, r3
 800285e:	4623      	mov	r3, r4
 8002860:	80fb      	strh	r3, [r7, #6]
 8002862:	4603      	mov	r3, r0
 8002864:	80bb      	strh	r3, [r7, #4]
 8002866:	460b      	mov	r3, r1
 8002868:	807b      	strh	r3, [r7, #2]
 800286a:	4613      	mov	r3, r2
 800286c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800286e:	88fb      	ldrh	r3, [r7, #6]
 8002870:	2b7f      	cmp	r3, #127	; 0x7f
 8002872:	d858      	bhi.n	8002926 <ST7735_FillRectangle+0xd6>
 8002874:	88bb      	ldrh	r3, [r7, #4]
 8002876:	2b7f      	cmp	r3, #127	; 0x7f
 8002878:	d855      	bhi.n	8002926 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800287a:	88fa      	ldrh	r2, [r7, #6]
 800287c:	887b      	ldrh	r3, [r7, #2]
 800287e:	4413      	add	r3, r2
 8002880:	2b80      	cmp	r3, #128	; 0x80
 8002882:	dd03      	ble.n	800288c <ST7735_FillRectangle+0x3c>
 8002884:	88fb      	ldrh	r3, [r7, #6]
 8002886:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800288a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800288c:	88ba      	ldrh	r2, [r7, #4]
 800288e:	883b      	ldrh	r3, [r7, #0]
 8002890:	4413      	add	r3, r2
 8002892:	2b80      	cmp	r3, #128	; 0x80
 8002894:	dd03      	ble.n	800289e <ST7735_FillRectangle+0x4e>
 8002896:	88bb      	ldrh	r3, [r7, #4]
 8002898:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800289c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800289e:	f7ff fdab 	bl	80023f8 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80028a2:	88fb      	ldrh	r3, [r7, #6]
 80028a4:	b2d8      	uxtb	r0, r3
 80028a6:	88bb      	ldrh	r3, [r7, #4]
 80028a8:	b2d9      	uxtb	r1, r3
 80028aa:	88fb      	ldrh	r3, [r7, #6]
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	887b      	ldrh	r3, [r7, #2]
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	4413      	add	r3, r2
 80028b4:	b2db      	uxtb	r3, r3
 80028b6:	3b01      	subs	r3, #1
 80028b8:	b2dc      	uxtb	r4, r3
 80028ba:	88bb      	ldrh	r3, [r7, #4]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	883b      	ldrh	r3, [r7, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	4413      	add	r3, r2
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	3b01      	subs	r3, #1
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	4622      	mov	r2, r4
 80028cc:	f7ff fe59 	bl	8002582 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80028d0:	8c3b      	ldrh	r3, [r7, #32]
 80028d2:	0a1b      	lsrs	r3, r3, #8
 80028d4:	b29b      	uxth	r3, r3
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	733b      	strb	r3, [r7, #12]
 80028da:	8c3b      	ldrh	r3, [r7, #32]
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80028e0:	2201      	movs	r2, #1
 80028e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e6:	4812      	ldr	r0, [pc, #72]	; (8002930 <ST7735_FillRectangle+0xe0>)
 80028e8:	f003 fddc 	bl	80064a4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80028ec:	883b      	ldrh	r3, [r7, #0]
 80028ee:	80bb      	strh	r3, [r7, #4]
 80028f0:	e013      	b.n	800291a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80028f2:	887b      	ldrh	r3, [r7, #2]
 80028f4:	80fb      	strh	r3, [r7, #6]
 80028f6:	e00a      	b.n	800290e <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80028f8:	f107 010c 	add.w	r1, r7, #12
 80028fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002900:	2202      	movs	r2, #2
 8002902:	480c      	ldr	r0, [pc, #48]	; (8002934 <ST7735_FillRectangle+0xe4>)
 8002904:	f006 fc0a 	bl	800911c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8002908:	88fb      	ldrh	r3, [r7, #6]
 800290a:	3b01      	subs	r3, #1
 800290c:	80fb      	strh	r3, [r7, #6]
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d1f1      	bne.n	80028f8 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8002914:	88bb      	ldrh	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	80bb      	strh	r3, [r7, #4]
 800291a:	88bb      	ldrh	r3, [r7, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1e8      	bne.n	80028f2 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8002920:	f7ff fd76 	bl	8002410 <ST7735_Unselect>
 8002924:	e000      	b.n	8002928 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002926:	bf00      	nop
}
 8002928:	3714      	adds	r7, #20
 800292a:	46bd      	mov	sp, r7
 800292c:	bd90      	pop	{r4, r7, pc}
 800292e:	bf00      	nop
 8002930:	58021800 	.word	0x58021800
 8002934:	24000250 	.word	0x24000250

08002938 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	4604      	mov	r4, r0
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	80fb      	strh	r3, [r7, #6]
 800294a:	4603      	mov	r3, r0
 800294c:	80bb      	strh	r3, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]
 8002952:	4613      	mov	r3, r2
 8002954:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	2b7f      	cmp	r3, #127	; 0x7f
 800295a:	d858      	bhi.n	8002a0e <ST7735_FillRectangle1+0xd6>
 800295c:	88bb      	ldrh	r3, [r7, #4]
 800295e:	2b7f      	cmp	r3, #127	; 0x7f
 8002960:	d855      	bhi.n	8002a0e <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002962:	88fa      	ldrh	r2, [r7, #6]
 8002964:	887b      	ldrh	r3, [r7, #2]
 8002966:	4413      	add	r3, r2
 8002968:	2b80      	cmp	r3, #128	; 0x80
 800296a:	dd03      	ble.n	8002974 <ST7735_FillRectangle1+0x3c>
 800296c:	88fb      	ldrh	r3, [r7, #6]
 800296e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002972:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002974:	88ba      	ldrh	r2, [r7, #4]
 8002976:	883b      	ldrh	r3, [r7, #0]
 8002978:	4413      	add	r3, r2
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	dd03      	ble.n	8002986 <ST7735_FillRectangle1+0x4e>
 800297e:	88bb      	ldrh	r3, [r7, #4]
 8002980:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002984:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 8002986:	f7ff fd4f 	bl	8002428 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800298a:	88fb      	ldrh	r3, [r7, #6]
 800298c:	b2d8      	uxtb	r0, r3
 800298e:	88bb      	ldrh	r3, [r7, #4]
 8002990:	b2d9      	uxtb	r1, r3
 8002992:	88fb      	ldrh	r3, [r7, #6]
 8002994:	b2da      	uxtb	r2, r3
 8002996:	887b      	ldrh	r3, [r7, #2]
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4413      	add	r3, r2
 800299c:	b2db      	uxtb	r3, r3
 800299e:	3b01      	subs	r3, #1
 80029a0:	b2dc      	uxtb	r4, r3
 80029a2:	88bb      	ldrh	r3, [r7, #4]
 80029a4:	b2da      	uxtb	r2, r3
 80029a6:	883b      	ldrh	r3, [r7, #0]
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	4413      	add	r3, r2
 80029ac:	b2db      	uxtb	r3, r3
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4622      	mov	r2, r4
 80029b4:	f7ff fde5 	bl	8002582 <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80029b8:	8c3b      	ldrh	r3, [r7, #32]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	b29b      	uxth	r3, r3
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	733b      	strb	r3, [r7, #12]
 80029c2:	8c3b      	ldrh	r3, [r7, #32]
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80029c8:	2201      	movs	r2, #1
 80029ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80029ce:	4812      	ldr	r0, [pc, #72]	; (8002a18 <ST7735_FillRectangle1+0xe0>)
 80029d0:	f003 fd68 	bl	80064a4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80029d4:	883b      	ldrh	r3, [r7, #0]
 80029d6:	80bb      	strh	r3, [r7, #4]
 80029d8:	e013      	b.n	8002a02 <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 80029da:	887b      	ldrh	r3, [r7, #2]
 80029dc:	80fb      	strh	r3, [r7, #6]
 80029de:	e00a      	b.n	80029f6 <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80029e0:	f107 010c 	add.w	r1, r7, #12
 80029e4:	f04f 33ff 	mov.w	r3, #4294967295
 80029e8:	2202      	movs	r2, #2
 80029ea:	480c      	ldr	r0, [pc, #48]	; (8002a1c <ST7735_FillRectangle1+0xe4>)
 80029ec:	f006 fb96 	bl	800911c <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80029f0:	88fb      	ldrh	r3, [r7, #6]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	80fb      	strh	r3, [r7, #6]
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1f1      	bne.n	80029e0 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80029fc:	88bb      	ldrh	r3, [r7, #4]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	80bb      	strh	r3, [r7, #4]
 8002a02:	88bb      	ldrh	r3, [r7, #4]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1e8      	bne.n	80029da <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 8002a08:	f7ff fd1a 	bl	8002440 <ST7735_Unselect1>
 8002a0c:	e000      	b.n	8002a10 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002a0e:	bf00      	nop
}
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd90      	pop	{r4, r7, pc}
 8002a16:	bf00      	nop
 8002a18:	58021800 	.word	0x58021800
 8002a1c:	24000250 	.word	0x24000250

08002a20 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af02      	add	r7, sp, #8
 8002a26:	4603      	mov	r3, r0
 8002a28:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002a2a:	88fb      	ldrh	r3, [r7, #6]
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2380      	movs	r3, #128	; 0x80
 8002a30:	2280      	movs	r2, #128	; 0x80
 8002a32:	2100      	movs	r1, #0
 8002a34:	2000      	movs	r0, #0
 8002a36:	f7ff ff0b 	bl	8002850 <ST7735_FillRectangle>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af02      	add	r7, sp, #8
 8002a48:	4603      	mov	r3, r0
 8002a4a:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002a4c:	88fb      	ldrh	r3, [r7, #6]
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2380      	movs	r3, #128	; 0x80
 8002a52:	2280      	movs	r2, #128	; 0x80
 8002a54:	2100      	movs	r1, #0
 8002a56:	2000      	movs	r0, #0
 8002a58:	f7ff ff6e 	bl	8002938 <ST7735_FillRectangle1>
}
 8002a5c:	bf00      	nop
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_MspInit+0x30>)
 8002a6c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a70:	4a08      	ldr	r2, [pc, #32]	; (8002a94 <HAL_MspInit+0x30>)
 8002a72:	f043 0302 	orr.w	r3, r3, #2
 8002a76:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002a7a:	4b06      	ldr	r3, [pc, #24]	; (8002a94 <HAL_MspInit+0x30>)
 8002a7c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	607b      	str	r3, [r7, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr
 8002a94:	58024400 	.word	0x58024400

08002a98 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b08e      	sub	sp, #56	; 0x38
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
 8002aae:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a59      	ldr	r2, [pc, #356]	; (8002c1c <HAL_ETH_MspInit+0x184>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	f040 80ab 	bne.w	8002c12 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002abc:	4b58      	ldr	r3, [pc, #352]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002abe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ac2:	4a57      	ldr	r2, [pc, #348]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002ac4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ac8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002acc:	4b54      	ldr	r3, [pc, #336]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002ace:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ad2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002ad6:	623b      	str	r3, [r7, #32]
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8002ada:	4b51      	ldr	r3, [pc, #324]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002adc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002ae0:	4a4f      	ldr	r2, [pc, #316]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002ae2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ae6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002aea:	4b4d      	ldr	r3, [pc, #308]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002af0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002af4:	61fb      	str	r3, [r7, #28]
 8002af6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8002af8:	4b49      	ldr	r3, [pc, #292]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002afa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002afe:	4a48      	ldr	r2, [pc, #288]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b04:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002b08:	4b45      	ldr	r3, [pc, #276]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b12:	61bb      	str	r3, [r7, #24]
 8002b14:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b16:	4b42      	ldr	r3, [pc, #264]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b1c:	4a40      	ldr	r2, [pc, #256]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b1e:	f043 0304 	orr.w	r3, r3, #4
 8002b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b26:	4b3e      	ldr	r3, [pc, #248]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	617b      	str	r3, [r7, #20]
 8002b32:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b34:	4b3a      	ldr	r3, [pc, #232]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b3a:	4a39      	ldr	r2, [pc, #228]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b3c:	f043 0301 	orr.w	r3, r3, #1
 8002b40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b44:	4b36      	ldr	r3, [pc, #216]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b4a:	f003 0301 	and.w	r3, r3, #1
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b52:	4b33      	ldr	r3, [pc, #204]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b58:	4a31      	ldr	r2, [pc, #196]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b5a:	f043 0302 	orr.w	r3, r3, #2
 8002b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b62:	4b2f      	ldr	r3, [pc, #188]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b68:	f003 0302 	and.w	r3, r3, #2
 8002b6c:	60fb      	str	r3, [r7, #12]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002b70:	4b2b      	ldr	r3, [pc, #172]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b76:	4a2a      	ldr	r2, [pc, #168]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b80:	4b27      	ldr	r3, [pc, #156]	; (8002c20 <HAL_ETH_MspInit+0x188>)
 8002b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b8a:	60bb      	str	r3, [r7, #8]
 8002b8c:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002b8e:	2332      	movs	r3, #50	; 0x32
 8002b90:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b92:	2302      	movs	r3, #2
 8002b94:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b96:	2300      	movs	r3, #0
 8002b98:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002b9e:	230b      	movs	r3, #11
 8002ba0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	481e      	ldr	r0, [pc, #120]	; (8002c24 <HAL_ETH_MspInit+0x18c>)
 8002baa:	f003 fab3 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002bae:	2386      	movs	r3, #134	; 0x86
 8002bb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb2:	2302      	movs	r3, #2
 8002bb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002bbe:	230b      	movs	r3, #11
 8002bc0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4817      	ldr	r0, [pc, #92]	; (8002c28 <HAL_ETH_MspInit+0x190>)
 8002bca:	f003 faa3 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002bce:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bd2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd4:	2302      	movs	r3, #2
 8002bd6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002be0:	230b      	movs	r3, #11
 8002be2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002be8:	4619      	mov	r1, r3
 8002bea:	4810      	ldr	r0, [pc, #64]	; (8002c2c <HAL_ETH_MspInit+0x194>)
 8002bec:	f003 fa92 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8002bf0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8002bf4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002c02:	230b      	movs	r3, #11
 8002c04:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002c06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002c0a:	4619      	mov	r1, r3
 8002c0c:	4808      	ldr	r0, [pc, #32]	; (8002c30 <HAL_ETH_MspInit+0x198>)
 8002c0e:	f003 fa81 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002c12:	bf00      	nop
 8002c14:	3738      	adds	r7, #56	; 0x38
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	40028000 	.word	0x40028000
 8002c20:	58024400 	.word	0x58024400
 8002c24:	58020800 	.word	0x58020800
 8002c28:	58020000 	.word	0x58020000
 8002c2c:	58020400 	.word	0x58020400
 8002c30:	58021800 	.word	0x58021800

08002c34 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b08a      	sub	sp, #40	; 0x28
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c3c:	f107 0314 	add.w	r3, r7, #20
 8002c40:	2200      	movs	r2, #0
 8002c42:	601a      	str	r2, [r3, #0]
 8002c44:	605a      	str	r2, [r3, #4]
 8002c46:	609a      	str	r2, [r3, #8]
 8002c48:	60da      	str	r2, [r3, #12]
 8002c4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a2a      	ldr	r2, [pc, #168]	; (8002cfc <HAL_SPI_MspInit+0xc8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d14d      	bne.n	8002cf2 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c58:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c5c:	4a28      	ldr	r2, [pc, #160]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c62:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c68:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002c6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c70:	613b      	str	r3, [r7, #16]
 8002c72:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c7a:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c7c:	f043 0302 	orr.w	r3, r3, #2
 8002c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002c84:	4b1e      	ldr	r3, [pc, #120]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c8a:	f003 0302 	and.w	r3, r3, #2
 8002c8e:	60fb      	str	r3, [r7, #12]
 8002c90:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002c92:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002c98:	4a19      	ldr	r2, [pc, #100]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002c9a:	f043 0304 	orr.w	r3, r3, #4
 8002c9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ca2:	4b17      	ldr	r3, [pc, #92]	; (8002d00 <HAL_SPI_MspInit+0xcc>)
 8002ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	60bb      	str	r3, [r7, #8]
 8002cae:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002cb0:	2304      	movs	r3, #4
 8002cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cb8:	2302      	movs	r3, #2
 8002cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002cc0:	2307      	movs	r3, #7
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	4619      	mov	r1, r3
 8002cca:	480e      	ldr	r0, [pc, #56]	; (8002d04 <HAL_SPI_MspInit+0xd0>)
 8002ccc:	f003 fa22 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002cd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002ce2:	2306      	movs	r3, #6
 8002ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ce6:	f107 0314 	add.w	r3, r7, #20
 8002cea:	4619      	mov	r1, r3
 8002cec:	4806      	ldr	r0, [pc, #24]	; (8002d08 <HAL_SPI_MspInit+0xd4>)
 8002cee:	f003 fa11 	bl	8006114 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002cf2:	bf00      	nop
 8002cf4:	3728      	adds	r7, #40	; 0x28
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd80      	pop	{r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	40003c00 	.word	0x40003c00
 8002d00:	58024400 	.word	0x58024400
 8002d04:	58020400 	.word	0x58020400
 8002d08:	58020800 	.word	0x58020800

08002d0c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b0b8      	sub	sp, #224	; 0xe0
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002d14:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002d18:	2200      	movs	r2, #0
 8002d1a:	601a      	str	r2, [r3, #0]
 8002d1c:	605a      	str	r2, [r3, #4]
 8002d1e:	609a      	str	r2, [r3, #8]
 8002d20:	60da      	str	r2, [r3, #12]
 8002d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d24:	f107 0310 	add.w	r3, r7, #16
 8002d28:	22bc      	movs	r2, #188	; 0xbc
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f008 fcf9 	bl	800b724 <memset>
  if(huart->Instance==USART3)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4a57      	ldr	r2, [pc, #348]	; (8002e94 <HAL_UART_MspInit+0x188>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	f040 80a6 	bne.w	8002e8a <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002d3e:	2302      	movs	r3, #2
 8002d40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002d42:	2300      	movs	r3, #0
 8002d44:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d48:	f107 0310 	add.w	r3, r7, #16
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f004 fd77 	bl	8007840 <HAL_RCCEx_PeriphCLKConfig>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002d58:	f7ff fb48 	bl	80023ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d5c:	4b4e      	ldr	r3, [pc, #312]	; (8002e98 <HAL_UART_MspInit+0x18c>)
 8002d5e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d62:	4a4d      	ldr	r2, [pc, #308]	; (8002e98 <HAL_UART_MspInit+0x18c>)
 8002d64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d68:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002d6c:	4b4a      	ldr	r3, [pc, #296]	; (8002e98 <HAL_UART_MspInit+0x18c>)
 8002d6e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002d72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d7a:	4b47      	ldr	r3, [pc, #284]	; (8002e98 <HAL_UART_MspInit+0x18c>)
 8002d7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d80:	4a45      	ldr	r2, [pc, #276]	; (8002e98 <HAL_UART_MspInit+0x18c>)
 8002d82:	f043 0308 	orr.w	r3, r3, #8
 8002d86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002d8a:	4b43      	ldr	r3, [pc, #268]	; (8002e98 <HAL_UART_MspInit+0x18c>)
 8002d8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002d90:	f003 0308 	and.w	r3, r3, #8
 8002d94:	60bb      	str	r3, [r7, #8]
 8002d96:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002d98:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002da0:	2302      	movs	r3, #2
 8002da2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002da6:	2300      	movs	r3, #0
 8002da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002dac:	2300      	movs	r3, #0
 8002dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002db2:	2307      	movs	r3, #7
 8002db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002db8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4837      	ldr	r0, [pc, #220]	; (8002e9c <HAL_UART_MspInit+0x190>)
 8002dc0:	f003 f9a8 	bl	8006114 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002dc4:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dc6:	4a37      	ldr	r2, [pc, #220]	; (8002ea4 <HAL_UART_MspInit+0x198>)
 8002dc8:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002dca:	4b35      	ldr	r3, [pc, #212]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dcc:	222d      	movs	r2, #45	; 0x2d
 8002dce:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dd0:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dd6:	4b32      	ldr	r3, [pc, #200]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dde:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002de2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002de4:	4b2e      	ldr	r3, [pc, #184]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dea:	4b2d      	ldr	r3, [pc, #180]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002df0:	4b2b      	ldr	r3, [pc, #172]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002df2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002df6:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dfe:	4b28      	ldr	r3, [pc, #160]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002e04:	4826      	ldr	r0, [pc, #152]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002e06:	f000 fb3b 	bl	8003480 <HAL_DMA_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002e10:	f7ff faec 	bl	80023ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	4a22      	ldr	r2, [pc, #136]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002e18:	67da      	str	r2, [r3, #124]	; 0x7c
 8002e1a:	4a21      	ldr	r2, [pc, #132]	; (8002ea0 <HAL_UART_MspInit+0x194>)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002e20:	4b21      	ldr	r3, [pc, #132]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e22:	4a22      	ldr	r2, [pc, #136]	; (8002eac <HAL_UART_MspInit+0x1a0>)
 8002e24:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002e26:	4b20      	ldr	r3, [pc, #128]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e28:	222e      	movs	r2, #46	; 0x2e
 8002e2a:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e2c:	4b1e      	ldr	r3, [pc, #120]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e2e:	2240      	movs	r2, #64	; 0x40
 8002e30:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e3e:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e40:	4b19      	ldr	r3, [pc, #100]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e46:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e58:	4b13      	ldr	r3, [pc, #76]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002e5e:	4812      	ldr	r0, [pc, #72]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e60:	f000 fb0e 	bl	8003480 <HAL_DMA_Init>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d001      	beq.n	8002e6e <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002e6a:	f7ff fabf 	bl	80023ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	4a0d      	ldr	r2, [pc, #52]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e72:	679a      	str	r2, [r3, #120]	; 0x78
 8002e74:	4a0c      	ldr	r2, [pc, #48]	; (8002ea8 <HAL_UART_MspInit+0x19c>)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	2100      	movs	r1, #0
 8002e7e:	2027      	movs	r0, #39	; 0x27
 8002e80:	f000 fac9 	bl	8003416 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002e84:	2027      	movs	r0, #39	; 0x27
 8002e86:	f000 fae0 	bl	800344a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002e8a:	bf00      	nop
 8002e8c:	37e0      	adds	r7, #224	; 0xe0
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	40004800 	.word	0x40004800
 8002e98:	58024400 	.word	0x58024400
 8002e9c:	58020c00 	.word	0x58020c00
 8002ea0:	24000368 	.word	0x24000368
 8002ea4:	40020028 	.word	0x40020028
 8002ea8:	240003e0 	.word	0x240003e0
 8002eac:	40020070 	.word	0x40020070

08002eb0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b08a      	sub	sp, #40	; 0x28
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb8:	f107 0314 	add.w	r3, r7, #20
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
 8002ec6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a22      	ldr	r2, [pc, #136]	; (8002f58 <HAL_PCD_MspInit+0xa8>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d13d      	bne.n	8002f4e <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002ed2:	f003 fceb 	bl	80068ac <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ed6:	4b21      	ldr	r3, [pc, #132]	; (8002f5c <HAL_PCD_MspInit+0xac>)
 8002ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002edc:	4a1f      	ldr	r2, [pc, #124]	; (8002f5c <HAL_PCD_MspInit+0xac>)
 8002ede:	f043 0301 	orr.w	r3, r3, #1
 8002ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ee6:	4b1d      	ldr	r3, [pc, #116]	; (8002f5c <HAL_PCD_MspInit+0xac>)
 8002ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002eec:	f003 0301 	and.w	r3, r3, #1
 8002ef0:	613b      	str	r3, [r7, #16]
 8002ef2:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ef4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002efa:	2302      	movs	r3, #2
 8002efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002efe:	2300      	movs	r3, #0
 8002f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f02:	2300      	movs	r3, #0
 8002f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002f06:	230a      	movs	r3, #10
 8002f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f0a:	f107 0314 	add.w	r3, r7, #20
 8002f0e:	4619      	mov	r1, r3
 8002f10:	4813      	ldr	r0, [pc, #76]	; (8002f60 <HAL_PCD_MspInit+0xb0>)
 8002f12:	f003 f8ff 	bl	8006114 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f16:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f20:	2300      	movs	r3, #0
 8002f22:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f24:	f107 0314 	add.w	r3, r7, #20
 8002f28:	4619      	mov	r1, r3
 8002f2a:	480d      	ldr	r0, [pc, #52]	; (8002f60 <HAL_PCD_MspInit+0xb0>)
 8002f2c:	f003 f8f2 	bl	8006114 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002f30:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_PCD_MspInit+0xac>)
 8002f32:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f36:	4a09      	ldr	r2, [pc, #36]	; (8002f5c <HAL_PCD_MspInit+0xac>)
 8002f38:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002f3c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002f40:	4b06      	ldr	r3, [pc, #24]	; (8002f5c <HAL_PCD_MspInit+0xac>)
 8002f42:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f4a:	60fb      	str	r3, [r7, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002f4e:	bf00      	nop
 8002f50:	3728      	adds	r7, #40	; 0x28
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	40080000 	.word	0x40080000
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	58020000 	.word	0x58020000

08002f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002f68:	e7fe      	b.n	8002f68 <NMI_Handler+0x4>

08002f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6e:	e7fe      	b.n	8002f6e <HardFault_Handler+0x4>

08002f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f74:	e7fe      	b.n	8002f74 <MemManage_Handler+0x4>

08002f76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f76:	b480      	push	{r7}
 8002f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f7a:	e7fe      	b.n	8002f7a <BusFault_Handler+0x4>

08002f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <UsageFault_Handler+0x4>

08002f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f82:	b480      	push	{r7}
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f86:	bf00      	nop
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f90:	b480      	push	{r7}
 8002f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f94:	bf00      	nop
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002fa2:	bf00      	nop
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr

08002fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002fb0:	f000 f8f2 	bl	8003198 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fb4:	bf00      	nop
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002fbc:	4802      	ldr	r0, [pc, #8]	; (8002fc8 <DMA1_Stream1_IRQHandler+0x10>)
 8002fbe:	f001 fb1f 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002fc2:	bf00      	nop
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	24000368 	.word	0x24000368

08002fcc <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002fd0:	4802      	ldr	r0, [pc, #8]	; (8002fdc <DMA1_Stream4_IRQHandler+0x10>)
 8002fd2:	f001 fb15 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002fd6:	bf00      	nop
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	240003e0 	.word	0x240003e0

08002fe0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002fe4:	4802      	ldr	r0, [pc, #8]	; (8002ff0 <USART3_IRQHandler+0x10>)
 8002fe6:	f006 fbc5 	bl	8009774 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002fea:	bf00      	nop
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	bf00      	nop
 8002ff0:	240002d8 	.word	0x240002d8

08002ff4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ffc:	4a14      	ldr	r2, [pc, #80]	; (8003050 <_sbrk+0x5c>)
 8002ffe:	4b15      	ldr	r3, [pc, #84]	; (8003054 <_sbrk+0x60>)
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003008:	4b13      	ldr	r3, [pc, #76]	; (8003058 <_sbrk+0x64>)
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d102      	bne.n	8003016 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003010:	4b11      	ldr	r3, [pc, #68]	; (8003058 <_sbrk+0x64>)
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <_sbrk+0x68>)
 8003014:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003016:	4b10      	ldr	r3, [pc, #64]	; (8003058 <_sbrk+0x64>)
 8003018:	681a      	ldr	r2, [r3, #0]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4413      	add	r3, r2
 800301e:	693a      	ldr	r2, [r7, #16]
 8003020:	429a      	cmp	r2, r3
 8003022:	d207      	bcs.n	8003034 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003024:	f008 fb54 	bl	800b6d0 <__errno>
 8003028:	4603      	mov	r3, r0
 800302a:	220c      	movs	r2, #12
 800302c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800302e:	f04f 33ff 	mov.w	r3, #4294967295
 8003032:	e009      	b.n	8003048 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003034:	4b08      	ldr	r3, [pc, #32]	; (8003058 <_sbrk+0x64>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800303a:	4b07      	ldr	r3, [pc, #28]	; (8003058 <_sbrk+0x64>)
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4413      	add	r3, r2
 8003042:	4a05      	ldr	r2, [pc, #20]	; (8003058 <_sbrk+0x64>)
 8003044:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003046:	68fb      	ldr	r3, [r7, #12]
}
 8003048:	4618      	mov	r0, r3
 800304a:	3718      	adds	r7, #24
 800304c:	46bd      	mov	sp, r7
 800304e:	bd80      	pop	{r7, pc}
 8003050:	24080000 	.word	0x24080000
 8003054:	00000400 	.word	0x00000400
 8003058:	24000ca4 	.word	0x24000ca4
 800305c:	24000cc0 	.word	0x24000cc0

08003060 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003060:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003098 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003064:	f7fe fd7e 	bl	8001b64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003068:	480c      	ldr	r0, [pc, #48]	; (800309c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800306a:	490d      	ldr	r1, [pc, #52]	; (80030a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800306c:	4a0d      	ldr	r2, [pc, #52]	; (80030a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800306e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003070:	e002      	b.n	8003078 <LoopCopyDataInit>

08003072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003076:	3304      	adds	r3, #4

08003078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800307a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800307c:	d3f9      	bcc.n	8003072 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800307e:	4a0a      	ldr	r2, [pc, #40]	; (80030a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003080:	4c0a      	ldr	r4, [pc, #40]	; (80030ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8003082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003084:	e001      	b.n	800308a <LoopFillZerobss>

08003086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003088:	3204      	adds	r2, #4

0800308a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800308a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800308c:	d3fb      	bcc.n	8003086 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800308e:	f008 fb25 	bl	800b6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003092:	f7fe fdfd 	bl	8001c90 <main>
  bx  lr
 8003096:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003098:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800309c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80030a0:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 80030a4:	0800d6d4 	.word	0x0800d6d4
  ldr r2, =_sbss
 80030a8:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 80030ac:	24000cbc 	.word	0x24000cbc

080030b0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80030b0:	e7fe      	b.n	80030b0 <ADC3_IRQHandler>
	...

080030b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030ba:	2003      	movs	r0, #3
 80030bc:	f000 f9a0 	bl	8003400 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030c0:	f004 f9e8 	bl	8007494 <HAL_RCC_GetSysClockFreq>
 80030c4:	4602      	mov	r2, r0
 80030c6:	4b15      	ldr	r3, [pc, #84]	; (800311c <HAL_Init+0x68>)
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	0a1b      	lsrs	r3, r3, #8
 80030cc:	f003 030f 	and.w	r3, r3, #15
 80030d0:	4913      	ldr	r1, [pc, #76]	; (8003120 <HAL_Init+0x6c>)
 80030d2:	5ccb      	ldrb	r3, [r1, r3]
 80030d4:	f003 031f 	and.w	r3, r3, #31
 80030d8:	fa22 f303 	lsr.w	r3, r2, r3
 80030dc:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80030de:	4b0f      	ldr	r3, [pc, #60]	; (800311c <HAL_Init+0x68>)
 80030e0:	699b      	ldr	r3, [r3, #24]
 80030e2:	f003 030f 	and.w	r3, r3, #15
 80030e6:	4a0e      	ldr	r2, [pc, #56]	; (8003120 <HAL_Init+0x6c>)
 80030e8:	5cd3      	ldrb	r3, [r2, r3]
 80030ea:	f003 031f 	and.w	r3, r3, #31
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	4a0b      	ldr	r2, [pc, #44]	; (8003124 <HAL_Init+0x70>)
 80030f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80030f8:	4a0b      	ldr	r2, [pc, #44]	; (8003128 <HAL_Init+0x74>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80030fe:	2000      	movs	r0, #0
 8003100:	f000 f814 	bl	800312c <HAL_InitTick>
 8003104:	4603      	mov	r3, r0
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e002      	b.n	8003114 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800310e:	f7ff fca9 	bl	8002a64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	58024400 	.word	0x58024400
 8003120:	0800c110 	.word	0x0800c110
 8003124:	24000004 	.word	0x24000004
 8003128:	24000000 	.word	0x24000000

0800312c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8003134:	4b15      	ldr	r3, [pc, #84]	; (800318c <HAL_InitTick+0x60>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d101      	bne.n	8003140 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e021      	b.n	8003184 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8003140:	4b13      	ldr	r3, [pc, #76]	; (8003190 <HAL_InitTick+0x64>)
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	4b11      	ldr	r3, [pc, #68]	; (800318c <HAL_InitTick+0x60>)
 8003146:	781b      	ldrb	r3, [r3, #0]
 8003148:	4619      	mov	r1, r3
 800314a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800314e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003152:	fbb2 f3f3 	udiv	r3, r2, r3
 8003156:	4618      	mov	r0, r3
 8003158:	f000 f985 	bl	8003466 <HAL_SYSTICK_Config>
 800315c:	4603      	mov	r3, r0
 800315e:	2b00      	cmp	r3, #0
 8003160:	d001      	beq.n	8003166 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e00e      	b.n	8003184 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2b0f      	cmp	r3, #15
 800316a:	d80a      	bhi.n	8003182 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800316c:	2200      	movs	r2, #0
 800316e:	6879      	ldr	r1, [r7, #4]
 8003170:	f04f 30ff 	mov.w	r0, #4294967295
 8003174:	f000 f94f 	bl	8003416 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003178:	4a06      	ldr	r2, [pc, #24]	; (8003194 <HAL_InitTick+0x68>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800317e:	2300      	movs	r3, #0
 8003180:	e000      	b.n	8003184 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
}
 8003184:	4618      	mov	r0, r3
 8003186:	3708      	adds	r7, #8
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	2400001c 	.word	0x2400001c
 8003190:	24000000 	.word	0x24000000
 8003194:	24000018 	.word	0x24000018

08003198 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800319c:	4b06      	ldr	r3, [pc, #24]	; (80031b8 <HAL_IncTick+0x20>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	461a      	mov	r2, r3
 80031a2:	4b06      	ldr	r3, [pc, #24]	; (80031bc <HAL_IncTick+0x24>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4413      	add	r3, r2
 80031a8:	4a04      	ldr	r2, [pc, #16]	; (80031bc <HAL_IncTick+0x24>)
 80031aa:	6013      	str	r3, [r2, #0]
}
 80031ac:	bf00      	nop
 80031ae:	46bd      	mov	sp, r7
 80031b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b4:	4770      	bx	lr
 80031b6:	bf00      	nop
 80031b8:	2400001c 	.word	0x2400001c
 80031bc:	24000ca8 	.word	0x24000ca8

080031c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80031c0:	b480      	push	{r7}
 80031c2:	af00      	add	r7, sp, #0
  return uwTick;
 80031c4:	4b03      	ldr	r3, [pc, #12]	; (80031d4 <HAL_GetTick+0x14>)
 80031c6:	681b      	ldr	r3, [r3, #0]
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop
 80031d4:	24000ca8 	.word	0x24000ca8

080031d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b084      	sub	sp, #16
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031e0:	f7ff ffee 	bl	80031c0 <HAL_GetTick>
 80031e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031f0:	d005      	beq.n	80031fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031f2:	4b0a      	ldr	r3, [pc, #40]	; (800321c <HAL_Delay+0x44>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	4413      	add	r3, r2
 80031fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031fe:	bf00      	nop
 8003200:	f7ff ffde 	bl	80031c0 <HAL_GetTick>
 8003204:	4602      	mov	r2, r0
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	429a      	cmp	r2, r3
 800320e:	d8f7      	bhi.n	8003200 <HAL_Delay+0x28>
  {
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3710      	adds	r7, #16
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}
 800321a:	bf00      	nop
 800321c:	2400001c 	.word	0x2400001c

08003220 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8003220:	b480      	push	{r7}
 8003222:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8003224:	4b03      	ldr	r3, [pc, #12]	; (8003234 <HAL_GetREVID+0x14>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	0c1b      	lsrs	r3, r3, #16
}
 800322a:	4618      	mov	r0, r3
 800322c:	46bd      	mov	sp, r7
 800322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003232:	4770      	bx	lr
 8003234:	5c001000 	.word	0x5c001000

08003238 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003238:	b480      	push	{r7}
 800323a:	b083      	sub	sp, #12
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003240:	4b06      	ldr	r3, [pc, #24]	; (800325c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003248:	4904      	ldr	r1, [pc, #16]	; (800325c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4313      	orrs	r3, r2
 800324e:	604b      	str	r3, [r1, #4]
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	58000400 	.word	0x58000400

08003260 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003260:	b480      	push	{r7}
 8003262:	b085      	sub	sp, #20
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	f003 0307 	and.w	r3, r3, #7
 800326e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003270:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003272:	68db      	ldr	r3, [r3, #12]
 8003274:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003276:	68ba      	ldr	r2, [r7, #8]
 8003278:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800327c:	4013      	ands	r3, r2
 800327e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003288:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <__NVIC_SetPriorityGrouping+0x44>)
 800328a:	4313      	orrs	r3, r2
 800328c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800328e:	4a04      	ldr	r2, [pc, #16]	; (80032a0 <__NVIC_SetPriorityGrouping+0x40>)
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	60d3      	str	r3, [r2, #12]
}
 8003294:	bf00      	nop
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329e:	4770      	bx	lr
 80032a0:	e000ed00 	.word	0xe000ed00
 80032a4:	05fa0000 	.word	0x05fa0000

080032a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032a8:	b480      	push	{r7}
 80032aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032ac:	4b04      	ldr	r3, [pc, #16]	; (80032c0 <__NVIC_GetPriorityGrouping+0x18>)
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	0a1b      	lsrs	r3, r3, #8
 80032b2:	f003 0307 	and.w	r3, r3, #7
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	46bd      	mov	sp, r7
 80032ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032be:	4770      	bx	lr
 80032c0:	e000ed00 	.word	0xe000ed00

080032c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	4603      	mov	r3, r0
 80032cc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80032ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	db0b      	blt.n	80032ee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032d6:	88fb      	ldrh	r3, [r7, #6]
 80032d8:	f003 021f 	and.w	r2, r3, #31
 80032dc:	4907      	ldr	r1, [pc, #28]	; (80032fc <__NVIC_EnableIRQ+0x38>)
 80032de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80032e2:	095b      	lsrs	r3, r3, #5
 80032e4:	2001      	movs	r0, #1
 80032e6:	fa00 f202 	lsl.w	r2, r0, r2
 80032ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80032ee:	bf00      	nop
 80032f0:	370c      	adds	r7, #12
 80032f2:	46bd      	mov	sp, r7
 80032f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b480      	push	{r7}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	4603      	mov	r3, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800330c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003310:	2b00      	cmp	r3, #0
 8003312:	db0a      	blt.n	800332a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	b2da      	uxtb	r2, r3
 8003318:	490c      	ldr	r1, [pc, #48]	; (800334c <__NVIC_SetPriority+0x4c>)
 800331a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800331e:	0112      	lsls	r2, r2, #4
 8003320:	b2d2      	uxtb	r2, r2
 8003322:	440b      	add	r3, r1
 8003324:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003328:	e00a      	b.n	8003340 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	4908      	ldr	r1, [pc, #32]	; (8003350 <__NVIC_SetPriority+0x50>)
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	f003 030f 	and.w	r3, r3, #15
 8003336:	3b04      	subs	r3, #4
 8003338:	0112      	lsls	r2, r2, #4
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	440b      	add	r3, r1
 800333e:	761a      	strb	r2, [r3, #24]
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	e000e100 	.word	0xe000e100
 8003350:	e000ed00 	.word	0xe000ed00

08003354 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003354:	b480      	push	{r7}
 8003356:	b089      	sub	sp, #36	; 0x24
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f003 0307 	and.w	r3, r3, #7
 8003366:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	f1c3 0307 	rsb	r3, r3, #7
 800336e:	2b04      	cmp	r3, #4
 8003370:	bf28      	it	cs
 8003372:	2304      	movcs	r3, #4
 8003374:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	3304      	adds	r3, #4
 800337a:	2b06      	cmp	r3, #6
 800337c:	d902      	bls.n	8003384 <NVIC_EncodePriority+0x30>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	3b03      	subs	r3, #3
 8003382:	e000      	b.n	8003386 <NVIC_EncodePriority+0x32>
 8003384:	2300      	movs	r3, #0
 8003386:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003388:	f04f 32ff 	mov.w	r2, #4294967295
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43da      	mvns	r2, r3
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	401a      	ands	r2, r3
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800339c:	f04f 31ff 	mov.w	r1, #4294967295
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	43d9      	mvns	r1, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033ac:	4313      	orrs	r3, r2
         );
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3724      	adds	r7, #36	; 0x24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr
	...

080033bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	3b01      	subs	r3, #1
 80033c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033cc:	d301      	bcc.n	80033d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80033ce:	2301      	movs	r3, #1
 80033d0:	e00f      	b.n	80033f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80033d2:	4a0a      	ldr	r2, [pc, #40]	; (80033fc <SysTick_Config+0x40>)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	3b01      	subs	r3, #1
 80033d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80033da:	210f      	movs	r1, #15
 80033dc:	f04f 30ff 	mov.w	r0, #4294967295
 80033e0:	f7ff ff8e 	bl	8003300 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <SysTick_Config+0x40>)
 80033e6:	2200      	movs	r2, #0
 80033e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80033ea:	4b04      	ldr	r3, [pc, #16]	; (80033fc <SysTick_Config+0x40>)
 80033ec:	2207      	movs	r2, #7
 80033ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	e000e010 	.word	0xe000e010

08003400 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b082      	sub	sp, #8
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003408:	6878      	ldr	r0, [r7, #4]
 800340a:	f7ff ff29 	bl	8003260 <__NVIC_SetPriorityGrouping>
}
 800340e:	bf00      	nop
 8003410:	3708      	adds	r7, #8
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}

08003416 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003416:	b580      	push	{r7, lr}
 8003418:	b086      	sub	sp, #24
 800341a:	af00      	add	r7, sp, #0
 800341c:	4603      	mov	r3, r0
 800341e:	60b9      	str	r1, [r7, #8]
 8003420:	607a      	str	r2, [r7, #4]
 8003422:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003424:	f7ff ff40 	bl	80032a8 <__NVIC_GetPriorityGrouping>
 8003428:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	68b9      	ldr	r1, [r7, #8]
 800342e:	6978      	ldr	r0, [r7, #20]
 8003430:	f7ff ff90 	bl	8003354 <NVIC_EncodePriority>
 8003434:	4602      	mov	r2, r0
 8003436:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800343a:	4611      	mov	r1, r2
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff ff5f 	bl	8003300 <__NVIC_SetPriority>
}
 8003442:	bf00      	nop
 8003444:	3718      	adds	r7, #24
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}

0800344a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b082      	sub	sp, #8
 800344e:	af00      	add	r7, sp, #0
 8003450:	4603      	mov	r3, r0
 8003452:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003454:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003458:	4618      	mov	r0, r3
 800345a:	f7ff ff33 	bl	80032c4 <__NVIC_EnableIRQ>
}
 800345e:	bf00      	nop
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f7ff ffa4 	bl	80033bc <SysTick_Config>
 8003474:	4603      	mov	r3, r0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
	...

08003480 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003488:	f7ff fe9a 	bl	80031c0 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d101      	bne.n	8003498 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e316      	b.n	8003ac6 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a66      	ldr	r2, [pc, #408]	; (8003638 <HAL_DMA_Init+0x1b8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d04a      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a65      	ldr	r2, [pc, #404]	; (800363c <HAL_DMA_Init+0x1bc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d045      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a63      	ldr	r2, [pc, #396]	; (8003640 <HAL_DMA_Init+0x1c0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d040      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a62      	ldr	r2, [pc, #392]	; (8003644 <HAL_DMA_Init+0x1c4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d03b      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a60      	ldr	r2, [pc, #384]	; (8003648 <HAL_DMA_Init+0x1c8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d036      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a5f      	ldr	r2, [pc, #380]	; (800364c <HAL_DMA_Init+0x1cc>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d031      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a5d      	ldr	r2, [pc, #372]	; (8003650 <HAL_DMA_Init+0x1d0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d02c      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a5c      	ldr	r2, [pc, #368]	; (8003654 <HAL_DMA_Init+0x1d4>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d027      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a5a      	ldr	r2, [pc, #360]	; (8003658 <HAL_DMA_Init+0x1d8>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d022      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4a59      	ldr	r2, [pc, #356]	; (800365c <HAL_DMA_Init+0x1dc>)
 80034f8:	4293      	cmp	r3, r2
 80034fa:	d01d      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	4a57      	ldr	r2, [pc, #348]	; (8003660 <HAL_DMA_Init+0x1e0>)
 8003502:	4293      	cmp	r3, r2
 8003504:	d018      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_DMA_Init+0x1e4>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d013      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a54      	ldr	r2, [pc, #336]	; (8003668 <HAL_DMA_Init+0x1e8>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00e      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4a53      	ldr	r2, [pc, #332]	; (800366c <HAL_DMA_Init+0x1ec>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d009      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a51      	ldr	r2, [pc, #324]	; (8003670 <HAL_DMA_Init+0x1f0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d004      	beq.n	8003538 <HAL_DMA_Init+0xb8>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4a50      	ldr	r2, [pc, #320]	; (8003674 <HAL_DMA_Init+0x1f4>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d101      	bne.n	800353c <HAL_DMA_Init+0xbc>
 8003538:	2301      	movs	r3, #1
 800353a:	e000      	b.n	800353e <HAL_DMA_Init+0xbe>
 800353c:	2300      	movs	r3, #0
 800353e:	2b00      	cmp	r3, #0
 8003540:	f000 813b 	beq.w	80037ba <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	4a37      	ldr	r2, [pc, #220]	; (8003638 <HAL_DMA_Init+0x1b8>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d04a      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a36      	ldr	r2, [pc, #216]	; (800363c <HAL_DMA_Init+0x1bc>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d045      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a34      	ldr	r2, [pc, #208]	; (8003640 <HAL_DMA_Init+0x1c0>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d040      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a33      	ldr	r2, [pc, #204]	; (8003644 <HAL_DMA_Init+0x1c4>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d03b      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	4a31      	ldr	r2, [pc, #196]	; (8003648 <HAL_DMA_Init+0x1c8>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d036      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a30      	ldr	r2, [pc, #192]	; (800364c <HAL_DMA_Init+0x1cc>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d031      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a2e      	ldr	r2, [pc, #184]	; (8003650 <HAL_DMA_Init+0x1d0>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d02c      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a2d      	ldr	r2, [pc, #180]	; (8003654 <HAL_DMA_Init+0x1d4>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d027      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a2b      	ldr	r2, [pc, #172]	; (8003658 <HAL_DMA_Init+0x1d8>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d022      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	4a2a      	ldr	r2, [pc, #168]	; (800365c <HAL_DMA_Init+0x1dc>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d01d      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a28      	ldr	r2, [pc, #160]	; (8003660 <HAL_DMA_Init+0x1e0>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d018      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a27      	ldr	r2, [pc, #156]	; (8003664 <HAL_DMA_Init+0x1e4>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a25      	ldr	r2, [pc, #148]	; (8003668 <HAL_DMA_Init+0x1e8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d00e      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a24      	ldr	r2, [pc, #144]	; (800366c <HAL_DMA_Init+0x1ec>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d009      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a22      	ldr	r2, [pc, #136]	; (8003670 <HAL_DMA_Init+0x1f0>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d004      	beq.n	80035f4 <HAL_DMA_Init+0x174>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	4a21      	ldr	r2, [pc, #132]	; (8003674 <HAL_DMA_Init+0x1f4>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <HAL_DMA_Init+0x186>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0201 	bic.w	r2, r2, #1
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	e007      	b.n	8003616 <HAL_DMA_Init+0x196>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681a      	ldr	r2, [r3, #0]
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f022 0201 	bic.w	r2, r2, #1
 8003614:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003616:	e02f      	b.n	8003678 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003618:	f7ff fdd2 	bl	80031c0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b05      	cmp	r3, #5
 8003624:	d928      	bls.n	8003678 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2220      	movs	r2, #32
 800362a:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2203      	movs	r2, #3
 8003630:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e246      	b.n	8003ac6 <HAL_DMA_Init+0x646>
 8003638:	40020010 	.word	0x40020010
 800363c:	40020028 	.word	0x40020028
 8003640:	40020040 	.word	0x40020040
 8003644:	40020058 	.word	0x40020058
 8003648:	40020070 	.word	0x40020070
 800364c:	40020088 	.word	0x40020088
 8003650:	400200a0 	.word	0x400200a0
 8003654:	400200b8 	.word	0x400200b8
 8003658:	40020410 	.word	0x40020410
 800365c:	40020428 	.word	0x40020428
 8003660:	40020440 	.word	0x40020440
 8003664:	40020458 	.word	0x40020458
 8003668:	40020470 	.word	0x40020470
 800366c:	40020488 	.word	0x40020488
 8003670:	400204a0 	.word	0x400204a0
 8003674:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1c8      	bne.n	8003618 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4b83      	ldr	r3, [pc, #524]	; (80038a0 <HAL_DMA_Init+0x420>)
 8003692:	4013      	ands	r3, r2
 8003694:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800369e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80036aa:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	699b      	ldr	r3, [r3, #24]
 80036b0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036b6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80036be:	697a      	ldr	r2, [r7, #20]
 80036c0:	4313      	orrs	r3, r2
 80036c2:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d107      	bne.n	80036dc <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d4:	4313      	orrs	r3, r2
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	4313      	orrs	r3, r2
 80036da:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80036dc:	4b71      	ldr	r3, [pc, #452]	; (80038a4 <HAL_DMA_Init+0x424>)
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	4b71      	ldr	r3, [pc, #452]	; (80038a8 <HAL_DMA_Init+0x428>)
 80036e2:	4013      	ands	r3, r2
 80036e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036e8:	d328      	bcc.n	800373c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b28      	cmp	r3, #40	; 0x28
 80036f0:	d903      	bls.n	80036fa <HAL_DMA_Init+0x27a>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b2e      	cmp	r3, #46	; 0x2e
 80036f8:	d917      	bls.n	800372a <HAL_DMA_Init+0x2aa>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	2b3e      	cmp	r3, #62	; 0x3e
 8003700:	d903      	bls.n	800370a <HAL_DMA_Init+0x28a>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	2b42      	cmp	r3, #66	; 0x42
 8003708:	d90f      	bls.n	800372a <HAL_DMA_Init+0x2aa>
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2b46      	cmp	r3, #70	; 0x46
 8003710:	d903      	bls.n	800371a <HAL_DMA_Init+0x29a>
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	2b48      	cmp	r3, #72	; 0x48
 8003718:	d907      	bls.n	800372a <HAL_DMA_Init+0x2aa>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b4e      	cmp	r3, #78	; 0x4e
 8003720:	d905      	bls.n	800372e <HAL_DMA_Init+0x2ae>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	2b52      	cmp	r3, #82	; 0x52
 8003728:	d801      	bhi.n	800372e <HAL_DMA_Init+0x2ae>
 800372a:	2301      	movs	r3, #1
 800372c:	e000      	b.n	8003730 <HAL_DMA_Init+0x2b0>
 800372e:	2300      	movs	r3, #0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d003      	beq.n	800373c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8003734:	697b      	ldr	r3, [r7, #20]
 8003736:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800373a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	697a      	ldr	r2, [r7, #20]
 8003742:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	f023 0307 	bic.w	r3, r3, #7
 8003752:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	697a      	ldr	r2, [r7, #20]
 800375a:	4313      	orrs	r3, r2
 800375c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003762:	2b04      	cmp	r3, #4
 8003764:	d117      	bne.n	8003796 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800376a:	697a      	ldr	r2, [r7, #20]
 800376c:	4313      	orrs	r3, r2
 800376e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00e      	beq.n	8003796 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f001 ff1d 	bl	80055b8 <DMA_CheckFifoParam>
 800377e:	4603      	mov	r3, r0
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2240      	movs	r2, #64	; 0x40
 8003788:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e197      	b.n	8003ac6 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f001 fe58 	bl	8005454 <DMA_CalcBaseAndBitshift>
 80037a4:	4603      	mov	r3, r0
 80037a6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	223f      	movs	r2, #63	; 0x3f
 80037b2:	409a      	lsls	r2, r3
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	609a      	str	r2, [r3, #8]
 80037b8:	e0cd      	b.n	8003956 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a3b      	ldr	r2, [pc, #236]	; (80038ac <HAL_DMA_Init+0x42c>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d022      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a39      	ldr	r2, [pc, #228]	; (80038b0 <HAL_DMA_Init+0x430>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d01d      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a38      	ldr	r2, [pc, #224]	; (80038b4 <HAL_DMA_Init+0x434>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a36      	ldr	r2, [pc, #216]	; (80038b8 <HAL_DMA_Init+0x438>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d013      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a35      	ldr	r2, [pc, #212]	; (80038bc <HAL_DMA_Init+0x43c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a33      	ldr	r2, [pc, #204]	; (80038c0 <HAL_DMA_Init+0x440>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_DMA_Init+0x38a>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a32      	ldr	r2, [pc, #200]	; (80038c4 <HAL_DMA_Init+0x444>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_DMA_Init+0x38a>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a30      	ldr	r2, [pc, #192]	; (80038c8 <HAL_DMA_Init+0x448>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_DMA_Init+0x38e>
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_DMA_Init+0x390>
 800380e:	2300      	movs	r3, #0
 8003810:	2b00      	cmp	r3, #0
 8003812:	f000 8097 	beq.w	8003944 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4a24      	ldr	r2, [pc, #144]	; (80038ac <HAL_DMA_Init+0x42c>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d021      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4a22      	ldr	r2, [pc, #136]	; (80038b0 <HAL_DMA_Init+0x430>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d01c      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a21      	ldr	r2, [pc, #132]	; (80038b4 <HAL_DMA_Init+0x434>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d017      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a1f      	ldr	r2, [pc, #124]	; (80038b8 <HAL_DMA_Init+0x438>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d012      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a1e      	ldr	r2, [pc, #120]	; (80038bc <HAL_DMA_Init+0x43c>)
 8003844:	4293      	cmp	r3, r2
 8003846:	d00d      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a1c      	ldr	r2, [pc, #112]	; (80038c0 <HAL_DMA_Init+0x440>)
 800384e:	4293      	cmp	r3, r2
 8003850:	d008      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4a1b      	ldr	r2, [pc, #108]	; (80038c4 <HAL_DMA_Init+0x444>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d003      	beq.n	8003864 <HAL_DMA_Init+0x3e4>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <HAL_DMA_Init+0x448>)
 8003862:	4293      	cmp	r3, r2
 8003864:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2202      	movs	r2, #2
 800386a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4b12      	ldr	r3, [pc, #72]	; (80038cc <HAL_DMA_Init+0x44c>)
 8003882:	4013      	ands	r3, r2
 8003884:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	2b40      	cmp	r3, #64	; 0x40
 800388c:	d020      	beq.n	80038d0 <HAL_DMA_Init+0x450>
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	2b80      	cmp	r3, #128	; 0x80
 8003894:	d102      	bne.n	800389c <HAL_DMA_Init+0x41c>
 8003896:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800389a:	e01a      	b.n	80038d2 <HAL_DMA_Init+0x452>
 800389c:	2300      	movs	r3, #0
 800389e:	e018      	b.n	80038d2 <HAL_DMA_Init+0x452>
 80038a0:	fe10803f 	.word	0xfe10803f
 80038a4:	5c001000 	.word	0x5c001000
 80038a8:	ffff0000 	.word	0xffff0000
 80038ac:	58025408 	.word	0x58025408
 80038b0:	5802541c 	.word	0x5802541c
 80038b4:	58025430 	.word	0x58025430
 80038b8:	58025444 	.word	0x58025444
 80038bc:	58025458 	.word	0x58025458
 80038c0:	5802546c 	.word	0x5802546c
 80038c4:	58025480 	.word	0x58025480
 80038c8:	58025494 	.word	0x58025494
 80038cc:	fffe000f 	.word	0xfffe000f
 80038d0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80038d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80038e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	695b      	ldr	r3, [r3, #20]
 80038e6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80038e8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80038f0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	69db      	ldr	r3, [r3, #28]
 80038f6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80038f8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8003900:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	697a      	ldr	r2, [r7, #20]
 800390e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	4b6e      	ldr	r3, [pc, #440]	; (8003ad0 <HAL_DMA_Init+0x650>)
 8003918:	4413      	add	r3, r2
 800391a:	4a6e      	ldr	r2, [pc, #440]	; (8003ad4 <HAL_DMA_Init+0x654>)
 800391c:	fba2 2303 	umull	r2, r3, r2, r3
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003928:	6878      	ldr	r0, [r7, #4]
 800392a:	f001 fd93 	bl	8005454 <DMA_CalcBaseAndBitshift>
 800392e:	4603      	mov	r3, r0
 8003930:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003936:	f003 031f 	and.w	r3, r3, #31
 800393a:	2201      	movs	r2, #1
 800393c:	409a      	lsls	r2, r3
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	605a      	str	r2, [r3, #4]
 8003942:	e008      	b.n	8003956 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2240      	movs	r2, #64	; 0x40
 8003948:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2203      	movs	r2, #3
 800394e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8003952:	2301      	movs	r3, #1
 8003954:	e0b7      	b.n	8003ac6 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a5f      	ldr	r2, [pc, #380]	; (8003ad8 <HAL_DMA_Init+0x658>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d072      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a5d      	ldr	r2, [pc, #372]	; (8003adc <HAL_DMA_Init+0x65c>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d06d      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a5c      	ldr	r2, [pc, #368]	; (8003ae0 <HAL_DMA_Init+0x660>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d068      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a5a      	ldr	r2, [pc, #360]	; (8003ae4 <HAL_DMA_Init+0x664>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d063      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a59      	ldr	r2, [pc, #356]	; (8003ae8 <HAL_DMA_Init+0x668>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d05e      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a57      	ldr	r2, [pc, #348]	; (8003aec <HAL_DMA_Init+0x66c>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d059      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	4a56      	ldr	r2, [pc, #344]	; (8003af0 <HAL_DMA_Init+0x670>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d054      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a54      	ldr	r2, [pc, #336]	; (8003af4 <HAL_DMA_Init+0x674>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d04f      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a53      	ldr	r2, [pc, #332]	; (8003af8 <HAL_DMA_Init+0x678>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d04a      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a51      	ldr	r2, [pc, #324]	; (8003afc <HAL_DMA_Init+0x67c>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d045      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	4a50      	ldr	r2, [pc, #320]	; (8003b00 <HAL_DMA_Init+0x680>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d040      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a4e      	ldr	r2, [pc, #312]	; (8003b04 <HAL_DMA_Init+0x684>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d03b      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4d      	ldr	r2, [pc, #308]	; (8003b08 <HAL_DMA_Init+0x688>)
 80039d4:	4293      	cmp	r3, r2
 80039d6:	d036      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a4b      	ldr	r2, [pc, #300]	; (8003b0c <HAL_DMA_Init+0x68c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d031      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	4a4a      	ldr	r2, [pc, #296]	; (8003b10 <HAL_DMA_Init+0x690>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d02c      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	4a48      	ldr	r2, [pc, #288]	; (8003b14 <HAL_DMA_Init+0x694>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d027      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	4a47      	ldr	r2, [pc, #284]	; (8003b18 <HAL_DMA_Init+0x698>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d022      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a45      	ldr	r2, [pc, #276]	; (8003b1c <HAL_DMA_Init+0x69c>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d01d      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4a44      	ldr	r2, [pc, #272]	; (8003b20 <HAL_DMA_Init+0x6a0>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d018      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a42      	ldr	r2, [pc, #264]	; (8003b24 <HAL_DMA_Init+0x6a4>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d013      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	4a41      	ldr	r2, [pc, #260]	; (8003b28 <HAL_DMA_Init+0x6a8>)
 8003a24:	4293      	cmp	r3, r2
 8003a26:	d00e      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a3f      	ldr	r2, [pc, #252]	; (8003b2c <HAL_DMA_Init+0x6ac>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d009      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	4a3e      	ldr	r2, [pc, #248]	; (8003b30 <HAL_DMA_Init+0x6b0>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d004      	beq.n	8003a46 <HAL_DMA_Init+0x5c6>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4a3c      	ldr	r2, [pc, #240]	; (8003b34 <HAL_DMA_Init+0x6b4>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d101      	bne.n	8003a4a <HAL_DMA_Init+0x5ca>
 8003a46:	2301      	movs	r3, #1
 8003a48:	e000      	b.n	8003a4c <HAL_DMA_Init+0x5cc>
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d032      	beq.n	8003ab6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	f001 fe2d 	bl	80056b0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	2b80      	cmp	r3, #128	; 0x80
 8003a5c:	d102      	bne.n	8003a64 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2200      	movs	r2, #0
 8003a62:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685a      	ldr	r2, [r3, #4]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a6c:	b2d2      	uxtb	r2, r2
 8003a6e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a74:	687a      	ldr	r2, [r7, #4]
 8003a76:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003a78:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <HAL_DMA_Init+0x624>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b08      	cmp	r3, #8
 8003a88:	d80c      	bhi.n	8003aa4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f001 feaa 	bl	80057e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003a94:	2200      	movs	r2, #0
 8003a96:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003aa0:	605a      	str	r2, [r3, #4]
 8003aa2:	e008      	b.n	8003ab6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2200      	movs	r2, #0
 8003aae:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003ac4:	2300      	movs	r3, #0
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	a7fdabf8 	.word	0xa7fdabf8
 8003ad4:	cccccccd 	.word	0xcccccccd
 8003ad8:	40020010 	.word	0x40020010
 8003adc:	40020028 	.word	0x40020028
 8003ae0:	40020040 	.word	0x40020040
 8003ae4:	40020058 	.word	0x40020058
 8003ae8:	40020070 	.word	0x40020070
 8003aec:	40020088 	.word	0x40020088
 8003af0:	400200a0 	.word	0x400200a0
 8003af4:	400200b8 	.word	0x400200b8
 8003af8:	40020410 	.word	0x40020410
 8003afc:	40020428 	.word	0x40020428
 8003b00:	40020440 	.word	0x40020440
 8003b04:	40020458 	.word	0x40020458
 8003b08:	40020470 	.word	0x40020470
 8003b0c:	40020488 	.word	0x40020488
 8003b10:	400204a0 	.word	0x400204a0
 8003b14:	400204b8 	.word	0x400204b8
 8003b18:	58025408 	.word	0x58025408
 8003b1c:	5802541c 	.word	0x5802541c
 8003b20:	58025430 	.word	0x58025430
 8003b24:	58025444 	.word	0x58025444
 8003b28:	58025458 	.word	0x58025458
 8003b2c:	5802546c 	.word	0x5802546c
 8003b30:	58025480 	.word	0x58025480
 8003b34:	58025494 	.word	0x58025494

08003b38 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003b40:	f7ff fb3e 	bl	80031c0 <HAL_GetTick>
 8003b44:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d101      	bne.n	8003b50 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e2dc      	b.n	800410a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d008      	beq.n	8003b6e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2280      	movs	r2, #128	; 0x80
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e2cd      	b.n	800410a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a76      	ldr	r2, [pc, #472]	; (8003d4c <HAL_DMA_Abort+0x214>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d04a      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a74      	ldr	r2, [pc, #464]	; (8003d50 <HAL_DMA_Abort+0x218>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d045      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a73      	ldr	r2, [pc, #460]	; (8003d54 <HAL_DMA_Abort+0x21c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d040      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a71      	ldr	r2, [pc, #452]	; (8003d58 <HAL_DMA_Abort+0x220>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d03b      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a70      	ldr	r2, [pc, #448]	; (8003d5c <HAL_DMA_Abort+0x224>)
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d036      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	4a6e      	ldr	r2, [pc, #440]	; (8003d60 <HAL_DMA_Abort+0x228>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d031      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6d      	ldr	r2, [pc, #436]	; (8003d64 <HAL_DMA_Abort+0x22c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d02c      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	4a6b      	ldr	r2, [pc, #428]	; (8003d68 <HAL_DMA_Abort+0x230>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d027      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4a6a      	ldr	r2, [pc, #424]	; (8003d6c <HAL_DMA_Abort+0x234>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d022      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a68      	ldr	r2, [pc, #416]	; (8003d70 <HAL_DMA_Abort+0x238>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d01d      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	4a67      	ldr	r2, [pc, #412]	; (8003d74 <HAL_DMA_Abort+0x23c>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d018      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_DMA_Abort+0x240>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d013      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	4a64      	ldr	r2, [pc, #400]	; (8003d7c <HAL_DMA_Abort+0x244>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d00e      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a62      	ldr	r2, [pc, #392]	; (8003d80 <HAL_DMA_Abort+0x248>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d009      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a61      	ldr	r2, [pc, #388]	; (8003d84 <HAL_DMA_Abort+0x24c>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_DMA_Abort+0xd6>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a5f      	ldr	r2, [pc, #380]	; (8003d88 <HAL_DMA_Abort+0x250>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_DMA_Abort+0xda>
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e000      	b.n	8003c14 <HAL_DMA_Abort+0xdc>
 8003c12:	2300      	movs	r3, #0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d013      	beq.n	8003c40 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 021e 	bic.w	r2, r2, #30
 8003c26:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695a      	ldr	r2, [r3, #20]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c36:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	617b      	str	r3, [r7, #20]
 8003c3e:	e00a      	b.n	8003c56 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 020e 	bic.w	r2, r2, #14
 8003c4e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a3c      	ldr	r2, [pc, #240]	; (8003d4c <HAL_DMA_Abort+0x214>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d072      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a3a      	ldr	r2, [pc, #232]	; (8003d50 <HAL_DMA_Abort+0x218>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d06d      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a39      	ldr	r2, [pc, #228]	; (8003d54 <HAL_DMA_Abort+0x21c>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d068      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a37      	ldr	r2, [pc, #220]	; (8003d58 <HAL_DMA_Abort+0x220>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d063      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a36      	ldr	r2, [pc, #216]	; (8003d5c <HAL_DMA_Abort+0x224>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d05e      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a34      	ldr	r2, [pc, #208]	; (8003d60 <HAL_DMA_Abort+0x228>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d059      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a33      	ldr	r2, [pc, #204]	; (8003d64 <HAL_DMA_Abort+0x22c>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d054      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a31      	ldr	r2, [pc, #196]	; (8003d68 <HAL_DMA_Abort+0x230>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d04f      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a30      	ldr	r2, [pc, #192]	; (8003d6c <HAL_DMA_Abort+0x234>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d04a      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2e      	ldr	r2, [pc, #184]	; (8003d70 <HAL_DMA_Abort+0x238>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d045      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a2d      	ldr	r2, [pc, #180]	; (8003d74 <HAL_DMA_Abort+0x23c>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d040      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a2b      	ldr	r2, [pc, #172]	; (8003d78 <HAL_DMA_Abort+0x240>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d03b      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a2a      	ldr	r2, [pc, #168]	; (8003d7c <HAL_DMA_Abort+0x244>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d036      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a28      	ldr	r2, [pc, #160]	; (8003d80 <HAL_DMA_Abort+0x248>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d031      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a27      	ldr	r2, [pc, #156]	; (8003d84 <HAL_DMA_Abort+0x24c>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d02c      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a25      	ldr	r2, [pc, #148]	; (8003d88 <HAL_DMA_Abort+0x250>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d027      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a24      	ldr	r2, [pc, #144]	; (8003d8c <HAL_DMA_Abort+0x254>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d022      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_DMA_Abort+0x258>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01d      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	; (8003d94 <HAL_DMA_Abort+0x25c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d018      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1f      	ldr	r2, [pc, #124]	; (8003d98 <HAL_DMA_Abort+0x260>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d013      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1e      	ldr	r2, [pc, #120]	; (8003d9c <HAL_DMA_Abort+0x264>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d00e      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <HAL_DMA_Abort+0x268>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	; (8003da4 <HAL_DMA_Abort+0x26c>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d004      	beq.n	8003d46 <HAL_DMA_Abort+0x20e>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a19      	ldr	r2, [pc, #100]	; (8003da8 <HAL_DMA_Abort+0x270>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d132      	bne.n	8003dac <HAL_DMA_Abort+0x274>
 8003d46:	2301      	movs	r3, #1
 8003d48:	e031      	b.n	8003dae <HAL_DMA_Abort+0x276>
 8003d4a:	bf00      	nop
 8003d4c:	40020010 	.word	0x40020010
 8003d50:	40020028 	.word	0x40020028
 8003d54:	40020040 	.word	0x40020040
 8003d58:	40020058 	.word	0x40020058
 8003d5c:	40020070 	.word	0x40020070
 8003d60:	40020088 	.word	0x40020088
 8003d64:	400200a0 	.word	0x400200a0
 8003d68:	400200b8 	.word	0x400200b8
 8003d6c:	40020410 	.word	0x40020410
 8003d70:	40020428 	.word	0x40020428
 8003d74:	40020440 	.word	0x40020440
 8003d78:	40020458 	.word	0x40020458
 8003d7c:	40020470 	.word	0x40020470
 8003d80:	40020488 	.word	0x40020488
 8003d84:	400204a0 	.word	0x400204a0
 8003d88:	400204b8 	.word	0x400204b8
 8003d8c:	58025408 	.word	0x58025408
 8003d90:	5802541c 	.word	0x5802541c
 8003d94:	58025430 	.word	0x58025430
 8003d98:	58025444 	.word	0x58025444
 8003d9c:	58025458 	.word	0x58025458
 8003da0:	5802546c 	.word	0x5802546c
 8003da4:	58025480 	.word	0x58025480
 8003da8:	58025494 	.word	0x58025494
 8003dac:	2300      	movs	r3, #0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d007      	beq.n	8003dc2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dbc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a6d      	ldr	r2, [pc, #436]	; (8003f7c <HAL_DMA_Abort+0x444>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d04a      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6b      	ldr	r2, [pc, #428]	; (8003f80 <HAL_DMA_Abort+0x448>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d045      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6a      	ldr	r2, [pc, #424]	; (8003f84 <HAL_DMA_Abort+0x44c>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d040      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a68      	ldr	r2, [pc, #416]	; (8003f88 <HAL_DMA_Abort+0x450>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d03b      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a67      	ldr	r2, [pc, #412]	; (8003f8c <HAL_DMA_Abort+0x454>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d036      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a65      	ldr	r2, [pc, #404]	; (8003f90 <HAL_DMA_Abort+0x458>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d031      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a64      	ldr	r2, [pc, #400]	; (8003f94 <HAL_DMA_Abort+0x45c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d02c      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a62      	ldr	r2, [pc, #392]	; (8003f98 <HAL_DMA_Abort+0x460>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d027      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	4a61      	ldr	r2, [pc, #388]	; (8003f9c <HAL_DMA_Abort+0x464>)
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d022      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a5f      	ldr	r2, [pc, #380]	; (8003fa0 <HAL_DMA_Abort+0x468>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d01d      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a5e      	ldr	r2, [pc, #376]	; (8003fa4 <HAL_DMA_Abort+0x46c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d018      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a5c      	ldr	r2, [pc, #368]	; (8003fa8 <HAL_DMA_Abort+0x470>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d013      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a5b      	ldr	r2, [pc, #364]	; (8003fac <HAL_DMA_Abort+0x474>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d00e      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a59      	ldr	r2, [pc, #356]	; (8003fb0 <HAL_DMA_Abort+0x478>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d009      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a58      	ldr	r2, [pc, #352]	; (8003fb4 <HAL_DMA_Abort+0x47c>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d004      	beq.n	8003e62 <HAL_DMA_Abort+0x32a>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a56      	ldr	r2, [pc, #344]	; (8003fb8 <HAL_DMA_Abort+0x480>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d108      	bne.n	8003e74 <HAL_DMA_Abort+0x33c>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]
 8003e72:	e007      	b.n	8003e84 <HAL_DMA_Abort+0x34c>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f022 0201 	bic.w	r2, r2, #1
 8003e82:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003e84:	e013      	b.n	8003eae <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e86:	f7ff f99b 	bl	80031c0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	2b05      	cmp	r3, #5
 8003e92:	d90c      	bls.n	8003eae <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2220      	movs	r2, #32
 8003e98:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2203      	movs	r2, #3
 8003e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003eaa:	2301      	movs	r3, #1
 8003eac:	e12d      	b.n	800410a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1e5      	bne.n	8003e86 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a2f      	ldr	r2, [pc, #188]	; (8003f7c <HAL_DMA_Abort+0x444>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d04a      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a2d      	ldr	r2, [pc, #180]	; (8003f80 <HAL_DMA_Abort+0x448>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d045      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a2c      	ldr	r2, [pc, #176]	; (8003f84 <HAL_DMA_Abort+0x44c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d040      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a2a      	ldr	r2, [pc, #168]	; (8003f88 <HAL_DMA_Abort+0x450>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d03b      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a29      	ldr	r2, [pc, #164]	; (8003f8c <HAL_DMA_Abort+0x454>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d036      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a27      	ldr	r2, [pc, #156]	; (8003f90 <HAL_DMA_Abort+0x458>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d031      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a26      	ldr	r2, [pc, #152]	; (8003f94 <HAL_DMA_Abort+0x45c>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d02c      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a24      	ldr	r2, [pc, #144]	; (8003f98 <HAL_DMA_Abort+0x460>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d027      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a23      	ldr	r2, [pc, #140]	; (8003f9c <HAL_DMA_Abort+0x464>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d022      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a21      	ldr	r2, [pc, #132]	; (8003fa0 <HAL_DMA_Abort+0x468>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d01d      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	4a20      	ldr	r2, [pc, #128]	; (8003fa4 <HAL_DMA_Abort+0x46c>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d018      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a1e      	ldr	r2, [pc, #120]	; (8003fa8 <HAL_DMA_Abort+0x470>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d013      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a1d      	ldr	r2, [pc, #116]	; (8003fac <HAL_DMA_Abort+0x474>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d00e      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a1b      	ldr	r2, [pc, #108]	; (8003fb0 <HAL_DMA_Abort+0x478>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d009      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a1a      	ldr	r2, [pc, #104]	; (8003fb4 <HAL_DMA_Abort+0x47c>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d004      	beq.n	8003f5a <HAL_DMA_Abort+0x422>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a18      	ldr	r2, [pc, #96]	; (8003fb8 <HAL_DMA_Abort+0x480>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Abort+0x426>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e000      	b.n	8003f60 <HAL_DMA_Abort+0x428>
 8003f5e:	2300      	movs	r3, #0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d02b      	beq.n	8003fbc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f68:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	223f      	movs	r2, #63	; 0x3f
 8003f74:	409a      	lsls	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	609a      	str	r2, [r3, #8]
 8003f7a:	e02a      	b.n	8003fd2 <HAL_DMA_Abort+0x49a>
 8003f7c:	40020010 	.word	0x40020010
 8003f80:	40020028 	.word	0x40020028
 8003f84:	40020040 	.word	0x40020040
 8003f88:	40020058 	.word	0x40020058
 8003f8c:	40020070 	.word	0x40020070
 8003f90:	40020088 	.word	0x40020088
 8003f94:	400200a0 	.word	0x400200a0
 8003f98:	400200b8 	.word	0x400200b8
 8003f9c:	40020410 	.word	0x40020410
 8003fa0:	40020428 	.word	0x40020428
 8003fa4:	40020440 	.word	0x40020440
 8003fa8:	40020458 	.word	0x40020458
 8003fac:	40020470 	.word	0x40020470
 8003fb0:	40020488 	.word	0x40020488
 8003fb4:	400204a0 	.word	0x400204a0
 8003fb8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc6:	f003 031f 	and.w	r3, r3, #31
 8003fca:	2201      	movs	r2, #1
 8003fcc:	409a      	lsls	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a4f      	ldr	r2, [pc, #316]	; (8004114 <HAL_DMA_Abort+0x5dc>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d072      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a4d      	ldr	r2, [pc, #308]	; (8004118 <HAL_DMA_Abort+0x5e0>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d06d      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a4c      	ldr	r2, [pc, #304]	; (800411c <HAL_DMA_Abort+0x5e4>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d068      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a4a      	ldr	r2, [pc, #296]	; (8004120 <HAL_DMA_Abort+0x5e8>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d063      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a49      	ldr	r2, [pc, #292]	; (8004124 <HAL_DMA_Abort+0x5ec>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d05e      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a47      	ldr	r2, [pc, #284]	; (8004128 <HAL_DMA_Abort+0x5f0>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d059      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a46      	ldr	r2, [pc, #280]	; (800412c <HAL_DMA_Abort+0x5f4>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d054      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a44      	ldr	r2, [pc, #272]	; (8004130 <HAL_DMA_Abort+0x5f8>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d04f      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a43      	ldr	r2, [pc, #268]	; (8004134 <HAL_DMA_Abort+0x5fc>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d04a      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a41      	ldr	r2, [pc, #260]	; (8004138 <HAL_DMA_Abort+0x600>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d045      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a40      	ldr	r2, [pc, #256]	; (800413c <HAL_DMA_Abort+0x604>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d040      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a3e      	ldr	r2, [pc, #248]	; (8004140 <HAL_DMA_Abort+0x608>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d03b      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a3d      	ldr	r2, [pc, #244]	; (8004144 <HAL_DMA_Abort+0x60c>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d036      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a3b      	ldr	r2, [pc, #236]	; (8004148 <HAL_DMA_Abort+0x610>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d031      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a3a      	ldr	r2, [pc, #232]	; (800414c <HAL_DMA_Abort+0x614>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d02c      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a38      	ldr	r2, [pc, #224]	; (8004150 <HAL_DMA_Abort+0x618>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d027      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a37      	ldr	r2, [pc, #220]	; (8004154 <HAL_DMA_Abort+0x61c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d022      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	4a35      	ldr	r2, [pc, #212]	; (8004158 <HAL_DMA_Abort+0x620>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d01d      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a34      	ldr	r2, [pc, #208]	; (800415c <HAL_DMA_Abort+0x624>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d018      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4a32      	ldr	r2, [pc, #200]	; (8004160 <HAL_DMA_Abort+0x628>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d013      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a31      	ldr	r2, [pc, #196]	; (8004164 <HAL_DMA_Abort+0x62c>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00e      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <HAL_DMA_Abort+0x630>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d009      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a2e      	ldr	r2, [pc, #184]	; (800416c <HAL_DMA_Abort+0x634>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_DMA_Abort+0x58a>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2c      	ldr	r2, [pc, #176]	; (8004170 <HAL_DMA_Abort+0x638>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d101      	bne.n	80040c6 <HAL_DMA_Abort+0x58e>
 80040c2:	2301      	movs	r3, #1
 80040c4:	e000      	b.n	80040c8 <HAL_DMA_Abort+0x590>
 80040c6:	2300      	movs	r3, #0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d015      	beq.n	80040f8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80040d4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d00c      	beq.n	80040f8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80040ec:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80040f6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40020010 	.word	0x40020010
 8004118:	40020028 	.word	0x40020028
 800411c:	40020040 	.word	0x40020040
 8004120:	40020058 	.word	0x40020058
 8004124:	40020070 	.word	0x40020070
 8004128:	40020088 	.word	0x40020088
 800412c:	400200a0 	.word	0x400200a0
 8004130:	400200b8 	.word	0x400200b8
 8004134:	40020410 	.word	0x40020410
 8004138:	40020428 	.word	0x40020428
 800413c:	40020440 	.word	0x40020440
 8004140:	40020458 	.word	0x40020458
 8004144:	40020470 	.word	0x40020470
 8004148:	40020488 	.word	0x40020488
 800414c:	400204a0 	.word	0x400204a0
 8004150:	400204b8 	.word	0x400204b8
 8004154:	58025408 	.word	0x58025408
 8004158:	5802541c 	.word	0x5802541c
 800415c:	58025430 	.word	0x58025430
 8004160:	58025444 	.word	0x58025444
 8004164:	58025458 	.word	0x58025458
 8004168:	5802546c 	.word	0x5802546c
 800416c:	58025480 	.word	0x58025480
 8004170:	58025494 	.word	0x58025494

08004174 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e237      	b.n	80045f6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800418c:	b2db      	uxtb	r3, r3
 800418e:	2b02      	cmp	r3, #2
 8004190:	d004      	beq.n	800419c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2280      	movs	r2, #128	; 0x80
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004198:	2301      	movs	r3, #1
 800419a:	e22c      	b.n	80045f6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a5c      	ldr	r2, [pc, #368]	; (8004314 <HAL_DMA_Abort_IT+0x1a0>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d04a      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4a5b      	ldr	r2, [pc, #364]	; (8004318 <HAL_DMA_Abort_IT+0x1a4>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d045      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	4a59      	ldr	r2, [pc, #356]	; (800431c <HAL_DMA_Abort_IT+0x1a8>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d040      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a58      	ldr	r2, [pc, #352]	; (8004320 <HAL_DMA_Abort_IT+0x1ac>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d03b      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a56      	ldr	r2, [pc, #344]	; (8004324 <HAL_DMA_Abort_IT+0x1b0>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d036      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4a55      	ldr	r2, [pc, #340]	; (8004328 <HAL_DMA_Abort_IT+0x1b4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d031      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a53      	ldr	r2, [pc, #332]	; (800432c <HAL_DMA_Abort_IT+0x1b8>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d02c      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a52      	ldr	r2, [pc, #328]	; (8004330 <HAL_DMA_Abort_IT+0x1bc>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d027      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a50      	ldr	r2, [pc, #320]	; (8004334 <HAL_DMA_Abort_IT+0x1c0>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d022      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a4f      	ldr	r2, [pc, #316]	; (8004338 <HAL_DMA_Abort_IT+0x1c4>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d01d      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a4d      	ldr	r2, [pc, #308]	; (800433c <HAL_DMA_Abort_IT+0x1c8>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d018      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a4c      	ldr	r2, [pc, #304]	; (8004340 <HAL_DMA_Abort_IT+0x1cc>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d013      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a4a      	ldr	r2, [pc, #296]	; (8004344 <HAL_DMA_Abort_IT+0x1d0>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d00e      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a49      	ldr	r2, [pc, #292]	; (8004348 <HAL_DMA_Abort_IT+0x1d4>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d009      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	4a47      	ldr	r2, [pc, #284]	; (800434c <HAL_DMA_Abort_IT+0x1d8>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d004      	beq.n	800423c <HAL_DMA_Abort_IT+0xc8>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a46      	ldr	r2, [pc, #280]	; (8004350 <HAL_DMA_Abort_IT+0x1dc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d101      	bne.n	8004240 <HAL_DMA_Abort_IT+0xcc>
 800423c:	2301      	movs	r3, #1
 800423e:	e000      	b.n	8004242 <HAL_DMA_Abort_IT+0xce>
 8004240:	2300      	movs	r3, #0
 8004242:	2b00      	cmp	r3, #0
 8004244:	f000 8086 	beq.w	8004354 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2204      	movs	r2, #4
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a2f      	ldr	r2, [pc, #188]	; (8004314 <HAL_DMA_Abort_IT+0x1a0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d04a      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_DMA_Abort_IT+0x1a4>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d045      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	4a2c      	ldr	r2, [pc, #176]	; (800431c <HAL_DMA_Abort_IT+0x1a8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d040      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_DMA_Abort_IT+0x1ac>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d03b      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a29      	ldr	r2, [pc, #164]	; (8004324 <HAL_DMA_Abort_IT+0x1b0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d036      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_DMA_Abort_IT+0x1b4>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d031      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a26      	ldr	r2, [pc, #152]	; (800432c <HAL_DMA_Abort_IT+0x1b8>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d02c      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	4a25      	ldr	r2, [pc, #148]	; (8004330 <HAL_DMA_Abort_IT+0x1bc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d027      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a23      	ldr	r2, [pc, #140]	; (8004334 <HAL_DMA_Abort_IT+0x1c0>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d022      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_DMA_Abort_IT+0x1c4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d01d      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a20      	ldr	r2, [pc, #128]	; (800433c <HAL_DMA_Abort_IT+0x1c8>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d018      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_DMA_Abort_IT+0x1cc>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d013      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_DMA_Abort_IT+0x1d0>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d00e      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_DMA_Abort_IT+0x1d4>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d009      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a1a      	ldr	r2, [pc, #104]	; (800434c <HAL_DMA_Abort_IT+0x1d8>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_DMA_Abort_IT+0x17c>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_DMA_Abort_IT+0x1dc>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d108      	bne.n	8004302 <HAL_DMA_Abort_IT+0x18e>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f022 0201 	bic.w	r2, r2, #1
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	e178      	b.n	80045f4 <HAL_DMA_Abort_IT+0x480>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0201 	bic.w	r2, r2, #1
 8004310:	601a      	str	r2, [r3, #0]
 8004312:	e16f      	b.n	80045f4 <HAL_DMA_Abort_IT+0x480>
 8004314:	40020010 	.word	0x40020010
 8004318:	40020028 	.word	0x40020028
 800431c:	40020040 	.word	0x40020040
 8004320:	40020058 	.word	0x40020058
 8004324:	40020070 	.word	0x40020070
 8004328:	40020088 	.word	0x40020088
 800432c:	400200a0 	.word	0x400200a0
 8004330:	400200b8 	.word	0x400200b8
 8004334:	40020410 	.word	0x40020410
 8004338:	40020428 	.word	0x40020428
 800433c:	40020440 	.word	0x40020440
 8004340:	40020458 	.word	0x40020458
 8004344:	40020470 	.word	0x40020470
 8004348:	40020488 	.word	0x40020488
 800434c:	400204a0 	.word	0x400204a0
 8004350:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f022 020e 	bic.w	r2, r2, #14
 8004362:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a6c      	ldr	r2, [pc, #432]	; (800451c <HAL_DMA_Abort_IT+0x3a8>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d04a      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a6b      	ldr	r2, [pc, #428]	; (8004520 <HAL_DMA_Abort_IT+0x3ac>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d045      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4a69      	ldr	r2, [pc, #420]	; (8004524 <HAL_DMA_Abort_IT+0x3b0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d040      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4a68      	ldr	r2, [pc, #416]	; (8004528 <HAL_DMA_Abort_IT+0x3b4>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d03b      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a66      	ldr	r2, [pc, #408]	; (800452c <HAL_DMA_Abort_IT+0x3b8>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d036      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a65      	ldr	r2, [pc, #404]	; (8004530 <HAL_DMA_Abort_IT+0x3bc>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d031      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a63      	ldr	r2, [pc, #396]	; (8004534 <HAL_DMA_Abort_IT+0x3c0>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d02c      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a62      	ldr	r2, [pc, #392]	; (8004538 <HAL_DMA_Abort_IT+0x3c4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d027      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a60      	ldr	r2, [pc, #384]	; (800453c <HAL_DMA_Abort_IT+0x3c8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d022      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a5f      	ldr	r2, [pc, #380]	; (8004540 <HAL_DMA_Abort_IT+0x3cc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d01d      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a5d      	ldr	r2, [pc, #372]	; (8004544 <HAL_DMA_Abort_IT+0x3d0>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d018      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a5c      	ldr	r2, [pc, #368]	; (8004548 <HAL_DMA_Abort_IT+0x3d4>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d013      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a5a      	ldr	r2, [pc, #360]	; (800454c <HAL_DMA_Abort_IT+0x3d8>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d00e      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a59      	ldr	r2, [pc, #356]	; (8004550 <HAL_DMA_Abort_IT+0x3dc>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d009      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a57      	ldr	r2, [pc, #348]	; (8004554 <HAL_DMA_Abort_IT+0x3e0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d004      	beq.n	8004404 <HAL_DMA_Abort_IT+0x290>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a56      	ldr	r2, [pc, #344]	; (8004558 <HAL_DMA_Abort_IT+0x3e4>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d108      	bne.n	8004416 <HAL_DMA_Abort_IT+0x2a2>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681a      	ldr	r2, [r3, #0]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f022 0201 	bic.w	r2, r2, #1
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	e007      	b.n	8004426 <HAL_DMA_Abort_IT+0x2b2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0201 	bic.w	r2, r2, #1
 8004424:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a3c      	ldr	r2, [pc, #240]	; (800451c <HAL_DMA_Abort_IT+0x3a8>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d072      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	4a3a      	ldr	r2, [pc, #232]	; (8004520 <HAL_DMA_Abort_IT+0x3ac>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d06d      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a39      	ldr	r2, [pc, #228]	; (8004524 <HAL_DMA_Abort_IT+0x3b0>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d068      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a37      	ldr	r2, [pc, #220]	; (8004528 <HAL_DMA_Abort_IT+0x3b4>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d063      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	4a36      	ldr	r2, [pc, #216]	; (800452c <HAL_DMA_Abort_IT+0x3b8>)
 8004454:	4293      	cmp	r3, r2
 8004456:	d05e      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a34      	ldr	r2, [pc, #208]	; (8004530 <HAL_DMA_Abort_IT+0x3bc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d059      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	4a33      	ldr	r2, [pc, #204]	; (8004534 <HAL_DMA_Abort_IT+0x3c0>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d054      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4a31      	ldr	r2, [pc, #196]	; (8004538 <HAL_DMA_Abort_IT+0x3c4>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d04f      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4a30      	ldr	r2, [pc, #192]	; (800453c <HAL_DMA_Abort_IT+0x3c8>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d04a      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a2e      	ldr	r2, [pc, #184]	; (8004540 <HAL_DMA_Abort_IT+0x3cc>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d045      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2d      	ldr	r2, [pc, #180]	; (8004544 <HAL_DMA_Abort_IT+0x3d0>)
 8004490:	4293      	cmp	r3, r2
 8004492:	d040      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	4a2b      	ldr	r2, [pc, #172]	; (8004548 <HAL_DMA_Abort_IT+0x3d4>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d03b      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a2a      	ldr	r2, [pc, #168]	; (800454c <HAL_DMA_Abort_IT+0x3d8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d036      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a28      	ldr	r2, [pc, #160]	; (8004550 <HAL_DMA_Abort_IT+0x3dc>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d031      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a27      	ldr	r2, [pc, #156]	; (8004554 <HAL_DMA_Abort_IT+0x3e0>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d02c      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a25      	ldr	r2, [pc, #148]	; (8004558 <HAL_DMA_Abort_IT+0x3e4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d027      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	4a24      	ldr	r2, [pc, #144]	; (800455c <HAL_DMA_Abort_IT+0x3e8>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d022      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	4a22      	ldr	r2, [pc, #136]	; (8004560 <HAL_DMA_Abort_IT+0x3ec>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01d      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	4a21      	ldr	r2, [pc, #132]	; (8004564 <HAL_DMA_Abort_IT+0x3f0>)
 80044e0:	4293      	cmp	r3, r2
 80044e2:	d018      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a1f      	ldr	r2, [pc, #124]	; (8004568 <HAL_DMA_Abort_IT+0x3f4>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a1e      	ldr	r2, [pc, #120]	; (800456c <HAL_DMA_Abort_IT+0x3f8>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d00e      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1c      	ldr	r2, [pc, #112]	; (8004570 <HAL_DMA_Abort_IT+0x3fc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d009      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1b      	ldr	r2, [pc, #108]	; (8004574 <HAL_DMA_Abort_IT+0x400>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d004      	beq.n	8004516 <HAL_DMA_Abort_IT+0x3a2>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a19      	ldr	r2, [pc, #100]	; (8004578 <HAL_DMA_Abort_IT+0x404>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d132      	bne.n	800457c <HAL_DMA_Abort_IT+0x408>
 8004516:	2301      	movs	r3, #1
 8004518:	e031      	b.n	800457e <HAL_DMA_Abort_IT+0x40a>
 800451a:	bf00      	nop
 800451c:	40020010 	.word	0x40020010
 8004520:	40020028 	.word	0x40020028
 8004524:	40020040 	.word	0x40020040
 8004528:	40020058 	.word	0x40020058
 800452c:	40020070 	.word	0x40020070
 8004530:	40020088 	.word	0x40020088
 8004534:	400200a0 	.word	0x400200a0
 8004538:	400200b8 	.word	0x400200b8
 800453c:	40020410 	.word	0x40020410
 8004540:	40020428 	.word	0x40020428
 8004544:	40020440 	.word	0x40020440
 8004548:	40020458 	.word	0x40020458
 800454c:	40020470 	.word	0x40020470
 8004550:	40020488 	.word	0x40020488
 8004554:	400204a0 	.word	0x400204a0
 8004558:	400204b8 	.word	0x400204b8
 800455c:	58025408 	.word	0x58025408
 8004560:	5802541c 	.word	0x5802541c
 8004564:	58025430 	.word	0x58025430
 8004568:	58025444 	.word	0x58025444
 800456c:	58025458 	.word	0x58025458
 8004570:	5802546c 	.word	0x5802546c
 8004574:	58025480 	.word	0x58025480
 8004578:	58025494 	.word	0x58025494
 800457c:	2300      	movs	r3, #0
 800457e:	2b00      	cmp	r3, #0
 8004580:	d028      	beq.n	80045d4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800458c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004590:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004596:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800459c:	f003 031f 	and.w	r3, r3, #31
 80045a0:	2201      	movs	r2, #1
 80045a2:	409a      	lsls	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80045b0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d00c      	beq.n	80045d4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80045d2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d003      	beq.n	80045f4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop

08004600 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b08a      	sub	sp, #40	; 0x28
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800460c:	4b67      	ldr	r3, [pc, #412]	; (80047ac <HAL_DMA_IRQHandler+0x1ac>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a67      	ldr	r2, [pc, #412]	; (80047b0 <HAL_DMA_IRQHandler+0x1b0>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800461e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004624:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8004626:	6a3b      	ldr	r3, [r7, #32]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	4a5f      	ldr	r2, [pc, #380]	; (80047b4 <HAL_DMA_IRQHandler+0x1b4>)
 8004638:	4293      	cmp	r3, r2
 800463a:	d04a      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	4a5d      	ldr	r2, [pc, #372]	; (80047b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d045      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	4a5c      	ldr	r2, [pc, #368]	; (80047bc <HAL_DMA_IRQHandler+0x1bc>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d040      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	4a5a      	ldr	r2, [pc, #360]	; (80047c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d03b      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a59      	ldr	r2, [pc, #356]	; (80047c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d036      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a57      	ldr	r2, [pc, #348]	; (80047c8 <HAL_DMA_IRQHandler+0x1c8>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d031      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	4a56      	ldr	r2, [pc, #344]	; (80047cc <HAL_DMA_IRQHandler+0x1cc>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d02c      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a54      	ldr	r2, [pc, #336]	; (80047d0 <HAL_DMA_IRQHandler+0x1d0>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d027      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a53      	ldr	r2, [pc, #332]	; (80047d4 <HAL_DMA_IRQHandler+0x1d4>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d022      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a51      	ldr	r2, [pc, #324]	; (80047d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d01d      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a50      	ldr	r2, [pc, #320]	; (80047dc <HAL_DMA_IRQHandler+0x1dc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d018      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a4e      	ldr	r2, [pc, #312]	; (80047e0 <HAL_DMA_IRQHandler+0x1e0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d013      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a4d      	ldr	r2, [pc, #308]	; (80047e4 <HAL_DMA_IRQHandler+0x1e4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d00e      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a4b      	ldr	r2, [pc, #300]	; (80047e8 <HAL_DMA_IRQHandler+0x1e8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d009      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a4a      	ldr	r2, [pc, #296]	; (80047ec <HAL_DMA_IRQHandler+0x1ec>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d004      	beq.n	80046d2 <HAL_DMA_IRQHandler+0xd2>
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a48      	ldr	r2, [pc, #288]	; (80047f0 <HAL_DMA_IRQHandler+0x1f0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d101      	bne.n	80046d6 <HAL_DMA_IRQHandler+0xd6>
 80046d2:	2301      	movs	r3, #1
 80046d4:	e000      	b.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
 80046d6:	2300      	movs	r3, #0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f000 842b 	beq.w	8004f34 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e2:	f003 031f 	and.w	r3, r3, #31
 80046e6:	2208      	movs	r2, #8
 80046e8:	409a      	lsls	r2, r3
 80046ea:	69bb      	ldr	r3, [r7, #24]
 80046ec:	4013      	ands	r3, r2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f000 80a2 	beq.w	8004838 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a2e      	ldr	r2, [pc, #184]	; (80047b4 <HAL_DMA_IRQHandler+0x1b4>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d04a      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a2d      	ldr	r2, [pc, #180]	; (80047b8 <HAL_DMA_IRQHandler+0x1b8>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d045      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <HAL_DMA_IRQHandler+0x1bc>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d040      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a2a      	ldr	r2, [pc, #168]	; (80047c0 <HAL_DMA_IRQHandler+0x1c0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d03b      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a28      	ldr	r2, [pc, #160]	; (80047c4 <HAL_DMA_IRQHandler+0x1c4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d036      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a27      	ldr	r2, [pc, #156]	; (80047c8 <HAL_DMA_IRQHandler+0x1c8>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d031      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a25      	ldr	r2, [pc, #148]	; (80047cc <HAL_DMA_IRQHandler+0x1cc>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d02c      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a24      	ldr	r2, [pc, #144]	; (80047d0 <HAL_DMA_IRQHandler+0x1d0>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d027      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	4a22      	ldr	r2, [pc, #136]	; (80047d4 <HAL_DMA_IRQHandler+0x1d4>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d022      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4a21      	ldr	r2, [pc, #132]	; (80047d8 <HAL_DMA_IRQHandler+0x1d8>)
 8004754:	4293      	cmp	r3, r2
 8004756:	d01d      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4a1f      	ldr	r2, [pc, #124]	; (80047dc <HAL_DMA_IRQHandler+0x1dc>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d018      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1e      	ldr	r2, [pc, #120]	; (80047e0 <HAL_DMA_IRQHandler+0x1e0>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d013      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a1c      	ldr	r2, [pc, #112]	; (80047e4 <HAL_DMA_IRQHandler+0x1e4>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d00e      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a1b      	ldr	r2, [pc, #108]	; (80047e8 <HAL_DMA_IRQHandler+0x1e8>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d009      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	; (80047ec <HAL_DMA_IRQHandler+0x1ec>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d004      	beq.n	8004794 <HAL_DMA_IRQHandler+0x194>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	4a18      	ldr	r2, [pc, #96]	; (80047f0 <HAL_DMA_IRQHandler+0x1f0>)
 8004790:	4293      	cmp	r3, r2
 8004792:	d12f      	bne.n	80047f4 <HAL_DMA_IRQHandler+0x1f4>
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f003 0304 	and.w	r3, r3, #4
 800479e:	2b00      	cmp	r3, #0
 80047a0:	bf14      	ite	ne
 80047a2:	2301      	movne	r3, #1
 80047a4:	2300      	moveq	r3, #0
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	e02e      	b.n	8004808 <HAL_DMA_IRQHandler+0x208>
 80047aa:	bf00      	nop
 80047ac:	24000000 	.word	0x24000000
 80047b0:	1b4e81b5 	.word	0x1b4e81b5
 80047b4:	40020010 	.word	0x40020010
 80047b8:	40020028 	.word	0x40020028
 80047bc:	40020040 	.word	0x40020040
 80047c0:	40020058 	.word	0x40020058
 80047c4:	40020070 	.word	0x40020070
 80047c8:	40020088 	.word	0x40020088
 80047cc:	400200a0 	.word	0x400200a0
 80047d0:	400200b8 	.word	0x400200b8
 80047d4:	40020410 	.word	0x40020410
 80047d8:	40020428 	.word	0x40020428
 80047dc:	40020440 	.word	0x40020440
 80047e0:	40020458 	.word	0x40020458
 80047e4:	40020470 	.word	0x40020470
 80047e8:	40020488 	.word	0x40020488
 80047ec:	400204a0 	.word	0x400204a0
 80047f0:	400204b8 	.word	0x400204b8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0308 	and.w	r3, r3, #8
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bf14      	ite	ne
 8004802:	2301      	movne	r3, #1
 8004804:	2300      	moveq	r3, #0
 8004806:	b2db      	uxtb	r3, r3
 8004808:	2b00      	cmp	r3, #0
 800480a:	d015      	beq.n	8004838 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0204 	bic.w	r2, r2, #4
 800481a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2208      	movs	r2, #8
 8004826:	409a      	lsls	r2, r3
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f043 0201 	orr.w	r2, r3, #1
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	fa22 f303 	lsr.w	r3, r2, r3
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d06e      	beq.n	800492c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a69      	ldr	r2, [pc, #420]	; (80049f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a67      	ldr	r2, [pc, #412]	; (80049fc <HAL_DMA_IRQHandler+0x3fc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a66      	ldr	r2, [pc, #408]	; (8004a00 <HAL_DMA_IRQHandler+0x400>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a64      	ldr	r2, [pc, #400]	; (8004a04 <HAL_DMA_IRQHandler+0x404>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a63      	ldr	r2, [pc, #396]	; (8004a08 <HAL_DMA_IRQHandler+0x408>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a61      	ldr	r2, [pc, #388]	; (8004a0c <HAL_DMA_IRQHandler+0x40c>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a60      	ldr	r2, [pc, #384]	; (8004a10 <HAL_DMA_IRQHandler+0x410>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a5e      	ldr	r2, [pc, #376]	; (8004a14 <HAL_DMA_IRQHandler+0x414>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a5d      	ldr	r2, [pc, #372]	; (8004a18 <HAL_DMA_IRQHandler+0x418>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a5b      	ldr	r2, [pc, #364]	; (8004a1c <HAL_DMA_IRQHandler+0x41c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a5a      	ldr	r2, [pc, #360]	; (8004a20 <HAL_DMA_IRQHandler+0x420>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a58      	ldr	r2, [pc, #352]	; (8004a24 <HAL_DMA_IRQHandler+0x424>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a57      	ldr	r2, [pc, #348]	; (8004a28 <HAL_DMA_IRQHandler+0x428>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a55      	ldr	r2, [pc, #340]	; (8004a2c <HAL_DMA_IRQHandler+0x42c>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a54      	ldr	r2, [pc, #336]	; (8004a30 <HAL_DMA_IRQHandler+0x430>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_IRQHandler+0x2ee>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a52      	ldr	r2, [pc, #328]	; (8004a34 <HAL_DMA_IRQHandler+0x434>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10a      	bne.n	8004904 <HAL_DMA_IRQHandler+0x304>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	695b      	ldr	r3, [r3, #20]
 80048f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e003      	b.n	800490c <HAL_DMA_IRQHandler+0x30c>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2300      	movs	r3, #0
 800490c:	2b00      	cmp	r3, #0
 800490e:	d00d      	beq.n	800492c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004914:	f003 031f 	and.w	r3, r3, #31
 8004918:	2201      	movs	r2, #1
 800491a:	409a      	lsls	r2, r3
 800491c:	6a3b      	ldr	r3, [r7, #32]
 800491e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004924:	f043 0202 	orr.w	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	2204      	movs	r2, #4
 8004936:	409a      	lsls	r2, r3
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	4013      	ands	r3, r2
 800493c:	2b00      	cmp	r3, #0
 800493e:	f000 808f 	beq.w	8004a60 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a2c      	ldr	r2, [pc, #176]	; (80049f8 <HAL_DMA_IRQHandler+0x3f8>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d04a      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <HAL_DMA_IRQHandler+0x3fc>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d045      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <HAL_DMA_IRQHandler+0x400>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d040      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a27      	ldr	r2, [pc, #156]	; (8004a04 <HAL_DMA_IRQHandler+0x404>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d03b      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a26      	ldr	r2, [pc, #152]	; (8004a08 <HAL_DMA_IRQHandler+0x408>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d036      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a24      	ldr	r2, [pc, #144]	; (8004a0c <HAL_DMA_IRQHandler+0x40c>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d031      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a23      	ldr	r2, [pc, #140]	; (8004a10 <HAL_DMA_IRQHandler+0x410>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d02c      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a21      	ldr	r2, [pc, #132]	; (8004a14 <HAL_DMA_IRQHandler+0x414>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d027      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <HAL_DMA_IRQHandler+0x418>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d022      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_DMA_IRQHandler+0x41c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01d      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a1d      	ldr	r2, [pc, #116]	; (8004a20 <HAL_DMA_IRQHandler+0x420>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d018      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_DMA_IRQHandler+0x424>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d013      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a1a      	ldr	r2, [pc, #104]	; (8004a28 <HAL_DMA_IRQHandler+0x428>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d00e      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_DMA_IRQHandler+0x42c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d009      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a17      	ldr	r2, [pc, #92]	; (8004a30 <HAL_DMA_IRQHandler+0x430>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d004      	beq.n	80049e2 <HAL_DMA_IRQHandler+0x3e2>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a15      	ldr	r2, [pc, #84]	; (8004a34 <HAL_DMA_IRQHandler+0x434>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d12a      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x438>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	e023      	b.n	8004a40 <HAL_DMA_IRQHandler+0x440>
 80049f8:	40020010 	.word	0x40020010
 80049fc:	40020028 	.word	0x40020028
 8004a00:	40020040 	.word	0x40020040
 8004a04:	40020058 	.word	0x40020058
 8004a08:	40020070 	.word	0x40020070
 8004a0c:	40020088 	.word	0x40020088
 8004a10:	400200a0 	.word	0x400200a0
 8004a14:	400200b8 	.word	0x400200b8
 8004a18:	40020410 	.word	0x40020410
 8004a1c:	40020428 	.word	0x40020428
 8004a20:	40020440 	.word	0x40020440
 8004a24:	40020458 	.word	0x40020458
 8004a28:	40020470 	.word	0x40020470
 8004a2c:	40020488 	.word	0x40020488
 8004a30:	400204a0 	.word	0x400204a0
 8004a34:	400204b8 	.word	0x400204b8
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	2300      	movs	r3, #0
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00d      	beq.n	8004a60 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a48:	f003 031f 	and.w	r3, r3, #31
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	6a3b      	ldr	r3, [r7, #32]
 8004a52:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a64:	f003 031f 	and.w	r3, r3, #31
 8004a68:	2210      	movs	r2, #16
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	69bb      	ldr	r3, [r7, #24]
 8004a6e:	4013      	ands	r3, r2
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	f000 80a6 	beq.w	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a85      	ldr	r2, [pc, #532]	; (8004c90 <HAL_DMA_IRQHandler+0x690>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d04a      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a83      	ldr	r2, [pc, #524]	; (8004c94 <HAL_DMA_IRQHandler+0x694>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d045      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a82      	ldr	r2, [pc, #520]	; (8004c98 <HAL_DMA_IRQHandler+0x698>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d040      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a80      	ldr	r2, [pc, #512]	; (8004c9c <HAL_DMA_IRQHandler+0x69c>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d03b      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a7f      	ldr	r2, [pc, #508]	; (8004ca0 <HAL_DMA_IRQHandler+0x6a0>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d036      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a7d      	ldr	r2, [pc, #500]	; (8004ca4 <HAL_DMA_IRQHandler+0x6a4>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d031      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	4a7c      	ldr	r2, [pc, #496]	; (8004ca8 <HAL_DMA_IRQHandler+0x6a8>)
 8004ab8:	4293      	cmp	r3, r2
 8004aba:	d02c      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a7a      	ldr	r2, [pc, #488]	; (8004cac <HAL_DMA_IRQHandler+0x6ac>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d027      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a79      	ldr	r2, [pc, #484]	; (8004cb0 <HAL_DMA_IRQHandler+0x6b0>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d022      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a77      	ldr	r2, [pc, #476]	; (8004cb4 <HAL_DMA_IRQHandler+0x6b4>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d01d      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a76      	ldr	r2, [pc, #472]	; (8004cb8 <HAL_DMA_IRQHandler+0x6b8>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d018      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a74      	ldr	r2, [pc, #464]	; (8004cbc <HAL_DMA_IRQHandler+0x6bc>)
 8004aea:	4293      	cmp	r3, r2
 8004aec:	d013      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a73      	ldr	r2, [pc, #460]	; (8004cc0 <HAL_DMA_IRQHandler+0x6c0>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d00e      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	4a71      	ldr	r2, [pc, #452]	; (8004cc4 <HAL_DMA_IRQHandler+0x6c4>)
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d009      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	4a70      	ldr	r2, [pc, #448]	; (8004cc8 <HAL_DMA_IRQHandler+0x6c8>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d004      	beq.n	8004b16 <HAL_DMA_IRQHandler+0x516>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a6e      	ldr	r2, [pc, #440]	; (8004ccc <HAL_DMA_IRQHandler+0x6cc>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d10a      	bne.n	8004b2c <HAL_DMA_IRQHandler+0x52c>
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0308 	and.w	r3, r3, #8
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	bf14      	ite	ne
 8004b24:	2301      	movne	r3, #1
 8004b26:	2300      	moveq	r3, #0
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	e009      	b.n	8004b40 <HAL_DMA_IRQHandler+0x540>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bf14      	ite	ne
 8004b3a:	2301      	movne	r3, #1
 8004b3c:	2300      	moveq	r3, #0
 8004b3e:	b2db      	uxtb	r3, r3
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d03e      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2210      	movs	r2, #16
 8004b4e:	409a      	lsls	r2, r3
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d018      	beq.n	8004b94 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d024      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	4798      	blx	r3
 8004b80:	e01f      	b.n	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d01b      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	4798      	blx	r3
 8004b92:	e016      	b.n	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d107      	bne.n	8004bb2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f022 0208 	bic.w	r2, r2, #8
 8004bb0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bc6:	f003 031f 	and.w	r3, r3, #31
 8004bca:	2220      	movs	r2, #32
 8004bcc:	409a      	lsls	r2, r3
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	f000 8110 	beq.w	8004df8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a2c      	ldr	r2, [pc, #176]	; (8004c90 <HAL_DMA_IRQHandler+0x690>)
 8004bde:	4293      	cmp	r3, r2
 8004be0:	d04a      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4a2b      	ldr	r2, [pc, #172]	; (8004c94 <HAL_DMA_IRQHandler+0x694>)
 8004be8:	4293      	cmp	r3, r2
 8004bea:	d045      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	4a29      	ldr	r2, [pc, #164]	; (8004c98 <HAL_DMA_IRQHandler+0x698>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d040      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	4a28      	ldr	r2, [pc, #160]	; (8004c9c <HAL_DMA_IRQHandler+0x69c>)
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d03b      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a26      	ldr	r2, [pc, #152]	; (8004ca0 <HAL_DMA_IRQHandler+0x6a0>)
 8004c06:	4293      	cmp	r3, r2
 8004c08:	d036      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a25      	ldr	r2, [pc, #148]	; (8004ca4 <HAL_DMA_IRQHandler+0x6a4>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d031      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a23      	ldr	r2, [pc, #140]	; (8004ca8 <HAL_DMA_IRQHandler+0x6a8>)
 8004c1a:	4293      	cmp	r3, r2
 8004c1c:	d02c      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a22      	ldr	r2, [pc, #136]	; (8004cac <HAL_DMA_IRQHandler+0x6ac>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d027      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a20      	ldr	r2, [pc, #128]	; (8004cb0 <HAL_DMA_IRQHandler+0x6b0>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d022      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1f      	ldr	r2, [pc, #124]	; (8004cb4 <HAL_DMA_IRQHandler+0x6b4>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d01d      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a1d      	ldr	r2, [pc, #116]	; (8004cb8 <HAL_DMA_IRQHandler+0x6b8>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d018      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1c      	ldr	r2, [pc, #112]	; (8004cbc <HAL_DMA_IRQHandler+0x6bc>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d013      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a1a      	ldr	r2, [pc, #104]	; (8004cc0 <HAL_DMA_IRQHandler+0x6c0>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d00e      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_DMA_IRQHandler+0x6c4>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d009      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <HAL_DMA_IRQHandler+0x6c8>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d004      	beq.n	8004c78 <HAL_DMA_IRQHandler+0x678>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_DMA_IRQHandler+0x6cc>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d12b      	bne.n	8004cd0 <HAL_DMA_IRQHandler+0x6d0>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	f003 0310 	and.w	r3, r3, #16
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	bf14      	ite	ne
 8004c86:	2301      	movne	r3, #1
 8004c88:	2300      	moveq	r3, #0
 8004c8a:	b2db      	uxtb	r3, r3
 8004c8c:	e02a      	b.n	8004ce4 <HAL_DMA_IRQHandler+0x6e4>
 8004c8e:	bf00      	nop
 8004c90:	40020010 	.word	0x40020010
 8004c94:	40020028 	.word	0x40020028
 8004c98:	40020040 	.word	0x40020040
 8004c9c:	40020058 	.word	0x40020058
 8004ca0:	40020070 	.word	0x40020070
 8004ca4:	40020088 	.word	0x40020088
 8004ca8:	400200a0 	.word	0x400200a0
 8004cac:	400200b8 	.word	0x400200b8
 8004cb0:	40020410 	.word	0x40020410
 8004cb4:	40020428 	.word	0x40020428
 8004cb8:	40020440 	.word	0x40020440
 8004cbc:	40020458 	.word	0x40020458
 8004cc0:	40020470 	.word	0x40020470
 8004cc4:	40020488 	.word	0x40020488
 8004cc8:	400204a0 	.word	0x400204a0
 8004ccc:	400204b8 	.word	0x400204b8
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	bf14      	ite	ne
 8004cde:	2301      	movne	r3, #1
 8004ce0:	2300      	moveq	r3, #0
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f000 8087 	beq.w	8004df8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	f003 031f 	and.w	r3, r3, #31
 8004cf2:	2220      	movs	r2, #32
 8004cf4:	409a      	lsls	r2, r3
 8004cf6:	6a3b      	ldr	r3, [r7, #32]
 8004cf8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d139      	bne.n	8004d7a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f022 0216 	bic.w	r2, r2, #22
 8004d14:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	695a      	ldr	r2, [r3, #20]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004d24:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d103      	bne.n	8004d36 <HAL_DMA_IRQHandler+0x736>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d007      	beq.n	8004d46 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f022 0208 	bic.w	r2, r2, #8
 8004d44:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d4a:	f003 031f 	and.w	r3, r3, #31
 8004d4e:	223f      	movs	r2, #63	; 0x3f
 8004d50:	409a      	lsls	r2, r3
 8004d52:	6a3b      	ldr	r3, [r7, #32]
 8004d54:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2200      	movs	r2, #0
 8004d62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f000 834a 	beq.w	8005404 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d74:	6878      	ldr	r0, [r7, #4]
 8004d76:	4798      	blx	r3
          }
          return;
 8004d78:	e344      	b.n	8005404 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d018      	beq.n	8004dba <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d108      	bne.n	8004da8 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d02c      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	4798      	blx	r3
 8004da6:	e027      	b.n	8004df8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d023      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	4798      	blx	r3
 8004db8:	e01e      	b.n	8004df8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10f      	bne.n	8004de8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f022 0210 	bic.w	r2, r2, #16
 8004dd6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d003      	beq.n	8004df8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	f000 8306 	beq.w	800540e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	f000 8088 	beq.w	8004f20 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2204      	movs	r2, #4
 8004e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a7a      	ldr	r2, [pc, #488]	; (8005008 <HAL_DMA_IRQHandler+0xa08>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d04a      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a79      	ldr	r2, [pc, #484]	; (800500c <HAL_DMA_IRQHandler+0xa0c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d045      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a77      	ldr	r2, [pc, #476]	; (8005010 <HAL_DMA_IRQHandler+0xa10>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d040      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a76      	ldr	r2, [pc, #472]	; (8005014 <HAL_DMA_IRQHandler+0xa14>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d03b      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a74      	ldr	r2, [pc, #464]	; (8005018 <HAL_DMA_IRQHandler+0xa18>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d036      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a73      	ldr	r2, [pc, #460]	; (800501c <HAL_DMA_IRQHandler+0xa1c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d031      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a71      	ldr	r2, [pc, #452]	; (8005020 <HAL_DMA_IRQHandler+0xa20>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d02c      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a70      	ldr	r2, [pc, #448]	; (8005024 <HAL_DMA_IRQHandler+0xa24>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d027      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a6e      	ldr	r2, [pc, #440]	; (8005028 <HAL_DMA_IRQHandler+0xa28>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d022      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a6d      	ldr	r2, [pc, #436]	; (800502c <HAL_DMA_IRQHandler+0xa2c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d01d      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a6b      	ldr	r2, [pc, #428]	; (8005030 <HAL_DMA_IRQHandler+0xa30>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d018      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a6a      	ldr	r2, [pc, #424]	; (8005034 <HAL_DMA_IRQHandler+0xa34>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d013      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a68      	ldr	r2, [pc, #416]	; (8005038 <HAL_DMA_IRQHandler+0xa38>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d00e      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a67      	ldr	r2, [pc, #412]	; (800503c <HAL_DMA_IRQHandler+0xa3c>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d009      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a65      	ldr	r2, [pc, #404]	; (8005040 <HAL_DMA_IRQHandler+0xa40>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d004      	beq.n	8004eb8 <HAL_DMA_IRQHandler+0x8b8>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a64      	ldr	r2, [pc, #400]	; (8005044 <HAL_DMA_IRQHandler+0xa44>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d108      	bne.n	8004eca <HAL_DMA_IRQHandler+0x8ca>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f022 0201 	bic.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]
 8004ec8:	e007      	b.n	8004eda <HAL_DMA_IRQHandler+0x8da>
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	681a      	ldr	r2, [r3, #0]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f022 0201 	bic.w	r2, r2, #1
 8004ed8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	3301      	adds	r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d307      	bcc.n	8004ef6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d1f2      	bne.n	8004eda <HAL_DMA_IRQHandler+0x8da>
 8004ef4:	e000      	b.n	8004ef8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004ef6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d004      	beq.n	8004f10 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2203      	movs	r2, #3
 8004f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004f0e:	e003      	b.n	8004f18 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8272 	beq.w	800540e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
 8004f32:	e26c      	b.n	800540e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a43      	ldr	r2, [pc, #268]	; (8005048 <HAL_DMA_IRQHandler+0xa48>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d022      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a42      	ldr	r2, [pc, #264]	; (800504c <HAL_DMA_IRQHandler+0xa4c>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d01d      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a40      	ldr	r2, [pc, #256]	; (8005050 <HAL_DMA_IRQHandler+0xa50>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d018      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a3f      	ldr	r2, [pc, #252]	; (8005054 <HAL_DMA_IRQHandler+0xa54>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d013      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a3d      	ldr	r2, [pc, #244]	; (8005058 <HAL_DMA_IRQHandler+0xa58>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d00e      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a3c      	ldr	r2, [pc, #240]	; (800505c <HAL_DMA_IRQHandler+0xa5c>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d009      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <HAL_DMA_IRQHandler+0xa60>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d004      	beq.n	8004f84 <HAL_DMA_IRQHandler+0x984>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a39      	ldr	r2, [pc, #228]	; (8005064 <HAL_DMA_IRQHandler+0xa64>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d101      	bne.n	8004f88 <HAL_DMA_IRQHandler+0x988>
 8004f84:	2301      	movs	r3, #1
 8004f86:	e000      	b.n	8004f8a <HAL_DMA_IRQHandler+0x98a>
 8004f88:	2300      	movs	r3, #0
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	f000 823f 	beq.w	800540e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f9c:	f003 031f 	and.w	r3, r3, #31
 8004fa0:	2204      	movs	r2, #4
 8004fa2:	409a      	lsls	r2, r3
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	4013      	ands	r3, r2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 80cd 	beq.w	8005148 <HAL_DMA_IRQHandler+0xb48>
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 80c7 	beq.w	8005148 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fbe:	f003 031f 	and.w	r3, r3, #31
 8004fc2:	2204      	movs	r2, #4
 8004fc4:	409a      	lsls	r2, r3
 8004fc6:	69fb      	ldr	r3, [r7, #28]
 8004fc8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004fca:	693b      	ldr	r3, [r7, #16]
 8004fcc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d049      	beq.n	8005068 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	f000 8210 	beq.w	8005408 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ff0:	e20a      	b.n	8005408 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8206 	beq.w	8005408 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005004:	e200      	b.n	8005408 <HAL_DMA_IRQHandler+0xe08>
 8005006:	bf00      	nop
 8005008:	40020010 	.word	0x40020010
 800500c:	40020028 	.word	0x40020028
 8005010:	40020040 	.word	0x40020040
 8005014:	40020058 	.word	0x40020058
 8005018:	40020070 	.word	0x40020070
 800501c:	40020088 	.word	0x40020088
 8005020:	400200a0 	.word	0x400200a0
 8005024:	400200b8 	.word	0x400200b8
 8005028:	40020410 	.word	0x40020410
 800502c:	40020428 	.word	0x40020428
 8005030:	40020440 	.word	0x40020440
 8005034:	40020458 	.word	0x40020458
 8005038:	40020470 	.word	0x40020470
 800503c:	40020488 	.word	0x40020488
 8005040:	400204a0 	.word	0x400204a0
 8005044:	400204b8 	.word	0x400204b8
 8005048:	58025408 	.word	0x58025408
 800504c:	5802541c 	.word	0x5802541c
 8005050:	58025430 	.word	0x58025430
 8005054:	58025444 	.word	0x58025444
 8005058:	58025458 	.word	0x58025458
 800505c:	5802546c 	.word	0x5802546c
 8005060:	58025480 	.word	0x58025480
 8005064:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	f003 0320 	and.w	r3, r3, #32
 800506e:	2b00      	cmp	r3, #0
 8005070:	d160      	bne.n	8005134 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a7f      	ldr	r2, [pc, #508]	; (8005274 <HAL_DMA_IRQHandler+0xc74>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d04a      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a7d      	ldr	r2, [pc, #500]	; (8005278 <HAL_DMA_IRQHandler+0xc78>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d045      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	4a7c      	ldr	r2, [pc, #496]	; (800527c <HAL_DMA_IRQHandler+0xc7c>)
 800508c:	4293      	cmp	r3, r2
 800508e:	d040      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4a7a      	ldr	r2, [pc, #488]	; (8005280 <HAL_DMA_IRQHandler+0xc80>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d03b      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	4a79      	ldr	r2, [pc, #484]	; (8005284 <HAL_DMA_IRQHandler+0xc84>)
 80050a0:	4293      	cmp	r3, r2
 80050a2:	d036      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a77      	ldr	r2, [pc, #476]	; (8005288 <HAL_DMA_IRQHandler+0xc88>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d031      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4a76      	ldr	r2, [pc, #472]	; (800528c <HAL_DMA_IRQHandler+0xc8c>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d02c      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	4a74      	ldr	r2, [pc, #464]	; (8005290 <HAL_DMA_IRQHandler+0xc90>)
 80050be:	4293      	cmp	r3, r2
 80050c0:	d027      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	4a73      	ldr	r2, [pc, #460]	; (8005294 <HAL_DMA_IRQHandler+0xc94>)
 80050c8:	4293      	cmp	r3, r2
 80050ca:	d022      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	4a71      	ldr	r2, [pc, #452]	; (8005298 <HAL_DMA_IRQHandler+0xc98>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	d01d      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a70      	ldr	r2, [pc, #448]	; (800529c <HAL_DMA_IRQHandler+0xc9c>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	d018      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a6e      	ldr	r2, [pc, #440]	; (80052a0 <HAL_DMA_IRQHandler+0xca0>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a6d      	ldr	r2, [pc, #436]	; (80052a4 <HAL_DMA_IRQHandler+0xca4>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d00e      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a6b      	ldr	r2, [pc, #428]	; (80052a8 <HAL_DMA_IRQHandler+0xca8>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d009      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	4a6a      	ldr	r2, [pc, #424]	; (80052ac <HAL_DMA_IRQHandler+0xcac>)
 8005104:	4293      	cmp	r3, r2
 8005106:	d004      	beq.n	8005112 <HAL_DMA_IRQHandler+0xb12>
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a68      	ldr	r2, [pc, #416]	; (80052b0 <HAL_DMA_IRQHandler+0xcb0>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <HAL_DMA_IRQHandler+0xb24>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0208 	bic.w	r2, r2, #8
 8005120:	601a      	str	r2, [r3, #0]
 8005122:	e007      	b.n	8005134 <HAL_DMA_IRQHandler+0xb34>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	681a      	ldr	r2, [r3, #0]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f022 0204 	bic.w	r2, r2, #4
 8005132:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005138:	2b00      	cmp	r3, #0
 800513a:	f000 8165 	beq.w	8005408 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005146:	e15f      	b.n	8005408 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800514c:	f003 031f 	and.w	r3, r3, #31
 8005150:	2202      	movs	r2, #2
 8005152:	409a      	lsls	r2, r3
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	4013      	ands	r3, r2
 8005158:	2b00      	cmp	r3, #0
 800515a:	f000 80c5 	beq.w	80052e8 <HAL_DMA_IRQHandler+0xce8>
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	f003 0302 	and.w	r3, r3, #2
 8005164:	2b00      	cmp	r3, #0
 8005166:	f000 80bf 	beq.w	80052e8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800516e:	f003 031f 	and.w	r3, r3, #31
 8005172:	2202      	movs	r2, #2
 8005174:	409a      	lsls	r2, r3
 8005176:	69fb      	ldr	r3, [r7, #28]
 8005178:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005180:	2b00      	cmp	r3, #0
 8005182:	d018      	beq.n	80051b6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d109      	bne.n	80051a2 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	2b00      	cmp	r3, #0
 8005194:	f000 813a 	beq.w	800540c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051a0:	e134      	b.n	800540c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	f000 8130 	beq.w	800540c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051b4:	e12a      	b.n	800540c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f003 0320 	and.w	r3, r3, #32
 80051bc:	2b00      	cmp	r3, #0
 80051be:	f040 8089 	bne.w	80052d4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	4a2b      	ldr	r2, [pc, #172]	; (8005274 <HAL_DMA_IRQHandler+0xc74>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d04a      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a29      	ldr	r2, [pc, #164]	; (8005278 <HAL_DMA_IRQHandler+0xc78>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d045      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	4a28      	ldr	r2, [pc, #160]	; (800527c <HAL_DMA_IRQHandler+0xc7c>)
 80051dc:	4293      	cmp	r3, r2
 80051de:	d040      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a26      	ldr	r2, [pc, #152]	; (8005280 <HAL_DMA_IRQHandler+0xc80>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d03b      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	4a25      	ldr	r2, [pc, #148]	; (8005284 <HAL_DMA_IRQHandler+0xc84>)
 80051f0:	4293      	cmp	r3, r2
 80051f2:	d036      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4a23      	ldr	r2, [pc, #140]	; (8005288 <HAL_DMA_IRQHandler+0xc88>)
 80051fa:	4293      	cmp	r3, r2
 80051fc:	d031      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	4a22      	ldr	r2, [pc, #136]	; (800528c <HAL_DMA_IRQHandler+0xc8c>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d02c      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a20      	ldr	r2, [pc, #128]	; (8005290 <HAL_DMA_IRQHandler+0xc90>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d027      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	4a1f      	ldr	r2, [pc, #124]	; (8005294 <HAL_DMA_IRQHandler+0xc94>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d022      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4a1d      	ldr	r2, [pc, #116]	; (8005298 <HAL_DMA_IRQHandler+0xc98>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d01d      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	4a1c      	ldr	r2, [pc, #112]	; (800529c <HAL_DMA_IRQHandler+0xc9c>)
 800522c:	4293      	cmp	r3, r2
 800522e:	d018      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <HAL_DMA_IRQHandler+0xca0>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d013      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <HAL_DMA_IRQHandler+0xca4>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00e      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a17      	ldr	r2, [pc, #92]	; (80052a8 <HAL_DMA_IRQHandler+0xca8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d009      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a16      	ldr	r2, [pc, #88]	; (80052ac <HAL_DMA_IRQHandler+0xcac>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d004      	beq.n	8005262 <HAL_DMA_IRQHandler+0xc62>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <HAL_DMA_IRQHandler+0xcb0>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d128      	bne.n	80052b4 <HAL_DMA_IRQHandler+0xcb4>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	681a      	ldr	r2, [r3, #0]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0214 	bic.w	r2, r2, #20
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	e027      	b.n	80052c4 <HAL_DMA_IRQHandler+0xcc4>
 8005274:	40020010 	.word	0x40020010
 8005278:	40020028 	.word	0x40020028
 800527c:	40020040 	.word	0x40020040
 8005280:	40020058 	.word	0x40020058
 8005284:	40020070 	.word	0x40020070
 8005288:	40020088 	.word	0x40020088
 800528c:	400200a0 	.word	0x400200a0
 8005290:	400200b8 	.word	0x400200b8
 8005294:	40020410 	.word	0x40020410
 8005298:	40020428 	.word	0x40020428
 800529c:	40020440 	.word	0x40020440
 80052a0:	40020458 	.word	0x40020458
 80052a4:	40020470 	.word	0x40020470
 80052a8:	40020488 	.word	0x40020488
 80052ac:	400204a0 	.word	0x400204a0
 80052b0:	400204b8 	.word	0x400204b8
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	681a      	ldr	r2, [r3, #0]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f022 020a 	bic.w	r2, r2, #10
 80052c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f000 8097 	beq.w	800540c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80052e6:	e091      	b.n	800540c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80052ec:	f003 031f 	and.w	r3, r3, #31
 80052f0:	2208      	movs	r2, #8
 80052f2:	409a      	lsls	r2, r3
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	4013      	ands	r3, r2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	f000 8088 	beq.w	800540e <HAL_DMA_IRQHandler+0xe0e>
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	f003 0308 	and.w	r3, r3, #8
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 8082 	beq.w	800540e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	4a41      	ldr	r2, [pc, #260]	; (8005414 <HAL_DMA_IRQHandler+0xe14>)
 8005310:	4293      	cmp	r3, r2
 8005312:	d04a      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	4a3f      	ldr	r2, [pc, #252]	; (8005418 <HAL_DMA_IRQHandler+0xe18>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d045      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a3e      	ldr	r2, [pc, #248]	; (800541c <HAL_DMA_IRQHandler+0xe1c>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d040      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a3c      	ldr	r2, [pc, #240]	; (8005420 <HAL_DMA_IRQHandler+0xe20>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d03b      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a3b      	ldr	r2, [pc, #236]	; (8005424 <HAL_DMA_IRQHandler+0xe24>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d036      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a39      	ldr	r2, [pc, #228]	; (8005428 <HAL_DMA_IRQHandler+0xe28>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d031      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a38      	ldr	r2, [pc, #224]	; (800542c <HAL_DMA_IRQHandler+0xe2c>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d02c      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a36      	ldr	r2, [pc, #216]	; (8005430 <HAL_DMA_IRQHandler+0xe30>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d027      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a35      	ldr	r2, [pc, #212]	; (8005434 <HAL_DMA_IRQHandler+0xe34>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d022      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a33      	ldr	r2, [pc, #204]	; (8005438 <HAL_DMA_IRQHandler+0xe38>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d01d      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a32      	ldr	r2, [pc, #200]	; (800543c <HAL_DMA_IRQHandler+0xe3c>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d018      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4a30      	ldr	r2, [pc, #192]	; (8005440 <HAL_DMA_IRQHandler+0xe40>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d013      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a2f      	ldr	r2, [pc, #188]	; (8005444 <HAL_DMA_IRQHandler+0xe44>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d00e      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a2d      	ldr	r2, [pc, #180]	; (8005448 <HAL_DMA_IRQHandler+0xe48>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d009      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	4a2c      	ldr	r2, [pc, #176]	; (800544c <HAL_DMA_IRQHandler+0xe4c>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d004      	beq.n	80053aa <HAL_DMA_IRQHandler+0xdaa>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4a2a      	ldr	r2, [pc, #168]	; (8005450 <HAL_DMA_IRQHandler+0xe50>)
 80053a6:	4293      	cmp	r3, r2
 80053a8:	d108      	bne.n	80053bc <HAL_DMA_IRQHandler+0xdbc>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 021c 	bic.w	r2, r2, #28
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	e007      	b.n	80053cc <HAL_DMA_IRQHandler+0xdcc>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	681a      	ldr	r2, [r3, #0]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f022 020e 	bic.w	r2, r2, #14
 80053ca:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d0:	f003 031f 	and.w	r3, r3, #31
 80053d4:	2201      	movs	r2, #1
 80053d6:	409a      	lsls	r2, r3
 80053d8:	69fb      	ldr	r3, [r7, #28]
 80053da:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2201      	movs	r2, #1
 80053e0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2201      	movs	r2, #1
 80053e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2200      	movs	r2, #0
 80053ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d009      	beq.n	800540e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	4798      	blx	r3
 8005402:	e004      	b.n	800540e <HAL_DMA_IRQHandler+0xe0e>
          return;
 8005404:	bf00      	nop
 8005406:	e002      	b.n	800540e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8005408:	bf00      	nop
 800540a:	e000      	b.n	800540e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800540c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800540e:	3728      	adds	r7, #40	; 0x28
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	40020010 	.word	0x40020010
 8005418:	40020028 	.word	0x40020028
 800541c:	40020040 	.word	0x40020040
 8005420:	40020058 	.word	0x40020058
 8005424:	40020070 	.word	0x40020070
 8005428:	40020088 	.word	0x40020088
 800542c:	400200a0 	.word	0x400200a0
 8005430:	400200b8 	.word	0x400200b8
 8005434:	40020410 	.word	0x40020410
 8005438:	40020428 	.word	0x40020428
 800543c:	40020440 	.word	0x40020440
 8005440:	40020458 	.word	0x40020458
 8005444:	40020470 	.word	0x40020470
 8005448:	40020488 	.word	0x40020488
 800544c:	400204a0 	.word	0x400204a0
 8005450:	400204b8 	.word	0x400204b8

08005454 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005454:	b480      	push	{r7}
 8005456:	b085      	sub	sp, #20
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4a42      	ldr	r2, [pc, #264]	; (800556c <DMA_CalcBaseAndBitshift+0x118>)
 8005462:	4293      	cmp	r3, r2
 8005464:	d04a      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	4a41      	ldr	r2, [pc, #260]	; (8005570 <DMA_CalcBaseAndBitshift+0x11c>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d045      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4a3f      	ldr	r2, [pc, #252]	; (8005574 <DMA_CalcBaseAndBitshift+0x120>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d040      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a3e      	ldr	r2, [pc, #248]	; (8005578 <DMA_CalcBaseAndBitshift+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d03b      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a3c      	ldr	r2, [pc, #240]	; (800557c <DMA_CalcBaseAndBitshift+0x128>)
 800548a:	4293      	cmp	r3, r2
 800548c:	d036      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a3b      	ldr	r2, [pc, #236]	; (8005580 <DMA_CalcBaseAndBitshift+0x12c>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d031      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4a39      	ldr	r2, [pc, #228]	; (8005584 <DMA_CalcBaseAndBitshift+0x130>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d02c      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a38      	ldr	r2, [pc, #224]	; (8005588 <DMA_CalcBaseAndBitshift+0x134>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d027      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4a36      	ldr	r2, [pc, #216]	; (800558c <DMA_CalcBaseAndBitshift+0x138>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d022      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4a35      	ldr	r2, [pc, #212]	; (8005590 <DMA_CalcBaseAndBitshift+0x13c>)
 80054bc:	4293      	cmp	r3, r2
 80054be:	d01d      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a33      	ldr	r2, [pc, #204]	; (8005594 <DMA_CalcBaseAndBitshift+0x140>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d018      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	4a32      	ldr	r2, [pc, #200]	; (8005598 <DMA_CalcBaseAndBitshift+0x144>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d013      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	4a30      	ldr	r2, [pc, #192]	; (800559c <DMA_CalcBaseAndBitshift+0x148>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d00e      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a2f      	ldr	r2, [pc, #188]	; (80055a0 <DMA_CalcBaseAndBitshift+0x14c>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d009      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a2d      	ldr	r2, [pc, #180]	; (80055a4 <DMA_CalcBaseAndBitshift+0x150>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d004      	beq.n	80054fc <DMA_CalcBaseAndBitshift+0xa8>
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4a2c      	ldr	r2, [pc, #176]	; (80055a8 <DMA_CalcBaseAndBitshift+0x154>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d101      	bne.n	8005500 <DMA_CalcBaseAndBitshift+0xac>
 80054fc:	2301      	movs	r3, #1
 80054fe:	e000      	b.n	8005502 <DMA_CalcBaseAndBitshift+0xae>
 8005500:	2300      	movs	r3, #0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d024      	beq.n	8005550 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	b2db      	uxtb	r3, r3
 800550c:	3b10      	subs	r3, #16
 800550e:	4a27      	ldr	r2, [pc, #156]	; (80055ac <DMA_CalcBaseAndBitshift+0x158>)
 8005510:	fba2 2303 	umull	r2, r3, r2, r3
 8005514:	091b      	lsrs	r3, r3, #4
 8005516:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	f003 0307 	and.w	r3, r3, #7
 800551e:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <DMA_CalcBaseAndBitshift+0x15c>)
 8005520:	5cd3      	ldrb	r3, [r2, r3]
 8005522:	461a      	mov	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	2b03      	cmp	r3, #3
 800552c:	d908      	bls.n	8005540 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	461a      	mov	r2, r3
 8005534:	4b1f      	ldr	r3, [pc, #124]	; (80055b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005536:	4013      	ands	r3, r2
 8005538:	1d1a      	adds	r2, r3, #4
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	659a      	str	r2, [r3, #88]	; 0x58
 800553e:	e00d      	b.n	800555c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	461a      	mov	r2, r3
 8005546:	4b1b      	ldr	r3, [pc, #108]	; (80055b4 <DMA_CalcBaseAndBitshift+0x160>)
 8005548:	4013      	ands	r3, r2
 800554a:	687a      	ldr	r2, [r7, #4]
 800554c:	6593      	str	r3, [r2, #88]	; 0x58
 800554e:	e005      	b.n	800555c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005560:	4618      	mov	r0, r3
 8005562:	3714      	adds	r7, #20
 8005564:	46bd      	mov	sp, r7
 8005566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556a:	4770      	bx	lr
 800556c:	40020010 	.word	0x40020010
 8005570:	40020028 	.word	0x40020028
 8005574:	40020040 	.word	0x40020040
 8005578:	40020058 	.word	0x40020058
 800557c:	40020070 	.word	0x40020070
 8005580:	40020088 	.word	0x40020088
 8005584:	400200a0 	.word	0x400200a0
 8005588:	400200b8 	.word	0x400200b8
 800558c:	40020410 	.word	0x40020410
 8005590:	40020428 	.word	0x40020428
 8005594:	40020440 	.word	0x40020440
 8005598:	40020458 	.word	0x40020458
 800559c:	40020470 	.word	0x40020470
 80055a0:	40020488 	.word	0x40020488
 80055a4:	400204a0 	.word	0x400204a0
 80055a8:	400204b8 	.word	0x400204b8
 80055ac:	aaaaaaab 	.word	0xaaaaaaab
 80055b0:	0800d660 	.word	0x0800d660
 80055b4:	fffffc00 	.word	0xfffffc00

080055b8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055c0:	2300      	movs	r3, #0
 80055c2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	699b      	ldr	r3, [r3, #24]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d120      	bne.n	800560e <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d0:	2b03      	cmp	r3, #3
 80055d2:	d858      	bhi.n	8005686 <DMA_CheckFifoParam+0xce>
 80055d4:	a201      	add	r2, pc, #4	; (adr r2, 80055dc <DMA_CheckFifoParam+0x24>)
 80055d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055da:	bf00      	nop
 80055dc:	080055ed 	.word	0x080055ed
 80055e0:	080055ff 	.word	0x080055ff
 80055e4:	080055ed 	.word	0x080055ed
 80055e8:	08005687 	.word	0x08005687
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d048      	beq.n	800568a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80055f8:	2301      	movs	r3, #1
 80055fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80055fc:	e045      	b.n	800568a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005602:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005606:	d142      	bne.n	800568e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8005608:	2301      	movs	r3, #1
 800560a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800560c:	e03f      	b.n	800568e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	699b      	ldr	r3, [r3, #24]
 8005612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005616:	d123      	bne.n	8005660 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800561c:	2b03      	cmp	r3, #3
 800561e:	d838      	bhi.n	8005692 <DMA_CheckFifoParam+0xda>
 8005620:	a201      	add	r2, pc, #4	; (adr r2, 8005628 <DMA_CheckFifoParam+0x70>)
 8005622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005626:	bf00      	nop
 8005628:	08005639 	.word	0x08005639
 800562c:	0800563f 	.word	0x0800563f
 8005630:	08005639 	.word	0x08005639
 8005634:	08005651 	.word	0x08005651
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005638:	2301      	movs	r3, #1
 800563a:	73fb      	strb	r3, [r7, #15]
        break;
 800563c:	e030      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005642:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d025      	beq.n	8005696 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800564e:	e022      	b.n	8005696 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005654:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005658:	d11f      	bne.n	800569a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800565a:	2301      	movs	r3, #1
 800565c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800565e:	e01c      	b.n	800569a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005664:	2b02      	cmp	r3, #2
 8005666:	d902      	bls.n	800566e <DMA_CheckFifoParam+0xb6>
 8005668:	2b03      	cmp	r3, #3
 800566a:	d003      	beq.n	8005674 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800566c:	e018      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	73fb      	strb	r3, [r7, #15]
        break;
 8005672:	e015      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005678:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00e      	beq.n	800569e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005680:	2301      	movs	r3, #1
 8005682:	73fb      	strb	r3, [r7, #15]
    break;
 8005684:	e00b      	b.n	800569e <DMA_CheckFifoParam+0xe6>
        break;
 8005686:	bf00      	nop
 8005688:	e00a      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        break;
 800568a:	bf00      	nop
 800568c:	e008      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        break;
 800568e:	bf00      	nop
 8005690:	e006      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005692:	bf00      	nop
 8005694:	e004      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        break;
 8005696:	bf00      	nop
 8005698:	e002      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
        break;
 800569a:	bf00      	nop
 800569c:	e000      	b.n	80056a0 <DMA_CheckFifoParam+0xe8>
    break;
 800569e:	bf00      	nop
    }
  }

  return status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3714      	adds	r7, #20
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr
 80056ae:	bf00      	nop

080056b0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4a38      	ldr	r2, [pc, #224]	; (80057a4 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80056c4:	4293      	cmp	r3, r2
 80056c6:	d022      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4a36      	ldr	r2, [pc, #216]	; (80057a8 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01d      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	4a35      	ldr	r2, [pc, #212]	; (80057ac <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80056d8:	4293      	cmp	r3, r2
 80056da:	d018      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4a33      	ldr	r2, [pc, #204]	; (80057b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4a32      	ldr	r2, [pc, #200]	; (80057b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80056ec:	4293      	cmp	r3, r2
 80056ee:	d00e      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a30      	ldr	r2, [pc, #192]	; (80057b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d009      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a2f      	ldr	r2, [pc, #188]	; (80057bc <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a2d      	ldr	r2, [pc, #180]	; (80057c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d101      	bne.n	8005712 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800570e:	2301      	movs	r3, #1
 8005710:	e000      	b.n	8005714 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8005712:	2300      	movs	r3, #0
 8005714:	2b00      	cmp	r3, #0
 8005716:	d01a      	beq.n	800574e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b08      	subs	r3, #8
 8005720:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8005722:	fba2 2303 	umull	r2, r3, r2, r3
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	4b26      	ldr	r3, [pc, #152]	; (80057c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800572e:	4413      	add	r3, r2
 8005730:	009b      	lsls	r3, r3, #2
 8005732:	461a      	mov	r2, r3
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4a24      	ldr	r2, [pc, #144]	; (80057cc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800573c:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f003 031f 	and.w	r3, r3, #31
 8005744:	2201      	movs	r2, #1
 8005746:	409a      	lsls	r2, r3
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800574c:	e024      	b.n	8005798 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	b2db      	uxtb	r3, r3
 8005754:	3b10      	subs	r3, #16
 8005756:	4a1e      	ldr	r2, [pc, #120]	; (80057d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005758:	fba2 2303 	umull	r2, r3, r2, r3
 800575c:	091b      	lsrs	r3, r3, #4
 800575e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	4a1c      	ldr	r2, [pc, #112]	; (80057d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8005764:	4293      	cmp	r3, r2
 8005766:	d806      	bhi.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	4a1b      	ldr	r2, [pc, #108]	; (80057d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800576c:	4293      	cmp	r3, r2
 800576e:	d902      	bls.n	8005776 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	3308      	adds	r3, #8
 8005774:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8005776:	68fa      	ldr	r2, [r7, #12]
 8005778:	4b18      	ldr	r3, [pc, #96]	; (80057dc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	461a      	mov	r2, r3
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a16      	ldr	r2, [pc, #88]	; (80057e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005788:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f003 031f 	and.w	r3, r3, #31
 8005790:	2201      	movs	r2, #1
 8005792:	409a      	lsls	r2, r3
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005798:	bf00      	nop
 800579a:	3714      	adds	r7, #20
 800579c:	46bd      	mov	sp, r7
 800579e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a2:	4770      	bx	lr
 80057a4:	58025408 	.word	0x58025408
 80057a8:	5802541c 	.word	0x5802541c
 80057ac:	58025430 	.word	0x58025430
 80057b0:	58025444 	.word	0x58025444
 80057b4:	58025458 	.word	0x58025458
 80057b8:	5802546c 	.word	0x5802546c
 80057bc:	58025480 	.word	0x58025480
 80057c0:	58025494 	.word	0x58025494
 80057c4:	cccccccd 	.word	0xcccccccd
 80057c8:	16009600 	.word	0x16009600
 80057cc:	58025880 	.word	0x58025880
 80057d0:	aaaaaaab 	.word	0xaaaaaaab
 80057d4:	400204b8 	.word	0x400204b8
 80057d8:	4002040f 	.word	0x4002040f
 80057dc:	10008200 	.word	0x10008200
 80057e0:	40020880 	.word	0x40020880

080057e4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	685b      	ldr	r3, [r3, #4]
 80057f0:	b2db      	uxtb	r3, r3
 80057f2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d04a      	beq.n	8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b08      	cmp	r3, #8
 80057fe:	d847      	bhi.n	8005890 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	4a25      	ldr	r2, [pc, #148]	; (800589c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d022      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4a24      	ldr	r2, [pc, #144]	; (80058a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d01d      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a22      	ldr	r2, [pc, #136]	; (80058a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d018      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	4a21      	ldr	r2, [pc, #132]	; (80058a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8005824:	4293      	cmp	r3, r2
 8005826:	d013      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a1f      	ldr	r2, [pc, #124]	; (80058ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d00e      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a1e      	ldr	r2, [pc, #120]	; (80058b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d009      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1c      	ldr	r2, [pc, #112]	; (80058b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d004      	beq.n	8005850 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1b      	ldr	r2, [pc, #108]	; (80058b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d101      	bne.n	8005854 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8005854:	2300      	movs	r3, #0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d00a      	beq.n	8005870 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	4b17      	ldr	r3, [pc, #92]	; (80058bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800585e:	4413      	add	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	461a      	mov	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	4a15      	ldr	r2, [pc, #84]	; (80058c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800586c:	671a      	str	r2, [r3, #112]	; 0x70
 800586e:	e009      	b.n	8005884 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	4b14      	ldr	r3, [pc, #80]	; (80058c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8005874:	4413      	add	r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	461a      	mov	r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	4a11      	ldr	r2, [pc, #68]	; (80058c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8005882:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b01      	subs	r3, #1
 8005888:	2201      	movs	r2, #1
 800588a:	409a      	lsls	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005890:	bf00      	nop
 8005892:	3714      	adds	r7, #20
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr
 800589c:	58025408 	.word	0x58025408
 80058a0:	5802541c 	.word	0x5802541c
 80058a4:	58025430 	.word	0x58025430
 80058a8:	58025444 	.word	0x58025444
 80058ac:	58025458 	.word	0x58025458
 80058b0:	5802546c 	.word	0x5802546c
 80058b4:	58025480 	.word	0x58025480
 80058b8:	58025494 	.word	0x58025494
 80058bc:	1600963f 	.word	0x1600963f
 80058c0:	58025940 	.word	0x58025940
 80058c4:	1000823f 	.word	0x1000823f
 80058c8:	40020940 	.word	0x40020940

080058cc <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	b084      	sub	sp, #16
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d101      	bne.n	80058de <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80058da:	2301      	movs	r3, #1
 80058dc:	e0cf      	b.n	8005a7e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d106      	bne.n	80058f6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2223      	movs	r2, #35	; 0x23
 80058ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f7fd f8d1 	bl	8002a98 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058f6:	4b64      	ldr	r3, [pc, #400]	; (8005a88 <HAL_ETH_Init+0x1bc>)
 80058f8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058fc:	4a62      	ldr	r2, [pc, #392]	; (8005a88 <HAL_ETH_Init+0x1bc>)
 80058fe:	f043 0302 	orr.w	r3, r3, #2
 8005902:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005906:	4b60      	ldr	r3, [pc, #384]	; (8005a88 <HAL_ETH_Init+0x1bc>)
 8005908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800590c:	f003 0302 	and.w	r3, r3, #2
 8005910:	60bb      	str	r3, [r7, #8]
 8005912:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	7a1b      	ldrb	r3, [r3, #8]
 8005918:	2b00      	cmp	r3, #0
 800591a:	d103      	bne.n	8005924 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800591c:	2000      	movs	r0, #0
 800591e:	f7fd fc8b 	bl	8003238 <HAL_SYSCFG_ETHInterfaceSelect>
 8005922:	e003      	b.n	800592c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8005924:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005928:	f7fd fc86 	bl	8003238 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800592c:	4b57      	ldr	r3, [pc, #348]	; (8005a8c <HAL_ETH_Init+0x1c0>)
 800592e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	6812      	ldr	r2, [r2, #0]
 800593e:	f043 0301 	orr.w	r3, r3, #1
 8005942:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005946:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005948:	f7fd fc3a 	bl	80031c0 <HAL_GetTick>
 800594c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800594e:	e011      	b.n	8005974 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005950:	f7fd fc36 	bl	80031c0 <HAL_GetTick>
 8005954:	4602      	mov	r2, r0
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	1ad3      	subs	r3, r2, r3
 800595a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800595e:	d909      	bls.n	8005974 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2204      	movs	r2, #4
 8005964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	22e0      	movs	r2, #224	; 0xe0
 800596c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e084      	b.n	8005a7e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f003 0301 	and.w	r3, r3, #1
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1e4      	bne.n	8005950 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	f000 f886 	bl	8005a98 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800598c:	f001 fefc 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 8005990:	4603      	mov	r3, r0
 8005992:	4a3f      	ldr	r2, [pc, #252]	; (8005a90 <HAL_ETH_Init+0x1c4>)
 8005994:	fba2 2303 	umull	r2, r3, r2, r3
 8005998:	0c9a      	lsrs	r2, r3, #18
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3a01      	subs	r2, #1
 80059a0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa71 	bl	8005e8c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80059b6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6812      	ldr	r2, [r2, #0]
 80059be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80059c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80059c6:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	f003 0303 	and.w	r3, r3, #3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d009      	beq.n	80059ea <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2201      	movs	r2, #1
 80059da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	22e0      	movs	r2, #224	; 0xe0
 80059e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e049      	b.n	8005a7e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80059f2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <HAL_ETH_Init+0x1c8>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	687a      	ldr	r2, [r7, #4]
 80059fc:	6952      	ldr	r2, [r2, #20]
 80059fe:	0051      	lsls	r1, r2, #1
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	6812      	ldr	r2, [r2, #0]
 8005a04:	430b      	orrs	r3, r1
 8005a06:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005a0a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 fad9 	bl	8005fc6 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 fb1f 	bl	8006058 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	3305      	adds	r3, #5
 8005a20:	781b      	ldrb	r3, [r3, #0]
 8005a22:	021a      	lsls	r2, r3, #8
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	3304      	adds	r3, #4
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	430a      	orrs	r2, r1
 8005a34:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	3303      	adds	r3, #3
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	061a      	lsls	r2, r3, #24
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	685b      	ldr	r3, [r3, #4]
 8005a46:	3302      	adds	r3, #2
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	3301      	adds	r3, #1
 8005a54:	781b      	ldrb	r3, [r3, #0]
 8005a56:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a58:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	781b      	ldrb	r3, [r3, #0]
 8005a60:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005a66:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005a68:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2210      	movs	r2, #16
 8005a78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3710      	adds	r7, #16
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	58024400 	.word	0x58024400
 8005a8c:	58000400 	.word	0x58000400
 8005a90:	431bde83 	.word	0x431bde83
 8005a94:	ffff8001 	.word	0xffff8001

08005a98 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005aa8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005ab0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005ab2:	f001 fe69 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 8005ab6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	4a1e      	ldr	r2, [pc, #120]	; (8005b34 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d908      	bls.n	8005ad2 <HAL_ETH_SetMDIOClockRange+0x3a>
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	4a1d      	ldr	r2, [pc, #116]	; (8005b38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d804      	bhi.n	8005ad2 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	e027      	b.n	8005b22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	4a18      	ldr	r2, [pc, #96]	; (8005b38 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d908      	bls.n	8005aec <HAL_ETH_SetMDIOClockRange+0x54>
 8005ada:	68bb      	ldr	r3, [r7, #8]
 8005adc:	4a17      	ldr	r2, [pc, #92]	; (8005b3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d204      	bcs.n	8005aec <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005ae8:	60fb      	str	r3, [r7, #12]
 8005aea:	e01a      	b.n	8005b22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <HAL_ETH_SetMDIOClockRange+0xa4>)
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d303      	bcc.n	8005afc <HAL_ETH_SetMDIOClockRange+0x64>
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d911      	bls.n	8005b20 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	4a10      	ldr	r2, [pc, #64]	; (8005b40 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d908      	bls.n	8005b16 <HAL_ETH_SetMDIOClockRange+0x7e>
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	4a0f      	ldr	r2, [pc, #60]	; (8005b44 <HAL_ETH_SetMDIOClockRange+0xac>)
 8005b08:	4293      	cmp	r3, r2
 8005b0a:	d804      	bhi.n	8005b16 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	e005      	b.n	8005b22 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b1c:	60fb      	str	r3, [r7, #12]
 8005b1e:	e000      	b.n	8005b22 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005b20:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005b2c:	bf00      	nop
 8005b2e:	3710      	adds	r7, #16
 8005b30:	46bd      	mov	sp, r7
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	01312cff 	.word	0x01312cff
 8005b38:	02160ebf 	.word	0x02160ebf
 8005b3c:	03938700 	.word	0x03938700
 8005b40:	05f5e0ff 	.word	0x05f5e0ff
 8005b44:	08f0d17f 	.word	0x08f0d17f

08005b48 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
 8005b50:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005b5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	791b      	ldrb	r3, [r3, #4]
 8005b60:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005b62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	7b1b      	ldrb	r3, [r3, #12]
 8005b68:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005b6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	7b5b      	ldrb	r3, [r3, #13]
 8005b70:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005b72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	7b9b      	ldrb	r3, [r3, #14]
 8005b78:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005b7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	7bdb      	ldrb	r3, [r3, #15]
 8005b80:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005b82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005b84:	683a      	ldr	r2, [r7, #0]
 8005b86:	7c12      	ldrb	r2, [r2, #16]
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	d102      	bne.n	8005b92 <ETH_SetMACConfig+0x4a>
 8005b8c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005b90:	e000      	b.n	8005b94 <ETH_SetMACConfig+0x4c>
 8005b92:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005b94:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005b96:	683a      	ldr	r2, [r7, #0]
 8005b98:	7c52      	ldrb	r2, [r2, #17]
 8005b9a:	2a00      	cmp	r2, #0
 8005b9c:	d102      	bne.n	8005ba4 <ETH_SetMACConfig+0x5c>
 8005b9e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005ba2:	e000      	b.n	8005ba6 <ETH_SetMACConfig+0x5e>
 8005ba4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005ba6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	7c9b      	ldrb	r3, [r3, #18]
 8005bac:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005bae:	431a      	orrs	r2, r3
               macconf->Speed |
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005bb4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005bba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	7f1b      	ldrb	r3, [r3, #28]
 8005bc0:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005bc2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	7f5b      	ldrb	r3, [r3, #29]
 8005bc8:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005bca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005bcc:	683a      	ldr	r2, [r7, #0]
 8005bce:	7f92      	ldrb	r2, [r2, #30]
 8005bd0:	2a00      	cmp	r2, #0
 8005bd2:	d102      	bne.n	8005bda <ETH_SetMACConfig+0x92>
 8005bd4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005bd8:	e000      	b.n	8005bdc <ETH_SetMACConfig+0x94>
 8005bda:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005bdc:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	7fdb      	ldrb	r3, [r3, #31]
 8005be2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005be4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005bec:	2a00      	cmp	r2, #0
 8005bee:	d102      	bne.n	8005bf6 <ETH_SetMACConfig+0xae>
 8005bf0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005bf4:	e000      	b.n	8005bf8 <ETH_SetMACConfig+0xb0>
 8005bf6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005bf8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005bfe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005c00:	683b      	ldr	r3, [r7, #0]
 8005c02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005c06:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005c08:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	4b56      	ldr	r3, [pc, #344]	; (8005d74 <ETH_SetMACConfig+0x22c>)
 8005c1a:	4013      	ands	r3, r2
 8005c1c:	687a      	ldr	r2, [r7, #4]
 8005c1e:	6812      	ldr	r2, [r2, #0]
 8005c20:	68f9      	ldr	r1, [r7, #12]
 8005c22:	430b      	orrs	r3, r1
 8005c24:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c2a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c32:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005c34:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005c3c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005c3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005c46:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005c48:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005c4a:	683a      	ldr	r2, [r7, #0]
 8005c4c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005c50:	2a00      	cmp	r2, #0
 8005c52:	d102      	bne.n	8005c5a <ETH_SetMACConfig+0x112>
 8005c54:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005c58:	e000      	b.n	8005c5c <ETH_SetMACConfig+0x114>
 8005c5a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005c5c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005c62:	4313      	orrs	r3, r2
 8005c64:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	4b42      	ldr	r3, [pc, #264]	; (8005d78 <ETH_SetMACConfig+0x230>)
 8005c6e:	4013      	ands	r3, r2
 8005c70:	687a      	ldr	r2, [r7, #4]
 8005c72:	6812      	ldr	r2, [r2, #0]
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	430b      	orrs	r3, r1
 8005c78:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c80:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005c86:	4313      	orrs	r3, r2
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	68da      	ldr	r2, [r3, #12]
 8005c90:	4b3a      	ldr	r3, [pc, #232]	; (8005d7c <ETH_SetMACConfig+0x234>)
 8005c92:	4013      	ands	r3, r2
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	68f9      	ldr	r1, [r7, #12]
 8005c9a:	430b      	orrs	r3, r1
 8005c9c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005ca4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005caa:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005cac:	683a      	ldr	r2, [r7, #0]
 8005cae:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005cb2:	2a00      	cmp	r2, #0
 8005cb4:	d101      	bne.n	8005cba <ETH_SetMACConfig+0x172>
 8005cb6:	2280      	movs	r2, #128	; 0x80
 8005cb8:	e000      	b.n	8005cbc <ETH_SetMACConfig+0x174>
 8005cba:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005cbc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005cc2:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005cce:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	687a      	ldr	r2, [r7, #4]
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	68f9      	ldr	r1, [r7, #12]
 8005cda:	430b      	orrs	r3, r1
 8005cdc:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005ce4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005cec:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cfa:	f023 0103 	bic.w	r1, r3, #3
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005d12:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005d28:	683a      	ldr	r2, [r7, #0]
 8005d2a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005d2e:	2a00      	cmp	r2, #0
 8005d30:	d101      	bne.n	8005d36 <ETH_SetMACConfig+0x1ee>
 8005d32:	2240      	movs	r2, #64	; 0x40
 8005d34:	e000      	b.n	8005d38 <ETH_SetMACConfig+0x1f0>
 8005d36:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005d38:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005d40:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005d42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005d44:	683b      	ldr	r3, [r7, #0]
 8005d46:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005d4a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005d4c:	4313      	orrs	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005d58:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	68fa      	ldr	r2, [r7, #12]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005d68:	bf00      	nop
 8005d6a:	3714      	adds	r7, #20
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d72:	4770      	bx	lr
 8005d74:	00048083 	.word	0x00048083
 8005d78:	c0f88000 	.word	0xc0f88000
 8005d7c:	fffffef0 	.word	0xfffffef0

08005d80 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	4b38      	ldr	r3, [pc, #224]	; (8005e78 <ETH_SetDMAConfig+0xf8>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	683a      	ldr	r2, [r7, #0]
 8005d9a:	6811      	ldr	r1, [r2, #0]
 8005d9c:	687a      	ldr	r2, [r7, #4]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	430b      	orrs	r3, r1
 8005da2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005da6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	791b      	ldrb	r3, [r3, #4]
 8005dac:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005db2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	7b1b      	ldrb	r3, [r3, #12]
 8005db8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dc6:	685a      	ldr	r2, [r3, #4]
 8005dc8:	4b2c      	ldr	r3, [pc, #176]	; (8005e7c <ETH_SetDMAConfig+0xfc>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	68f9      	ldr	r1, [r7, #12]
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005dd8:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	7b5b      	ldrb	r3, [r3, #13]
 8005dde:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005de4:	4313      	orrs	r3, r2
 8005de6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005df0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005df4:	4b22      	ldr	r3, [pc, #136]	; (8005e80 <ETH_SetDMAConfig+0x100>)
 8005df6:	4013      	ands	r3, r2
 8005df8:	687a      	ldr	r2, [r7, #4]
 8005dfa:	6812      	ldr	r2, [r2, #0]
 8005dfc:	68f9      	ldr	r1, [r7, #12]
 8005dfe:	430b      	orrs	r3, r1
 8005e00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e04:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	7d1b      	ldrb	r3, [r3, #20]
 8005e10:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005e12:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	7f5b      	ldrb	r3, [r3, #29]
 8005e18:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005e2a:	4b16      	ldr	r3, [pc, #88]	; (8005e84 <ETH_SetDMAConfig+0x104>)
 8005e2c:	4013      	ands	r3, r2
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	6812      	ldr	r2, [r2, #0]
 8005e32:	68f9      	ldr	r1, [r7, #12]
 8005e34:	430b      	orrs	r3, r1
 8005e36:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e3a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	7f1b      	ldrb	r3, [r3, #28]
 8005e42:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e54:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005e58:	4b0b      	ldr	r3, [pc, #44]	; (8005e88 <ETH_SetDMAConfig+0x108>)
 8005e5a:	4013      	ands	r3, r2
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	6812      	ldr	r2, [r2, #0]
 8005e60:	68f9      	ldr	r1, [r7, #12]
 8005e62:	430b      	orrs	r3, r1
 8005e64:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005e68:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005e6c:	bf00      	nop
 8005e6e:	3714      	adds	r7, #20
 8005e70:	46bd      	mov	sp, r7
 8005e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e76:	4770      	bx	lr
 8005e78:	ffff87fd 	.word	0xffff87fd
 8005e7c:	ffff2ffe 	.word	0xffff2ffe
 8005e80:	fffec000 	.word	0xfffec000
 8005e84:	ffc0efef 	.word	0xffc0efef
 8005e88:	7fc0ffff 	.word	0x7fc0ffff

08005e8c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b0a4      	sub	sp, #144	; 0x90
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005e94:	2301      	movs	r3, #1
 8005e96:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005ea4:	2300      	movs	r3, #0
 8005ea6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005eb0:	2301      	movs	r3, #1
 8005eb2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005ec8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ecc:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005ece:	2300      	movs	r3, #0
 8005ed0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005ee4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005ee8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005efa:	2300      	movs	r3, #0
 8005efc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005f00:	2300      	movs	r3, #0
 8005f02:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005f06:	2300      	movs	r3, #0
 8005f08:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005f1e:	2301      	movs	r3, #1
 8005f20:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005f24:	2320      	movs	r3, #32
 8005f26:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005f36:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005f3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f40:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005f42:	2300      	movs	r3, #0
 8005f44:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005f48:	2302      	movs	r3, #2
 8005f4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005f54:	2300      	movs	r3, #0
 8005f56:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005f60:	2301      	movs	r3, #1
 8005f62:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005f66:	2300      	movs	r3, #0
 8005f68:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005f74:	4619      	mov	r1, r3
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f7ff fde6 	bl	8005b48 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005f80:	2301      	movs	r3, #1
 8005f82:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005f84:	2300      	movs	r3, #0
 8005f86:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005f96:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005f9a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005fa0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005fa4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005fac:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005fb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005fb2:	f107 0308 	add.w	r3, r7, #8
 8005fb6:	4619      	mov	r1, r3
 8005fb8:	6878      	ldr	r0, [r7, #4]
 8005fba:	f7ff fee1 	bl	8005d80 <ETH_SetDMAConfig>
}
 8005fbe:	bf00      	nop
 8005fc0:	3790      	adds	r7, #144	; 0x90
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}

08005fc6 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005fc6:	b480      	push	{r7}
 8005fc8:	b085      	sub	sp, #20
 8005fca:	af00      	add	r7, sp, #0
 8005fcc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005fce:	2300      	movs	r3, #0
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	e01d      	b.n	8006010 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	68d9      	ldr	r1, [r3, #12]
 8005fd8:	68fa      	ldr	r2, [r7, #12]
 8005fda:	4613      	mov	r3, r2
 8005fdc:	005b      	lsls	r3, r3, #1
 8005fde:	4413      	add	r3, r2
 8005fe0:	00db      	lsls	r3, r3, #3
 8005fe2:	440b      	add	r3, r1
 8005fe4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	3206      	adds	r2, #6
 8006006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	3301      	adds	r3, #1
 800600e:	60fb      	str	r3, [r7, #12]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	2b03      	cmp	r3, #3
 8006014:	d9de      	bls.n	8005fd4 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006024:	461a      	mov	r2, r3
 8006026:	2303      	movs	r3, #3
 8006028:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	68da      	ldr	r2, [r3, #12]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006038:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	68da      	ldr	r2, [r3, #12]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006048:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800604c:	bf00      	nop
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006060:	2300      	movs	r3, #0
 8006062:	60fb      	str	r3, [r7, #12]
 8006064:	e023      	b.n	80060ae <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6919      	ldr	r1, [r3, #16]
 800606a:	68fa      	ldr	r2, [r7, #12]
 800606c:	4613      	mov	r3, r2
 800606e:	005b      	lsls	r3, r3, #1
 8006070:	4413      	add	r3, r2
 8006072:	00db      	lsls	r3, r3, #3
 8006074:	440b      	add	r3, r1
 8006076:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2200      	movs	r2, #0
 8006082:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	2200      	movs	r2, #0
 8006088:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2200      	movs	r2, #0
 8006094:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8006096:	68bb      	ldr	r3, [r7, #8]
 8006098:	2200      	movs	r2, #0
 800609a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	3212      	adds	r2, #18
 80060a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	3301      	adds	r3, #1
 80060ac:	60fb      	str	r3, [r7, #12]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2b03      	cmp	r3, #3
 80060b2:	d9d8      	bls.n	8006066 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2200      	movs	r2, #0
 80060b8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060da:	461a      	mov	r2, r3
 80060dc:	2303      	movs	r3, #3
 80060de:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	691a      	ldr	r2, [r3, #16]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80060ee:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006102:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
	...

08006114 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006114:	b480      	push	{r7}
 8006116:	b089      	sub	sp, #36	; 0x24
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
 800611c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800611e:	2300      	movs	r3, #0
 8006120:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006122:	4b89      	ldr	r3, [pc, #548]	; (8006348 <HAL_GPIO_Init+0x234>)
 8006124:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006126:	e194      	b.n	8006452 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	2101      	movs	r1, #1
 800612e:	69fb      	ldr	r3, [r7, #28]
 8006130:	fa01 f303 	lsl.w	r3, r1, r3
 8006134:	4013      	ands	r3, r2
 8006136:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	2b00      	cmp	r3, #0
 800613c:	f000 8186 	beq.w	800644c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006140:	683b      	ldr	r3, [r7, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f003 0303 	and.w	r3, r3, #3
 8006148:	2b01      	cmp	r3, #1
 800614a:	d005      	beq.n	8006158 <HAL_GPIO_Init+0x44>
 800614c:	683b      	ldr	r3, [r7, #0]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	f003 0303 	and.w	r3, r3, #3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d130      	bne.n	80061ba <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	005b      	lsls	r3, r3, #1
 8006162:	2203      	movs	r2, #3
 8006164:	fa02 f303 	lsl.w	r3, r2, r3
 8006168:	43db      	mvns	r3, r3
 800616a:	69ba      	ldr	r2, [r7, #24]
 800616c:	4013      	ands	r3, r2
 800616e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	68da      	ldr	r2, [r3, #12]
 8006174:	69fb      	ldr	r3, [r7, #28]
 8006176:	005b      	lsls	r3, r3, #1
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	69ba      	ldr	r2, [r7, #24]
 800617e:	4313      	orrs	r3, r2
 8006180:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800618e:	2201      	movs	r2, #1
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	fa02 f303 	lsl.w	r3, r2, r3
 8006196:	43db      	mvns	r3, r3
 8006198:	69ba      	ldr	r2, [r7, #24]
 800619a:	4013      	ands	r3, r2
 800619c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	091b      	lsrs	r3, r3, #4
 80061a4:	f003 0201 	and.w	r2, r3, #1
 80061a8:	69fb      	ldr	r3, [r7, #28]
 80061aa:	fa02 f303 	lsl.w	r3, r2, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4313      	orrs	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	69ba      	ldr	r2, [r7, #24]
 80061b8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	f003 0303 	and.w	r3, r3, #3
 80061c2:	2b03      	cmp	r3, #3
 80061c4:	d017      	beq.n	80061f6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	005b      	lsls	r3, r3, #1
 80061d0:	2203      	movs	r2, #3
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69ba      	ldr	r2, [r7, #24]
 80061da:	4013      	ands	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	689a      	ldr	r2, [r3, #8]
 80061e2:	69fb      	ldr	r3, [r7, #28]
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ea:	69ba      	ldr	r2, [r7, #24]
 80061ec:	4313      	orrs	r3, r2
 80061ee:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	685b      	ldr	r3, [r3, #4]
 80061fa:	f003 0303 	and.w	r3, r3, #3
 80061fe:	2b02      	cmp	r3, #2
 8006200:	d123      	bne.n	800624a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	08da      	lsrs	r2, r3, #3
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	3208      	adds	r2, #8
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006210:	69fb      	ldr	r3, [r7, #28]
 8006212:	f003 0307 	and.w	r3, r3, #7
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	220f      	movs	r2, #15
 800621a:	fa02 f303 	lsl.w	r3, r2, r3
 800621e:	43db      	mvns	r3, r3
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	4013      	ands	r3, r2
 8006224:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	691a      	ldr	r2, [r3, #16]
 800622a:	69fb      	ldr	r3, [r7, #28]
 800622c:	f003 0307 	and.w	r3, r3, #7
 8006230:	009b      	lsls	r3, r3, #2
 8006232:	fa02 f303 	lsl.w	r3, r2, r3
 8006236:	69ba      	ldr	r2, [r7, #24]
 8006238:	4313      	orrs	r3, r2
 800623a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	08da      	lsrs	r2, r3, #3
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	3208      	adds	r2, #8
 8006244:	69b9      	ldr	r1, [r7, #24]
 8006246:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	005b      	lsls	r3, r3, #1
 8006254:	2203      	movs	r2, #3
 8006256:	fa02 f303 	lsl.w	r3, r2, r3
 800625a:	43db      	mvns	r3, r3
 800625c:	69ba      	ldr	r2, [r7, #24]
 800625e:	4013      	ands	r3, r2
 8006260:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	f003 0203 	and.w	r2, r3, #3
 800626a:	69fb      	ldr	r3, [r7, #28]
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4313      	orrs	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006286:	2b00      	cmp	r3, #0
 8006288:	f000 80e0 	beq.w	800644c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800628c:	4b2f      	ldr	r3, [pc, #188]	; (800634c <HAL_GPIO_Init+0x238>)
 800628e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006292:	4a2e      	ldr	r2, [pc, #184]	; (800634c <HAL_GPIO_Init+0x238>)
 8006294:	f043 0302 	orr.w	r3, r3, #2
 8006298:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800629c:	4b2b      	ldr	r3, [pc, #172]	; (800634c <HAL_GPIO_Init+0x238>)
 800629e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80062a2:	f003 0302 	and.w	r3, r3, #2
 80062a6:	60fb      	str	r3, [r7, #12]
 80062a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80062aa:	4a29      	ldr	r2, [pc, #164]	; (8006350 <HAL_GPIO_Init+0x23c>)
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	3302      	adds	r3, #2
 80062b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80062b8:	69fb      	ldr	r3, [r7, #28]
 80062ba:	f003 0303 	and.w	r3, r3, #3
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	220f      	movs	r2, #15
 80062c2:	fa02 f303 	lsl.w	r3, r2, r3
 80062c6:	43db      	mvns	r3, r3
 80062c8:	69ba      	ldr	r2, [r7, #24]
 80062ca:	4013      	ands	r3, r2
 80062cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a20      	ldr	r2, [pc, #128]	; (8006354 <HAL_GPIO_Init+0x240>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d052      	beq.n	800637c <HAL_GPIO_Init+0x268>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a1f      	ldr	r2, [pc, #124]	; (8006358 <HAL_GPIO_Init+0x244>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d031      	beq.n	8006342 <HAL_GPIO_Init+0x22e>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a1e      	ldr	r2, [pc, #120]	; (800635c <HAL_GPIO_Init+0x248>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d02b      	beq.n	800633e <HAL_GPIO_Init+0x22a>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a1d      	ldr	r2, [pc, #116]	; (8006360 <HAL_GPIO_Init+0x24c>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d025      	beq.n	800633a <HAL_GPIO_Init+0x226>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a1c      	ldr	r2, [pc, #112]	; (8006364 <HAL_GPIO_Init+0x250>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d01f      	beq.n	8006336 <HAL_GPIO_Init+0x222>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a1b      	ldr	r2, [pc, #108]	; (8006368 <HAL_GPIO_Init+0x254>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d019      	beq.n	8006332 <HAL_GPIO_Init+0x21e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a1a      	ldr	r2, [pc, #104]	; (800636c <HAL_GPIO_Init+0x258>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d013      	beq.n	800632e <HAL_GPIO_Init+0x21a>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_GPIO_Init+0x25c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d00d      	beq.n	800632a <HAL_GPIO_Init+0x216>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a18      	ldr	r2, [pc, #96]	; (8006374 <HAL_GPIO_Init+0x260>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d007      	beq.n	8006326 <HAL_GPIO_Init+0x212>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a17      	ldr	r2, [pc, #92]	; (8006378 <HAL_GPIO_Init+0x264>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d101      	bne.n	8006322 <HAL_GPIO_Init+0x20e>
 800631e:	2309      	movs	r3, #9
 8006320:	e02d      	b.n	800637e <HAL_GPIO_Init+0x26a>
 8006322:	230a      	movs	r3, #10
 8006324:	e02b      	b.n	800637e <HAL_GPIO_Init+0x26a>
 8006326:	2308      	movs	r3, #8
 8006328:	e029      	b.n	800637e <HAL_GPIO_Init+0x26a>
 800632a:	2307      	movs	r3, #7
 800632c:	e027      	b.n	800637e <HAL_GPIO_Init+0x26a>
 800632e:	2306      	movs	r3, #6
 8006330:	e025      	b.n	800637e <HAL_GPIO_Init+0x26a>
 8006332:	2305      	movs	r3, #5
 8006334:	e023      	b.n	800637e <HAL_GPIO_Init+0x26a>
 8006336:	2304      	movs	r3, #4
 8006338:	e021      	b.n	800637e <HAL_GPIO_Init+0x26a>
 800633a:	2303      	movs	r3, #3
 800633c:	e01f      	b.n	800637e <HAL_GPIO_Init+0x26a>
 800633e:	2302      	movs	r3, #2
 8006340:	e01d      	b.n	800637e <HAL_GPIO_Init+0x26a>
 8006342:	2301      	movs	r3, #1
 8006344:	e01b      	b.n	800637e <HAL_GPIO_Init+0x26a>
 8006346:	bf00      	nop
 8006348:	58000080 	.word	0x58000080
 800634c:	58024400 	.word	0x58024400
 8006350:	58000400 	.word	0x58000400
 8006354:	58020000 	.word	0x58020000
 8006358:	58020400 	.word	0x58020400
 800635c:	58020800 	.word	0x58020800
 8006360:	58020c00 	.word	0x58020c00
 8006364:	58021000 	.word	0x58021000
 8006368:	58021400 	.word	0x58021400
 800636c:	58021800 	.word	0x58021800
 8006370:	58021c00 	.word	0x58021c00
 8006374:	58022000 	.word	0x58022000
 8006378:	58022400 	.word	0x58022400
 800637c:	2300      	movs	r3, #0
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	f002 0203 	and.w	r2, r2, #3
 8006384:	0092      	lsls	r2, r2, #2
 8006386:	4093      	lsls	r3, r2
 8006388:	69ba      	ldr	r2, [r7, #24]
 800638a:	4313      	orrs	r3, r2
 800638c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800638e:	4938      	ldr	r1, [pc, #224]	; (8006470 <HAL_GPIO_Init+0x35c>)
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	089b      	lsrs	r3, r3, #2
 8006394:	3302      	adds	r3, #2
 8006396:	69ba      	ldr	r2, [r7, #24]
 8006398:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800639c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	43db      	mvns	r3, r3
 80063a8:	69ba      	ldr	r2, [r7, #24]
 80063aa:	4013      	ands	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	4313      	orrs	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80063c2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063c6:	69bb      	ldr	r3, [r7, #24]
 80063c8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80063ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	43db      	mvns	r3, r3
 80063d6:	69ba      	ldr	r2, [r7, #24]
 80063d8:	4013      	ands	r3, r2
 80063da:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d003      	beq.n	80063f0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80063e8:	69ba      	ldr	r2, [r7, #24]
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	4313      	orrs	r3, r2
 80063ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80063f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	43db      	mvns	r3, r3
 8006402:	69ba      	ldr	r2, [r7, #24]
 8006404:	4013      	ands	r3, r2
 8006406:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	685b      	ldr	r3, [r3, #4]
 800640c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d003      	beq.n	800641c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	693b      	ldr	r3, [r7, #16]
 8006418:	4313      	orrs	r3, r2
 800641a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	43db      	mvns	r3, r3
 800642c:	69ba      	ldr	r2, [r7, #24]
 800642e:	4013      	ands	r3, r2
 8006430:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800643e:	69ba      	ldr	r2, [r7, #24]
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	4313      	orrs	r3, r2
 8006444:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	69ba      	ldr	r2, [r7, #24]
 800644a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	3301      	adds	r3, #1
 8006450:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	681a      	ldr	r2, [r3, #0]
 8006456:	69fb      	ldr	r3, [r7, #28]
 8006458:	fa22 f303 	lsr.w	r3, r2, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	f47f ae63 	bne.w	8006128 <HAL_GPIO_Init+0x14>
  }
}
 8006462:	bf00      	nop
 8006464:	bf00      	nop
 8006466:	3724      	adds	r7, #36	; 0x24
 8006468:	46bd      	mov	sp, r7
 800646a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646e:	4770      	bx	lr
 8006470:	58000400 	.word	0x58000400

08006474 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006474:	b480      	push	{r7}
 8006476:	b085      	sub	sp, #20
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	460b      	mov	r3, r1
 800647e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	691a      	ldr	r2, [r3, #16]
 8006484:	887b      	ldrh	r3, [r7, #2]
 8006486:	4013      	ands	r3, r2
 8006488:	2b00      	cmp	r3, #0
 800648a:	d002      	beq.n	8006492 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800648c:	2301      	movs	r3, #1
 800648e:	73fb      	strb	r3, [r7, #15]
 8006490:	e001      	b.n	8006496 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006492:	2300      	movs	r3, #0
 8006494:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006496:	7bfb      	ldrb	r3, [r7, #15]
}
 8006498:	4618      	mov	r0, r3
 800649a:	3714      	adds	r7, #20
 800649c:	46bd      	mov	sp, r7
 800649e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a2:	4770      	bx	lr

080064a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
 80064ac:	460b      	mov	r3, r1
 80064ae:	807b      	strh	r3, [r7, #2]
 80064b0:	4613      	mov	r3, r2
 80064b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064b4:	787b      	ldrb	r3, [r7, #1]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80064ba:	887a      	ldrh	r2, [r7, #2]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80064c0:	e003      	b.n	80064ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80064c2:	887b      	ldrh	r3, [r7, #2]
 80064c4:	041a      	lsls	r2, r3, #16
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	619a      	str	r2, [r3, #24]
}
 80064ca:	bf00      	nop
 80064cc:	370c      	adds	r7, #12
 80064ce:	46bd      	mov	sp, r7
 80064d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d4:	4770      	bx	lr

080064d6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b085      	sub	sp, #20
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
 80064de:	460b      	mov	r3, r1
 80064e0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	695b      	ldr	r3, [r3, #20]
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80064e8:	887a      	ldrh	r2, [r7, #2]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4013      	ands	r3, r2
 80064ee:	041a      	lsls	r2, r3, #16
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	43d9      	mvns	r1, r3
 80064f4:	887b      	ldrh	r3, [r7, #2]
 80064f6:	400b      	ands	r3, r1
 80064f8:	431a      	orrs	r2, r3
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	619a      	str	r2, [r3, #24]
}
 80064fe:	bf00      	nop
 8006500:	3714      	adds	r7, #20
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr
	...

0800650c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8006514:	4a08      	ldr	r2, [pc, #32]	; (8006538 <HAL_HSEM_FastTake+0x2c>)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3320      	adds	r3, #32
 800651a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800651e:	4a07      	ldr	r2, [pc, #28]	; (800653c <HAL_HSEM_FastTake+0x30>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d101      	bne.n	8006528 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e000      	b.n	800652a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
}
 800652a:	4618      	mov	r0, r3
 800652c:	370c      	adds	r7, #12
 800652e:	46bd      	mov	sp, r7
 8006530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006534:	4770      	bx	lr
 8006536:	bf00      	nop
 8006538:	58026400 	.word	0x58026400
 800653c:	80000300 	.word	0x80000300

08006540 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006540:	b480      	push	{r7}
 8006542:	b083      	sub	sp, #12
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800654a:	4906      	ldr	r1, [pc, #24]	; (8006564 <HAL_HSEM_Release+0x24>)
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006558:	bf00      	nop
 800655a:	370c      	adds	r7, #12
 800655c:	46bd      	mov	sp, r7
 800655e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006562:	4770      	bx	lr
 8006564:	58026400 	.word	0x58026400

08006568 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800656a:	b08f      	sub	sp, #60	; 0x3c
 800656c:	af0a      	add	r7, sp, #40	; 0x28
 800656e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8006576:	2301      	movs	r3, #1
 8006578:	e116      	b.n	80067a8 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b00      	cmp	r3, #0
 800658a:	d106      	bne.n	800659a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f7fc fc8b 	bl	8002eb0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2203      	movs	r2, #3
 800659e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80065a2:	68bb      	ldr	r3, [r7, #8]
 80065a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	4618      	mov	r0, r3
 80065ba:	f004 fded 	bl	800b198 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	687e      	ldr	r6, [r7, #4]
 80065c6:	466d      	mov	r5, sp
 80065c8:	f106 0410 	add.w	r4, r6, #16
 80065cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065ce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80065d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80065d4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80065d8:	e885 0003 	stmia.w	r5, {r0, r1}
 80065dc:	1d33      	adds	r3, r6, #4
 80065de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80065e0:	6838      	ldr	r0, [r7, #0]
 80065e2:	f004 fd6b 	bl	800b0bc <USB_CoreInit>
 80065e6:	4603      	mov	r3, r0
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d005      	beq.n	80065f8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80065f4:	2301      	movs	r3, #1
 80065f6:	e0d7      	b.n	80067a8 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	2100      	movs	r1, #0
 80065fe:	4618      	mov	r0, r3
 8006600:	f004 fddb 	bl	800b1ba <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006604:	2300      	movs	r3, #0
 8006606:	73fb      	strb	r3, [r7, #15]
 8006608:	e04a      	b.n	80066a0 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800660a:	7bfa      	ldrb	r2, [r7, #15]
 800660c:	6879      	ldr	r1, [r7, #4]
 800660e:	4613      	mov	r3, r2
 8006610:	00db      	lsls	r3, r3, #3
 8006612:	4413      	add	r3, r2
 8006614:	009b      	lsls	r3, r3, #2
 8006616:	440b      	add	r3, r1
 8006618:	333d      	adds	r3, #61	; 0x3d
 800661a:	2201      	movs	r2, #1
 800661c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800661e:	7bfa      	ldrb	r2, [r7, #15]
 8006620:	6879      	ldr	r1, [r7, #4]
 8006622:	4613      	mov	r3, r2
 8006624:	00db      	lsls	r3, r3, #3
 8006626:	4413      	add	r3, r2
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	440b      	add	r3, r1
 800662c:	333c      	adds	r3, #60	; 0x3c
 800662e:	7bfa      	ldrb	r2, [r7, #15]
 8006630:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006632:	7bfa      	ldrb	r2, [r7, #15]
 8006634:	7bfb      	ldrb	r3, [r7, #15]
 8006636:	b298      	uxth	r0, r3
 8006638:	6879      	ldr	r1, [r7, #4]
 800663a:	4613      	mov	r3, r2
 800663c:	00db      	lsls	r3, r3, #3
 800663e:	4413      	add	r3, r2
 8006640:	009b      	lsls	r3, r3, #2
 8006642:	440b      	add	r3, r1
 8006644:	3344      	adds	r3, #68	; 0x44
 8006646:	4602      	mov	r2, r0
 8006648:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800664a:	7bfa      	ldrb	r2, [r7, #15]
 800664c:	6879      	ldr	r1, [r7, #4]
 800664e:	4613      	mov	r3, r2
 8006650:	00db      	lsls	r3, r3, #3
 8006652:	4413      	add	r3, r2
 8006654:	009b      	lsls	r3, r3, #2
 8006656:	440b      	add	r3, r1
 8006658:	3340      	adds	r3, #64	; 0x40
 800665a:	2200      	movs	r2, #0
 800665c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800665e:	7bfa      	ldrb	r2, [r7, #15]
 8006660:	6879      	ldr	r1, [r7, #4]
 8006662:	4613      	mov	r3, r2
 8006664:	00db      	lsls	r3, r3, #3
 8006666:	4413      	add	r3, r2
 8006668:	009b      	lsls	r3, r3, #2
 800666a:	440b      	add	r3, r1
 800666c:	3348      	adds	r3, #72	; 0x48
 800666e:	2200      	movs	r2, #0
 8006670:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006672:	7bfa      	ldrb	r2, [r7, #15]
 8006674:	6879      	ldr	r1, [r7, #4]
 8006676:	4613      	mov	r3, r2
 8006678:	00db      	lsls	r3, r3, #3
 800667a:	4413      	add	r3, r2
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	440b      	add	r3, r1
 8006680:	334c      	adds	r3, #76	; 0x4c
 8006682:	2200      	movs	r2, #0
 8006684:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8006686:	7bfa      	ldrb	r2, [r7, #15]
 8006688:	6879      	ldr	r1, [r7, #4]
 800668a:	4613      	mov	r3, r2
 800668c:	00db      	lsls	r3, r3, #3
 800668e:	4413      	add	r3, r2
 8006690:	009b      	lsls	r3, r3, #2
 8006692:	440b      	add	r3, r1
 8006694:	3354      	adds	r3, #84	; 0x54
 8006696:	2200      	movs	r2, #0
 8006698:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	3301      	adds	r3, #1
 800669e:	73fb      	strb	r3, [r7, #15]
 80066a0:	7bfa      	ldrb	r2, [r7, #15]
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d3af      	bcc.n	800660a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80066aa:	2300      	movs	r3, #0
 80066ac:	73fb      	strb	r3, [r7, #15]
 80066ae:	e044      	b.n	800673a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80066b0:	7bfa      	ldrb	r2, [r7, #15]
 80066b2:	6879      	ldr	r1, [r7, #4]
 80066b4:	4613      	mov	r3, r2
 80066b6:	00db      	lsls	r3, r3, #3
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	440b      	add	r3, r1
 80066be:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80066c2:	2200      	movs	r2, #0
 80066c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80066c6:	7bfa      	ldrb	r2, [r7, #15]
 80066c8:	6879      	ldr	r1, [r7, #4]
 80066ca:	4613      	mov	r3, r2
 80066cc:	00db      	lsls	r3, r3, #3
 80066ce:	4413      	add	r3, r2
 80066d0:	009b      	lsls	r3, r3, #2
 80066d2:	440b      	add	r3, r1
 80066d4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80066d8:	7bfa      	ldrb	r2, [r7, #15]
 80066da:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80066dc:	7bfa      	ldrb	r2, [r7, #15]
 80066de:	6879      	ldr	r1, [r7, #4]
 80066e0:	4613      	mov	r3, r2
 80066e2:	00db      	lsls	r3, r3, #3
 80066e4:	4413      	add	r3, r2
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	440b      	add	r3, r1
 80066ea:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80066ee:	2200      	movs	r2, #0
 80066f0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	6879      	ldr	r1, [r7, #4]
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8006704:	2200      	movs	r2, #0
 8006706:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8006708:	7bfa      	ldrb	r2, [r7, #15]
 800670a:	6879      	ldr	r1, [r7, #4]
 800670c:	4613      	mov	r3, r2
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4413      	add	r3, r2
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	440b      	add	r3, r1
 8006716:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800671a:	2200      	movs	r2, #0
 800671c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800671e:	7bfa      	ldrb	r2, [r7, #15]
 8006720:	6879      	ldr	r1, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	00db      	lsls	r3, r3, #3
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	440b      	add	r3, r1
 800672c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006730:	2200      	movs	r2, #0
 8006732:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	3301      	adds	r3, #1
 8006738:	73fb      	strb	r3, [r7, #15]
 800673a:	7bfa      	ldrb	r2, [r7, #15]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	429a      	cmp	r2, r3
 8006742:	d3b5      	bcc.n	80066b0 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	603b      	str	r3, [r7, #0]
 800674a:	687e      	ldr	r6, [r7, #4]
 800674c:	466d      	mov	r5, sp
 800674e:	f106 0410 	add.w	r4, r6, #16
 8006752:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006754:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006756:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006758:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800675a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800675e:	e885 0003 	stmia.w	r5, {r0, r1}
 8006762:	1d33      	adds	r3, r6, #4
 8006764:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006766:	6838      	ldr	r0, [r7, #0]
 8006768:	f004 fd74 	bl	800b254 <USB_DevInit>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d005      	beq.n	800677e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800677a:	2301      	movs	r3, #1
 800677c:	e014      	b.n	80067a8 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2201      	movs	r2, #1
 800678a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006792:	2b01      	cmp	r3, #1
 8006794:	d102      	bne.n	800679c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f000 f80a 	bl	80067b0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f004 ff32 	bl	800b60a <USB_DevDisconnect>

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080067b0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b085      	sub	sp, #20
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2201      	movs	r2, #1
 80067c2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	2200      	movs	r2, #0
 80067ca:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	699b      	ldr	r3, [r3, #24]
 80067d2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80067de:	4b05      	ldr	r3, [pc, #20]	; (80067f4 <HAL_PCDEx_ActivateLPM+0x44>)
 80067e0:	4313      	orrs	r3, r2
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80067e6:	2300      	movs	r3, #0
}
 80067e8:	4618      	mov	r0, r3
 80067ea:	3714      	adds	r7, #20
 80067ec:	46bd      	mov	sp, r7
 80067ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f2:	4770      	bx	lr
 80067f4:	10000003 	.word	0x10000003

080067f8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8006800:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006802:	68db      	ldr	r3, [r3, #12]
 8006804:	f003 0307 	and.w	r3, r3, #7
 8006808:	2b06      	cmp	r3, #6
 800680a:	d00a      	beq.n	8006822 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800680c:	4b26      	ldr	r3, [pc, #152]	; (80068a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d001      	beq.n	800681e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800681a:	2301      	movs	r3, #1
 800681c:	e040      	b.n	80068a0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800681e:	2300      	movs	r3, #0
 8006820:	e03e      	b.n	80068a0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8006822:	4b21      	ldr	r3, [pc, #132]	; (80068a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800682a:	491f      	ldr	r1, [pc, #124]	; (80068a8 <HAL_PWREx_ConfigSupply+0xb0>)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4313      	orrs	r3, r2
 8006830:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8006832:	f7fc fcc5 	bl	80031c0 <HAL_GetTick>
 8006836:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006838:	e009      	b.n	800684e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800683a:	f7fc fcc1 	bl	80031c0 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006848:	d901      	bls.n	800684e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800684a:	2301      	movs	r3, #1
 800684c:	e028      	b.n	80068a0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800684e:	4b16      	ldr	r3, [pc, #88]	; (80068a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006856:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800685a:	d1ee      	bne.n	800683a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	2b1e      	cmp	r3, #30
 8006860:	d008      	beq.n	8006874 <HAL_PWREx_ConfigSupply+0x7c>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2b2e      	cmp	r3, #46	; 0x2e
 8006866:	d005      	beq.n	8006874 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2b1d      	cmp	r3, #29
 800686c:	d002      	beq.n	8006874 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2b2d      	cmp	r3, #45	; 0x2d
 8006872:	d114      	bne.n	800689e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8006874:	f7fc fca4 	bl	80031c0 <HAL_GetTick>
 8006878:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800687a:	e009      	b.n	8006890 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800687c:	f7fc fca0 	bl	80031c0 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800688a:	d901      	bls.n	8006890 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e007      	b.n	80068a0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006890:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_PWREx_ConfigSupply+0xb0>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006898:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800689c:	d1ee      	bne.n	800687c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800689e:	2300      	movs	r3, #0
}
 80068a0:	4618      	mov	r0, r3
 80068a2:	3710      	adds	r7, #16
 80068a4:	46bd      	mov	sp, r7
 80068a6:	bd80      	pop	{r7, pc}
 80068a8:	58024800 	.word	0x58024800

080068ac <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80068ac:	b480      	push	{r7}
 80068ae:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 80068b0:	4b05      	ldr	r3, [pc, #20]	; (80068c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068b2:	68db      	ldr	r3, [r3, #12]
 80068b4:	4a04      	ldr	r2, [pc, #16]	; (80068c8 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80068b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80068ba:	60d3      	str	r3, [r2, #12]
}
 80068bc:	bf00      	nop
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr
 80068c6:	bf00      	nop
 80068c8:	58024800 	.word	0x58024800

080068cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	b08c      	sub	sp, #48	; 0x30
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d102      	bne.n	80068e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	f000 bc1d 	b.w	800711a <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0301 	and.w	r3, r3, #1
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8087 	beq.w	80069fc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80068ee:	4b99      	ldr	r3, [pc, #612]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 80068f0:	691b      	ldr	r3, [r3, #16]
 80068f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80068f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80068f8:	4b96      	ldr	r3, [pc, #600]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 80068fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068fc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80068fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006900:	2b10      	cmp	r3, #16
 8006902:	d007      	beq.n	8006914 <HAL_RCC_OscConfig+0x48>
 8006904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006906:	2b18      	cmp	r3, #24
 8006908:	d110      	bne.n	800692c <HAL_RCC_OscConfig+0x60>
 800690a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690c:	f003 0303 	and.w	r3, r3, #3
 8006910:	2b02      	cmp	r3, #2
 8006912:	d10b      	bne.n	800692c <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006914:	4b8f      	ldr	r3, [pc, #572]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800691c:	2b00      	cmp	r3, #0
 800691e:	d06c      	beq.n	80069fa <HAL_RCC_OscConfig+0x12e>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d168      	bne.n	80069fa <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006928:	2301      	movs	r3, #1
 800692a:	e3f6      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	685b      	ldr	r3, [r3, #4]
 8006930:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006934:	d106      	bne.n	8006944 <HAL_RCC_OscConfig+0x78>
 8006936:	4b87      	ldr	r3, [pc, #540]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a86      	ldr	r2, [pc, #536]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800693c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006940:	6013      	str	r3, [r2, #0]
 8006942:	e02e      	b.n	80069a2 <HAL_RCC_OscConfig+0xd6>
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d10c      	bne.n	8006966 <HAL_RCC_OscConfig+0x9a>
 800694c:	4b81      	ldr	r3, [pc, #516]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4a80      	ldr	r2, [pc, #512]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006952:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006956:	6013      	str	r3, [r2, #0]
 8006958:	4b7e      	ldr	r3, [pc, #504]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a7d      	ldr	r2, [pc, #500]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800695e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	e01d      	b.n	80069a2 <HAL_RCC_OscConfig+0xd6>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800696e:	d10c      	bne.n	800698a <HAL_RCC_OscConfig+0xbe>
 8006970:	4b78      	ldr	r3, [pc, #480]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	4a77      	ldr	r2, [pc, #476]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800697a:	6013      	str	r3, [r2, #0]
 800697c:	4b75      	ldr	r3, [pc, #468]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	4a74      	ldr	r2, [pc, #464]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006982:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006986:	6013      	str	r3, [r2, #0]
 8006988:	e00b      	b.n	80069a2 <HAL_RCC_OscConfig+0xd6>
 800698a:	4b72      	ldr	r3, [pc, #456]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	4a71      	ldr	r2, [pc, #452]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006990:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006994:	6013      	str	r3, [r2, #0]
 8006996:	4b6f      	ldr	r3, [pc, #444]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	4a6e      	ldr	r2, [pc, #440]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 800699c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069a0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d013      	beq.n	80069d2 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069aa:	f7fc fc09 	bl	80031c0 <HAL_GetTick>
 80069ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069b0:	e008      	b.n	80069c4 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069b2:	f7fc fc05 	bl	80031c0 <HAL_GetTick>
 80069b6:	4602      	mov	r2, r0
 80069b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ba:	1ad3      	subs	r3, r2, r3
 80069bc:	2b64      	cmp	r3, #100	; 0x64
 80069be:	d901      	bls.n	80069c4 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80069c0:	2303      	movs	r3, #3
 80069c2:	e3aa      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80069c4:	4b63      	ldr	r3, [pc, #396]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d0f0      	beq.n	80069b2 <HAL_RCC_OscConfig+0xe6>
 80069d0:	e014      	b.n	80069fc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069d2:	f7fc fbf5 	bl	80031c0 <HAL_GetTick>
 80069d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069d8:	e008      	b.n	80069ec <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069da:	f7fc fbf1 	bl	80031c0 <HAL_GetTick>
 80069de:	4602      	mov	r2, r0
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	2b64      	cmp	r3, #100	; 0x64
 80069e6:	d901      	bls.n	80069ec <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80069e8:	2303      	movs	r3, #3
 80069ea:	e396      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80069ec:	4b59      	ldr	r3, [pc, #356]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1f0      	bne.n	80069da <HAL_RCC_OscConfig+0x10e>
 80069f8:	e000      	b.n	80069fc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069fa:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f003 0302 	and.w	r3, r3, #2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80cb 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006a0a:	4b52      	ldr	r3, [pc, #328]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a0c:	691b      	ldr	r3, [r3, #16]
 8006a0e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a12:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006a14:	4b4f      	ldr	r3, [pc, #316]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a18:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d007      	beq.n	8006a30 <HAL_RCC_OscConfig+0x164>
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	2b18      	cmp	r3, #24
 8006a24:	d156      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x208>
 8006a26:	69fb      	ldr	r3, [r7, #28]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d151      	bne.n	8006ad4 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006a30:	4b48      	ldr	r3, [pc, #288]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCC_OscConfig+0x17c>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e368      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006a48:	4b42      	ldr	r3, [pc, #264]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f023 0219 	bic.w	r2, r3, #25
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	68db      	ldr	r3, [r3, #12]
 8006a54:	493f      	ldr	r1, [pc, #252]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a56:	4313      	orrs	r3, r2
 8006a58:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006a5a:	f7fc fbb1 	bl	80031c0 <HAL_GetTick>
 8006a5e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a60:	e008      	b.n	8006a74 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a62:	f7fc fbad 	bl	80031c0 <HAL_GetTick>
 8006a66:	4602      	mov	r2, r0
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	1ad3      	subs	r3, r2, r3
 8006a6c:	2b02      	cmp	r3, #2
 8006a6e:	d901      	bls.n	8006a74 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006a70:	2303      	movs	r3, #3
 8006a72:	e352      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006a74:	4b37      	ldr	r3, [pc, #220]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	f003 0304 	and.w	r3, r3, #4
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0f0      	beq.n	8006a62 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a80:	f7fc fbce 	bl	8003220 <HAL_GetREVID>
 8006a84:	4603      	mov	r3, r0
 8006a86:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d817      	bhi.n	8006abe <HAL_RCC_OscConfig+0x1f2>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	2b40      	cmp	r3, #64	; 0x40
 8006a94:	d108      	bne.n	8006aa8 <HAL_RCC_OscConfig+0x1dc>
 8006a96:	4b2f      	ldr	r3, [pc, #188]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006a98:	685b      	ldr	r3, [r3, #4]
 8006a9a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006a9e:	4a2d      	ldr	r2, [pc, #180]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aa4:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006aa6:	e07b      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006aa8:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006aaa:	685b      	ldr	r3, [r3, #4]
 8006aac:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	691b      	ldr	r3, [r3, #16]
 8006ab4:	031b      	lsls	r3, r3, #12
 8006ab6:	4927      	ldr	r1, [pc, #156]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006ab8:	4313      	orrs	r3, r2
 8006aba:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006abc:	e070      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006abe:	4b25      	ldr	r3, [pc, #148]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	691b      	ldr	r3, [r3, #16]
 8006aca:	061b      	lsls	r3, r3, #24
 8006acc:	4921      	ldr	r1, [pc, #132]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006ad2:	e065      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	68db      	ldr	r3, [r3, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d048      	beq.n	8006b6e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006adc:	4b1d      	ldr	r3, [pc, #116]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f023 0219 	bic.w	r2, r3, #25
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	68db      	ldr	r3, [r3, #12]
 8006ae8:	491a      	ldr	r1, [pc, #104]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006aea:	4313      	orrs	r3, r2
 8006aec:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006aee:	f7fc fb67 	bl	80031c0 <HAL_GetTick>
 8006af2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006af4:	e008      	b.n	8006b08 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006af6:	f7fc fb63 	bl	80031c0 <HAL_GetTick>
 8006afa:	4602      	mov	r2, r0
 8006afc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afe:	1ad3      	subs	r3, r2, r3
 8006b00:	2b02      	cmp	r3, #2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e308      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006b08:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f003 0304 	and.w	r3, r3, #4
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d0f0      	beq.n	8006af6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b14:	f7fc fb84 	bl	8003220 <HAL_GetREVID>
 8006b18:	4603      	mov	r3, r0
 8006b1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8006b1e:	4293      	cmp	r3, r2
 8006b20:	d81a      	bhi.n	8006b58 <HAL_RCC_OscConfig+0x28c>
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	691b      	ldr	r3, [r3, #16]
 8006b26:	2b40      	cmp	r3, #64	; 0x40
 8006b28:	d108      	bne.n	8006b3c <HAL_RCC_OscConfig+0x270>
 8006b2a:	4b0a      	ldr	r3, [pc, #40]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006b2c:	685b      	ldr	r3, [r3, #4]
 8006b2e:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006b32:	4a08      	ldr	r2, [pc, #32]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006b34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b38:	6053      	str	r3, [r2, #4]
 8006b3a:	e031      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
 8006b3c:	4b05      	ldr	r3, [pc, #20]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	031b      	lsls	r3, r3, #12
 8006b4a:	4902      	ldr	r1, [pc, #8]	; (8006b54 <HAL_RCC_OscConfig+0x288>)
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	604b      	str	r3, [r1, #4]
 8006b50:	e026      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
 8006b52:	bf00      	nop
 8006b54:	58024400 	.word	0x58024400
 8006b58:	4b9a      	ldr	r3, [pc, #616]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	691b      	ldr	r3, [r3, #16]
 8006b64:	061b      	lsls	r3, r3, #24
 8006b66:	4997      	ldr	r1, [pc, #604]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	604b      	str	r3, [r1, #4]
 8006b6c:	e018      	b.n	8006ba0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006b6e:	4b95      	ldr	r3, [pc, #596]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	4a94      	ldr	r2, [pc, #592]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006b74:	f023 0301 	bic.w	r3, r3, #1
 8006b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7a:	f7fc fb21 	bl	80031c0 <HAL_GetTick>
 8006b7e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006b82:	f7fc fb1d 	bl	80031c0 <HAL_GetTick>
 8006b86:	4602      	mov	r2, r0
 8006b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e2c2      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006b94:	4b8b      	ldr	r3, [pc, #556]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	f003 0304 	and.w	r3, r3, #4
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d1f0      	bne.n	8006b82 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f003 0310 	and.w	r3, r3, #16
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a9 	beq.w	8006d00 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006bae:	4b85      	ldr	r3, [pc, #532]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006bb0:	691b      	ldr	r3, [r3, #16]
 8006bb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006bb8:	4b82      	ldr	r3, [pc, #520]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bbc:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b08      	cmp	r3, #8
 8006bc2:	d007      	beq.n	8006bd4 <HAL_RCC_OscConfig+0x308>
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b18      	cmp	r3, #24
 8006bc8:	d13a      	bne.n	8006c40 <HAL_RCC_OscConfig+0x374>
 8006bca:	697b      	ldr	r3, [r7, #20]
 8006bcc:	f003 0303 	and.w	r3, r3, #3
 8006bd0:	2b01      	cmp	r3, #1
 8006bd2:	d135      	bne.n	8006c40 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006bd4:	4b7b      	ldr	r3, [pc, #492]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d005      	beq.n	8006bec <HAL_RCC_OscConfig+0x320>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	69db      	ldr	r3, [r3, #28]
 8006be4:	2b80      	cmp	r3, #128	; 0x80
 8006be6:	d001      	beq.n	8006bec <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e296      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006bec:	f7fc fb18 	bl	8003220 <HAL_GetREVID>
 8006bf0:	4603      	mov	r3, r0
 8006bf2:	f241 0203 	movw	r2, #4099	; 0x1003
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	d817      	bhi.n	8006c2a <HAL_RCC_OscConfig+0x35e>
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6a1b      	ldr	r3, [r3, #32]
 8006bfe:	2b20      	cmp	r3, #32
 8006c00:	d108      	bne.n	8006c14 <HAL_RCC_OscConfig+0x348>
 8006c02:	4b70      	ldr	r3, [pc, #448]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c0a:	4a6e      	ldr	r2, [pc, #440]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c10:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c12:	e075      	b.n	8006d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c14:	4b6b      	ldr	r3, [pc, #428]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6a1b      	ldr	r3, [r3, #32]
 8006c20:	069b      	lsls	r3, r3, #26
 8006c22:	4968      	ldr	r1, [pc, #416]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c24:	4313      	orrs	r3, r2
 8006c26:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c28:	e06a      	b.n	8006d00 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c2a:	4b66      	ldr	r3, [pc, #408]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c2c:	68db      	ldr	r3, [r3, #12]
 8006c2e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	061b      	lsls	r3, r3, #24
 8006c38:	4962      	ldr	r1, [pc, #392]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c3a:	4313      	orrs	r3, r2
 8006c3c:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006c3e:	e05f      	b.n	8006d00 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	69db      	ldr	r3, [r3, #28]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d042      	beq.n	8006cce <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006c48:	4b5e      	ldr	r3, [pc, #376]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	4a5d      	ldr	r2, [pc, #372]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c54:	f7fc fab4 	bl	80031c0 <HAL_GetTick>
 8006c58:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c5a:	e008      	b.n	8006c6e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006c5c:	f7fc fab0 	bl	80031c0 <HAL_GetTick>
 8006c60:	4602      	mov	r2, r0
 8006c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c64:	1ad3      	subs	r3, r2, r3
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d901      	bls.n	8006c6e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e255      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006c6e:	4b55      	ldr	r3, [pc, #340]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d0f0      	beq.n	8006c5c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006c7a:	f7fc fad1 	bl	8003220 <HAL_GetREVID>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f241 0203 	movw	r2, #4099	; 0x1003
 8006c84:	4293      	cmp	r3, r2
 8006c86:	d817      	bhi.n	8006cb8 <HAL_RCC_OscConfig+0x3ec>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	2b20      	cmp	r3, #32
 8006c8e:	d108      	bne.n	8006ca2 <HAL_RCC_OscConfig+0x3d6>
 8006c90:	4b4c      	ldr	r3, [pc, #304]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006c98:	4a4a      	ldr	r2, [pc, #296]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006c9a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c9e:	6053      	str	r3, [r2, #4]
 8006ca0:	e02e      	b.n	8006d00 <HAL_RCC_OscConfig+0x434>
 8006ca2:	4b48      	ldr	r3, [pc, #288]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006ca4:	685b      	ldr	r3, [r3, #4]
 8006ca6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6a1b      	ldr	r3, [r3, #32]
 8006cae:	069b      	lsls	r3, r3, #26
 8006cb0:	4944      	ldr	r1, [pc, #272]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	604b      	str	r3, [r1, #4]
 8006cb6:	e023      	b.n	8006d00 <HAL_RCC_OscConfig+0x434>
 8006cb8:	4b42      	ldr	r3, [pc, #264]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	6a1b      	ldr	r3, [r3, #32]
 8006cc4:	061b      	lsls	r3, r3, #24
 8006cc6:	493f      	ldr	r1, [pc, #252]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	60cb      	str	r3, [r1, #12]
 8006ccc:	e018      	b.n	8006d00 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006cce:	4b3d      	ldr	r3, [pc, #244]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	4a3c      	ldr	r2, [pc, #240]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006cd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cda:	f7fc fa71 	bl	80031c0 <HAL_GetTick>
 8006cde:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ce0:	e008      	b.n	8006cf4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006ce2:	f7fc fa6d 	bl	80031c0 <HAL_GetTick>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	1ad3      	subs	r3, r2, r3
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	d901      	bls.n	8006cf4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006cf0:	2303      	movs	r3, #3
 8006cf2:	e212      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006cf4:	4b33      	ldr	r3, [pc, #204]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1f0      	bne.n	8006ce2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f003 0308 	and.w	r3, r3, #8
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d036      	beq.n	8006d7a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	695b      	ldr	r3, [r3, #20]
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d019      	beq.n	8006d48 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d14:	4b2b      	ldr	r3, [pc, #172]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d18:	4a2a      	ldr	r2, [pc, #168]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d1a:	f043 0301 	orr.w	r3, r3, #1
 8006d1e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d20:	f7fc fa4e 	bl	80031c0 <HAL_GetTick>
 8006d24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d26:	e008      	b.n	8006d3a <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d28:	f7fc fa4a 	bl	80031c0 <HAL_GetTick>
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d30:	1ad3      	subs	r3, r2, r3
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d901      	bls.n	8006d3a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006d36:	2303      	movs	r3, #3
 8006d38:	e1ef      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006d3a:	4b22      	ldr	r3, [pc, #136]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d3e:	f003 0302 	and.w	r3, r3, #2
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d0f0      	beq.n	8006d28 <HAL_RCC_OscConfig+0x45c>
 8006d46:	e018      	b.n	8006d7a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006d48:	4b1e      	ldr	r3, [pc, #120]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d4c:	4a1d      	ldr	r2, [pc, #116]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d4e:	f023 0301 	bic.w	r3, r3, #1
 8006d52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d54:	f7fc fa34 	bl	80031c0 <HAL_GetTick>
 8006d58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d5a:	e008      	b.n	8006d6e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006d5c:	f7fc fa30 	bl	80031c0 <HAL_GetTick>
 8006d60:	4602      	mov	r2, r0
 8006d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	2b02      	cmp	r3, #2
 8006d68:	d901      	bls.n	8006d6e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e1d5      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006d6e:	4b15      	ldr	r3, [pc, #84]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d72:	f003 0302 	and.w	r3, r3, #2
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d1f0      	bne.n	8006d5c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f003 0320 	and.w	r3, r3, #32
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d039      	beq.n	8006dfa <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d01c      	beq.n	8006dc8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006d8e:	4b0d      	ldr	r3, [pc, #52]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a0c      	ldr	r2, [pc, #48]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006d94:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d98:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006d9a:	f7fc fa11 	bl	80031c0 <HAL_GetTick>
 8006d9e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006da0:	e008      	b.n	8006db4 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006da2:	f7fc fa0d 	bl	80031c0 <HAL_GetTick>
 8006da6:	4602      	mov	r2, r0
 8006da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	2b02      	cmp	r3, #2
 8006dae:	d901      	bls.n	8006db4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006db0:	2303      	movs	r3, #3
 8006db2:	e1b2      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006db4:	4b03      	ldr	r3, [pc, #12]	; (8006dc4 <HAL_RCC_OscConfig+0x4f8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0f0      	beq.n	8006da2 <HAL_RCC_OscConfig+0x4d6>
 8006dc0:	e01b      	b.n	8006dfa <HAL_RCC_OscConfig+0x52e>
 8006dc2:	bf00      	nop
 8006dc4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006dc8:	4b9b      	ldr	r3, [pc, #620]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	4a9a      	ldr	r2, [pc, #616]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006dce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006dd2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006dd4:	f7fc f9f4 	bl	80031c0 <HAL_GetTick>
 8006dd8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dda:	e008      	b.n	8006dee <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006ddc:	f7fc f9f0 	bl	80031c0 <HAL_GetTick>
 8006de0:	4602      	mov	r2, r0
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	1ad3      	subs	r3, r2, r3
 8006de6:	2b02      	cmp	r3, #2
 8006de8:	d901      	bls.n	8006dee <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006dea:	2303      	movs	r3, #3
 8006dec:	e195      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006dee:	4b92      	ldr	r3, [pc, #584]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1f0      	bne.n	8006ddc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f003 0304 	and.w	r3, r3, #4
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 8081 	beq.w	8006f0a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006e08:	4b8c      	ldr	r3, [pc, #560]	; (800703c <HAL_RCC_OscConfig+0x770>)
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	4a8b      	ldr	r2, [pc, #556]	; (800703c <HAL_RCC_OscConfig+0x770>)
 8006e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006e14:	f7fc f9d4 	bl	80031c0 <HAL_GetTick>
 8006e18:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e1a:	e008      	b.n	8006e2e <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006e1c:	f7fc f9d0 	bl	80031c0 <HAL_GetTick>
 8006e20:	4602      	mov	r2, r0
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	1ad3      	subs	r3, r2, r3
 8006e26:	2b64      	cmp	r3, #100	; 0x64
 8006e28:	d901      	bls.n	8006e2e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006e2a:	2303      	movs	r3, #3
 8006e2c:	e175      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006e2e:	4b83      	ldr	r3, [pc, #524]	; (800703c <HAL_RCC_OscConfig+0x770>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d0f0      	beq.n	8006e1c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d106      	bne.n	8006e50 <HAL_RCC_OscConfig+0x584>
 8006e42:	4b7d      	ldr	r3, [pc, #500]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e46:	4a7c      	ldr	r2, [pc, #496]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e48:	f043 0301 	orr.w	r3, r3, #1
 8006e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8006e4e:	e02d      	b.n	8006eac <HAL_RCC_OscConfig+0x5e0>
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d10c      	bne.n	8006e72 <HAL_RCC_OscConfig+0x5a6>
 8006e58:	4b77      	ldr	r3, [pc, #476]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e5c:	4a76      	ldr	r2, [pc, #472]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e5e:	f023 0301 	bic.w	r3, r3, #1
 8006e62:	6713      	str	r3, [r2, #112]	; 0x70
 8006e64:	4b74      	ldr	r3, [pc, #464]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e68:	4a73      	ldr	r2, [pc, #460]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e6a:	f023 0304 	bic.w	r3, r3, #4
 8006e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8006e70:	e01c      	b.n	8006eac <HAL_RCC_OscConfig+0x5e0>
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	2b05      	cmp	r3, #5
 8006e78:	d10c      	bne.n	8006e94 <HAL_RCC_OscConfig+0x5c8>
 8006e7a:	4b6f      	ldr	r3, [pc, #444]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e7e:	4a6e      	ldr	r2, [pc, #440]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e80:	f043 0304 	orr.w	r3, r3, #4
 8006e84:	6713      	str	r3, [r2, #112]	; 0x70
 8006e86:	4b6c      	ldr	r3, [pc, #432]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e8a:	4a6b      	ldr	r2, [pc, #428]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e8c:	f043 0301 	orr.w	r3, r3, #1
 8006e90:	6713      	str	r3, [r2, #112]	; 0x70
 8006e92:	e00b      	b.n	8006eac <HAL_RCC_OscConfig+0x5e0>
 8006e94:	4b68      	ldr	r3, [pc, #416]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e98:	4a67      	ldr	r2, [pc, #412]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006e9a:	f023 0301 	bic.w	r3, r3, #1
 8006e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8006ea0:	4b65      	ldr	r3, [pc, #404]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ea4:	4a64      	ldr	r2, [pc, #400]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006ea6:	f023 0304 	bic.w	r3, r3, #4
 8006eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d015      	beq.n	8006ee0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006eb4:	f7fc f984 	bl	80031c0 <HAL_GetTick>
 8006eb8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006eba:	e00a      	b.n	8006ed2 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ebc:	f7fc f980 	bl	80031c0 <HAL_GetTick>
 8006ec0:	4602      	mov	r2, r0
 8006ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec4:	1ad3      	subs	r3, r2, r3
 8006ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d901      	bls.n	8006ed2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	e123      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006ed2:	4b59      	ldr	r3, [pc, #356]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ed6:	f003 0302 	and.w	r3, r3, #2
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d0ee      	beq.n	8006ebc <HAL_RCC_OscConfig+0x5f0>
 8006ede:	e014      	b.n	8006f0a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ee0:	f7fc f96e 	bl	80031c0 <HAL_GetTick>
 8006ee4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ee6:	e00a      	b.n	8006efe <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ee8:	f7fc f96a 	bl	80031c0 <HAL_GetTick>
 8006eec:	4602      	mov	r2, r0
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d901      	bls.n	8006efe <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006efa:	2303      	movs	r3, #3
 8006efc:	e10d      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006efe:	4b4e      	ldr	r3, [pc, #312]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f02:	f003 0302 	and.w	r3, r3, #2
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d1ee      	bne.n	8006ee8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	f000 8102 	beq.w	8007118 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006f14:	4b48      	ldr	r3, [pc, #288]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f16:	691b      	ldr	r3, [r3, #16]
 8006f18:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006f1c:	2b18      	cmp	r3, #24
 8006f1e:	f000 80bd 	beq.w	800709c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f26:	2b02      	cmp	r3, #2
 8006f28:	f040 809e 	bne.w	8007068 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f2c:	4b42      	ldr	r3, [pc, #264]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a41      	ldr	r2, [pc, #260]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006f36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f38:	f7fc f942 	bl	80031c0 <HAL_GetTick>
 8006f3c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f3e:	e008      	b.n	8006f52 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006f40:	f7fc f93e 	bl	80031c0 <HAL_GetTick>
 8006f44:	4602      	mov	r2, r0
 8006f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	2b02      	cmp	r3, #2
 8006f4c:	d901      	bls.n	8006f52 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006f4e:	2303      	movs	r3, #3
 8006f50:	e0e3      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006f52:	4b39      	ldr	r3, [pc, #228]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d1f0      	bne.n	8006f40 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f5e:	4b36      	ldr	r3, [pc, #216]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f60:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f62:	4b37      	ldr	r3, [pc, #220]	; (8007040 <HAL_RCC_OscConfig+0x774>)
 8006f64:	4013      	ands	r3, r2
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006f6a:	687a      	ldr	r2, [r7, #4]
 8006f6c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006f6e:	0112      	lsls	r2, r2, #4
 8006f70:	430a      	orrs	r2, r1
 8006f72:	4931      	ldr	r1, [pc, #196]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006f74:	4313      	orrs	r3, r2
 8006f76:	628b      	str	r3, [r1, #40]	; 0x28
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006f86:	3b01      	subs	r3, #1
 8006f88:	025b      	lsls	r3, r3, #9
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	431a      	orrs	r2, r3
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f92:	3b01      	subs	r3, #1
 8006f94:	041b      	lsls	r3, r3, #16
 8006f96:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fa0:	3b01      	subs	r3, #1
 8006fa2:	061b      	lsls	r3, r3, #24
 8006fa4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006fa8:	4923      	ldr	r1, [pc, #140]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006faa:	4313      	orrs	r3, r2
 8006fac:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006fae:	4b22      	ldr	r3, [pc, #136]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb2:	4a21      	ldr	r2, [pc, #132]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fb4:	f023 0301 	bic.w	r3, r3, #1
 8006fb8:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006fba:	4b1f      	ldr	r3, [pc, #124]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006fbe:	4b21      	ldr	r3, [pc, #132]	; (8007044 <HAL_RCC_OscConfig+0x778>)
 8006fc0:	4013      	ands	r3, r2
 8006fc2:	687a      	ldr	r2, [r7, #4]
 8006fc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006fc6:	00d2      	lsls	r2, r2, #3
 8006fc8:	491b      	ldr	r1, [pc, #108]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006fce:	4b1a      	ldr	r3, [pc, #104]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fd2:	f023 020c 	bic.w	r2, r3, #12
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fda:	4917      	ldr	r1, [pc, #92]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fdc:	4313      	orrs	r3, r2
 8006fde:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006fe0:	4b15      	ldr	r3, [pc, #84]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe4:	f023 0202 	bic.w	r2, r3, #2
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	4912      	ldr	r1, [pc, #72]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006fee:	4313      	orrs	r3, r2
 8006ff0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ff2:	4b11      	ldr	r3, [pc, #68]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff6:	4a10      	ldr	r2, [pc, #64]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8006ff8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ffc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ffe:	4b0e      	ldr	r3, [pc, #56]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8007000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007002:	4a0d      	ldr	r2, [pc, #52]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8007004:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007008:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800700a:	4b0b      	ldr	r3, [pc, #44]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 800700c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700e:	4a0a      	ldr	r2, [pc, #40]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8007010:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007014:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8007016:	4b08      	ldr	r3, [pc, #32]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a07      	ldr	r2, [pc, #28]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 800701c:	f043 0301 	orr.w	r3, r3, #1
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007022:	4b05      	ldr	r3, [pc, #20]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a04      	ldr	r2, [pc, #16]	; (8007038 <HAL_RCC_OscConfig+0x76c>)
 8007028:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800702c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800702e:	f7fc f8c7 	bl	80031c0 <HAL_GetTick>
 8007032:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007034:	e011      	b.n	800705a <HAL_RCC_OscConfig+0x78e>
 8007036:	bf00      	nop
 8007038:	58024400 	.word	0x58024400
 800703c:	58024800 	.word	0x58024800
 8007040:	fffffc0c 	.word	0xfffffc0c
 8007044:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007048:	f7fc f8ba 	bl	80031c0 <HAL_GetTick>
 800704c:	4602      	mov	r2, r0
 800704e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007050:	1ad3      	subs	r3, r2, r3
 8007052:	2b02      	cmp	r3, #2
 8007054:	d901      	bls.n	800705a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007056:	2303      	movs	r3, #3
 8007058:	e05f      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800705a:	4b32      	ldr	r3, [pc, #200]	; (8007124 <HAL_RCC_OscConfig+0x858>)
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007062:	2b00      	cmp	r3, #0
 8007064:	d0f0      	beq.n	8007048 <HAL_RCC_OscConfig+0x77c>
 8007066:	e057      	b.n	8007118 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007068:	4b2e      	ldr	r3, [pc, #184]	; (8007124 <HAL_RCC_OscConfig+0x858>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	4a2d      	ldr	r2, [pc, #180]	; (8007124 <HAL_RCC_OscConfig+0x858>)
 800706e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007074:	f7fc f8a4 	bl	80031c0 <HAL_GetTick>
 8007078:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800707a:	e008      	b.n	800708e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800707c:	f7fc f8a0 	bl	80031c0 <HAL_GetTick>
 8007080:	4602      	mov	r2, r0
 8007082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007084:	1ad3      	subs	r3, r2, r3
 8007086:	2b02      	cmp	r3, #2
 8007088:	d901      	bls.n	800708e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800708a:	2303      	movs	r3, #3
 800708c:	e045      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800708e:	4b25      	ldr	r3, [pc, #148]	; (8007124 <HAL_RCC_OscConfig+0x858>)
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007096:	2b00      	cmp	r3, #0
 8007098:	d1f0      	bne.n	800707c <HAL_RCC_OscConfig+0x7b0>
 800709a:	e03d      	b.n	8007118 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800709c:	4b21      	ldr	r3, [pc, #132]	; (8007124 <HAL_RCC_OscConfig+0x858>)
 800709e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070a0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80070a2:	4b20      	ldr	r3, [pc, #128]	; (8007124 <HAL_RCC_OscConfig+0x858>)
 80070a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070a6:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ac:	2b01      	cmp	r3, #1
 80070ae:	d031      	beq.n	8007114 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f003 0203 	and.w	r2, r3, #3
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d12a      	bne.n	8007114 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	091b      	lsrs	r3, r3, #4
 80070c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80070ca:	429a      	cmp	r2, r3
 80070cc:	d122      	bne.n	8007114 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070d8:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80070da:	429a      	cmp	r2, r3
 80070dc:	d11a      	bne.n	8007114 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	0a5b      	lsrs	r3, r3, #9
 80070e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070ea:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80070ec:	429a      	cmp	r2, r3
 80070ee:	d111      	bne.n	8007114 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	0c1b      	lsrs	r3, r3, #16
 80070f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80070fe:	429a      	cmp	r2, r3
 8007100:	d108      	bne.n	8007114 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	0e1b      	lsrs	r3, r3, #24
 8007106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800710e:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007110:	429a      	cmp	r2, r3
 8007112:	d001      	beq.n	8007118 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8007114:	2301      	movs	r3, #1
 8007116:	e000      	b.n	800711a <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8007118:	2300      	movs	r3, #0
}
 800711a:	4618      	mov	r0, r3
 800711c:	3730      	adds	r7, #48	; 0x30
 800711e:	46bd      	mov	sp, r7
 8007120:	bd80      	pop	{r7, pc}
 8007122:	bf00      	nop
 8007124:	58024400 	.word	0x58024400

08007128 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b086      	sub	sp, #24
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d101      	bne.n	800713c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007138:	2301      	movs	r3, #1
 800713a:	e19c      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800713c:	4b8a      	ldr	r3, [pc, #552]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	683a      	ldr	r2, [r7, #0]
 8007146:	429a      	cmp	r2, r3
 8007148:	d910      	bls.n	800716c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800714a:	4b87      	ldr	r3, [pc, #540]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f023 020f 	bic.w	r2, r3, #15
 8007152:	4985      	ldr	r1, [pc, #532]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	4313      	orrs	r3, r2
 8007158:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800715a:	4b83      	ldr	r3, [pc, #524]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	f003 030f 	and.w	r3, r3, #15
 8007162:	683a      	ldr	r2, [r7, #0]
 8007164:	429a      	cmp	r2, r3
 8007166:	d001      	beq.n	800716c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007168:	2301      	movs	r3, #1
 800716a:	e184      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0304 	and.w	r3, r3, #4
 8007174:	2b00      	cmp	r3, #0
 8007176:	d010      	beq.n	800719a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	4b7b      	ldr	r3, [pc, #492]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 800717e:	699b      	ldr	r3, [r3, #24]
 8007180:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007184:	429a      	cmp	r2, r3
 8007186:	d908      	bls.n	800719a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007188:	4b78      	ldr	r3, [pc, #480]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 800718a:	699b      	ldr	r3, [r3, #24]
 800718c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	691b      	ldr	r3, [r3, #16]
 8007194:	4975      	ldr	r1, [pc, #468]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007196:	4313      	orrs	r3, r2
 8007198:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0308 	and.w	r3, r3, #8
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d010      	beq.n	80071c8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	695a      	ldr	r2, [r3, #20]
 80071aa:	4b70      	ldr	r3, [pc, #448]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80071ac:	69db      	ldr	r3, [r3, #28]
 80071ae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d908      	bls.n	80071c8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80071b6:	4b6d      	ldr	r3, [pc, #436]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80071b8:	69db      	ldr	r3, [r3, #28]
 80071ba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	695b      	ldr	r3, [r3, #20]
 80071c2:	496a      	ldr	r1, [pc, #424]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80071c4:	4313      	orrs	r3, r2
 80071c6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0310 	and.w	r3, r3, #16
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d010      	beq.n	80071f6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	699a      	ldr	r2, [r3, #24]
 80071d8:	4b64      	ldr	r3, [pc, #400]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80071da:	69db      	ldr	r3, [r3, #28]
 80071dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071e0:	429a      	cmp	r2, r3
 80071e2:	d908      	bls.n	80071f6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071e4:	4b61      	ldr	r3, [pc, #388]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	699b      	ldr	r3, [r3, #24]
 80071f0:	495e      	ldr	r1, [pc, #376]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0320 	and.w	r3, r3, #32
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d010      	beq.n	8007224 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	69da      	ldr	r2, [r3, #28]
 8007206:	4b59      	ldr	r3, [pc, #356]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007208:	6a1b      	ldr	r3, [r3, #32]
 800720a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800720e:	429a      	cmp	r2, r3
 8007210:	d908      	bls.n	8007224 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007212:	4b56      	ldr	r3, [pc, #344]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007214:	6a1b      	ldr	r3, [r3, #32]
 8007216:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	69db      	ldr	r3, [r3, #28]
 800721e:	4953      	ldr	r1, [pc, #332]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007220:	4313      	orrs	r3, r2
 8007222:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d010      	beq.n	8007252 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	68da      	ldr	r2, [r3, #12]
 8007234:	4b4d      	ldr	r3, [pc, #308]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007236:	699b      	ldr	r3, [r3, #24]
 8007238:	f003 030f 	and.w	r3, r3, #15
 800723c:	429a      	cmp	r2, r3
 800723e:	d908      	bls.n	8007252 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007240:	4b4a      	ldr	r3, [pc, #296]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007242:	699b      	ldr	r3, [r3, #24]
 8007244:	f023 020f 	bic.w	r2, r3, #15
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	4947      	ldr	r1, [pc, #284]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 800724e:	4313      	orrs	r3, r2
 8007250:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 0301 	and.w	r3, r3, #1
 800725a:	2b00      	cmp	r3, #0
 800725c:	d055      	beq.n	800730a <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800725e:	4b43      	ldr	r3, [pc, #268]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007260:	699b      	ldr	r3, [r3, #24]
 8007262:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	689b      	ldr	r3, [r3, #8]
 800726a:	4940      	ldr	r1, [pc, #256]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 800726c:	4313      	orrs	r3, r2
 800726e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b02      	cmp	r3, #2
 8007276:	d107      	bne.n	8007288 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007278:	4b3c      	ldr	r3, [pc, #240]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007280:	2b00      	cmp	r3, #0
 8007282:	d121      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007284:	2301      	movs	r3, #1
 8007286:	e0f6      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	2b03      	cmp	r3, #3
 800728e:	d107      	bne.n	80072a0 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007290:	4b36      	ldr	r3, [pc, #216]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d115      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e0ea      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	685b      	ldr	r3, [r3, #4]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d107      	bne.n	80072b8 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80072a8:	4b30      	ldr	r3, [pc, #192]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d109      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072b4:	2301      	movs	r3, #1
 80072b6:	e0de      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80072b8:	4b2c      	ldr	r3, [pc, #176]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f003 0304 	and.w	r3, r3, #4
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 80072c4:	2301      	movs	r3, #1
 80072c6:	e0d6      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80072c8:	4b28      	ldr	r3, [pc, #160]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80072ca:	691b      	ldr	r3, [r3, #16]
 80072cc:	f023 0207 	bic.w	r2, r3, #7
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	4925      	ldr	r1, [pc, #148]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80072d6:	4313      	orrs	r3, r2
 80072d8:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072da:	f7fb ff71 	bl	80031c0 <HAL_GetTick>
 80072de:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072e0:	e00a      	b.n	80072f8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80072e2:	f7fb ff6d 	bl	80031c0 <HAL_GetTick>
 80072e6:	4602      	mov	r2, r0
 80072e8:	697b      	ldr	r3, [r7, #20]
 80072ea:	1ad3      	subs	r3, r2, r3
 80072ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d901      	bls.n	80072f8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80072f4:	2303      	movs	r3, #3
 80072f6:	e0be      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80072f8:	4b1c      	ldr	r3, [pc, #112]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 80072fa:	691b      	ldr	r3, [r3, #16]
 80072fc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	00db      	lsls	r3, r3, #3
 8007306:	429a      	cmp	r2, r3
 8007308:	d1eb      	bne.n	80072e2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	f003 0302 	and.w	r3, r3, #2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d010      	beq.n	8007338 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	68da      	ldr	r2, [r3, #12]
 800731a:	4b14      	ldr	r3, [pc, #80]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 800731c:	699b      	ldr	r3, [r3, #24]
 800731e:	f003 030f 	and.w	r3, r3, #15
 8007322:	429a      	cmp	r2, r3
 8007324:	d208      	bcs.n	8007338 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007326:	4b11      	ldr	r3, [pc, #68]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	f023 020f 	bic.w	r2, r3, #15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68db      	ldr	r3, [r3, #12]
 8007332:	490e      	ldr	r1, [pc, #56]	; (800736c <HAL_RCC_ClockConfig+0x244>)
 8007334:	4313      	orrs	r3, r2
 8007336:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007338:	4b0b      	ldr	r3, [pc, #44]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f003 030f 	and.w	r3, r3, #15
 8007340:	683a      	ldr	r2, [r7, #0]
 8007342:	429a      	cmp	r2, r3
 8007344:	d214      	bcs.n	8007370 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007346:	4b08      	ldr	r3, [pc, #32]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f023 020f 	bic.w	r2, r3, #15
 800734e:	4906      	ldr	r1, [pc, #24]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	4313      	orrs	r3, r2
 8007354:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007356:	4b04      	ldr	r3, [pc, #16]	; (8007368 <HAL_RCC_ClockConfig+0x240>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f003 030f 	and.w	r3, r3, #15
 800735e:	683a      	ldr	r2, [r7, #0]
 8007360:	429a      	cmp	r2, r3
 8007362:	d005      	beq.n	8007370 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8007364:	2301      	movs	r3, #1
 8007366:	e086      	b.n	8007476 <HAL_RCC_ClockConfig+0x34e>
 8007368:	52002000 	.word	0x52002000
 800736c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f003 0304 	and.w	r3, r3, #4
 8007378:	2b00      	cmp	r3, #0
 800737a:	d010      	beq.n	800739e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	691a      	ldr	r2, [r3, #16]
 8007380:	4b3f      	ldr	r3, [pc, #252]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007388:	429a      	cmp	r2, r3
 800738a:	d208      	bcs.n	800739e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800738c:	4b3c      	ldr	r3, [pc, #240]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 800738e:	699b      	ldr	r3, [r3, #24]
 8007390:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	691b      	ldr	r3, [r3, #16]
 8007398:	4939      	ldr	r1, [pc, #228]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 800739a:	4313      	orrs	r3, r2
 800739c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d010      	beq.n	80073cc <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	4b34      	ldr	r3, [pc, #208]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 80073b0:	69db      	ldr	r3, [r3, #28]
 80073b2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d208      	bcs.n	80073cc <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80073ba:	4b31      	ldr	r3, [pc, #196]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 80073bc:	69db      	ldr	r3, [r3, #28]
 80073be:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	695b      	ldr	r3, [r3, #20]
 80073c6:	492e      	ldr	r1, [pc, #184]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 80073c8:	4313      	orrs	r3, r2
 80073ca:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	f003 0310 	and.w	r3, r3, #16
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d010      	beq.n	80073fa <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	699a      	ldr	r2, [r3, #24]
 80073dc:	4b28      	ldr	r3, [pc, #160]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 80073de:	69db      	ldr	r3, [r3, #28]
 80073e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80073e4:	429a      	cmp	r2, r3
 80073e6:	d208      	bcs.n	80073fa <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80073e8:	4b25      	ldr	r3, [pc, #148]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 80073ea:	69db      	ldr	r3, [r3, #28]
 80073ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	699b      	ldr	r3, [r3, #24]
 80073f4:	4922      	ldr	r1, [pc, #136]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	f003 0320 	and.w	r3, r3, #32
 8007402:	2b00      	cmp	r3, #0
 8007404:	d010      	beq.n	8007428 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	4b1d      	ldr	r3, [pc, #116]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 800740c:	6a1b      	ldr	r3, [r3, #32]
 800740e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007412:	429a      	cmp	r2, r3
 8007414:	d208      	bcs.n	8007428 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8007416:	4b1a      	ldr	r3, [pc, #104]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 8007418:	6a1b      	ldr	r3, [r3, #32]
 800741a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	69db      	ldr	r3, [r3, #28]
 8007422:	4917      	ldr	r1, [pc, #92]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 8007424:	4313      	orrs	r3, r2
 8007426:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007428:	f000 f834 	bl	8007494 <HAL_RCC_GetSysClockFreq>
 800742c:	4602      	mov	r2, r0
 800742e:	4b14      	ldr	r3, [pc, #80]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	0a1b      	lsrs	r3, r3, #8
 8007434:	f003 030f 	and.w	r3, r3, #15
 8007438:	4912      	ldr	r1, [pc, #72]	; (8007484 <HAL_RCC_ClockConfig+0x35c>)
 800743a:	5ccb      	ldrb	r3, [r1, r3]
 800743c:	f003 031f 	and.w	r3, r3, #31
 8007440:	fa22 f303 	lsr.w	r3, r2, r3
 8007444:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007446:	4b0e      	ldr	r3, [pc, #56]	; (8007480 <HAL_RCC_ClockConfig+0x358>)
 8007448:	699b      	ldr	r3, [r3, #24]
 800744a:	f003 030f 	and.w	r3, r3, #15
 800744e:	4a0d      	ldr	r2, [pc, #52]	; (8007484 <HAL_RCC_ClockConfig+0x35c>)
 8007450:	5cd3      	ldrb	r3, [r2, r3]
 8007452:	f003 031f 	and.w	r3, r3, #31
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	fa22 f303 	lsr.w	r3, r2, r3
 800745c:	4a0a      	ldr	r2, [pc, #40]	; (8007488 <HAL_RCC_ClockConfig+0x360>)
 800745e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007460:	4a0a      	ldr	r2, [pc, #40]	; (800748c <HAL_RCC_ClockConfig+0x364>)
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8007466:	4b0a      	ldr	r3, [pc, #40]	; (8007490 <HAL_RCC_ClockConfig+0x368>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	4618      	mov	r0, r3
 800746c:	f7fb fe5e 	bl	800312c <HAL_InitTick>
 8007470:	4603      	mov	r3, r0
 8007472:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8007474:	7bfb      	ldrb	r3, [r7, #15]
}
 8007476:	4618      	mov	r0, r3
 8007478:	3718      	adds	r7, #24
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}
 800747e:	bf00      	nop
 8007480:	58024400 	.word	0x58024400
 8007484:	0800c110 	.word	0x0800c110
 8007488:	24000004 	.word	0x24000004
 800748c:	24000000 	.word	0x24000000
 8007490:	24000018 	.word	0x24000018

08007494 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007494:	b480      	push	{r7}
 8007496:	b089      	sub	sp, #36	; 0x24
 8007498:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800749a:	4bb3      	ldr	r3, [pc, #716]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80074a2:	2b18      	cmp	r3, #24
 80074a4:	f200 8155 	bhi.w	8007752 <HAL_RCC_GetSysClockFreq+0x2be>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	08007515 	.word	0x08007515
 80074b4:	08007753 	.word	0x08007753
 80074b8:	08007753 	.word	0x08007753
 80074bc:	08007753 	.word	0x08007753
 80074c0:	08007753 	.word	0x08007753
 80074c4:	08007753 	.word	0x08007753
 80074c8:	08007753 	.word	0x08007753
 80074cc:	08007753 	.word	0x08007753
 80074d0:	0800753b 	.word	0x0800753b
 80074d4:	08007753 	.word	0x08007753
 80074d8:	08007753 	.word	0x08007753
 80074dc:	08007753 	.word	0x08007753
 80074e0:	08007753 	.word	0x08007753
 80074e4:	08007753 	.word	0x08007753
 80074e8:	08007753 	.word	0x08007753
 80074ec:	08007753 	.word	0x08007753
 80074f0:	08007541 	.word	0x08007541
 80074f4:	08007753 	.word	0x08007753
 80074f8:	08007753 	.word	0x08007753
 80074fc:	08007753 	.word	0x08007753
 8007500:	08007753 	.word	0x08007753
 8007504:	08007753 	.word	0x08007753
 8007508:	08007753 	.word	0x08007753
 800750c:	08007753 	.word	0x08007753
 8007510:	08007547 	.word	0x08007547
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007514:	4b94      	ldr	r3, [pc, #592]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0320 	and.w	r3, r3, #32
 800751c:	2b00      	cmp	r3, #0
 800751e:	d009      	beq.n	8007534 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007520:	4b91      	ldr	r3, [pc, #580]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	08db      	lsrs	r3, r3, #3
 8007526:	f003 0303 	and.w	r3, r3, #3
 800752a:	4a90      	ldr	r2, [pc, #576]	; (800776c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800752c:	fa22 f303 	lsr.w	r3, r2, r3
 8007530:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8007532:	e111      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8007534:	4b8d      	ldr	r3, [pc, #564]	; (800776c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007536:	61bb      	str	r3, [r7, #24]
    break;
 8007538:	e10e      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800753a:	4b8d      	ldr	r3, [pc, #564]	; (8007770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800753c:	61bb      	str	r3, [r7, #24]
    break;
 800753e:	e10b      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007540:	4b8c      	ldr	r3, [pc, #560]	; (8007774 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8007542:	61bb      	str	r3, [r7, #24]
    break;
 8007544:	e108      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007546:	4b88      	ldr	r3, [pc, #544]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800754a:	f003 0303 	and.w	r3, r3, #3
 800754e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007550:	4b85      	ldr	r3, [pc, #532]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007554:	091b      	lsrs	r3, r3, #4
 8007556:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800755a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800755c:	4b82      	ldr	r3, [pc, #520]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800755e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8007566:	4b80      	ldr	r3, [pc, #512]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007568:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800756a:	08db      	lsrs	r3, r3, #3
 800756c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007570:	68fa      	ldr	r2, [r7, #12]
 8007572:	fb02 f303 	mul.w	r3, r2, r3
 8007576:	ee07 3a90 	vmov	s15, r3
 800757a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800757e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 80e1 	beq.w	800774c <HAL_RCC_GetSysClockFreq+0x2b8>
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b02      	cmp	r3, #2
 800758e:	f000 8083 	beq.w	8007698 <HAL_RCC_GetSysClockFreq+0x204>
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b02      	cmp	r3, #2
 8007596:	f200 80a1 	bhi.w	80076dc <HAL_RCC_GetSysClockFreq+0x248>
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d003      	beq.n	80075a8 <HAL_RCC_GetSysClockFreq+0x114>
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d056      	beq.n	8007654 <HAL_RCC_GetSysClockFreq+0x1c0>
 80075a6:	e099      	b.n	80076dc <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075a8:	4b6f      	ldr	r3, [pc, #444]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f003 0320 	and.w	r3, r3, #32
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d02d      	beq.n	8007610 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075b4:	4b6c      	ldr	r3, [pc, #432]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	08db      	lsrs	r3, r3, #3
 80075ba:	f003 0303 	and.w	r3, r3, #3
 80075be:	4a6b      	ldr	r2, [pc, #428]	; (800776c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80075c0:	fa22 f303 	lsr.w	r3, r2, r3
 80075c4:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	ee07 3a90 	vmov	s15, r3
 80075cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80075de:	4b62      	ldr	r3, [pc, #392]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80075e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80075e6:	ee07 3a90 	vmov	s15, r3
 80075ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80075f2:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80075f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007602:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007606:	ee67 7a27 	vmul.f32	s15, s14, s15
 800760a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800760e:	e087      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	ee07 3a90 	vmov	s15, r3
 8007616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800761a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800777c <HAL_RCC_GetSysClockFreq+0x2e8>
 800761e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007622:	4b51      	ldr	r3, [pc, #324]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007626:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800762a:	ee07 3a90 	vmov	s15, r3
 800762e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007632:	ed97 6a02 	vldr	s12, [r7, #8]
 8007636:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800763a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800763e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007642:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007646:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800764a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800764e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007652:	e065      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007654:	693b      	ldr	r3, [r7, #16]
 8007656:	ee07 3a90 	vmov	s15, r3
 800765a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800765e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007780 <HAL_RCC_GetSysClockFreq+0x2ec>
 8007662:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007666:	4b40      	ldr	r3, [pc, #256]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800766a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800766e:	ee07 3a90 	vmov	s15, r3
 8007672:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007676:	ed97 6a02 	vldr	s12, [r7, #8]
 800767a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007778 <HAL_RCC_GetSysClockFreq+0x2e4>
 800767e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007682:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007686:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800768a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800768e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007692:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007696:	e043      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	ee07 3a90 	vmov	s15, r3
 800769e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076a2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8007784 <HAL_RCC_GetSysClockFreq+0x2f0>
 80076a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076aa:	4b2f      	ldr	r3, [pc, #188]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076b2:	ee07 3a90 	vmov	s15, r3
 80076b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80076be:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007778 <HAL_RCC_GetSysClockFreq+0x2e4>
 80076c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80076da:	e021      	b.n	8007720 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80076dc:	693b      	ldr	r3, [r7, #16]
 80076de:	ee07 3a90 	vmov	s15, r3
 80076e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076e6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007780 <HAL_RCC_GetSysClockFreq+0x2ec>
 80076ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076ee:	4b1e      	ldr	r3, [pc, #120]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80076f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80076f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076f6:	ee07 3a90 	vmov	s15, r3
 80076fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076fe:	ed97 6a02 	vldr	s12, [r7, #8]
 8007702:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007778 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007706:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800770a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800770e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007716:	ee67 7a27 	vmul.f32	s15, s14, s15
 800771a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800771e:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8007720:	4b11      	ldr	r3, [pc, #68]	; (8007768 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007724:	0a5b      	lsrs	r3, r3, #9
 8007726:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800772a:	3301      	adds	r3, #1
 800772c:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800772e:	683b      	ldr	r3, [r7, #0]
 8007730:	ee07 3a90 	vmov	s15, r3
 8007734:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007738:	edd7 6a07 	vldr	s13, [r7, #28]
 800773c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007740:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007744:	ee17 3a90 	vmov	r3, s15
 8007748:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800774a:	e005      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800774c:	2300      	movs	r3, #0
 800774e:	61bb      	str	r3, [r7, #24]
    break;
 8007750:	e002      	b.n	8007758 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8007752:	4b07      	ldr	r3, [pc, #28]	; (8007770 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007754:	61bb      	str	r3, [r7, #24]
    break;
 8007756:	bf00      	nop
  }

  return sysclockfreq;
 8007758:	69bb      	ldr	r3, [r7, #24]
}
 800775a:	4618      	mov	r0, r3
 800775c:	3724      	adds	r7, #36	; 0x24
 800775e:	46bd      	mov	sp, r7
 8007760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	58024400 	.word	0x58024400
 800776c:	03d09000 	.word	0x03d09000
 8007770:	003d0900 	.word	0x003d0900
 8007774:	007a1200 	.word	0x007a1200
 8007778:	46000000 	.word	0x46000000
 800777c:	4c742400 	.word	0x4c742400
 8007780:	4a742400 	.word	0x4a742400
 8007784:	4af42400 	.word	0x4af42400

08007788 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b082      	sub	sp, #8
 800778c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800778e:	f7ff fe81 	bl	8007494 <HAL_RCC_GetSysClockFreq>
 8007792:	4602      	mov	r2, r0
 8007794:	4b10      	ldr	r3, [pc, #64]	; (80077d8 <HAL_RCC_GetHCLKFreq+0x50>)
 8007796:	699b      	ldr	r3, [r3, #24]
 8007798:	0a1b      	lsrs	r3, r3, #8
 800779a:	f003 030f 	and.w	r3, r3, #15
 800779e:	490f      	ldr	r1, [pc, #60]	; (80077dc <HAL_RCC_GetHCLKFreq+0x54>)
 80077a0:	5ccb      	ldrb	r3, [r1, r3]
 80077a2:	f003 031f 	and.w	r3, r3, #31
 80077a6:	fa22 f303 	lsr.w	r3, r2, r3
 80077aa:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80077ac:	4b0a      	ldr	r3, [pc, #40]	; (80077d8 <HAL_RCC_GetHCLKFreq+0x50>)
 80077ae:	699b      	ldr	r3, [r3, #24]
 80077b0:	f003 030f 	and.w	r3, r3, #15
 80077b4:	4a09      	ldr	r2, [pc, #36]	; (80077dc <HAL_RCC_GetHCLKFreq+0x54>)
 80077b6:	5cd3      	ldrb	r3, [r2, r3]
 80077b8:	f003 031f 	and.w	r3, r3, #31
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	fa22 f303 	lsr.w	r3, r2, r3
 80077c2:	4a07      	ldr	r2, [pc, #28]	; (80077e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80077c4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80077c6:	4a07      	ldr	r2, [pc, #28]	; (80077e4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80077cc:	4b04      	ldr	r3, [pc, #16]	; (80077e0 <HAL_RCC_GetHCLKFreq+0x58>)
 80077ce:	681b      	ldr	r3, [r3, #0]
}
 80077d0:	4618      	mov	r0, r3
 80077d2:	3708      	adds	r7, #8
 80077d4:	46bd      	mov	sp, r7
 80077d6:	bd80      	pop	{r7, pc}
 80077d8:	58024400 	.word	0x58024400
 80077dc:	0800c110 	.word	0x0800c110
 80077e0:	24000004 	.word	0x24000004
 80077e4:	24000000 	.word	0x24000000

080077e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80077e8:	b580      	push	{r7, lr}
 80077ea:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80077ec:	f7ff ffcc 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 80077f0:	4602      	mov	r2, r0
 80077f2:	4b06      	ldr	r3, [pc, #24]	; (800780c <HAL_RCC_GetPCLK1Freq+0x24>)
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	091b      	lsrs	r3, r3, #4
 80077f8:	f003 0307 	and.w	r3, r3, #7
 80077fc:	4904      	ldr	r1, [pc, #16]	; (8007810 <HAL_RCC_GetPCLK1Freq+0x28>)
 80077fe:	5ccb      	ldrb	r3, [r1, r3]
 8007800:	f003 031f 	and.w	r3, r3, #31
 8007804:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8007808:	4618      	mov	r0, r3
 800780a:	bd80      	pop	{r7, pc}
 800780c:	58024400 	.word	0x58024400
 8007810:	0800c110 	.word	0x0800c110

08007814 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8007818:	f7ff ffb6 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 800781c:	4602      	mov	r2, r0
 800781e:	4b06      	ldr	r3, [pc, #24]	; (8007838 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007820:	69db      	ldr	r3, [r3, #28]
 8007822:	0a1b      	lsrs	r3, r3, #8
 8007824:	f003 0307 	and.w	r3, r3, #7
 8007828:	4904      	ldr	r1, [pc, #16]	; (800783c <HAL_RCC_GetPCLK2Freq+0x28>)
 800782a:	5ccb      	ldrb	r3, [r1, r3]
 800782c:	f003 031f 	and.w	r3, r3, #31
 8007830:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8007834:	4618      	mov	r0, r3
 8007836:	bd80      	pop	{r7, pc}
 8007838:	58024400 	.word	0x58024400
 800783c:	0800c110 	.word	0x0800c110

08007840 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007848:	2300      	movs	r3, #0
 800784a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800784c:	2300      	movs	r3, #0
 800784e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007858:	2b00      	cmp	r3, #0
 800785a:	d03f      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007860:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007864:	d02a      	beq.n	80078bc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8007866:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800786a:	d824      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800786c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007870:	d018      	beq.n	80078a4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8007872:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007876:	d81e      	bhi.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007878:	2b00      	cmp	r3, #0
 800787a:	d003      	beq.n	8007884 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800787c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007880:	d007      	beq.n	8007892 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8007882:	e018      	b.n	80078b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007884:	4ba3      	ldr	r3, [pc, #652]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007886:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007888:	4aa2      	ldr	r2, [pc, #648]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800788a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800788e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007890:	e015      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	3304      	adds	r3, #4
 8007896:	2102      	movs	r1, #2
 8007898:	4618      	mov	r0, r3
 800789a:	f001 f9d5 	bl	8008c48 <RCCEx_PLL2_Config>
 800789e:	4603      	mov	r3, r0
 80078a0:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80078a2:	e00c      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3324      	adds	r3, #36	; 0x24
 80078a8:	2102      	movs	r1, #2
 80078aa:	4618      	mov	r0, r3
 80078ac:	f001 fa7e 	bl	8008dac <RCCEx_PLL3_Config>
 80078b0:	4603      	mov	r3, r0
 80078b2:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80078b4:	e003      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	75fb      	strb	r3, [r7, #23]
      break;
 80078ba:	e000      	b.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80078bc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078be:	7dfb      	ldrb	r3, [r7, #23]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d109      	bne.n	80078d8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80078c4:	4b93      	ldr	r3, [pc, #588]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078c8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80078d0:	4990      	ldr	r1, [pc, #576]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078d2:	4313      	orrs	r3, r2
 80078d4:	650b      	str	r3, [r1, #80]	; 0x50
 80078d6:	e001      	b.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
 80078da:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d03d      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078ec:	2b04      	cmp	r3, #4
 80078ee:	d826      	bhi.n	800793e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80078f0:	a201      	add	r2, pc, #4	; (adr r2, 80078f8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80078f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078f6:	bf00      	nop
 80078f8:	0800790d 	.word	0x0800790d
 80078fc:	0800791b 	.word	0x0800791b
 8007900:	0800792d 	.word	0x0800792d
 8007904:	08007945 	.word	0x08007945
 8007908:	08007945 	.word	0x08007945
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800790c:	4b81      	ldr	r3, [pc, #516]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800790e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007910:	4a80      	ldr	r2, [pc, #512]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007912:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007916:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007918:	e015      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	3304      	adds	r3, #4
 800791e:	2100      	movs	r1, #0
 8007920:	4618      	mov	r0, r3
 8007922:	f001 f991 	bl	8008c48 <RCCEx_PLL2_Config>
 8007926:	4603      	mov	r3, r0
 8007928:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800792a:	e00c      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	3324      	adds	r3, #36	; 0x24
 8007930:	2100      	movs	r1, #0
 8007932:	4618      	mov	r0, r3
 8007934:	f001 fa3a 	bl	8008dac <RCCEx_PLL3_Config>
 8007938:	4603      	mov	r3, r0
 800793a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800793c:	e003      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800793e:	2301      	movs	r3, #1
 8007940:	75fb      	strb	r3, [r7, #23]
      break;
 8007942:	e000      	b.n	8007946 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8007944:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007946:	7dfb      	ldrb	r3, [r7, #23]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d109      	bne.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800794c:	4b71      	ldr	r3, [pc, #452]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800794e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007950:	f023 0207 	bic.w	r2, r3, #7
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007958:	496e      	ldr	r1, [pc, #440]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800795a:	4313      	orrs	r3, r2
 800795c:	650b      	str	r3, [r1, #80]	; 0x50
 800795e:	e001      	b.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007960:	7dfb      	ldrb	r3, [r7, #23]
 8007962:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800796c:	2b00      	cmp	r3, #0
 800796e:	d042      	beq.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007974:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007978:	d02b      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800797a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800797e:	d825      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007980:	2bc0      	cmp	r3, #192	; 0xc0
 8007982:	d028      	beq.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007984:	2bc0      	cmp	r3, #192	; 0xc0
 8007986:	d821      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007988:	2b80      	cmp	r3, #128	; 0x80
 800798a:	d016      	beq.n	80079ba <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800798c:	2b80      	cmp	r3, #128	; 0x80
 800798e:	d81d      	bhi.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007990:	2b00      	cmp	r3, #0
 8007992:	d002      	beq.n	800799a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8007994:	2b40      	cmp	r3, #64	; 0x40
 8007996:	d007      	beq.n	80079a8 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007998:	e018      	b.n	80079cc <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800799a:	4b5e      	ldr	r3, [pc, #376]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800799c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799e:	4a5d      	ldr	r2, [pc, #372]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079a6:	e017      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	3304      	adds	r3, #4
 80079ac:	2100      	movs	r1, #0
 80079ae:	4618      	mov	r0, r3
 80079b0:	f001 f94a 	bl	8008c48 <RCCEx_PLL2_Config>
 80079b4:	4603      	mov	r3, r0
 80079b6:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079b8:	e00e      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	3324      	adds	r3, #36	; 0x24
 80079be:	2100      	movs	r1, #0
 80079c0:	4618      	mov	r0, r3
 80079c2:	f001 f9f3 	bl	8008dac <RCCEx_PLL3_Config>
 80079c6:	4603      	mov	r3, r0
 80079c8:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80079ca:	e005      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
      break;
 80079d0:	e002      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80079d2:	bf00      	nop
 80079d4:	e000      	b.n	80079d8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80079d6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079d8:	7dfb      	ldrb	r3, [r7, #23]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d109      	bne.n	80079f2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80079de:	4b4d      	ldr	r3, [pc, #308]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079ea:	494a      	ldr	r1, [pc, #296]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80079ec:	4313      	orrs	r3, r2
 80079ee:	650b      	str	r3, [r1, #80]	; 0x50
 80079f0:	e001      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d049      	beq.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a08:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a0c:	d030      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8007a0e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007a12:	d82a      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a14:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a18:	d02c      	beq.n	8007a74 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8007a1a:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8007a1e:	d824      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a24:	d018      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8007a26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a2a:	d81e      	bhi.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d003      	beq.n	8007a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007a30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007a34:	d007      	beq.n	8007a46 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8007a36:	e018      	b.n	8007a6a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007a38:	4b36      	ldr	r3, [pc, #216]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a35      	ldr	r2, [pc, #212]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a3e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a44:	e017      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	3304      	adds	r3, #4
 8007a4a:	2100      	movs	r1, #0
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f001 f8fb 	bl	8008c48 <RCCEx_PLL2_Config>
 8007a52:	4603      	mov	r3, r0
 8007a54:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007a56:	e00e      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	3324      	adds	r3, #36	; 0x24
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f001 f9a4 	bl	8008dac <RCCEx_PLL3_Config>
 8007a64:	4603      	mov	r3, r0
 8007a66:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007a68:	e005      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007a6a:	2301      	movs	r3, #1
 8007a6c:	75fb      	strb	r3, [r7, #23]
      break;
 8007a6e:	e002      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a70:	bf00      	nop
 8007a72:	e000      	b.n	8007a76 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007a74:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a76:	7dfb      	ldrb	r3, [r7, #23]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d10a      	bne.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007a7c:	4b25      	ldr	r3, [pc, #148]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a80:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007a8a:	4922      	ldr	r1, [pc, #136]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	658b      	str	r3, [r1, #88]	; 0x58
 8007a90:	e001      	b.n	8007a96 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d04b      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007aa8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007aac:	d030      	beq.n	8007b10 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007aae:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007ab2:	d82a      	bhi.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ab4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007ab8:	d02e      	beq.n	8007b18 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007aba:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007abe:	d824      	bhi.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007ac0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007ac4:	d018      	beq.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8007ac6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007aca:	d81e      	bhi.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	d003      	beq.n	8007ad8 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8007ad0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ad4:	d007      	beq.n	8007ae6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8007ad6:	e018      	b.n	8007b0a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007ad8:	4b0e      	ldr	r3, [pc, #56]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007adc:	4a0d      	ldr	r2, [pc, #52]	; (8007b14 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007ae4:	e019      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	3304      	adds	r3, #4
 8007aea:	2100      	movs	r1, #0
 8007aec:	4618      	mov	r0, r3
 8007aee:	f001 f8ab 	bl	8008c48 <RCCEx_PLL2_Config>
 8007af2:	4603      	mov	r3, r0
 8007af4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8007af6:	e010      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3324      	adds	r3, #36	; 0x24
 8007afc:	2100      	movs	r1, #0
 8007afe:	4618      	mov	r0, r3
 8007b00:	f001 f954 	bl	8008dac <RCCEx_PLL3_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007b08:	e007      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0e:	e004      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8007b10:	bf00      	nop
 8007b12:	e002      	b.n	8007b1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8007b14:	58024400 	.word	0x58024400
      break;
 8007b18:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b1a:	7dfb      	ldrb	r3, [r7, #23]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d10a      	bne.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8007b20:	4b99      	ldr	r3, [pc, #612]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b24:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007b2e:	4996      	ldr	r1, [pc, #600]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b30:	4313      	orrs	r3, r2
 8007b32:	658b      	str	r3, [r1, #88]	; 0x58
 8007b34:	e001      	b.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b36:	7dfb      	ldrb	r3, [r7, #23]
 8007b38:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d032      	beq.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b4a:	2b30      	cmp	r3, #48	; 0x30
 8007b4c:	d01c      	beq.n	8007b88 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007b4e:	2b30      	cmp	r3, #48	; 0x30
 8007b50:	d817      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007b52:	2b20      	cmp	r3, #32
 8007b54:	d00c      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x330>
 8007b56:	2b20      	cmp	r3, #32
 8007b58:	d813      	bhi.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d016      	beq.n	8007b8c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007b5e:	2b10      	cmp	r3, #16
 8007b60:	d10f      	bne.n	8007b82 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b62:	4b89      	ldr	r3, [pc, #548]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b66:	4a88      	ldr	r2, [pc, #544]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b6c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b6e:	e00e      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	3304      	adds	r3, #4
 8007b74:	2102      	movs	r1, #2
 8007b76:	4618      	mov	r0, r3
 8007b78:	f001 f866 	bl	8008c48 <RCCEx_PLL2_Config>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007b80:	e005      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007b82:	2301      	movs	r3, #1
 8007b84:	75fb      	strb	r3, [r7, #23]
      break;
 8007b86:	e002      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007b88:	bf00      	nop
 8007b8a:	e000      	b.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007b8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b8e:	7dfb      	ldrb	r3, [r7, #23]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d109      	bne.n	8007ba8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8007b94:	4b7c      	ldr	r3, [pc, #496]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b98:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ba0:	4979      	ldr	r1, [pc, #484]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007ba6:	e001      	b.n	8007bac <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ba8:	7dfb      	ldrb	r3, [r7, #23]
 8007baa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d047      	beq.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bbc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc0:	d030      	beq.n	8007c24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8007bc2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bc6:	d82a      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007bc8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bcc:	d02c      	beq.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8007bce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007bd2:	d824      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007bd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bd8:	d018      	beq.n	8007c0c <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8007bda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bde:	d81e      	bhi.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d003      	beq.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8007be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007be8:	d007      	beq.n	8007bfa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8007bea:	e018      	b.n	8007c1e <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007bec:	4b66      	ldr	r3, [pc, #408]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bf0:	4a65      	ldr	r2, [pc, #404]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007bf2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bf6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007bf8:	e017      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3304      	adds	r3, #4
 8007bfe:	2100      	movs	r1, #0
 8007c00:	4618      	mov	r0, r3
 8007c02:	f001 f821 	bl	8008c48 <RCCEx_PLL2_Config>
 8007c06:	4603      	mov	r3, r0
 8007c08:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c0a:	e00e      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	3324      	adds	r3, #36	; 0x24
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f001 f8ca 	bl	8008dac <RCCEx_PLL3_Config>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8007c1c:	e005      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	75fb      	strb	r3, [r7, #23]
      break;
 8007c22:	e002      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007c24:	bf00      	nop
 8007c26:	e000      	b.n	8007c2a <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007c28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c2a:	7dfb      	ldrb	r3, [r7, #23]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d109      	bne.n	8007c44 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007c30:	4b55      	ldr	r3, [pc, #340]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c34:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c3c:	4952      	ldr	r1, [pc, #328]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007c3e:	4313      	orrs	r3, r2
 8007c40:	650b      	str	r3, [r1, #80]	; 0x50
 8007c42:	e001      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c44:	7dfb      	ldrb	r3, [r7, #23]
 8007c46:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d049      	beq.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c5c:	d02e      	beq.n	8007cbc <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007c5e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007c62:	d828      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007c64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c68:	d02a      	beq.n	8007cc0 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007c6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007c6e:	d822      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007c70:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c74:	d026      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007c76:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007c7a:	d81c      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007c7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c80:	d010      	beq.n	8007ca4 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007c82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007c86:	d816      	bhi.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d01d      	beq.n	8007cc8 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c90:	d111      	bne.n	8007cb6 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	3304      	adds	r3, #4
 8007c96:	2101      	movs	r1, #1
 8007c98:	4618      	mov	r0, r3
 8007c9a:	f000 ffd5 	bl	8008c48 <RCCEx_PLL2_Config>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007ca2:	e012      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3324      	adds	r3, #36	; 0x24
 8007ca8:	2101      	movs	r1, #1
 8007caa:	4618      	mov	r0, r3
 8007cac:	f001 f87e 	bl	8008dac <RCCEx_PLL3_Config>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007cb4:	e009      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007cb6:	2301      	movs	r3, #1
 8007cb8:	75fb      	strb	r3, [r7, #23]
      break;
 8007cba:	e006      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007cbc:	bf00      	nop
 8007cbe:	e004      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007cc0:	bf00      	nop
 8007cc2:	e002      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007cc4:	bf00      	nop
 8007cc6:	e000      	b.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007cc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007cca:	7dfb      	ldrb	r3, [r7, #23]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d109      	bne.n	8007ce4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007cd0:	4b2d      	ldr	r3, [pc, #180]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cd4:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cdc:	492a      	ldr	r1, [pc, #168]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007cde:	4313      	orrs	r3, r2
 8007ce0:	650b      	str	r3, [r1, #80]	; 0x50
 8007ce2:	e001      	b.n	8007ce8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ce4:	7dfb      	ldrb	r3, [r7, #23]
 8007ce6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d04d      	beq.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007cfa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007cfe:	d02e      	beq.n	8007d5e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007d00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007d04:	d828      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d0a:	d02a      	beq.n	8007d62 <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d10:	d822      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007d12:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d16:	d026      	beq.n	8007d66 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007d18:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007d1c:	d81c      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007d1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d22:	d010      	beq.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007d24:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007d28:	d816      	bhi.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d01d      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007d2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d32:	d111      	bne.n	8007d58 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3304      	adds	r3, #4
 8007d38:	2101      	movs	r1, #1
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f000 ff84 	bl	8008c48 <RCCEx_PLL2_Config>
 8007d40:	4603      	mov	r3, r0
 8007d42:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d44:	e012      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	3324      	adds	r3, #36	; 0x24
 8007d4a:	2101      	movs	r1, #1
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f001 f82d 	bl	8008dac <RCCEx_PLL3_Config>
 8007d52:	4603      	mov	r3, r0
 8007d54:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007d56:	e009      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5c:	e006      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007d5e:	bf00      	nop
 8007d60:	e004      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007d62:	bf00      	nop
 8007d64:	e002      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007d66:	bf00      	nop
 8007d68:	e000      	b.n	8007d6c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007d6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d10c      	bne.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007d72:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d76:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007d80:	4901      	ldr	r1, [pc, #4]	; (8007d88 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007d82:	4313      	orrs	r3, r2
 8007d84:	658b      	str	r3, [r1, #88]	; 0x58
 8007d86:	e003      	b.n	8007d90 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007d88:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d02f      	beq.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007da0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007da4:	d00e      	beq.n	8007dc4 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007da6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007daa:	d814      	bhi.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d015      	beq.n	8007ddc <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007db0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007db4:	d10f      	bne.n	8007dd6 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007db6:	4baf      	ldr	r3, [pc, #700]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007db8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dba:	4aae      	ldr	r2, [pc, #696]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007dbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007dc0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007dc2:	e00c      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3304      	adds	r3, #4
 8007dc8:	2101      	movs	r1, #1
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f000 ff3c 	bl	8008c48 <RCCEx_PLL2_Config>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007dd4:	e003      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	75fb      	strb	r3, [r7, #23]
      break;
 8007dda:	e000      	b.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007ddc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007dde:	7dfb      	ldrb	r3, [r7, #23]
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d109      	bne.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007de4:	4ba3      	ldr	r3, [pc, #652]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007df0:	49a0      	ldr	r1, [pc, #640]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007df2:	4313      	orrs	r3, r2
 8007df4:	650b      	str	r3, [r1, #80]	; 0x50
 8007df6:	e001      	b.n	8007dfc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007df8:	7dfb      	ldrb	r3, [r7, #23]
 8007dfa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d032      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e0c:	2b03      	cmp	r3, #3
 8007e0e:	d81b      	bhi.n	8007e48 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007e10:	a201      	add	r2, pc, #4	; (adr r2, 8007e18 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e16:	bf00      	nop
 8007e18:	08007e4f 	.word	0x08007e4f
 8007e1c:	08007e29 	.word	0x08007e29
 8007e20:	08007e37 	.word	0x08007e37
 8007e24:	08007e4f 	.word	0x08007e4f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007e28:	4b92      	ldr	r3, [pc, #584]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2c:	4a91      	ldr	r2, [pc, #580]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e32:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e34:	e00c      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	2102      	movs	r1, #2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f000 ff03 	bl	8008c48 <RCCEx_PLL2_Config>
 8007e42:	4603      	mov	r3, r0
 8007e44:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007e46:	e003      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	75fb      	strb	r3, [r7, #23]
      break;
 8007e4c:	e000      	b.n	8007e50 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007e4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e50:	7dfb      	ldrb	r3, [r7, #23]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d109      	bne.n	8007e6a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007e56:	4b87      	ldr	r3, [pc, #540]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e5a:	f023 0203 	bic.w	r2, r3, #3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e62:	4984      	ldr	r1, [pc, #528]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007e64:	4313      	orrs	r3, r2
 8007e66:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007e68:	e001      	b.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e6a:	7dfb      	ldrb	r3, [r7, #23]
 8007e6c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	f000 8086 	beq.w	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007e7c:	4b7e      	ldr	r3, [pc, #504]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	4a7d      	ldr	r2, [pc, #500]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007e82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e88:	f7fb f99a 	bl	80031c0 <HAL_GetTick>
 8007e8c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e8e:	e009      	b.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e90:	f7fb f996 	bl	80031c0 <HAL_GetTick>
 8007e94:	4602      	mov	r2, r0
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	1ad3      	subs	r3, r2, r3
 8007e9a:	2b64      	cmp	r3, #100	; 0x64
 8007e9c:	d902      	bls.n	8007ea4 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007e9e:	2303      	movs	r3, #3
 8007ea0:	75fb      	strb	r3, [r7, #23]
        break;
 8007ea2:	e005      	b.n	8007eb0 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ea4:	4b74      	ldr	r3, [pc, #464]	; (8008078 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d0ef      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007eb0:	7dfb      	ldrb	r3, [r7, #23]
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	d166      	bne.n	8007f84 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007eb6:	4b6f      	ldr	r3, [pc, #444]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ec0:	4053      	eors	r3, r2
 8007ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d013      	beq.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007eca:	4b6a      	ldr	r3, [pc, #424]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ecc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ece:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ed2:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007ed4:	4b67      	ldr	r3, [pc, #412]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed8:	4a66      	ldr	r2, [pc, #408]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eda:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ede:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ee0:	4b64      	ldr	r3, [pc, #400]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee4:	4a63      	ldr	r2, [pc, #396]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007eea:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007eec:	4a61      	ldr	r2, [pc, #388]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007ef8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007efc:	d115      	bne.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007efe:	f7fb f95f 	bl	80031c0 <HAL_GetTick>
 8007f02:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f04:	e00b      	b.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f06:	f7fb f95b 	bl	80031c0 <HAL_GetTick>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	1ad3      	subs	r3, r2, r3
 8007f10:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d902      	bls.n	8007f1e <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007f18:	2303      	movs	r3, #3
 8007f1a:	75fb      	strb	r3, [r7, #23]
            break;
 8007f1c:	e005      	b.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f1e:	4b55      	ldr	r3, [pc, #340]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f22:	f003 0302 	and.w	r3, r3, #2
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d0ed      	beq.n	8007f06 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007f2a:	7dfb      	ldrb	r3, [r7, #23]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d126      	bne.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f3e:	d10d      	bne.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007f40:	4b4c      	ldr	r3, [pc, #304]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f4e:	0919      	lsrs	r1, r3, #4
 8007f50:	4b4a      	ldr	r3, [pc, #296]	; (800807c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007f52:	400b      	ands	r3, r1
 8007f54:	4947      	ldr	r1, [pc, #284]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	610b      	str	r3, [r1, #16]
 8007f5a:	e005      	b.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007f5c:	4b45      	ldr	r3, [pc, #276]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	4a44      	ldr	r2, [pc, #272]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f62:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007f66:	6113      	str	r3, [r2, #16]
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f6a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007f76:	493f      	ldr	r1, [pc, #252]	; (8008074 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	670b      	str	r3, [r1, #112]	; 0x70
 8007f7c:	e004      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007f7e:	7dfb      	ldrb	r3, [r7, #23]
 8007f80:	75bb      	strb	r3, [r7, #22]
 8007f82:	e001      	b.n	8007f88 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f84:	7dfb      	ldrb	r3, [r7, #23]
 8007f86:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f003 0301 	and.w	r3, r3, #1
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	f000 8085 	beq.w	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007f9a:	2b28      	cmp	r3, #40	; 0x28
 8007f9c:	d866      	bhi.n	800806c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007f9e:	a201      	add	r2, pc, #4	; (adr r2, 8007fa4 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007fa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa4:	08008081 	.word	0x08008081
 8007fa8:	0800806d 	.word	0x0800806d
 8007fac:	0800806d 	.word	0x0800806d
 8007fb0:	0800806d 	.word	0x0800806d
 8007fb4:	0800806d 	.word	0x0800806d
 8007fb8:	0800806d 	.word	0x0800806d
 8007fbc:	0800806d 	.word	0x0800806d
 8007fc0:	0800806d 	.word	0x0800806d
 8007fc4:	08008049 	.word	0x08008049
 8007fc8:	0800806d 	.word	0x0800806d
 8007fcc:	0800806d 	.word	0x0800806d
 8007fd0:	0800806d 	.word	0x0800806d
 8007fd4:	0800806d 	.word	0x0800806d
 8007fd8:	0800806d 	.word	0x0800806d
 8007fdc:	0800806d 	.word	0x0800806d
 8007fe0:	0800806d 	.word	0x0800806d
 8007fe4:	0800805b 	.word	0x0800805b
 8007fe8:	0800806d 	.word	0x0800806d
 8007fec:	0800806d 	.word	0x0800806d
 8007ff0:	0800806d 	.word	0x0800806d
 8007ff4:	0800806d 	.word	0x0800806d
 8007ff8:	0800806d 	.word	0x0800806d
 8007ffc:	0800806d 	.word	0x0800806d
 8008000:	0800806d 	.word	0x0800806d
 8008004:	08008081 	.word	0x08008081
 8008008:	0800806d 	.word	0x0800806d
 800800c:	0800806d 	.word	0x0800806d
 8008010:	0800806d 	.word	0x0800806d
 8008014:	0800806d 	.word	0x0800806d
 8008018:	0800806d 	.word	0x0800806d
 800801c:	0800806d 	.word	0x0800806d
 8008020:	0800806d 	.word	0x0800806d
 8008024:	08008081 	.word	0x08008081
 8008028:	0800806d 	.word	0x0800806d
 800802c:	0800806d 	.word	0x0800806d
 8008030:	0800806d 	.word	0x0800806d
 8008034:	0800806d 	.word	0x0800806d
 8008038:	0800806d 	.word	0x0800806d
 800803c:	0800806d 	.word	0x0800806d
 8008040:	0800806d 	.word	0x0800806d
 8008044:	08008081 	.word	0x08008081
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	3304      	adds	r3, #4
 800804c:	2101      	movs	r1, #1
 800804e:	4618      	mov	r0, r3
 8008050:	f000 fdfa 	bl	8008c48 <RCCEx_PLL2_Config>
 8008054:	4603      	mov	r3, r0
 8008056:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8008058:	e013      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	3324      	adds	r3, #36	; 0x24
 800805e:	2101      	movs	r1, #1
 8008060:	4618      	mov	r0, r3
 8008062:	f000 fea3 	bl	8008dac <RCCEx_PLL3_Config>
 8008066:	4603      	mov	r3, r0
 8008068:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800806a:	e00a      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800806c:	2301      	movs	r3, #1
 800806e:	75fb      	strb	r3, [r7, #23]
      break;
 8008070:	e007      	b.n	8008082 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8008072:	bf00      	nop
 8008074:	58024400 	.word	0x58024400
 8008078:	58024800 	.word	0x58024800
 800807c:	00ffffcf 	.word	0x00ffffcf
      break;
 8008080:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008082:	7dfb      	ldrb	r3, [r7, #23]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d109      	bne.n	800809c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8008088:	4b96      	ldr	r3, [pc, #600]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800808a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800808c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008094:	4993      	ldr	r1, [pc, #588]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008096:	4313      	orrs	r3, r2
 8008098:	654b      	str	r3, [r1, #84]	; 0x54
 800809a:	e001      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800809c:	7dfb      	ldrb	r3, [r7, #23]
 800809e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	f003 0302 	and.w	r3, r3, #2
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d038      	beq.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80080b0:	2b05      	cmp	r3, #5
 80080b2:	d821      	bhi.n	80080f8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 80080b4:	a201      	add	r2, pc, #4	; (adr r2, 80080bc <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 80080b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ba:	bf00      	nop
 80080bc:	080080ff 	.word	0x080080ff
 80080c0:	080080d5 	.word	0x080080d5
 80080c4:	080080e7 	.word	0x080080e7
 80080c8:	080080ff 	.word	0x080080ff
 80080cc:	080080ff 	.word	0x080080ff
 80080d0:	080080ff 	.word	0x080080ff
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3304      	adds	r3, #4
 80080d8:	2101      	movs	r1, #1
 80080da:	4618      	mov	r0, r3
 80080dc:	f000 fdb4 	bl	8008c48 <RCCEx_PLL2_Config>
 80080e0:	4603      	mov	r3, r0
 80080e2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80080e4:	e00c      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	3324      	adds	r3, #36	; 0x24
 80080ea:	2101      	movs	r1, #1
 80080ec:	4618      	mov	r0, r3
 80080ee:	f000 fe5d 	bl	8008dac <RCCEx_PLL3_Config>
 80080f2:	4603      	mov	r3, r0
 80080f4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80080f6:	e003      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80080f8:	2301      	movs	r3, #1
 80080fa:	75fb      	strb	r3, [r7, #23]
      break;
 80080fc:	e000      	b.n	8008100 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80080fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008100:	7dfb      	ldrb	r3, [r7, #23]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d109      	bne.n	800811a <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8008106:	4b77      	ldr	r3, [pc, #476]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800810a:	f023 0207 	bic.w	r2, r3, #7
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008112:	4974      	ldr	r1, [pc, #464]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008114:	4313      	orrs	r3, r2
 8008116:	654b      	str	r3, [r1, #84]	; 0x54
 8008118:	e001      	b.n	800811e <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800811a:	7dfb      	ldrb	r3, [r7, #23]
 800811c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f003 0304 	and.w	r3, r3, #4
 8008126:	2b00      	cmp	r3, #0
 8008128:	d03a      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008130:	2b05      	cmp	r3, #5
 8008132:	d821      	bhi.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	0800817f 	.word	0x0800817f
 8008140:	08008155 	.word	0x08008155
 8008144:	08008167 	.word	0x08008167
 8008148:	0800817f 	.word	0x0800817f
 800814c:	0800817f 	.word	0x0800817f
 8008150:	0800817f 	.word	0x0800817f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	3304      	adds	r3, #4
 8008158:	2101      	movs	r1, #1
 800815a:	4618      	mov	r0, r3
 800815c:	f000 fd74 	bl	8008c48 <RCCEx_PLL2_Config>
 8008160:	4603      	mov	r3, r0
 8008162:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008164:	e00c      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3324      	adds	r3, #36	; 0x24
 800816a:	2101      	movs	r1, #1
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fe1d 	bl	8008dac <RCCEx_PLL3_Config>
 8008172:	4603      	mov	r3, r0
 8008174:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8008176:	e003      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008178:	2301      	movs	r3, #1
 800817a:	75fb      	strb	r3, [r7, #23]
      break;
 800817c:	e000      	b.n	8008180 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800817e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008180:	7dfb      	ldrb	r3, [r7, #23]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d10a      	bne.n	800819c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008186:	4b57      	ldr	r3, [pc, #348]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800818a:	f023 0207 	bic.w	r2, r3, #7
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008194:	4953      	ldr	r1, [pc, #332]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008196:	4313      	orrs	r3, r2
 8008198:	658b      	str	r3, [r1, #88]	; 0x58
 800819a:	e001      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800819c:	7dfb      	ldrb	r3, [r7, #23]
 800819e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	f003 0320 	and.w	r3, r3, #32
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d04b      	beq.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081b6:	d02e      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 80081b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80081bc:	d828      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80081be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c2:	d02a      	beq.n	800821a <HAL_RCCEx_PeriphCLKConfig+0x9da>
 80081c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c8:	d822      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80081ca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081ce:	d026      	beq.n	800821e <HAL_RCCEx_PeriphCLKConfig+0x9de>
 80081d0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80081d4:	d81c      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80081d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081da:	d010      	beq.n	80081fe <HAL_RCCEx_PeriphCLKConfig+0x9be>
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e0:	d816      	bhi.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d01d      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80081e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80081ea:	d111      	bne.n	8008210 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	3304      	adds	r3, #4
 80081f0:	2100      	movs	r1, #0
 80081f2:	4618      	mov	r0, r3
 80081f4:	f000 fd28 	bl	8008c48 <RCCEx_PLL2_Config>
 80081f8:	4603      	mov	r3, r0
 80081fa:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80081fc:	e012      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	3324      	adds	r3, #36	; 0x24
 8008202:	2102      	movs	r1, #2
 8008204:	4618      	mov	r0, r3
 8008206:	f000 fdd1 	bl	8008dac <RCCEx_PLL3_Config>
 800820a:	4603      	mov	r3, r0
 800820c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800820e:	e009      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	75fb      	strb	r3, [r7, #23]
      break;
 8008214:	e006      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008216:	bf00      	nop
 8008218:	e004      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800821a:	bf00      	nop
 800821c:	e002      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800821e:	bf00      	nop
 8008220:	e000      	b.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8008222:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008224:	7dfb      	ldrb	r3, [r7, #23]
 8008226:	2b00      	cmp	r3, #0
 8008228:	d10a      	bne.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800822c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800822e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008238:	492a      	ldr	r1, [pc, #168]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800823a:	4313      	orrs	r3, r2
 800823c:	654b      	str	r3, [r1, #84]	; 0x54
 800823e:	e001      	b.n	8008244 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008240:	7dfb      	ldrb	r3, [r7, #23]
 8008242:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800824c:	2b00      	cmp	r3, #0
 800824e:	d04d      	beq.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008256:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800825a:	d02e      	beq.n	80082ba <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800825c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008260:	d828      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008262:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008266:	d02a      	beq.n	80082be <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008268:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800826c:	d822      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800826e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008272:	d026      	beq.n	80082c2 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8008274:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008278:	d81c      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800827a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800827e:	d010      	beq.n	80082a2 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008280:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008284:	d816      	bhi.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008286:	2b00      	cmp	r3, #0
 8008288:	d01d      	beq.n	80082c6 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800828a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800828e:	d111      	bne.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	3304      	adds	r3, #4
 8008294:	2100      	movs	r1, #0
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fcd6 	bl	8008c48 <RCCEx_PLL2_Config>
 800829c:	4603      	mov	r3, r0
 800829e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80082a0:	e012      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	3324      	adds	r3, #36	; 0x24
 80082a6:	2102      	movs	r1, #2
 80082a8:	4618      	mov	r0, r3
 80082aa:	f000 fd7f 	bl	8008dac <RCCEx_PLL3_Config>
 80082ae:	4603      	mov	r3, r0
 80082b0:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 80082b2:	e009      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082b4:	2301      	movs	r3, #1
 80082b6:	75fb      	strb	r3, [r7, #23]
      break;
 80082b8:	e006      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80082ba:	bf00      	nop
 80082bc:	e004      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80082be:	bf00      	nop
 80082c0:	e002      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80082c2:	bf00      	nop
 80082c4:	e000      	b.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 80082c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082c8:	7dfb      	ldrb	r3, [r7, #23]
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d10c      	bne.n	80082e8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80082ce:	4b05      	ldr	r3, [pc, #20]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80082d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80082dc:	4901      	ldr	r1, [pc, #4]	; (80082e4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80082de:	4313      	orrs	r3, r2
 80082e0:	658b      	str	r3, [r1, #88]	; 0x58
 80082e2:	e003      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80082e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082e8:	7dfb      	ldrb	r3, [r7, #23]
 80082ea:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d04b      	beq.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80082fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008302:	d02e      	beq.n	8008362 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8008304:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8008308:	d828      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800830a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800830e:	d02a      	beq.n	8008366 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8008310:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008314:	d822      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008316:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800831a:	d026      	beq.n	800836a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800831c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8008320:	d81c      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008322:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008326:	d010      	beq.n	800834a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800832c:	d816      	bhi.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800832e:	2b00      	cmp	r3, #0
 8008330:	d01d      	beq.n	800836e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 8008332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008336:	d111      	bne.n	800835c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	3304      	adds	r3, #4
 800833c:	2100      	movs	r1, #0
 800833e:	4618      	mov	r0, r3
 8008340:	f000 fc82 	bl	8008c48 <RCCEx_PLL2_Config>
 8008344:	4603      	mov	r3, r0
 8008346:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008348:	e012      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	3324      	adds	r3, #36	; 0x24
 800834e:	2102      	movs	r1, #2
 8008350:	4618      	mov	r0, r3
 8008352:	f000 fd2b 	bl	8008dac <RCCEx_PLL3_Config>
 8008356:	4603      	mov	r3, r0
 8008358:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800835a:	e009      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	75fb      	strb	r3, [r7, #23]
      break;
 8008360:	e006      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008362:	bf00      	nop
 8008364:	e004      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008366:	bf00      	nop
 8008368:	e002      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800836a:	bf00      	nop
 800836c:	e000      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800836e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008370:	7dfb      	ldrb	r3, [r7, #23]
 8008372:	2b00      	cmp	r3, #0
 8008374:	d10a      	bne.n	800838c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8008376:	4b9d      	ldr	r3, [pc, #628]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008378:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800837a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008384:	4999      	ldr	r1, [pc, #612]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008386:	4313      	orrs	r3, r2
 8008388:	658b      	str	r3, [r1, #88]	; 0x58
 800838a:	e001      	b.n	8008390 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800838c:	7dfb      	ldrb	r3, [r7, #23]
 800838e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f003 0308 	and.w	r3, r3, #8
 8008398:	2b00      	cmp	r3, #0
 800839a:	d01a      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a6:	d10a      	bne.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	3324      	adds	r3, #36	; 0x24
 80083ac:	2102      	movs	r1, #2
 80083ae:	4618      	mov	r0, r3
 80083b0:	f000 fcfc 	bl	8008dac <RCCEx_PLL3_Config>
 80083b4:	4603      	mov	r3, r0
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80083ba:	2301      	movs	r3, #1
 80083bc:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80083be:	4b8b      	ldr	r3, [pc, #556]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083cc:	4987      	ldr	r1, [pc, #540]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083ce:	4313      	orrs	r3, r2
 80083d0:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f003 0310 	and.w	r3, r3, #16
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d01a      	beq.n	8008414 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80083e8:	d10a      	bne.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	3324      	adds	r3, #36	; 0x24
 80083ee:	2102      	movs	r1, #2
 80083f0:	4618      	mov	r0, r3
 80083f2:	f000 fcdb 	bl	8008dac <RCCEx_PLL3_Config>
 80083f6:	4603      	mov	r3, r0
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d001      	beq.n	8008400 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80083fc:	2301      	movs	r3, #1
 80083fe:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008400:	4b7a      	ldr	r3, [pc, #488]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008404:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800840e:	4977      	ldr	r1, [pc, #476]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008410:	4313      	orrs	r3, r2
 8008412:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800841c:	2b00      	cmp	r3, #0
 800841e:	d034      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008426:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800842a:	d01d      	beq.n	8008468 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800842c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008430:	d817      	bhi.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 8008432:	2b00      	cmp	r3, #0
 8008434:	d003      	beq.n	800843e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8008436:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800843a:	d009      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800843c:	e011      	b.n	8008462 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	3304      	adds	r3, #4
 8008442:	2100      	movs	r1, #0
 8008444:	4618      	mov	r0, r3
 8008446:	f000 fbff 	bl	8008c48 <RCCEx_PLL2_Config>
 800844a:	4603      	mov	r3, r0
 800844c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800844e:	e00c      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	3324      	adds	r3, #36	; 0x24
 8008454:	2102      	movs	r1, #2
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fca8 	bl	8008dac <RCCEx_PLL3_Config>
 800845c:	4603      	mov	r3, r0
 800845e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008460:	e003      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008462:	2301      	movs	r3, #1
 8008464:	75fb      	strb	r3, [r7, #23]
      break;
 8008466:	e000      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008468:	bf00      	nop
    }

    if(ret == HAL_OK)
 800846a:	7dfb      	ldrb	r3, [r7, #23]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d10a      	bne.n	8008486 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008470:	4b5e      	ldr	r3, [pc, #376]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008472:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800847e:	495b      	ldr	r1, [pc, #364]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008480:	4313      	orrs	r3, r2
 8008482:	658b      	str	r3, [r1, #88]	; 0x58
 8008484:	e001      	b.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008486:	7dfb      	ldrb	r3, [r7, #23]
 8008488:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008492:	2b00      	cmp	r3, #0
 8008494:	d033      	beq.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800849c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084a0:	d01c      	beq.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 80084a2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80084a6:	d816      	bhi.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 80084a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084ac:	d003      	beq.n	80084b6 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 80084ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80084b2:	d007      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80084b4:	e00f      	b.n	80084d6 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80084b6:	4b4d      	ldr	r3, [pc, #308]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ba:	4a4c      	ldr	r2, [pc, #304]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084c0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80084c2:	e00c      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	3324      	adds	r3, #36	; 0x24
 80084c8:	2101      	movs	r1, #1
 80084ca:	4618      	mov	r0, r3
 80084cc:	f000 fc6e 	bl	8008dac <RCCEx_PLL3_Config>
 80084d0:	4603      	mov	r3, r0
 80084d2:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80084d4:	e003      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	75fb      	strb	r3, [r7, #23]
      break;
 80084da:	e000      	b.n	80084de <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80084dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80084de:	7dfb      	ldrb	r3, [r7, #23]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d10a      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80084e4:	4b41      	ldr	r3, [pc, #260]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084f2:	493e      	ldr	r1, [pc, #248]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	654b      	str	r3, [r1, #84]	; 0x54
 80084f8:	e001      	b.n	80084fe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008506:	2b00      	cmp	r3, #0
 8008508:	d029      	beq.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800850e:	2b00      	cmp	r3, #0
 8008510:	d003      	beq.n	800851a <HAL_RCCEx_PeriphCLKConfig+0xcda>
 8008512:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008516:	d007      	beq.n	8008528 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8008518:	e00f      	b.n	800853a <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800851a:	4b34      	ldr	r3, [pc, #208]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800851c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800851e:	4a33      	ldr	r2, [pc, #204]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008524:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008526:	e00b      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	3304      	adds	r3, #4
 800852c:	2102      	movs	r1, #2
 800852e:	4618      	mov	r0, r3
 8008530:	f000 fb8a 	bl	8008c48 <RCCEx_PLL2_Config>
 8008534:	4603      	mov	r3, r0
 8008536:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008538:	e002      	b.n	8008540 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800853a:	2301      	movs	r3, #1
 800853c:	75fb      	strb	r3, [r7, #23]
      break;
 800853e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008540:	7dfb      	ldrb	r3, [r7, #23]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d109      	bne.n	800855a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8008546:	4b29      	ldr	r3, [pc, #164]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008548:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800854a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008552:	4926      	ldr	r1, [pc, #152]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008554:	4313      	orrs	r3, r2
 8008556:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008558:	e001      	b.n	800855e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800855a:	7dfb      	ldrb	r3, [r7, #23]
 800855c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00a      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	3324      	adds	r3, #36	; 0x24
 800856e:	2102      	movs	r1, #2
 8008570:	4618      	mov	r0, r3
 8008572:	f000 fc1b 	bl	8008dac <RCCEx_PLL3_Config>
 8008576:	4603      	mov	r3, r0
 8008578:	2b00      	cmp	r3, #0
 800857a:	d001      	beq.n	8008580 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800857c:	2301      	movs	r3, #1
 800857e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008588:	2b00      	cmp	r3, #0
 800858a:	d033      	beq.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008594:	d017      	beq.n	80085c6 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8008596:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800859a:	d811      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800859c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a0:	d013      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 80085a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a6:	d80b      	bhi.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d010      	beq.n	80085ce <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 80085ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085b0:	d106      	bne.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80085b2:	4b0e      	ldr	r3, [pc, #56]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b6:	4a0d      	ldr	r2, [pc, #52]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80085bc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80085be:	e007      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085c0:	2301      	movs	r3, #1
 80085c2:	75fb      	strb	r3, [r7, #23]
      break;
 80085c4:	e004      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80085c6:	bf00      	nop
 80085c8:	e002      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80085ca:	bf00      	nop
 80085cc:	e000      	b.n	80085d0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80085ce:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085d0:	7dfb      	ldrb	r3, [r7, #23]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10c      	bne.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80085d6:	4b05      	ldr	r3, [pc, #20]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085da:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80085e2:	4902      	ldr	r1, [pc, #8]	; (80085ec <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80085e4:	4313      	orrs	r3, r2
 80085e6:	654b      	str	r3, [r1, #84]	; 0x54
 80085e8:	e004      	b.n	80085f4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80085ea:	bf00      	nop
 80085ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085f0:	7dfb      	ldrb	r3, [r7, #23]
 80085f2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d008      	beq.n	8008612 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008600:	4b31      	ldr	r3, [pc, #196]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008604:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800860c:	492e      	ldr	r1, [pc, #184]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800860e:	4313      	orrs	r3, r2
 8008610:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d009      	beq.n	8008632 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800861e:	4b2a      	ldr	r3, [pc, #168]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008620:	691b      	ldr	r3, [r3, #16]
 8008622:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800862c:	4926      	ldr	r1, [pc, #152]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800862e:	4313      	orrs	r3, r2
 8008630:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800863e:	4b22      	ldr	r3, [pc, #136]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008642:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800864a:	491f      	ldr	r1, [pc, #124]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800864c:	4313      	orrs	r3, r2
 800864e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008658:	2b00      	cmp	r3, #0
 800865a:	d00d      	beq.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800865c:	4b1a      	ldr	r3, [pc, #104]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800865e:	691b      	ldr	r3, [r3, #16]
 8008660:	4a19      	ldr	r2, [pc, #100]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008662:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008666:	6113      	str	r3, [r2, #16]
 8008668:	4b17      	ldr	r3, [pc, #92]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800866a:	691a      	ldr	r2, [r3, #16]
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8008672:	4915      	ldr	r1, [pc, #84]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008674:	4313      	orrs	r3, r2
 8008676:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b00      	cmp	r3, #0
 800867e:	da08      	bge.n	8008692 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008680:	4b11      	ldr	r3, [pc, #68]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008684:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800868c:	490e      	ldr	r1, [pc, #56]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800868e:	4313      	orrs	r3, r2
 8008690:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800869a:	2b00      	cmp	r3, #0
 800869c:	d009      	beq.n	80086b2 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800869e:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ac:	4906      	ldr	r1, [pc, #24]	; (80086c8 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80086ae:	4313      	orrs	r3, r2
 80086b0:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 80086b2:	7dbb      	ldrb	r3, [r7, #22]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80086b8:	2300      	movs	r3, #0
 80086ba:	e000      	b.n	80086be <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80086bc:	2301      	movs	r3, #1
}
 80086be:	4618      	mov	r0, r3
 80086c0:	3718      	adds	r7, #24
 80086c2:	46bd      	mov	sp, r7
 80086c4:	bd80      	pop	{r7, pc}
 80086c6:	bf00      	nop
 80086c8:	58024400 	.word	0x58024400

080086cc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80086cc:	b580      	push	{r7, lr}
 80086ce:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80086d0:	f7ff f85a 	bl	8007788 <HAL_RCC_GetHCLKFreq>
 80086d4:	4602      	mov	r2, r0
 80086d6:	4b06      	ldr	r3, [pc, #24]	; (80086f0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80086d8:	6a1b      	ldr	r3, [r3, #32]
 80086da:	091b      	lsrs	r3, r3, #4
 80086dc:	f003 0307 	and.w	r3, r3, #7
 80086e0:	4904      	ldr	r1, [pc, #16]	; (80086f4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80086e2:	5ccb      	ldrb	r3, [r1, r3]
 80086e4:	f003 031f 	and.w	r3, r3, #31
 80086e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	bd80      	pop	{r7, pc}
 80086f0:	58024400 	.word	0x58024400
 80086f4:	0800c110 	.word	0x0800c110

080086f8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80086f8:	b480      	push	{r7}
 80086fa:	b089      	sub	sp, #36	; 0x24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008700:	4ba1      	ldr	r3, [pc, #644]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008704:	f003 0303 	and.w	r3, r3, #3
 8008708:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800870a:	4b9f      	ldr	r3, [pc, #636]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800870c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800870e:	0b1b      	lsrs	r3, r3, #12
 8008710:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008714:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8008716:	4b9c      	ldr	r3, [pc, #624]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800871a:	091b      	lsrs	r3, r3, #4
 800871c:	f003 0301 	and.w	r3, r3, #1
 8008720:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8008722:	4b99      	ldr	r3, [pc, #612]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008724:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008726:	08db      	lsrs	r3, r3, #3
 8008728:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800872c:	693a      	ldr	r2, [r7, #16]
 800872e:	fb02 f303 	mul.w	r3, r2, r3
 8008732:	ee07 3a90 	vmov	s15, r3
 8008736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800873a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	f000 8111 	beq.w	8008968 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	2b02      	cmp	r3, #2
 800874a:	f000 8083 	beq.w	8008854 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	2b02      	cmp	r3, #2
 8008752:	f200 80a1 	bhi.w	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8008756:	69bb      	ldr	r3, [r7, #24]
 8008758:	2b00      	cmp	r3, #0
 800875a:	d003      	beq.n	8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800875c:	69bb      	ldr	r3, [r7, #24]
 800875e:	2b01      	cmp	r3, #1
 8008760:	d056      	beq.n	8008810 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8008762:	e099      	b.n	8008898 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008764:	4b88      	ldr	r3, [pc, #544]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d02d      	beq.n	80087cc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008770:	4b85      	ldr	r3, [pc, #532]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	08db      	lsrs	r3, r3, #3
 8008776:	f003 0303 	and.w	r3, r3, #3
 800877a:	4a84      	ldr	r2, [pc, #528]	; (800898c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800877c:	fa22 f303 	lsr.w	r3, r2, r3
 8008780:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008782:	68bb      	ldr	r3, [r7, #8]
 8008784:	ee07 3a90 	vmov	s15, r3
 8008788:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	ee07 3a90 	vmov	s15, r3
 8008792:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800879a:	4b7b      	ldr	r3, [pc, #492]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087a2:	ee07 3a90 	vmov	s15, r3
 80087a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087aa:	ed97 6a03 	vldr	s12, [r7, #12]
 80087ae:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087c6:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80087ca:	e087      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80087cc:	697b      	ldr	r3, [r7, #20]
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008994 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80087da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087de:	4b6a      	ldr	r3, [pc, #424]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80087e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087e6:	ee07 3a90 	vmov	s15, r3
 80087ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087ee:	ed97 6a03 	vldr	s12, [r7, #12]
 80087f2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80087f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800880a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800880e:	e065      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008810:	697b      	ldr	r3, [r7, #20]
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800881a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800881e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008822:	4b59      	ldr	r3, [pc, #356]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008826:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800882a:	ee07 3a90 	vmov	s15, r3
 800882e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008832:	ed97 6a03 	vldr	s12, [r7, #12]
 8008836:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800883a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800883e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008842:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008846:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800884a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800884e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008852:	e043      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800885e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800899c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8008862:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008866:	4b48      	ldr	r3, [pc, #288]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800886a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800886e:	ee07 3a90 	vmov	s15, r3
 8008872:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008876:	ed97 6a03 	vldr	s12, [r7, #12]
 800887a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800887e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008882:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008886:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800888a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800888e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008892:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008896:	e021      	b.n	80088dc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008898:	697b      	ldr	r3, [r7, #20]
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088a2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008998 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80088a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088aa:	4b37      	ldr	r3, [pc, #220]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088b2:	ee07 3a90 	vmov	s15, r3
 80088b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088ba:	ed97 6a03 	vldr	s12, [r7, #12]
 80088be:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008990 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80088c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088d6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088da:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80088dc:	4b2a      	ldr	r3, [pc, #168]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	0a5b      	lsrs	r3, r3, #9
 80088e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088e6:	ee07 3a90 	vmov	s15, r3
 80088ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80088f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80088f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80088fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008902:	ee17 2a90 	vmov	r2, s15
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800890a:	4b1f      	ldr	r3, [pc, #124]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	0c1b      	lsrs	r3, r3, #16
 8008910:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008914:	ee07 3a90 	vmov	s15, r3
 8008918:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800891c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008920:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008924:	edd7 6a07 	vldr	s13, [r7, #28]
 8008928:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800892c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008930:	ee17 2a90 	vmov	r2, s15
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008938:	4b13      	ldr	r3, [pc, #76]	; (8008988 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800893a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800893c:	0e1b      	lsrs	r3, r3, #24
 800893e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008942:	ee07 3a90 	vmov	s15, r3
 8008946:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800894a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800894e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008952:	edd7 6a07 	vldr	s13, [r7, #28]
 8008956:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800895a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800895e:	ee17 2a90 	vmov	r2, s15
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008966:	e008      	b.n	800897a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2200      	movs	r2, #0
 800896c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	2200      	movs	r2, #0
 8008972:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2200      	movs	r2, #0
 8008978:	609a      	str	r2, [r3, #8]
}
 800897a:	bf00      	nop
 800897c:	3724      	adds	r7, #36	; 0x24
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	58024400 	.word	0x58024400
 800898c:	03d09000 	.word	0x03d09000
 8008990:	46000000 	.word	0x46000000
 8008994:	4c742400 	.word	0x4c742400
 8008998:	4a742400 	.word	0x4a742400
 800899c:	4af42400 	.word	0x4af42400

080089a0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 80089a0:	b480      	push	{r7}
 80089a2:	b089      	sub	sp, #36	; 0x24
 80089a4:	af00      	add	r7, sp, #0
 80089a6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80089a8:	4ba1      	ldr	r3, [pc, #644]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089ac:	f003 0303 	and.w	r3, r3, #3
 80089b0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 80089b2:	4b9f      	ldr	r3, [pc, #636]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089b6:	0d1b      	lsrs	r3, r3, #20
 80089b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80089bc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80089be:	4b9c      	ldr	r3, [pc, #624]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c2:	0a1b      	lsrs	r3, r3, #8
 80089c4:	f003 0301 	and.w	r3, r3, #1
 80089c8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80089ca:	4b99      	ldr	r3, [pc, #612]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80089ce:	08db      	lsrs	r3, r3, #3
 80089d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	fb02 f303 	mul.w	r3, r2, r3
 80089da:	ee07 3a90 	vmov	s15, r3
 80089de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089e2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80089e6:	697b      	ldr	r3, [r7, #20]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	f000 8111 	beq.w	8008c10 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80089ee:	69bb      	ldr	r3, [r7, #24]
 80089f0:	2b02      	cmp	r3, #2
 80089f2:	f000 8083 	beq.w	8008afc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	2b02      	cmp	r3, #2
 80089fa:	f200 80a1 	bhi.w	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80089fe:	69bb      	ldr	r3, [r7, #24]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d003      	beq.n	8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	2b01      	cmp	r3, #1
 8008a08:	d056      	beq.n	8008ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8008a0a:	e099      	b.n	8008b40 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008a0c:	4b88      	ldr	r3, [pc, #544]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f003 0320 	and.w	r3, r3, #32
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d02d      	beq.n	8008a74 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008a18:	4b85      	ldr	r3, [pc, #532]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	08db      	lsrs	r3, r3, #3
 8008a1e:	f003 0303 	and.w	r3, r3, #3
 8008a22:	4a84      	ldr	r2, [pc, #528]	; (8008c34 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8008a24:	fa22 f303 	lsr.w	r3, r2, r3
 8008a28:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	ee07 3a90 	vmov	s15, r3
 8008a30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	ee07 3a90 	vmov	s15, r3
 8008a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a42:	4b7b      	ldr	r3, [pc, #492]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a4a:	ee07 3a90 	vmov	s15, r3
 8008a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a56:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008a62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008a6e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8008a72:	e087      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008a74:	697b      	ldr	r3, [r7, #20]
 8008a76:	ee07 3a90 	vmov	s15, r3
 8008a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008a7e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008c3c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8008a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008a86:	4b6a      	ldr	r3, [pc, #424]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a8e:	ee07 3a90 	vmov	s15, r3
 8008a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8008a9a:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008ab2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008ab6:	e065      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	ee07 3a90 	vmov	s15, r3
 8008abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ac2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008aca:	4b59      	ldr	r3, [pc, #356]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ad2:	ee07 3a90 	vmov	s15, r3
 8008ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8008ade:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008aea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008af6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008afa:	e043      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008afc:	697b      	ldr	r3, [r7, #20]
 8008afe:	ee07 3a90 	vmov	s15, r3
 8008b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b06:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008c44 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8008b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b0e:	4b48      	ldr	r3, [pc, #288]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b16:	ee07 3a90 	vmov	s15, r3
 8008b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b22:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b3e:	e021      	b.n	8008b84 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008b40:	697b      	ldr	r3, [r7, #20]
 8008b42:	ee07 3a90 	vmov	s15, r3
 8008b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008c40 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b52:	4b37      	ldr	r3, [pc, #220]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b5a:	ee07 3a90 	vmov	s15, r3
 8008b5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b62:	ed97 6a03 	vldr	s12, [r7, #12]
 8008b66:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008c38 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008b6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b72:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b7e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008b82:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8008b84:	4b2a      	ldr	r3, [pc, #168]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b88:	0a5b      	lsrs	r3, r3, #9
 8008b8a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008b8e:	ee07 3a90 	vmov	s15, r3
 8008b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008b9a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008b9e:	edd7 6a07 	vldr	s13, [r7, #28]
 8008ba2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ba6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008baa:	ee17 2a90 	vmov	r2, s15
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8008bb2:	4b1f      	ldr	r3, [pc, #124]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bb6:	0c1b      	lsrs	r3, r3, #16
 8008bb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bbc:	ee07 3a90 	vmov	s15, r3
 8008bc0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bc4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bc8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bcc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008bd4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008bd8:	ee17 2a90 	vmov	r2, s15
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8008be0:	4b13      	ldr	r3, [pc, #76]	; (8008c30 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be4:	0e1b      	lsrs	r3, r3, #24
 8008be6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008bea:	ee07 3a90 	vmov	s15, r3
 8008bee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008bf2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008bf6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008bfa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008bfe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c06:	ee17 2a90 	vmov	r2, s15
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8008c0e:	e008      	b.n	8008c22 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2200      	movs	r2, #0
 8008c14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	609a      	str	r2, [r3, #8]
}
 8008c22:	bf00      	nop
 8008c24:	3724      	adds	r7, #36	; 0x24
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	58024400 	.word	0x58024400
 8008c34:	03d09000 	.word	0x03d09000
 8008c38:	46000000 	.word	0x46000000
 8008c3c:	4c742400 	.word	0x4c742400
 8008c40:	4a742400 	.word	0x4a742400
 8008c44:	4af42400 	.word	0x4af42400

08008c48 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008c52:	2300      	movs	r3, #0
 8008c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008c56:	4b53      	ldr	r3, [pc, #332]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	2b03      	cmp	r3, #3
 8008c60:	d101      	bne.n	8008c66 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008c62:	2301      	movs	r3, #1
 8008c64:	e099      	b.n	8008d9a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008c66:	4b4f      	ldr	r3, [pc, #316]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a4e      	ldr	r2, [pc, #312]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008c6c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008c72:	f7fa faa5 	bl	80031c0 <HAL_GetTick>
 8008c76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c78:	e008      	b.n	8008c8c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008c7a:	f7fa faa1 	bl	80031c0 <HAL_GetTick>
 8008c7e:	4602      	mov	r2, r0
 8008c80:	68bb      	ldr	r3, [r7, #8]
 8008c82:	1ad3      	subs	r3, r2, r3
 8008c84:	2b02      	cmp	r3, #2
 8008c86:	d901      	bls.n	8008c8c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008c88:	2303      	movs	r3, #3
 8008c8a:	e086      	b.n	8008d9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008c8c:	4b45      	ldr	r3, [pc, #276]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d1f0      	bne.n	8008c7a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008c98:	4b42      	ldr	r3, [pc, #264]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c9c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	031b      	lsls	r3, r3, #12
 8008ca6:	493f      	ldr	r1, [pc, #252]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	628b      	str	r3, [r1, #40]	; 0x28
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	3b01      	subs	r3, #1
 8008cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	689b      	ldr	r3, [r3, #8]
 8008cba:	3b01      	subs	r3, #1
 8008cbc:	025b      	lsls	r3, r3, #9
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	431a      	orrs	r2, r3
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	68db      	ldr	r3, [r3, #12]
 8008cc6:	3b01      	subs	r3, #1
 8008cc8:	041b      	lsls	r3, r3, #16
 8008cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008cce:	431a      	orrs	r2, r3
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	691b      	ldr	r3, [r3, #16]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	061b      	lsls	r3, r3, #24
 8008cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008cdc:	4931      	ldr	r1, [pc, #196]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008ce2:	4b30      	ldr	r3, [pc, #192]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	695b      	ldr	r3, [r3, #20]
 8008cee:	492d      	ldr	r1, [pc, #180]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008cf0:	4313      	orrs	r3, r2
 8008cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008cf4:	4b2b      	ldr	r3, [pc, #172]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cf8:	f023 0220 	bic.w	r2, r3, #32
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	699b      	ldr	r3, [r3, #24]
 8008d00:	4928      	ldr	r1, [pc, #160]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d02:	4313      	orrs	r3, r2
 8008d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008d06:	4b27      	ldr	r3, [pc, #156]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d0a:	4a26      	ldr	r2, [pc, #152]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d0c:	f023 0310 	bic.w	r3, r3, #16
 8008d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008d12:	4b24      	ldr	r3, [pc, #144]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008d16:	4b24      	ldr	r3, [pc, #144]	; (8008da8 <RCCEx_PLL2_Config+0x160>)
 8008d18:	4013      	ands	r3, r2
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	69d2      	ldr	r2, [r2, #28]
 8008d1e:	00d2      	lsls	r2, r2, #3
 8008d20:	4920      	ldr	r1, [pc, #128]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008d26:	4b1f      	ldr	r3, [pc, #124]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2a:	4a1e      	ldr	r2, [pc, #120]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d2c:	f043 0310 	orr.w	r3, r3, #16
 8008d30:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d106      	bne.n	8008d46 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008d38:	4b1a      	ldr	r3, [pc, #104]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d3c:	4a19      	ldr	r2, [pc, #100]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d3e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008d42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d44:	e00f      	b.n	8008d66 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008d46:	683b      	ldr	r3, [r7, #0]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d106      	bne.n	8008d5a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008d4c:	4b15      	ldr	r3, [pc, #84]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d50:	4a14      	ldr	r2, [pc, #80]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d52:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008d56:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008d58:	e005      	b.n	8008d66 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008d5a:	4b12      	ldr	r3, [pc, #72]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d5e:	4a11      	ldr	r2, [pc, #68]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d64:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008d66:	4b0f      	ldr	r3, [pc, #60]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a0e      	ldr	r2, [pc, #56]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d6c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008d70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d72:	f7fa fa25 	bl	80031c0 <HAL_GetTick>
 8008d76:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d78:	e008      	b.n	8008d8c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008d7a:	f7fa fa21 	bl	80031c0 <HAL_GetTick>
 8008d7e:	4602      	mov	r2, r0
 8008d80:	68bb      	ldr	r3, [r7, #8]
 8008d82:	1ad3      	subs	r3, r2, r3
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d901      	bls.n	8008d8c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e006      	b.n	8008d9a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008d8c:	4b05      	ldr	r3, [pc, #20]	; (8008da4 <RCCEx_PLL2_Config+0x15c>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d0f0      	beq.n	8008d7a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	3710      	adds	r7, #16
 8008d9e:	46bd      	mov	sp, r7
 8008da0:	bd80      	pop	{r7, pc}
 8008da2:	bf00      	nop
 8008da4:	58024400 	.word	0x58024400
 8008da8:	ffff0007 	.word	0xffff0007

08008dac <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008dac:	b580      	push	{r7, lr}
 8008dae:	b084      	sub	sp, #16
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008db6:	2300      	movs	r3, #0
 8008db8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008dba:	4b53      	ldr	r3, [pc, #332]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbe:	f003 0303 	and.w	r3, r3, #3
 8008dc2:	2b03      	cmp	r3, #3
 8008dc4:	d101      	bne.n	8008dca <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e099      	b.n	8008efe <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008dca:	4b4f      	ldr	r3, [pc, #316]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	4a4e      	ldr	r2, [pc, #312]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008dd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008dd4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008dd6:	f7fa f9f3 	bl	80031c0 <HAL_GetTick>
 8008dda:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008ddc:	e008      	b.n	8008df0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008dde:	f7fa f9ef 	bl	80031c0 <HAL_GetTick>
 8008de2:	4602      	mov	r2, r0
 8008de4:	68bb      	ldr	r3, [r7, #8]
 8008de6:	1ad3      	subs	r3, r2, r3
 8008de8:	2b02      	cmp	r3, #2
 8008dea:	d901      	bls.n	8008df0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008dec:	2303      	movs	r3, #3
 8008dee:	e086      	b.n	8008efe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008df0:	4b45      	ldr	r3, [pc, #276]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d1f0      	bne.n	8008dde <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008dfc:	4b42      	ldr	r3, [pc, #264]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e00:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	051b      	lsls	r3, r3, #20
 8008e0a:	493f      	ldr	r1, [pc, #252]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	628b      	str	r3, [r1, #40]	; 0x28
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	3b01      	subs	r3, #1
 8008e16:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	025b      	lsls	r3, r3, #9
 8008e22:	b29b      	uxth	r3, r3
 8008e24:	431a      	orrs	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	68db      	ldr	r3, [r3, #12]
 8008e2a:	3b01      	subs	r3, #1
 8008e2c:	041b      	lsls	r3, r3, #16
 8008e2e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008e32:	431a      	orrs	r2, r3
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	691b      	ldr	r3, [r3, #16]
 8008e38:	3b01      	subs	r3, #1
 8008e3a:	061b      	lsls	r3, r3, #24
 8008e3c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008e40:	4931      	ldr	r1, [pc, #196]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e42:	4313      	orrs	r3, r2
 8008e44:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008e46:	4b30      	ldr	r3, [pc, #192]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e4a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	492d      	ldr	r1, [pc, #180]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e54:	4313      	orrs	r3, r2
 8008e56:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008e58:	4b2b      	ldr	r3, [pc, #172]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e5c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	699b      	ldr	r3, [r3, #24]
 8008e64:	4928      	ldr	r1, [pc, #160]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e66:	4313      	orrs	r3, r2
 8008e68:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008e6a:	4b27      	ldr	r3, [pc, #156]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6e:	4a26      	ldr	r2, [pc, #152]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008e76:	4b24      	ldr	r3, [pc, #144]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e78:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008e7a:	4b24      	ldr	r3, [pc, #144]	; (8008f0c <RCCEx_PLL3_Config+0x160>)
 8008e7c:	4013      	ands	r3, r2
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	69d2      	ldr	r2, [r2, #28]
 8008e82:	00d2      	lsls	r2, r2, #3
 8008e84:	4920      	ldr	r1, [pc, #128]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e86:	4313      	orrs	r3, r2
 8008e88:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008e8a:	4b1f      	ldr	r3, [pc, #124]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e8e:	4a1e      	ldr	r2, [pc, #120]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e94:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008e96:	683b      	ldr	r3, [r7, #0]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d106      	bne.n	8008eaa <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008e9c:	4b1a      	ldr	r3, [pc, #104]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008e9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ea0:	4a19      	ldr	r2, [pc, #100]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008ea2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008ea6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ea8:	e00f      	b.n	8008eca <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008eaa:	683b      	ldr	r3, [r7, #0]
 8008eac:	2b01      	cmp	r3, #1
 8008eae:	d106      	bne.n	8008ebe <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008eb0:	4b15      	ldr	r3, [pc, #84]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	4a14      	ldr	r2, [pc, #80]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008eb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008eba:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008ebc:	e005      	b.n	8008eca <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008ebe:	4b12      	ldr	r3, [pc, #72]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008ec0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ec2:	4a11      	ldr	r2, [pc, #68]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008ec4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ec8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008eca:	4b0f      	ldr	r3, [pc, #60]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a0e      	ldr	r2, [pc, #56]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ed4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ed6:	f7fa f973 	bl	80031c0 <HAL_GetTick>
 8008eda:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008edc:	e008      	b.n	8008ef0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008ede:	f7fa f96f 	bl	80031c0 <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e006      	b.n	8008efe <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008ef0:	4b05      	ldr	r3, [pc, #20]	; (8008f08 <RCCEx_PLL3_Config+0x15c>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d0f0      	beq.n	8008ede <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	3710      	adds	r7, #16
 8008f02:	46bd      	mov	sp, r7
 8008f04:	bd80      	pop	{r7, pc}
 8008f06:	bf00      	nop
 8008f08:	58024400 	.word	0x58024400
 8008f0c:	ffff0007 	.word	0xffff0007

08008f10 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d101      	bne.n	8008f22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	e0f1      	b.n	8009106 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a78      	ldr	r2, [pc, #480]	; (8009110 <HAL_SPI_Init+0x200>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d00f      	beq.n	8008f52 <HAL_SPI_Init+0x42>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	4a77      	ldr	r2, [pc, #476]	; (8009114 <HAL_SPI_Init+0x204>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d00a      	beq.n	8008f52 <HAL_SPI_Init+0x42>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a75      	ldr	r2, [pc, #468]	; (8009118 <HAL_SPI_Init+0x208>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d005      	beq.n	8008f52 <HAL_SPI_Init+0x42>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	68db      	ldr	r3, [r3, #12]
 8008f4a:	2b0f      	cmp	r3, #15
 8008f4c:	d901      	bls.n	8008f52 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	e0d9      	b.n	8009106 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 fba2 	bl	800969c <SPI_GetPacketSize>
 8008f58:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a6c      	ldr	r2, [pc, #432]	; (8009110 <HAL_SPI_Init+0x200>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d00c      	beq.n	8008f7e <HAL_SPI_Init+0x6e>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a6a      	ldr	r2, [pc, #424]	; (8009114 <HAL_SPI_Init+0x204>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d007      	beq.n	8008f7e <HAL_SPI_Init+0x6e>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a69      	ldr	r2, [pc, #420]	; (8009118 <HAL_SPI_Init+0x208>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d002      	beq.n	8008f7e <HAL_SPI_Init+0x6e>
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	2b08      	cmp	r3, #8
 8008f7c:	d811      	bhi.n	8008fa2 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008f82:	4a63      	ldr	r2, [pc, #396]	; (8009110 <HAL_SPI_Init+0x200>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d009      	beq.n	8008f9c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	4a61      	ldr	r2, [pc, #388]	; (8009114 <HAL_SPI_Init+0x204>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d004      	beq.n	8008f9c <HAL_SPI_Init+0x8c>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a60      	ldr	r2, [pc, #384]	; (8009118 <HAL_SPI_Init+0x208>)
 8008f98:	4293      	cmp	r3, r2
 8008f9a:	d104      	bne.n	8008fa6 <HAL_SPI_Init+0x96>
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	2b10      	cmp	r3, #16
 8008fa0:	d901      	bls.n	8008fa6 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e0af      	b.n	8009106 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d106      	bne.n	8008fc0 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008fba:	6878      	ldr	r0, [r7, #4]
 8008fbc:	f7f9 fe3a 	bl	8002c34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2202      	movs	r2, #2
 8008fc4:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0201 	bic.w	r2, r2, #1
 8008fd6:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008fe2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	699b      	ldr	r3, [r3, #24]
 8008fe8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008fec:	d119      	bne.n	8009022 <HAL_SPI_Init+0x112>
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	685b      	ldr	r3, [r3, #4]
 8008ff2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ff6:	d103      	bne.n	8009000 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d008      	beq.n	8009012 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8009004:	2b00      	cmp	r3, #0
 8009006:	d10c      	bne.n	8009022 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800900c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009010:	d107      	bne.n	8009022 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009020:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	69da      	ldr	r2, [r3, #28]
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	431a      	orrs	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	431a      	orrs	r2, r3
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009034:	ea42 0103 	orr.w	r1, r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68da      	ldr	r2, [r3, #12]
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	430a      	orrs	r2, r1
 8009042:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	431a      	orrs	r2, r3
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009052:	431a      	orrs	r2, r3
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	699b      	ldr	r3, [r3, #24]
 8009058:	431a      	orrs	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	431a      	orrs	r2, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	695b      	ldr	r3, [r3, #20]
 8009064:	431a      	orrs	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	6a1b      	ldr	r3, [r3, #32]
 800906a:	431a      	orrs	r2, r3
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	685b      	ldr	r3, [r3, #4]
 8009070:	431a      	orrs	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009076:	431a      	orrs	r2, r3
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	689b      	ldr	r3, [r3, #8]
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009082:	ea42 0103 	orr.w	r1, r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	430a      	orrs	r2, r1
 8009090:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d113      	bne.n	80090c2 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80090ac:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	689b      	ldr	r3, [r3, #8]
 80090b4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80090c0:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f022 0201 	bic.w	r2, r2, #1
 80090d0:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	685b      	ldr	r3, [r3, #4]
 80090d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d00a      	beq.n	80090f4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	430a      	orrs	r2, r1
 80090f2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2200      	movs	r2, #0
 80090f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	2201      	movs	r2, #1
 8009100:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8009104:	2300      	movs	r3, #0
}
 8009106:	4618      	mov	r0, r3
 8009108:	3710      	adds	r7, #16
 800910a:	46bd      	mov	sp, r7
 800910c:	bd80      	pop	{r7, pc}
 800910e:	bf00      	nop
 8009110:	40013000 	.word	0x40013000
 8009114:	40003800 	.word	0x40003800
 8009118:	40003c00 	.word	0x40003c00

0800911c <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800911c:	b580      	push	{r7, lr}
 800911e:	b08a      	sub	sp, #40	; 0x28
 8009120:	af02      	add	r7, sp, #8
 8009122:	60f8      	str	r0, [r7, #12]
 8009124:	60b9      	str	r1, [r7, #8]
 8009126:	603b      	str	r3, [r7, #0]
 8009128:	4613      	mov	r3, r2
 800912a:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	3320      	adds	r3, #32
 8009132:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009134:	2300      	movs	r3, #0
 8009136:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <HAL_SPI_Transmit+0x2a>
 8009142:	2302      	movs	r3, #2
 8009144:	e1d7      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800914e:	f7fa f837 	bl	80031c0 <HAL_GetTick>
 8009152:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800915a:	b2db      	uxtb	r3, r3
 800915c:	2b01      	cmp	r3, #1
 800915e:	d007      	beq.n	8009170 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8009160:	2302      	movs	r3, #2
 8009162:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	2200      	movs	r2, #0
 8009168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800916c:	7efb      	ldrb	r3, [r7, #27]
 800916e:	e1c2      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d002      	beq.n	800917c <HAL_SPI_Transmit+0x60>
 8009176:	88fb      	ldrh	r3, [r7, #6]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d107      	bne.n	800918c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800917c:	2301      	movs	r3, #1
 800917e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	2200      	movs	r2, #0
 8009184:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8009188:	7efb      	ldrb	r3, [r7, #27]
 800918a:	e1b4      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2203      	movs	r2, #3
 8009190:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	68ba      	ldr	r2, [r7, #8]
 80091a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	88fa      	ldrh	r2, [r7, #6]
 80091a6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	88fa      	ldrh	r2, [r7, #6]
 80091ae:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	2200      	movs	r2, #0
 80091bc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	2200      	movs	r2, #0
 80091c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2200      	movs	r2, #0
 80091cc:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	2200      	movs	r2, #0
 80091d2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80091dc:	d107      	bne.n	80091ee <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	681a      	ldr	r2, [r3, #0]
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80091ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	685a      	ldr	r2, [r3, #4]
 80091f4:	4b96      	ldr	r3, [pc, #600]	; (8009450 <HAL_SPI_Transmit+0x334>)
 80091f6:	4013      	ands	r3, r2
 80091f8:	88f9      	ldrh	r1, [r7, #6]
 80091fa:	68fa      	ldr	r2, [r7, #12]
 80091fc:	6812      	ldr	r2, [r2, #0]
 80091fe:	430b      	orrs	r3, r1
 8009200:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	f042 0201 	orr.w	r2, r2, #1
 8009210:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	685b      	ldr	r3, [r3, #4]
 8009216:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800921a:	d107      	bne.n	800922c <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681a      	ldr	r2, [r3, #0]
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800922a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	2b0f      	cmp	r3, #15
 8009232:	d947      	bls.n	80092c4 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8009234:	e03f      	b.n	80092b6 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	f003 0302 	and.w	r3, r3, #2
 8009240:	2b02      	cmp	r3, #2
 8009242:	d114      	bne.n	800926e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	6812      	ldr	r2, [r2, #0]
 800924e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009254:	1d1a      	adds	r2, r3, #4
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009260:	b29b      	uxth	r3, r3
 8009262:	3b01      	subs	r3, #1
 8009264:	b29a      	uxth	r2, r3
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800926c:	e023      	b.n	80092b6 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800926e:	f7f9 ffa7 	bl	80031c0 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	683a      	ldr	r2, [r7, #0]
 800927a:	429a      	cmp	r2, r3
 800927c:	d803      	bhi.n	8009286 <HAL_SPI_Transmit+0x16a>
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009284:	d102      	bne.n	800928c <HAL_SPI_Transmit+0x170>
 8009286:	683b      	ldr	r3, [r7, #0]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d114      	bne.n	80092b6 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f937 	bl	8009500 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2200      	movs	r2, #0
 8009296:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2201      	movs	r2, #1
 80092ae:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 80092b2:	2303      	movs	r3, #3
 80092b4:	e11f      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092bc:	b29b      	uxth	r3, r3
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1b9      	bne.n	8009236 <HAL_SPI_Transmit+0x11a>
 80092c2:	e0f2      	b.n	80094aa <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	68db      	ldr	r3, [r3, #12]
 80092c8:	2b07      	cmp	r3, #7
 80092ca:	f240 80e7 	bls.w	800949c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80092ce:	e05d      	b.n	800938c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	695b      	ldr	r3, [r3, #20]
 80092d6:	f003 0302 	and.w	r3, r3, #2
 80092da:	2b02      	cmp	r3, #2
 80092dc:	d132      	bne.n	8009344 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80092e4:	b29b      	uxth	r3, r3
 80092e6:	2b01      	cmp	r3, #1
 80092e8:	d918      	bls.n	800931c <HAL_SPI_Transmit+0x200>
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d014      	beq.n	800931c <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6812      	ldr	r2, [r2, #0]
 80092fc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009302:	1d1a      	adds	r2, r3, #4
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800930e:	b29b      	uxth	r3, r3
 8009310:	3b02      	subs	r3, #2
 8009312:	b29a      	uxth	r2, r3
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800931a:	e037      	b.n	800938c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009320:	881a      	ldrh	r2, [r3, #0]
 8009322:	69fb      	ldr	r3, [r7, #28]
 8009324:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800932a:	1c9a      	adds	r2, r3, #2
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009336:	b29b      	uxth	r3, r3
 8009338:	3b01      	subs	r3, #1
 800933a:	b29a      	uxth	r2, r3
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009342:	e023      	b.n	800938c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009344:	f7f9 ff3c 	bl	80031c0 <HAL_GetTick>
 8009348:	4602      	mov	r2, r0
 800934a:	697b      	ldr	r3, [r7, #20]
 800934c:	1ad3      	subs	r3, r2, r3
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	429a      	cmp	r2, r3
 8009352:	d803      	bhi.n	800935c <HAL_SPI_Transmit+0x240>
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935a:	d102      	bne.n	8009362 <HAL_SPI_Transmit+0x246>
 800935c:	683b      	ldr	r3, [r7, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d114      	bne.n	800938c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 f8cc 	bl	8009500 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2200      	movs	r2, #0
 800936c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009376:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2201      	movs	r2, #1
 8009384:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009388:	2303      	movs	r3, #3
 800938a:	e0b4      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009392:	b29b      	uxth	r3, r3
 8009394:	2b00      	cmp	r3, #0
 8009396:	d19b      	bne.n	80092d0 <HAL_SPI_Transmit+0x1b4>
 8009398:	e087      	b.n	80094aa <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	695b      	ldr	r3, [r3, #20]
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b02      	cmp	r3, #2
 80093a6:	d155      	bne.n	8009454 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093ae:	b29b      	uxth	r3, r3
 80093b0:	2b03      	cmp	r3, #3
 80093b2:	d918      	bls.n	80093e6 <HAL_SPI_Transmit+0x2ca>
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b8:	2b40      	cmp	r3, #64	; 0x40
 80093ba:	d914      	bls.n	80093e6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6812      	ldr	r2, [r2, #0]
 80093c6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093cc:	1d1a      	adds	r2, r3, #4
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093d8:	b29b      	uxth	r3, r3
 80093da:	3b04      	subs	r3, #4
 80093dc:	b29a      	uxth	r2, r3
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80093e4:	e05a      	b.n	800949c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80093ec:	b29b      	uxth	r3, r3
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d917      	bls.n	8009422 <HAL_SPI_Transmit+0x306>
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d013      	beq.n	8009422 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093fe:	881a      	ldrh	r2, [r3, #0]
 8009400:	69fb      	ldr	r3, [r7, #28]
 8009402:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009408:	1c9a      	adds	r2, r3, #2
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009414:	b29b      	uxth	r3, r3
 8009416:	3b02      	subs	r3, #2
 8009418:	b29a      	uxth	r2, r3
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009420:	e03c      	b.n	800949c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3320      	adds	r3, #32
 800942c:	7812      	ldrb	r2, [r2, #0]
 800942e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009434:	1c5a      	adds	r2, r3, #1
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009440:	b29b      	uxth	r3, r3
 8009442:	3b01      	subs	r3, #1
 8009444:	b29a      	uxth	r2, r3
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800944c:	e026      	b.n	800949c <HAL_SPI_Transmit+0x380>
 800944e:	bf00      	nop
 8009450:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009454:	f7f9 feb4 	bl	80031c0 <HAL_GetTick>
 8009458:	4602      	mov	r2, r0
 800945a:	697b      	ldr	r3, [r7, #20]
 800945c:	1ad3      	subs	r3, r2, r3
 800945e:	683a      	ldr	r2, [r7, #0]
 8009460:	429a      	cmp	r2, r3
 8009462:	d803      	bhi.n	800946c <HAL_SPI_Transmit+0x350>
 8009464:	683b      	ldr	r3, [r7, #0]
 8009466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800946a:	d102      	bne.n	8009472 <HAL_SPI_Transmit+0x356>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	2b00      	cmp	r3, #0
 8009470:	d114      	bne.n	800949c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009472:	68f8      	ldr	r0, [r7, #12]
 8009474:	f000 f844 	bl	8009500 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009486:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009498:	2303      	movs	r3, #3
 800949a:	e02c      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80094a2:	b29b      	uxth	r3, r3
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f47f af78 	bne.w	800939a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 80094aa:	683b      	ldr	r3, [r7, #0]
 80094ac:	9300      	str	r3, [sp, #0]
 80094ae:	697b      	ldr	r3, [r7, #20]
 80094b0:	2200      	movs	r2, #0
 80094b2:	2108      	movs	r1, #8
 80094b4:	68f8      	ldr	r0, [r7, #12]
 80094b6:	f000 f8c3 	bl	8009640 <SPI_WaitOnFlagUntilTimeout>
 80094ba:	4603      	mov	r3, r0
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d007      	beq.n	80094d0 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c6:	f043 0220 	orr.w	r2, r3, #32
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80094d0:	68f8      	ldr	r0, [r7, #12]
 80094d2:	f000 f815 	bl	8009500 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2201      	movs	r2, #1
 80094e2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	d001      	beq.n	80094f4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e000      	b.n	80094f6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80094f4:	7efb      	ldrb	r3, [r7, #27]
}
 80094f6:	4618      	mov	r0, r3
 80094f8:	3720      	adds	r7, #32
 80094fa:	46bd      	mov	sp, r7
 80094fc:	bd80      	pop	{r7, pc}
 80094fe:	bf00      	nop

08009500 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 8009500:	b480      	push	{r7}
 8009502:	b085      	sub	sp, #20
 8009504:	af00      	add	r7, sp, #0
 8009506:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	695b      	ldr	r3, [r3, #20]
 800950e:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	699a      	ldr	r2, [r3, #24]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	f042 0208 	orr.w	r2, r2, #8
 800951e:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699a      	ldr	r2, [r3, #24]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f042 0210 	orr.w	r2, r2, #16
 800952e:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	f022 0201 	bic.w	r2, r2, #1
 800953e:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	6919      	ldr	r1, [r3, #16]
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681a      	ldr	r2, [r3, #0]
 800954a:	4b3c      	ldr	r3, [pc, #240]	; (800963c <SPI_CloseTransfer+0x13c>)
 800954c:	400b      	ands	r3, r1
 800954e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	689a      	ldr	r2, [r3, #8]
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800955e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009566:	b2db      	uxtb	r3, r3
 8009568:	2b04      	cmp	r3, #4
 800956a:	d014      	beq.n	8009596 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	f003 0320 	and.w	r3, r3, #32
 8009572:	2b00      	cmp	r3, #0
 8009574:	d00f      	beq.n	8009596 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800957c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	699a      	ldr	r2, [r3, #24]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f042 0220 	orr.w	r2, r2, #32
 8009594:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800959c:	b2db      	uxtb	r3, r3
 800959e:	2b03      	cmp	r3, #3
 80095a0:	d014      	beq.n	80095cc <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d00f      	beq.n	80095cc <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095b2:	f043 0204 	orr.w	r2, r3, #4
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	699a      	ldr	r2, [r3, #24]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095ca:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00f      	beq.n	80095f6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095dc:	f043 0201 	orr.w	r2, r3, #1
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	699a      	ldr	r2, [r3, #24]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80095f4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d00f      	beq.n	8009620 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009606:	f043 0208 	orr.w	r2, r3, #8
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	699a      	ldr	r2, [r3, #24]
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800961e:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2200      	movs	r2, #0
 800962c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009630:	bf00      	nop
 8009632:	3714      	adds	r7, #20
 8009634:	46bd      	mov	sp, r7
 8009636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800963a:	4770      	bx	lr
 800963c:	fffffc90 	.word	0xfffffc90

08009640 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	60b9      	str	r1, [r7, #8]
 800964a:	603b      	str	r3, [r7, #0]
 800964c:	4613      	mov	r3, r2
 800964e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009650:	e010      	b.n	8009674 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009652:	f7f9 fdb5 	bl	80031c0 <HAL_GetTick>
 8009656:	4602      	mov	r2, r0
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	1ad3      	subs	r3, r2, r3
 800965c:	69ba      	ldr	r2, [r7, #24]
 800965e:	429a      	cmp	r2, r3
 8009660:	d803      	bhi.n	800966a <SPI_WaitOnFlagUntilTimeout+0x2a>
 8009662:	69bb      	ldr	r3, [r7, #24]
 8009664:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009668:	d102      	bne.n	8009670 <SPI_WaitOnFlagUntilTimeout+0x30>
 800966a:	69bb      	ldr	r3, [r7, #24]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d101      	bne.n	8009674 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009670:	2303      	movs	r3, #3
 8009672:	e00f      	b.n	8009694 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	695a      	ldr	r2, [r3, #20]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	4013      	ands	r3, r2
 800967e:	68ba      	ldr	r2, [r7, #8]
 8009680:	429a      	cmp	r2, r3
 8009682:	bf0c      	ite	eq
 8009684:	2301      	moveq	r3, #1
 8009686:	2300      	movne	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	79fb      	ldrb	r3, [r7, #7]
 800968e:	429a      	cmp	r2, r3
 8009690:	d0df      	beq.n	8009652 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 8009692:	2300      	movs	r3, #0
}
 8009694:	4618      	mov	r0, r3
 8009696:	3710      	adds	r7, #16
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}

0800969c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800969c:	b480      	push	{r7}
 800969e:	b085      	sub	sp, #20
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096a8:	095b      	lsrs	r3, r3, #5
 80096aa:	3301      	adds	r3, #1
 80096ac:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80096b6:	68bb      	ldr	r3, [r7, #8]
 80096b8:	3307      	adds	r3, #7
 80096ba:	08db      	lsrs	r3, r3, #3
 80096bc:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80096be:	68bb      	ldr	r3, [r7, #8]
 80096c0:	68fa      	ldr	r2, [r7, #12]
 80096c2:	fb02 f303 	mul.w	r3, r2, r3
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80096d2:	b580      	push	{r7, lr}
 80096d4:	b082      	sub	sp, #8
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d101      	bne.n	80096e4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80096e0:	2301      	movs	r3, #1
 80096e2:	e042      	b.n	800976a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d106      	bne.n	80096fc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80096f6:	6878      	ldr	r0, [r7, #4]
 80096f8:	f7f9 fb08 	bl	8002d0c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2224      	movs	r2, #36	; 0x24
 8009700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	681a      	ldr	r2, [r3, #0]
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f022 0201 	bic.w	r2, r2, #1
 8009712:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fbeb 	bl	8009ef0 <UART_SetConfig>
 800971a:	4603      	mov	r3, r0
 800971c:	2b01      	cmp	r3, #1
 800971e:	d101      	bne.n	8009724 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8009720:	2301      	movs	r3, #1
 8009722:	e022      	b.n	800976a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009728:	2b00      	cmp	r3, #0
 800972a:	d002      	beq.n	8009732 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f001 f947 	bl	800a9c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	685a      	ldr	r2, [r3, #4]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009740:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	681b      	ldr	r3, [r3, #0]
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009750:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	681b      	ldr	r3, [r3, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f042 0201 	orr.w	r2, r2, #1
 8009760:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 f9ce 	bl	800ab04 <UART_CheckIdleState>
 8009768:	4603      	mov	r3, r0
}
 800976a:	4618      	mov	r0, r3
 800976c:	3708      	adds	r7, #8
 800976e:	46bd      	mov	sp, r7
 8009770:	bd80      	pop	{r7, pc}
	...

08009774 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b0ba      	sub	sp, #232	; 0xe8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	69db      	ldr	r3, [r3, #28]
 8009782:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800979a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800979e:	f640 030f 	movw	r3, #2063	; 0x80f
 80097a2:	4013      	ands	r3, r2
 80097a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80097a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d11b      	bne.n	80097e8 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80097b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80097b4:	f003 0320 	and.w	r3, r3, #32
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d015      	beq.n	80097e8 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80097bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80097c0:	f003 0320 	and.w	r3, r3, #32
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d105      	bne.n	80097d4 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80097c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80097cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d009      	beq.n	80097e8 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097d8:	2b00      	cmp	r3, #0
 80097da:	f000 835a 	beq.w	8009e92 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	4798      	blx	r3
      }
      return;
 80097e6:	e354      	b.n	8009e92 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80097e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f000 811f 	beq.w	8009a30 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80097f2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80097f6:	4b8b      	ldr	r3, [pc, #556]	; (8009a24 <HAL_UART_IRQHandler+0x2b0>)
 80097f8:	4013      	ands	r3, r2
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d106      	bne.n	800980c <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80097fe:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8009802:	4b89      	ldr	r3, [pc, #548]	; (8009a28 <HAL_UART_IRQHandler+0x2b4>)
 8009804:	4013      	ands	r3, r2
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 8112 	beq.w	8009a30 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800980c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	2b00      	cmp	r3, #0
 8009816:	d011      	beq.n	800983c <HAL_UART_IRQHandler+0xc8>
 8009818:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800981c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009820:	2b00      	cmp	r3, #0
 8009822:	d00b      	beq.n	800983c <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	2201      	movs	r2, #1
 800982a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009832:	f043 0201 	orr.w	r2, r3, #1
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800983c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009840:	f003 0302 	and.w	r3, r3, #2
 8009844:	2b00      	cmp	r3, #0
 8009846:	d011      	beq.n	800986c <HAL_UART_IRQHandler+0xf8>
 8009848:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800984c:	f003 0301 	and.w	r3, r3, #1
 8009850:	2b00      	cmp	r3, #0
 8009852:	d00b      	beq.n	800986c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	2202      	movs	r2, #2
 800985a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009862:	f043 0204 	orr.w	r2, r3, #4
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800986c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009870:	f003 0304 	and.w	r3, r3, #4
 8009874:	2b00      	cmp	r3, #0
 8009876:	d011      	beq.n	800989c <HAL_UART_IRQHandler+0x128>
 8009878:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d00b      	beq.n	800989c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2204      	movs	r2, #4
 800988a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009892:	f043 0202 	orr.w	r2, r3, #2
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800989c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098a0:	f003 0308 	and.w	r3, r3, #8
 80098a4:	2b00      	cmp	r3, #0
 80098a6:	d017      	beq.n	80098d8 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098ac:	f003 0320 	and.w	r3, r3, #32
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d105      	bne.n	80098c0 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80098b4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80098b8:	4b5a      	ldr	r3, [pc, #360]	; (8009a24 <HAL_UART_IRQHandler+0x2b0>)
 80098ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d00b      	beq.n	80098d8 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	2208      	movs	r2, #8
 80098c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ce:	f043 0208 	orr.w	r2, r3, #8
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80098d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80098dc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d012      	beq.n	800990a <HAL_UART_IRQHandler+0x196>
 80098e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80098e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	d00c      	beq.n	800990a <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098f8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009900:	f043 0220 	orr.w	r2, r3, #32
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009910:	2b00      	cmp	r3, #0
 8009912:	f000 82c0 	beq.w	8009e96 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009916:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800991a:	f003 0320 	and.w	r3, r3, #32
 800991e:	2b00      	cmp	r3, #0
 8009920:	d013      	beq.n	800994a <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009922:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009926:	f003 0320 	and.w	r3, r3, #32
 800992a:	2b00      	cmp	r3, #0
 800992c:	d105      	bne.n	800993a <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800992e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009932:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d007      	beq.n	800994a <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009946:	6878      	ldr	r0, [r7, #4]
 8009948:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009950:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800995e:	2b40      	cmp	r3, #64	; 0x40
 8009960:	d005      	beq.n	800996e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8009962:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009966:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800996a:	2b00      	cmp	r3, #0
 800996c:	d04f      	beq.n	8009a0e <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	f001 f9dc 	bl	800ad2c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	689b      	ldr	r3, [r3, #8]
 800997a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800997e:	2b40      	cmp	r3, #64	; 0x40
 8009980:	d141      	bne.n	8009a06 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	3308      	adds	r3, #8
 8009988:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800998c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009990:	e853 3f00 	ldrex	r3, [r3]
 8009994:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009998:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800999c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099a0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	3308      	adds	r3, #8
 80099aa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80099ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80099b2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80099ba:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80099be:	e841 2300 	strex	r3, r2, [r1]
 80099c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80099c6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d1d9      	bne.n	8009982 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d013      	beq.n	80099fe <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099da:	4a14      	ldr	r2, [pc, #80]	; (8009a2c <HAL_UART_IRQHandler+0x2b8>)
 80099dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099e2:	4618      	mov	r0, r3
 80099e4:	f7fa fbc6 	bl	8004174 <HAL_DMA_Abort_IT>
 80099e8:	4603      	mov	r3, r0
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d017      	beq.n	8009a1e <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80099f8:	4610      	mov	r0, r2
 80099fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80099fc:	e00f      	b.n	8009a1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80099fe:	6878      	ldr	r0, [r7, #4]
 8009a00:	f000 fa60 	bl	8009ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a04:	e00b      	b.n	8009a1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009a06:	6878      	ldr	r0, [r7, #4]
 8009a08:	f000 fa5c 	bl	8009ec4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a0c:	e007      	b.n	8009a1e <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009a0e:	6878      	ldr	r0, [r7, #4]
 8009a10:	f000 fa58 	bl	8009ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	2200      	movs	r2, #0
 8009a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8009a1c:	e23b      	b.n	8009e96 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a1e:	bf00      	nop
    return;
 8009a20:	e239      	b.n	8009e96 <HAL_UART_IRQHandler+0x722>
 8009a22:	bf00      	nop
 8009a24:	10000001 	.word	0x10000001
 8009a28:	04000120 	.word	0x04000120
 8009a2c:	0800adf9 	.word	0x0800adf9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	f040 81ce 	bne.w	8009dd6 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009a3e:	f003 0310 	and.w	r3, r3, #16
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	f000 81c7 	beq.w	8009dd6 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009a4c:	f003 0310 	and.w	r3, r3, #16
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 81c0 	beq.w	8009dd6 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	2210      	movs	r2, #16
 8009a5c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	689b      	ldr	r3, [r3, #8]
 8009a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a68:	2b40      	cmp	r3, #64	; 0x40
 8009a6a:	f040 813b 	bne.w	8009ce4 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a8b      	ldr	r2, [pc, #556]	; (8009ca4 <HAL_UART_IRQHandler+0x530>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d059      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	4a89      	ldr	r2, [pc, #548]	; (8009ca8 <HAL_UART_IRQHandler+0x534>)
 8009a82:	4293      	cmp	r3, r2
 8009a84:	d053      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a87      	ldr	r2, [pc, #540]	; (8009cac <HAL_UART_IRQHandler+0x538>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d04d      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a85      	ldr	r2, [pc, #532]	; (8009cb0 <HAL_UART_IRQHandler+0x53c>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d047      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	4a83      	ldr	r2, [pc, #524]	; (8009cb4 <HAL_UART_IRQHandler+0x540>)
 8009aa6:	4293      	cmp	r3, r2
 8009aa8:	d041      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a81      	ldr	r2, [pc, #516]	; (8009cb8 <HAL_UART_IRQHandler+0x544>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d03b      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a7f      	ldr	r2, [pc, #508]	; (8009cbc <HAL_UART_IRQHandler+0x548>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d035      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	4a7d      	ldr	r2, [pc, #500]	; (8009cc0 <HAL_UART_IRQHandler+0x54c>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d02f      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a7b      	ldr	r2, [pc, #492]	; (8009cc4 <HAL_UART_IRQHandler+0x550>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d029      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a79      	ldr	r2, [pc, #484]	; (8009cc8 <HAL_UART_IRQHandler+0x554>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d023      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	4a77      	ldr	r2, [pc, #476]	; (8009ccc <HAL_UART_IRQHandler+0x558>)
 8009aee:	4293      	cmp	r3, r2
 8009af0:	d01d      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a75      	ldr	r2, [pc, #468]	; (8009cd0 <HAL_UART_IRQHandler+0x55c>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d017      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a73      	ldr	r2, [pc, #460]	; (8009cd4 <HAL_UART_IRQHandler+0x560>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d011      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a71      	ldr	r2, [pc, #452]	; (8009cd8 <HAL_UART_IRQHandler+0x564>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d00b      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a6f      	ldr	r2, [pc, #444]	; (8009cdc <HAL_UART_IRQHandler+0x568>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d005      	beq.n	8009b2e <HAL_UART_IRQHandler+0x3ba>
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	4a6d      	ldr	r2, [pc, #436]	; (8009ce0 <HAL_UART_IRQHandler+0x56c>)
 8009b2a:	4293      	cmp	r3, r2
 8009b2c:	d105      	bne.n	8009b3a <HAL_UART_IRQHandler+0x3c6>
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	685b      	ldr	r3, [r3, #4]
 8009b36:	b29b      	uxth	r3, r3
 8009b38:	e004      	b.n	8009b44 <HAL_UART_IRQHandler+0x3d0>
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	b29b      	uxth	r3, r3
 8009b44:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009b48:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	f000 81a4 	beq.w	8009e9a <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009b58:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	f080 819c 	bcs.w	8009e9a <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009b68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b70:	69db      	ldr	r3, [r3, #28]
 8009b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009b76:	f000 8086 	beq.w	8009c86 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009b86:	e853 3f00 	ldrex	r3, [r3]
 8009b8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009b8e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009b92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009b96:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	461a      	mov	r2, r3
 8009ba0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8009ba4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009ba8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009bb0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8009bb4:	e841 2300 	strex	r3, r2, [r1]
 8009bb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009bbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d1da      	bne.n	8009b7a <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	3308      	adds	r3, #8
 8009bca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bcc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009bce:	e853 3f00 	ldrex	r3, [r3]
 8009bd2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8009bd4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009bd6:	f023 0301 	bic.w	r3, r3, #1
 8009bda:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	3308      	adds	r3, #8
 8009be4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009be8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009bec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8009bf0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8009bf4:	e841 2300 	strex	r3, r2, [r1]
 8009bf8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009bfa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d1e1      	bne.n	8009bc4 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	3308      	adds	r3, #8
 8009c06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009c0a:	e853 3f00 	ldrex	r3, [r3]
 8009c0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009c10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009c12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	3308      	adds	r3, #8
 8009c20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009c24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009c26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009c2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009c2c:	e841 2300 	strex	r3, r2, [r1]
 8009c30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009c32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d1e3      	bne.n	8009c00 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	2220      	movs	r2, #32
 8009c3c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2200      	movs	r2, #0
 8009c44:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c4e:	e853 3f00 	ldrex	r3, [r3]
 8009c52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009c54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c56:	f023 0310 	bic.w	r3, r3, #16
 8009c5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	461a      	mov	r2, r3
 8009c64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009c68:	65bb      	str	r3, [r7, #88]	; 0x58
 8009c6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009c6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009c70:	e841 2300 	strex	r3, r2, [r1]
 8009c74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009c76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1e4      	bne.n	8009c46 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009c80:	4618      	mov	r0, r3
 8009c82:	f7f9 ff59 	bl	8003b38 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009c92:	b29b      	uxth	r3, r3
 8009c94:	1ad3      	subs	r3, r2, r3
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	4619      	mov	r1, r3
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 f91c 	bl	8009ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009ca0:	e0fb      	b.n	8009e9a <HAL_UART_IRQHandler+0x726>
 8009ca2:	bf00      	nop
 8009ca4:	40020010 	.word	0x40020010
 8009ca8:	40020028 	.word	0x40020028
 8009cac:	40020040 	.word	0x40020040
 8009cb0:	40020058 	.word	0x40020058
 8009cb4:	40020070 	.word	0x40020070
 8009cb8:	40020088 	.word	0x40020088
 8009cbc:	400200a0 	.word	0x400200a0
 8009cc0:	400200b8 	.word	0x400200b8
 8009cc4:	40020410 	.word	0x40020410
 8009cc8:	40020428 	.word	0x40020428
 8009ccc:	40020440 	.word	0x40020440
 8009cd0:	40020458 	.word	0x40020458
 8009cd4:	40020470 	.word	0x40020470
 8009cd8:	40020488 	.word	0x40020488
 8009cdc:	400204a0 	.word	0x400204a0
 8009ce0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	1ad3      	subs	r3, r2, r3
 8009cf4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 80cc 	beq.w	8009e9e <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009d06:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	f000 80c7 	beq.w	8009e9e <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d18:	e853 3f00 	ldrex	r3, [r3]
 8009d1c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d20:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009d24:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009d32:	647b      	str	r3, [r7, #68]	; 0x44
 8009d34:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009d38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d3a:	e841 2300 	strex	r3, r2, [r1]
 8009d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009d40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d1e4      	bne.n	8009d10 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	3308      	adds	r3, #8
 8009d4c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d50:	e853 3f00 	ldrex	r3, [r3]
 8009d54:	623b      	str	r3, [r7, #32]
   return(result);
 8009d56:	6a3a      	ldr	r2, [r7, #32]
 8009d58:	4b54      	ldr	r3, [pc, #336]	; (8009eac <HAL_UART_IRQHandler+0x738>)
 8009d5a:	4013      	ands	r3, r2
 8009d5c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	3308      	adds	r3, #8
 8009d66:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009d6a:	633a      	str	r2, [r7, #48]	; 0x30
 8009d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d6e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009d72:	e841 2300 	strex	r3, r2, [r1]
 8009d76:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d1e3      	bne.n	8009d46 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	2220      	movs	r2, #32
 8009d82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	e853 3f00 	ldrex	r3, [r3]
 8009d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	f023 0310 	bic.w	r3, r3, #16
 8009da6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	461a      	mov	r2, r3
 8009db0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009db4:	61fb      	str	r3, [r7, #28]
 8009db6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009db8:	69b9      	ldr	r1, [r7, #24]
 8009dba:	69fa      	ldr	r2, [r7, #28]
 8009dbc:	e841 2300 	strex	r3, r2, [r1]
 8009dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d1e4      	bne.n	8009d92 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009dc8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009dcc:	4619      	mov	r1, r3
 8009dce:	6878      	ldr	r0, [r7, #4]
 8009dd0:	f000 f882 	bl	8009ed8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009dd4:	e063      	b.n	8009e9e <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009dd6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dda:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d00e      	beq.n	8009e00 <HAL_UART_IRQHandler+0x68c>
 8009de2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009de6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d008      	beq.n	8009e00 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009df6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f001 f83e 	bl	800ae7a <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009dfe:	e051      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009e00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d014      	beq.n	8009e36 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009e0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d105      	bne.n	8009e24 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009e18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d008      	beq.n	8009e36 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d03a      	beq.n	8009ea2 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009e30:	6878      	ldr	r0, [r7, #4]
 8009e32:	4798      	blx	r3
    }
    return;
 8009e34:	e035      	b.n	8009ea2 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d009      	beq.n	8009e56 <HAL_UART_IRQHandler+0x6e2>
 8009e42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d003      	beq.n	8009e56 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009e4e:	6878      	ldr	r0, [r7, #4]
 8009e50:	f000 ffe8 	bl	800ae24 <UART_EndTransmit_IT>
    return;
 8009e54:	e026      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009e56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d009      	beq.n	8009e76 <HAL_UART_IRQHandler+0x702>
 8009e62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e66:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d003      	beq.n	8009e76 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f001 f817 	bl	800aea2 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e74:	e016      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e7a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	d010      	beq.n	8009ea4 <HAL_UART_IRQHandler+0x730>
 8009e82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	da0c      	bge.n	8009ea4 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 ffff 	bl	800ae8e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009e90:	e008      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
      return;
 8009e92:	bf00      	nop
 8009e94:	e006      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
    return;
 8009e96:	bf00      	nop
 8009e98:	e004      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
      return;
 8009e9a:	bf00      	nop
 8009e9c:	e002      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
      return;
 8009e9e:	bf00      	nop
 8009ea0:	e000      	b.n	8009ea4 <HAL_UART_IRQHandler+0x730>
    return;
 8009ea2:	bf00      	nop
  }
}
 8009ea4:	37e8      	adds	r7, #232	; 0xe8
 8009ea6:	46bd      	mov	sp, r7
 8009ea8:	bd80      	pop	{r7, pc}
 8009eaa:	bf00      	nop
 8009eac:	effffffe 	.word	0xeffffffe

08009eb0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009eb8:	bf00      	nop
 8009eba:	370c      	adds	r7, #12
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec2:	4770      	bx	lr

08009ec4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ecc:	bf00      	nop
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009ee4:	bf00      	nop
 8009ee6:	370c      	adds	r7, #12
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eee:	4770      	bx	lr

08009ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009ef0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ef4:	b092      	sub	sp, #72	; 0x48
 8009ef6:	af00      	add	r7, sp, #0
 8009ef8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009efa:	2300      	movs	r3, #0
 8009efc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	689a      	ldr	r2, [r3, #8]
 8009f04:	697b      	ldr	r3, [r7, #20]
 8009f06:	691b      	ldr	r3, [r3, #16]
 8009f08:	431a      	orrs	r2, r3
 8009f0a:	697b      	ldr	r3, [r7, #20]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	431a      	orrs	r2, r3
 8009f10:	697b      	ldr	r3, [r7, #20]
 8009f12:	69db      	ldr	r3, [r3, #28]
 8009f14:	4313      	orrs	r3, r2
 8009f16:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	4bbe      	ldr	r3, [pc, #760]	; (800a218 <UART_SetConfig+0x328>)
 8009f20:	4013      	ands	r3, r2
 8009f22:	697a      	ldr	r2, [r7, #20]
 8009f24:	6812      	ldr	r2, [r2, #0]
 8009f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f28:	430b      	orrs	r3, r1
 8009f2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009f2c:	697b      	ldr	r3, [r7, #20]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	68da      	ldr	r2, [r3, #12]
 8009f3a:	697b      	ldr	r3, [r7, #20]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	430a      	orrs	r2, r1
 8009f40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	699b      	ldr	r3, [r3, #24]
 8009f46:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009f48:	697b      	ldr	r3, [r7, #20]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4ab3      	ldr	r2, [pc, #716]	; (800a21c <UART_SetConfig+0x32c>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d004      	beq.n	8009f5c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009f52:	697b      	ldr	r3, [r7, #20]
 8009f54:	6a1b      	ldr	r3, [r3, #32]
 8009f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009f58:	4313      	orrs	r3, r2
 8009f5a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009f5c:	697b      	ldr	r3, [r7, #20]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	689a      	ldr	r2, [r3, #8]
 8009f62:	4baf      	ldr	r3, [pc, #700]	; (800a220 <UART_SetConfig+0x330>)
 8009f64:	4013      	ands	r3, r2
 8009f66:	697a      	ldr	r2, [r7, #20]
 8009f68:	6812      	ldr	r2, [r2, #0]
 8009f6a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009f6c:	430b      	orrs	r3, r1
 8009f6e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f76:	f023 010f 	bic.w	r1, r3, #15
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	430a      	orrs	r2, r1
 8009f84:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009f86:	697b      	ldr	r3, [r7, #20]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4aa6      	ldr	r2, [pc, #664]	; (800a224 <UART_SetConfig+0x334>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d177      	bne.n	800a080 <UART_SetConfig+0x190>
 8009f90:	4ba5      	ldr	r3, [pc, #660]	; (800a228 <UART_SetConfig+0x338>)
 8009f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f98:	2b28      	cmp	r3, #40	; 0x28
 8009f9a:	d86d      	bhi.n	800a078 <UART_SetConfig+0x188>
 8009f9c:	a201      	add	r2, pc, #4	; (adr r2, 8009fa4 <UART_SetConfig+0xb4>)
 8009f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fa2:	bf00      	nop
 8009fa4:	0800a049 	.word	0x0800a049
 8009fa8:	0800a079 	.word	0x0800a079
 8009fac:	0800a079 	.word	0x0800a079
 8009fb0:	0800a079 	.word	0x0800a079
 8009fb4:	0800a079 	.word	0x0800a079
 8009fb8:	0800a079 	.word	0x0800a079
 8009fbc:	0800a079 	.word	0x0800a079
 8009fc0:	0800a079 	.word	0x0800a079
 8009fc4:	0800a051 	.word	0x0800a051
 8009fc8:	0800a079 	.word	0x0800a079
 8009fcc:	0800a079 	.word	0x0800a079
 8009fd0:	0800a079 	.word	0x0800a079
 8009fd4:	0800a079 	.word	0x0800a079
 8009fd8:	0800a079 	.word	0x0800a079
 8009fdc:	0800a079 	.word	0x0800a079
 8009fe0:	0800a079 	.word	0x0800a079
 8009fe4:	0800a059 	.word	0x0800a059
 8009fe8:	0800a079 	.word	0x0800a079
 8009fec:	0800a079 	.word	0x0800a079
 8009ff0:	0800a079 	.word	0x0800a079
 8009ff4:	0800a079 	.word	0x0800a079
 8009ff8:	0800a079 	.word	0x0800a079
 8009ffc:	0800a079 	.word	0x0800a079
 800a000:	0800a079 	.word	0x0800a079
 800a004:	0800a061 	.word	0x0800a061
 800a008:	0800a079 	.word	0x0800a079
 800a00c:	0800a079 	.word	0x0800a079
 800a010:	0800a079 	.word	0x0800a079
 800a014:	0800a079 	.word	0x0800a079
 800a018:	0800a079 	.word	0x0800a079
 800a01c:	0800a079 	.word	0x0800a079
 800a020:	0800a079 	.word	0x0800a079
 800a024:	0800a069 	.word	0x0800a069
 800a028:	0800a079 	.word	0x0800a079
 800a02c:	0800a079 	.word	0x0800a079
 800a030:	0800a079 	.word	0x0800a079
 800a034:	0800a079 	.word	0x0800a079
 800a038:	0800a079 	.word	0x0800a079
 800a03c:	0800a079 	.word	0x0800a079
 800a040:	0800a079 	.word	0x0800a079
 800a044:	0800a071 	.word	0x0800a071
 800a048:	2301      	movs	r3, #1
 800a04a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a04e:	e222      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a050:	2304      	movs	r3, #4
 800a052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a056:	e21e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a058:	2308      	movs	r3, #8
 800a05a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a05e:	e21a      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a060:	2310      	movs	r3, #16
 800a062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a066:	e216      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a068:	2320      	movs	r3, #32
 800a06a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a06e:	e212      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a070:	2340      	movs	r3, #64	; 0x40
 800a072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a076:	e20e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a078:	2380      	movs	r3, #128	; 0x80
 800a07a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a07e:	e20a      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a080:	697b      	ldr	r3, [r7, #20]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a69      	ldr	r2, [pc, #420]	; (800a22c <UART_SetConfig+0x33c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d130      	bne.n	800a0ec <UART_SetConfig+0x1fc>
 800a08a:	4b67      	ldr	r3, [pc, #412]	; (800a228 <UART_SetConfig+0x338>)
 800a08c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a08e:	f003 0307 	and.w	r3, r3, #7
 800a092:	2b05      	cmp	r3, #5
 800a094:	d826      	bhi.n	800a0e4 <UART_SetConfig+0x1f4>
 800a096:	a201      	add	r2, pc, #4	; (adr r2, 800a09c <UART_SetConfig+0x1ac>)
 800a098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a09c:	0800a0b5 	.word	0x0800a0b5
 800a0a0:	0800a0bd 	.word	0x0800a0bd
 800a0a4:	0800a0c5 	.word	0x0800a0c5
 800a0a8:	0800a0cd 	.word	0x0800a0cd
 800a0ac:	0800a0d5 	.word	0x0800a0d5
 800a0b0:	0800a0dd 	.word	0x0800a0dd
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ba:	e1ec      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0bc:	2304      	movs	r3, #4
 800a0be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0c2:	e1e8      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0c4:	2308      	movs	r3, #8
 800a0c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ca:	e1e4      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0cc:	2310      	movs	r3, #16
 800a0ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0d2:	e1e0      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0d4:	2320      	movs	r3, #32
 800a0d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0da:	e1dc      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0dc:	2340      	movs	r3, #64	; 0x40
 800a0de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0e2:	e1d8      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0e4:	2380      	movs	r3, #128	; 0x80
 800a0e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0ea:	e1d4      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a0ec:	697b      	ldr	r3, [r7, #20]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	4a4f      	ldr	r2, [pc, #316]	; (800a230 <UART_SetConfig+0x340>)
 800a0f2:	4293      	cmp	r3, r2
 800a0f4:	d130      	bne.n	800a158 <UART_SetConfig+0x268>
 800a0f6:	4b4c      	ldr	r3, [pc, #304]	; (800a228 <UART_SetConfig+0x338>)
 800a0f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a0fa:	f003 0307 	and.w	r3, r3, #7
 800a0fe:	2b05      	cmp	r3, #5
 800a100:	d826      	bhi.n	800a150 <UART_SetConfig+0x260>
 800a102:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <UART_SetConfig+0x218>)
 800a104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a108:	0800a121 	.word	0x0800a121
 800a10c:	0800a129 	.word	0x0800a129
 800a110:	0800a131 	.word	0x0800a131
 800a114:	0800a139 	.word	0x0800a139
 800a118:	0800a141 	.word	0x0800a141
 800a11c:	0800a149 	.word	0x0800a149
 800a120:	2300      	movs	r3, #0
 800a122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a126:	e1b6      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a128:	2304      	movs	r3, #4
 800a12a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a12e:	e1b2      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a130:	2308      	movs	r3, #8
 800a132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a136:	e1ae      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a138:	2310      	movs	r3, #16
 800a13a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a13e:	e1aa      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a140:	2320      	movs	r3, #32
 800a142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a146:	e1a6      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a148:	2340      	movs	r3, #64	; 0x40
 800a14a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a14e:	e1a2      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a150:	2380      	movs	r3, #128	; 0x80
 800a152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a156:	e19e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a158:	697b      	ldr	r3, [r7, #20]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	4a35      	ldr	r2, [pc, #212]	; (800a234 <UART_SetConfig+0x344>)
 800a15e:	4293      	cmp	r3, r2
 800a160:	d130      	bne.n	800a1c4 <UART_SetConfig+0x2d4>
 800a162:	4b31      	ldr	r3, [pc, #196]	; (800a228 <UART_SetConfig+0x338>)
 800a164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a166:	f003 0307 	and.w	r3, r3, #7
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	d826      	bhi.n	800a1bc <UART_SetConfig+0x2cc>
 800a16e:	a201      	add	r2, pc, #4	; (adr r2, 800a174 <UART_SetConfig+0x284>)
 800a170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a174:	0800a18d 	.word	0x0800a18d
 800a178:	0800a195 	.word	0x0800a195
 800a17c:	0800a19d 	.word	0x0800a19d
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1ad 	.word	0x0800a1ad
 800a188:	0800a1b5 	.word	0x0800a1b5
 800a18c:	2300      	movs	r3, #0
 800a18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a192:	e180      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a194:	2304      	movs	r3, #4
 800a196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a19a:	e17c      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a19c:	2308      	movs	r3, #8
 800a19e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1a2:	e178      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a1a4:	2310      	movs	r3, #16
 800a1a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1aa:	e174      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a1ac:	2320      	movs	r3, #32
 800a1ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1b2:	e170      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a1b4:	2340      	movs	r3, #64	; 0x40
 800a1b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ba:	e16c      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a1bc:	2380      	movs	r3, #128	; 0x80
 800a1be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1c2:	e168      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a1c4:	697b      	ldr	r3, [r7, #20]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	4a1b      	ldr	r2, [pc, #108]	; (800a238 <UART_SetConfig+0x348>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d142      	bne.n	800a254 <UART_SetConfig+0x364>
 800a1ce:	4b16      	ldr	r3, [pc, #88]	; (800a228 <UART_SetConfig+0x338>)
 800a1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1d2:	f003 0307 	and.w	r3, r3, #7
 800a1d6:	2b05      	cmp	r3, #5
 800a1d8:	d838      	bhi.n	800a24c <UART_SetConfig+0x35c>
 800a1da:	a201      	add	r2, pc, #4	; (adr r2, 800a1e0 <UART_SetConfig+0x2f0>)
 800a1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e0:	0800a1f9 	.word	0x0800a1f9
 800a1e4:	0800a201 	.word	0x0800a201
 800a1e8:	0800a209 	.word	0x0800a209
 800a1ec:	0800a211 	.word	0x0800a211
 800a1f0:	0800a23d 	.word	0x0800a23d
 800a1f4:	0800a245 	.word	0x0800a245
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fe:	e14a      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a200:	2304      	movs	r3, #4
 800a202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a206:	e146      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a208:	2308      	movs	r3, #8
 800a20a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a20e:	e142      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a210:	2310      	movs	r3, #16
 800a212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a216:	e13e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a218:	cfff69f3 	.word	0xcfff69f3
 800a21c:	58000c00 	.word	0x58000c00
 800a220:	11fff4ff 	.word	0x11fff4ff
 800a224:	40011000 	.word	0x40011000
 800a228:	58024400 	.word	0x58024400
 800a22c:	40004400 	.word	0x40004400
 800a230:	40004800 	.word	0x40004800
 800a234:	40004c00 	.word	0x40004c00
 800a238:	40005000 	.word	0x40005000
 800a23c:	2320      	movs	r3, #32
 800a23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a242:	e128      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a244:	2340      	movs	r3, #64	; 0x40
 800a246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24a:	e124      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a24c:	2380      	movs	r3, #128	; 0x80
 800a24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a252:	e120      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a254:	697b      	ldr	r3, [r7, #20]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	4acb      	ldr	r2, [pc, #812]	; (800a588 <UART_SetConfig+0x698>)
 800a25a:	4293      	cmp	r3, r2
 800a25c:	d176      	bne.n	800a34c <UART_SetConfig+0x45c>
 800a25e:	4bcb      	ldr	r3, [pc, #812]	; (800a58c <UART_SetConfig+0x69c>)
 800a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a262:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a266:	2b28      	cmp	r3, #40	; 0x28
 800a268:	d86c      	bhi.n	800a344 <UART_SetConfig+0x454>
 800a26a:	a201      	add	r2, pc, #4	; (adr r2, 800a270 <UART_SetConfig+0x380>)
 800a26c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a270:	0800a315 	.word	0x0800a315
 800a274:	0800a345 	.word	0x0800a345
 800a278:	0800a345 	.word	0x0800a345
 800a27c:	0800a345 	.word	0x0800a345
 800a280:	0800a345 	.word	0x0800a345
 800a284:	0800a345 	.word	0x0800a345
 800a288:	0800a345 	.word	0x0800a345
 800a28c:	0800a345 	.word	0x0800a345
 800a290:	0800a31d 	.word	0x0800a31d
 800a294:	0800a345 	.word	0x0800a345
 800a298:	0800a345 	.word	0x0800a345
 800a29c:	0800a345 	.word	0x0800a345
 800a2a0:	0800a345 	.word	0x0800a345
 800a2a4:	0800a345 	.word	0x0800a345
 800a2a8:	0800a345 	.word	0x0800a345
 800a2ac:	0800a345 	.word	0x0800a345
 800a2b0:	0800a325 	.word	0x0800a325
 800a2b4:	0800a345 	.word	0x0800a345
 800a2b8:	0800a345 	.word	0x0800a345
 800a2bc:	0800a345 	.word	0x0800a345
 800a2c0:	0800a345 	.word	0x0800a345
 800a2c4:	0800a345 	.word	0x0800a345
 800a2c8:	0800a345 	.word	0x0800a345
 800a2cc:	0800a345 	.word	0x0800a345
 800a2d0:	0800a32d 	.word	0x0800a32d
 800a2d4:	0800a345 	.word	0x0800a345
 800a2d8:	0800a345 	.word	0x0800a345
 800a2dc:	0800a345 	.word	0x0800a345
 800a2e0:	0800a345 	.word	0x0800a345
 800a2e4:	0800a345 	.word	0x0800a345
 800a2e8:	0800a345 	.word	0x0800a345
 800a2ec:	0800a345 	.word	0x0800a345
 800a2f0:	0800a335 	.word	0x0800a335
 800a2f4:	0800a345 	.word	0x0800a345
 800a2f8:	0800a345 	.word	0x0800a345
 800a2fc:	0800a345 	.word	0x0800a345
 800a300:	0800a345 	.word	0x0800a345
 800a304:	0800a345 	.word	0x0800a345
 800a308:	0800a345 	.word	0x0800a345
 800a30c:	0800a345 	.word	0x0800a345
 800a310:	0800a33d 	.word	0x0800a33d
 800a314:	2301      	movs	r3, #1
 800a316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a31a:	e0bc      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a31c:	2304      	movs	r3, #4
 800a31e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a322:	e0b8      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a324:	2308      	movs	r3, #8
 800a326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a32a:	e0b4      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a32c:	2310      	movs	r3, #16
 800a32e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a332:	e0b0      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a334:	2320      	movs	r3, #32
 800a336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a33a:	e0ac      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a33c:	2340      	movs	r3, #64	; 0x40
 800a33e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a342:	e0a8      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a344:	2380      	movs	r3, #128	; 0x80
 800a346:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a34a:	e0a4      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a34c:	697b      	ldr	r3, [r7, #20]
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a8f      	ldr	r2, [pc, #572]	; (800a590 <UART_SetConfig+0x6a0>)
 800a352:	4293      	cmp	r3, r2
 800a354:	d130      	bne.n	800a3b8 <UART_SetConfig+0x4c8>
 800a356:	4b8d      	ldr	r3, [pc, #564]	; (800a58c <UART_SetConfig+0x69c>)
 800a358:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a35a:	f003 0307 	and.w	r3, r3, #7
 800a35e:	2b05      	cmp	r3, #5
 800a360:	d826      	bhi.n	800a3b0 <UART_SetConfig+0x4c0>
 800a362:	a201      	add	r2, pc, #4	; (adr r2, 800a368 <UART_SetConfig+0x478>)
 800a364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a368:	0800a381 	.word	0x0800a381
 800a36c:	0800a389 	.word	0x0800a389
 800a370:	0800a391 	.word	0x0800a391
 800a374:	0800a399 	.word	0x0800a399
 800a378:	0800a3a1 	.word	0x0800a3a1
 800a37c:	0800a3a9 	.word	0x0800a3a9
 800a380:	2300      	movs	r3, #0
 800a382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a386:	e086      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a388:	2304      	movs	r3, #4
 800a38a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a38e:	e082      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a390:	2308      	movs	r3, #8
 800a392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a396:	e07e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a398:	2310      	movs	r3, #16
 800a39a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a39e:	e07a      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a3a0:	2320      	movs	r3, #32
 800a3a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3a6:	e076      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a3a8:	2340      	movs	r3, #64	; 0x40
 800a3aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3ae:	e072      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a3b0:	2380      	movs	r3, #128	; 0x80
 800a3b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3b6:	e06e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	4a75      	ldr	r2, [pc, #468]	; (800a594 <UART_SetConfig+0x6a4>)
 800a3be:	4293      	cmp	r3, r2
 800a3c0:	d130      	bne.n	800a424 <UART_SetConfig+0x534>
 800a3c2:	4b72      	ldr	r3, [pc, #456]	; (800a58c <UART_SetConfig+0x69c>)
 800a3c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3c6:	f003 0307 	and.w	r3, r3, #7
 800a3ca:	2b05      	cmp	r3, #5
 800a3cc:	d826      	bhi.n	800a41c <UART_SetConfig+0x52c>
 800a3ce:	a201      	add	r2, pc, #4	; (adr r2, 800a3d4 <UART_SetConfig+0x4e4>)
 800a3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a3d4:	0800a3ed 	.word	0x0800a3ed
 800a3d8:	0800a3f5 	.word	0x0800a3f5
 800a3dc:	0800a3fd 	.word	0x0800a3fd
 800a3e0:	0800a405 	.word	0x0800a405
 800a3e4:	0800a40d 	.word	0x0800a40d
 800a3e8:	0800a415 	.word	0x0800a415
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3f2:	e050      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a3f4:	2304      	movs	r3, #4
 800a3f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a3fa:	e04c      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a3fc:	2308      	movs	r3, #8
 800a3fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a402:	e048      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a404:	2310      	movs	r3, #16
 800a406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a40a:	e044      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a40c:	2320      	movs	r3, #32
 800a40e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a412:	e040      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a414:	2340      	movs	r3, #64	; 0x40
 800a416:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a41a:	e03c      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a41c:	2380      	movs	r3, #128	; 0x80
 800a41e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a422:	e038      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a424:	697b      	ldr	r3, [r7, #20]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	4a5b      	ldr	r2, [pc, #364]	; (800a598 <UART_SetConfig+0x6a8>)
 800a42a:	4293      	cmp	r3, r2
 800a42c:	d130      	bne.n	800a490 <UART_SetConfig+0x5a0>
 800a42e:	4b57      	ldr	r3, [pc, #348]	; (800a58c <UART_SetConfig+0x69c>)
 800a430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a432:	f003 0307 	and.w	r3, r3, #7
 800a436:	2b05      	cmp	r3, #5
 800a438:	d826      	bhi.n	800a488 <UART_SetConfig+0x598>
 800a43a:	a201      	add	r2, pc, #4	; (adr r2, 800a440 <UART_SetConfig+0x550>)
 800a43c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a440:	0800a459 	.word	0x0800a459
 800a444:	0800a461 	.word	0x0800a461
 800a448:	0800a469 	.word	0x0800a469
 800a44c:	0800a471 	.word	0x0800a471
 800a450:	0800a479 	.word	0x0800a479
 800a454:	0800a481 	.word	0x0800a481
 800a458:	2302      	movs	r3, #2
 800a45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a45e:	e01a      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a460:	2304      	movs	r3, #4
 800a462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a466:	e016      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a468:	2308      	movs	r3, #8
 800a46a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a46e:	e012      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a470:	2310      	movs	r3, #16
 800a472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a476:	e00e      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a478:	2320      	movs	r3, #32
 800a47a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a47e:	e00a      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a480:	2340      	movs	r3, #64	; 0x40
 800a482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a486:	e006      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a488:	2380      	movs	r3, #128	; 0x80
 800a48a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a48e:	e002      	b.n	800a496 <UART_SetConfig+0x5a6>
 800a490:	2380      	movs	r3, #128	; 0x80
 800a492:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a496:	697b      	ldr	r3, [r7, #20]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a3f      	ldr	r2, [pc, #252]	; (800a598 <UART_SetConfig+0x6a8>)
 800a49c:	4293      	cmp	r3, r2
 800a49e:	f040 80f8 	bne.w	800a692 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a4a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a4a6:	2b20      	cmp	r3, #32
 800a4a8:	dc46      	bgt.n	800a538 <UART_SetConfig+0x648>
 800a4aa:	2b02      	cmp	r3, #2
 800a4ac:	f2c0 8082 	blt.w	800a5b4 <UART_SetConfig+0x6c4>
 800a4b0:	3b02      	subs	r3, #2
 800a4b2:	2b1e      	cmp	r3, #30
 800a4b4:	d87e      	bhi.n	800a5b4 <UART_SetConfig+0x6c4>
 800a4b6:	a201      	add	r2, pc, #4	; (adr r2, 800a4bc <UART_SetConfig+0x5cc>)
 800a4b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4bc:	0800a53f 	.word	0x0800a53f
 800a4c0:	0800a5b5 	.word	0x0800a5b5
 800a4c4:	0800a547 	.word	0x0800a547
 800a4c8:	0800a5b5 	.word	0x0800a5b5
 800a4cc:	0800a5b5 	.word	0x0800a5b5
 800a4d0:	0800a5b5 	.word	0x0800a5b5
 800a4d4:	0800a557 	.word	0x0800a557
 800a4d8:	0800a5b5 	.word	0x0800a5b5
 800a4dc:	0800a5b5 	.word	0x0800a5b5
 800a4e0:	0800a5b5 	.word	0x0800a5b5
 800a4e4:	0800a5b5 	.word	0x0800a5b5
 800a4e8:	0800a5b5 	.word	0x0800a5b5
 800a4ec:	0800a5b5 	.word	0x0800a5b5
 800a4f0:	0800a5b5 	.word	0x0800a5b5
 800a4f4:	0800a567 	.word	0x0800a567
 800a4f8:	0800a5b5 	.word	0x0800a5b5
 800a4fc:	0800a5b5 	.word	0x0800a5b5
 800a500:	0800a5b5 	.word	0x0800a5b5
 800a504:	0800a5b5 	.word	0x0800a5b5
 800a508:	0800a5b5 	.word	0x0800a5b5
 800a50c:	0800a5b5 	.word	0x0800a5b5
 800a510:	0800a5b5 	.word	0x0800a5b5
 800a514:	0800a5b5 	.word	0x0800a5b5
 800a518:	0800a5b5 	.word	0x0800a5b5
 800a51c:	0800a5b5 	.word	0x0800a5b5
 800a520:	0800a5b5 	.word	0x0800a5b5
 800a524:	0800a5b5 	.word	0x0800a5b5
 800a528:	0800a5b5 	.word	0x0800a5b5
 800a52c:	0800a5b5 	.word	0x0800a5b5
 800a530:	0800a5b5 	.word	0x0800a5b5
 800a534:	0800a5a7 	.word	0x0800a5a7
 800a538:	2b40      	cmp	r3, #64	; 0x40
 800a53a:	d037      	beq.n	800a5ac <UART_SetConfig+0x6bc>
 800a53c:	e03a      	b.n	800a5b4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a53e:	f7fe f8c5 	bl	80086cc <HAL_RCCEx_GetD3PCLK1Freq>
 800a542:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a544:	e03c      	b.n	800a5c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe f8d4 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a554:	e034      	b.n	800a5c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a556:	f107 0318 	add.w	r3, r7, #24
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe fa20 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a560:	69fb      	ldr	r3, [r7, #28]
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a564:	e02c      	b.n	800a5c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a566:	4b09      	ldr	r3, [pc, #36]	; (800a58c <UART_SetConfig+0x69c>)
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f003 0320 	and.w	r3, r3, #32
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d016      	beq.n	800a5a0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a572:	4b06      	ldr	r3, [pc, #24]	; (800a58c <UART_SetConfig+0x69c>)
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	08db      	lsrs	r3, r3, #3
 800a578:	f003 0303 	and.w	r3, r3, #3
 800a57c:	4a07      	ldr	r2, [pc, #28]	; (800a59c <UART_SetConfig+0x6ac>)
 800a57e:	fa22 f303 	lsr.w	r3, r2, r3
 800a582:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a584:	e01c      	b.n	800a5c0 <UART_SetConfig+0x6d0>
 800a586:	bf00      	nop
 800a588:	40011400 	.word	0x40011400
 800a58c:	58024400 	.word	0x58024400
 800a590:	40007800 	.word	0x40007800
 800a594:	40007c00 	.word	0x40007c00
 800a598:	58000c00 	.word	0x58000c00
 800a59c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a5a0:	4b9d      	ldr	r3, [pc, #628]	; (800a818 <UART_SetConfig+0x928>)
 800a5a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5a4:	e00c      	b.n	800a5c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a5a6:	4b9d      	ldr	r3, [pc, #628]	; (800a81c <UART_SetConfig+0x92c>)
 800a5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5aa:	e009      	b.n	800a5c0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a5b2:	e005      	b.n	800a5c0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a5be:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a5c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	f000 81de 	beq.w	800a984 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a5c8:	697b      	ldr	r3, [r7, #20]
 800a5ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5cc:	4a94      	ldr	r2, [pc, #592]	; (800a820 <UART_SetConfig+0x930>)
 800a5ce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a5d2:	461a      	mov	r2, r3
 800a5d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a5d6:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5da:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	685a      	ldr	r2, [r3, #4]
 800a5e0:	4613      	mov	r3, r2
 800a5e2:	005b      	lsls	r3, r3, #1
 800a5e4:	4413      	add	r3, r2
 800a5e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5e8:	429a      	cmp	r2, r3
 800a5ea:	d305      	bcc.n	800a5f8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a5ec:	697b      	ldr	r3, [r7, #20]
 800a5ee:	685b      	ldr	r3, [r3, #4]
 800a5f0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a5f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d903      	bls.n	800a600 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5fe:	e1c1      	b.n	800a984 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a602:	2200      	movs	r2, #0
 800a604:	60bb      	str	r3, [r7, #8]
 800a606:	60fa      	str	r2, [r7, #12]
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a60c:	4a84      	ldr	r2, [pc, #528]	; (800a820 <UART_SetConfig+0x930>)
 800a60e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a612:	b29b      	uxth	r3, r3
 800a614:	2200      	movs	r2, #0
 800a616:	603b      	str	r3, [r7, #0]
 800a618:	607a      	str	r2, [r7, #4]
 800a61a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a61e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a622:	f7f5 fead 	bl	8000380 <__aeabi_uldivmod>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4610      	mov	r0, r2
 800a62c:	4619      	mov	r1, r3
 800a62e:	f04f 0200 	mov.w	r2, #0
 800a632:	f04f 0300 	mov.w	r3, #0
 800a636:	020b      	lsls	r3, r1, #8
 800a638:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a63c:	0202      	lsls	r2, r0, #8
 800a63e:	6979      	ldr	r1, [r7, #20]
 800a640:	6849      	ldr	r1, [r1, #4]
 800a642:	0849      	lsrs	r1, r1, #1
 800a644:	2000      	movs	r0, #0
 800a646:	460c      	mov	r4, r1
 800a648:	4605      	mov	r5, r0
 800a64a:	eb12 0804 	adds.w	r8, r2, r4
 800a64e:	eb43 0905 	adc.w	r9, r3, r5
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	2200      	movs	r2, #0
 800a658:	469a      	mov	sl, r3
 800a65a:	4693      	mov	fp, r2
 800a65c:	4652      	mov	r2, sl
 800a65e:	465b      	mov	r3, fp
 800a660:	4640      	mov	r0, r8
 800a662:	4649      	mov	r1, r9
 800a664:	f7f5 fe8c 	bl	8000380 <__aeabi_uldivmod>
 800a668:	4602      	mov	r2, r0
 800a66a:	460b      	mov	r3, r1
 800a66c:	4613      	mov	r3, r2
 800a66e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a672:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a676:	d308      	bcc.n	800a68a <UART_SetConfig+0x79a>
 800a678:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a67a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a67e:	d204      	bcs.n	800a68a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a686:	60da      	str	r2, [r3, #12]
 800a688:	e17c      	b.n	800a984 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a68a:	2301      	movs	r3, #1
 800a68c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a690:	e178      	b.n	800a984 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	69db      	ldr	r3, [r3, #28]
 800a696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a69a:	f040 80c5 	bne.w	800a828 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a69e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a6a2:	2b20      	cmp	r3, #32
 800a6a4:	dc48      	bgt.n	800a738 <UART_SetConfig+0x848>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	db7b      	blt.n	800a7a2 <UART_SetConfig+0x8b2>
 800a6aa:	2b20      	cmp	r3, #32
 800a6ac:	d879      	bhi.n	800a7a2 <UART_SetConfig+0x8b2>
 800a6ae:	a201      	add	r2, pc, #4	; (adr r2, 800a6b4 <UART_SetConfig+0x7c4>)
 800a6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6b4:	0800a73f 	.word	0x0800a73f
 800a6b8:	0800a747 	.word	0x0800a747
 800a6bc:	0800a7a3 	.word	0x0800a7a3
 800a6c0:	0800a7a3 	.word	0x0800a7a3
 800a6c4:	0800a74f 	.word	0x0800a74f
 800a6c8:	0800a7a3 	.word	0x0800a7a3
 800a6cc:	0800a7a3 	.word	0x0800a7a3
 800a6d0:	0800a7a3 	.word	0x0800a7a3
 800a6d4:	0800a75f 	.word	0x0800a75f
 800a6d8:	0800a7a3 	.word	0x0800a7a3
 800a6dc:	0800a7a3 	.word	0x0800a7a3
 800a6e0:	0800a7a3 	.word	0x0800a7a3
 800a6e4:	0800a7a3 	.word	0x0800a7a3
 800a6e8:	0800a7a3 	.word	0x0800a7a3
 800a6ec:	0800a7a3 	.word	0x0800a7a3
 800a6f0:	0800a7a3 	.word	0x0800a7a3
 800a6f4:	0800a76f 	.word	0x0800a76f
 800a6f8:	0800a7a3 	.word	0x0800a7a3
 800a6fc:	0800a7a3 	.word	0x0800a7a3
 800a700:	0800a7a3 	.word	0x0800a7a3
 800a704:	0800a7a3 	.word	0x0800a7a3
 800a708:	0800a7a3 	.word	0x0800a7a3
 800a70c:	0800a7a3 	.word	0x0800a7a3
 800a710:	0800a7a3 	.word	0x0800a7a3
 800a714:	0800a7a3 	.word	0x0800a7a3
 800a718:	0800a7a3 	.word	0x0800a7a3
 800a71c:	0800a7a3 	.word	0x0800a7a3
 800a720:	0800a7a3 	.word	0x0800a7a3
 800a724:	0800a7a3 	.word	0x0800a7a3
 800a728:	0800a7a3 	.word	0x0800a7a3
 800a72c:	0800a7a3 	.word	0x0800a7a3
 800a730:	0800a7a3 	.word	0x0800a7a3
 800a734:	0800a795 	.word	0x0800a795
 800a738:	2b40      	cmp	r3, #64	; 0x40
 800a73a:	d02e      	beq.n	800a79a <UART_SetConfig+0x8aa>
 800a73c:	e031      	b.n	800a7a2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a73e:	f7fd f853 	bl	80077e8 <HAL_RCC_GetPCLK1Freq>
 800a742:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a744:	e033      	b.n	800a7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a746:	f7fd f865 	bl	8007814 <HAL_RCC_GetPCLK2Freq>
 800a74a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a74c:	e02f      	b.n	800a7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a74e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a752:	4618      	mov	r0, r3
 800a754:	f7fd ffd0 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a758:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a75a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a75c:	e027      	b.n	800a7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a75e:	f107 0318 	add.w	r3, r7, #24
 800a762:	4618      	mov	r0, r3
 800a764:	f7fe f91c 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a76c:	e01f      	b.n	800a7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a76e:	4b2d      	ldr	r3, [pc, #180]	; (800a824 <UART_SetConfig+0x934>)
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	f003 0320 	and.w	r3, r3, #32
 800a776:	2b00      	cmp	r3, #0
 800a778:	d009      	beq.n	800a78e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a77a:	4b2a      	ldr	r3, [pc, #168]	; (800a824 <UART_SetConfig+0x934>)
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	08db      	lsrs	r3, r3, #3
 800a780:	f003 0303 	and.w	r3, r3, #3
 800a784:	4a24      	ldr	r2, [pc, #144]	; (800a818 <UART_SetConfig+0x928>)
 800a786:	fa22 f303 	lsr.w	r3, r2, r3
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a78c:	e00f      	b.n	800a7ae <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a78e:	4b22      	ldr	r3, [pc, #136]	; (800a818 <UART_SetConfig+0x928>)
 800a790:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a792:	e00c      	b.n	800a7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a794:	4b21      	ldr	r3, [pc, #132]	; (800a81c <UART_SetConfig+0x92c>)
 800a796:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a798:	e009      	b.n	800a7ae <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a79a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a79e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a7a0:	e005      	b.n	800a7ae <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a7a6:	2301      	movs	r3, #1
 800a7a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a7ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a7ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	f000 80e7 	beq.w	800a984 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a7b6:	697b      	ldr	r3, [r7, #20]
 800a7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ba:	4a19      	ldr	r2, [pc, #100]	; (800a820 <UART_SetConfig+0x930>)
 800a7bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a7c0:	461a      	mov	r2, r3
 800a7c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7c4:	fbb3 f3f2 	udiv	r3, r3, r2
 800a7c8:	005a      	lsls	r2, r3, #1
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	685b      	ldr	r3, [r3, #4]
 800a7ce:	085b      	lsrs	r3, r3, #1
 800a7d0:	441a      	add	r2, r3
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	685b      	ldr	r3, [r3, #4]
 800a7d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a7da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7de:	2b0f      	cmp	r3, #15
 800a7e0:	d916      	bls.n	800a810 <UART_SetConfig+0x920>
 800a7e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a7e8:	d212      	bcs.n	800a810 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a7ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7ec:	b29b      	uxth	r3, r3
 800a7ee:	f023 030f 	bic.w	r3, r3, #15
 800a7f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7f6:	085b      	lsrs	r3, r3, #1
 800a7f8:	b29b      	uxth	r3, r3
 800a7fa:	f003 0307 	and.w	r3, r3, #7
 800a7fe:	b29a      	uxth	r2, r3
 800a800:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a802:	4313      	orrs	r3, r2
 800a804:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a80c:	60da      	str	r2, [r3, #12]
 800a80e:	e0b9      	b.n	800a984 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a810:	2301      	movs	r3, #1
 800a812:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a816:	e0b5      	b.n	800a984 <UART_SetConfig+0xa94>
 800a818:	03d09000 	.word	0x03d09000
 800a81c:	003d0900 	.word	0x003d0900
 800a820:	0800d668 	.word	0x0800d668
 800a824:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a828:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a82c:	2b20      	cmp	r3, #32
 800a82e:	dc49      	bgt.n	800a8c4 <UART_SetConfig+0x9d4>
 800a830:	2b00      	cmp	r3, #0
 800a832:	db7c      	blt.n	800a92e <UART_SetConfig+0xa3e>
 800a834:	2b20      	cmp	r3, #32
 800a836:	d87a      	bhi.n	800a92e <UART_SetConfig+0xa3e>
 800a838:	a201      	add	r2, pc, #4	; (adr r2, 800a840 <UART_SetConfig+0x950>)
 800a83a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a83e:	bf00      	nop
 800a840:	0800a8cb 	.word	0x0800a8cb
 800a844:	0800a8d3 	.word	0x0800a8d3
 800a848:	0800a92f 	.word	0x0800a92f
 800a84c:	0800a92f 	.word	0x0800a92f
 800a850:	0800a8db 	.word	0x0800a8db
 800a854:	0800a92f 	.word	0x0800a92f
 800a858:	0800a92f 	.word	0x0800a92f
 800a85c:	0800a92f 	.word	0x0800a92f
 800a860:	0800a8eb 	.word	0x0800a8eb
 800a864:	0800a92f 	.word	0x0800a92f
 800a868:	0800a92f 	.word	0x0800a92f
 800a86c:	0800a92f 	.word	0x0800a92f
 800a870:	0800a92f 	.word	0x0800a92f
 800a874:	0800a92f 	.word	0x0800a92f
 800a878:	0800a92f 	.word	0x0800a92f
 800a87c:	0800a92f 	.word	0x0800a92f
 800a880:	0800a8fb 	.word	0x0800a8fb
 800a884:	0800a92f 	.word	0x0800a92f
 800a888:	0800a92f 	.word	0x0800a92f
 800a88c:	0800a92f 	.word	0x0800a92f
 800a890:	0800a92f 	.word	0x0800a92f
 800a894:	0800a92f 	.word	0x0800a92f
 800a898:	0800a92f 	.word	0x0800a92f
 800a89c:	0800a92f 	.word	0x0800a92f
 800a8a0:	0800a92f 	.word	0x0800a92f
 800a8a4:	0800a92f 	.word	0x0800a92f
 800a8a8:	0800a92f 	.word	0x0800a92f
 800a8ac:	0800a92f 	.word	0x0800a92f
 800a8b0:	0800a92f 	.word	0x0800a92f
 800a8b4:	0800a92f 	.word	0x0800a92f
 800a8b8:	0800a92f 	.word	0x0800a92f
 800a8bc:	0800a92f 	.word	0x0800a92f
 800a8c0:	0800a921 	.word	0x0800a921
 800a8c4:	2b40      	cmp	r3, #64	; 0x40
 800a8c6:	d02e      	beq.n	800a926 <UART_SetConfig+0xa36>
 800a8c8:	e031      	b.n	800a92e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8ca:	f7fc ff8d 	bl	80077e8 <HAL_RCC_GetPCLK1Freq>
 800a8ce:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8d0:	e033      	b.n	800a93a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8d2:	f7fc ff9f 	bl	8007814 <HAL_RCC_GetPCLK2Freq>
 800a8d6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a8d8:	e02f      	b.n	800a93a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a8da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a8de:	4618      	mov	r0, r3
 800a8e0:	f7fd ff0a 	bl	80086f8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8e8:	e027      	b.n	800a93a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a8ea:	f107 0318 	add.w	r3, r7, #24
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f7fe f856 	bl	80089a0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a8f8:	e01f      	b.n	800a93a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a8fa:	4b2d      	ldr	r3, [pc, #180]	; (800a9b0 <UART_SetConfig+0xac0>)
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f003 0320 	and.w	r3, r3, #32
 800a902:	2b00      	cmp	r3, #0
 800a904:	d009      	beq.n	800a91a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a906:	4b2a      	ldr	r3, [pc, #168]	; (800a9b0 <UART_SetConfig+0xac0>)
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	08db      	lsrs	r3, r3, #3
 800a90c:	f003 0303 	and.w	r3, r3, #3
 800a910:	4a28      	ldr	r2, [pc, #160]	; (800a9b4 <UART_SetConfig+0xac4>)
 800a912:	fa22 f303 	lsr.w	r3, r2, r3
 800a916:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a918:	e00f      	b.n	800a93a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a91a:	4b26      	ldr	r3, [pc, #152]	; (800a9b4 <UART_SetConfig+0xac4>)
 800a91c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a91e:	e00c      	b.n	800a93a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a920:	4b25      	ldr	r3, [pc, #148]	; (800a9b8 <UART_SetConfig+0xac8>)
 800a922:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a924:	e009      	b.n	800a93a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a926:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a92a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a92c:	e005      	b.n	800a93a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a92e:	2300      	movs	r3, #0
 800a930:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a938:	bf00      	nop
    }

    if (pclk != 0U)
 800a93a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d021      	beq.n	800a984 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a944:	4a1d      	ldr	r2, [pc, #116]	; (800a9bc <UART_SetConfig+0xacc>)
 800a946:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a94a:	461a      	mov	r2, r3
 800a94c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a94e:	fbb3 f2f2 	udiv	r2, r3, r2
 800a952:	697b      	ldr	r3, [r7, #20]
 800a954:	685b      	ldr	r3, [r3, #4]
 800a956:	085b      	lsrs	r3, r3, #1
 800a958:	441a      	add	r2, r3
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	685b      	ldr	r3, [r3, #4]
 800a95e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a962:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a966:	2b0f      	cmp	r3, #15
 800a968:	d909      	bls.n	800a97e <UART_SetConfig+0xa8e>
 800a96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a96c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a970:	d205      	bcs.n	800a97e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a974:	b29a      	uxth	r2, r3
 800a976:	697b      	ldr	r3, [r7, #20]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	60da      	str	r2, [r3, #12]
 800a97c:	e002      	b.n	800a984 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a97e:	2301      	movs	r3, #1
 800a980:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	2201      	movs	r2, #1
 800a988:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a98c:	697b      	ldr	r3, [r7, #20]
 800a98e:	2201      	movs	r2, #1
 800a990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a994:	697b      	ldr	r3, [r7, #20]
 800a996:	2200      	movs	r2, #0
 800a998:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a99a:	697b      	ldr	r3, [r7, #20]
 800a99c:	2200      	movs	r2, #0
 800a99e:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a9a0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	3748      	adds	r7, #72	; 0x48
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9ae:	bf00      	nop
 800a9b0:	58024400 	.word	0x58024400
 800a9b4:	03d09000 	.word	0x03d09000
 800a9b8:	003d0900 	.word	0x003d0900
 800a9bc:	0800d668 	.word	0x0800d668

0800a9c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a9c0:	b480      	push	{r7}
 800a9c2:	b083      	sub	sp, #12
 800a9c4:	af00      	add	r7, sp, #0
 800a9c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9cc:	f003 0301 	and.w	r3, r3, #1
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d00a      	beq.n	800a9ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	430a      	orrs	r2, r1
 800a9e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9ee:	f003 0302 	and.w	r3, r3, #2
 800a9f2:	2b00      	cmp	r3, #0
 800a9f4:	d00a      	beq.n	800aa0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	685b      	ldr	r3, [r3, #4]
 800a9fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	430a      	orrs	r2, r1
 800aa0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa10:	f003 0304 	and.w	r3, r3, #4
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	d00a      	beq.n	800aa2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685b      	ldr	r3, [r3, #4]
 800aa1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	430a      	orrs	r2, r1
 800aa2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa32:	f003 0308 	and.w	r3, r3, #8
 800aa36:	2b00      	cmp	r3, #0
 800aa38:	d00a      	beq.n	800aa50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681b      	ldr	r3, [r3, #0]
 800aa3e:	685b      	ldr	r3, [r3, #4]
 800aa40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	430a      	orrs	r2, r1
 800aa4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa54:	f003 0310 	and.w	r3, r3, #16
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d00a      	beq.n	800aa72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	681b      	ldr	r3, [r3, #0]
 800aa6e:	430a      	orrs	r2, r1
 800aa70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa76:	f003 0320 	and.w	r3, r3, #32
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00a      	beq.n	800aa94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	689b      	ldr	r3, [r3, #8]
 800aa84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	430a      	orrs	r2, r1
 800aa92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d01a      	beq.n	800aad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	685b      	ldr	r3, [r3, #4]
 800aaa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	430a      	orrs	r2, r1
 800aab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aaba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aabe:	d10a      	bne.n	800aad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	685b      	ldr	r3, [r3, #4]
 800aac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	430a      	orrs	r2, r1
 800aad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d00a      	beq.n	800aaf8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	430a      	orrs	r2, r1
 800aaf6:	605a      	str	r2, [r3, #4]
  }
}
 800aaf8:	bf00      	nop
 800aafa:	370c      	adds	r7, #12
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr

0800ab04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab04:	b580      	push	{r7, lr}
 800ab06:	b086      	sub	sp, #24
 800ab08:	af02      	add	r7, sp, #8
 800ab0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	2200      	movs	r2, #0
 800ab10:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab14:	f7f8 fb54 	bl	80031c0 <HAL_GetTick>
 800ab18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f003 0308 	and.w	r3, r3, #8
 800ab24:	2b08      	cmp	r3, #8
 800ab26:	d10e      	bne.n	800ab46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab2c:	9300      	str	r3, [sp, #0]
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	2200      	movs	r2, #0
 800ab32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab36:	6878      	ldr	r0, [r7, #4]
 800ab38:	f000 f82f 	bl	800ab9a <UART_WaitOnFlagUntilTimeout>
 800ab3c:	4603      	mov	r3, r0
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d001      	beq.n	800ab46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab42:	2303      	movs	r3, #3
 800ab44:	e025      	b.n	800ab92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	f003 0304 	and.w	r3, r3, #4
 800ab50:	2b04      	cmp	r3, #4
 800ab52:	d10e      	bne.n	800ab72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab58:	9300      	str	r3, [sp, #0]
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	f000 f819 	bl	800ab9a <UART_WaitOnFlagUntilTimeout>
 800ab68:	4603      	mov	r3, r0
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d001      	beq.n	800ab72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab6e:	2303      	movs	r3, #3
 800ab70:	e00f      	b.n	800ab92 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	2220      	movs	r2, #32
 800ab76:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2220      	movs	r2, #32
 800ab7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ab90:	2300      	movs	r3, #0
}
 800ab92:	4618      	mov	r0, r3
 800ab94:	3710      	adds	r7, #16
 800ab96:	46bd      	mov	sp, r7
 800ab98:	bd80      	pop	{r7, pc}

0800ab9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ab9a:	b580      	push	{r7, lr}
 800ab9c:	b09c      	sub	sp, #112	; 0x70
 800ab9e:	af00      	add	r7, sp, #0
 800aba0:	60f8      	str	r0, [r7, #12]
 800aba2:	60b9      	str	r1, [r7, #8]
 800aba4:	603b      	str	r3, [r7, #0]
 800aba6:	4613      	mov	r3, r2
 800aba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abaa:	e0a9      	b.n	800ad00 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abb2:	f000 80a5 	beq.w	800ad00 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abb6:	f7f8 fb03 	bl	80031c0 <HAL_GetTick>
 800abba:	4602      	mov	r2, r0
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	1ad3      	subs	r3, r2, r3
 800abc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d302      	bcc.n	800abcc <UART_WaitOnFlagUntilTimeout+0x32>
 800abc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d140      	bne.n	800ac4e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800abd4:	e853 3f00 	ldrex	r3, [r3]
 800abd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800abda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800abe0:	667b      	str	r3, [r7, #100]	; 0x64
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	461a      	mov	r2, r3
 800abe8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800abea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800abec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800abf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800abf2:	e841 2300 	strex	r3, r2, [r1]
 800abf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800abf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d1e6      	bne.n	800abcc <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	3308      	adds	r3, #8
 800ac04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac08:	e853 3f00 	ldrex	r3, [r3]
 800ac0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac10:	f023 0301 	bic.w	r3, r3, #1
 800ac14:	663b      	str	r3, [r7, #96]	; 0x60
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	3308      	adds	r3, #8
 800ac1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac1e:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac26:	e841 2300 	strex	r3, r2, [r1]
 800ac2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d1e5      	bne.n	800abfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	2220      	movs	r2, #32
 800ac36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2220      	movs	r2, #32
 800ac3e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	2200      	movs	r2, #0
 800ac46:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800ac4a:	2303      	movs	r3, #3
 800ac4c:	e069      	b.n	800ad22 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f003 0304 	and.w	r3, r3, #4
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d051      	beq.n	800ad00 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	69db      	ldr	r3, [r3, #28]
 800ac62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac6a:	d149      	bne.n	800ad00 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac74:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac7e:	e853 3f00 	ldrex	r3, [r3]
 800ac82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	461a      	mov	r2, r3
 800ac92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ac94:	637b      	str	r3, [r7, #52]	; 0x34
 800ac96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800ac9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac9c:	e841 2300 	strex	r3, r2, [r1]
 800aca0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d1e6      	bne.n	800ac76 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aca8:	68fb      	ldr	r3, [r7, #12]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	3308      	adds	r3, #8
 800acae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	e853 3f00 	ldrex	r3, [r3]
 800acb6:	613b      	str	r3, [r7, #16]
   return(result);
 800acb8:	693b      	ldr	r3, [r7, #16]
 800acba:	f023 0301 	bic.w	r3, r3, #1
 800acbe:	66bb      	str	r3, [r7, #104]	; 0x68
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	3308      	adds	r3, #8
 800acc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800acc8:	623a      	str	r2, [r7, #32]
 800acca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800accc:	69f9      	ldr	r1, [r7, #28]
 800acce:	6a3a      	ldr	r2, [r7, #32]
 800acd0:	e841 2300 	strex	r3, r2, [r1]
 800acd4:	61bb      	str	r3, [r7, #24]
   return(result);
 800acd6:	69bb      	ldr	r3, [r7, #24]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d1e5      	bne.n	800aca8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2220      	movs	r2, #32
 800ace0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2220      	movs	r2, #32
 800ace8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	2220      	movs	r2, #32
 800acf0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800acfc:	2303      	movs	r3, #3
 800acfe:	e010      	b.n	800ad22 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	681b      	ldr	r3, [r3, #0]
 800ad04:	69da      	ldr	r2, [r3, #28]
 800ad06:	68bb      	ldr	r3, [r7, #8]
 800ad08:	4013      	ands	r3, r2
 800ad0a:	68ba      	ldr	r2, [r7, #8]
 800ad0c:	429a      	cmp	r2, r3
 800ad0e:	bf0c      	ite	eq
 800ad10:	2301      	moveq	r3, #1
 800ad12:	2300      	movne	r3, #0
 800ad14:	b2db      	uxtb	r3, r3
 800ad16:	461a      	mov	r2, r3
 800ad18:	79fb      	ldrb	r3, [r7, #7]
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	f43f af46 	beq.w	800abac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3770      	adds	r7, #112	; 0x70
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
	...

0800ad2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ad2c:	b480      	push	{r7}
 800ad2e:	b095      	sub	sp, #84	; 0x54
 800ad30:	af00      	add	r7, sp, #0
 800ad32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad3c:	e853 3f00 	ldrex	r3, [r3]
 800ad40:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ad42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ad48:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	461a      	mov	r2, r3
 800ad50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ad52:	643b      	str	r3, [r7, #64]	; 0x40
 800ad54:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad56:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ad58:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad5a:	e841 2300 	strex	r3, r2, [r1]
 800ad5e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ad60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d1e6      	bne.n	800ad34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	3308      	adds	r3, #8
 800ad6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ad6e:	6a3b      	ldr	r3, [r7, #32]
 800ad70:	e853 3f00 	ldrex	r3, [r3]
 800ad74:	61fb      	str	r3, [r7, #28]
   return(result);
 800ad76:	69fa      	ldr	r2, [r7, #28]
 800ad78:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <UART_EndRxTransfer+0xc8>)
 800ad7a:	4013      	ands	r3, r2
 800ad7c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	3308      	adds	r3, #8
 800ad84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ad86:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ad88:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad8a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ad8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ad8e:	e841 2300 	strex	r3, r2, [r1]
 800ad92:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ad94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d1e5      	bne.n	800ad66 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad9e:	2b01      	cmp	r3, #1
 800ada0:	d118      	bne.n	800add4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	e853 3f00 	ldrex	r3, [r3]
 800adae:	60bb      	str	r3, [r7, #8]
   return(result);
 800adb0:	68bb      	ldr	r3, [r7, #8]
 800adb2:	f023 0310 	bic.w	r3, r3, #16
 800adb6:	647b      	str	r3, [r7, #68]	; 0x44
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800adc0:	61bb      	str	r3, [r7, #24]
 800adc2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800adc4:	6979      	ldr	r1, [r7, #20]
 800adc6:	69ba      	ldr	r2, [r7, #24]
 800adc8:	e841 2300 	strex	r3, r2, [r1]
 800adcc:	613b      	str	r3, [r7, #16]
   return(result);
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	2b00      	cmp	r3, #0
 800add2:	d1e6      	bne.n	800ada2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2220      	movs	r2, #32
 800add8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	2200      	movs	r2, #0
 800ade0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	2200      	movs	r2, #0
 800ade6:	671a      	str	r2, [r3, #112]	; 0x70
}
 800ade8:	bf00      	nop
 800adea:	3754      	adds	r7, #84	; 0x54
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr
 800adf4:	effffffe 	.word	0xeffffffe

0800adf8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800adf8:	b580      	push	{r7, lr}
 800adfa:	b084      	sub	sp, #16
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	2200      	movs	r2, #0
 800ae0a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	2200      	movs	r2, #0
 800ae12:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ae16:	68f8      	ldr	r0, [r7, #12]
 800ae18:	f7ff f854 	bl	8009ec4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}

0800ae24 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b088      	sub	sp, #32
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	e853 3f00 	ldrex	r3, [r3]
 800ae38:	60bb      	str	r3, [r7, #8]
   return(result);
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae40:	61fb      	str	r3, [r7, #28]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	461a      	mov	r2, r3
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	61bb      	str	r3, [r7, #24]
 800ae4c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae4e:	6979      	ldr	r1, [r7, #20]
 800ae50:	69ba      	ldr	r2, [r7, #24]
 800ae52:	e841 2300 	strex	r3, r2, [r1]
 800ae56:	613b      	str	r3, [r7, #16]
   return(result);
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d1e6      	bne.n	800ae2c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	2220      	movs	r2, #32
 800ae62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2200      	movs	r2, #0
 800ae6a:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ae6c:	6878      	ldr	r0, [r7, #4]
 800ae6e:	f7ff f81f 	bl	8009eb0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ae72:	bf00      	nop
 800ae74:	3720      	adds	r7, #32
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}

0800ae7a <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ae7a:	b480      	push	{r7}
 800ae7c:	b083      	sub	sp, #12
 800ae7e:	af00      	add	r7, sp, #0
 800ae80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ae82:	bf00      	nop
 800ae84:	370c      	adds	r7, #12
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr

0800ae8e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ae8e:	b480      	push	{r7}
 800ae90:	b083      	sub	sp, #12
 800ae92:	af00      	add	r7, sp, #0
 800ae94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ae96:	bf00      	nop
 800ae98:	370c      	adds	r7, #12
 800ae9a:	46bd      	mov	sp, r7
 800ae9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea0:	4770      	bx	lr

0800aea2 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800aea2:	b480      	push	{r7}
 800aea4:	b083      	sub	sp, #12
 800aea6:	af00      	add	r7, sp, #0
 800aea8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800aeaa:	bf00      	nop
 800aeac:	370c      	adds	r7, #12
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb4:	4770      	bx	lr

0800aeb6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800aeb6:	b480      	push	{r7}
 800aeb8:	b085      	sub	sp, #20
 800aeba:	af00      	add	r7, sp, #0
 800aebc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800aec4:	2b01      	cmp	r3, #1
 800aec6:	d101      	bne.n	800aecc <HAL_UARTEx_DisableFifoMode+0x16>
 800aec8:	2302      	movs	r3, #2
 800aeca:	e027      	b.n	800af1c <HAL_UARTEx_DisableFifoMode+0x66>
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2224      	movs	r2, #36	; 0x24
 800aed8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	681a      	ldr	r2, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	f022 0201 	bic.w	r2, r2, #1
 800aef2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800aefa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	2200      	movs	r2, #0
 800af00:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	68fa      	ldr	r2, [r7, #12]
 800af08:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	2220      	movs	r2, #32
 800af0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af1a:	2300      	movs	r3, #0
}
 800af1c:	4618      	mov	r0, r3
 800af1e:	3714      	adds	r7, #20
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800af38:	2b01      	cmp	r3, #1
 800af3a:	d101      	bne.n	800af40 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800af3c:	2302      	movs	r3, #2
 800af3e:	e02d      	b.n	800af9c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	2201      	movs	r2, #1
 800af44:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2224      	movs	r2, #36	; 0x24
 800af4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	681a      	ldr	r2, [r3, #0]
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	f022 0201 	bic.w	r2, r2, #1
 800af66:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	681b      	ldr	r3, [r3, #0]
 800af6c:	689b      	ldr	r3, [r3, #8]
 800af6e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	683a      	ldr	r2, [r7, #0]
 800af78:	430a      	orrs	r2, r1
 800af7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800af7c:	6878      	ldr	r0, [r7, #4]
 800af7e:	f000 f84f 	bl	800b020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	2220      	movs	r2, #32
 800af8e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800af9a:	2300      	movs	r3, #0
}
 800af9c:	4618      	mov	r0, r3
 800af9e:	3710      	adds	r7, #16
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b084      	sub	sp, #16
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800afb4:	2b01      	cmp	r3, #1
 800afb6:	d101      	bne.n	800afbc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800afb8:	2302      	movs	r3, #2
 800afba:	e02d      	b.n	800b018 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2224      	movs	r2, #36	; 0x24
 800afc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	681a      	ldr	r2, [r3, #0]
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f022 0201 	bic.w	r2, r2, #1
 800afe2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	689b      	ldr	r3, [r3, #8]
 800afea:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	683a      	ldr	r2, [r7, #0]
 800aff4:	430a      	orrs	r2, r1
 800aff6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800aff8:	6878      	ldr	r0, [r7, #4]
 800affa:	f000 f811 	bl	800b020 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68fa      	ldr	r2, [r7, #12]
 800b004:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2220      	movs	r2, #32
 800b00a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2200      	movs	r2, #0
 800b012:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800b016:	2300      	movs	r3, #0
}
 800b018:	4618      	mov	r0, r3
 800b01a:	3710      	adds	r7, #16
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b020:	b480      	push	{r7}
 800b022:	b085      	sub	sp, #20
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d108      	bne.n	800b042 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	2201      	movs	r2, #1
 800b034:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2201      	movs	r2, #1
 800b03c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b040:	e031      	b.n	800b0a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b042:	2310      	movs	r3, #16
 800b044:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b046:	2310      	movs	r3, #16
 800b048:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	689b      	ldr	r3, [r3, #8]
 800b050:	0e5b      	lsrs	r3, r3, #25
 800b052:	b2db      	uxtb	r3, r3
 800b054:	f003 0307 	and.w	r3, r3, #7
 800b058:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	689b      	ldr	r3, [r3, #8]
 800b060:	0f5b      	lsrs	r3, r3, #29
 800b062:	b2db      	uxtb	r3, r3
 800b064:	f003 0307 	and.w	r3, r3, #7
 800b068:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b06a:	7bbb      	ldrb	r3, [r7, #14]
 800b06c:	7b3a      	ldrb	r2, [r7, #12]
 800b06e:	4911      	ldr	r1, [pc, #68]	; (800b0b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b070:	5c8a      	ldrb	r2, [r1, r2]
 800b072:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b076:	7b3a      	ldrb	r2, [r7, #12]
 800b078:	490f      	ldr	r1, [pc, #60]	; (800b0b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b07a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b07c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b080:	b29a      	uxth	r2, r3
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b088:	7bfb      	ldrb	r3, [r7, #15]
 800b08a:	7b7a      	ldrb	r2, [r7, #13]
 800b08c:	4909      	ldr	r1, [pc, #36]	; (800b0b4 <UARTEx_SetNbDataToProcess+0x94>)
 800b08e:	5c8a      	ldrb	r2, [r1, r2]
 800b090:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b094:	7b7a      	ldrb	r2, [r7, #13]
 800b096:	4908      	ldr	r1, [pc, #32]	; (800b0b8 <UARTEx_SetNbDataToProcess+0x98>)
 800b098:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b09a:	fb93 f3f2 	sdiv	r3, r3, r2
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b0a6:	bf00      	nop
 800b0a8:	3714      	adds	r7, #20
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b0:	4770      	bx	lr
 800b0b2:	bf00      	nop
 800b0b4:	0800d680 	.word	0x0800d680
 800b0b8:	0800d688 	.word	0x0800d688

0800b0bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b0bc:	b084      	sub	sp, #16
 800b0be:	b580      	push	{r7, lr}
 800b0c0:	b084      	sub	sp, #16
 800b0c2:	af00      	add	r7, sp, #0
 800b0c4:	6078      	str	r0, [r7, #4]
 800b0c6:	f107 001c 	add.w	r0, r7, #28
 800b0ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0d0:	2b01      	cmp	r3, #1
 800b0d2:	d120      	bne.n	800b116 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	68da      	ldr	r2, [r3, #12]
 800b0e4:	4b2a      	ldr	r3, [pc, #168]	; (800b190 <USB_CoreInit+0xd4>)
 800b0e6:	4013      	ands	r3, r2
 800b0e8:	687a      	ldr	r2, [r7, #4]
 800b0ea:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	68db      	ldr	r3, [r3, #12]
 800b0f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b0f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b0fa:	2b01      	cmp	r3, #1
 800b0fc:	d105      	bne.n	800b10a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	68db      	ldr	r3, [r3, #12]
 800b102:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 faac 	bl	800b668 <USB_CoreReset>
 800b110:	4603      	mov	r3, r0
 800b112:	73fb      	strb	r3, [r7, #15]
 800b114:	e01a      	b.n	800b14c <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	68db      	ldr	r3, [r3, #12]
 800b11a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b122:	6878      	ldr	r0, [r7, #4]
 800b124:	f000 faa0 	bl	800b668 <USB_CoreReset>
 800b128:	4603      	mov	r3, r0
 800b12a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800b12c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b12e:	2b00      	cmp	r3, #0
 800b130:	d106      	bne.n	800b140 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b136:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	639a      	str	r2, [r3, #56]	; 0x38
 800b13e:	e005      	b.n	800b14c <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b144:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800b14c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b14e:	2b01      	cmp	r3, #1
 800b150:	d116      	bne.n	800b180 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b156:	b29a      	uxth	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800b160:	4b0c      	ldr	r3, [pc, #48]	; (800b194 <USB_CoreInit+0xd8>)
 800b162:	4313      	orrs	r3, r2
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	689b      	ldr	r3, [r3, #8]
 800b16c:	f043 0206 	orr.w	r2, r3, #6
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	689b      	ldr	r3, [r3, #8]
 800b178:	f043 0220 	orr.w	r2, r3, #32
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b180:	7bfb      	ldrb	r3, [r7, #15]
}
 800b182:	4618      	mov	r0, r3
 800b184:	3710      	adds	r7, #16
 800b186:	46bd      	mov	sp, r7
 800b188:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b18c:	b004      	add	sp, #16
 800b18e:	4770      	bx	lr
 800b190:	ffbdffbf 	.word	0xffbdffbf
 800b194:	03ee0000 	.word	0x03ee0000

0800b198 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b198:	b480      	push	{r7}
 800b19a:	b083      	sub	sp, #12
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	689b      	ldr	r3, [r3, #8]
 800b1a4:	f023 0201 	bic.w	r2, r3, #1
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b1ac:	2300      	movs	r3, #0
}
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	370c      	adds	r7, #12
 800b1b2:	46bd      	mov	sp, r7
 800b1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b8:	4770      	bx	lr

0800b1ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b1ba:	b580      	push	{r7, lr}
 800b1bc:	b084      	sub	sp, #16
 800b1be:	af00      	add	r7, sp, #0
 800b1c0:	6078      	str	r0, [r7, #4]
 800b1c2:	460b      	mov	r3, r1
 800b1c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	68db      	ldr	r3, [r3, #12]
 800b1ce:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b1d6:	78fb      	ldrb	r3, [r7, #3]
 800b1d8:	2b01      	cmp	r3, #1
 800b1da:	d115      	bne.n	800b208 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b1e8:	2001      	movs	r0, #1
 800b1ea:	f7f7 fff5 	bl	80031d8 <HAL_Delay>
      ms++;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	3301      	adds	r3, #1
 800b1f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b1f4:	6878      	ldr	r0, [r7, #4]
 800b1f6:	f000 fa29 	bl	800b64c <USB_GetMode>
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b01      	cmp	r3, #1
 800b1fe:	d01e      	beq.n	800b23e <USB_SetCurrentMode+0x84>
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2b31      	cmp	r3, #49	; 0x31
 800b204:	d9f0      	bls.n	800b1e8 <USB_SetCurrentMode+0x2e>
 800b206:	e01a      	b.n	800b23e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b208:	78fb      	ldrb	r3, [r7, #3]
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d115      	bne.n	800b23a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	68db      	ldr	r3, [r3, #12]
 800b212:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b21a:	2001      	movs	r0, #1
 800b21c:	f7f7 ffdc 	bl	80031d8 <HAL_Delay>
      ms++;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	3301      	adds	r3, #1
 800b224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b226:	6878      	ldr	r0, [r7, #4]
 800b228:	f000 fa10 	bl	800b64c <USB_GetMode>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <USB_SetCurrentMode+0x84>
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	2b31      	cmp	r3, #49	; 0x31
 800b236:	d9f0      	bls.n	800b21a <USB_SetCurrentMode+0x60>
 800b238:	e001      	b.n	800b23e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e005      	b.n	800b24a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b23e:	68fb      	ldr	r3, [r7, #12]
 800b240:	2b32      	cmp	r3, #50	; 0x32
 800b242:	d101      	bne.n	800b248 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	e000      	b.n	800b24a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b248:	2300      	movs	r3, #0
}
 800b24a:	4618      	mov	r0, r3
 800b24c:	3710      	adds	r7, #16
 800b24e:	46bd      	mov	sp, r7
 800b250:	bd80      	pop	{r7, pc}
	...

0800b254 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b254:	b084      	sub	sp, #16
 800b256:	b580      	push	{r7, lr}
 800b258:	b086      	sub	sp, #24
 800b25a:	af00      	add	r7, sp, #0
 800b25c:	6078      	str	r0, [r7, #4]
 800b25e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b262:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b266:	2300      	movs	r3, #0
 800b268:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b26e:	2300      	movs	r3, #0
 800b270:	613b      	str	r3, [r7, #16]
 800b272:	e009      	b.n	800b288 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b274:	687a      	ldr	r2, [r7, #4]
 800b276:	693b      	ldr	r3, [r7, #16]
 800b278:	3340      	adds	r3, #64	; 0x40
 800b27a:	009b      	lsls	r3, r3, #2
 800b27c:	4413      	add	r3, r2
 800b27e:	2200      	movs	r2, #0
 800b280:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b282:	693b      	ldr	r3, [r7, #16]
 800b284:	3301      	adds	r3, #1
 800b286:	613b      	str	r3, [r7, #16]
 800b288:	693b      	ldr	r3, [r7, #16]
 800b28a:	2b0e      	cmp	r3, #14
 800b28c:	d9f2      	bls.n	800b274 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b28e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b290:	2b00      	cmp	r3, #0
 800b292:	d11c      	bne.n	800b2ce <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2a2:	f043 0302 	orr.w	r3, r3, #2
 800b2a6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2ac:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	601a      	str	r2, [r3, #0]
 800b2cc:	e005      	b.n	800b2da <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b2d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b2e0:	461a      	mov	r2, r3
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f4:	461a      	mov	r2, r3
 800b2f6:	680b      	ldr	r3, [r1, #0]
 800b2f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b2fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d10c      	bne.n	800b31a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b302:	2b00      	cmp	r3, #0
 800b304:	d104      	bne.n	800b310 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b306:	2100      	movs	r1, #0
 800b308:	6878      	ldr	r0, [r7, #4]
 800b30a:	f000 f965 	bl	800b5d8 <USB_SetDevSpeed>
 800b30e:	e008      	b.n	800b322 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b310:	2101      	movs	r1, #1
 800b312:	6878      	ldr	r0, [r7, #4]
 800b314:	f000 f960 	bl	800b5d8 <USB_SetDevSpeed>
 800b318:	e003      	b.n	800b322 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b31a:	2103      	movs	r1, #3
 800b31c:	6878      	ldr	r0, [r7, #4]
 800b31e:	f000 f95b 	bl	800b5d8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b322:	2110      	movs	r1, #16
 800b324:	6878      	ldr	r0, [r7, #4]
 800b326:	f000 f8f3 	bl	800b510 <USB_FlushTxFifo>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d001      	beq.n	800b334 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b334:	6878      	ldr	r0, [r7, #4]
 800b336:	f000 f91f 	bl	800b578 <USB_FlushRxFifo>
 800b33a:	4603      	mov	r3, r0
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d001      	beq.n	800b344 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b340:	2301      	movs	r3, #1
 800b342:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b34a:	461a      	mov	r2, r3
 800b34c:	2300      	movs	r3, #0
 800b34e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b356:	461a      	mov	r2, r3
 800b358:	2300      	movs	r3, #0
 800b35a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b362:	461a      	mov	r2, r3
 800b364:	2300      	movs	r3, #0
 800b366:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b368:	2300      	movs	r3, #0
 800b36a:	613b      	str	r3, [r7, #16]
 800b36c:	e043      	b.n	800b3f6 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	015a      	lsls	r2, r3, #5
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	4413      	add	r3, r2
 800b376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b380:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b384:	d118      	bne.n	800b3b8 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b386:	693b      	ldr	r3, [r7, #16]
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d10a      	bne.n	800b3a2 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	015a      	lsls	r2, r3, #5
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	4413      	add	r3, r2
 800b394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b398:	461a      	mov	r2, r3
 800b39a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b39e:	6013      	str	r3, [r2, #0]
 800b3a0:	e013      	b.n	800b3ca <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	015a      	lsls	r2, r3, #5
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	4413      	add	r3, r2
 800b3aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ae:	461a      	mov	r2, r3
 800b3b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b3b4:	6013      	str	r3, [r2, #0]
 800b3b6:	e008      	b.n	800b3ca <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	015a      	lsls	r2, r3, #5
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	4413      	add	r3, r2
 800b3c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c4:	461a      	mov	r2, r3
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b3ca:	693b      	ldr	r3, [r7, #16]
 800b3cc:	015a      	lsls	r2, r3, #5
 800b3ce:	68fb      	ldr	r3, [r7, #12]
 800b3d0:	4413      	add	r3, r2
 800b3d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d6:	461a      	mov	r2, r3
 800b3d8:	2300      	movs	r3, #0
 800b3da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b3dc:	693b      	ldr	r3, [r7, #16]
 800b3de:	015a      	lsls	r2, r3, #5
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	4413      	add	r3, r2
 800b3e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e8:	461a      	mov	r2, r3
 800b3ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3f0:	693b      	ldr	r3, [r7, #16]
 800b3f2:	3301      	adds	r3, #1
 800b3f4:	613b      	str	r3, [r7, #16]
 800b3f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3f8:	693a      	ldr	r2, [r7, #16]
 800b3fa:	429a      	cmp	r2, r3
 800b3fc:	d3b7      	bcc.n	800b36e <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b3fe:	2300      	movs	r3, #0
 800b400:	613b      	str	r3, [r7, #16]
 800b402:	e043      	b.n	800b48c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b404:	693b      	ldr	r3, [r7, #16]
 800b406:	015a      	lsls	r2, r3, #5
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	4413      	add	r3, r2
 800b40c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b416:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b41a:	d118      	bne.n	800b44e <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	2b00      	cmp	r3, #0
 800b420:	d10a      	bne.n	800b438 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	015a      	lsls	r2, r3, #5
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	4413      	add	r3, r2
 800b42a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b42e:	461a      	mov	r2, r3
 800b430:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b434:	6013      	str	r3, [r2, #0]
 800b436:	e013      	b.n	800b460 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	015a      	lsls	r2, r3, #5
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	4413      	add	r3, r2
 800b440:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b444:	461a      	mov	r2, r3
 800b446:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	e008      	b.n	800b460 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b44e:	693b      	ldr	r3, [r7, #16]
 800b450:	015a      	lsls	r2, r3, #5
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4413      	add	r3, r2
 800b456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b45a:	461a      	mov	r2, r3
 800b45c:	2300      	movs	r3, #0
 800b45e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b460:	693b      	ldr	r3, [r7, #16]
 800b462:	015a      	lsls	r2, r3, #5
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	4413      	add	r3, r2
 800b468:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46c:	461a      	mov	r2, r3
 800b46e:	2300      	movs	r3, #0
 800b470:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b472:	693b      	ldr	r3, [r7, #16]
 800b474:	015a      	lsls	r2, r3, #5
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	4413      	add	r3, r2
 800b47a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b47e:	461a      	mov	r2, r3
 800b480:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b484:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b486:	693b      	ldr	r3, [r7, #16]
 800b488:	3301      	adds	r3, #1
 800b48a:	613b      	str	r3, [r7, #16]
 800b48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	429a      	cmp	r2, r3
 800b492:	d3b7      	bcc.n	800b404 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49a:	691b      	ldr	r3, [r3, #16]
 800b49c:	68fa      	ldr	r2, [r7, #12]
 800b49e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b4a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b4b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b4b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d105      	bne.n	800b4c8 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	699b      	ldr	r3, [r3, #24]
 800b4c0:	f043 0210 	orr.w	r2, r3, #16
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	699a      	ldr	r2, [r3, #24]
 800b4cc:	4b0e      	ldr	r3, [pc, #56]	; (800b508 <USB_DevInit+0x2b4>)
 800b4ce:	4313      	orrs	r3, r2
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d005      	beq.n	800b4e6 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	f043 0208 	orr.w	r2, r3, #8
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b4e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4e8:	2b01      	cmp	r3, #1
 800b4ea:	d105      	bne.n	800b4f8 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	699a      	ldr	r2, [r3, #24]
 800b4f0:	4b06      	ldr	r3, [pc, #24]	; (800b50c <USB_DevInit+0x2b8>)
 800b4f2:	4313      	orrs	r3, r2
 800b4f4:	687a      	ldr	r2, [r7, #4]
 800b4f6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b4f8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	3718      	adds	r7, #24
 800b4fe:	46bd      	mov	sp, r7
 800b500:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b504:	b004      	add	sp, #16
 800b506:	4770      	bx	lr
 800b508:	803c3800 	.word	0x803c3800
 800b50c:	40000004 	.word	0x40000004

0800b510 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b510:	b480      	push	{r7}
 800b512:	b085      	sub	sp, #20
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
 800b518:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b51a:	2300      	movs	r3, #0
 800b51c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	3301      	adds	r3, #1
 800b522:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	4a13      	ldr	r2, [pc, #76]	; (800b574 <USB_FlushTxFifo+0x64>)
 800b528:	4293      	cmp	r3, r2
 800b52a:	d901      	bls.n	800b530 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b52c:	2303      	movs	r3, #3
 800b52e:	e01b      	b.n	800b568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	691b      	ldr	r3, [r3, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	daf2      	bge.n	800b51e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b538:	2300      	movs	r3, #0
 800b53a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b53c:	683b      	ldr	r3, [r7, #0]
 800b53e:	019b      	lsls	r3, r3, #6
 800b540:	f043 0220 	orr.w	r2, r3, #32
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	3301      	adds	r3, #1
 800b54c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	4a08      	ldr	r2, [pc, #32]	; (800b574 <USB_FlushTxFifo+0x64>)
 800b552:	4293      	cmp	r3, r2
 800b554:	d901      	bls.n	800b55a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b556:	2303      	movs	r3, #3
 800b558:	e006      	b.n	800b568 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	f003 0320 	and.w	r3, r3, #32
 800b562:	2b20      	cmp	r3, #32
 800b564:	d0f0      	beq.n	800b548 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b566:	2300      	movs	r3, #0
}
 800b568:	4618      	mov	r0, r3
 800b56a:	3714      	adds	r7, #20
 800b56c:	46bd      	mov	sp, r7
 800b56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b572:	4770      	bx	lr
 800b574:	00030d40 	.word	0x00030d40

0800b578 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b578:	b480      	push	{r7}
 800b57a:	b085      	sub	sp, #20
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b580:	2300      	movs	r3, #0
 800b582:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	3301      	adds	r3, #1
 800b588:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	4a11      	ldr	r2, [pc, #68]	; (800b5d4 <USB_FlushRxFifo+0x5c>)
 800b58e:	4293      	cmp	r3, r2
 800b590:	d901      	bls.n	800b596 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e018      	b.n	800b5c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	691b      	ldr	r3, [r3, #16]
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	daf2      	bge.n	800b584 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b59e:	2300      	movs	r3, #0
 800b5a0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2210      	movs	r2, #16
 800b5a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	4a08      	ldr	r2, [pc, #32]	; (800b5d4 <USB_FlushRxFifo+0x5c>)
 800b5b2:	4293      	cmp	r3, r2
 800b5b4:	d901      	bls.n	800b5ba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b5b6:	2303      	movs	r3, #3
 800b5b8:	e006      	b.n	800b5c8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	f003 0310 	and.w	r3, r3, #16
 800b5c2:	2b10      	cmp	r3, #16
 800b5c4:	d0f0      	beq.n	800b5a8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b5c6:	2300      	movs	r3, #0
}
 800b5c8:	4618      	mov	r0, r3
 800b5ca:	3714      	adds	r7, #20
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d2:	4770      	bx	lr
 800b5d4:	00030d40 	.word	0x00030d40

0800b5d8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5ee:	681a      	ldr	r2, [r3, #0]
 800b5f0:	78fb      	ldrb	r3, [r7, #3]
 800b5f2:	68f9      	ldr	r1, [r7, #12]
 800b5f4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5f8:	4313      	orrs	r3, r2
 800b5fa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3714      	adds	r7, #20
 800b602:	46bd      	mov	sp, r7
 800b604:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b608:	4770      	bx	lr

0800b60a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b60a:	b480      	push	{r7}
 800b60c:	b085      	sub	sp, #20
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	68fa      	ldr	r2, [r7, #12]
 800b620:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b624:	f023 0303 	bic.w	r3, r3, #3
 800b628:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	68fa      	ldr	r2, [r7, #12]
 800b634:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b638:	f043 0302 	orr.w	r3, r3, #2
 800b63c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b63e:	2300      	movs	r3, #0
}
 800b640:	4618      	mov	r0, r3
 800b642:	3714      	adds	r7, #20
 800b644:	46bd      	mov	sp, r7
 800b646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b64a:	4770      	bx	lr

0800b64c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b64c:	b480      	push	{r7}
 800b64e:	b083      	sub	sp, #12
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	695b      	ldr	r3, [r3, #20]
 800b658:	f003 0301 	and.w	r3, r3, #1
}
 800b65c:	4618      	mov	r0, r3
 800b65e:	370c      	adds	r7, #12
 800b660:	46bd      	mov	sp, r7
 800b662:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b666:	4770      	bx	lr

0800b668 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b668:	b480      	push	{r7}
 800b66a:	b085      	sub	sp, #20
 800b66c:	af00      	add	r7, sp, #0
 800b66e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b670:	2300      	movs	r3, #0
 800b672:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	3301      	adds	r3, #1
 800b678:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b67a:	68fb      	ldr	r3, [r7, #12]
 800b67c:	4a13      	ldr	r2, [pc, #76]	; (800b6cc <USB_CoreReset+0x64>)
 800b67e:	4293      	cmp	r3, r2
 800b680:	d901      	bls.n	800b686 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b682:	2303      	movs	r3, #3
 800b684:	e01b      	b.n	800b6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	daf2      	bge.n	800b674 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b68e:	2300      	movs	r3, #0
 800b690:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	691b      	ldr	r3, [r3, #16]
 800b696:	f043 0201 	orr.w	r2, r3, #1
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	3301      	adds	r3, #1
 800b6a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	4a09      	ldr	r2, [pc, #36]	; (800b6cc <USB_CoreReset+0x64>)
 800b6a8:	4293      	cmp	r3, r2
 800b6aa:	d901      	bls.n	800b6b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b6ac:	2303      	movs	r3, #3
 800b6ae:	e006      	b.n	800b6be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	691b      	ldr	r3, [r3, #16]
 800b6b4:	f003 0301 	and.w	r3, r3, #1
 800b6b8:	2b01      	cmp	r3, #1
 800b6ba:	d0f0      	beq.n	800b69e <USB_CoreReset+0x36>

  return HAL_OK;
 800b6bc:	2300      	movs	r3, #0
}
 800b6be:	4618      	mov	r0, r3
 800b6c0:	3714      	adds	r7, #20
 800b6c2:	46bd      	mov	sp, r7
 800b6c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c8:	4770      	bx	lr
 800b6ca:	bf00      	nop
 800b6cc:	00030d40 	.word	0x00030d40

0800b6d0 <__errno>:
 800b6d0:	4b01      	ldr	r3, [pc, #4]	; (800b6d8 <__errno+0x8>)
 800b6d2:	6818      	ldr	r0, [r3, #0]
 800b6d4:	4770      	bx	lr
 800b6d6:	bf00      	nop
 800b6d8:	24000020 	.word	0x24000020

0800b6dc <__libc_init_array>:
 800b6dc:	b570      	push	{r4, r5, r6, lr}
 800b6de:	4d0d      	ldr	r5, [pc, #52]	; (800b714 <__libc_init_array+0x38>)
 800b6e0:	4c0d      	ldr	r4, [pc, #52]	; (800b718 <__libc_init_array+0x3c>)
 800b6e2:	1b64      	subs	r4, r4, r5
 800b6e4:	10a4      	asrs	r4, r4, #2
 800b6e6:	2600      	movs	r6, #0
 800b6e8:	42a6      	cmp	r6, r4
 800b6ea:	d109      	bne.n	800b700 <__libc_init_array+0x24>
 800b6ec:	4d0b      	ldr	r5, [pc, #44]	; (800b71c <__libc_init_array+0x40>)
 800b6ee:	4c0c      	ldr	r4, [pc, #48]	; (800b720 <__libc_init_array+0x44>)
 800b6f0:	f000 fc8e 	bl	800c010 <_init>
 800b6f4:	1b64      	subs	r4, r4, r5
 800b6f6:	10a4      	asrs	r4, r4, #2
 800b6f8:	2600      	movs	r6, #0
 800b6fa:	42a6      	cmp	r6, r4
 800b6fc:	d105      	bne.n	800b70a <__libc_init_array+0x2e>
 800b6fe:	bd70      	pop	{r4, r5, r6, pc}
 800b700:	f855 3b04 	ldr.w	r3, [r5], #4
 800b704:	4798      	blx	r3
 800b706:	3601      	adds	r6, #1
 800b708:	e7ee      	b.n	800b6e8 <__libc_init_array+0xc>
 800b70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b70e:	4798      	blx	r3
 800b710:	3601      	adds	r6, #1
 800b712:	e7f2      	b.n	800b6fa <__libc_init_array+0x1e>
 800b714:	0800d6cc 	.word	0x0800d6cc
 800b718:	0800d6cc 	.word	0x0800d6cc
 800b71c:	0800d6cc 	.word	0x0800d6cc
 800b720:	0800d6d0 	.word	0x0800d6d0

0800b724 <memset>:
 800b724:	4402      	add	r2, r0
 800b726:	4603      	mov	r3, r0
 800b728:	4293      	cmp	r3, r2
 800b72a:	d100      	bne.n	800b72e <memset+0xa>
 800b72c:	4770      	bx	lr
 800b72e:	f803 1b01 	strb.w	r1, [r3], #1
 800b732:	e7f9      	b.n	800b728 <memset+0x4>

0800b734 <_free_r>:
 800b734:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b736:	2900      	cmp	r1, #0
 800b738:	d044      	beq.n	800b7c4 <_free_r+0x90>
 800b73a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b73e:	9001      	str	r0, [sp, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	f1a1 0404 	sub.w	r4, r1, #4
 800b746:	bfb8      	it	lt
 800b748:	18e4      	addlt	r4, r4, r3
 800b74a:	f000 f903 	bl	800b954 <__malloc_lock>
 800b74e:	4a1e      	ldr	r2, [pc, #120]	; (800b7c8 <_free_r+0x94>)
 800b750:	9801      	ldr	r0, [sp, #4]
 800b752:	6813      	ldr	r3, [r2, #0]
 800b754:	b933      	cbnz	r3, 800b764 <_free_r+0x30>
 800b756:	6063      	str	r3, [r4, #4]
 800b758:	6014      	str	r4, [r2, #0]
 800b75a:	b003      	add	sp, #12
 800b75c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b760:	f000 b8fe 	b.w	800b960 <__malloc_unlock>
 800b764:	42a3      	cmp	r3, r4
 800b766:	d908      	bls.n	800b77a <_free_r+0x46>
 800b768:	6825      	ldr	r5, [r4, #0]
 800b76a:	1961      	adds	r1, r4, r5
 800b76c:	428b      	cmp	r3, r1
 800b76e:	bf01      	itttt	eq
 800b770:	6819      	ldreq	r1, [r3, #0]
 800b772:	685b      	ldreq	r3, [r3, #4]
 800b774:	1949      	addeq	r1, r1, r5
 800b776:	6021      	streq	r1, [r4, #0]
 800b778:	e7ed      	b.n	800b756 <_free_r+0x22>
 800b77a:	461a      	mov	r2, r3
 800b77c:	685b      	ldr	r3, [r3, #4]
 800b77e:	b10b      	cbz	r3, 800b784 <_free_r+0x50>
 800b780:	42a3      	cmp	r3, r4
 800b782:	d9fa      	bls.n	800b77a <_free_r+0x46>
 800b784:	6811      	ldr	r1, [r2, #0]
 800b786:	1855      	adds	r5, r2, r1
 800b788:	42a5      	cmp	r5, r4
 800b78a:	d10b      	bne.n	800b7a4 <_free_r+0x70>
 800b78c:	6824      	ldr	r4, [r4, #0]
 800b78e:	4421      	add	r1, r4
 800b790:	1854      	adds	r4, r2, r1
 800b792:	42a3      	cmp	r3, r4
 800b794:	6011      	str	r1, [r2, #0]
 800b796:	d1e0      	bne.n	800b75a <_free_r+0x26>
 800b798:	681c      	ldr	r4, [r3, #0]
 800b79a:	685b      	ldr	r3, [r3, #4]
 800b79c:	6053      	str	r3, [r2, #4]
 800b79e:	4421      	add	r1, r4
 800b7a0:	6011      	str	r1, [r2, #0]
 800b7a2:	e7da      	b.n	800b75a <_free_r+0x26>
 800b7a4:	d902      	bls.n	800b7ac <_free_r+0x78>
 800b7a6:	230c      	movs	r3, #12
 800b7a8:	6003      	str	r3, [r0, #0]
 800b7aa:	e7d6      	b.n	800b75a <_free_r+0x26>
 800b7ac:	6825      	ldr	r5, [r4, #0]
 800b7ae:	1961      	adds	r1, r4, r5
 800b7b0:	428b      	cmp	r3, r1
 800b7b2:	bf04      	itt	eq
 800b7b4:	6819      	ldreq	r1, [r3, #0]
 800b7b6:	685b      	ldreq	r3, [r3, #4]
 800b7b8:	6063      	str	r3, [r4, #4]
 800b7ba:	bf04      	itt	eq
 800b7bc:	1949      	addeq	r1, r1, r5
 800b7be:	6021      	streq	r1, [r4, #0]
 800b7c0:	6054      	str	r4, [r2, #4]
 800b7c2:	e7ca      	b.n	800b75a <_free_r+0x26>
 800b7c4:	b003      	add	sp, #12
 800b7c6:	bd30      	pop	{r4, r5, pc}
 800b7c8:	24000cac 	.word	0x24000cac

0800b7cc <sbrk_aligned>:
 800b7cc:	b570      	push	{r4, r5, r6, lr}
 800b7ce:	4e0e      	ldr	r6, [pc, #56]	; (800b808 <sbrk_aligned+0x3c>)
 800b7d0:	460c      	mov	r4, r1
 800b7d2:	6831      	ldr	r1, [r6, #0]
 800b7d4:	4605      	mov	r5, r0
 800b7d6:	b911      	cbnz	r1, 800b7de <sbrk_aligned+0x12>
 800b7d8:	f000 f88c 	bl	800b8f4 <_sbrk_r>
 800b7dc:	6030      	str	r0, [r6, #0]
 800b7de:	4621      	mov	r1, r4
 800b7e0:	4628      	mov	r0, r5
 800b7e2:	f000 f887 	bl	800b8f4 <_sbrk_r>
 800b7e6:	1c43      	adds	r3, r0, #1
 800b7e8:	d00a      	beq.n	800b800 <sbrk_aligned+0x34>
 800b7ea:	1cc4      	adds	r4, r0, #3
 800b7ec:	f024 0403 	bic.w	r4, r4, #3
 800b7f0:	42a0      	cmp	r0, r4
 800b7f2:	d007      	beq.n	800b804 <sbrk_aligned+0x38>
 800b7f4:	1a21      	subs	r1, r4, r0
 800b7f6:	4628      	mov	r0, r5
 800b7f8:	f000 f87c 	bl	800b8f4 <_sbrk_r>
 800b7fc:	3001      	adds	r0, #1
 800b7fe:	d101      	bne.n	800b804 <sbrk_aligned+0x38>
 800b800:	f04f 34ff 	mov.w	r4, #4294967295
 800b804:	4620      	mov	r0, r4
 800b806:	bd70      	pop	{r4, r5, r6, pc}
 800b808:	24000cb0 	.word	0x24000cb0

0800b80c <_malloc_r>:
 800b80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b810:	1ccd      	adds	r5, r1, #3
 800b812:	f025 0503 	bic.w	r5, r5, #3
 800b816:	3508      	adds	r5, #8
 800b818:	2d0c      	cmp	r5, #12
 800b81a:	bf38      	it	cc
 800b81c:	250c      	movcc	r5, #12
 800b81e:	2d00      	cmp	r5, #0
 800b820:	4607      	mov	r7, r0
 800b822:	db01      	blt.n	800b828 <_malloc_r+0x1c>
 800b824:	42a9      	cmp	r1, r5
 800b826:	d905      	bls.n	800b834 <_malloc_r+0x28>
 800b828:	230c      	movs	r3, #12
 800b82a:	603b      	str	r3, [r7, #0]
 800b82c:	2600      	movs	r6, #0
 800b82e:	4630      	mov	r0, r6
 800b830:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b834:	4e2e      	ldr	r6, [pc, #184]	; (800b8f0 <_malloc_r+0xe4>)
 800b836:	f000 f88d 	bl	800b954 <__malloc_lock>
 800b83a:	6833      	ldr	r3, [r6, #0]
 800b83c:	461c      	mov	r4, r3
 800b83e:	bb34      	cbnz	r4, 800b88e <_malloc_r+0x82>
 800b840:	4629      	mov	r1, r5
 800b842:	4638      	mov	r0, r7
 800b844:	f7ff ffc2 	bl	800b7cc <sbrk_aligned>
 800b848:	1c43      	adds	r3, r0, #1
 800b84a:	4604      	mov	r4, r0
 800b84c:	d14d      	bne.n	800b8ea <_malloc_r+0xde>
 800b84e:	6834      	ldr	r4, [r6, #0]
 800b850:	4626      	mov	r6, r4
 800b852:	2e00      	cmp	r6, #0
 800b854:	d140      	bne.n	800b8d8 <_malloc_r+0xcc>
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	4631      	mov	r1, r6
 800b85a:	4638      	mov	r0, r7
 800b85c:	eb04 0803 	add.w	r8, r4, r3
 800b860:	f000 f848 	bl	800b8f4 <_sbrk_r>
 800b864:	4580      	cmp	r8, r0
 800b866:	d13a      	bne.n	800b8de <_malloc_r+0xd2>
 800b868:	6821      	ldr	r1, [r4, #0]
 800b86a:	3503      	adds	r5, #3
 800b86c:	1a6d      	subs	r5, r5, r1
 800b86e:	f025 0503 	bic.w	r5, r5, #3
 800b872:	3508      	adds	r5, #8
 800b874:	2d0c      	cmp	r5, #12
 800b876:	bf38      	it	cc
 800b878:	250c      	movcc	r5, #12
 800b87a:	4629      	mov	r1, r5
 800b87c:	4638      	mov	r0, r7
 800b87e:	f7ff ffa5 	bl	800b7cc <sbrk_aligned>
 800b882:	3001      	adds	r0, #1
 800b884:	d02b      	beq.n	800b8de <_malloc_r+0xd2>
 800b886:	6823      	ldr	r3, [r4, #0]
 800b888:	442b      	add	r3, r5
 800b88a:	6023      	str	r3, [r4, #0]
 800b88c:	e00e      	b.n	800b8ac <_malloc_r+0xa0>
 800b88e:	6822      	ldr	r2, [r4, #0]
 800b890:	1b52      	subs	r2, r2, r5
 800b892:	d41e      	bmi.n	800b8d2 <_malloc_r+0xc6>
 800b894:	2a0b      	cmp	r2, #11
 800b896:	d916      	bls.n	800b8c6 <_malloc_r+0xba>
 800b898:	1961      	adds	r1, r4, r5
 800b89a:	42a3      	cmp	r3, r4
 800b89c:	6025      	str	r5, [r4, #0]
 800b89e:	bf18      	it	ne
 800b8a0:	6059      	strne	r1, [r3, #4]
 800b8a2:	6863      	ldr	r3, [r4, #4]
 800b8a4:	bf08      	it	eq
 800b8a6:	6031      	streq	r1, [r6, #0]
 800b8a8:	5162      	str	r2, [r4, r5]
 800b8aa:	604b      	str	r3, [r1, #4]
 800b8ac:	4638      	mov	r0, r7
 800b8ae:	f104 060b 	add.w	r6, r4, #11
 800b8b2:	f000 f855 	bl	800b960 <__malloc_unlock>
 800b8b6:	f026 0607 	bic.w	r6, r6, #7
 800b8ba:	1d23      	adds	r3, r4, #4
 800b8bc:	1af2      	subs	r2, r6, r3
 800b8be:	d0b6      	beq.n	800b82e <_malloc_r+0x22>
 800b8c0:	1b9b      	subs	r3, r3, r6
 800b8c2:	50a3      	str	r3, [r4, r2]
 800b8c4:	e7b3      	b.n	800b82e <_malloc_r+0x22>
 800b8c6:	6862      	ldr	r2, [r4, #4]
 800b8c8:	42a3      	cmp	r3, r4
 800b8ca:	bf0c      	ite	eq
 800b8cc:	6032      	streq	r2, [r6, #0]
 800b8ce:	605a      	strne	r2, [r3, #4]
 800b8d0:	e7ec      	b.n	800b8ac <_malloc_r+0xa0>
 800b8d2:	4623      	mov	r3, r4
 800b8d4:	6864      	ldr	r4, [r4, #4]
 800b8d6:	e7b2      	b.n	800b83e <_malloc_r+0x32>
 800b8d8:	4634      	mov	r4, r6
 800b8da:	6876      	ldr	r6, [r6, #4]
 800b8dc:	e7b9      	b.n	800b852 <_malloc_r+0x46>
 800b8de:	230c      	movs	r3, #12
 800b8e0:	603b      	str	r3, [r7, #0]
 800b8e2:	4638      	mov	r0, r7
 800b8e4:	f000 f83c 	bl	800b960 <__malloc_unlock>
 800b8e8:	e7a1      	b.n	800b82e <_malloc_r+0x22>
 800b8ea:	6025      	str	r5, [r4, #0]
 800b8ec:	e7de      	b.n	800b8ac <_malloc_r+0xa0>
 800b8ee:	bf00      	nop
 800b8f0:	24000cac 	.word	0x24000cac

0800b8f4 <_sbrk_r>:
 800b8f4:	b538      	push	{r3, r4, r5, lr}
 800b8f6:	4d06      	ldr	r5, [pc, #24]	; (800b910 <_sbrk_r+0x1c>)
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4604      	mov	r4, r0
 800b8fc:	4608      	mov	r0, r1
 800b8fe:	602b      	str	r3, [r5, #0]
 800b900:	f7f7 fb78 	bl	8002ff4 <_sbrk>
 800b904:	1c43      	adds	r3, r0, #1
 800b906:	d102      	bne.n	800b90e <_sbrk_r+0x1a>
 800b908:	682b      	ldr	r3, [r5, #0]
 800b90a:	b103      	cbz	r3, 800b90e <_sbrk_r+0x1a>
 800b90c:	6023      	str	r3, [r4, #0]
 800b90e:	bd38      	pop	{r3, r4, r5, pc}
 800b910:	24000cb4 	.word	0x24000cb4

0800b914 <siprintf>:
 800b914:	b40e      	push	{r1, r2, r3}
 800b916:	b500      	push	{lr}
 800b918:	b09c      	sub	sp, #112	; 0x70
 800b91a:	ab1d      	add	r3, sp, #116	; 0x74
 800b91c:	9002      	str	r0, [sp, #8]
 800b91e:	9006      	str	r0, [sp, #24]
 800b920:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b924:	4809      	ldr	r0, [pc, #36]	; (800b94c <siprintf+0x38>)
 800b926:	9107      	str	r1, [sp, #28]
 800b928:	9104      	str	r1, [sp, #16]
 800b92a:	4909      	ldr	r1, [pc, #36]	; (800b950 <siprintf+0x3c>)
 800b92c:	f853 2b04 	ldr.w	r2, [r3], #4
 800b930:	9105      	str	r1, [sp, #20]
 800b932:	6800      	ldr	r0, [r0, #0]
 800b934:	9301      	str	r3, [sp, #4]
 800b936:	a902      	add	r1, sp, #8
 800b938:	f000 f874 	bl	800ba24 <_svfiprintf_r>
 800b93c:	9b02      	ldr	r3, [sp, #8]
 800b93e:	2200      	movs	r2, #0
 800b940:	701a      	strb	r2, [r3, #0]
 800b942:	b01c      	add	sp, #112	; 0x70
 800b944:	f85d eb04 	ldr.w	lr, [sp], #4
 800b948:	b003      	add	sp, #12
 800b94a:	4770      	bx	lr
 800b94c:	24000020 	.word	0x24000020
 800b950:	ffff0208 	.word	0xffff0208

0800b954 <__malloc_lock>:
 800b954:	4801      	ldr	r0, [pc, #4]	; (800b95c <__malloc_lock+0x8>)
 800b956:	f000 baf9 	b.w	800bf4c <__retarget_lock_acquire_recursive>
 800b95a:	bf00      	nop
 800b95c:	24000cb8 	.word	0x24000cb8

0800b960 <__malloc_unlock>:
 800b960:	4801      	ldr	r0, [pc, #4]	; (800b968 <__malloc_unlock+0x8>)
 800b962:	f000 baf4 	b.w	800bf4e <__retarget_lock_release_recursive>
 800b966:	bf00      	nop
 800b968:	24000cb8 	.word	0x24000cb8

0800b96c <__ssputs_r>:
 800b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b970:	688e      	ldr	r6, [r1, #8]
 800b972:	429e      	cmp	r6, r3
 800b974:	4682      	mov	sl, r0
 800b976:	460c      	mov	r4, r1
 800b978:	4690      	mov	r8, r2
 800b97a:	461f      	mov	r7, r3
 800b97c:	d838      	bhi.n	800b9f0 <__ssputs_r+0x84>
 800b97e:	898a      	ldrh	r2, [r1, #12]
 800b980:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b984:	d032      	beq.n	800b9ec <__ssputs_r+0x80>
 800b986:	6825      	ldr	r5, [r4, #0]
 800b988:	6909      	ldr	r1, [r1, #16]
 800b98a:	eba5 0901 	sub.w	r9, r5, r1
 800b98e:	6965      	ldr	r5, [r4, #20]
 800b990:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b998:	3301      	adds	r3, #1
 800b99a:	444b      	add	r3, r9
 800b99c:	106d      	asrs	r5, r5, #1
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	bf38      	it	cc
 800b9a2:	461d      	movcc	r5, r3
 800b9a4:	0553      	lsls	r3, r2, #21
 800b9a6:	d531      	bpl.n	800ba0c <__ssputs_r+0xa0>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f7ff ff2f 	bl	800b80c <_malloc_r>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	b950      	cbnz	r0, 800b9c8 <__ssputs_r+0x5c>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	f8ca 3000 	str.w	r3, [sl]
 800b9b8:	89a3      	ldrh	r3, [r4, #12]
 800b9ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9be:	81a3      	strh	r3, [r4, #12]
 800b9c0:	f04f 30ff 	mov.w	r0, #4294967295
 800b9c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9c8:	6921      	ldr	r1, [r4, #16]
 800b9ca:	464a      	mov	r2, r9
 800b9cc:	f000 fac0 	bl	800bf50 <memcpy>
 800b9d0:	89a3      	ldrh	r3, [r4, #12]
 800b9d2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9da:	81a3      	strh	r3, [r4, #12]
 800b9dc:	6126      	str	r6, [r4, #16]
 800b9de:	6165      	str	r5, [r4, #20]
 800b9e0:	444e      	add	r6, r9
 800b9e2:	eba5 0509 	sub.w	r5, r5, r9
 800b9e6:	6026      	str	r6, [r4, #0]
 800b9e8:	60a5      	str	r5, [r4, #8]
 800b9ea:	463e      	mov	r6, r7
 800b9ec:	42be      	cmp	r6, r7
 800b9ee:	d900      	bls.n	800b9f2 <__ssputs_r+0x86>
 800b9f0:	463e      	mov	r6, r7
 800b9f2:	6820      	ldr	r0, [r4, #0]
 800b9f4:	4632      	mov	r2, r6
 800b9f6:	4641      	mov	r1, r8
 800b9f8:	f000 fab8 	bl	800bf6c <memmove>
 800b9fc:	68a3      	ldr	r3, [r4, #8]
 800b9fe:	1b9b      	subs	r3, r3, r6
 800ba00:	60a3      	str	r3, [r4, #8]
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	4433      	add	r3, r6
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	2000      	movs	r0, #0
 800ba0a:	e7db      	b.n	800b9c4 <__ssputs_r+0x58>
 800ba0c:	462a      	mov	r2, r5
 800ba0e:	f000 fac7 	bl	800bfa0 <_realloc_r>
 800ba12:	4606      	mov	r6, r0
 800ba14:	2800      	cmp	r0, #0
 800ba16:	d1e1      	bne.n	800b9dc <__ssputs_r+0x70>
 800ba18:	6921      	ldr	r1, [r4, #16]
 800ba1a:	4650      	mov	r0, sl
 800ba1c:	f7ff fe8a 	bl	800b734 <_free_r>
 800ba20:	e7c7      	b.n	800b9b2 <__ssputs_r+0x46>
	...

0800ba24 <_svfiprintf_r>:
 800ba24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba28:	4698      	mov	r8, r3
 800ba2a:	898b      	ldrh	r3, [r1, #12]
 800ba2c:	061b      	lsls	r3, r3, #24
 800ba2e:	b09d      	sub	sp, #116	; 0x74
 800ba30:	4607      	mov	r7, r0
 800ba32:	460d      	mov	r5, r1
 800ba34:	4614      	mov	r4, r2
 800ba36:	d50e      	bpl.n	800ba56 <_svfiprintf_r+0x32>
 800ba38:	690b      	ldr	r3, [r1, #16]
 800ba3a:	b963      	cbnz	r3, 800ba56 <_svfiprintf_r+0x32>
 800ba3c:	2140      	movs	r1, #64	; 0x40
 800ba3e:	f7ff fee5 	bl	800b80c <_malloc_r>
 800ba42:	6028      	str	r0, [r5, #0]
 800ba44:	6128      	str	r0, [r5, #16]
 800ba46:	b920      	cbnz	r0, 800ba52 <_svfiprintf_r+0x2e>
 800ba48:	230c      	movs	r3, #12
 800ba4a:	603b      	str	r3, [r7, #0]
 800ba4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba50:	e0d1      	b.n	800bbf6 <_svfiprintf_r+0x1d2>
 800ba52:	2340      	movs	r3, #64	; 0x40
 800ba54:	616b      	str	r3, [r5, #20]
 800ba56:	2300      	movs	r3, #0
 800ba58:	9309      	str	r3, [sp, #36]	; 0x24
 800ba5a:	2320      	movs	r3, #32
 800ba5c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba60:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba64:	2330      	movs	r3, #48	; 0x30
 800ba66:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800bc10 <_svfiprintf_r+0x1ec>
 800ba6a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba6e:	f04f 0901 	mov.w	r9, #1
 800ba72:	4623      	mov	r3, r4
 800ba74:	469a      	mov	sl, r3
 800ba76:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba7a:	b10a      	cbz	r2, 800ba80 <_svfiprintf_r+0x5c>
 800ba7c:	2a25      	cmp	r2, #37	; 0x25
 800ba7e:	d1f9      	bne.n	800ba74 <_svfiprintf_r+0x50>
 800ba80:	ebba 0b04 	subs.w	fp, sl, r4
 800ba84:	d00b      	beq.n	800ba9e <_svfiprintf_r+0x7a>
 800ba86:	465b      	mov	r3, fp
 800ba88:	4622      	mov	r2, r4
 800ba8a:	4629      	mov	r1, r5
 800ba8c:	4638      	mov	r0, r7
 800ba8e:	f7ff ff6d 	bl	800b96c <__ssputs_r>
 800ba92:	3001      	adds	r0, #1
 800ba94:	f000 80aa 	beq.w	800bbec <_svfiprintf_r+0x1c8>
 800ba98:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba9a:	445a      	add	r2, fp
 800ba9c:	9209      	str	r2, [sp, #36]	; 0x24
 800ba9e:	f89a 3000 	ldrb.w	r3, [sl]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	f000 80a2 	beq.w	800bbec <_svfiprintf_r+0x1c8>
 800baa8:	2300      	movs	r3, #0
 800baaa:	f04f 32ff 	mov.w	r2, #4294967295
 800baae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bab2:	f10a 0a01 	add.w	sl, sl, #1
 800bab6:	9304      	str	r3, [sp, #16]
 800bab8:	9307      	str	r3, [sp, #28]
 800baba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800babe:	931a      	str	r3, [sp, #104]	; 0x68
 800bac0:	4654      	mov	r4, sl
 800bac2:	2205      	movs	r2, #5
 800bac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac8:	4851      	ldr	r0, [pc, #324]	; (800bc10 <_svfiprintf_r+0x1ec>)
 800baca:	f7f4 fc09 	bl	80002e0 <memchr>
 800bace:	9a04      	ldr	r2, [sp, #16]
 800bad0:	b9d8      	cbnz	r0, 800bb0a <_svfiprintf_r+0xe6>
 800bad2:	06d0      	lsls	r0, r2, #27
 800bad4:	bf44      	itt	mi
 800bad6:	2320      	movmi	r3, #32
 800bad8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800badc:	0711      	lsls	r1, r2, #28
 800bade:	bf44      	itt	mi
 800bae0:	232b      	movmi	r3, #43	; 0x2b
 800bae2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae6:	f89a 3000 	ldrb.w	r3, [sl]
 800baea:	2b2a      	cmp	r3, #42	; 0x2a
 800baec:	d015      	beq.n	800bb1a <_svfiprintf_r+0xf6>
 800baee:	9a07      	ldr	r2, [sp, #28]
 800baf0:	4654      	mov	r4, sl
 800baf2:	2000      	movs	r0, #0
 800baf4:	f04f 0c0a 	mov.w	ip, #10
 800baf8:	4621      	mov	r1, r4
 800bafa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bafe:	3b30      	subs	r3, #48	; 0x30
 800bb00:	2b09      	cmp	r3, #9
 800bb02:	d94e      	bls.n	800bba2 <_svfiprintf_r+0x17e>
 800bb04:	b1b0      	cbz	r0, 800bb34 <_svfiprintf_r+0x110>
 800bb06:	9207      	str	r2, [sp, #28]
 800bb08:	e014      	b.n	800bb34 <_svfiprintf_r+0x110>
 800bb0a:	eba0 0308 	sub.w	r3, r0, r8
 800bb0e:	fa09 f303 	lsl.w	r3, r9, r3
 800bb12:	4313      	orrs	r3, r2
 800bb14:	9304      	str	r3, [sp, #16]
 800bb16:	46a2      	mov	sl, r4
 800bb18:	e7d2      	b.n	800bac0 <_svfiprintf_r+0x9c>
 800bb1a:	9b03      	ldr	r3, [sp, #12]
 800bb1c:	1d19      	adds	r1, r3, #4
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	9103      	str	r1, [sp, #12]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	bfbb      	ittet	lt
 800bb26:	425b      	neglt	r3, r3
 800bb28:	f042 0202 	orrlt.w	r2, r2, #2
 800bb2c:	9307      	strge	r3, [sp, #28]
 800bb2e:	9307      	strlt	r3, [sp, #28]
 800bb30:	bfb8      	it	lt
 800bb32:	9204      	strlt	r2, [sp, #16]
 800bb34:	7823      	ldrb	r3, [r4, #0]
 800bb36:	2b2e      	cmp	r3, #46	; 0x2e
 800bb38:	d10c      	bne.n	800bb54 <_svfiprintf_r+0x130>
 800bb3a:	7863      	ldrb	r3, [r4, #1]
 800bb3c:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3e:	d135      	bne.n	800bbac <_svfiprintf_r+0x188>
 800bb40:	9b03      	ldr	r3, [sp, #12]
 800bb42:	1d1a      	adds	r2, r3, #4
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	9203      	str	r2, [sp, #12]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	bfb8      	it	lt
 800bb4c:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb50:	3402      	adds	r4, #2
 800bb52:	9305      	str	r3, [sp, #20]
 800bb54:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800bc20 <_svfiprintf_r+0x1fc>
 800bb58:	7821      	ldrb	r1, [r4, #0]
 800bb5a:	2203      	movs	r2, #3
 800bb5c:	4650      	mov	r0, sl
 800bb5e:	f7f4 fbbf 	bl	80002e0 <memchr>
 800bb62:	b140      	cbz	r0, 800bb76 <_svfiprintf_r+0x152>
 800bb64:	2340      	movs	r3, #64	; 0x40
 800bb66:	eba0 000a 	sub.w	r0, r0, sl
 800bb6a:	fa03 f000 	lsl.w	r0, r3, r0
 800bb6e:	9b04      	ldr	r3, [sp, #16]
 800bb70:	4303      	orrs	r3, r0
 800bb72:	3401      	adds	r4, #1
 800bb74:	9304      	str	r3, [sp, #16]
 800bb76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb7a:	4826      	ldr	r0, [pc, #152]	; (800bc14 <_svfiprintf_r+0x1f0>)
 800bb7c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb80:	2206      	movs	r2, #6
 800bb82:	f7f4 fbad 	bl	80002e0 <memchr>
 800bb86:	2800      	cmp	r0, #0
 800bb88:	d038      	beq.n	800bbfc <_svfiprintf_r+0x1d8>
 800bb8a:	4b23      	ldr	r3, [pc, #140]	; (800bc18 <_svfiprintf_r+0x1f4>)
 800bb8c:	bb1b      	cbnz	r3, 800bbd6 <_svfiprintf_r+0x1b2>
 800bb8e:	9b03      	ldr	r3, [sp, #12]
 800bb90:	3307      	adds	r3, #7
 800bb92:	f023 0307 	bic.w	r3, r3, #7
 800bb96:	3308      	adds	r3, #8
 800bb98:	9303      	str	r3, [sp, #12]
 800bb9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb9c:	4433      	add	r3, r6
 800bb9e:	9309      	str	r3, [sp, #36]	; 0x24
 800bba0:	e767      	b.n	800ba72 <_svfiprintf_r+0x4e>
 800bba2:	fb0c 3202 	mla	r2, ip, r2, r3
 800bba6:	460c      	mov	r4, r1
 800bba8:	2001      	movs	r0, #1
 800bbaa:	e7a5      	b.n	800baf8 <_svfiprintf_r+0xd4>
 800bbac:	2300      	movs	r3, #0
 800bbae:	3401      	adds	r4, #1
 800bbb0:	9305      	str	r3, [sp, #20]
 800bbb2:	4619      	mov	r1, r3
 800bbb4:	f04f 0c0a 	mov.w	ip, #10
 800bbb8:	4620      	mov	r0, r4
 800bbba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbbe:	3a30      	subs	r2, #48	; 0x30
 800bbc0:	2a09      	cmp	r2, #9
 800bbc2:	d903      	bls.n	800bbcc <_svfiprintf_r+0x1a8>
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0c5      	beq.n	800bb54 <_svfiprintf_r+0x130>
 800bbc8:	9105      	str	r1, [sp, #20]
 800bbca:	e7c3      	b.n	800bb54 <_svfiprintf_r+0x130>
 800bbcc:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbd0:	4604      	mov	r4, r0
 800bbd2:	2301      	movs	r3, #1
 800bbd4:	e7f0      	b.n	800bbb8 <_svfiprintf_r+0x194>
 800bbd6:	ab03      	add	r3, sp, #12
 800bbd8:	9300      	str	r3, [sp, #0]
 800bbda:	462a      	mov	r2, r5
 800bbdc:	4b0f      	ldr	r3, [pc, #60]	; (800bc1c <_svfiprintf_r+0x1f8>)
 800bbde:	a904      	add	r1, sp, #16
 800bbe0:	4638      	mov	r0, r7
 800bbe2:	f3af 8000 	nop.w
 800bbe6:	1c42      	adds	r2, r0, #1
 800bbe8:	4606      	mov	r6, r0
 800bbea:	d1d6      	bne.n	800bb9a <_svfiprintf_r+0x176>
 800bbec:	89ab      	ldrh	r3, [r5, #12]
 800bbee:	065b      	lsls	r3, r3, #25
 800bbf0:	f53f af2c 	bmi.w	800ba4c <_svfiprintf_r+0x28>
 800bbf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf6:	b01d      	add	sp, #116	; 0x74
 800bbf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbfc:	ab03      	add	r3, sp, #12
 800bbfe:	9300      	str	r3, [sp, #0]
 800bc00:	462a      	mov	r2, r5
 800bc02:	4b06      	ldr	r3, [pc, #24]	; (800bc1c <_svfiprintf_r+0x1f8>)
 800bc04:	a904      	add	r1, sp, #16
 800bc06:	4638      	mov	r0, r7
 800bc08:	f000 f87a 	bl	800bd00 <_printf_i>
 800bc0c:	e7eb      	b.n	800bbe6 <_svfiprintf_r+0x1c2>
 800bc0e:	bf00      	nop
 800bc10:	0800d690 	.word	0x0800d690
 800bc14:	0800d69a 	.word	0x0800d69a
 800bc18:	00000000 	.word	0x00000000
 800bc1c:	0800b96d 	.word	0x0800b96d
 800bc20:	0800d696 	.word	0x0800d696

0800bc24 <_printf_common>:
 800bc24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc28:	4616      	mov	r6, r2
 800bc2a:	4699      	mov	r9, r3
 800bc2c:	688a      	ldr	r2, [r1, #8]
 800bc2e:	690b      	ldr	r3, [r1, #16]
 800bc30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bc34:	4293      	cmp	r3, r2
 800bc36:	bfb8      	it	lt
 800bc38:	4613      	movlt	r3, r2
 800bc3a:	6033      	str	r3, [r6, #0]
 800bc3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bc40:	4607      	mov	r7, r0
 800bc42:	460c      	mov	r4, r1
 800bc44:	b10a      	cbz	r2, 800bc4a <_printf_common+0x26>
 800bc46:	3301      	adds	r3, #1
 800bc48:	6033      	str	r3, [r6, #0]
 800bc4a:	6823      	ldr	r3, [r4, #0]
 800bc4c:	0699      	lsls	r1, r3, #26
 800bc4e:	bf42      	ittt	mi
 800bc50:	6833      	ldrmi	r3, [r6, #0]
 800bc52:	3302      	addmi	r3, #2
 800bc54:	6033      	strmi	r3, [r6, #0]
 800bc56:	6825      	ldr	r5, [r4, #0]
 800bc58:	f015 0506 	ands.w	r5, r5, #6
 800bc5c:	d106      	bne.n	800bc6c <_printf_common+0x48>
 800bc5e:	f104 0a19 	add.w	sl, r4, #25
 800bc62:	68e3      	ldr	r3, [r4, #12]
 800bc64:	6832      	ldr	r2, [r6, #0]
 800bc66:	1a9b      	subs	r3, r3, r2
 800bc68:	42ab      	cmp	r3, r5
 800bc6a:	dc26      	bgt.n	800bcba <_printf_common+0x96>
 800bc6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800bc70:	1e13      	subs	r3, r2, #0
 800bc72:	6822      	ldr	r2, [r4, #0]
 800bc74:	bf18      	it	ne
 800bc76:	2301      	movne	r3, #1
 800bc78:	0692      	lsls	r2, r2, #26
 800bc7a:	d42b      	bmi.n	800bcd4 <_printf_common+0xb0>
 800bc7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bc80:	4649      	mov	r1, r9
 800bc82:	4638      	mov	r0, r7
 800bc84:	47c0      	blx	r8
 800bc86:	3001      	adds	r0, #1
 800bc88:	d01e      	beq.n	800bcc8 <_printf_common+0xa4>
 800bc8a:	6823      	ldr	r3, [r4, #0]
 800bc8c:	68e5      	ldr	r5, [r4, #12]
 800bc8e:	6832      	ldr	r2, [r6, #0]
 800bc90:	f003 0306 	and.w	r3, r3, #6
 800bc94:	2b04      	cmp	r3, #4
 800bc96:	bf08      	it	eq
 800bc98:	1aad      	subeq	r5, r5, r2
 800bc9a:	68a3      	ldr	r3, [r4, #8]
 800bc9c:	6922      	ldr	r2, [r4, #16]
 800bc9e:	bf0c      	ite	eq
 800bca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bca4:	2500      	movne	r5, #0
 800bca6:	4293      	cmp	r3, r2
 800bca8:	bfc4      	itt	gt
 800bcaa:	1a9b      	subgt	r3, r3, r2
 800bcac:	18ed      	addgt	r5, r5, r3
 800bcae:	2600      	movs	r6, #0
 800bcb0:	341a      	adds	r4, #26
 800bcb2:	42b5      	cmp	r5, r6
 800bcb4:	d11a      	bne.n	800bcec <_printf_common+0xc8>
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	e008      	b.n	800bccc <_printf_common+0xa8>
 800bcba:	2301      	movs	r3, #1
 800bcbc:	4652      	mov	r2, sl
 800bcbe:	4649      	mov	r1, r9
 800bcc0:	4638      	mov	r0, r7
 800bcc2:	47c0      	blx	r8
 800bcc4:	3001      	adds	r0, #1
 800bcc6:	d103      	bne.n	800bcd0 <_printf_common+0xac>
 800bcc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd0:	3501      	adds	r5, #1
 800bcd2:	e7c6      	b.n	800bc62 <_printf_common+0x3e>
 800bcd4:	18e1      	adds	r1, r4, r3
 800bcd6:	1c5a      	adds	r2, r3, #1
 800bcd8:	2030      	movs	r0, #48	; 0x30
 800bcda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bcde:	4422      	add	r2, r4
 800bce0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bce4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bce8:	3302      	adds	r3, #2
 800bcea:	e7c7      	b.n	800bc7c <_printf_common+0x58>
 800bcec:	2301      	movs	r3, #1
 800bcee:	4622      	mov	r2, r4
 800bcf0:	4649      	mov	r1, r9
 800bcf2:	4638      	mov	r0, r7
 800bcf4:	47c0      	blx	r8
 800bcf6:	3001      	adds	r0, #1
 800bcf8:	d0e6      	beq.n	800bcc8 <_printf_common+0xa4>
 800bcfa:	3601      	adds	r6, #1
 800bcfc:	e7d9      	b.n	800bcb2 <_printf_common+0x8e>
	...

0800bd00 <_printf_i>:
 800bd00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bd04:	7e0f      	ldrb	r7, [r1, #24]
 800bd06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bd08:	2f78      	cmp	r7, #120	; 0x78
 800bd0a:	4691      	mov	r9, r2
 800bd0c:	4680      	mov	r8, r0
 800bd0e:	460c      	mov	r4, r1
 800bd10:	469a      	mov	sl, r3
 800bd12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800bd16:	d807      	bhi.n	800bd28 <_printf_i+0x28>
 800bd18:	2f62      	cmp	r7, #98	; 0x62
 800bd1a:	d80a      	bhi.n	800bd32 <_printf_i+0x32>
 800bd1c:	2f00      	cmp	r7, #0
 800bd1e:	f000 80d8 	beq.w	800bed2 <_printf_i+0x1d2>
 800bd22:	2f58      	cmp	r7, #88	; 0x58
 800bd24:	f000 80a3 	beq.w	800be6e <_printf_i+0x16e>
 800bd28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bd2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bd30:	e03a      	b.n	800bda8 <_printf_i+0xa8>
 800bd32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bd36:	2b15      	cmp	r3, #21
 800bd38:	d8f6      	bhi.n	800bd28 <_printf_i+0x28>
 800bd3a:	a101      	add	r1, pc, #4	; (adr r1, 800bd40 <_printf_i+0x40>)
 800bd3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bd40:	0800bd99 	.word	0x0800bd99
 800bd44:	0800bdad 	.word	0x0800bdad
 800bd48:	0800bd29 	.word	0x0800bd29
 800bd4c:	0800bd29 	.word	0x0800bd29
 800bd50:	0800bd29 	.word	0x0800bd29
 800bd54:	0800bd29 	.word	0x0800bd29
 800bd58:	0800bdad 	.word	0x0800bdad
 800bd5c:	0800bd29 	.word	0x0800bd29
 800bd60:	0800bd29 	.word	0x0800bd29
 800bd64:	0800bd29 	.word	0x0800bd29
 800bd68:	0800bd29 	.word	0x0800bd29
 800bd6c:	0800beb9 	.word	0x0800beb9
 800bd70:	0800bddd 	.word	0x0800bddd
 800bd74:	0800be9b 	.word	0x0800be9b
 800bd78:	0800bd29 	.word	0x0800bd29
 800bd7c:	0800bd29 	.word	0x0800bd29
 800bd80:	0800bedb 	.word	0x0800bedb
 800bd84:	0800bd29 	.word	0x0800bd29
 800bd88:	0800bddd 	.word	0x0800bddd
 800bd8c:	0800bd29 	.word	0x0800bd29
 800bd90:	0800bd29 	.word	0x0800bd29
 800bd94:	0800bea3 	.word	0x0800bea3
 800bd98:	682b      	ldr	r3, [r5, #0]
 800bd9a:	1d1a      	adds	r2, r3, #4
 800bd9c:	681b      	ldr	r3, [r3, #0]
 800bd9e:	602a      	str	r2, [r5, #0]
 800bda0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bda4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bda8:	2301      	movs	r3, #1
 800bdaa:	e0a3      	b.n	800bef4 <_printf_i+0x1f4>
 800bdac:	6820      	ldr	r0, [r4, #0]
 800bdae:	6829      	ldr	r1, [r5, #0]
 800bdb0:	0606      	lsls	r6, r0, #24
 800bdb2:	f101 0304 	add.w	r3, r1, #4
 800bdb6:	d50a      	bpl.n	800bdce <_printf_i+0xce>
 800bdb8:	680e      	ldr	r6, [r1, #0]
 800bdba:	602b      	str	r3, [r5, #0]
 800bdbc:	2e00      	cmp	r6, #0
 800bdbe:	da03      	bge.n	800bdc8 <_printf_i+0xc8>
 800bdc0:	232d      	movs	r3, #45	; 0x2d
 800bdc2:	4276      	negs	r6, r6
 800bdc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bdc8:	485e      	ldr	r0, [pc, #376]	; (800bf44 <_printf_i+0x244>)
 800bdca:	230a      	movs	r3, #10
 800bdcc:	e019      	b.n	800be02 <_printf_i+0x102>
 800bdce:	680e      	ldr	r6, [r1, #0]
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bdd6:	bf18      	it	ne
 800bdd8:	b236      	sxthne	r6, r6
 800bdda:	e7ef      	b.n	800bdbc <_printf_i+0xbc>
 800bddc:	682b      	ldr	r3, [r5, #0]
 800bdde:	6820      	ldr	r0, [r4, #0]
 800bde0:	1d19      	adds	r1, r3, #4
 800bde2:	6029      	str	r1, [r5, #0]
 800bde4:	0601      	lsls	r1, r0, #24
 800bde6:	d501      	bpl.n	800bdec <_printf_i+0xec>
 800bde8:	681e      	ldr	r6, [r3, #0]
 800bdea:	e002      	b.n	800bdf2 <_printf_i+0xf2>
 800bdec:	0646      	lsls	r6, r0, #25
 800bdee:	d5fb      	bpl.n	800bde8 <_printf_i+0xe8>
 800bdf0:	881e      	ldrh	r6, [r3, #0]
 800bdf2:	4854      	ldr	r0, [pc, #336]	; (800bf44 <_printf_i+0x244>)
 800bdf4:	2f6f      	cmp	r7, #111	; 0x6f
 800bdf6:	bf0c      	ite	eq
 800bdf8:	2308      	moveq	r3, #8
 800bdfa:	230a      	movne	r3, #10
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800be02:	6865      	ldr	r5, [r4, #4]
 800be04:	60a5      	str	r5, [r4, #8]
 800be06:	2d00      	cmp	r5, #0
 800be08:	bfa2      	ittt	ge
 800be0a:	6821      	ldrge	r1, [r4, #0]
 800be0c:	f021 0104 	bicge.w	r1, r1, #4
 800be10:	6021      	strge	r1, [r4, #0]
 800be12:	b90e      	cbnz	r6, 800be18 <_printf_i+0x118>
 800be14:	2d00      	cmp	r5, #0
 800be16:	d04d      	beq.n	800beb4 <_printf_i+0x1b4>
 800be18:	4615      	mov	r5, r2
 800be1a:	fbb6 f1f3 	udiv	r1, r6, r3
 800be1e:	fb03 6711 	mls	r7, r3, r1, r6
 800be22:	5dc7      	ldrb	r7, [r0, r7]
 800be24:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800be28:	4637      	mov	r7, r6
 800be2a:	42bb      	cmp	r3, r7
 800be2c:	460e      	mov	r6, r1
 800be2e:	d9f4      	bls.n	800be1a <_printf_i+0x11a>
 800be30:	2b08      	cmp	r3, #8
 800be32:	d10b      	bne.n	800be4c <_printf_i+0x14c>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	07de      	lsls	r6, r3, #31
 800be38:	d508      	bpl.n	800be4c <_printf_i+0x14c>
 800be3a:	6923      	ldr	r3, [r4, #16]
 800be3c:	6861      	ldr	r1, [r4, #4]
 800be3e:	4299      	cmp	r1, r3
 800be40:	bfde      	ittt	le
 800be42:	2330      	movle	r3, #48	; 0x30
 800be44:	f805 3c01 	strble.w	r3, [r5, #-1]
 800be48:	f105 35ff 	addle.w	r5, r5, #4294967295
 800be4c:	1b52      	subs	r2, r2, r5
 800be4e:	6122      	str	r2, [r4, #16]
 800be50:	f8cd a000 	str.w	sl, [sp]
 800be54:	464b      	mov	r3, r9
 800be56:	aa03      	add	r2, sp, #12
 800be58:	4621      	mov	r1, r4
 800be5a:	4640      	mov	r0, r8
 800be5c:	f7ff fee2 	bl	800bc24 <_printf_common>
 800be60:	3001      	adds	r0, #1
 800be62:	d14c      	bne.n	800befe <_printf_i+0x1fe>
 800be64:	f04f 30ff 	mov.w	r0, #4294967295
 800be68:	b004      	add	sp, #16
 800be6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be6e:	4835      	ldr	r0, [pc, #212]	; (800bf44 <_printf_i+0x244>)
 800be70:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800be74:	6829      	ldr	r1, [r5, #0]
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	f851 6b04 	ldr.w	r6, [r1], #4
 800be7c:	6029      	str	r1, [r5, #0]
 800be7e:	061d      	lsls	r5, r3, #24
 800be80:	d514      	bpl.n	800beac <_printf_i+0x1ac>
 800be82:	07df      	lsls	r7, r3, #31
 800be84:	bf44      	itt	mi
 800be86:	f043 0320 	orrmi.w	r3, r3, #32
 800be8a:	6023      	strmi	r3, [r4, #0]
 800be8c:	b91e      	cbnz	r6, 800be96 <_printf_i+0x196>
 800be8e:	6823      	ldr	r3, [r4, #0]
 800be90:	f023 0320 	bic.w	r3, r3, #32
 800be94:	6023      	str	r3, [r4, #0]
 800be96:	2310      	movs	r3, #16
 800be98:	e7b0      	b.n	800bdfc <_printf_i+0xfc>
 800be9a:	6823      	ldr	r3, [r4, #0]
 800be9c:	f043 0320 	orr.w	r3, r3, #32
 800bea0:	6023      	str	r3, [r4, #0]
 800bea2:	2378      	movs	r3, #120	; 0x78
 800bea4:	4828      	ldr	r0, [pc, #160]	; (800bf48 <_printf_i+0x248>)
 800bea6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800beaa:	e7e3      	b.n	800be74 <_printf_i+0x174>
 800beac:	0659      	lsls	r1, r3, #25
 800beae:	bf48      	it	mi
 800beb0:	b2b6      	uxthmi	r6, r6
 800beb2:	e7e6      	b.n	800be82 <_printf_i+0x182>
 800beb4:	4615      	mov	r5, r2
 800beb6:	e7bb      	b.n	800be30 <_printf_i+0x130>
 800beb8:	682b      	ldr	r3, [r5, #0]
 800beba:	6826      	ldr	r6, [r4, #0]
 800bebc:	6961      	ldr	r1, [r4, #20]
 800bebe:	1d18      	adds	r0, r3, #4
 800bec0:	6028      	str	r0, [r5, #0]
 800bec2:	0635      	lsls	r5, r6, #24
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	d501      	bpl.n	800becc <_printf_i+0x1cc>
 800bec8:	6019      	str	r1, [r3, #0]
 800beca:	e002      	b.n	800bed2 <_printf_i+0x1d2>
 800becc:	0670      	lsls	r0, r6, #25
 800bece:	d5fb      	bpl.n	800bec8 <_printf_i+0x1c8>
 800bed0:	8019      	strh	r1, [r3, #0]
 800bed2:	2300      	movs	r3, #0
 800bed4:	6123      	str	r3, [r4, #16]
 800bed6:	4615      	mov	r5, r2
 800bed8:	e7ba      	b.n	800be50 <_printf_i+0x150>
 800beda:	682b      	ldr	r3, [r5, #0]
 800bedc:	1d1a      	adds	r2, r3, #4
 800bede:	602a      	str	r2, [r5, #0]
 800bee0:	681d      	ldr	r5, [r3, #0]
 800bee2:	6862      	ldr	r2, [r4, #4]
 800bee4:	2100      	movs	r1, #0
 800bee6:	4628      	mov	r0, r5
 800bee8:	f7f4 f9fa 	bl	80002e0 <memchr>
 800beec:	b108      	cbz	r0, 800bef2 <_printf_i+0x1f2>
 800beee:	1b40      	subs	r0, r0, r5
 800bef0:	6060      	str	r0, [r4, #4]
 800bef2:	6863      	ldr	r3, [r4, #4]
 800bef4:	6123      	str	r3, [r4, #16]
 800bef6:	2300      	movs	r3, #0
 800bef8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800befc:	e7a8      	b.n	800be50 <_printf_i+0x150>
 800befe:	6923      	ldr	r3, [r4, #16]
 800bf00:	462a      	mov	r2, r5
 800bf02:	4649      	mov	r1, r9
 800bf04:	4640      	mov	r0, r8
 800bf06:	47d0      	blx	sl
 800bf08:	3001      	adds	r0, #1
 800bf0a:	d0ab      	beq.n	800be64 <_printf_i+0x164>
 800bf0c:	6823      	ldr	r3, [r4, #0]
 800bf0e:	079b      	lsls	r3, r3, #30
 800bf10:	d413      	bmi.n	800bf3a <_printf_i+0x23a>
 800bf12:	68e0      	ldr	r0, [r4, #12]
 800bf14:	9b03      	ldr	r3, [sp, #12]
 800bf16:	4298      	cmp	r0, r3
 800bf18:	bfb8      	it	lt
 800bf1a:	4618      	movlt	r0, r3
 800bf1c:	e7a4      	b.n	800be68 <_printf_i+0x168>
 800bf1e:	2301      	movs	r3, #1
 800bf20:	4632      	mov	r2, r6
 800bf22:	4649      	mov	r1, r9
 800bf24:	4640      	mov	r0, r8
 800bf26:	47d0      	blx	sl
 800bf28:	3001      	adds	r0, #1
 800bf2a:	d09b      	beq.n	800be64 <_printf_i+0x164>
 800bf2c:	3501      	adds	r5, #1
 800bf2e:	68e3      	ldr	r3, [r4, #12]
 800bf30:	9903      	ldr	r1, [sp, #12]
 800bf32:	1a5b      	subs	r3, r3, r1
 800bf34:	42ab      	cmp	r3, r5
 800bf36:	dcf2      	bgt.n	800bf1e <_printf_i+0x21e>
 800bf38:	e7eb      	b.n	800bf12 <_printf_i+0x212>
 800bf3a:	2500      	movs	r5, #0
 800bf3c:	f104 0619 	add.w	r6, r4, #25
 800bf40:	e7f5      	b.n	800bf2e <_printf_i+0x22e>
 800bf42:	bf00      	nop
 800bf44:	0800d6a1 	.word	0x0800d6a1
 800bf48:	0800d6b2 	.word	0x0800d6b2

0800bf4c <__retarget_lock_acquire_recursive>:
 800bf4c:	4770      	bx	lr

0800bf4e <__retarget_lock_release_recursive>:
 800bf4e:	4770      	bx	lr

0800bf50 <memcpy>:
 800bf50:	440a      	add	r2, r1
 800bf52:	4291      	cmp	r1, r2
 800bf54:	f100 33ff 	add.w	r3, r0, #4294967295
 800bf58:	d100      	bne.n	800bf5c <memcpy+0xc>
 800bf5a:	4770      	bx	lr
 800bf5c:	b510      	push	{r4, lr}
 800bf5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bf66:	4291      	cmp	r1, r2
 800bf68:	d1f9      	bne.n	800bf5e <memcpy+0xe>
 800bf6a:	bd10      	pop	{r4, pc}

0800bf6c <memmove>:
 800bf6c:	4288      	cmp	r0, r1
 800bf6e:	b510      	push	{r4, lr}
 800bf70:	eb01 0402 	add.w	r4, r1, r2
 800bf74:	d902      	bls.n	800bf7c <memmove+0x10>
 800bf76:	4284      	cmp	r4, r0
 800bf78:	4623      	mov	r3, r4
 800bf7a:	d807      	bhi.n	800bf8c <memmove+0x20>
 800bf7c:	1e43      	subs	r3, r0, #1
 800bf7e:	42a1      	cmp	r1, r4
 800bf80:	d008      	beq.n	800bf94 <memmove+0x28>
 800bf82:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bf86:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bf8a:	e7f8      	b.n	800bf7e <memmove+0x12>
 800bf8c:	4402      	add	r2, r0
 800bf8e:	4601      	mov	r1, r0
 800bf90:	428a      	cmp	r2, r1
 800bf92:	d100      	bne.n	800bf96 <memmove+0x2a>
 800bf94:	bd10      	pop	{r4, pc}
 800bf96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bf9a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bf9e:	e7f7      	b.n	800bf90 <memmove+0x24>

0800bfa0 <_realloc_r>:
 800bfa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bfa4:	4680      	mov	r8, r0
 800bfa6:	4614      	mov	r4, r2
 800bfa8:	460e      	mov	r6, r1
 800bfaa:	b921      	cbnz	r1, 800bfb6 <_realloc_r+0x16>
 800bfac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bfb0:	4611      	mov	r1, r2
 800bfb2:	f7ff bc2b 	b.w	800b80c <_malloc_r>
 800bfb6:	b92a      	cbnz	r2, 800bfc4 <_realloc_r+0x24>
 800bfb8:	f7ff fbbc 	bl	800b734 <_free_r>
 800bfbc:	4625      	mov	r5, r4
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfc4:	f000 f81b 	bl	800bffe <_malloc_usable_size_r>
 800bfc8:	4284      	cmp	r4, r0
 800bfca:	4607      	mov	r7, r0
 800bfcc:	d802      	bhi.n	800bfd4 <_realloc_r+0x34>
 800bfce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bfd2:	d812      	bhi.n	800bffa <_realloc_r+0x5a>
 800bfd4:	4621      	mov	r1, r4
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	f7ff fc18 	bl	800b80c <_malloc_r>
 800bfdc:	4605      	mov	r5, r0
 800bfde:	2800      	cmp	r0, #0
 800bfe0:	d0ed      	beq.n	800bfbe <_realloc_r+0x1e>
 800bfe2:	42bc      	cmp	r4, r7
 800bfe4:	4622      	mov	r2, r4
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	bf28      	it	cs
 800bfea:	463a      	movcs	r2, r7
 800bfec:	f7ff ffb0 	bl	800bf50 <memcpy>
 800bff0:	4631      	mov	r1, r6
 800bff2:	4640      	mov	r0, r8
 800bff4:	f7ff fb9e 	bl	800b734 <_free_r>
 800bff8:	e7e1      	b.n	800bfbe <_realloc_r+0x1e>
 800bffa:	4635      	mov	r5, r6
 800bffc:	e7df      	b.n	800bfbe <_realloc_r+0x1e>

0800bffe <_malloc_usable_size_r>:
 800bffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c002:	1f18      	subs	r0, r3, #4
 800c004:	2b00      	cmp	r3, #0
 800c006:	bfbc      	itt	lt
 800c008:	580b      	ldrlt	r3, [r1, r0]
 800c00a:	18c0      	addlt	r0, r0, r3
 800c00c:	4770      	bx	lr
	...

0800c010 <_init>:
 800c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c012:	bf00      	nop
 800c014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c016:	bc08      	pop	{r3}
 800c018:	469e      	mov	lr, r3
 800c01a:	4770      	bx	lr

0800c01c <_fini>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr
