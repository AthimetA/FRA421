
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a324  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800a5bc  0800a5bc  0001a5bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a674  0800a674  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a674  0800a674  0001a674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a67c  0800a67c  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a67c  0800a67c  0001a67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a680  0800a680  0001a680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800a684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800a694  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800a6f4  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b5c  240000d0  0800a754  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000c2c  0800a754  00020c2c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f123  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003480  00000000  00000000  0003f221  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f8  00000000  00000000  000426a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012d0  00000000  00000000  00043aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c0bb  00000000  00000000  00044d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001b0ac  00000000  00000000  00080e2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186c0d  00000000  00000000  0009bed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00222ae4  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000054ec  00000000  00000000  00222b34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a5a4 	.word	0x0800a5a4

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800a5a4 	.word	0x0800a5a4

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	715a      	strb	r2, [r3, #5]
	dst->actionPositon = src->actionPositon;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	719a      	strb	r2, [r3, #6]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b088      	sub	sp, #32
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3314      	adds	r3, #20
 800064a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800064c:	2300      	movs	r3, #0
 800064e:	76fb      	strb	r3, [r7, #27]
 8000650:	e00b      	b.n	800066a <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	69f9      	ldr	r1, [r7, #28]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffbf 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	330c      	adds	r3, #12
 8000662:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000664:	7efb      	ldrb	r3, [r7, #27]
 8000666:	3301      	adds	r3, #1
 8000668:	76fb      	strb	r3, [r7, #27]
 800066a:	7efb      	ldrb	r3, [r7, #27]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d9f0      	bls.n	8000652 <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b088      	sub	sp, #32
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000694:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000696:	2300      	movs	r3, #0
 8000698:	76fb      	strb	r3, [r7, #27]
 800069a:	e00b      	b.n	80006b4 <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	69f9      	ldr	r1, [r7, #28]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff9a 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	330c      	adds	r3, #12
 80006ac:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80006ae:	7efb      	ldrb	r3, [r7, #27]
 80006b0:	3301      	adds	r3, #1
 80006b2:	76fb      	strb	r3, [r7, #27]
 80006b4:	7efb      	ldrb	r3, [r7, #27]
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	d9f0      	bls.n	800069c <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80006d2:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80006da:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80006e2:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80006ea:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80006ec:	2306      	movs	r3, #6
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e00c      	b.n	800070c <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6978      	ldr	r0, [r7, #20]
 80006f6:	f7ff ff71 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3b0c      	subs	r3, #12
 80006fe:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3b0c      	subs	r3, #12
 8000704:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3b01      	subs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	dcef      	bgt.n	80006f2 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	613b      	str	r3, [r7, #16]
	ptrPlayer1 = &state_game->player[0];
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800073e:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000746:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d023      	beq.n	8000796 <GAME_PLAY_Management+0x7a>
 800074e:	2b02      	cmp	r3, #2
 8000750:	dc26      	bgt.n	80007a0 <GAME_PLAY_Management+0x84>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <GAME_PLAY_Management+0x40>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d019      	beq.n	800078e <GAME_PLAY_Management+0x72>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
	case second_player:
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 800075a:	e021      	b.n	80007a0 <GAME_PLAY_Management+0x84>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800075c:	2108      	movs	r1, #8
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <GAME_PLAY_Management+0x8c>)
 8000760:	f004 fdc6 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10c      	bne.n	8000784 <GAME_PLAY_Management+0x68>
			ptrPlayer1->life_point = 4000;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000770:	801a      	strh	r2, [r3, #0]
			ptrPlayer2->life_point = 4000;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000778:	801a      	strh	r2, [r3, #0]
			state_game->player_state = first_player;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2201      	movs	r2, #1
 800077e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000782:	e00d      	b.n	80007a0 <GAME_PLAY_Management+0x84>
			state_game->test = 98;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2262      	movs	r2, #98	; 0x62
 8000788:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 800078c:	e008      	b.n	80007a0 <GAME_PLAY_Management+0x84>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f80b 	bl	80007ac <GAME_PLAY_Phase_Management>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f807 	bl	80007ac <GAME_PLAY_Phase_Management>
		break;
 800079e:	bf00      	nop
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58020000 	.word	0x58020000

080007ac <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 80007bc:	75bb      	strb	r3, [r7, #22]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 80007c4:	757b      	strb	r3, [r7, #21]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3304      	adds	r3, #4
 80007ca:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayerDef = state_game->player;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	3304      	adds	r3, #4
 80007d0:	613b      	str	r3, [r7, #16]

	if (state_game->player_state == first_player) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d107      	bne.n	80007ec <GAME_PLAY_Phase_Management+0x40>
		ptrPlayerAtk = &state_game->player[0];
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	61fb      	str	r3, [r7, #28]
		ptrPlayerDef = &state_game->player[1];
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007e8:	613b      	str	r3, [r7, #16]
 80007ea:	e00b      	b.n	8000804 <GAME_PLAY_Phase_Management+0x58>
	} else if (state_game->player_state == first_player) {
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d106      	bne.n	8000804 <GAME_PLAY_Phase_Management+0x58>
		ptrPlayerAtk = &state_game->player[1];
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007fc:	61fb      	str	r3, [r7, #28]
		ptrPlayerDef = &state_game->player[0];
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3304      	adds	r3, #4
 8000802:	613b      	str	r3, [r7, #16]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000804:	7dbb      	ldrb	r3, [r7, #22]
 8000806:	2b03      	cmp	r3, #3
 8000808:	f200 8270 	bhi.w	8000cec <GAME_PLAY_Phase_Management+0x540>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <GAME_PLAY_Phase_Management+0x68>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000825 	.word	0x08000825
 8000818:	0800084d 	.word	0x0800084d
 800081c:	08000ce3 	.word	0x08000ce3
 8000820:	08000ce3 	.word	0x08000ce3
	case Drawn_Phase:
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000824:	2101      	movs	r1, #1
 8000826:	489b      	ldr	r0, [pc, #620]	; (8000a94 <GAME_PLAY_Phase_Management+0x2e8>)
 8000828:	f004 fd62 	bl	80052f0 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	f040 8259 	bne.w	8000ce6 <GAME_PLAY_Phase_Management+0x53a>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2201      	movs	r2, #1
 8000838:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		}
		break;
 800084a:	e24c      	b.n	8000ce6 <GAME_PLAY_Phase_Management+0x53a>
	case Main_Phase:

		switch (MAIN)
 800084c:	7d7b      	ldrb	r3, [r7, #21]
 800084e:	2b06      	cmp	r3, #6
 8000850:	f200 824b 	bhi.w	8000cea <GAME_PLAY_Phase_Management+0x53e>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <GAME_PLAY_Phase_Management+0xb0>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	08000879 	.word	0x08000879
 8000860:	080008a1 	.word	0x080008a1
 8000864:	0800099f 	.word	0x0800099f
 8000868:	08000b23 	.word	0x08000b23
 800086c:	08000cc7 	.word	0x08000cc7
 8000870:	08000c69 	.word	0x08000c69
 8000874:	08000c01 	.word	0x08000c01
		{
		case await:
			if (state_game->action == 0)
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b00      	cmp	r3, #0
 800087e:	d105      	bne.n	800088c <GAME_PLAY_Phase_Management+0xe0>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000880:	69fa      	ldr	r2, [r7, #28]
 8000882:	6839      	ldr	r1, [r7, #0]
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f000 fa3d 	bl	8000d04 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 800088a:	e21e      	b.n	8000cca <GAME_PLAY_Phase_Management+0x51e>
			else if (state_game->action == 1)
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	2b01      	cmp	r3, #1
 8000892:	f040 821a 	bne.w	8000cca <GAME_PLAY_Phase_Management+0x51e>
				state_game->MAIN = select_position;
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	2201      	movs	r2, #1
 800089a:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800089e:	e214      	b.n	8000cca <GAME_PLAY_Phase_Management+0x51e>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80008a6:	60fb      	str	r3, [r7, #12]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 80008a8:	69fb      	ldr	r3, [r7, #28]
 80008aa:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80008ae:	61bb      	str	r3, [r7, #24]

			if (state_game->action == 1)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d15e      	bne.n	8000976 <GAME_PLAY_Phase_Management+0x1ca>
			{
				if (state_game->player_state == first_player)
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80008be:	2b01      	cmp	r3, #1
 80008c0:	d135      	bne.n	800092e <GAME_PLAY_Phase_Management+0x182>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 80008c2:	2108      	movs	r1, #8
 80008c4:	4873      	ldr	r0, [pc, #460]	; (8000a94 <GAME_PLAY_Phase_Management+0x2e8>)
 80008c6:	f004 fd13 	bl	80052f0 <HAL_GPIO_ReadPin>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d106      	bne.n	80008de <GAME_PLAY_Phase_Management+0x132>
					{
						ptrYugiohCard_src->cardState = 1;
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2201      	movs	r2, #1
 80008d4:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	2202      	movs	r2, #2
 80008da:	701a      	strb	r2, [r3, #0]
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 80008dc:	e1f7      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 80008de:	2102      	movs	r1, #2
 80008e0:	486d      	ldr	r0, [pc, #436]	; (8000a98 <GAME_PLAY_Phase_Management+0x2ec>)
 80008e2:	f004 fd05 	bl	80052f0 <HAL_GPIO_ReadPin>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d106      	bne.n	80008fa <GAME_PLAY_Phase_Management+0x14e>
						ptrYugiohCard_src->cardState = 0;
 80008ec:	68fb      	ldr	r3, [r7, #12]
 80008ee:	2200      	movs	r2, #0
 80008f0:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	2202      	movs	r2, #2
 80008f6:	701a      	strb	r2, [r3, #0]
			break;
 80008f8:	e1e9      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	4867      	ldr	r0, [pc, #412]	; (8000a9c <GAME_PLAY_Phase_Management+0x2f0>)
 8000900:	f004 fcf6 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d104      	bne.n	8000914 <GAME_PLAY_Phase_Management+0x168>
						state_game->test = 22;
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	2216      	movs	r2, #22
 800090e:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000912:	e1dc      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000914:	2104      	movs	r1, #4
 8000916:	485f      	ldr	r0, [pc, #380]	; (8000a94 <GAME_PLAY_Phase_Management+0x2e8>)
 8000918:	f004 fcea 	bl	80052f0 <HAL_GPIO_ReadPin>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	f040 81d5 	bne.w	8000cce <GAME_PLAY_Phase_Management+0x522>
						state_game->test = 33;
 8000924:	683b      	ldr	r3, [r7, #0]
 8000926:	2221      	movs	r2, #33	; 0x21
 8000928:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 800092c:	e1cf      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
				else if (state_game->player_state == second_player)
 800092e:	683b      	ldr	r3, [r7, #0]
 8000930:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000934:	2b02      	cmp	r3, #2
 8000936:	f040 81ca 	bne.w	8000cce <GAME_PLAY_Phase_Management+0x522>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 800093a:	2104      	movs	r1, #4
 800093c:	4855      	ldr	r0, [pc, #340]	; (8000a94 <GAME_PLAY_Phase_Management+0x2e8>)
 800093e:	f004 fcd7 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d106      	bne.n	8000956 <GAME_PLAY_Phase_Management+0x1aa>
						ptrYugiohCard_src->cardState = 1;
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	2201      	movs	r2, #1
 800094c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	2202      	movs	r2, #2
 8000952:	701a      	strb	r2, [r3, #0]
			break;
 8000954:	e1bb      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000956:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800095a:	4850      	ldr	r0, [pc, #320]	; (8000a9c <GAME_PLAY_Phase_Management+0x2f0>)
 800095c:	f004 fcc8 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000960:	4603      	mov	r3, r0
 8000962:	2b00      	cmp	r3, #0
 8000964:	f040 81b3 	bne.w	8000cce <GAME_PLAY_Phase_Management+0x522>
						ptrYugiohCard_src->cardState = 0;
 8000968:	68fb      	ldr	r3, [r7, #12]
 800096a:	2200      	movs	r2, #0
 800096c:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	2202      	movs	r2, #2
 8000972:	701a      	strb	r2, [r3, #0]
			break;
 8000974:	e1ab      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
			else if (state_game->action == 2)
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	2b02      	cmp	r3, #2
 800097c:	f040 81a7 	bne.w	8000cce <GAME_PLAY_Phase_Management+0x522>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000980:	69b9      	ldr	r1, [r7, #24]
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f7ff fe2a 	bl	80005dc <YUGIOH_card_copy>
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000988:	69f8      	ldr	r0, [r7, #28]
 800098a:	f7ff fe76 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
				state_game->action = 3;
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	2203      	movs	r2, #3
 8000992:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	2202      	movs	r2, #2
 8000998:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800099c:	e197      	b.n	8000cce <GAME_PLAY_Phase_Management+0x522>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 800099e:	69fb      	ldr	r3, [r7, #28]
 80009a0:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80009a4:	60fb      	str	r3, [r7, #12]

			if (state_game->action == 3)
 80009a6:	683b      	ldr	r3, [r7, #0]
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b03      	cmp	r3, #3
 80009ac:	f040 8191 	bne.w	8000cd2 <GAME_PLAY_Phase_Management+0x526>
			{
				if (ptrYugiohCard_src->cardType == 3)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	785b      	ldrb	r3, [r3, #1]
 80009b4:	2b03      	cmp	r3, #3
 80009b6:	d12a      	bne.n	8000a0e <GAME_PLAY_Phase_Management+0x262>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 80009b8:	68fb      	ldr	r3, [r7, #12]
 80009ba:	799a      	ldrb	r2, [r3, #6]
 80009bc:	4b38      	ldr	r3, [pc, #224]	; (8000aa0 <GAME_PLAY_Phase_Management+0x2f4>)
 80009be:	fba3 1302 	umull	r1, r3, r3, r2
 80009c2:	0899      	lsrs	r1, r3, #2
 80009c4:	460b      	mov	r3, r1
 80009c6:	005b      	lsls	r3, r3, #1
 80009c8:	440b      	add	r3, r1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	1ad3      	subs	r3, r2, r3
 80009ce:	723b      	strb	r3, [r7, #8]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80009d0:	7a3a      	ldrb	r2, [r7, #8]
 80009d2:	4613      	mov	r3, r2
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	009b      	lsls	r3, r3, #2
 80009da:	69fa      	ldr	r2, [r7, #28]
 80009dc:	4413      	add	r3, r2
 80009de:	3304      	adds	r3, #4
 80009e0:	61bb      	str	r3, [r7, #24]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80009e2:	69b9      	ldr	r1, [r7, #24]
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff fdf9 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80009ea:	69f8      	ldr	r0, [r7, #28]
 80009ec:	f7ff fe45 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80009f0:	69fb      	ldr	r3, [r7, #28]
 80009f2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80009f6:	68f9      	ldr	r1, [r7, #12]
 80009f8:	4618      	mov	r0, r3
 80009fa:	f7ff fdef 	bl	80005dc <YUGIOH_card_copy>

					state_game->action = 0;
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	2200      	movs	r2, #0
 8000a02:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000a04:	683b      	ldr	r3, [r7, #0]
 8000a06:	2200      	movs	r2, #0
 8000a08:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 8000a0c:	e161      	b.n	8000cd2 <GAME_PLAY_Phase_Management+0x526>
				else if (ptrYugiohCard_src->cardType == 2)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	785b      	ldrb	r3, [r3, #1]
 8000a12:	2b02      	cmp	r3, #2
 8000a14:	d146      	bne.n	8000aa4 <GAME_PLAY_Phase_Management+0x2f8>
					if(ptrYugiohCard_src->actionPositon == 1){
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	799b      	ldrb	r3, [r3, #6]
 8000a1a:	2b01      	cmp	r3, #1
 8000a1c:	d10e      	bne.n	8000a3c <GAME_PLAY_Phase_Management+0x290>
						state_game->test = 33;
 8000a1e:	683b      	ldr	r3, [r7, #0]
 8000a20:	2221      	movs	r2, #33	; 0x21
 8000a22:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000a26:	69f8      	ldr	r0, [r7, #28]
 8000a28:	f7ff fe27 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000a2c:	683b      	ldr	r3, [r7, #0]
 8000a2e:	2204      	movs	r2, #4
 8000a30:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = chaining_main_DEF;
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	2206      	movs	r2, #6
 8000a36:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000a3a:	e14a      	b.n	8000cd2 <GAME_PLAY_Phase_Management+0x526>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	799a      	ldrb	r2, [r3, #6]
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <GAME_PLAY_Phase_Management+0x2f4>)
 8000a42:	fba3 1302 	umull	r1, r3, r3, r2
 8000a46:	0899      	lsrs	r1, r3, #2
 8000a48:	460b      	mov	r3, r1
 8000a4a:	005b      	lsls	r3, r3, #1
 8000a4c:	440b      	add	r3, r1
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	1ad3      	subs	r3, r2, r3
 8000a52:	727b      	strb	r3, [r7, #9]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000a54:	7a7a      	ldrb	r2, [r7, #9]
 8000a56:	4613      	mov	r3, r2
 8000a58:	005b      	lsls	r3, r3, #1
 8000a5a:	4413      	add	r3, r2
 8000a5c:	009b      	lsls	r3, r3, #2
 8000a5e:	69fa      	ldr	r2, [r7, #28]
 8000a60:	4413      	add	r3, r2
 8000a62:	3304      	adds	r3, #4
 8000a64:	61bb      	str	r3, [r7, #24]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a66:	69b9      	ldr	r1, [r7, #24]
 8000a68:	68f8      	ldr	r0, [r7, #12]
 8000a6a:	f7ff fdb7 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000a6e:	69f8      	ldr	r0, [r7, #28]
 8000a70:	f7ff fe03 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000a74:	69fb      	ldr	r3, [r7, #28]
 8000a76:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000a7a:	68f9      	ldr	r1, [r7, #12]
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f7ff fdad 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000a90:	e11f      	b.n	8000cd2 <GAME_PLAY_Phase_Management+0x526>
 8000a92:	bf00      	nop
 8000a94:	58020800 	.word	0x58020800
 8000a98:	58020400 	.word	0x58020400
 8000a9c:	58021400 	.word	0x58021400
 8000aa0:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 8000aa4:	68fb      	ldr	r3, [r7, #12]
 8000aa6:	785b      	ldrb	r3, [r3, #1]
 8000aa8:	2b01      	cmp	r3, #1
 8000aaa:	f040 8112 	bne.w	8000cd2 <GAME_PLAY_Phase_Management+0x526>
					if (ptrYugiohCard_src->cardLevel < 7)
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	78db      	ldrb	r3, [r3, #3]
 8000ab2:	2b06      	cmp	r3, #6
 8000ab4:	d82a      	bhi.n	8000b0c <GAME_PLAY_Phase_Management+0x360>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000ab6:	68fb      	ldr	r3, [r7, #12]
 8000ab8:	799a      	ldrb	r2, [r3, #6]
 8000aba:	4b8e      	ldr	r3, [pc, #568]	; (8000cf4 <GAME_PLAY_Phase_Management+0x548>)
 8000abc:	fba3 1302 	umull	r1, r3, r3, r2
 8000ac0:	0899      	lsrs	r1, r3, #2
 8000ac2:	460b      	mov	r3, r1
 8000ac4:	005b      	lsls	r3, r3, #1
 8000ac6:	440b      	add	r3, r1
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	72bb      	strb	r3, [r7, #10]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000ace:	7aba      	ldrb	r2, [r7, #10]
 8000ad0:	4613      	mov	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	4413      	add	r3, r2
 8000ad6:	009b      	lsls	r3, r3, #2
 8000ad8:	69fa      	ldr	r2, [r7, #28]
 8000ada:	4413      	add	r3, r2
 8000adc:	3304      	adds	r3, #4
 8000ade:	61bb      	str	r3, [r7, #24]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000ae0:	69b9      	ldr	r1, [r7, #24]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f7ff fd7a 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000ae8:	69f8      	ldr	r0, [r7, #28]
 8000aea:	f7ff fdc6 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000aee:	69fb      	ldr	r3, [r7, #28]
 8000af0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000af4:	68f9      	ldr	r1, [r7, #12]
 8000af6:	4618      	mov	r0, r3
 8000af8:	f7ff fd70 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	2200      	movs	r2, #0
 8000b06:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000b0a:	e0e2      	b.n	8000cd2 <GAME_PLAY_Phase_Management+0x526>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000b0c:	69f8      	ldr	r0, [r7, #28]
 8000b0e:	f7ff fdb4 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	2204      	movs	r2, #4
 8000b16:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	2203      	movs	r2, #3
 8000b1c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000b20:	e0d7      	b.n	8000cd2 <GAME_PLAY_Phase_Management+0x526>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000b22:	69fb      	ldr	r3, [r7, #28]
 8000b24:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000b28:	60fb      	str	r3, [r7, #12]

			if (state_game->action == 4)
 8000b2a:	683b      	ldr	r3, [r7, #0]
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d105      	bne.n	8000b3e <GAME_PLAY_Phase_Management+0x392>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000b32:	69fa      	ldr	r2, [r7, #28]
 8000b34:	6839      	ldr	r1, [r7, #0]
 8000b36:	6878      	ldr	r0, [r7, #4]
 8000b38:	f000 f8e4 	bl	8000d04 <Player_Reading_Card>
 8000b3c:	e060      	b.n	8000c00 <GAME_PLAY_Phase_Management+0x454>
			}
			else if (state_game->action == 5)
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	2b05      	cmp	r3, #5
 8000b44:	d105      	bne.n	8000b52 <GAME_PLAY_Phase_Management+0x3a6>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000b46:	69fa      	ldr	r2, [r7, #28]
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	6878      	ldr	r0, [r7, #4]
 8000b4c:	f000 f8da 	bl	8000d04 <Player_Reading_Card>
 8000b50:	e056      	b.n	8000c00 <GAME_PLAY_Phase_Management+0x454>
			}
			else if (state_game->action == 6)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	781b      	ldrb	r3, [r3, #0]
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	f040 80bd 	bne.w	8000cd6 <GAME_PLAY_Phase_Management+0x52a>
			{
				uint8_t monsterflag = 0 ;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	75fb      	strb	r3, [r7, #23]
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000b66:	61bb      	str	r3, [r7, #24]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	78db      	ldrb	r3, [r3, #3]
 8000b6c:	2b04      	cmp	r3, #4
 8000b6e:	d802      	bhi.n	8000b76 <GAME_PLAY_Phase_Management+0x3ca>
				{
					monsterflag += 1;
 8000b70:	7dfb      	ldrb	r3, [r7, #23]
 8000b72:	3301      	adds	r3, #1
 8000b74:	75fb      	strb	r3, [r7, #23]
				}
				ptrYugiohCard_dst++;
 8000b76:	69bb      	ldr	r3, [r7, #24]
 8000b78:	330c      	adds	r3, #12
 8000b7a:	61bb      	str	r3, [r7, #24]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	78db      	ldrb	r3, [r3, #3]
 8000b80:	2b04      	cmp	r3, #4
 8000b82:	d802      	bhi.n	8000b8a <GAME_PLAY_Phase_Management+0x3de>
				{
					monsterflag += 1;
 8000b84:	7dfb      	ldrb	r3, [r7, #23]
 8000b86:	3301      	adds	r3, #1
 8000b88:	75fb      	strb	r3, [r7, #23]
				}

				if (monsterflag == 2)
 8000b8a:	7dfb      	ldrb	r3, [r7, #23]
 8000b8c:	2b02      	cmp	r3, #2
 8000b8e:	d12a      	bne.n	8000be6 <GAME_PLAY_Phase_Management+0x43a>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	799a      	ldrb	r2, [r3, #6]
 8000b94:	4b57      	ldr	r3, [pc, #348]	; (8000cf4 <GAME_PLAY_Phase_Management+0x548>)
 8000b96:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9a:	0899      	lsrs	r1, r3, #2
 8000b9c:	460b      	mov	r3, r1
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	440b      	add	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	1ad3      	subs	r3, r2, r3
 8000ba6:	72fb      	strb	r3, [r7, #11]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000ba8:	7afa      	ldrb	r2, [r7, #11]
 8000baa:	4613      	mov	r3, r2
 8000bac:	005b      	lsls	r3, r3, #1
 8000bae:	4413      	add	r3, r2
 8000bb0:	009b      	lsls	r3, r3, #2
 8000bb2:	69fa      	ldr	r2, [r7, #28]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	3304      	adds	r3, #4
 8000bb8:	61bb      	str	r3, [r7, #24]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bba:	69b9      	ldr	r1, [r7, #24]
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff fd0d 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000bc2:	69f8      	ldr	r0, [r7, #28]
 8000bc4:	f7ff fd59 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000bc8:	69fb      	ldr	r3, [r7, #28]
 8000bca:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000bce:	68f9      	ldr	r1, [r7, #12]
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	f7ff fd03 	bl	80005dc <YUGIOH_card_copy>



					state_game->action = 0;
 8000bd6:	683b      	ldr	r3, [r7, #0]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
 8000be4:	e00c      	b.n	8000c00 <GAME_PLAY_Phase_Management+0x454>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000be6:	69f8      	ldr	r0, [r7, #28]
 8000be8:	f7ff fd47 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 8000bec:	69fb      	ldr	r3, [r7, #28]
 8000bee:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4610      	mov	r0, r2
 8000bfc:	f7ff fcee 	bl	80005dc <YUGIOH_card_copy>

			else

			break;
		case chaining_main_DEF:
			state_game->test = 34;
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	2222      	movs	r2, #34	; 0x22
 8000c04:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000c08:	2104      	movs	r1, #4
 8000c0a:	483b      	ldr	r0, [pc, #236]	; (8000cf8 <GAME_PLAY_Phase_Management+0x54c>)
 8000c0c:	f004 fb70 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d11b      	bne.n	8000c4e <GAME_PLAY_Phase_Management+0x4a2>
			{
				state_game->test = 35;
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	2223      	movs	r2, #35	; 0x23
 8000c1a:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				state_game->action = 5;
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	2205      	movs	r2, #5
 8000c22:	701a      	strb	r2, [r3, #0]
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000c24:	69fa      	ldr	r2, [r7, #28]
 8000c26:	6839      	ldr	r1, [r7, #0]
 8000c28:	6878      	ldr	r0, [r7, #4]
 8000c2a:	f000 f86b 	bl	8000d04 <Player_Reading_Card>
				if((state_game->action == 6 )&& (ptrYugiohCard_dst->cardType == 3)){
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b06      	cmp	r3, #6
 8000c34:	d151      	bne.n	8000cda <GAME_PLAY_Phase_Management+0x52e>
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	785b      	ldrb	r3, [r3, #1]
 8000c3a:	2b03      	cmp	r3, #3
 8000c3c:	d14d      	bne.n	8000cda <GAME_PLAY_Phase_Management+0x52e>
					state_game->MAIN = chaining_main_ATK;
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	2205      	movs	r2, #5
 8000c42:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
					state_game->action = 4;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2204      	movs	r2, #4
 8000c4a:	701a      	strb	r2, [r3, #0]
			}
			else if ((HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET))
			{
				state_game->MAIN = activate_effect;
			}
			break;
 8000c4c:	e045      	b.n	8000cda <GAME_PLAY_Phase_Management+0x52e>
			else if ((HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET))
 8000c4e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c52:	482a      	ldr	r0, [pc, #168]	; (8000cfc <GAME_PLAY_Phase_Management+0x550>)
 8000c54:	f004 fb4c 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d13d      	bne.n	8000cda <GAME_PLAY_Phase_Management+0x52e>
				state_game->MAIN = activate_effect;
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	2204      	movs	r2, #4
 8000c62:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000c66:	e038      	b.n	8000cda <GAME_PLAY_Phase_Management+0x52e>
		case chaining_main_ATK:
			if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000c68:	2108      	movs	r1, #8
 8000c6a:	4823      	ldr	r0, [pc, #140]	; (8000cf8 <GAME_PLAY_Phase_Management+0x54c>)
 8000c6c:	f004 fb40 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d11b      	bne.n	8000cae <GAME_PLAY_Phase_Management+0x502>
			{
				state_game->action = 5;
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	2205      	movs	r2, #5
 8000c7a:	701a      	strb	r2, [r3, #0]
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000c7c:	69fa      	ldr	r2, [r7, #28]
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f000 f83f 	bl	8000d04 <Player_Reading_Card>
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000c8c:	61bb      	str	r3, [r7, #24]
				if((state_game->action == 6 )&& (ptrYugiohCard_dst->cardType == 3)){
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b06      	cmp	r3, #6
 8000c94:	d123      	bne.n	8000cde <GAME_PLAY_Phase_Management+0x532>
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	785b      	ldrb	r3, [r3, #1]
 8000c9a:	2b03      	cmp	r3, #3
 8000c9c:	d11f      	bne.n	8000cde <GAME_PLAY_Phase_Management+0x532>
					state_game->MAIN = chaining_main_DEF;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	2206      	movs	r2, #6
 8000ca2:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
					state_game->action = 4;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	2204      	movs	r2, #4
 8000caa:	701a      	strb	r2, [r3, #0]
			}
			else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
			{
				state_game->MAIN = activate_effect;
			}
			break;
 8000cac:	e017      	b.n	8000cde <GAME_PLAY_Phase_Management+0x532>
			else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000cae:	2102      	movs	r1, #2
 8000cb0:	4813      	ldr	r0, [pc, #76]	; (8000d00 <GAME_PLAY_Phase_Management+0x554>)
 8000cb2:	f004 fb1d 	bl	80052f0 <HAL_GPIO_ReadPin>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d110      	bne.n	8000cde <GAME_PLAY_Phase_Management+0x532>
				state_game->MAIN = activate_effect;
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000cc4:	e00b      	b.n	8000cde <GAME_PLAY_Phase_Management+0x532>
		case activate_effect:
			break;
 8000cc6:	bf00      	nop
 8000cc8:	e00f      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
			break;
 8000cca:	bf00      	nop
 8000ccc:	e00d      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
			break;
 8000cce:	bf00      	nop
 8000cd0:	e00b      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
			break;
 8000cd2:	bf00      	nop
 8000cd4:	e009      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
			break;
 8000cd6:	bf00      	nop
 8000cd8:	e007      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
			break;
 8000cda:	bf00      	nop
 8000cdc:	e005      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
			break;
 8000cde:	bf00      	nop
		}
		break;
 8000ce0:	e003      	b.n	8000cea <GAME_PLAY_Phase_Management+0x53e>
		case Battle_Phase:
			break;
 8000ce2:	bf00      	nop
 8000ce4:	e002      	b.n	8000cec <GAME_PLAY_Phase_Management+0x540>
		break;
 8000ce6:	bf00      	nop
 8000ce8:	e000      	b.n	8000cec <GAME_PLAY_Phase_Management+0x540>
		break;
 8000cea:	bf00      	nop
		case Chain_Phase:
			break;

	}
}
 8000cec:	bf00      	nop
 8000cee:	3720      	adds	r7, #32
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	aaaaaaab 	.word	0xaaaaaaab
 8000cf8:	58020800 	.word	0x58020800
 8000cfc:	58021400 	.word	0x58021400
 8000d00:	58020400 	.word	0x58020400

08000d04 <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b088      	sub	sp, #32
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	60f8      	str	r0, [r7, #12]
 8000d0c:	60b9      	str	r1, [r7, #8]
 8000d0e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	3328      	adds	r3, #40	; 0x28
 8000d14:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	881b      	ldrh	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	4613      	mov	r3, r2
 8000d1e:	011b      	lsls	r3, r3, #4
 8000d20:	4413      	add	r3, r2
 8000d22:	009b      	lsls	r3, r3, #2
 8000d24:	3328      	adds	r3, #40	; 0x28
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	4413      	add	r3, r2
 8000d2a:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000d2c:	69fb      	ldr	r3, [r7, #28]
 8000d2e:	3314      	adds	r3, #20
 8000d30:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000d38:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	78db      	ldrb	r3, [r3, #3]
 8000d3e:	2b01      	cmp	r3, #1
 8000d40:	d112      	bne.n	8000d68 <Player_Reading_Card+0x64>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8000d42:	6878      	ldr	r0, [r7, #4]
 8000d44:	f7ff fcbe 	bl	80006c4 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d48:	6979      	ldr	r1, [r7, #20]
 8000d4a:	69b8      	ldr	r0, [r7, #24]
 8000d4c:	f7ff fc46 	bl	80005dc <YUGIOH_card_copy>

		RFID_Clear_Card_Bufffer(ptrRFID);
 8000d50:	69f8      	ldr	r0, [r7, #28]
 8000d52:	f7ff fc6e 	bl	8000632 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	2200      	movs	r2, #0
 8000d5a:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	3301      	adds	r3, #1
 8000d62:	b2da      	uxtb	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	701a      	strb	r2, [r3, #0]
	}
}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d74:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <SystemInit+0xfc>)
 8000d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d7a:	4a3c      	ldr	r2, [pc, #240]	; (8000e6c <SystemInit+0xfc>)
 8000d7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000d84:	4b39      	ldr	r3, [pc, #228]	; (8000e6c <SystemInit+0xfc>)
 8000d86:	691b      	ldr	r3, [r3, #16]
 8000d88:	4a38      	ldr	r2, [pc, #224]	; (8000e6c <SystemInit+0xfc>)
 8000d8a:	f043 0310 	orr.w	r3, r3, #16
 8000d8e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000d90:	4b37      	ldr	r3, [pc, #220]	; (8000e70 <SystemInit+0x100>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	f003 030f 	and.w	r3, r3, #15
 8000d98:	2b06      	cmp	r3, #6
 8000d9a:	d807      	bhi.n	8000dac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000d9c:	4b34      	ldr	r3, [pc, #208]	; (8000e70 <SystemInit+0x100>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	f023 030f 	bic.w	r3, r3, #15
 8000da4:	4a32      	ldr	r2, [pc, #200]	; (8000e70 <SystemInit+0x100>)
 8000da6:	f043 0307 	orr.w	r3, r3, #7
 8000daa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000dac:	4b31      	ldr	r3, [pc, #196]	; (8000e74 <SystemInit+0x104>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a30      	ldr	r2, [pc, #192]	; (8000e74 <SystemInit+0x104>)
 8000db2:	f043 0301 	orr.w	r3, r3, #1
 8000db6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000db8:	4b2e      	ldr	r3, [pc, #184]	; (8000e74 <SystemInit+0x104>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <SystemInit+0x104>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	492c      	ldr	r1, [pc, #176]	; (8000e74 <SystemInit+0x104>)
 8000dc4:	4b2c      	ldr	r3, [pc, #176]	; (8000e78 <SystemInit+0x108>)
 8000dc6:	4013      	ands	r3, r2
 8000dc8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <SystemInit+0x100>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f003 0308 	and.w	r3, r3, #8
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d007      	beq.n	8000de6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000dd6:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <SystemInit+0x100>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	f023 030f 	bic.w	r3, r3, #15
 8000dde:	4a24      	ldr	r2, [pc, #144]	; (8000e70 <SystemInit+0x100>)
 8000de0:	f043 0307 	orr.w	r3, r3, #7
 8000de4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000de6:	4b23      	ldr	r3, [pc, #140]	; (8000e74 <SystemInit+0x104>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000dec:	4b21      	ldr	r3, [pc, #132]	; (8000e74 <SystemInit+0x104>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000df2:	4b20      	ldr	r3, [pc, #128]	; (8000e74 <SystemInit+0x104>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000df8:	4b1e      	ldr	r3, [pc, #120]	; (8000e74 <SystemInit+0x104>)
 8000dfa:	4a20      	ldr	r2, [pc, #128]	; (8000e7c <SystemInit+0x10c>)
 8000dfc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000dfe:	4b1d      	ldr	r3, [pc, #116]	; (8000e74 <SystemInit+0x104>)
 8000e00:	4a1f      	ldr	r2, [pc, #124]	; (8000e80 <SystemInit+0x110>)
 8000e02:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e04:	4b1b      	ldr	r3, [pc, #108]	; (8000e74 <SystemInit+0x104>)
 8000e06:	4a1f      	ldr	r2, [pc, #124]	; (8000e84 <SystemInit+0x114>)
 8000e08:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e0a:	4b1a      	ldr	r3, [pc, #104]	; (8000e74 <SystemInit+0x104>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e10:	4b18      	ldr	r3, [pc, #96]	; (8000e74 <SystemInit+0x104>)
 8000e12:	4a1c      	ldr	r2, [pc, #112]	; (8000e84 <SystemInit+0x114>)
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e16:	4b17      	ldr	r3, [pc, #92]	; (8000e74 <SystemInit+0x104>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e1c:	4b15      	ldr	r3, [pc, #84]	; (8000e74 <SystemInit+0x104>)
 8000e1e:	4a19      	ldr	r2, [pc, #100]	; (8000e84 <SystemInit+0x114>)
 8000e20:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e22:	4b14      	ldr	r3, [pc, #80]	; (8000e74 <SystemInit+0x104>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e28:	4b12      	ldr	r3, [pc, #72]	; (8000e74 <SystemInit+0x104>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4a11      	ldr	r2, [pc, #68]	; (8000e74 <SystemInit+0x104>)
 8000e2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e32:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000e34:	4b0f      	ldr	r3, [pc, #60]	; (8000e74 <SystemInit+0x104>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000e3a:	4b13      	ldr	r3, [pc, #76]	; (8000e88 <SystemInit+0x118>)
 8000e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <SystemInit+0x118>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e44:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000e46:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <SystemInit+0x11c>)
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <SystemInit+0x120>)
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e52:	d202      	bcs.n	8000e5a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <SystemInit+0x124>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000e5a:	4b0f      	ldr	r3, [pc, #60]	; (8000e98 <SystemInit+0x128>)
 8000e5c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000e60:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000e62:	bf00      	nop
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000ed00 	.word	0xe000ed00
 8000e70:	52002000 	.word	0x52002000
 8000e74:	58024400 	.word	0x58024400
 8000e78:	eaf6ed7f 	.word	0xeaf6ed7f
 8000e7c:	02020200 	.word	0x02020200
 8000e80:	01ff0000 	.word	0x01ff0000
 8000e84:	01010280 	.word	0x01010280
 8000e88:	580000c0 	.word	0x580000c0
 8000e8c:	5c001000 	.word	0x5c001000
 8000e90:	ffff0000 	.word	0xffff0000
 8000e94:	51008108 	.word	0x51008108
 8000e98:	52004000 	.word	0x52004000

08000e9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000ea2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea6:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ea8:	bf00      	nop
 8000eaa:	4b35      	ldr	r3, [pc, #212]	; (8000f80 <main+0xe4>)
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d004      	beq.n	8000ec0 <main+0x24>
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	1e5a      	subs	r2, r3, #1
 8000eba:	607a      	str	r2, [r7, #4]
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	dcf4      	bgt.n	8000eaa <main+0xe>
	if ( timeout < 0 )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	da01      	bge.n	8000eca <main+0x2e>
	{
		Error_Handler();
 8000ec6:	f000 fb95 	bl	80015f4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000eca:	f001 f831 	bl	8001f30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ece:	f000 f85f 	bl	8000f90 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000ed2:	f000 f8e1 	bl	8001098 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000ed6:	4b2a      	ldr	r3, [pc, #168]	; (8000f80 <main+0xe4>)
 8000ed8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000edc:	4a28      	ldr	r2, [pc, #160]	; (8000f80 <main+0xe4>)
 8000ede:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ee2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ee6:	4b26      	ldr	r3, [pc, #152]	; (8000f80 <main+0xe4>)
 8000ee8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ef0:	603b      	str	r3, [r7, #0]
 8000ef2:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f004 fa47 	bl	8005388 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000efa:	2100      	movs	r1, #0
 8000efc:	2000      	movs	r0, #0
 8000efe:	f004 fa5d 	bl	80053bc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000f02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f06:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000f08:	bf00      	nop
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <main+0xe4>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d104      	bne.n	8000f20 <main+0x84>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	1e5a      	subs	r2, r3, #1
 8000f1a:	607a      	str	r2, [r7, #4]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	dcf4      	bgt.n	8000f0a <main+0x6e>
	if ( timeout < 0 )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	da01      	bge.n	8000f2a <main+0x8e>
	{
		Error_Handler();
 8000f26:	f000 fb65 	bl	80015f4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f2a:	f000 fa33 	bl	8001394 <MX_GPIO_Init>
  MX_ETH_Init();
 8000f2e:	f000 f8e5 	bl	80010fc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000f32:	f000 f987 	bl	8001244 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000f36:	f000 fa05 	bl	8001344 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f3a:	f000 f9d1 	bl	80012e0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8000f3e:	f000 f929 	bl	8001194 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8000f42:	f000 fc5f 	bl	8001804 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 8000f46:	2000      	movs	r0, #0
 8000f48:	f000 fcee 	bl	8001928 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8000f4c:	f001 f876 	bl	800203c <HAL_GetTick>
 8000f50:	4602      	mov	r2, r0
 8000f52:	4b0c      	ldr	r3, [pc, #48]	; (8000f84 <main+0xe8>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	2bc8      	cmp	r3, #200	; 0xc8
 8000f5a:	d9f7      	bls.n	8000f4c <main+0xb0>
		{
			timemsM7_LED = HAL_GetTick();
 8000f5c:	f001 f86e 	bl	800203c <HAL_GetTick>
 8000f60:	4603      	mov	r3, r0
 8000f62:	4a08      	ldr	r2, [pc, #32]	; (8000f84 <main+0xe8>)
 8000f64:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	4807      	ldr	r0, [pc, #28]	; (8000f88 <main+0xec>)
 8000f6c:	f004 f9f1 	bl	8005352 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8000f70:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000f74:	4905      	ldr	r1, [pc, #20]	; (8000f8c <main+0xf0>)
 8000f76:	4618      	mov	r0, r3
 8000f78:	f7ff fbd0 	bl	800071c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8000f7c:	e7e6      	b.n	8000f4c <main+0xb0>
 8000f7e:	bf00      	nop
 8000f80:	58024400 	.word	0x58024400
 8000f84:	24000c1c 	.word	0x24000c1c
 8000f88:	58020400 	.word	0x58020400
 8000f8c:	240008e8 	.word	0x240008e8

08000f90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b09c      	sub	sp, #112	; 0x70
 8000f94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9a:	224c      	movs	r2, #76	; 0x4c
 8000f9c:	2100      	movs	r1, #0
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f009 faf8 	bl	800a594 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	2220      	movs	r2, #32
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f009 faf2 	bl	800a594 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000fb0:	2004      	movs	r0, #4
 8000fb2:	f004 fb5f 	bl	8005674 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	603b      	str	r3, [r7, #0]
 8000fba:	4b34      	ldr	r3, [pc, #208]	; (800108c <SystemClock_Config+0xfc>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	4a33      	ldr	r2, [pc, #204]	; (800108c <SystemClock_Config+0xfc>)
 8000fc0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fc4:	6193      	str	r3, [r2, #24]
 8000fc6:	4b31      	ldr	r3, [pc, #196]	; (800108c <SystemClock_Config+0xfc>)
 8000fc8:	699b      	ldr	r3, [r3, #24]
 8000fca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fce:	603b      	str	r3, [r7, #0]
 8000fd0:	4b2f      	ldr	r3, [pc, #188]	; (8001090 <SystemClock_Config+0x100>)
 8000fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd4:	4a2e      	ldr	r2, [pc, #184]	; (8001090 <SystemClock_Config+0x100>)
 8000fd6:	f043 0301 	orr.w	r3, r3, #1
 8000fda:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <SystemClock_Config+0x100>)
 8000fde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	603b      	str	r3, [r7, #0]
 8000fe6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000fe8:	bf00      	nop
 8000fea:	4b28      	ldr	r3, [pc, #160]	; (800108c <SystemClock_Config+0xfc>)
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ff6:	d1f8      	bne.n	8000fea <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ff8:	4b26      	ldr	r3, [pc, #152]	; (8001094 <SystemClock_Config+0x104>)
 8000ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffc:	f023 0303 	bic.w	r3, r3, #3
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <SystemClock_Config+0x104>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001008:	2301      	movs	r3, #1
 800100a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800100c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001010:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001012:	2302      	movs	r3, #2
 8001014:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001016:	2302      	movs	r3, #2
 8001018:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800101a:	2301      	movs	r3, #1
 800101c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 800101e:	2378      	movs	r3, #120	; 0x78
 8001020:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001022:	2302      	movs	r3, #2
 8001024:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001026:	2302      	movs	r3, #2
 8001028:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800102a:	2302      	movs	r3, #2
 800102c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800102e:	230c      	movs	r3, #12
 8001030:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001032:	2300      	movs	r3, #0
 8001034:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800103a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800103e:	4618      	mov	r0, r3
 8001040:	f004 fb82 	bl	8005748 <HAL_RCC_OscConfig>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800104a:	f000 fad3 	bl	80015f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800104e:	233f      	movs	r3, #63	; 0x3f
 8001050:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001052:	2303      	movs	r3, #3
 8001054:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001056:	2300      	movs	r3, #0
 8001058:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800105a:	2308      	movs	r3, #8
 800105c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800105e:	2340      	movs	r3, #64	; 0x40
 8001060:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001062:	2340      	movs	r3, #64	; 0x40
 8001064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001066:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800106a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800106c:	2340      	movs	r3, #64	; 0x40
 800106e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001070:	1d3b      	adds	r3, r7, #4
 8001072:	2104      	movs	r1, #4
 8001074:	4618      	mov	r0, r3
 8001076:	f004 ff95 	bl	8005fa4 <HAL_RCC_ClockConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	2b00      	cmp	r3, #0
 800107e:	d001      	beq.n	8001084 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001080:	f000 fab8 	bl	80015f4 <Error_Handler>
  }
}
 8001084:	bf00      	nop
 8001086:	3770      	adds	r7, #112	; 0x70
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	58024800 	.word	0x58024800
 8001090:	58000400 	.word	0x58000400
 8001094:	58024400 	.word	0x58024400

08001098 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b0b0      	sub	sp, #192	; 0xc0
 800109c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800109e:	1d3b      	adds	r3, r7, #4
 80010a0:	22bc      	movs	r2, #188	; 0xbc
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f009 fa75 	bl	800a594 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80010aa:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 80010ae:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 80010b4:	2318      	movs	r3, #24
 80010b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 80010bc:	2304      	movs	r3, #4
 80010be:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80010c4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80010d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010d6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80010d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80010dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010e0:	1d3b      	adds	r3, r7, #4
 80010e2:	4618      	mov	r0, r3
 80010e4:	f005 faea 	bl	80066bc <HAL_RCCEx_PeriphCLKConfig>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80010ee:	f000 fa81 	bl	80015f4 <Error_Handler>
  }
}
 80010f2:	bf00      	nop
 80010f4:	37c0      	adds	r7, #192	; 0xc0
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
	...

080010fc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001100:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_ETH_Init+0x80>)
 8001102:	4a1f      	ldr	r2, [pc, #124]	; (8001180 <MX_ETH_Init+0x84>)
 8001104:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001106:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <MX_ETH_Init+0x88>)
 8001108:	2200      	movs	r2, #0
 800110a:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 800110c:	4b1d      	ldr	r3, [pc, #116]	; (8001184 <MX_ETH_Init+0x88>)
 800110e:	2280      	movs	r2, #128	; 0x80
 8001110:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001112:	4b1c      	ldr	r3, [pc, #112]	; (8001184 <MX_ETH_Init+0x88>)
 8001114:	22e1      	movs	r2, #225	; 0xe1
 8001116:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001118:	4b1a      	ldr	r3, [pc, #104]	; (8001184 <MX_ETH_Init+0x88>)
 800111a:	2200      	movs	r2, #0
 800111c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800111e:	4b19      	ldr	r3, [pc, #100]	; (8001184 <MX_ETH_Init+0x88>)
 8001120:	2200      	movs	r2, #0
 8001122:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001124:	4b17      	ldr	r3, [pc, #92]	; (8001184 <MX_ETH_Init+0x88>)
 8001126:	2200      	movs	r2, #0
 8001128:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800112a:	4b14      	ldr	r3, [pc, #80]	; (800117c <MX_ETH_Init+0x80>)
 800112c:	4a15      	ldr	r2, [pc, #84]	; (8001184 <MX_ETH_Init+0x88>)
 800112e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <MX_ETH_Init+0x80>)
 8001132:	2201      	movs	r2, #1
 8001134:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001136:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_ETH_Init+0x80>)
 8001138:	4a13      	ldr	r2, [pc, #76]	; (8001188 <MX_ETH_Init+0x8c>)
 800113a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800113c:	4b0f      	ldr	r3, [pc, #60]	; (800117c <MX_ETH_Init+0x80>)
 800113e:	4a13      	ldr	r2, [pc, #76]	; (800118c <MX_ETH_Init+0x90>)
 8001140:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_ETH_Init+0x80>)
 8001144:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001148:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800114a:	480c      	ldr	r0, [pc, #48]	; (800117c <MX_ETH_Init+0x80>)
 800114c:	f003 fafc 	bl	8004748 <HAL_ETH_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001156:	f000 fa4d 	bl	80015f4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800115a:	2238      	movs	r2, #56	; 0x38
 800115c:	2100      	movs	r1, #0
 800115e:	480c      	ldr	r0, [pc, #48]	; (8001190 <MX_ETH_Init+0x94>)
 8001160:	f009 fa18 	bl	800a594 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <MX_ETH_Init+0x94>)
 8001166:	2221      	movs	r2, #33	; 0x21
 8001168:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800116a:	4b09      	ldr	r3, [pc, #36]	; (8001190 <MX_ETH_Init+0x94>)
 800116c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001170:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001172:	4b07      	ldr	r3, [pc, #28]	; (8001190 <MX_ETH_Init+0x94>)
 8001174:	2200      	movs	r2, #0
 8001176:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001178:	bf00      	nop
 800117a:	bd80      	pop	{r7, pc}
 800117c:	24000124 	.word	0x24000124
 8001180:	40028000 	.word	0x40028000
 8001184:	24000c20 	.word	0x24000c20
 8001188:	24000070 	.word	0x24000070
 800118c:	24000010 	.word	0x24000010
 8001190:	240000ec 	.word	0x240000ec

08001194 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001198:	4b28      	ldr	r3, [pc, #160]	; (800123c <MX_SPI3_Init+0xa8>)
 800119a:	4a29      	ldr	r2, [pc, #164]	; (8001240 <MX_SPI3_Init+0xac>)
 800119c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800119e:	4b27      	ldr	r3, [pc, #156]	; (800123c <MX_SPI3_Init+0xa8>)
 80011a0:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80011a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80011a6:	4b25      	ldr	r3, [pc, #148]	; (800123c <MX_SPI3_Init+0xa8>)
 80011a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011ac:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <MX_SPI3_Init+0xa8>)
 80011b0:	2207      	movs	r2, #7
 80011b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011b4:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_SPI3_Init+0xa8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <MX_SPI3_Init+0xa8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_SPI3_Init+0xa8>)
 80011c2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80011c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_SPI3_Init+0xa8>)
 80011ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ce:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011d0:	4b1a      	ldr	r3, [pc, #104]	; (800123c <MX_SPI3_Init+0xa8>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d6:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_SPI3_Init+0xa8>)
 80011d8:	2200      	movs	r2, #0
 80011da:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_SPI3_Init+0xa8>)
 80011de:	2200      	movs	r2, #0
 80011e0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_SPI3_Init+0xa8>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_SPI3_Init+0xa8>)
 80011ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ee:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <MX_SPI3_Init+0xa8>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_SPI3_Init+0xa8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_SPI3_Init+0xa8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001202:	4b0e      	ldr	r3, [pc, #56]	; (800123c <MX_SPI3_Init+0xa8>)
 8001204:	2200      	movs	r2, #0
 8001206:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <MX_SPI3_Init+0xa8>)
 800120a:	2200      	movs	r2, #0
 800120c:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800120e:	4b0b      	ldr	r3, [pc, #44]	; (800123c <MX_SPI3_Init+0xa8>)
 8001210:	2200      	movs	r2, #0
 8001212:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <MX_SPI3_Init+0xa8>)
 8001216:	2200      	movs	r2, #0
 8001218:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800121a:	4b08      	ldr	r3, [pc, #32]	; (800123c <MX_SPI3_Init+0xa8>)
 800121c:	2200      	movs	r2, #0
 800121e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <MX_SPI3_Init+0xa8>)
 8001222:	2200      	movs	r2, #0
 8001224:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001226:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_SPI3_Init+0xa8>)
 8001228:	f006 fdb0 	bl	8007d8c <HAL_SPI_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001232:	f000 f9df 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001236:	bf00      	nop
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	240001d4 	.word	0x240001d4
 8001240:	40003c00 	.word	0x40003c00

08001244 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001248:	4b22      	ldr	r3, [pc, #136]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800124a:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <MX_USART3_UART_Init+0x94>)
 800124c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 800124e:	4b21      	ldr	r3, [pc, #132]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001250:	4a22      	ldr	r2, [pc, #136]	; (80012dc <MX_USART3_UART_Init+0x98>)
 8001252:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800125a:	4b1e      	ldr	r3, [pc, #120]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001262:	2200      	movs	r2, #0
 8001264:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001266:	4b1b      	ldr	r3, [pc, #108]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001268:	220c      	movs	r2, #12
 800126a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800126c:	4b19      	ldr	r3, [pc, #100]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001272:	4b18      	ldr	r3, [pc, #96]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001274:	2200      	movs	r2, #0
 8001276:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800127a:	2200      	movs	r2, #0
 800127c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800127e:	4b15      	ldr	r3, [pc, #84]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001280:	2200      	movs	r2, #0
 8001282:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001284:	4b13      	ldr	r3, [pc, #76]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 8001286:	2200      	movs	r2, #0
 8001288:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800128a:	4812      	ldr	r0, [pc, #72]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800128c:	f007 f95f 	bl	800854e <HAL_UART_Init>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d001      	beq.n	800129a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001296:	f000 f9ad 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129a:	2100      	movs	r1, #0
 800129c:	480d      	ldr	r0, [pc, #52]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 800129e:	f008 fd81 	bl	8009da4 <HAL_UARTEx_SetTxFifoThreshold>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80012a8:	f000 f9a4 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ac:	2100      	movs	r1, #0
 80012ae:	4809      	ldr	r0, [pc, #36]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 80012b0:	f008 fdb6 	bl	8009e20 <HAL_UARTEx_SetRxFifoThreshold>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 80012ba:	f000 f99b 	bl	80015f4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80012be:	4805      	ldr	r0, [pc, #20]	; (80012d4 <MX_USART3_UART_Init+0x90>)
 80012c0:	f008 fd37 	bl	8009d32 <HAL_UARTEx_DisableFifoMode>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 80012ca:	f000 f993 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	2400025c 	.word	0x2400025c
 80012d8:	40004800 	.word	0x40004800
 80012dc:	0005dc00 	.word	0x0005dc00

080012e0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80012e4:	4b15      	ldr	r3, [pc, #84]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012e6:	4a16      	ldr	r2, [pc, #88]	; (8001340 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80012e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012ec:	2209      	movs	r2, #9
 80012ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f2:	2202      	movs	r2, #2
 80012f4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80012fe:	2202      	movs	r2, #2
 8001300:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001304:	2200      	movs	r2, #0
 8001306:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800130a:	2200      	movs	r2, #0
 800130c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001310:	2200      	movs	r2, #0
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001314:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001316:	2201      	movs	r2, #1
 8001318:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800131a:	4b08      	ldr	r3, [pc, #32]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800131c:	2201      	movs	r2, #1
 800131e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001320:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001322:	2200      	movs	r2, #0
 8001324:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001326:	4805      	ldr	r0, [pc, #20]	; (800133c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001328:	f004 f85c 	bl	80053e4 <HAL_PCD_Init>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001332:	f000 f95f 	bl	80015f4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	240003dc 	.word	0x240003dc
 8001340:	40080000 	.word	0x40080000

08001344 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800134a:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_DMA_Init+0x4c>)
 800134c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001350:	4a0f      	ldr	r2, [pc, #60]	; (8001390 <MX_DMA_Init+0x4c>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800135a:	4b0d      	ldr	r3, [pc, #52]	; (8001390 <MX_DMA_Init+0x4c>)
 800135c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001360:	f003 0301 	and.w	r3, r3, #1
 8001364:	607b      	str	r3, [r7, #4]
 8001366:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001368:	2200      	movs	r2, #0
 800136a:	2100      	movs	r1, #0
 800136c:	200c      	movs	r0, #12
 800136e:	f000 ff90 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001372:	200c      	movs	r0, #12
 8001374:	f000 ffa7 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001378:	2200      	movs	r2, #0
 800137a:	2100      	movs	r1, #0
 800137c:	200f      	movs	r0, #15
 800137e:	f000 ff88 	bl	8002292 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001382:	200f      	movs	r0, #15
 8001384:	f000 ff9f 	bl	80022c6 <HAL_NVIC_EnableIRQ>

}
 8001388:	bf00      	nop
 800138a:	3708      	adds	r7, #8
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	58024400 	.word	0x58024400

08001394 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b08e      	sub	sp, #56	; 0x38
 8001398:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	2200      	movs	r2, #0
 80013a0:	601a      	str	r2, [r3, #0]
 80013a2:	605a      	str	r2, [r3, #4]
 80013a4:	609a      	str	r2, [r3, #8]
 80013a6:	60da      	str	r2, [r3, #12]
 80013a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013aa:	4b8a      	ldr	r3, [pc, #552]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013b0:	4a88      	ldr	r2, [pc, #544]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013b2:	f043 0304 	orr.w	r3, r3, #4
 80013b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013ba:	4b86      	ldr	r3, [pc, #536]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013c8:	4b82      	ldr	r3, [pc, #520]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ce:	4a81      	ldr	r2, [pc, #516]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013d8:	4b7e      	ldr	r3, [pc, #504]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013e2:	61fb      	str	r3, [r7, #28]
 80013e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	4b7b      	ldr	r3, [pc, #492]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	4a79      	ldr	r2, [pc, #484]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013f6:	4b77      	ldr	r3, [pc, #476]	; (80015d4 <MX_GPIO_Init+0x240>)
 80013f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fc:	f003 0301 	and.w	r3, r3, #1
 8001400:	61bb      	str	r3, [r7, #24]
 8001402:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001404:	4b73      	ldr	r3, [pc, #460]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	4a72      	ldr	r2, [pc, #456]	; (80015d4 <MX_GPIO_Init+0x240>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001414:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001416:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001422:	4b6c      	ldr	r3, [pc, #432]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	4a6a      	ldr	r2, [pc, #424]	; (80015d4 <MX_GPIO_Init+0x240>)
 800142a:	f043 0320 	orr.w	r3, r3, #32
 800142e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001432:	4b68      	ldr	r3, [pc, #416]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	613b      	str	r3, [r7, #16]
 800143e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001440:	4b64      	ldr	r3, [pc, #400]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001442:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001446:	4a63      	ldr	r2, [pc, #396]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001450:	4b60      	ldr	r3, [pc, #384]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001452:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001456:	f003 0310 	and.w	r3, r3, #16
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800145e:	4b5d      	ldr	r3, [pc, #372]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001464:	4a5b      	ldr	r2, [pc, #364]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001466:	f043 0308 	orr.w	r3, r3, #8
 800146a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800146e:	4b59      	ldr	r3, [pc, #356]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001470:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001474:	f003 0308 	and.w	r3, r3, #8
 8001478:	60bb      	str	r3, [r7, #8]
 800147a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800147c:	4b55      	ldr	r3, [pc, #340]	; (80015d4 <MX_GPIO_Init+0x240>)
 800147e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001482:	4a54      	ldr	r2, [pc, #336]	; (80015d4 <MX_GPIO_Init+0x240>)
 8001484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001488:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800148c:	4b51      	ldr	r3, [pc, #324]	; (80015d4 <MX_GPIO_Init+0x240>)
 800148e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 800149a:	2201      	movs	r2, #1
 800149c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80014a0:	484d      	ldr	r0, [pc, #308]	; (80015d8 <MX_GPIO_Init+0x244>)
 80014a2:	f003 ff3d 	bl	8005320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80014a6:	2200      	movs	r2, #0
 80014a8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014ac:	484a      	ldr	r0, [pc, #296]	; (80015d8 <MX_GPIO_Init+0x244>)
 80014ae:	f003 ff37 	bl	8005320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014b2:	2200      	movs	r2, #0
 80014b4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80014b8:	4848      	ldr	r0, [pc, #288]	; (80015dc <MX_GPIO_Init+0x248>)
 80014ba:	f003 ff31 	bl	8005320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80014be:	2200      	movs	r2, #0
 80014c0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014c4:	4846      	ldr	r0, [pc, #280]	; (80015e0 <MX_GPIO_Init+0x24c>)
 80014c6:	f003 ff2b 	bl	8005320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 80014ca:	2201      	movs	r2, #1
 80014cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014d0:	4844      	ldr	r0, [pc, #272]	; (80015e4 <MX_GPIO_Init+0x250>)
 80014d2:	f003 ff25 	bl	8005320 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 80014d6:	230d      	movs	r3, #13
 80014d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014da:	2300      	movs	r3, #0
 80014dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014de:	2300      	movs	r3, #0
 80014e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014e6:	4619      	mov	r1, r3
 80014e8:	483f      	ldr	r0, [pc, #252]	; (80015e8 <MX_GPIO_Init+0x254>)
 80014ea:	f003 fd51 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80014ee:	2308      	movs	r3, #8
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80014fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fe:	4619      	mov	r1, r3
 8001500:	483a      	ldr	r0, [pc, #232]	; (80015ec <MX_GPIO_Init+0x258>)
 8001502:	f003 fd45 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8001506:	2302      	movs	r3, #2
 8001508:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800150a:	2300      	movs	r3, #0
 800150c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8001512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001516:	4619      	mov	r1, r3
 8001518:	4830      	ldr	r0, [pc, #192]	; (80015dc <MX_GPIO_Init+0x248>)
 800151a:	f003 fd39 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 800151e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001522:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001528:	2300      	movs	r3, #0
 800152a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 800152c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001530:	4619      	mov	r1, r3
 8001532:	482f      	ldr	r0, [pc, #188]	; (80015f0 <MX_GPIO_Init+0x25c>)
 8001534:	f003 fd2c 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8001538:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800153c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800154a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154e:	4619      	mov	r1, r3
 8001550:	4821      	ldr	r0, [pc, #132]	; (80015d8 <MX_GPIO_Init+0x244>)
 8001552:	f003 fd1d 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001556:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155c:	2301      	movs	r3, #1
 800155e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	481b      	ldr	r0, [pc, #108]	; (80015dc <MX_GPIO_Init+0x248>)
 8001570:	f003 fd0e 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8001574:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157a:	2301      	movs	r3, #1
 800157c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157e:	2300      	movs	r3, #0
 8001580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001582:	2300      	movs	r3, #0
 8001584:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8001586:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158a:	4619      	mov	r1, r3
 800158c:	4814      	ldr	r0, [pc, #80]	; (80015e0 <MX_GPIO_Init+0x24c>)
 800158e:	f003 fcff 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001592:	2380      	movs	r3, #128	; 0x80
 8001594:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001596:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800159a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159c:	2300      	movs	r3, #0
 800159e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	480f      	ldr	r0, [pc, #60]	; (80015e4 <MX_GPIO_Init+0x250>)
 80015a8:	f003 fcf2 	bl	8004f90 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80015ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015b2:	2301      	movs	r3, #1
 80015b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ba:	2300      	movs	r3, #0
 80015bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	; (80015e4 <MX_GPIO_Init+0x250>)
 80015c6:	f003 fce3 	bl	8004f90 <HAL_GPIO_Init>

}
 80015ca:	bf00      	nop
 80015cc:	3738      	adds	r7, #56	; 0x38
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	58024400 	.word	0x58024400
 80015d8:	58021000 	.word	0x58021000
 80015dc:	58020400 	.word	0x58020400
 80015e0:	58020c00 	.word	0x58020c00
 80015e4:	58021800 	.word	0x58021800
 80015e8:	58020800 	.word	0x58020800
 80015ec:	58020000 	.word	0x58020000
 80015f0:	58021400 	.word	0x58021400

080015f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015f8:	b672      	cpsid	i
}
 80015fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80015fc:	e7fe      	b.n	80015fc <Error_Handler+0x8>
	...

08001600 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001604:	2200      	movs	r2, #0
 8001606:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800160a:	4802      	ldr	r0, [pc, #8]	; (8001614 <ST7735_Select+0x14>)
 800160c:	f003 fe88 	bl	8005320 <HAL_GPIO_WritePin>
}
 8001610:	bf00      	nop
 8001612:	bd80      	pop	{r7, pc}
 8001614:	58021000 	.word	0x58021000

08001618 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800161c:	2201      	movs	r2, #1
 800161e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001622:	4802      	ldr	r0, [pc, #8]	; (800162c <ST7735_Unselect+0x14>)
 8001624:	f003 fe7c 	bl	8005320 <HAL_GPIO_WritePin>
}
 8001628:	bf00      	nop
 800162a:	bd80      	pop	{r7, pc}
 800162c:	58021000 	.word	0x58021000

08001630 <ST7735_Select1>:
static void ST7735_Select1() {
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8001634:	2200      	movs	r2, #0
 8001636:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800163a:	4802      	ldr	r0, [pc, #8]	; (8001644 <ST7735_Select1+0x14>)
 800163c:	f003 fe70 	bl	8005320 <HAL_GPIO_WritePin>
}
 8001640:	bf00      	nop
 8001642:	bd80      	pop	{r7, pc}
 8001644:	58021000 	.word	0x58021000

08001648 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 800164c:	2201      	movs	r2, #1
 800164e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001652:	4802      	ldr	r0, [pc, #8]	; (800165c <ST7735_Unselect1+0x14>)
 8001654:	f003 fe64 	bl	8005320 <HAL_GPIO_WritePin>
}
 8001658:	bf00      	nop
 800165a:	bd80      	pop	{r7, pc}
 800165c:	58021000 	.word	0x58021000

08001660 <ST7735_Reset>:

static void ST7735_Reset() {
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800166a:	4807      	ldr	r0, [pc, #28]	; (8001688 <ST7735_Reset+0x28>)
 800166c:	f003 fe58 	bl	8005320 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8001670:	2005      	movs	r0, #5
 8001672:	f000 fcef 	bl	8002054 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8001676:	2201      	movs	r2, #1
 8001678:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <ST7735_Reset+0x28>)
 800167e:	f003 fe4f 	bl	8005320 <HAL_GPIO_WritePin>
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	58021000 	.word	0x58021000

0800168c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800168c:	b580      	push	{r7, lr}
 800168e:	b082      	sub	sp, #8
 8001690:	af00      	add	r7, sp, #0
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001696:	2200      	movs	r2, #0
 8001698:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800169c:	4806      	ldr	r0, [pc, #24]	; (80016b8 <ST7735_WriteCommand+0x2c>)
 800169e:	f003 fe3f 	bl	8005320 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80016a2:	1df9      	adds	r1, r7, #7
 80016a4:	f04f 33ff 	mov.w	r3, #4294967295
 80016a8:	2201      	movs	r2, #1
 80016aa:	4804      	ldr	r0, [pc, #16]	; (80016bc <ST7735_WriteCommand+0x30>)
 80016ac:	f006 fc74 	bl	8007f98 <HAL_SPI_Transmit>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	58021800 	.word	0x58021800
 80016bc:	240001d4 	.word	0x240001d4

080016c0 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80016ca:	2201      	movs	r2, #1
 80016cc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80016d0:	4807      	ldr	r0, [pc, #28]	; (80016f0 <ST7735_WriteData+0x30>)
 80016d2:	f003 fe25 	bl	8005320 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	b29a      	uxth	r2, r3
 80016da:	f04f 33ff 	mov.w	r3, #4294967295
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	4804      	ldr	r0, [pc, #16]	; (80016f4 <ST7735_WriteData+0x34>)
 80016e2:	f006 fc59 	bl	8007f98 <HAL_SPI_Transmit>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	58021800 	.word	0x58021800
 80016f4:	240001d4 	.word	0x240001d4

080016f8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b084      	sub	sp, #16
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	1c5a      	adds	r2, r3, #1
 8001704:	607a      	str	r2, [r7, #4]
 8001706:	781b      	ldrb	r3, [r3, #0]
 8001708:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800170a:	e034      	b.n	8001776 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	1c5a      	adds	r2, r3, #1
 8001710:	607a      	str	r2, [r7, #4]
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001716:	7afb      	ldrb	r3, [r7, #11]
 8001718:	4618      	mov	r0, r3
 800171a:	f7ff ffb7 	bl	800168c <ST7735_WriteCommand>

        numArgs = *addr++;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	607a      	str	r2, [r7, #4]
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001728:	7abb      	ldrb	r3, [r7, #10]
 800172a:	b29b      	uxth	r3, r3
 800172c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001730:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8001732:	7abb      	ldrb	r3, [r7, #10]
 8001734:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001738:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800173a:	7abb      	ldrb	r3, [r7, #10]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8001740:	7abb      	ldrb	r3, [r7, #10]
 8001742:	4619      	mov	r1, r3
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f7ff ffbb 	bl	80016c0 <ST7735_WriteData>
            addr += numArgs;
 800174a:	7abb      	ldrb	r3, [r7, #10]
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	4413      	add	r3, r2
 8001750:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8001752:	89bb      	ldrh	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d00e      	beq.n	8001776 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	607a      	str	r2, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8001762:	89bb      	ldrh	r3, [r7, #12]
 8001764:	2bff      	cmp	r3, #255	; 0xff
 8001766:	d102      	bne.n	800176e <ST7735_ExecuteCommandList+0x76>
 8001768:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800176c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800176e:	89bb      	ldrh	r3, [r7, #12]
 8001770:	4618      	mov	r0, r3
 8001772:	f000 fc6f 	bl	8002054 <HAL_Delay>
    while(numCommands--) {
 8001776:	7bfb      	ldrb	r3, [r7, #15]
 8001778:	1e5a      	subs	r2, r3, #1
 800177a:	73fa      	strb	r2, [r7, #15]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1c5      	bne.n	800170c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8001780:	bf00      	nop
 8001782:	bf00      	nop
 8001784:	3710      	adds	r7, #16
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800178a:	b590      	push	{r4, r7, lr}
 800178c:	b085      	sub	sp, #20
 800178e:	af00      	add	r7, sp, #0
 8001790:	4604      	mov	r4, r0
 8001792:	4608      	mov	r0, r1
 8001794:	4611      	mov	r1, r2
 8001796:	461a      	mov	r2, r3
 8001798:	4623      	mov	r3, r4
 800179a:	71fb      	strb	r3, [r7, #7]
 800179c:	4603      	mov	r3, r0
 800179e:	71bb      	strb	r3, [r7, #6]
 80017a0:	460b      	mov	r3, r1
 80017a2:	717b      	strb	r3, [r7, #5]
 80017a4:	4613      	mov	r3, r2
 80017a6:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 80017a8:	202a      	movs	r0, #42	; 0x2a
 80017aa:	f7ff ff6f 	bl	800168c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 80017ae:	2300      	movs	r3, #0
 80017b0:	733b      	strb	r3, [r7, #12]
 80017b2:	79fb      	ldrb	r3, [r7, #7]
 80017b4:	3302      	adds	r3, #2
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	737b      	strb	r3, [r7, #13]
 80017ba:	2300      	movs	r3, #0
 80017bc:	73bb      	strb	r3, [r7, #14]
 80017be:	797b      	ldrb	r3, [r7, #5]
 80017c0:	3302      	adds	r3, #2
 80017c2:	b2db      	uxtb	r3, r3
 80017c4:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80017c6:	f107 030c 	add.w	r3, r7, #12
 80017ca:	2104      	movs	r1, #4
 80017cc:	4618      	mov	r0, r3
 80017ce:	f7ff ff77 	bl	80016c0 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80017d2:	202b      	movs	r0, #43	; 0x2b
 80017d4:	f7ff ff5a 	bl	800168c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80017d8:	79bb      	ldrb	r3, [r7, #6]
 80017da:	3301      	adds	r3, #1
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80017e0:	793b      	ldrb	r3, [r7, #4]
 80017e2:	3301      	adds	r3, #1
 80017e4:	b2db      	uxtb	r3, r3
 80017e6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80017e8:	f107 030c 	add.w	r3, r7, #12
 80017ec:	2104      	movs	r1, #4
 80017ee:	4618      	mov	r0, r3
 80017f0:	f7ff ff66 	bl	80016c0 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80017f4:	202c      	movs	r0, #44	; 0x2c
 80017f6:	f7ff ff49 	bl	800168c <ST7735_WriteCommand>
}
 80017fa:	bf00      	nop
 80017fc:	3714      	adds	r7, #20
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd90      	pop	{r4, r7, pc}
	...

08001804 <ST7735_Init>:

void ST7735_Init() {
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001808:	f7ff fefa 	bl	8001600 <ST7735_Select>
    ST7735_Select1();
 800180c:	f7ff ff10 	bl	8001630 <ST7735_Select1>
    ST7735_Reset();
 8001810:	f7ff ff26 	bl	8001660 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001814:	4807      	ldr	r0, [pc, #28]	; (8001834 <ST7735_Init+0x30>)
 8001816:	f7ff ff6f 	bl	80016f8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800181a:	4807      	ldr	r0, [pc, #28]	; (8001838 <ST7735_Init+0x34>)
 800181c:	f7ff ff6c 	bl	80016f8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001820:	4806      	ldr	r0, [pc, #24]	; (800183c <ST7735_Init+0x38>)
 8001822:	f7ff ff69 	bl	80016f8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001826:	f7ff fef7 	bl	8001618 <ST7735_Unselect>
    ST7735_Unselect1();
 800182a:	f7ff ff0d 	bl	8001648 <ST7735_Unselect1>
}
 800182e:	bf00      	nop
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	0800a5cc 	.word	0x0800a5cc
 8001838:	0800a608 	.word	0x0800a608
 800183c:	0800a618 	.word	0x0800a618

08001840 <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001840:	b590      	push	{r4, r7, lr}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
 8001846:	4604      	mov	r4, r0
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4623      	mov	r3, r4
 8001850:	80fb      	strh	r3, [r7, #6]
 8001852:	4603      	mov	r3, r0
 8001854:	80bb      	strh	r3, [r7, #4]
 8001856:	460b      	mov	r3, r1
 8001858:	807b      	strh	r3, [r7, #2]
 800185a:	4613      	mov	r3, r2
 800185c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800185e:	88fb      	ldrh	r3, [r7, #6]
 8001860:	2b7f      	cmp	r3, #127	; 0x7f
 8001862:	d858      	bhi.n	8001916 <ST7735_FillRectangle+0xd6>
 8001864:	88bb      	ldrh	r3, [r7, #4]
 8001866:	2b7f      	cmp	r3, #127	; 0x7f
 8001868:	d855      	bhi.n	8001916 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800186a:	88fa      	ldrh	r2, [r7, #6]
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	4413      	add	r3, r2
 8001870:	2b80      	cmp	r3, #128	; 0x80
 8001872:	dd03      	ble.n	800187c <ST7735_FillRectangle+0x3c>
 8001874:	88fb      	ldrh	r3, [r7, #6]
 8001876:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800187a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800187c:	88ba      	ldrh	r2, [r7, #4]
 800187e:	883b      	ldrh	r3, [r7, #0]
 8001880:	4413      	add	r3, r2
 8001882:	2b80      	cmp	r3, #128	; 0x80
 8001884:	dd03      	ble.n	800188e <ST7735_FillRectangle+0x4e>
 8001886:	88bb      	ldrh	r3, [r7, #4]
 8001888:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800188c:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 800188e:	f7ff feb7 	bl	8001600 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001892:	88fb      	ldrh	r3, [r7, #6]
 8001894:	b2d8      	uxtb	r0, r3
 8001896:	88bb      	ldrh	r3, [r7, #4]
 8001898:	b2d9      	uxtb	r1, r3
 800189a:	88fb      	ldrh	r3, [r7, #6]
 800189c:	b2da      	uxtb	r2, r3
 800189e:	887b      	ldrh	r3, [r7, #2]
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	4413      	add	r3, r2
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	3b01      	subs	r3, #1
 80018a8:	b2dc      	uxtb	r4, r3
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	4413      	add	r3, r2
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	3b01      	subs	r3, #1
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	4622      	mov	r2, r4
 80018bc:	f7ff ff65 	bl	800178a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80018c0:	8c3b      	ldrh	r3, [r7, #32]
 80018c2:	0a1b      	lsrs	r3, r3, #8
 80018c4:	b29b      	uxth	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	733b      	strb	r3, [r7, #12]
 80018ca:	8c3b      	ldrh	r3, [r7, #32]
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018d6:	4812      	ldr	r0, [pc, #72]	; (8001920 <ST7735_FillRectangle+0xe0>)
 80018d8:	f003 fd22 	bl	8005320 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80018dc:	883b      	ldrh	r3, [r7, #0]
 80018de:	80bb      	strh	r3, [r7, #4]
 80018e0:	e013      	b.n	800190a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80018e2:	887b      	ldrh	r3, [r7, #2]
 80018e4:	80fb      	strh	r3, [r7, #6]
 80018e6:	e00a      	b.n	80018fe <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80018e8:	f107 010c 	add.w	r1, r7, #12
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295
 80018f0:	2202      	movs	r2, #2
 80018f2:	480c      	ldr	r0, [pc, #48]	; (8001924 <ST7735_FillRectangle+0xe4>)
 80018f4:	f006 fb50 	bl	8007f98 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80018f8:	88fb      	ldrh	r3, [r7, #6]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	80fb      	strh	r3, [r7, #6]
 80018fe:	88fb      	ldrh	r3, [r7, #6]
 8001900:	2b00      	cmp	r3, #0
 8001902:	d1f1      	bne.n	80018e8 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001904:	88bb      	ldrh	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	80bb      	strh	r3, [r7, #4]
 800190a:	88bb      	ldrh	r3, [r7, #4]
 800190c:	2b00      	cmp	r3, #0
 800190e:	d1e8      	bne.n	80018e2 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001910:	f7ff fe82 	bl	8001618 <ST7735_Unselect>
 8001914:	e000      	b.n	8001918 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001916:	bf00      	nop
}
 8001918:	3714      	adds	r7, #20
 800191a:	46bd      	mov	sp, r7
 800191c:	bd90      	pop	{r4, r7, pc}
 800191e:	bf00      	nop
 8001920:	58021800 	.word	0x58021800
 8001924:	240001d4 	.word	0x240001d4

08001928 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af02      	add	r7, sp, #8
 800192e:	4603      	mov	r3, r0
 8001930:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8001932:	88fb      	ldrh	r3, [r7, #6]
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	2380      	movs	r3, #128	; 0x80
 8001938:	2280      	movs	r2, #128	; 0x80
 800193a:	2100      	movs	r1, #0
 800193c:	2000      	movs	r0, #0
 800193e:	f7ff ff7f 	bl	8001840 <ST7735_FillRectangle>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	4b0a      	ldr	r3, [pc, #40]	; (800197c <HAL_MspInit+0x30>)
 8001954:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001958:	4a08      	ldr	r2, [pc, #32]	; (800197c <HAL_MspInit+0x30>)
 800195a:	f043 0302 	orr.w	r3, r3, #2
 800195e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_MspInit+0x30>)
 8001964:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001968:	f003 0302 	and.w	r3, r3, #2
 800196c:	607b      	str	r3, [r7, #4]
 800196e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr
 800197c:	58024400 	.word	0x58024400

08001980 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b08e      	sub	sp, #56	; 0x38
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]
 8001990:	605a      	str	r2, [r3, #4]
 8001992:	609a      	str	r2, [r3, #8]
 8001994:	60da      	str	r2, [r3, #12]
 8001996:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a59      	ldr	r2, [pc, #356]	; (8001b04 <HAL_ETH_MspInit+0x184>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	f040 80ab 	bne.w	8001afa <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80019a4:	4b58      	ldr	r3, [pc, #352]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019aa:	4a57      	ldr	r2, [pc, #348]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019ac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019b0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019b4:	4b54      	ldr	r3, [pc, #336]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80019c2:	4b51      	ldr	r3, [pc, #324]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019c8:	4a4f      	ldr	r2, [pc, #316]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019d2:	4b4d      	ldr	r3, [pc, #308]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80019e0:	4b49      	ldr	r3, [pc, #292]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019e6:	4a48      	ldr	r2, [pc, #288]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019ec:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80019f0:	4b45      	ldr	r3, [pc, #276]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 80019f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80019f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b42      	ldr	r3, [pc, #264]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a04:	4a40      	ldr	r2, [pc, #256]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a0e:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	617b      	str	r3, [r7, #20]
 8001a1a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a1c:	4b3a      	ldr	r3, [pc, #232]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a22:	4a39      	ldr	r2, [pc, #228]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a24:	f043 0301 	orr.w	r3, r3, #1
 8001a28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a32:	f003 0301 	and.w	r3, r3, #1
 8001a36:	613b      	str	r3, [r7, #16]
 8001a38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a3a:	4b33      	ldr	r3, [pc, #204]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a40:	4a31      	ldr	r2, [pc, #196]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a42:	f043 0302 	orr.w	r3, r3, #2
 8001a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a4a:	4b2f      	ldr	r3, [pc, #188]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	60fb      	str	r3, [r7, #12]
 8001a56:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001a58:	4b2b      	ldr	r3, [pc, #172]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a5e:	4a2a      	ldr	r2, [pc, #168]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001a68:	4b27      	ldr	r3, [pc, #156]	; (8001b08 <HAL_ETH_MspInit+0x188>)
 8001a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a72:	60bb      	str	r3, [r7, #8]
 8001a74:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001a76:	2332      	movs	r3, #50	; 0x32
 8001a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a82:	2300      	movs	r3, #0
 8001a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a86:	230b      	movs	r3, #11
 8001a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a8e:	4619      	mov	r1, r3
 8001a90:	481e      	ldr	r0, [pc, #120]	; (8001b0c <HAL_ETH_MspInit+0x18c>)
 8001a92:	f003 fa7d 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001a96:	2386      	movs	r3, #134	; 0x86
 8001a98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aa6:	230b      	movs	r3, #11
 8001aa8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4817      	ldr	r0, [pc, #92]	; (8001b10 <HAL_ETH_MspInit+0x190>)
 8001ab2:	f003 fa6d 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001ab6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001abc:	2302      	movs	r3, #2
 8001abe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001ac8:	230b      	movs	r3, #11
 8001aca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001acc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	4810      	ldr	r0, [pc, #64]	; (8001b14 <HAL_ETH_MspInit+0x194>)
 8001ad4:	f003 fa5c 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001ad8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001aea:	230b      	movs	r3, #11
 8001aec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001aee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001af2:	4619      	mov	r1, r3
 8001af4:	4808      	ldr	r0, [pc, #32]	; (8001b18 <HAL_ETH_MspInit+0x198>)
 8001af6:	f003 fa4b 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3738      	adds	r7, #56	; 0x38
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40028000 	.word	0x40028000
 8001b08:	58024400 	.word	0x58024400
 8001b0c:	58020800 	.word	0x58020800
 8001b10:	58020000 	.word	0x58020000
 8001b14:	58020400 	.word	0x58020400
 8001b18:	58021800 	.word	0x58021800

08001b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b08a      	sub	sp, #40	; 0x28
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b24:	f107 0314 	add.w	r3, r7, #20
 8001b28:	2200      	movs	r2, #0
 8001b2a:	601a      	str	r2, [r3, #0]
 8001b2c:	605a      	str	r2, [r3, #4]
 8001b2e:	609a      	str	r2, [r3, #8]
 8001b30:	60da      	str	r2, [r3, #12]
 8001b32:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a2a      	ldr	r2, [pc, #168]	; (8001be4 <HAL_SPI_MspInit+0xc8>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d14d      	bne.n	8001bda <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001b3e:	4b2a      	ldr	r3, [pc, #168]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b44:	4a28      	ldr	r2, [pc, #160]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b46:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b4a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001b4e:	4b26      	ldr	r3, [pc, #152]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b50:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001b54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b58:	613b      	str	r3, [r7, #16]
 8001b5a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b5c:	4b22      	ldr	r3, [pc, #136]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b64:	f043 0302 	orr.w	r3, r3, #2
 8001b68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b6c:	4b1e      	ldr	r3, [pc, #120]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b72:	f003 0302 	and.w	r3, r3, #2
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7a:	4b1b      	ldr	r3, [pc, #108]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b80:	4a19      	ldr	r2, [pc, #100]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b82:	f043 0304 	orr.w	r3, r3, #4
 8001b86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001b8a:	4b17      	ldr	r3, [pc, #92]	; (8001be8 <HAL_SPI_MspInit+0xcc>)
 8001b8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001b90:	f003 0304 	and.w	r3, r3, #4
 8001b94:	60bb      	str	r3, [r7, #8]
 8001b96:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001b98:	2304      	movs	r3, #4
 8001b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001ba8:	2307      	movs	r3, #7
 8001baa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	480e      	ldr	r0, [pc, #56]	; (8001bec <HAL_SPI_MspInit+0xd0>)
 8001bb4:	f003 f9ec 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bbe:	2302      	movs	r3, #2
 8001bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001bca:	2306      	movs	r3, #6
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bce:	f107 0314 	add.w	r3, r7, #20
 8001bd2:	4619      	mov	r1, r3
 8001bd4:	4806      	ldr	r0, [pc, #24]	; (8001bf0 <HAL_SPI_MspInit+0xd4>)
 8001bd6:	f003 f9db 	bl	8004f90 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001bda:	bf00      	nop
 8001bdc:	3728      	adds	r7, #40	; 0x28
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd80      	pop	{r7, pc}
 8001be2:	bf00      	nop
 8001be4:	40003c00 	.word	0x40003c00
 8001be8:	58024400 	.word	0x58024400
 8001bec:	58020400 	.word	0x58020400
 8001bf0:	58020800 	.word	0x58020800

08001bf4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b0b8      	sub	sp, #224	; 0xe0
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bfc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	605a      	str	r2, [r3, #4]
 8001c06:	609a      	str	r2, [r3, #8]
 8001c08:	60da      	str	r2, [r3, #12]
 8001c0a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c0c:	f107 0310 	add.w	r3, r7, #16
 8001c10:	22bc      	movs	r2, #188	; 0xbc
 8001c12:	2100      	movs	r1, #0
 8001c14:	4618      	mov	r0, r3
 8001c16:	f008 fcbd 	bl	800a594 <memset>
  if(huart->Instance==USART3)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a57      	ldr	r2, [pc, #348]	; (8001d7c <HAL_UART_MspInit+0x188>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	f040 80a6 	bne.w	8001d72 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c26:	2302      	movs	r3, #2
 8001c28:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c30:	f107 0310 	add.w	r3, r7, #16
 8001c34:	4618      	mov	r0, r3
 8001c36:	f004 fd41 	bl	80066bc <HAL_RCCEx_PeriphCLKConfig>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001c40:	f7ff fcd8 	bl	80015f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c44:	4b4e      	ldr	r3, [pc, #312]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001c46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c4a:	4a4d      	ldr	r2, [pc, #308]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001c54:	4b4a      	ldr	r3, [pc, #296]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001c56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001c5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c5e:	60fb      	str	r3, [r7, #12]
 8001c60:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c62:	4b47      	ldr	r3, [pc, #284]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c68:	4a45      	ldr	r2, [pc, #276]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001c6a:	f043 0308 	orr.w	r3, r3, #8
 8001c6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c72:	4b43      	ldr	r3, [pc, #268]	; (8001d80 <HAL_UART_MspInit+0x18c>)
 8001c74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c78:	f003 0308 	and.w	r3, r3, #8
 8001c7c:	60bb      	str	r3, [r7, #8]
 8001c7e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001c80:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c84:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2300      	movs	r3, #0
 8001c96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c9a:	2307      	movs	r3, #7
 8001c9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4837      	ldr	r0, [pc, #220]	; (8001d84 <HAL_UART_MspInit+0x190>)
 8001ca8:	f003 f972 	bl	8004f90 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001cac:	4b36      	ldr	r3, [pc, #216]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cae:	4a37      	ldr	r2, [pc, #220]	; (8001d8c <HAL_UART_MspInit+0x198>)
 8001cb0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001cb2:	4b35      	ldr	r3, [pc, #212]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cb4:	222d      	movs	r2, #45	; 0x2d
 8001cb6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cb8:	4b33      	ldr	r3, [pc, #204]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cbe:	4b32      	ldr	r3, [pc, #200]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cc4:	4b30      	ldr	r3, [pc, #192]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cc6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cca:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001ccc:	4b2e      	ldr	r3, [pc, #184]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cd2:	4b2d      	ldr	r3, [pc, #180]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001cd8:	4b2b      	ldr	r3, [pc, #172]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cda:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001cde:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001ce0:	4b29      	ldr	r3, [pc, #164]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ce6:	4b28      	ldr	r3, [pc, #160]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001cec:	4826      	ldr	r0, [pc, #152]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001cee:	f000 fb05 	bl	80022fc <HAL_DMA_Init>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d001      	beq.n	8001cfc <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001cf8:	f7ff fc7c 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a22      	ldr	r2, [pc, #136]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001d00:	67da      	str	r2, [r3, #124]	; 0x7c
 8001d02:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <HAL_UART_MspInit+0x194>)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8001d08:	4b21      	ldr	r3, [pc, #132]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d0a:	4a22      	ldr	r2, [pc, #136]	; (8001d94 <HAL_UART_MspInit+0x1a0>)
 8001d0c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001d0e:	4b20      	ldr	r3, [pc, #128]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d10:	222e      	movs	r2, #46	; 0x2e
 8001d12:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d14:	4b1e      	ldr	r3, [pc, #120]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d16:	2240      	movs	r2, #64	; 0x40
 8001d18:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d1a:	4b1d      	ldr	r3, [pc, #116]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d20:	4b1b      	ldr	r3, [pc, #108]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d26:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d2e:	4b18      	ldr	r3, [pc, #96]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001d34:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d3a:	4b15      	ldr	r3, [pc, #84]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d40:	4b13      	ldr	r3, [pc, #76]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001d46:	4812      	ldr	r0, [pc, #72]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d48:	f000 fad8 	bl	80022fc <HAL_DMA_Init>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d001      	beq.n	8001d56 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001d52:	f7ff fc4f 	bl	80015f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d5a:	679a      	str	r2, [r3, #120]	; 0x78
 8001d5c:	4a0c      	ldr	r2, [pc, #48]	; (8001d90 <HAL_UART_MspInit+0x19c>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	2027      	movs	r0, #39	; 0x27
 8001d68:	f000 fa93 	bl	8002292 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001d6c:	2027      	movs	r0, #39	; 0x27
 8001d6e:	f000 faaa 	bl	80022c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001d72:	bf00      	nop
 8001d74:	37e0      	adds	r7, #224	; 0xe0
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40004800 	.word	0x40004800
 8001d80:	58024400 	.word	0x58024400
 8001d84:	58020c00 	.word	0x58020c00
 8001d88:	240002ec 	.word	0x240002ec
 8001d8c:	40020028 	.word	0x40020028
 8001d90:	24000364 	.word	0x24000364
 8001d94:	40020070 	.word	0x40020070

08001d98 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b08a      	sub	sp, #40	; 0x28
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da0:	f107 0314 	add.w	r3, r7, #20
 8001da4:	2200      	movs	r2, #0
 8001da6:	601a      	str	r2, [r3, #0]
 8001da8:	605a      	str	r2, [r3, #4]
 8001daa:	609a      	str	r2, [r3, #8]
 8001dac:	60da      	str	r2, [r3, #12]
 8001dae:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	4a22      	ldr	r2, [pc, #136]	; (8001e40 <HAL_PCD_MspInit+0xa8>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d13d      	bne.n	8001e36 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001dba:	f003 fcb5 	bl	8005728 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	4b21      	ldr	r3, [pc, #132]	; (8001e44 <HAL_PCD_MspInit+0xac>)
 8001dc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dc4:	4a1f      	ldr	r2, [pc, #124]	; (8001e44 <HAL_PCD_MspInit+0xac>)
 8001dc6:	f043 0301 	orr.w	r3, r3, #1
 8001dca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001dce:	4b1d      	ldr	r3, [pc, #116]	; (8001e44 <HAL_PCD_MspInit+0xac>)
 8001dd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001dd4:	f003 0301 	and.w	r3, r3, #1
 8001dd8:	613b      	str	r3, [r7, #16]
 8001dda:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ddc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001de0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dea:	2300      	movs	r3, #0
 8001dec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001dee:	230a      	movs	r3, #10
 8001df0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001df2:	f107 0314 	add.w	r3, r7, #20
 8001df6:	4619      	mov	r1, r3
 8001df8:	4813      	ldr	r0, [pc, #76]	; (8001e48 <HAL_PCD_MspInit+0xb0>)
 8001dfa:	f003 f8c9 	bl	8004f90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001dfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	480d      	ldr	r0, [pc, #52]	; (8001e48 <HAL_PCD_MspInit+0xb0>)
 8001e14:	f003 f8bc 	bl	8004f90 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001e18:	4b0a      	ldr	r3, [pc, #40]	; (8001e44 <HAL_PCD_MspInit+0xac>)
 8001e1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <HAL_PCD_MspInit+0xac>)
 8001e20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001e24:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_PCD_MspInit+0xac>)
 8001e2a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001e2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001e32:	60fb      	str	r3, [r7, #12]
 8001e34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001e36:	bf00      	nop
 8001e38:	3728      	adds	r7, #40	; 0x28
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40080000 	.word	0x40080000
 8001e44:	58024400 	.word	0x58024400
 8001e48:	58020000 	.word	0x58020000

08001e4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e50:	e7fe      	b.n	8001e50 <NMI_Handler+0x4>

08001e52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e52:	b480      	push	{r7}
 8001e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e56:	e7fe      	b.n	8001e56 <HardFault_Handler+0x4>

08001e58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e5c:	e7fe      	b.n	8001e5c <MemManage_Handler+0x4>

08001e5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e62:	e7fe      	b.n	8001e62 <BusFault_Handler+0x4>

08001e64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e68:	e7fe      	b.n	8001e68 <UsageFault_Handler+0x4>

08001e6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e6a:	b480      	push	{r7}
 8001e6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e7c:	bf00      	nop
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr

08001e86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e86:	b480      	push	{r7}
 8001e88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e8a:	bf00      	nop
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr

08001e94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e98:	f000 f8bc 	bl	8002014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e9c:	bf00      	nop
 8001e9e:	bd80      	pop	{r7, pc}

08001ea0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <DMA1_Stream1_IRQHandler+0x10>)
 8001ea6:	f001 fae9 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	240002ec 	.word	0x240002ec

08001eb4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA1_Stream4_IRQHandler+0x10>)
 8001eba:	f001 fadf 	bl	800347c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	24000364 	.word	0x24000364

08001ec8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <USART3_IRQHandler+0x10>)
 8001ece:	f006 fb8f 	bl	80085f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	2400025c 	.word	0x2400025c

08001edc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001edc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001ee0:	f7fe ff46 	bl	8000d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ee6:	490d      	ldr	r1, [pc, #52]	; (8001f1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ee8:	4a0d      	ldr	r2, [pc, #52]	; (8001f20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001eea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001eec:	e002      	b.n	8001ef4 <LoopCopyDataInit>

08001eee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ef0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ef2:	3304      	adds	r3, #4

08001ef4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ef4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ef6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ef8:	d3f9      	bcc.n	8001eee <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001efa:	4a0a      	ldr	r2, [pc, #40]	; (8001f24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001efc:	4c0a      	ldr	r4, [pc, #40]	; (8001f28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001efe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f00:	e001      	b.n	8001f06 <LoopFillZerobss>

08001f02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f04:	3204      	adds	r2, #4

08001f06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f08:	d3fb      	bcc.n	8001f02 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f0a:	f008 fb1f 	bl	800a54c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f0e:	f7fe ffc5 	bl	8000e9c <main>
  bx  lr
 8001f12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f14:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001f18:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001f1c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001f20:	0800a684 	.word	0x0800a684
  ldr r2, =_sbss
 8001f24:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001f28:	24000c2c 	.word	0x24000c2c

08001f2c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f2c:	e7fe      	b.n	8001f2c <ADC3_IRQHandler>
	...

08001f30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b082      	sub	sp, #8
 8001f34:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f36:	2003      	movs	r0, #3
 8001f38:	f000 f9a0 	bl	800227c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f3c:	f004 f9e8 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 8001f40:	4602      	mov	r2, r0
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <HAL_Init+0x68>)
 8001f44:	699b      	ldr	r3, [r3, #24]
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	4913      	ldr	r1, [pc, #76]	; (8001f9c <HAL_Init+0x6c>)
 8001f4e:	5ccb      	ldrb	r3, [r1, r3]
 8001f50:	f003 031f 	and.w	r3, r3, #31
 8001f54:	fa22 f303 	lsr.w	r3, r2, r3
 8001f58:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f5a:	4b0f      	ldr	r3, [pc, #60]	; (8001f98 <HAL_Init+0x68>)
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 030f 	and.w	r3, r3, #15
 8001f62:	4a0e      	ldr	r2, [pc, #56]	; (8001f9c <HAL_Init+0x6c>)
 8001f64:	5cd3      	ldrb	r3, [r2, r3]
 8001f66:	f003 031f 	and.w	r3, r3, #31
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f70:	4a0b      	ldr	r2, [pc, #44]	; (8001fa0 <HAL_Init+0x70>)
 8001f72:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f74:	4a0b      	ldr	r2, [pc, #44]	; (8001fa4 <HAL_Init+0x74>)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f000 f814 	bl	8001fa8 <HAL_InitTick>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e002      	b.n	8001f90 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8a:	f7ff fcdf 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3708      	adds	r7, #8
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	58024400 	.word	0x58024400
 8001f9c:	0800a5bc 	.word	0x0800a5bc
 8001fa0:	24000004 	.word	0x24000004
 8001fa4:	24000000 	.word	0x24000000

08001fa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001fb0:	4b15      	ldr	r3, [pc, #84]	; (8002008 <HAL_InitTick+0x60>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d101      	bne.n	8001fbc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e021      	b.n	8002000 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001fbc:	4b13      	ldr	r3, [pc, #76]	; (800200c <HAL_InitTick+0x64>)
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b11      	ldr	r3, [pc, #68]	; (8002008 <HAL_InitTick+0x60>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8001fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f000 f985 	bl	80022e2 <HAL_SYSTICK_Config>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e00e      	b.n	8002000 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b0f      	cmp	r3, #15
 8001fe6:	d80a      	bhi.n	8001ffe <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fe8:	2200      	movs	r2, #0
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	f04f 30ff 	mov.w	r0, #4294967295
 8001ff0:	f000 f94f 	bl	8002292 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ff4:	4a06      	ldr	r2, [pc, #24]	; (8002010 <HAL_InitTick+0x68>)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	e000      	b.n	8002000 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
}
 8002000:	4618      	mov	r0, r3
 8002002:	3708      	adds	r7, #8
 8002004:	46bd      	mov	sp, r7
 8002006:	bd80      	pop	{r7, pc}
 8002008:	2400000c 	.word	0x2400000c
 800200c:	24000000 	.word	0x24000000
 8002010:	24000008 	.word	0x24000008

08002014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002014:	b480      	push	{r7}
 8002016:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002018:	4b06      	ldr	r3, [pc, #24]	; (8002034 <HAL_IncTick+0x20>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	461a      	mov	r2, r3
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_IncTick+0x24>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	4a04      	ldr	r2, [pc, #16]	; (8002038 <HAL_IncTick+0x24>)
 8002026:	6013      	str	r3, [r2, #0]
}
 8002028:	bf00      	nop
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	2400000c 	.word	0x2400000c
 8002038:	24000c28 	.word	0x24000c28

0800203c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800203c:	b480      	push	{r7}
 800203e:	af00      	add	r7, sp, #0
  return uwTick;
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <HAL_GetTick+0x14>)
 8002042:	681b      	ldr	r3, [r3, #0]
}
 8002044:	4618      	mov	r0, r3
 8002046:	46bd      	mov	sp, r7
 8002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204c:	4770      	bx	lr
 800204e:	bf00      	nop
 8002050:	24000c28 	.word	0x24000c28

08002054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b084      	sub	sp, #16
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800205c:	f7ff ffee 	bl	800203c <HAL_GetTick>
 8002060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800206c:	d005      	beq.n	800207a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800206e:	4b0a      	ldr	r3, [pc, #40]	; (8002098 <HAL_Delay+0x44>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	461a      	mov	r2, r3
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4413      	add	r3, r2
 8002078:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800207a:	bf00      	nop
 800207c:	f7ff ffde 	bl	800203c <HAL_GetTick>
 8002080:	4602      	mov	r2, r0
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	1ad3      	subs	r3, r2, r3
 8002086:	68fa      	ldr	r2, [r7, #12]
 8002088:	429a      	cmp	r2, r3
 800208a:	d8f7      	bhi.n	800207c <HAL_Delay+0x28>
  {
  }
}
 800208c:	bf00      	nop
 800208e:	bf00      	nop
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	2400000c 	.word	0x2400000c

0800209c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80020a0:	4b03      	ldr	r3, [pc, #12]	; (80020b0 <HAL_GetREVID+0x14>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	0c1b      	lsrs	r3, r3, #16
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr
 80020b0:	5c001000 	.word	0x5c001000

080020b4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80020bc:	4b06      	ldr	r3, [pc, #24]	; (80020d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020be:	685b      	ldr	r3, [r3, #4]
 80020c0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80020c4:	4904      	ldr	r1, [pc, #16]	; (80020d8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4313      	orrs	r3, r2
 80020ca:	604b      	str	r3, [r1, #4]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	58000400 	.word	0x58000400

080020dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020dc:	b480      	push	{r7}
 80020de:	b085      	sub	sp, #20
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80020ec:	4b0b      	ldr	r3, [pc, #44]	; (800211c <__NVIC_SetPriorityGrouping+0x40>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80020f8:	4013      	ands	r3, r2
 80020fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002104:	4b06      	ldr	r3, [pc, #24]	; (8002120 <__NVIC_SetPriorityGrouping+0x44>)
 8002106:	4313      	orrs	r3, r2
 8002108:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800210a:	4a04      	ldr	r2, [pc, #16]	; (800211c <__NVIC_SetPriorityGrouping+0x40>)
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	60d3      	str	r3, [r2, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr
 800211c:	e000ed00 	.word	0xe000ed00
 8002120:	05fa0000 	.word	0x05fa0000

08002124 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002128:	4b04      	ldr	r3, [pc, #16]	; (800213c <__NVIC_GetPriorityGrouping+0x18>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	0a1b      	lsrs	r3, r3, #8
 800212e:	f003 0307 	and.w	r3, r3, #7
}
 8002132:	4618      	mov	r0, r3
 8002134:	46bd      	mov	sp, r7
 8002136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213a:	4770      	bx	lr
 800213c:	e000ed00 	.word	0xe000ed00

08002140 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4603      	mov	r3, r0
 8002148:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800214a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800214e:	2b00      	cmp	r3, #0
 8002150:	db0b      	blt.n	800216a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002152:	88fb      	ldrh	r3, [r7, #6]
 8002154:	f003 021f 	and.w	r2, r3, #31
 8002158:	4907      	ldr	r1, [pc, #28]	; (8002178 <__NVIC_EnableIRQ+0x38>)
 800215a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800215e:	095b      	lsrs	r3, r3, #5
 8002160:	2001      	movs	r0, #1
 8002162:	fa00 f202 	lsl.w	r2, r0, r2
 8002166:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	e000e100 	.word	0xe000e100

0800217c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	4603      	mov	r3, r0
 8002184:	6039      	str	r1, [r7, #0]
 8002186:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002188:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800218c:	2b00      	cmp	r3, #0
 800218e:	db0a      	blt.n	80021a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	b2da      	uxtb	r2, r3
 8002194:	490c      	ldr	r1, [pc, #48]	; (80021c8 <__NVIC_SetPriority+0x4c>)
 8002196:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800219a:	0112      	lsls	r2, r2, #4
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	440b      	add	r3, r1
 80021a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021a4:	e00a      	b.n	80021bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	4908      	ldr	r1, [pc, #32]	; (80021cc <__NVIC_SetPriority+0x50>)
 80021ac:	88fb      	ldrh	r3, [r7, #6]
 80021ae:	f003 030f 	and.w	r3, r3, #15
 80021b2:	3b04      	subs	r3, #4
 80021b4:	0112      	lsls	r2, r2, #4
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	440b      	add	r3, r1
 80021ba:	761a      	strb	r2, [r3, #24]
}
 80021bc:	bf00      	nop
 80021be:	370c      	adds	r7, #12
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000e100 	.word	0xe000e100
 80021cc:	e000ed00 	.word	0xe000ed00

080021d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 0307 	and.w	r3, r3, #7
 80021e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	f1c3 0307 	rsb	r3, r3, #7
 80021ea:	2b04      	cmp	r3, #4
 80021ec:	bf28      	it	cs
 80021ee:	2304      	movcs	r3, #4
 80021f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	3304      	adds	r3, #4
 80021f6:	2b06      	cmp	r3, #6
 80021f8:	d902      	bls.n	8002200 <NVIC_EncodePriority+0x30>
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	3b03      	subs	r3, #3
 80021fe:	e000      	b.n	8002202 <NVIC_EncodePriority+0x32>
 8002200:	2300      	movs	r3, #0
 8002202:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002204:	f04f 32ff 	mov.w	r2, #4294967295
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	fa02 f303 	lsl.w	r3, r2, r3
 800220e:	43da      	mvns	r2, r3
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	401a      	ands	r2, r3
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002218:	f04f 31ff 	mov.w	r1, #4294967295
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	fa01 f303 	lsl.w	r3, r1, r3
 8002222:	43d9      	mvns	r1, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002228:	4313      	orrs	r3, r2
         );
}
 800222a:	4618      	mov	r0, r3
 800222c:	3724      	adds	r7, #36	; 0x24
 800222e:	46bd      	mov	sp, r7
 8002230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002234:	4770      	bx	lr
	...

08002238 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b082      	sub	sp, #8
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	3b01      	subs	r3, #1
 8002244:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002248:	d301      	bcc.n	800224e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800224a:	2301      	movs	r3, #1
 800224c:	e00f      	b.n	800226e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800224e:	4a0a      	ldr	r2, [pc, #40]	; (8002278 <SysTick_Config+0x40>)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	3b01      	subs	r3, #1
 8002254:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002256:	210f      	movs	r1, #15
 8002258:	f04f 30ff 	mov.w	r0, #4294967295
 800225c:	f7ff ff8e 	bl	800217c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002260:	4b05      	ldr	r3, [pc, #20]	; (8002278 <SysTick_Config+0x40>)
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <SysTick_Config+0x40>)
 8002268:	2207      	movs	r2, #7
 800226a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
 8002276:	bf00      	nop
 8002278:	e000e010 	.word	0xe000e010

0800227c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b082      	sub	sp, #8
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	f7ff ff29 	bl	80020dc <__NVIC_SetPriorityGrouping>
}
 800228a:	bf00      	nop
 800228c:	3708      	adds	r7, #8
 800228e:	46bd      	mov	sp, r7
 8002290:	bd80      	pop	{r7, pc}

08002292 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002292:	b580      	push	{r7, lr}
 8002294:	b086      	sub	sp, #24
 8002296:	af00      	add	r7, sp, #0
 8002298:	4603      	mov	r3, r0
 800229a:	60b9      	str	r1, [r7, #8]
 800229c:	607a      	str	r2, [r7, #4]
 800229e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80022a0:	f7ff ff40 	bl	8002124 <__NVIC_GetPriorityGrouping>
 80022a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022a6:	687a      	ldr	r2, [r7, #4]
 80022a8:	68b9      	ldr	r1, [r7, #8]
 80022aa:	6978      	ldr	r0, [r7, #20]
 80022ac:	f7ff ff90 	bl	80021d0 <NVIC_EncodePriority>
 80022b0:	4602      	mov	r2, r0
 80022b2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b6:	4611      	mov	r1, r2
 80022b8:	4618      	mov	r0, r3
 80022ba:	f7ff ff5f 	bl	800217c <__NVIC_SetPriority>
}
 80022be:	bf00      	nop
 80022c0:	3718      	adds	r7, #24
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	4603      	mov	r3, r0
 80022ce:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7ff ff33 	bl	8002140 <__NVIC_EnableIRQ>
}
 80022da:	bf00      	nop
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}

080022e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022e2:	b580      	push	{r7, lr}
 80022e4:	b082      	sub	sp, #8
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f7ff ffa4 	bl	8002238 <SysTick_Config>
 80022f0:	4603      	mov	r3, r0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
	...

080022fc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b086      	sub	sp, #24
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002304:	f7ff fe9a 	bl	800203c <HAL_GetTick>
 8002308:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e316      	b.n	8002942 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <HAL_DMA_Init+0x1b8>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d04a      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a65      	ldr	r2, [pc, #404]	; (80024b8 <HAL_DMA_Init+0x1bc>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d045      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a63      	ldr	r2, [pc, #396]	; (80024bc <HAL_DMA_Init+0x1c0>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d040      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a62      	ldr	r2, [pc, #392]	; (80024c0 <HAL_DMA_Init+0x1c4>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d03b      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <HAL_DMA_Init+0x1c8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d036      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a5f      	ldr	r2, [pc, #380]	; (80024c8 <HAL_DMA_Init+0x1cc>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d031      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a5d      	ldr	r2, [pc, #372]	; (80024cc <HAL_DMA_Init+0x1d0>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d02c      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a5c      	ldr	r2, [pc, #368]	; (80024d0 <HAL_DMA_Init+0x1d4>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d027      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a5a      	ldr	r2, [pc, #360]	; (80024d4 <HAL_DMA_Init+0x1d8>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d022      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	4a59      	ldr	r2, [pc, #356]	; (80024d8 <HAL_DMA_Init+0x1dc>)
 8002374:	4293      	cmp	r3, r2
 8002376:	d01d      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a57      	ldr	r2, [pc, #348]	; (80024dc <HAL_DMA_Init+0x1e0>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d018      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a56      	ldr	r2, [pc, #344]	; (80024e0 <HAL_DMA_Init+0x1e4>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d013      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a54      	ldr	r2, [pc, #336]	; (80024e4 <HAL_DMA_Init+0x1e8>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d00e      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a53      	ldr	r2, [pc, #332]	; (80024e8 <HAL_DMA_Init+0x1ec>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d009      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a51      	ldr	r2, [pc, #324]	; (80024ec <HAL_DMA_Init+0x1f0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d004      	beq.n	80023b4 <HAL_DMA_Init+0xb8>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a50      	ldr	r2, [pc, #320]	; (80024f0 <HAL_DMA_Init+0x1f4>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d101      	bne.n	80023b8 <HAL_DMA_Init+0xbc>
 80023b4:	2301      	movs	r3, #1
 80023b6:	e000      	b.n	80023ba <HAL_DMA_Init+0xbe>
 80023b8:	2300      	movs	r3, #0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	f000 813b 	beq.w	8002636 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2202      	movs	r2, #2
 80023c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2200      	movs	r2, #0
 80023cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a37      	ldr	r2, [pc, #220]	; (80024b4 <HAL_DMA_Init+0x1b8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d04a      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a36      	ldr	r2, [pc, #216]	; (80024b8 <HAL_DMA_Init+0x1bc>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d045      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a34      	ldr	r2, [pc, #208]	; (80024bc <HAL_DMA_Init+0x1c0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d040      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a33      	ldr	r2, [pc, #204]	; (80024c0 <HAL_DMA_Init+0x1c4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d03b      	beq.n	8002470 <HAL_DMA_Init+0x174>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a31      	ldr	r2, [pc, #196]	; (80024c4 <HAL_DMA_Init+0x1c8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d036      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a30      	ldr	r2, [pc, #192]	; (80024c8 <HAL_DMA_Init+0x1cc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d031      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a2e      	ldr	r2, [pc, #184]	; (80024cc <HAL_DMA_Init+0x1d0>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d02c      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a2d      	ldr	r2, [pc, #180]	; (80024d0 <HAL_DMA_Init+0x1d4>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d027      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a2b      	ldr	r2, [pc, #172]	; (80024d4 <HAL_DMA_Init+0x1d8>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d022      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a2a      	ldr	r2, [pc, #168]	; (80024d8 <HAL_DMA_Init+0x1dc>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d01d      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a28      	ldr	r2, [pc, #160]	; (80024dc <HAL_DMA_Init+0x1e0>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d018      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a27      	ldr	r2, [pc, #156]	; (80024e0 <HAL_DMA_Init+0x1e4>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d013      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a25      	ldr	r2, [pc, #148]	; (80024e4 <HAL_DMA_Init+0x1e8>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d00e      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a24      	ldr	r2, [pc, #144]	; (80024e8 <HAL_DMA_Init+0x1ec>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d009      	beq.n	8002470 <HAL_DMA_Init+0x174>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a22      	ldr	r2, [pc, #136]	; (80024ec <HAL_DMA_Init+0x1f0>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d004      	beq.n	8002470 <HAL_DMA_Init+0x174>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a21      	ldr	r2, [pc, #132]	; (80024f0 <HAL_DMA_Init+0x1f4>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d108      	bne.n	8002482 <HAL_DMA_Init+0x186>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f022 0201 	bic.w	r2, r2, #1
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	e007      	b.n	8002492 <HAL_DMA_Init+0x196>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f022 0201 	bic.w	r2, r2, #1
 8002490:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002492:	e02f      	b.n	80024f4 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002494:	f7ff fdd2 	bl	800203c <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b05      	cmp	r3, #5
 80024a0:	d928      	bls.n	80024f4 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2220      	movs	r2, #32
 80024a6:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2203      	movs	r2, #3
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e246      	b.n	8002942 <HAL_DMA_Init+0x646>
 80024b4:	40020010 	.word	0x40020010
 80024b8:	40020028 	.word	0x40020028
 80024bc:	40020040 	.word	0x40020040
 80024c0:	40020058 	.word	0x40020058
 80024c4:	40020070 	.word	0x40020070
 80024c8:	40020088 	.word	0x40020088
 80024cc:	400200a0 	.word	0x400200a0
 80024d0:	400200b8 	.word	0x400200b8
 80024d4:	40020410 	.word	0x40020410
 80024d8:	40020428 	.word	0x40020428
 80024dc:	40020440 	.word	0x40020440
 80024e0:	40020458 	.word	0x40020458
 80024e4:	40020470 	.word	0x40020470
 80024e8:	40020488 	.word	0x40020488
 80024ec:	400204a0 	.word	0x400204a0
 80024f0:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0301 	and.w	r3, r3, #1
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1c8      	bne.n	8002494 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800250a:	697a      	ldr	r2, [r7, #20]
 800250c:	4b83      	ldr	r3, [pc, #524]	; (800271c <HAL_DMA_Init+0x420>)
 800250e:	4013      	ands	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800251a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	691b      	ldr	r3, [r3, #16]
 8002520:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002526:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	699b      	ldr	r3, [r3, #24]
 800252c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002532:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6a1b      	ldr	r3, [r3, #32]
 8002538:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 800253a:	697a      	ldr	r2, [r7, #20]
 800253c:	4313      	orrs	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002544:	2b04      	cmp	r3, #4
 8002546:	d107      	bne.n	8002558 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002550:	4313      	orrs	r3, r2
 8002552:	697a      	ldr	r2, [r7, #20]
 8002554:	4313      	orrs	r3, r2
 8002556:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002558:	4b71      	ldr	r3, [pc, #452]	; (8002720 <HAL_DMA_Init+0x424>)
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	4b71      	ldr	r3, [pc, #452]	; (8002724 <HAL_DMA_Init+0x428>)
 800255e:	4013      	ands	r3, r2
 8002560:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002564:	d328      	bcc.n	80025b8 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b28      	cmp	r3, #40	; 0x28
 800256c:	d903      	bls.n	8002576 <HAL_DMA_Init+0x27a>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b2e      	cmp	r3, #46	; 0x2e
 8002574:	d917      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b3e      	cmp	r3, #62	; 0x3e
 800257c:	d903      	bls.n	8002586 <HAL_DMA_Init+0x28a>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b42      	cmp	r3, #66	; 0x42
 8002584:	d90f      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b46      	cmp	r3, #70	; 0x46
 800258c:	d903      	bls.n	8002596 <HAL_DMA_Init+0x29a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	2b48      	cmp	r3, #72	; 0x48
 8002594:	d907      	bls.n	80025a6 <HAL_DMA_Init+0x2aa>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	685b      	ldr	r3, [r3, #4]
 800259a:	2b4e      	cmp	r3, #78	; 0x4e
 800259c:	d905      	bls.n	80025aa <HAL_DMA_Init+0x2ae>
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	685b      	ldr	r3, [r3, #4]
 80025a2:	2b52      	cmp	r3, #82	; 0x52
 80025a4:	d801      	bhi.n	80025aa <HAL_DMA_Init+0x2ae>
 80025a6:	2301      	movs	r3, #1
 80025a8:	e000      	b.n	80025ac <HAL_DMA_Init+0x2b0>
 80025aa:	2300      	movs	r3, #0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b6:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	697a      	ldr	r2, [r7, #20]
 80025be:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695b      	ldr	r3, [r3, #20]
 80025c6:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f023 0307 	bic.w	r3, r3, #7
 80025ce:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	2b04      	cmp	r3, #4
 80025e0:	d117      	bne.n	8002612 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e6:	697a      	ldr	r2, [r7, #20]
 80025e8:	4313      	orrs	r3, r2
 80025ea:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d00e      	beq.n	8002612 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80025f4:	6878      	ldr	r0, [r7, #4]
 80025f6:	f001 ff1d 	bl	8004434 <DMA_CheckFifoParam>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d008      	beq.n	8002612 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2240      	movs	r2, #64	; 0x40
 8002604:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e197      	b.n	8002942 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	697a      	ldr	r2, [r7, #20]
 8002618:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f001 fe58 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 8002620:	4603      	mov	r3, r0
 8002622:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002628:	f003 031f 	and.w	r3, r3, #31
 800262c:	223f      	movs	r2, #63	; 0x3f
 800262e:	409a      	lsls	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	609a      	str	r2, [r3, #8]
 8002634:	e0cd      	b.n	80027d2 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a3b      	ldr	r2, [pc, #236]	; (8002728 <HAL_DMA_Init+0x42c>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d022      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a39      	ldr	r2, [pc, #228]	; (800272c <HAL_DMA_Init+0x430>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d01d      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_DMA_Init+0x434>)
 8002650:	4293      	cmp	r3, r2
 8002652:	d018      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a36      	ldr	r2, [pc, #216]	; (8002734 <HAL_DMA_Init+0x438>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d013      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a35      	ldr	r2, [pc, #212]	; (8002738 <HAL_DMA_Init+0x43c>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d00e      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a33      	ldr	r2, [pc, #204]	; (800273c <HAL_DMA_Init+0x440>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d009      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4a32      	ldr	r2, [pc, #200]	; (8002740 <HAL_DMA_Init+0x444>)
 8002678:	4293      	cmp	r3, r2
 800267a:	d004      	beq.n	8002686 <HAL_DMA_Init+0x38a>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4a30      	ldr	r2, [pc, #192]	; (8002744 <HAL_DMA_Init+0x448>)
 8002682:	4293      	cmp	r3, r2
 8002684:	d101      	bne.n	800268a <HAL_DMA_Init+0x38e>
 8002686:	2301      	movs	r3, #1
 8002688:	e000      	b.n	800268c <HAL_DMA_Init+0x390>
 800268a:	2300      	movs	r3, #0
 800268c:	2b00      	cmp	r3, #0
 800268e:	f000 8097 	beq.w	80027c0 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a24      	ldr	r2, [pc, #144]	; (8002728 <HAL_DMA_Init+0x42c>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d021      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a22      	ldr	r2, [pc, #136]	; (800272c <HAL_DMA_Init+0x430>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d01c      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a21      	ldr	r2, [pc, #132]	; (8002730 <HAL_DMA_Init+0x434>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d017      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a1f      	ldr	r2, [pc, #124]	; (8002734 <HAL_DMA_Init+0x438>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d012      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a1e      	ldr	r2, [pc, #120]	; (8002738 <HAL_DMA_Init+0x43c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d00d      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1c      	ldr	r2, [pc, #112]	; (800273c <HAL_DMA_Init+0x440>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d008      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1b      	ldr	r2, [pc, #108]	; (8002740 <HAL_DMA_Init+0x444>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_Init+0x3e4>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	; (8002744 <HAL_DMA_Init+0x448>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2202      	movs	r2, #2
 80026e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80026fa:	697a      	ldr	r2, [r7, #20]
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_DMA_Init+0x44c>)
 80026fe:	4013      	ands	r3, r2
 8002700:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	689b      	ldr	r3, [r3, #8]
 8002706:	2b40      	cmp	r3, #64	; 0x40
 8002708:	d020      	beq.n	800274c <HAL_DMA_Init+0x450>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d102      	bne.n	8002718 <HAL_DMA_Init+0x41c>
 8002712:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002716:	e01a      	b.n	800274e <HAL_DMA_Init+0x452>
 8002718:	2300      	movs	r3, #0
 800271a:	e018      	b.n	800274e <HAL_DMA_Init+0x452>
 800271c:	fe10803f 	.word	0xfe10803f
 8002720:	5c001000 	.word	0x5c001000
 8002724:	ffff0000 	.word	0xffff0000
 8002728:	58025408 	.word	0x58025408
 800272c:	5802541c 	.word	0x5802541c
 8002730:	58025430 	.word	0x58025430
 8002734:	58025444 	.word	0x58025444
 8002738:	58025458 	.word	0x58025458
 800273c:	5802546c 	.word	0x5802546c
 8002740:	58025480 	.word	0x58025480
 8002744:	58025494 	.word	0x58025494
 8002748:	fffe000f 	.word	0xfffe000f
 800274c:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800274e:	687a      	ldr	r2, [r7, #4]
 8002750:	68d2      	ldr	r2, [r2, #12]
 8002752:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002754:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	691b      	ldr	r3, [r3, #16]
 800275a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800275c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	695b      	ldr	r3, [r3, #20]
 8002762:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002764:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800276c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	69db      	ldr	r3, [r3, #28]
 8002772:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002774:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a1b      	ldr	r3, [r3, #32]
 800277a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800277c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800277e:	697a      	ldr	r2, [r7, #20]
 8002780:	4313      	orrs	r3, r2
 8002782:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	697a      	ldr	r2, [r7, #20]
 800278a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	461a      	mov	r2, r3
 8002792:	4b6e      	ldr	r3, [pc, #440]	; (800294c <HAL_DMA_Init+0x650>)
 8002794:	4413      	add	r3, r2
 8002796:	4a6e      	ldr	r2, [pc, #440]	; (8002950 <HAL_DMA_Init+0x654>)
 8002798:	fba2 2303 	umull	r2, r3, r2, r3
 800279c:	091b      	lsrs	r3, r3, #4
 800279e:	009a      	lsls	r2, r3, #2
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f001 fd93 	bl	80042d0 <DMA_CalcBaseAndBitshift>
 80027aa:	4603      	mov	r3, r0
 80027ac:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	f003 031f 	and.w	r3, r3, #31
 80027b6:	2201      	movs	r2, #1
 80027b8:	409a      	lsls	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	e008      	b.n	80027d2 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2240      	movs	r2, #64	; 0x40
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2203      	movs	r2, #3
 80027ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e0b7      	b.n	8002942 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a5f      	ldr	r2, [pc, #380]	; (8002954 <HAL_DMA_Init+0x658>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d072      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4a5d      	ldr	r2, [pc, #372]	; (8002958 <HAL_DMA_Init+0x65c>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d06d      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a5c      	ldr	r2, [pc, #368]	; (800295c <HAL_DMA_Init+0x660>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d068      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5a      	ldr	r2, [pc, #360]	; (8002960 <HAL_DMA_Init+0x664>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d063      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a59      	ldr	r2, [pc, #356]	; (8002964 <HAL_DMA_Init+0x668>)
 8002800:	4293      	cmp	r3, r2
 8002802:	d05e      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a57      	ldr	r2, [pc, #348]	; (8002968 <HAL_DMA_Init+0x66c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d059      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4a56      	ldr	r2, [pc, #344]	; (800296c <HAL_DMA_Init+0x670>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d054      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a54      	ldr	r2, [pc, #336]	; (8002970 <HAL_DMA_Init+0x674>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d04f      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a53      	ldr	r2, [pc, #332]	; (8002974 <HAL_DMA_Init+0x678>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d04a      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a51      	ldr	r2, [pc, #324]	; (8002978 <HAL_DMA_Init+0x67c>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d045      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a50      	ldr	r2, [pc, #320]	; (800297c <HAL_DMA_Init+0x680>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d040      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a4e      	ldr	r2, [pc, #312]	; (8002980 <HAL_DMA_Init+0x684>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03b      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a4d      	ldr	r2, [pc, #308]	; (8002984 <HAL_DMA_Init+0x688>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d036      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a4b      	ldr	r2, [pc, #300]	; (8002988 <HAL_DMA_Init+0x68c>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d031      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a4a      	ldr	r2, [pc, #296]	; (800298c <HAL_DMA_Init+0x690>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d02c      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a48      	ldr	r2, [pc, #288]	; (8002990 <HAL_DMA_Init+0x694>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d027      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a47      	ldr	r2, [pc, #284]	; (8002994 <HAL_DMA_Init+0x698>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d022      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a45      	ldr	r2, [pc, #276]	; (8002998 <HAL_DMA_Init+0x69c>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d01d      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a44      	ldr	r2, [pc, #272]	; (800299c <HAL_DMA_Init+0x6a0>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d018      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4a42      	ldr	r2, [pc, #264]	; (80029a0 <HAL_DMA_Init+0x6a4>)
 8002896:	4293      	cmp	r3, r2
 8002898:	d013      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	4a41      	ldr	r2, [pc, #260]	; (80029a4 <HAL_DMA_Init+0x6a8>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d00e      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a3f      	ldr	r2, [pc, #252]	; (80029a8 <HAL_DMA_Init+0x6ac>)
 80028aa:	4293      	cmp	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a3e      	ldr	r2, [pc, #248]	; (80029ac <HAL_DMA_Init+0x6b0>)
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d004      	beq.n	80028c2 <HAL_DMA_Init+0x5c6>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a3c      	ldr	r2, [pc, #240]	; (80029b0 <HAL_DMA_Init+0x6b4>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d101      	bne.n	80028c6 <HAL_DMA_Init+0x5ca>
 80028c2:	2301      	movs	r3, #1
 80028c4:	e000      	b.n	80028c8 <HAL_DMA_Init+0x5cc>
 80028c6:	2300      	movs	r3, #0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 fe2d 	bl	800452c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b80      	cmp	r3, #128	; 0x80
 80028d8:	d102      	bne.n	80028e0 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80028f4:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d010      	beq.n	8002920 <HAL_DMA_Init+0x624>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	685b      	ldr	r3, [r3, #4]
 8002902:	2b08      	cmp	r3, #8
 8002904:	d80c      	bhi.n	8002920 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f001 feaa 	bl	8004660 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002910:	2200      	movs	r2, #0
 8002912:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	e008      	b.n	8002932 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2200      	movs	r2, #0
 8002924:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	2200      	movs	r2, #0
 800292a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3718      	adds	r7, #24
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	a7fdabf8 	.word	0xa7fdabf8
 8002950:	cccccccd 	.word	0xcccccccd
 8002954:	40020010 	.word	0x40020010
 8002958:	40020028 	.word	0x40020028
 800295c:	40020040 	.word	0x40020040
 8002960:	40020058 	.word	0x40020058
 8002964:	40020070 	.word	0x40020070
 8002968:	40020088 	.word	0x40020088
 800296c:	400200a0 	.word	0x400200a0
 8002970:	400200b8 	.word	0x400200b8
 8002974:	40020410 	.word	0x40020410
 8002978:	40020428 	.word	0x40020428
 800297c:	40020440 	.word	0x40020440
 8002980:	40020458 	.word	0x40020458
 8002984:	40020470 	.word	0x40020470
 8002988:	40020488 	.word	0x40020488
 800298c:	400204a0 	.word	0x400204a0
 8002990:	400204b8 	.word	0x400204b8
 8002994:	58025408 	.word	0x58025408
 8002998:	5802541c 	.word	0x5802541c
 800299c:	58025430 	.word	0x58025430
 80029a0:	58025444 	.word	0x58025444
 80029a4:	58025458 	.word	0x58025458
 80029a8:	5802546c 	.word	0x5802546c
 80029ac:	58025480 	.word	0x58025480
 80029b0:	58025494 	.word	0x58025494

080029b4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80029bc:	f7ff fb3e 	bl	800203c <HAL_GetTick>
 80029c0:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d101      	bne.n	80029cc <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e2dc      	b.n	8002f86 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d008      	beq.n	80029ea <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2280      	movs	r2, #128	; 0x80
 80029dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e2cd      	b.n	8002f86 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a76      	ldr	r2, [pc, #472]	; (8002bc8 <HAL_DMA_Abort+0x214>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d04a      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a74      	ldr	r2, [pc, #464]	; (8002bcc <HAL_DMA_Abort+0x218>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d045      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a73      	ldr	r2, [pc, #460]	; (8002bd0 <HAL_DMA_Abort+0x21c>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d040      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a71      	ldr	r2, [pc, #452]	; (8002bd4 <HAL_DMA_Abort+0x220>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d03b      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a70      	ldr	r2, [pc, #448]	; (8002bd8 <HAL_DMA_Abort+0x224>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d036      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a6e      	ldr	r2, [pc, #440]	; (8002bdc <HAL_DMA_Abort+0x228>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d031      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a6d      	ldr	r2, [pc, #436]	; (8002be0 <HAL_DMA_Abort+0x22c>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d02c      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a6b      	ldr	r2, [pc, #428]	; (8002be4 <HAL_DMA_Abort+0x230>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d027      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a6a      	ldr	r2, [pc, #424]	; (8002be8 <HAL_DMA_Abort+0x234>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d022      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a68      	ldr	r2, [pc, #416]	; (8002bec <HAL_DMA_Abort+0x238>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d01d      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a67      	ldr	r2, [pc, #412]	; (8002bf0 <HAL_DMA_Abort+0x23c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d018      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a65      	ldr	r2, [pc, #404]	; (8002bf4 <HAL_DMA_Abort+0x240>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a64      	ldr	r2, [pc, #400]	; (8002bf8 <HAL_DMA_Abort+0x244>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d00e      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a62      	ldr	r2, [pc, #392]	; (8002bfc <HAL_DMA_Abort+0x248>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d009      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a61      	ldr	r2, [pc, #388]	; (8002c00 <HAL_DMA_Abort+0x24c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d004      	beq.n	8002a8a <HAL_DMA_Abort+0xd6>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a5f      	ldr	r2, [pc, #380]	; (8002c04 <HAL_DMA_Abort+0x250>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_DMA_Abort+0xda>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_DMA_Abort+0xdc>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d013      	beq.n	8002abc <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f022 021e 	bic.w	r2, r2, #30
 8002aa2:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	695a      	ldr	r2, [r3, #20]
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ab2:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	617b      	str	r3, [r7, #20]
 8002aba:	e00a      	b.n	8002ad2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681a      	ldr	r2, [r3, #0]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f022 020e 	bic.w	r2, r2, #14
 8002aca:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a3c      	ldr	r2, [pc, #240]	; (8002bc8 <HAL_DMA_Abort+0x214>)
 8002ad8:	4293      	cmp	r3, r2
 8002ada:	d072      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a3a      	ldr	r2, [pc, #232]	; (8002bcc <HAL_DMA_Abort+0x218>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d06d      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a39      	ldr	r2, [pc, #228]	; (8002bd0 <HAL_DMA_Abort+0x21c>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d068      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a37      	ldr	r2, [pc, #220]	; (8002bd4 <HAL_DMA_Abort+0x220>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d063      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a36      	ldr	r2, [pc, #216]	; (8002bd8 <HAL_DMA_Abort+0x224>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d05e      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a34      	ldr	r2, [pc, #208]	; (8002bdc <HAL_DMA_Abort+0x228>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d059      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a33      	ldr	r2, [pc, #204]	; (8002be0 <HAL_DMA_Abort+0x22c>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d054      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4a31      	ldr	r2, [pc, #196]	; (8002be4 <HAL_DMA_Abort+0x230>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d04f      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_DMA_Abort+0x234>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d04a      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a2e      	ldr	r2, [pc, #184]	; (8002bec <HAL_DMA_Abort+0x238>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d045      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a2d      	ldr	r2, [pc, #180]	; (8002bf0 <HAL_DMA_Abort+0x23c>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d040      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a2b      	ldr	r2, [pc, #172]	; (8002bf4 <HAL_DMA_Abort+0x240>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d03b      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4a2a      	ldr	r2, [pc, #168]	; (8002bf8 <HAL_DMA_Abort+0x244>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d036      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4a28      	ldr	r2, [pc, #160]	; (8002bfc <HAL_DMA_Abort+0x248>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d031      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a27      	ldr	r2, [pc, #156]	; (8002c00 <HAL_DMA_Abort+0x24c>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d02c      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4a25      	ldr	r2, [pc, #148]	; (8002c04 <HAL_DMA_Abort+0x250>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d027      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a24      	ldr	r2, [pc, #144]	; (8002c08 <HAL_DMA_Abort+0x254>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d022      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	4a22      	ldr	r2, [pc, #136]	; (8002c0c <HAL_DMA_Abort+0x258>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d01d      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4a21      	ldr	r2, [pc, #132]	; (8002c10 <HAL_DMA_Abort+0x25c>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d018      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a1f      	ldr	r2, [pc, #124]	; (8002c14 <HAL_DMA_Abort+0x260>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d013      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1e      	ldr	r2, [pc, #120]	; (8002c18 <HAL_DMA_Abort+0x264>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	d00e      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a1c      	ldr	r2, [pc, #112]	; (8002c1c <HAL_DMA_Abort+0x268>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d009      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a1b      	ldr	r2, [pc, #108]	; (8002c20 <HAL_DMA_Abort+0x26c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d004      	beq.n	8002bc2 <HAL_DMA_Abort+0x20e>
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a19      	ldr	r2, [pc, #100]	; (8002c24 <HAL_DMA_Abort+0x270>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d132      	bne.n	8002c28 <HAL_DMA_Abort+0x274>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e031      	b.n	8002c2a <HAL_DMA_Abort+0x276>
 8002bc6:	bf00      	nop
 8002bc8:	40020010 	.word	0x40020010
 8002bcc:	40020028 	.word	0x40020028
 8002bd0:	40020040 	.word	0x40020040
 8002bd4:	40020058 	.word	0x40020058
 8002bd8:	40020070 	.word	0x40020070
 8002bdc:	40020088 	.word	0x40020088
 8002be0:	400200a0 	.word	0x400200a0
 8002be4:	400200b8 	.word	0x400200b8
 8002be8:	40020410 	.word	0x40020410
 8002bec:	40020428 	.word	0x40020428
 8002bf0:	40020440 	.word	0x40020440
 8002bf4:	40020458 	.word	0x40020458
 8002bf8:	40020470 	.word	0x40020470
 8002bfc:	40020488 	.word	0x40020488
 8002c00:	400204a0 	.word	0x400204a0
 8002c04:	400204b8 	.word	0x400204b8
 8002c08:	58025408 	.word	0x58025408
 8002c0c:	5802541c 	.word	0x5802541c
 8002c10:	58025430 	.word	0x58025430
 8002c14:	58025444 	.word	0x58025444
 8002c18:	58025458 	.word	0x58025458
 8002c1c:	5802546c 	.word	0x5802546c
 8002c20:	58025480 	.word	0x58025480
 8002c24:	58025494 	.word	0x58025494
 8002c28:	2300      	movs	r3, #0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d007      	beq.n	8002c3e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c32:	681a      	ldr	r2, [r3, #0]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c38:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c3c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a6d      	ldr	r2, [pc, #436]	; (8002df8 <HAL_DMA_Abort+0x444>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d04a      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	4a6b      	ldr	r2, [pc, #428]	; (8002dfc <HAL_DMA_Abort+0x448>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d045      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6a      	ldr	r2, [pc, #424]	; (8002e00 <HAL_DMA_Abort+0x44c>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d040      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a68      	ldr	r2, [pc, #416]	; (8002e04 <HAL_DMA_Abort+0x450>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d03b      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_DMA_Abort+0x454>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d036      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a65      	ldr	r2, [pc, #404]	; (8002e0c <HAL_DMA_Abort+0x458>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d031      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a64      	ldr	r2, [pc, #400]	; (8002e10 <HAL_DMA_Abort+0x45c>)
 8002c80:	4293      	cmp	r3, r2
 8002c82:	d02c      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a62      	ldr	r2, [pc, #392]	; (8002e14 <HAL_DMA_Abort+0x460>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d027      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a61      	ldr	r2, [pc, #388]	; (8002e18 <HAL_DMA_Abort+0x464>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d022      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4a5f      	ldr	r2, [pc, #380]	; (8002e1c <HAL_DMA_Abort+0x468>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d01d      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a5e      	ldr	r2, [pc, #376]	; (8002e20 <HAL_DMA_Abort+0x46c>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d018      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a5c      	ldr	r2, [pc, #368]	; (8002e24 <HAL_DMA_Abort+0x470>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d013      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a5b      	ldr	r2, [pc, #364]	; (8002e28 <HAL_DMA_Abort+0x474>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d00e      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a59      	ldr	r2, [pc, #356]	; (8002e2c <HAL_DMA_Abort+0x478>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d009      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a58      	ldr	r2, [pc, #352]	; (8002e30 <HAL_DMA_Abort+0x47c>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d004      	beq.n	8002cde <HAL_DMA_Abort+0x32a>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a56      	ldr	r2, [pc, #344]	; (8002e34 <HAL_DMA_Abort+0x480>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d108      	bne.n	8002cf0 <HAL_DMA_Abort+0x33c>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f022 0201 	bic.w	r2, r2, #1
 8002cec:	601a      	str	r2, [r3, #0]
 8002cee:	e007      	b.n	8002d00 <HAL_DMA_Abort+0x34c>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f022 0201 	bic.w	r2, r2, #1
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d00:	e013      	b.n	8002d2a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d02:	f7ff f99b 	bl	800203c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b05      	cmp	r3, #5
 8002d0e:	d90c      	bls.n	8002d2a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2220      	movs	r2, #32
 8002d14:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2203      	movs	r2, #3
 8002d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e12d      	b.n	8002f86 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d1e5      	bne.n	8002d02 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a2f      	ldr	r2, [pc, #188]	; (8002df8 <HAL_DMA_Abort+0x444>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d04a      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <HAL_DMA_Abort+0x448>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d045      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <HAL_DMA_Abort+0x44c>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d040      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a2a      	ldr	r2, [pc, #168]	; (8002e04 <HAL_DMA_Abort+0x450>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d03b      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a29      	ldr	r2, [pc, #164]	; (8002e08 <HAL_DMA_Abort+0x454>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d036      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a27      	ldr	r2, [pc, #156]	; (8002e0c <HAL_DMA_Abort+0x458>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a26      	ldr	r2, [pc, #152]	; (8002e10 <HAL_DMA_Abort+0x45c>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d02c      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a24      	ldr	r2, [pc, #144]	; (8002e14 <HAL_DMA_Abort+0x460>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d027      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a23      	ldr	r2, [pc, #140]	; (8002e18 <HAL_DMA_Abort+0x464>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d022      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <HAL_DMA_Abort+0x468>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d01d      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a20      	ldr	r2, [pc, #128]	; (8002e20 <HAL_DMA_Abort+0x46c>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d018      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a1e      	ldr	r2, [pc, #120]	; (8002e24 <HAL_DMA_Abort+0x470>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d013      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a1d      	ldr	r2, [pc, #116]	; (8002e28 <HAL_DMA_Abort+0x474>)
 8002db4:	4293      	cmp	r3, r2
 8002db6:	d00e      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a1b      	ldr	r2, [pc, #108]	; (8002e2c <HAL_DMA_Abort+0x478>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d009      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a1a      	ldr	r2, [pc, #104]	; (8002e30 <HAL_DMA_Abort+0x47c>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d004      	beq.n	8002dd6 <HAL_DMA_Abort+0x422>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a18      	ldr	r2, [pc, #96]	; (8002e34 <HAL_DMA_Abort+0x480>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_DMA_Abort+0x426>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_DMA_Abort+0x428>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d02b      	beq.n	8002e38 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002de4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dea:	f003 031f 	and.w	r3, r3, #31
 8002dee:	223f      	movs	r2, #63	; 0x3f
 8002df0:	409a      	lsls	r2, r3
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	609a      	str	r2, [r3, #8]
 8002df6:	e02a      	b.n	8002e4e <HAL_DMA_Abort+0x49a>
 8002df8:	40020010 	.word	0x40020010
 8002dfc:	40020028 	.word	0x40020028
 8002e00:	40020040 	.word	0x40020040
 8002e04:	40020058 	.word	0x40020058
 8002e08:	40020070 	.word	0x40020070
 8002e0c:	40020088 	.word	0x40020088
 8002e10:	400200a0 	.word	0x400200a0
 8002e14:	400200b8 	.word	0x400200b8
 8002e18:	40020410 	.word	0x40020410
 8002e1c:	40020428 	.word	0x40020428
 8002e20:	40020440 	.word	0x40020440
 8002e24:	40020458 	.word	0x40020458
 8002e28:	40020470 	.word	0x40020470
 8002e2c:	40020488 	.word	0x40020488
 8002e30:	400204a0 	.word	0x400204a0
 8002e34:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e3c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	f003 031f 	and.w	r3, r3, #31
 8002e46:	2201      	movs	r2, #1
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a4f      	ldr	r2, [pc, #316]	; (8002f90 <HAL_DMA_Abort+0x5dc>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d072      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a4d      	ldr	r2, [pc, #308]	; (8002f94 <HAL_DMA_Abort+0x5e0>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d06d      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a4c      	ldr	r2, [pc, #304]	; (8002f98 <HAL_DMA_Abort+0x5e4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d068      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a4a      	ldr	r2, [pc, #296]	; (8002f9c <HAL_DMA_Abort+0x5e8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d063      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a49      	ldr	r2, [pc, #292]	; (8002fa0 <HAL_DMA_Abort+0x5ec>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d05e      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a47      	ldr	r2, [pc, #284]	; (8002fa4 <HAL_DMA_Abort+0x5f0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d059      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a46      	ldr	r2, [pc, #280]	; (8002fa8 <HAL_DMA_Abort+0x5f4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d054      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a44      	ldr	r2, [pc, #272]	; (8002fac <HAL_DMA_Abort+0x5f8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d04f      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a43      	ldr	r2, [pc, #268]	; (8002fb0 <HAL_DMA_Abort+0x5fc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d04a      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a41      	ldr	r2, [pc, #260]	; (8002fb4 <HAL_DMA_Abort+0x600>)
 8002eae:	4293      	cmp	r3, r2
 8002eb0:	d045      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a40      	ldr	r2, [pc, #256]	; (8002fb8 <HAL_DMA_Abort+0x604>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d040      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a3e      	ldr	r2, [pc, #248]	; (8002fbc <HAL_DMA_Abort+0x608>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d03b      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a3d      	ldr	r2, [pc, #244]	; (8002fc0 <HAL_DMA_Abort+0x60c>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d036      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a3b      	ldr	r2, [pc, #236]	; (8002fc4 <HAL_DMA_Abort+0x610>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d031      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a3a      	ldr	r2, [pc, #232]	; (8002fc8 <HAL_DMA_Abort+0x614>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d02c      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <HAL_DMA_Abort+0x618>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d027      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a37      	ldr	r2, [pc, #220]	; (8002fd0 <HAL_DMA_Abort+0x61c>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d022      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a35      	ldr	r2, [pc, #212]	; (8002fd4 <HAL_DMA_Abort+0x620>)
 8002efe:	4293      	cmp	r3, r2
 8002f00:	d01d      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4a34      	ldr	r2, [pc, #208]	; (8002fd8 <HAL_DMA_Abort+0x624>)
 8002f08:	4293      	cmp	r3, r2
 8002f0a:	d018      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a32      	ldr	r2, [pc, #200]	; (8002fdc <HAL_DMA_Abort+0x628>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a31      	ldr	r2, [pc, #196]	; (8002fe0 <HAL_DMA_Abort+0x62c>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00e      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <HAL_DMA_Abort+0x630>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d009      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a2e      	ldr	r2, [pc, #184]	; (8002fe8 <HAL_DMA_Abort+0x634>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d004      	beq.n	8002f3e <HAL_DMA_Abort+0x58a>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4a2c      	ldr	r2, [pc, #176]	; (8002fec <HAL_DMA_Abort+0x638>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d101      	bne.n	8002f42 <HAL_DMA_Abort+0x58e>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e000      	b.n	8002f44 <HAL_DMA_Abort+0x590>
 8002f42:	2300      	movs	r3, #0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d015      	beq.n	8002f74 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002f50:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00c      	beq.n	8002f74 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f64:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f68:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f72:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3718      	adds	r7, #24
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	40020010 	.word	0x40020010
 8002f94:	40020028 	.word	0x40020028
 8002f98:	40020040 	.word	0x40020040
 8002f9c:	40020058 	.word	0x40020058
 8002fa0:	40020070 	.word	0x40020070
 8002fa4:	40020088 	.word	0x40020088
 8002fa8:	400200a0 	.word	0x400200a0
 8002fac:	400200b8 	.word	0x400200b8
 8002fb0:	40020410 	.word	0x40020410
 8002fb4:	40020428 	.word	0x40020428
 8002fb8:	40020440 	.word	0x40020440
 8002fbc:	40020458 	.word	0x40020458
 8002fc0:	40020470 	.word	0x40020470
 8002fc4:	40020488 	.word	0x40020488
 8002fc8:	400204a0 	.word	0x400204a0
 8002fcc:	400204b8 	.word	0x400204b8
 8002fd0:	58025408 	.word	0x58025408
 8002fd4:	5802541c 	.word	0x5802541c
 8002fd8:	58025430 	.word	0x58025430
 8002fdc:	58025444 	.word	0x58025444
 8002fe0:	58025458 	.word	0x58025458
 8002fe4:	5802546c 	.word	0x5802546c
 8002fe8:	58025480 	.word	0x58025480
 8002fec:	58025494 	.word	0x58025494

08002ff0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e237      	b.n	8003472 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b02      	cmp	r3, #2
 800300c:	d004      	beq.n	8003018 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e22c      	b.n	8003472 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a5c      	ldr	r2, [pc, #368]	; (8003190 <HAL_DMA_Abort_IT+0x1a0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d04a      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a5b      	ldr	r2, [pc, #364]	; (8003194 <HAL_DMA_Abort_IT+0x1a4>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d045      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a59      	ldr	r2, [pc, #356]	; (8003198 <HAL_DMA_Abort_IT+0x1a8>)
 8003032:	4293      	cmp	r3, r2
 8003034:	d040      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a58      	ldr	r2, [pc, #352]	; (800319c <HAL_DMA_Abort_IT+0x1ac>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d03b      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a56      	ldr	r2, [pc, #344]	; (80031a0 <HAL_DMA_Abort_IT+0x1b0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d036      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a55      	ldr	r2, [pc, #340]	; (80031a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d031      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	4a53      	ldr	r2, [pc, #332]	; (80031a8 <HAL_DMA_Abort_IT+0x1b8>)
 800305a:	4293      	cmp	r3, r2
 800305c:	d02c      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a52      	ldr	r2, [pc, #328]	; (80031ac <HAL_DMA_Abort_IT+0x1bc>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d027      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a50      	ldr	r2, [pc, #320]	; (80031b0 <HAL_DMA_Abort_IT+0x1c0>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d022      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a4f      	ldr	r2, [pc, #316]	; (80031b4 <HAL_DMA_Abort_IT+0x1c4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d01d      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a4d      	ldr	r2, [pc, #308]	; (80031b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d018      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a4c      	ldr	r2, [pc, #304]	; (80031bc <HAL_DMA_Abort_IT+0x1cc>)
 800308c:	4293      	cmp	r3, r2
 800308e:	d013      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	4a4a      	ldr	r2, [pc, #296]	; (80031c0 <HAL_DMA_Abort_IT+0x1d0>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d00e      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a49      	ldr	r2, [pc, #292]	; (80031c4 <HAL_DMA_Abort_IT+0x1d4>)
 80030a0:	4293      	cmp	r3, r2
 80030a2:	d009      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a47      	ldr	r2, [pc, #284]	; (80031c8 <HAL_DMA_Abort_IT+0x1d8>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d004      	beq.n	80030b8 <HAL_DMA_Abort_IT+0xc8>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a46      	ldr	r2, [pc, #280]	; (80031cc <HAL_DMA_Abort_IT+0x1dc>)
 80030b4:	4293      	cmp	r3, r2
 80030b6:	d101      	bne.n	80030bc <HAL_DMA_Abort_IT+0xcc>
 80030b8:	2301      	movs	r3, #1
 80030ba:	e000      	b.n	80030be <HAL_DMA_Abort_IT+0xce>
 80030bc:	2300      	movs	r3, #0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	f000 8086 	beq.w	80031d0 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2204      	movs	r2, #4
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a2f      	ldr	r2, [pc, #188]	; (8003190 <HAL_DMA_Abort_IT+0x1a0>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d04a      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a2e      	ldr	r2, [pc, #184]	; (8003194 <HAL_DMA_Abort_IT+0x1a4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d045      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a2c      	ldr	r2, [pc, #176]	; (8003198 <HAL_DMA_Abort_IT+0x1a8>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d040      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a2b      	ldr	r2, [pc, #172]	; (800319c <HAL_DMA_Abort_IT+0x1ac>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d03b      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a29      	ldr	r2, [pc, #164]	; (80031a0 <HAL_DMA_Abort_IT+0x1b0>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d036      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a28      	ldr	r2, [pc, #160]	; (80031a4 <HAL_DMA_Abort_IT+0x1b4>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d031      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a26      	ldr	r2, [pc, #152]	; (80031a8 <HAL_DMA_Abort_IT+0x1b8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d02c      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a25      	ldr	r2, [pc, #148]	; (80031ac <HAL_DMA_Abort_IT+0x1bc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d027      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <HAL_DMA_Abort_IT+0x1c0>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d022      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a22      	ldr	r2, [pc, #136]	; (80031b4 <HAL_DMA_Abort_IT+0x1c4>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d01d      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a20      	ldr	r2, [pc, #128]	; (80031b8 <HAL_DMA_Abort_IT+0x1c8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d018      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1f      	ldr	r2, [pc, #124]	; (80031bc <HAL_DMA_Abort_IT+0x1cc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_DMA_Abort_IT+0x1d0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00e      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1c      	ldr	r2, [pc, #112]	; (80031c4 <HAL_DMA_Abort_IT+0x1d4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_DMA_Abort_IT+0x1d8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_DMA_Abort_IT+0x17c>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a19      	ldr	r2, [pc, #100]	; (80031cc <HAL_DMA_Abort_IT+0x1dc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d108      	bne.n	800317e <HAL_DMA_Abort_IT+0x18e>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	681a      	ldr	r2, [r3, #0]
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f022 0201 	bic.w	r2, r2, #1
 800317a:	601a      	str	r2, [r3, #0]
 800317c:	e178      	b.n	8003470 <HAL_DMA_Abort_IT+0x480>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0201 	bic.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
 800318e:	e16f      	b.n	8003470 <HAL_DMA_Abort_IT+0x480>
 8003190:	40020010 	.word	0x40020010
 8003194:	40020028 	.word	0x40020028
 8003198:	40020040 	.word	0x40020040
 800319c:	40020058 	.word	0x40020058
 80031a0:	40020070 	.word	0x40020070
 80031a4:	40020088 	.word	0x40020088
 80031a8:	400200a0 	.word	0x400200a0
 80031ac:	400200b8 	.word	0x400200b8
 80031b0:	40020410 	.word	0x40020410
 80031b4:	40020428 	.word	0x40020428
 80031b8:	40020440 	.word	0x40020440
 80031bc:	40020458 	.word	0x40020458
 80031c0:	40020470 	.word	0x40020470
 80031c4:	40020488 	.word	0x40020488
 80031c8:	400204a0 	.word	0x400204a0
 80031cc:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f022 020e 	bic.w	r2, r2, #14
 80031de:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a6c      	ldr	r2, [pc, #432]	; (8003398 <HAL_DMA_Abort_IT+0x3a8>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d04a      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a6b      	ldr	r2, [pc, #428]	; (800339c <HAL_DMA_Abort_IT+0x3ac>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d045      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a69      	ldr	r2, [pc, #420]	; (80033a0 <HAL_DMA_Abort_IT+0x3b0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d040      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a68      	ldr	r2, [pc, #416]	; (80033a4 <HAL_DMA_Abort_IT+0x3b4>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d03b      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a66      	ldr	r2, [pc, #408]	; (80033a8 <HAL_DMA_Abort_IT+0x3b8>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d036      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a65      	ldr	r2, [pc, #404]	; (80033ac <HAL_DMA_Abort_IT+0x3bc>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d031      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a63      	ldr	r2, [pc, #396]	; (80033b0 <HAL_DMA_Abort_IT+0x3c0>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d02c      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a62      	ldr	r2, [pc, #392]	; (80033b4 <HAL_DMA_Abort_IT+0x3c4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d027      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a60      	ldr	r2, [pc, #384]	; (80033b8 <HAL_DMA_Abort_IT+0x3c8>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d022      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a5f      	ldr	r2, [pc, #380]	; (80033bc <HAL_DMA_Abort_IT+0x3cc>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d01d      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a5d      	ldr	r2, [pc, #372]	; (80033c0 <HAL_DMA_Abort_IT+0x3d0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d018      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a5c      	ldr	r2, [pc, #368]	; (80033c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d013      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a5a      	ldr	r2, [pc, #360]	; (80033c8 <HAL_DMA_Abort_IT+0x3d8>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d00e      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a59      	ldr	r2, [pc, #356]	; (80033cc <HAL_DMA_Abort_IT+0x3dc>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d009      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a57      	ldr	r2, [pc, #348]	; (80033d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d004      	beq.n	8003280 <HAL_DMA_Abort_IT+0x290>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a56      	ldr	r2, [pc, #344]	; (80033d4 <HAL_DMA_Abort_IT+0x3e4>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d108      	bne.n	8003292 <HAL_DMA_Abort_IT+0x2a2>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f022 0201 	bic.w	r2, r2, #1
 800328e:	601a      	str	r2, [r3, #0]
 8003290:	e007      	b.n	80032a2 <HAL_DMA_Abort_IT+0x2b2>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a3c      	ldr	r2, [pc, #240]	; (8003398 <HAL_DMA_Abort_IT+0x3a8>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d072      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a3a      	ldr	r2, [pc, #232]	; (800339c <HAL_DMA_Abort_IT+0x3ac>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d06d      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a39      	ldr	r2, [pc, #228]	; (80033a0 <HAL_DMA_Abort_IT+0x3b0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d068      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a37      	ldr	r2, [pc, #220]	; (80033a4 <HAL_DMA_Abort_IT+0x3b4>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d063      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a36      	ldr	r2, [pc, #216]	; (80033a8 <HAL_DMA_Abort_IT+0x3b8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d05e      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a34      	ldr	r2, [pc, #208]	; (80033ac <HAL_DMA_Abort_IT+0x3bc>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d059      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a33      	ldr	r2, [pc, #204]	; (80033b0 <HAL_DMA_Abort_IT+0x3c0>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d054      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_DMA_Abort_IT+0x3c4>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d04f      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a30      	ldr	r2, [pc, #192]	; (80033b8 <HAL_DMA_Abort_IT+0x3c8>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d04a      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a2e      	ldr	r2, [pc, #184]	; (80033bc <HAL_DMA_Abort_IT+0x3cc>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d045      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a2d      	ldr	r2, [pc, #180]	; (80033c0 <HAL_DMA_Abort_IT+0x3d0>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d040      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	4a2b      	ldr	r2, [pc, #172]	; (80033c4 <HAL_DMA_Abort_IT+0x3d4>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d03b      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a2a      	ldr	r2, [pc, #168]	; (80033c8 <HAL_DMA_Abort_IT+0x3d8>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d036      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a28      	ldr	r2, [pc, #160]	; (80033cc <HAL_DMA_Abort_IT+0x3dc>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d031      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a27      	ldr	r2, [pc, #156]	; (80033d0 <HAL_DMA_Abort_IT+0x3e0>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d02c      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a25      	ldr	r2, [pc, #148]	; (80033d4 <HAL_DMA_Abort_IT+0x3e4>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d027      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a24      	ldr	r2, [pc, #144]	; (80033d8 <HAL_DMA_Abort_IT+0x3e8>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d022      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a22      	ldr	r2, [pc, #136]	; (80033dc <HAL_DMA_Abort_IT+0x3ec>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d01d      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a21      	ldr	r2, [pc, #132]	; (80033e0 <HAL_DMA_Abort_IT+0x3f0>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d018      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a1f      	ldr	r2, [pc, #124]	; (80033e4 <HAL_DMA_Abort_IT+0x3f4>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d013      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	4a1e      	ldr	r2, [pc, #120]	; (80033e8 <HAL_DMA_Abort_IT+0x3f8>)
 8003370:	4293      	cmp	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <HAL_DMA_Abort_IT+0x3fc>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d009      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <HAL_DMA_Abort_IT+0x400>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d004      	beq.n	8003392 <HAL_DMA_Abort_IT+0x3a2>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a19      	ldr	r2, [pc, #100]	; (80033f4 <HAL_DMA_Abort_IT+0x404>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d132      	bne.n	80033f8 <HAL_DMA_Abort_IT+0x408>
 8003392:	2301      	movs	r3, #1
 8003394:	e031      	b.n	80033fa <HAL_DMA_Abort_IT+0x40a>
 8003396:	bf00      	nop
 8003398:	40020010 	.word	0x40020010
 800339c:	40020028 	.word	0x40020028
 80033a0:	40020040 	.word	0x40020040
 80033a4:	40020058 	.word	0x40020058
 80033a8:	40020070 	.word	0x40020070
 80033ac:	40020088 	.word	0x40020088
 80033b0:	400200a0 	.word	0x400200a0
 80033b4:	400200b8 	.word	0x400200b8
 80033b8:	40020410 	.word	0x40020410
 80033bc:	40020428 	.word	0x40020428
 80033c0:	40020440 	.word	0x40020440
 80033c4:	40020458 	.word	0x40020458
 80033c8:	40020470 	.word	0x40020470
 80033cc:	40020488 	.word	0x40020488
 80033d0:	400204a0 	.word	0x400204a0
 80033d4:	400204b8 	.word	0x400204b8
 80033d8:	58025408 	.word	0x58025408
 80033dc:	5802541c 	.word	0x5802541c
 80033e0:	58025430 	.word	0x58025430
 80033e4:	58025444 	.word	0x58025444
 80033e8:	58025458 	.word	0x58025458
 80033ec:	5802546c 	.word	0x5802546c
 80033f0:	58025480 	.word	0x58025480
 80033f4:	58025494 	.word	0x58025494
 80033f8:	2300      	movs	r3, #0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d028      	beq.n	8003450 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003408:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800340c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003412:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003418:	f003 031f 	and.w	r3, r3, #31
 800341c:	2201      	movs	r2, #1
 800341e:	409a      	lsls	r2, r3
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800342c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00c      	beq.n	8003450 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800343a:	681a      	ldr	r2, [r3, #0]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003444:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800344e:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003464:	2b00      	cmp	r3, #0
 8003466:	d003      	beq.n	8003470 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003470:	2300      	movs	r3, #0
}
 8003472:	4618      	mov	r0, r3
 8003474:	3710      	adds	r7, #16
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop

0800347c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b08a      	sub	sp, #40	; 0x28
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003488:	4b67      	ldr	r3, [pc, #412]	; (8003628 <HAL_DMA_IRQHandler+0x1ac>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a67      	ldr	r2, [pc, #412]	; (800362c <HAL_DMA_IRQHandler+0x1b0>)
 800348e:	fba2 2303 	umull	r2, r3, r2, r3
 8003492:	0a9b      	lsrs	r3, r3, #10
 8003494:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800349a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034a0:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a5f      	ldr	r2, [pc, #380]	; (8003630 <HAL_DMA_IRQHandler+0x1b4>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a5d      	ldr	r2, [pc, #372]	; (8003634 <HAL_DMA_IRQHandler+0x1b8>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a5c      	ldr	r2, [pc, #368]	; (8003638 <HAL_DMA_IRQHandler+0x1bc>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a5a      	ldr	r2, [pc, #360]	; (800363c <HAL_DMA_IRQHandler+0x1c0>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a59      	ldr	r2, [pc, #356]	; (8003640 <HAL_DMA_IRQHandler+0x1c4>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a57      	ldr	r2, [pc, #348]	; (8003644 <HAL_DMA_IRQHandler+0x1c8>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a56      	ldr	r2, [pc, #344]	; (8003648 <HAL_DMA_IRQHandler+0x1cc>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a54      	ldr	r2, [pc, #336]	; (800364c <HAL_DMA_IRQHandler+0x1d0>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a53      	ldr	r2, [pc, #332]	; (8003650 <HAL_DMA_IRQHandler+0x1d4>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a51      	ldr	r2, [pc, #324]	; (8003654 <HAL_DMA_IRQHandler+0x1d8>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a50      	ldr	r2, [pc, #320]	; (8003658 <HAL_DMA_IRQHandler+0x1dc>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a4e      	ldr	r2, [pc, #312]	; (800365c <HAL_DMA_IRQHandler+0x1e0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a4d      	ldr	r2, [pc, #308]	; (8003660 <HAL_DMA_IRQHandler+0x1e4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a4b      	ldr	r2, [pc, #300]	; (8003664 <HAL_DMA_IRQHandler+0x1e8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a4a      	ldr	r2, [pc, #296]	; (8003668 <HAL_DMA_IRQHandler+0x1ec>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_IRQHandler+0xd2>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a48      	ldr	r2, [pc, #288]	; (800366c <HAL_DMA_IRQHandler+0x1f0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d101      	bne.n	8003552 <HAL_DMA_IRQHandler+0xd6>
 800354e:	2301      	movs	r3, #1
 8003550:	e000      	b.n	8003554 <HAL_DMA_IRQHandler+0xd8>
 8003552:	2300      	movs	r3, #0
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 842b 	beq.w	8003db0 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2208      	movs	r2, #8
 8003564:	409a      	lsls	r2, r3
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	f000 80a2 	beq.w	80036b4 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a2e      	ldr	r2, [pc, #184]	; (8003630 <HAL_DMA_IRQHandler+0x1b4>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d04a      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2d      	ldr	r2, [pc, #180]	; (8003634 <HAL_DMA_IRQHandler+0x1b8>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d045      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a2b      	ldr	r2, [pc, #172]	; (8003638 <HAL_DMA_IRQHandler+0x1bc>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d040      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a2a      	ldr	r2, [pc, #168]	; (800363c <HAL_DMA_IRQHandler+0x1c0>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d03b      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a28      	ldr	r2, [pc, #160]	; (8003640 <HAL_DMA_IRQHandler+0x1c4>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d036      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a27      	ldr	r2, [pc, #156]	; (8003644 <HAL_DMA_IRQHandler+0x1c8>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d031      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a25      	ldr	r2, [pc, #148]	; (8003648 <HAL_DMA_IRQHandler+0x1cc>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d02c      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a24      	ldr	r2, [pc, #144]	; (800364c <HAL_DMA_IRQHandler+0x1d0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d027      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4a22      	ldr	r2, [pc, #136]	; (8003650 <HAL_DMA_IRQHandler+0x1d4>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d022      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4a21      	ldr	r2, [pc, #132]	; (8003654 <HAL_DMA_IRQHandler+0x1d8>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d01d      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a1f      	ldr	r2, [pc, #124]	; (8003658 <HAL_DMA_IRQHandler+0x1dc>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d018      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a1e      	ldr	r2, [pc, #120]	; (800365c <HAL_DMA_IRQHandler+0x1e0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d013      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4a1c      	ldr	r2, [pc, #112]	; (8003660 <HAL_DMA_IRQHandler+0x1e4>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d00e      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a1b      	ldr	r2, [pc, #108]	; (8003664 <HAL_DMA_IRQHandler+0x1e8>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d009      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a19      	ldr	r2, [pc, #100]	; (8003668 <HAL_DMA_IRQHandler+0x1ec>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d004      	beq.n	8003610 <HAL_DMA_IRQHandler+0x194>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a18      	ldr	r2, [pc, #96]	; (800366c <HAL_DMA_IRQHandler+0x1f0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d12f      	bne.n	8003670 <HAL_DMA_IRQHandler+0x1f4>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	bf14      	ite	ne
 800361e:	2301      	movne	r3, #1
 8003620:	2300      	moveq	r3, #0
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e02e      	b.n	8003684 <HAL_DMA_IRQHandler+0x208>
 8003626:	bf00      	nop
 8003628:	24000000 	.word	0x24000000
 800362c:	1b4e81b5 	.word	0x1b4e81b5
 8003630:	40020010 	.word	0x40020010
 8003634:	40020028 	.word	0x40020028
 8003638:	40020040 	.word	0x40020040
 800363c:	40020058 	.word	0x40020058
 8003640:	40020070 	.word	0x40020070
 8003644:	40020088 	.word	0x40020088
 8003648:	400200a0 	.word	0x400200a0
 800364c:	400200b8 	.word	0x400200b8
 8003650:	40020410 	.word	0x40020410
 8003654:	40020428 	.word	0x40020428
 8003658:	40020440 	.word	0x40020440
 800365c:	40020458 	.word	0x40020458
 8003660:	40020470 	.word	0x40020470
 8003664:	40020488 	.word	0x40020488
 8003668:	400204a0 	.word	0x400204a0
 800366c:	400204b8 	.word	0x400204b8
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	bf14      	ite	ne
 800367e:	2301      	movne	r3, #1
 8003680:	2300      	moveq	r3, #0
 8003682:	b2db      	uxtb	r3, r3
 8003684:	2b00      	cmp	r3, #0
 8003686:	d015      	beq.n	80036b4 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f022 0204 	bic.w	r2, r2, #4
 8003696:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800369c:	f003 031f 	and.w	r3, r3, #31
 80036a0:	2208      	movs	r2, #8
 80036a2:	409a      	lsls	r2, r3
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036ac:	f043 0201 	orr.w	r2, r3, #1
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	f003 031f 	and.w	r3, r3, #31
 80036bc:	69ba      	ldr	r2, [r7, #24]
 80036be:	fa22 f303 	lsr.w	r3, r2, r3
 80036c2:	f003 0301 	and.w	r3, r3, #1
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d06e      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	4a69      	ldr	r2, [pc, #420]	; (8003874 <HAL_DMA_IRQHandler+0x3f8>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d04a      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	4a67      	ldr	r2, [pc, #412]	; (8003878 <HAL_DMA_IRQHandler+0x3fc>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d045      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a66      	ldr	r2, [pc, #408]	; (800387c <HAL_DMA_IRQHandler+0x400>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d040      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a64      	ldr	r2, [pc, #400]	; (8003880 <HAL_DMA_IRQHandler+0x404>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d03b      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4a63      	ldr	r2, [pc, #396]	; (8003884 <HAL_DMA_IRQHandler+0x408>)
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d036      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a61      	ldr	r2, [pc, #388]	; (8003888 <HAL_DMA_IRQHandler+0x40c>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d031      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a60      	ldr	r2, [pc, #384]	; (800388c <HAL_DMA_IRQHandler+0x410>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d02c      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a5e      	ldr	r2, [pc, #376]	; (8003890 <HAL_DMA_IRQHandler+0x414>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d027      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a5d      	ldr	r2, [pc, #372]	; (8003894 <HAL_DMA_IRQHandler+0x418>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d022      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4a5b      	ldr	r2, [pc, #364]	; (8003898 <HAL_DMA_IRQHandler+0x41c>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d01d      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5a      	ldr	r2, [pc, #360]	; (800389c <HAL_DMA_IRQHandler+0x420>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d018      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a58      	ldr	r2, [pc, #352]	; (80038a0 <HAL_DMA_IRQHandler+0x424>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d013      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a57      	ldr	r2, [pc, #348]	; (80038a4 <HAL_DMA_IRQHandler+0x428>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d00e      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a55      	ldr	r2, [pc, #340]	; (80038a8 <HAL_DMA_IRQHandler+0x42c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d009      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a54      	ldr	r2, [pc, #336]	; (80038ac <HAL_DMA_IRQHandler+0x430>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d004      	beq.n	800376a <HAL_DMA_IRQHandler+0x2ee>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a52      	ldr	r2, [pc, #328]	; (80038b0 <HAL_DMA_IRQHandler+0x434>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d10a      	bne.n	8003780 <HAL_DMA_IRQHandler+0x304>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003774:	2b00      	cmp	r3, #0
 8003776:	bf14      	ite	ne
 8003778:	2301      	movne	r3, #1
 800377a:	2300      	moveq	r3, #0
 800377c:	b2db      	uxtb	r3, r3
 800377e:	e003      	b.n	8003788 <HAL_DMA_IRQHandler+0x30c>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2300      	movs	r3, #0
 8003788:	2b00      	cmp	r3, #0
 800378a:	d00d      	beq.n	80037a8 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003790:	f003 031f 	and.w	r3, r3, #31
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037a0:	f043 0202 	orr.w	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ac:	f003 031f 	and.w	r3, r3, #31
 80037b0:	2204      	movs	r2, #4
 80037b2:	409a      	lsls	r2, r3
 80037b4:	69bb      	ldr	r3, [r7, #24]
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	f000 808f 	beq.w	80038dc <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a2c      	ldr	r2, [pc, #176]	; (8003874 <HAL_DMA_IRQHandler+0x3f8>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d04a      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a2a      	ldr	r2, [pc, #168]	; (8003878 <HAL_DMA_IRQHandler+0x3fc>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d045      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a29      	ldr	r2, [pc, #164]	; (800387c <HAL_DMA_IRQHandler+0x400>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d040      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a27      	ldr	r2, [pc, #156]	; (8003880 <HAL_DMA_IRQHandler+0x404>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d03b      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a26      	ldr	r2, [pc, #152]	; (8003884 <HAL_DMA_IRQHandler+0x408>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d036      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4a24      	ldr	r2, [pc, #144]	; (8003888 <HAL_DMA_IRQHandler+0x40c>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d031      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a23      	ldr	r2, [pc, #140]	; (800388c <HAL_DMA_IRQHandler+0x410>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d02c      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a21      	ldr	r2, [pc, #132]	; (8003890 <HAL_DMA_IRQHandler+0x414>)
 800380a:	4293      	cmp	r3, r2
 800380c:	d027      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a20      	ldr	r2, [pc, #128]	; (8003894 <HAL_DMA_IRQHandler+0x418>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d022      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a1e      	ldr	r2, [pc, #120]	; (8003898 <HAL_DMA_IRQHandler+0x41c>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d01d      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a1d      	ldr	r2, [pc, #116]	; (800389c <HAL_DMA_IRQHandler+0x420>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d018      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a1b      	ldr	r2, [pc, #108]	; (80038a0 <HAL_DMA_IRQHandler+0x424>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d013      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a1a      	ldr	r2, [pc, #104]	; (80038a4 <HAL_DMA_IRQHandler+0x428>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d00e      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a18      	ldr	r2, [pc, #96]	; (80038a8 <HAL_DMA_IRQHandler+0x42c>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a17      	ldr	r2, [pc, #92]	; (80038ac <HAL_DMA_IRQHandler+0x430>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_DMA_IRQHandler+0x3e2>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a15      	ldr	r2, [pc, #84]	; (80038b0 <HAL_DMA_IRQHandler+0x434>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d12a      	bne.n	80038b4 <HAL_DMA_IRQHandler+0x438>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	bf14      	ite	ne
 800386c:	2301      	movne	r3, #1
 800386e:	2300      	moveq	r3, #0
 8003870:	b2db      	uxtb	r3, r3
 8003872:	e023      	b.n	80038bc <HAL_DMA_IRQHandler+0x440>
 8003874:	40020010 	.word	0x40020010
 8003878:	40020028 	.word	0x40020028
 800387c:	40020040 	.word	0x40020040
 8003880:	40020058 	.word	0x40020058
 8003884:	40020070 	.word	0x40020070
 8003888:	40020088 	.word	0x40020088
 800388c:	400200a0 	.word	0x400200a0
 8003890:	400200b8 	.word	0x400200b8
 8003894:	40020410 	.word	0x40020410
 8003898:	40020428 	.word	0x40020428
 800389c:	40020440 	.word	0x40020440
 80038a0:	40020458 	.word	0x40020458
 80038a4:	40020470 	.word	0x40020470
 80038a8:	40020488 	.word	0x40020488
 80038ac:	400204a0 	.word	0x400204a0
 80038b0:	400204b8 	.word	0x400204b8
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2300      	movs	r3, #0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00d      	beq.n	80038dc <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c4:	f003 031f 	and.w	r3, r3, #31
 80038c8:	2204      	movs	r2, #4
 80038ca:	409a      	lsls	r2, r3
 80038cc:	6a3b      	ldr	r3, [r7, #32]
 80038ce:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038d4:	f043 0204 	orr.w	r2, r3, #4
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e0:	f003 031f 	and.w	r3, r3, #31
 80038e4:	2210      	movs	r2, #16
 80038e6:	409a      	lsls	r2, r3
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	4013      	ands	r3, r2
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	f000 80a6 	beq.w	8003a3e <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a85      	ldr	r2, [pc, #532]	; (8003b0c <HAL_DMA_IRQHandler+0x690>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d04a      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	4a83      	ldr	r2, [pc, #524]	; (8003b10 <HAL_DMA_IRQHandler+0x694>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d045      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a82      	ldr	r2, [pc, #520]	; (8003b14 <HAL_DMA_IRQHandler+0x698>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d040      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a80      	ldr	r2, [pc, #512]	; (8003b18 <HAL_DMA_IRQHandler+0x69c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d03b      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a7f      	ldr	r2, [pc, #508]	; (8003b1c <HAL_DMA_IRQHandler+0x6a0>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d036      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a7d      	ldr	r2, [pc, #500]	; (8003b20 <HAL_DMA_IRQHandler+0x6a4>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d031      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a7c      	ldr	r2, [pc, #496]	; (8003b24 <HAL_DMA_IRQHandler+0x6a8>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d02c      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a7a      	ldr	r2, [pc, #488]	; (8003b28 <HAL_DMA_IRQHandler+0x6ac>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d027      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a79      	ldr	r2, [pc, #484]	; (8003b2c <HAL_DMA_IRQHandler+0x6b0>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d022      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a77      	ldr	r2, [pc, #476]	; (8003b30 <HAL_DMA_IRQHandler+0x6b4>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d01d      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4a76      	ldr	r2, [pc, #472]	; (8003b34 <HAL_DMA_IRQHandler+0x6b8>)
 800395c:	4293      	cmp	r3, r2
 800395e:	d018      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a74      	ldr	r2, [pc, #464]	; (8003b38 <HAL_DMA_IRQHandler+0x6bc>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d013      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	4a73      	ldr	r2, [pc, #460]	; (8003b3c <HAL_DMA_IRQHandler+0x6c0>)
 8003970:	4293      	cmp	r3, r2
 8003972:	d00e      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a71      	ldr	r2, [pc, #452]	; (8003b40 <HAL_DMA_IRQHandler+0x6c4>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a70      	ldr	r2, [pc, #448]	; (8003b44 <HAL_DMA_IRQHandler+0x6c8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d004      	beq.n	8003992 <HAL_DMA_IRQHandler+0x516>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a6e      	ldr	r2, [pc, #440]	; (8003b48 <HAL_DMA_IRQHandler+0x6cc>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d10a      	bne.n	80039a8 <HAL_DMA_IRQHandler+0x52c>
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0308 	and.w	r3, r3, #8
 800399c:	2b00      	cmp	r3, #0
 800399e:	bf14      	ite	ne
 80039a0:	2301      	movne	r3, #1
 80039a2:	2300      	moveq	r3, #0
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	e009      	b.n	80039bc <HAL_DMA_IRQHandler+0x540>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0304 	and.w	r3, r3, #4
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	bf14      	ite	ne
 80039b6:	2301      	movne	r3, #1
 80039b8:	2300      	moveq	r3, #0
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d03e      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	2210      	movs	r2, #16
 80039ca:	409a      	lsls	r2, r3
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d018      	beq.n	8003a10 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d108      	bne.n	80039fe <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d024      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	4798      	blx	r3
 80039fc:	e01f      	b.n	8003a3e <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d01b      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	4798      	blx	r3
 8003a0e:	e016      	b.n	8003a3e <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d107      	bne.n	8003a2e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f022 0208 	bic.w	r2, r2, #8
 8003a2c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	2220      	movs	r2, #32
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	69bb      	ldr	r3, [r7, #24]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	f000 8110 	beq.w	8003c74 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a2c      	ldr	r2, [pc, #176]	; (8003b0c <HAL_DMA_IRQHandler+0x690>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d04a      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a2b      	ldr	r2, [pc, #172]	; (8003b10 <HAL_DMA_IRQHandler+0x694>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d045      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a29      	ldr	r2, [pc, #164]	; (8003b14 <HAL_DMA_IRQHandler+0x698>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	d040      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a28      	ldr	r2, [pc, #160]	; (8003b18 <HAL_DMA_IRQHandler+0x69c>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d03b      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a26      	ldr	r2, [pc, #152]	; (8003b1c <HAL_DMA_IRQHandler+0x6a0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d036      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a25      	ldr	r2, [pc, #148]	; (8003b20 <HAL_DMA_IRQHandler+0x6a4>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d031      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a23      	ldr	r2, [pc, #140]	; (8003b24 <HAL_DMA_IRQHandler+0x6a8>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d02c      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a22      	ldr	r2, [pc, #136]	; (8003b28 <HAL_DMA_IRQHandler+0x6ac>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d027      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a20      	ldr	r2, [pc, #128]	; (8003b2c <HAL_DMA_IRQHandler+0x6b0>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d022      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a1f      	ldr	r2, [pc, #124]	; (8003b30 <HAL_DMA_IRQHandler+0x6b4>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d01d      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a1d      	ldr	r2, [pc, #116]	; (8003b34 <HAL_DMA_IRQHandler+0x6b8>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d018      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <HAL_DMA_IRQHandler+0x6bc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d013      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	; (8003b3c <HAL_DMA_IRQHandler+0x6c0>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d00e      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a19      	ldr	r2, [pc, #100]	; (8003b40 <HAL_DMA_IRQHandler+0x6c4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d009      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a17      	ldr	r2, [pc, #92]	; (8003b44 <HAL_DMA_IRQHandler+0x6c8>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d004      	beq.n	8003af4 <HAL_DMA_IRQHandler+0x678>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a16      	ldr	r2, [pc, #88]	; (8003b48 <HAL_DMA_IRQHandler+0x6cc>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d12b      	bne.n	8003b4c <HAL_DMA_IRQHandler+0x6d0>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f003 0310 	and.w	r3, r3, #16
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bf14      	ite	ne
 8003b02:	2301      	movne	r3, #1
 8003b04:	2300      	moveq	r3, #0
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	e02a      	b.n	8003b60 <HAL_DMA_IRQHandler+0x6e4>
 8003b0a:	bf00      	nop
 8003b0c:	40020010 	.word	0x40020010
 8003b10:	40020028 	.word	0x40020028
 8003b14:	40020040 	.word	0x40020040
 8003b18:	40020058 	.word	0x40020058
 8003b1c:	40020070 	.word	0x40020070
 8003b20:	40020088 	.word	0x40020088
 8003b24:	400200a0 	.word	0x400200a0
 8003b28:	400200b8 	.word	0x400200b8
 8003b2c:	40020410 	.word	0x40020410
 8003b30:	40020428 	.word	0x40020428
 8003b34:	40020440 	.word	0x40020440
 8003b38:	40020458 	.word	0x40020458
 8003b3c:	40020470 	.word	0x40020470
 8003b40:	40020488 	.word	0x40020488
 8003b44:	400204a0 	.word	0x400204a0
 8003b48:	400204b8 	.word	0x400204b8
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0302 	and.w	r3, r3, #2
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	f000 8087 	beq.w	8003c74 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b6a:	f003 031f 	and.w	r3, r3, #31
 8003b6e:	2220      	movs	r2, #32
 8003b70:	409a      	lsls	r2, r3
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b7c:	b2db      	uxtb	r3, r3
 8003b7e:	2b04      	cmp	r3, #4
 8003b80:	d139      	bne.n	8003bf6 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f022 0216 	bic.w	r2, r2, #22
 8003b90:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	695a      	ldr	r2, [r3, #20]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ba0:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d103      	bne.n	8003bb2 <HAL_DMA_IRQHandler+0x736>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d007      	beq.n	8003bc2 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	681a      	ldr	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f022 0208 	bic.w	r2, r2, #8
 8003bc0:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc6:	f003 031f 	and.w	r3, r3, #31
 8003bca:	223f      	movs	r2, #63	; 0x3f
 8003bcc:	409a      	lsls	r2, r3
 8003bce:	6a3b      	ldr	r3, [r7, #32]
 8003bd0:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 834a 	beq.w	8004280 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	4798      	blx	r3
          }
          return;
 8003bf4:	e344      	b.n	8004280 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d018      	beq.n	8003c36 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d108      	bne.n	8003c24 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d02c      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	4798      	blx	r3
 8003c22:	e027      	b.n	8003c74 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d023      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	4798      	blx	r3
 8003c34:	e01e      	b.n	8003c74 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d10f      	bne.n	8003c64 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0210 	bic.w	r2, r2, #16
 8003c52:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2200      	movs	r2, #0
 8003c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 8306 	beq.w	800428a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	f000 8088 	beq.w	8003d9c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a7a      	ldr	r2, [pc, #488]	; (8003e84 <HAL_DMA_IRQHandler+0xa08>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d04a      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a79      	ldr	r2, [pc, #484]	; (8003e88 <HAL_DMA_IRQHandler+0xa0c>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d045      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a77      	ldr	r2, [pc, #476]	; (8003e8c <HAL_DMA_IRQHandler+0xa10>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d040      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a76      	ldr	r2, [pc, #472]	; (8003e90 <HAL_DMA_IRQHandler+0xa14>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d03b      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a74      	ldr	r2, [pc, #464]	; (8003e94 <HAL_DMA_IRQHandler+0xa18>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d036      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	4a73      	ldr	r2, [pc, #460]	; (8003e98 <HAL_DMA_IRQHandler+0xa1c>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d031      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a71      	ldr	r2, [pc, #452]	; (8003e9c <HAL_DMA_IRQHandler+0xa20>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d02c      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	4a70      	ldr	r2, [pc, #448]	; (8003ea0 <HAL_DMA_IRQHandler+0xa24>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d027      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4a6e      	ldr	r2, [pc, #440]	; (8003ea4 <HAL_DMA_IRQHandler+0xa28>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d022      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a6d      	ldr	r2, [pc, #436]	; (8003ea8 <HAL_DMA_IRQHandler+0xa2c>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d01d      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4a6b      	ldr	r2, [pc, #428]	; (8003eac <HAL_DMA_IRQHandler+0xa30>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d018      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	4a6a      	ldr	r2, [pc, #424]	; (8003eb0 <HAL_DMA_IRQHandler+0xa34>)
 8003d08:	4293      	cmp	r3, r2
 8003d0a:	d013      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	4a68      	ldr	r2, [pc, #416]	; (8003eb4 <HAL_DMA_IRQHandler+0xa38>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00e      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a67      	ldr	r2, [pc, #412]	; (8003eb8 <HAL_DMA_IRQHandler+0xa3c>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d009      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a65      	ldr	r2, [pc, #404]	; (8003ebc <HAL_DMA_IRQHandler+0xa40>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d004      	beq.n	8003d34 <HAL_DMA_IRQHandler+0x8b8>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a64      	ldr	r2, [pc, #400]	; (8003ec0 <HAL_DMA_IRQHandler+0xa44>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d108      	bne.n	8003d46 <HAL_DMA_IRQHandler+0x8ca>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0201 	bic.w	r2, r2, #1
 8003d42:	601a      	str	r2, [r3, #0]
 8003d44:	e007      	b.n	8003d56 <HAL_DMA_IRQHandler+0x8da>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	f022 0201 	bic.w	r2, r2, #1
 8003d54:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	3301      	adds	r3, #1
 8003d5a:	60fb      	str	r3, [r7, #12]
 8003d5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d307      	bcc.n	8003d72 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d1f2      	bne.n	8003d56 <HAL_DMA_IRQHandler+0x8da>
 8003d70:	e000      	b.n	8003d74 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d72:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f003 0301 	and.w	r3, r3, #1
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d004      	beq.n	8003d8c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2203      	movs	r2, #3
 8003d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d8a:	e003      	b.n	8003d94 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	f000 8272 	beq.w	800428a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
 8003dae:	e26c      	b.n	800428a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a43      	ldr	r2, [pc, #268]	; (8003ec4 <HAL_DMA_IRQHandler+0xa48>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d022      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a42      	ldr	r2, [pc, #264]	; (8003ec8 <HAL_DMA_IRQHandler+0xa4c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d01d      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4a40      	ldr	r2, [pc, #256]	; (8003ecc <HAL_DMA_IRQHandler+0xa50>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d018      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	4a3f      	ldr	r2, [pc, #252]	; (8003ed0 <HAL_DMA_IRQHandler+0xa54>)
 8003dd4:	4293      	cmp	r3, r2
 8003dd6:	d013      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a3d      	ldr	r2, [pc, #244]	; (8003ed4 <HAL_DMA_IRQHandler+0xa58>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00e      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a3c      	ldr	r2, [pc, #240]	; (8003ed8 <HAL_DMA_IRQHandler+0xa5c>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d009      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a3a      	ldr	r2, [pc, #232]	; (8003edc <HAL_DMA_IRQHandler+0xa60>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d004      	beq.n	8003e00 <HAL_DMA_IRQHandler+0x984>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a39      	ldr	r2, [pc, #228]	; (8003ee0 <HAL_DMA_IRQHandler+0xa64>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d101      	bne.n	8003e04 <HAL_DMA_IRQHandler+0x988>
 8003e00:	2301      	movs	r3, #1
 8003e02:	e000      	b.n	8003e06 <HAL_DMA_IRQHandler+0x98a>
 8003e04:	2300      	movs	r3, #0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	f000 823f 	beq.w	800428a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e18:	f003 031f 	and.w	r3, r3, #31
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	409a      	lsls	r2, r3
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	4013      	ands	r3, r2
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 80cd 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0xb48>
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80c7 	beq.w	8003fc4 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e3a:	f003 031f 	and.w	r3, r3, #31
 8003e3e:	2204      	movs	r2, #4
 8003e40:	409a      	lsls	r2, r3
 8003e42:	69fb      	ldr	r3, [r7, #28]
 8003e44:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d049      	beq.n	8003ee4 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d109      	bne.n	8003e6e <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	f000 8210 	beq.w	8004284 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e6c:	e20a      	b.n	8004284 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	f000 8206 	beq.w	8004284 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e80:	e200      	b.n	8004284 <HAL_DMA_IRQHandler+0xe08>
 8003e82:	bf00      	nop
 8003e84:	40020010 	.word	0x40020010
 8003e88:	40020028 	.word	0x40020028
 8003e8c:	40020040 	.word	0x40020040
 8003e90:	40020058 	.word	0x40020058
 8003e94:	40020070 	.word	0x40020070
 8003e98:	40020088 	.word	0x40020088
 8003e9c:	400200a0 	.word	0x400200a0
 8003ea0:	400200b8 	.word	0x400200b8
 8003ea4:	40020410 	.word	0x40020410
 8003ea8:	40020428 	.word	0x40020428
 8003eac:	40020440 	.word	0x40020440
 8003eb0:	40020458 	.word	0x40020458
 8003eb4:	40020470 	.word	0x40020470
 8003eb8:	40020488 	.word	0x40020488
 8003ebc:	400204a0 	.word	0x400204a0
 8003ec0:	400204b8 	.word	0x400204b8
 8003ec4:	58025408 	.word	0x58025408
 8003ec8:	5802541c 	.word	0x5802541c
 8003ecc:	58025430 	.word	0x58025430
 8003ed0:	58025444 	.word	0x58025444
 8003ed4:	58025458 	.word	0x58025458
 8003ed8:	5802546c 	.word	0x5802546c
 8003edc:	58025480 	.word	0x58025480
 8003ee0:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	f003 0320 	and.w	r3, r3, #32
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d160      	bne.n	8003fb0 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a7f      	ldr	r2, [pc, #508]	; (80040f0 <HAL_DMA_IRQHandler+0xc74>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d04a      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a7d      	ldr	r2, [pc, #500]	; (80040f4 <HAL_DMA_IRQHandler+0xc78>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d045      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a7c      	ldr	r2, [pc, #496]	; (80040f8 <HAL_DMA_IRQHandler+0xc7c>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d040      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a7a      	ldr	r2, [pc, #488]	; (80040fc <HAL_DMA_IRQHandler+0xc80>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d03b      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a79      	ldr	r2, [pc, #484]	; (8004100 <HAL_DMA_IRQHandler+0xc84>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d036      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a77      	ldr	r2, [pc, #476]	; (8004104 <HAL_DMA_IRQHandler+0xc88>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d031      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a76      	ldr	r2, [pc, #472]	; (8004108 <HAL_DMA_IRQHandler+0xc8c>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d02c      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a74      	ldr	r2, [pc, #464]	; (800410c <HAL_DMA_IRQHandler+0xc90>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d027      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	4a73      	ldr	r2, [pc, #460]	; (8004110 <HAL_DMA_IRQHandler+0xc94>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	d022      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a71      	ldr	r2, [pc, #452]	; (8004114 <HAL_DMA_IRQHandler+0xc98>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d01d      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a70      	ldr	r2, [pc, #448]	; (8004118 <HAL_DMA_IRQHandler+0xc9c>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d018      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a6e      	ldr	r2, [pc, #440]	; (800411c <HAL_DMA_IRQHandler+0xca0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d013      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a6d      	ldr	r2, [pc, #436]	; (8004120 <HAL_DMA_IRQHandler+0xca4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00e      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a6b      	ldr	r2, [pc, #428]	; (8004124 <HAL_DMA_IRQHandler+0xca8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d009      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <HAL_DMA_IRQHandler+0xcac>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d004      	beq.n	8003f8e <HAL_DMA_IRQHandler+0xb12>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a68      	ldr	r2, [pc, #416]	; (800412c <HAL_DMA_IRQHandler+0xcb0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d108      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0xb24>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	681a      	ldr	r2, [r3, #0]
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f022 0208 	bic.w	r2, r2, #8
 8003f9c:	601a      	str	r2, [r3, #0]
 8003f9e:	e007      	b.n	8003fb0 <HAL_DMA_IRQHandler+0xb34>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	f000 8165 	beq.w	8004284 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc2:	e15f      	b.n	8004284 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc8:	f003 031f 	and.w	r3, r3, #31
 8003fcc:	2202      	movs	r2, #2
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80c5 	beq.w	8004164 <HAL_DMA_IRQHandler+0xce8>
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f003 0302 	and.w	r3, r3, #2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	f000 80bf 	beq.w	8004164 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	f003 031f 	and.w	r3, r3, #31
 8003fee:	2202      	movs	r2, #2
 8003ff0:	409a      	lsls	r2, r3
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d018      	beq.n	8004032 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d109      	bne.n	800401e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800400e:	2b00      	cmp	r3, #0
 8004010:	f000 813a 	beq.w	8004288 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800401c:	e134      	b.n	8004288 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004022:	2b00      	cmp	r3, #0
 8004024:	f000 8130 	beq.w	8004288 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004030:	e12a      	b.n	8004288 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	f003 0320 	and.w	r3, r3, #32
 8004038:	2b00      	cmp	r3, #0
 800403a:	f040 8089 	bne.w	8004150 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	4a2b      	ldr	r2, [pc, #172]	; (80040f0 <HAL_DMA_IRQHandler+0xc74>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d04a      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a29      	ldr	r2, [pc, #164]	; (80040f4 <HAL_DMA_IRQHandler+0xc78>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d045      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a28      	ldr	r2, [pc, #160]	; (80040f8 <HAL_DMA_IRQHandler+0xc7c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d040      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a26      	ldr	r2, [pc, #152]	; (80040fc <HAL_DMA_IRQHandler+0xc80>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d03b      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a25      	ldr	r2, [pc, #148]	; (8004100 <HAL_DMA_IRQHandler+0xc84>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d036      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a23      	ldr	r2, [pc, #140]	; (8004104 <HAL_DMA_IRQHandler+0xc88>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d031      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a22      	ldr	r2, [pc, #136]	; (8004108 <HAL_DMA_IRQHandler+0xc8c>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d02c      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a20      	ldr	r2, [pc, #128]	; (800410c <HAL_DMA_IRQHandler+0xc90>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d027      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a1f      	ldr	r2, [pc, #124]	; (8004110 <HAL_DMA_IRQHandler+0xc94>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d022      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_DMA_IRQHandler+0xc98>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d01d      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <HAL_DMA_IRQHandler+0xc9c>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d018      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a1a      	ldr	r2, [pc, #104]	; (800411c <HAL_DMA_IRQHandler+0xca0>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d013      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	4a19      	ldr	r2, [pc, #100]	; (8004120 <HAL_DMA_IRQHandler+0xca4>)
 80040bc:	4293      	cmp	r3, r2
 80040be:	d00e      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a17      	ldr	r2, [pc, #92]	; (8004124 <HAL_DMA_IRQHandler+0xca8>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d009      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a16      	ldr	r2, [pc, #88]	; (8004128 <HAL_DMA_IRQHandler+0xcac>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d004      	beq.n	80040de <HAL_DMA_IRQHandler+0xc62>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	4a14      	ldr	r2, [pc, #80]	; (800412c <HAL_DMA_IRQHandler+0xcb0>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d128      	bne.n	8004130 <HAL_DMA_IRQHandler+0xcb4>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f022 0214 	bic.w	r2, r2, #20
 80040ec:	601a      	str	r2, [r3, #0]
 80040ee:	e027      	b.n	8004140 <HAL_DMA_IRQHandler+0xcc4>
 80040f0:	40020010 	.word	0x40020010
 80040f4:	40020028 	.word	0x40020028
 80040f8:	40020040 	.word	0x40020040
 80040fc:	40020058 	.word	0x40020058
 8004100:	40020070 	.word	0x40020070
 8004104:	40020088 	.word	0x40020088
 8004108:	400200a0 	.word	0x400200a0
 800410c:	400200b8 	.word	0x400200b8
 8004110:	40020410 	.word	0x40020410
 8004114:	40020428 	.word	0x40020428
 8004118:	40020440 	.word	0x40020440
 800411c:	40020458 	.word	0x40020458
 8004120:	40020470 	.word	0x40020470
 8004124:	40020488 	.word	0x40020488
 8004128:	400204a0 	.word	0x400204a0
 800412c:	400204b8 	.word	0x400204b8
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 020a 	bic.w	r2, r2, #10
 800413e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2201      	movs	r2, #1
 8004144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 8097 	beq.w	8004288 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004162:	e091      	b.n	8004288 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004168:	f003 031f 	and.w	r3, r3, #31
 800416c:	2208      	movs	r2, #8
 800416e:	409a      	lsls	r2, r3
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4013      	ands	r3, r2
 8004174:	2b00      	cmp	r3, #0
 8004176:	f000 8088 	beq.w	800428a <HAL_DMA_IRQHandler+0xe0e>
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	f003 0308 	and.w	r3, r3, #8
 8004180:	2b00      	cmp	r3, #0
 8004182:	f000 8082 	beq.w	800428a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	4a41      	ldr	r2, [pc, #260]	; (8004290 <HAL_DMA_IRQHandler+0xe14>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d04a      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a3f      	ldr	r2, [pc, #252]	; (8004294 <HAL_DMA_IRQHandler+0xe18>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d045      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	4a3e      	ldr	r2, [pc, #248]	; (8004298 <HAL_DMA_IRQHandler+0xe1c>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	d040      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a3c      	ldr	r2, [pc, #240]	; (800429c <HAL_DMA_IRQHandler+0xe20>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d03b      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a3b      	ldr	r2, [pc, #236]	; (80042a0 <HAL_DMA_IRQHandler+0xe24>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d036      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a39      	ldr	r2, [pc, #228]	; (80042a4 <HAL_DMA_IRQHandler+0xe28>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d031      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a38      	ldr	r2, [pc, #224]	; (80042a8 <HAL_DMA_IRQHandler+0xe2c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d02c      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a36      	ldr	r2, [pc, #216]	; (80042ac <HAL_DMA_IRQHandler+0xe30>)
 80041d2:	4293      	cmp	r3, r2
 80041d4:	d027      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a35      	ldr	r2, [pc, #212]	; (80042b0 <HAL_DMA_IRQHandler+0xe34>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d022      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a33      	ldr	r2, [pc, #204]	; (80042b4 <HAL_DMA_IRQHandler+0xe38>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d01d      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a32      	ldr	r2, [pc, #200]	; (80042b8 <HAL_DMA_IRQHandler+0xe3c>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d018      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a30      	ldr	r2, [pc, #192]	; (80042bc <HAL_DMA_IRQHandler+0xe40>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d013      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a2f      	ldr	r2, [pc, #188]	; (80042c0 <HAL_DMA_IRQHandler+0xe44>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d00e      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_DMA_IRQHandler+0xe48>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d009      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a2c      	ldr	r2, [pc, #176]	; (80042c8 <HAL_DMA_IRQHandler+0xe4c>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d004      	beq.n	8004226 <HAL_DMA_IRQHandler+0xdaa>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2a      	ldr	r2, [pc, #168]	; (80042cc <HAL_DMA_IRQHandler+0xe50>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d108      	bne.n	8004238 <HAL_DMA_IRQHandler+0xdbc>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 021c 	bic.w	r2, r2, #28
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e007      	b.n	8004248 <HAL_DMA_IRQHandler+0xdcc>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	681a      	ldr	r2, [r3, #0]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 020e 	bic.w	r2, r2, #14
 8004246:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424c:	f003 031f 	and.w	r3, r3, #31
 8004250:	2201      	movs	r2, #1
 8004252:	409a      	lsls	r2, r3
 8004254:	69fb      	ldr	r3, [r7, #28]
 8004256:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2201      	movs	r2, #1
 8004262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004272:	2b00      	cmp	r3, #0
 8004274:	d009      	beq.n	800428a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800427a:	6878      	ldr	r0, [r7, #4]
 800427c:	4798      	blx	r3
 800427e:	e004      	b.n	800428a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004280:	bf00      	nop
 8004282:	e002      	b.n	800428a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004284:	bf00      	nop
 8004286:	e000      	b.n	800428a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004288:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800428a:	3728      	adds	r7, #40	; 0x28
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}
 8004290:	40020010 	.word	0x40020010
 8004294:	40020028 	.word	0x40020028
 8004298:	40020040 	.word	0x40020040
 800429c:	40020058 	.word	0x40020058
 80042a0:	40020070 	.word	0x40020070
 80042a4:	40020088 	.word	0x40020088
 80042a8:	400200a0 	.word	0x400200a0
 80042ac:	400200b8 	.word	0x400200b8
 80042b0:	40020410 	.word	0x40020410
 80042b4:	40020428 	.word	0x40020428
 80042b8:	40020440 	.word	0x40020440
 80042bc:	40020458 	.word	0x40020458
 80042c0:	40020470 	.word	0x40020470
 80042c4:	40020488 	.word	0x40020488
 80042c8:	400204a0 	.word	0x400204a0
 80042cc:	400204b8 	.word	0x400204b8

080042d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a42      	ldr	r2, [pc, #264]	; (80043e8 <DMA_CalcBaseAndBitshift+0x118>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d04a      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4a41      	ldr	r2, [pc, #260]	; (80043ec <DMA_CalcBaseAndBitshift+0x11c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d045      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a3f      	ldr	r2, [pc, #252]	; (80043f0 <DMA_CalcBaseAndBitshift+0x120>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d040      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a3e      	ldr	r2, [pc, #248]	; (80043f4 <DMA_CalcBaseAndBitshift+0x124>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d03b      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a3c      	ldr	r2, [pc, #240]	; (80043f8 <DMA_CalcBaseAndBitshift+0x128>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d036      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a3b      	ldr	r2, [pc, #236]	; (80043fc <DMA_CalcBaseAndBitshift+0x12c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d031      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a39      	ldr	r2, [pc, #228]	; (8004400 <DMA_CalcBaseAndBitshift+0x130>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d02c      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a38      	ldr	r2, [pc, #224]	; (8004404 <DMA_CalcBaseAndBitshift+0x134>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d027      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a36      	ldr	r2, [pc, #216]	; (8004408 <DMA_CalcBaseAndBitshift+0x138>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d022      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a35      	ldr	r2, [pc, #212]	; (800440c <DMA_CalcBaseAndBitshift+0x13c>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d01d      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a33      	ldr	r2, [pc, #204]	; (8004410 <DMA_CalcBaseAndBitshift+0x140>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d018      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a32      	ldr	r2, [pc, #200]	; (8004414 <DMA_CalcBaseAndBitshift+0x144>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d013      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a30      	ldr	r2, [pc, #192]	; (8004418 <DMA_CalcBaseAndBitshift+0x148>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d00e      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	4a2f      	ldr	r2, [pc, #188]	; (800441c <DMA_CalcBaseAndBitshift+0x14c>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d009      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a2d      	ldr	r2, [pc, #180]	; (8004420 <DMA_CalcBaseAndBitshift+0x150>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d004      	beq.n	8004378 <DMA_CalcBaseAndBitshift+0xa8>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4a2c      	ldr	r2, [pc, #176]	; (8004424 <DMA_CalcBaseAndBitshift+0x154>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d101      	bne.n	800437c <DMA_CalcBaseAndBitshift+0xac>
 8004378:	2301      	movs	r3, #1
 800437a:	e000      	b.n	800437e <DMA_CalcBaseAndBitshift+0xae>
 800437c:	2300      	movs	r3, #0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d024      	beq.n	80043cc <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	b2db      	uxtb	r3, r3
 8004388:	3b10      	subs	r3, #16
 800438a:	4a27      	ldr	r2, [pc, #156]	; (8004428 <DMA_CalcBaseAndBitshift+0x158>)
 800438c:	fba2 2303 	umull	r2, r3, r2, r3
 8004390:	091b      	lsrs	r3, r3, #4
 8004392:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	4a24      	ldr	r2, [pc, #144]	; (800442c <DMA_CalcBaseAndBitshift+0x15c>)
 800439c:	5cd3      	ldrb	r3, [r2, r3]
 800439e:	461a      	mov	r2, r3
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d908      	bls.n	80043bc <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	461a      	mov	r2, r3
 80043b0:	4b1f      	ldr	r3, [pc, #124]	; (8004430 <DMA_CalcBaseAndBitshift+0x160>)
 80043b2:	4013      	ands	r3, r2
 80043b4:	1d1a      	adds	r2, r3, #4
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	659a      	str	r2, [r3, #88]	; 0x58
 80043ba:	e00d      	b.n	80043d8 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	461a      	mov	r2, r3
 80043c2:	4b1b      	ldr	r3, [pc, #108]	; (8004430 <DMA_CalcBaseAndBitshift+0x160>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6593      	str	r3, [r2, #88]	; 0x58
 80043ca:	e005      	b.n	80043d8 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3714      	adds	r7, #20
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40020010 	.word	0x40020010
 80043ec:	40020028 	.word	0x40020028
 80043f0:	40020040 	.word	0x40020040
 80043f4:	40020058 	.word	0x40020058
 80043f8:	40020070 	.word	0x40020070
 80043fc:	40020088 	.word	0x40020088
 8004400:	400200a0 	.word	0x400200a0
 8004404:	400200b8 	.word	0x400200b8
 8004408:	40020410 	.word	0x40020410
 800440c:	40020428 	.word	0x40020428
 8004410:	40020440 	.word	0x40020440
 8004414:	40020458 	.word	0x40020458
 8004418:	40020470 	.word	0x40020470
 800441c:	40020488 	.word	0x40020488
 8004420:	400204a0 	.word	0x400204a0
 8004424:	400204b8 	.word	0x400204b8
 8004428:	aaaaaaab 	.word	0xaaaaaaab
 800442c:	0800a644 	.word	0x0800a644
 8004430:	fffffc00 	.word	0xfffffc00

08004434 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004434:	b480      	push	{r7}
 8004436:	b085      	sub	sp, #20
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800443c:	2300      	movs	r3, #0
 800443e:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	699b      	ldr	r3, [r3, #24]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d120      	bne.n	800448a <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800444c:	2b03      	cmp	r3, #3
 800444e:	d858      	bhi.n	8004502 <DMA_CheckFifoParam+0xce>
 8004450:	a201      	add	r2, pc, #4	; (adr r2, 8004458 <DMA_CheckFifoParam+0x24>)
 8004452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004456:	bf00      	nop
 8004458:	08004469 	.word	0x08004469
 800445c:	0800447b 	.word	0x0800447b
 8004460:	08004469 	.word	0x08004469
 8004464:	08004503 	.word	0x08004503
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800446c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004470:	2b00      	cmp	r3, #0
 8004472:	d048      	beq.n	8004506 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004478:	e045      	b.n	8004506 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004482:	d142      	bne.n	800450a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004488:	e03f      	b.n	800450a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004492:	d123      	bne.n	80044dc <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004498:	2b03      	cmp	r3, #3
 800449a:	d838      	bhi.n	800450e <DMA_CheckFifoParam+0xda>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <DMA_CheckFifoParam+0x70>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044bb 	.word	0x080044bb
 80044ac:	080044b5 	.word	0x080044b5
 80044b0:	080044cd 	.word	0x080044cd
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	73fb      	strb	r3, [r7, #15]
        break;
 80044b8:	e030      	b.n	800451c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d025      	beq.n	8004512 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80044c6:	2301      	movs	r3, #1
 80044c8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044ca:	e022      	b.n	8004512 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044d4:	d11f      	bne.n	8004516 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80044da:	e01c      	b.n	8004516 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d902      	bls.n	80044ea <DMA_CheckFifoParam+0xb6>
 80044e4:	2b03      	cmp	r3, #3
 80044e6:	d003      	beq.n	80044f0 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80044e8:	e018      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
        break;
 80044ee:	e015      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d00e      	beq.n	800451a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80044fc:	2301      	movs	r3, #1
 80044fe:	73fb      	strb	r3, [r7, #15]
    break;
 8004500:	e00b      	b.n	800451a <DMA_CheckFifoParam+0xe6>
        break;
 8004502:	bf00      	nop
 8004504:	e00a      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 8004506:	bf00      	nop
 8004508:	e008      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 800450a:	bf00      	nop
 800450c:	e006      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 800450e:	bf00      	nop
 8004510:	e004      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 8004512:	bf00      	nop
 8004514:	e002      	b.n	800451c <DMA_CheckFifoParam+0xe8>
        break;
 8004516:	bf00      	nop
 8004518:	e000      	b.n	800451c <DMA_CheckFifoParam+0xe8>
    break;
 800451a:	bf00      	nop
    }
  }

  return status;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop

0800452c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a38      	ldr	r2, [pc, #224]	; (8004620 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d022      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a36      	ldr	r2, [pc, #216]	; (8004624 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d01d      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a35      	ldr	r2, [pc, #212]	; (8004628 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d018      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a33      	ldr	r2, [pc, #204]	; (800462c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a32      	ldr	r2, [pc, #200]	; (8004630 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d00e      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a30      	ldr	r2, [pc, #192]	; (8004634 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8004572:	4293      	cmp	r3, r2
 8004574:	d009      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a2f      	ldr	r2, [pc, #188]	; (8004638 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d004      	beq.n	800458a <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a2d      	ldr	r2, [pc, #180]	; (800463c <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01a      	beq.n	80045ca <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	b2db      	uxtb	r3, r3
 800459a:	3b08      	subs	r3, #8
 800459c:	4a28      	ldr	r2, [pc, #160]	; (8004640 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800459e:	fba2 2303 	umull	r2, r3, r2, r3
 80045a2:	091b      	lsrs	r3, r3, #4
 80045a4:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 80045aa:	4413      	add	r3, r2
 80045ac:	009b      	lsls	r3, r3, #2
 80045ae:	461a      	mov	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	4a24      	ldr	r2, [pc, #144]	; (8004648 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80045b8:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f003 031f 	and.w	r3, r3, #31
 80045c0:	2201      	movs	r2, #1
 80045c2:	409a      	lsls	r2, r3
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80045c8:	e024      	b.n	8004614 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	b2db      	uxtb	r3, r3
 80045d0:	3b10      	subs	r3, #16
 80045d2:	4a1e      	ldr	r2, [pc, #120]	; (800464c <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80045d4:	fba2 2303 	umull	r2, r3, r2, r3
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80045dc:	68bb      	ldr	r3, [r7, #8]
 80045de:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80045e0:	4293      	cmp	r3, r2
 80045e2:	d806      	bhi.n	80045f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d902      	bls.n	80045f2 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	3308      	adds	r3, #8
 80045f0:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80045f6:	4413      	add	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	461a      	mov	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a16      	ldr	r2, [pc, #88]	; (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004604:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f003 031f 	and.w	r3, r3, #31
 800460c:	2201      	movs	r2, #1
 800460e:	409a      	lsls	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004614:	bf00      	nop
 8004616:	3714      	adds	r7, #20
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	58025408 	.word	0x58025408
 8004624:	5802541c 	.word	0x5802541c
 8004628:	58025430 	.word	0x58025430
 800462c:	58025444 	.word	0x58025444
 8004630:	58025458 	.word	0x58025458
 8004634:	5802546c 	.word	0x5802546c
 8004638:	58025480 	.word	0x58025480
 800463c:	58025494 	.word	0x58025494
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	16009600 	.word	0x16009600
 8004648:	58025880 	.word	0x58025880
 800464c:	aaaaaaab 	.word	0xaaaaaaab
 8004650:	400204b8 	.word	0x400204b8
 8004654:	4002040f 	.word	0x4002040f
 8004658:	10008200 	.word	0x10008200
 800465c:	40020880 	.word	0x40020880

08004660 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004660:	b480      	push	{r7}
 8004662:	b085      	sub	sp, #20
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	b2db      	uxtb	r3, r3
 800466e:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d04a      	beq.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2b08      	cmp	r3, #8
 800467a:	d847      	bhi.n	800470c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a25      	ldr	r2, [pc, #148]	; (8004718 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d022      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a24      	ldr	r2, [pc, #144]	; (800471c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d01d      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	4a22      	ldr	r2, [pc, #136]	; (8004720 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004696:	4293      	cmp	r3, r2
 8004698:	d018      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4a21      	ldr	r2, [pc, #132]	; (8004724 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d013      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a1f      	ldr	r2, [pc, #124]	; (8004728 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d00e      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d009      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4a1c      	ldr	r2, [pc, #112]	; (8004730 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d004      	beq.n	80046cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a1b      	ldr	r2, [pc, #108]	; (8004734 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d101      	bne.n	80046d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80046cc:	2301      	movs	r3, #1
 80046ce:	e000      	b.n	80046d2 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80046d0:	2300      	movs	r3, #0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d00a      	beq.n	80046ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80046d6:	68fa      	ldr	r2, [r7, #12]
 80046d8:	4b17      	ldr	r3, [pc, #92]	; (8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80046da:	4413      	add	r3, r2
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	461a      	mov	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	4a15      	ldr	r2, [pc, #84]	; (800473c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80046e8:	671a      	str	r2, [r3, #112]	; 0x70
 80046ea:	e009      	b.n	8004700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	4b14      	ldr	r3, [pc, #80]	; (8004740 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80046f0:	4413      	add	r3, r2
 80046f2:	009b      	lsls	r3, r3, #2
 80046f4:	461a      	mov	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a11      	ldr	r2, [pc, #68]	; (8004744 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80046fe:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	3b01      	subs	r3, #1
 8004704:	2201      	movs	r2, #1
 8004706:	409a      	lsls	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800470c:	bf00      	nop
 800470e:	3714      	adds	r7, #20
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	58025408 	.word	0x58025408
 800471c:	5802541c 	.word	0x5802541c
 8004720:	58025430 	.word	0x58025430
 8004724:	58025444 	.word	0x58025444
 8004728:	58025458 	.word	0x58025458
 800472c:	5802546c 	.word	0x5802546c
 8004730:	58025480 	.word	0x58025480
 8004734:	58025494 	.word	0x58025494
 8004738:	1600963f 	.word	0x1600963f
 800473c:	58025940 	.word	0x58025940
 8004740:	1000823f 	.word	0x1000823f
 8004744:	40020940 	.word	0x40020940

08004748 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b084      	sub	sp, #16
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2b00      	cmp	r3, #0
 8004754:	d101      	bne.n	800475a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e0cf      	b.n	80048fa <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004760:	2b00      	cmp	r3, #0
 8004762:	d106      	bne.n	8004772 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2223      	movs	r2, #35	; 0x23
 8004768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fd f907 	bl	8001980 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004772:	4b64      	ldr	r3, [pc, #400]	; (8004904 <HAL_ETH_Init+0x1bc>)
 8004774:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004778:	4a62      	ldr	r2, [pc, #392]	; (8004904 <HAL_ETH_Init+0x1bc>)
 800477a:	f043 0302 	orr.w	r3, r3, #2
 800477e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004782:	4b60      	ldr	r3, [pc, #384]	; (8004904 <HAL_ETH_Init+0x1bc>)
 8004784:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004788:	f003 0302 	and.w	r3, r3, #2
 800478c:	60bb      	str	r3, [r7, #8]
 800478e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	7a1b      	ldrb	r3, [r3, #8]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d103      	bne.n	80047a0 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004798:	2000      	movs	r0, #0
 800479a:	f7fd fc8b 	bl	80020b4 <HAL_SYSCFG_ETHInterfaceSelect>
 800479e:	e003      	b.n	80047a8 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80047a0:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80047a4:	f7fd fc86 	bl	80020b4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 80047a8:	4b57      	ldr	r3, [pc, #348]	; (8004908 <HAL_ETH_Init+0x1c0>)
 80047aa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	6812      	ldr	r2, [r2, #0]
 80047ba:	f043 0301 	orr.w	r3, r3, #1
 80047be:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80047c4:	f7fd fc3a 	bl	800203c <HAL_GetTick>
 80047c8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80047ca:	e011      	b.n	80047f0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80047cc:	f7fd fc36 	bl	800203c <HAL_GetTick>
 80047d0:	4602      	mov	r2, r0
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80047da:	d909      	bls.n	80047f0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2204      	movs	r2, #4
 80047e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	22e0      	movs	r2, #224	; 0xe0
 80047e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e084      	b.n	80048fa <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d1e4      	bne.n	80047cc <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f000 f886 	bl	8004914 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004808:	f001 fefc 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 800480c:	4603      	mov	r3, r0
 800480e:	4a3f      	ldr	r2, [pc, #252]	; (800490c <HAL_ETH_Init+0x1c4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	0c9a      	lsrs	r2, r3, #18
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3a01      	subs	r2, #1
 800481c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 fa71 	bl	8004d08 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800482e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8004832:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8004836:	687a      	ldr	r2, [r7, #4]
 8004838:	6812      	ldr	r2, [r2, #0]
 800483a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800483e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004842:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	695b      	ldr	r3, [r3, #20]
 800484a:	f003 0303 	and.w	r3, r3, #3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d009      	beq.n	8004866 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	22e0      	movs	r2, #224	; 0xe0
 800485e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8004862:	2301      	movs	r3, #1
 8004864:	e049      	b.n	80048fa <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800486e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004872:	4b27      	ldr	r3, [pc, #156]	; (8004910 <HAL_ETH_Init+0x1c8>)
 8004874:	4013      	ands	r3, r2
 8004876:	687a      	ldr	r2, [r7, #4]
 8004878:	6952      	ldr	r2, [r2, #20]
 800487a:	0051      	lsls	r1, r2, #1
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	6812      	ldr	r2, [r2, #0]
 8004880:	430b      	orrs	r3, r1
 8004882:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004886:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fad9 	bl	8004e42 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f000 fb1f 	bl	8004ed4 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	3305      	adds	r3, #5
 800489c:	781b      	ldrb	r3, [r3, #0]
 800489e:	021a      	lsls	r2, r3, #8
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	3304      	adds	r3, #4
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4619      	mov	r1, r3
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	3303      	adds	r3, #3
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	061a      	lsls	r2, r3, #24
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	3302      	adds	r3, #2
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	041b      	lsls	r3, r3, #16
 80048c8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	3301      	adds	r3, #1
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048d4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80048e2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80048e4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2210      	movs	r2, #16
 80048f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80048f8:	2300      	movs	r3, #0
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	58024400 	.word	0x58024400
 8004908:	58000400 	.word	0x58000400
 800490c:	431bde83 	.word	0x431bde83
 8004910:	ffff8001 	.word	0xffff8001

08004914 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004924:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800492c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800492e:	f001 fe69 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8004932:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4a1e      	ldr	r2, [pc, #120]	; (80049b0 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d908      	bls.n	800494e <HAL_ETH_SetMDIOClockRange+0x3a>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a1d      	ldr	r2, [pc, #116]	; (80049b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d804      	bhi.n	800494e <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	e027      	b.n	800499e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	4a18      	ldr	r2, [pc, #96]	; (80049b4 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d908      	bls.n	8004968 <HAL_ETH_SetMDIOClockRange+0x54>
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	4a17      	ldr	r2, [pc, #92]	; (80049b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800495a:	4293      	cmp	r3, r2
 800495c:	d204      	bcs.n	8004968 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004964:	60fb      	str	r3, [r7, #12]
 8004966:	e01a      	b.n	800499e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a13      	ldr	r2, [pc, #76]	; (80049b8 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d303      	bcc.n	8004978 <HAL_ETH_SetMDIOClockRange+0x64>
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	4a12      	ldr	r2, [pc, #72]	; (80049bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d911      	bls.n	800499c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4a10      	ldr	r2, [pc, #64]	; (80049bc <HAL_ETH_SetMDIOClockRange+0xa8>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d908      	bls.n	8004992 <HAL_ETH_SetMDIOClockRange+0x7e>
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	4a0f      	ldr	r2, [pc, #60]	; (80049c0 <HAL_ETH_SetMDIOClockRange+0xac>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d804      	bhi.n	8004992 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800498e:	60fb      	str	r3, [r7, #12]
 8004990:	e005      	b.n	800499e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004998:	60fb      	str	r3, [r7, #12]
 800499a:	e000      	b.n	800499e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800499c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	01312cff 	.word	0x01312cff
 80049b4:	02160ebf 	.word	0x02160ebf
 80049b8:	03938700 	.word	0x03938700
 80049bc:	05f5e0ff 	.word	0x05f5e0ff
 80049c0:	08f0d17f 	.word	0x08f0d17f

080049c4 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80049ce:	683b      	ldr	r3, [r7, #0]
 80049d0:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80049d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	791b      	ldrb	r3, [r3, #4]
 80049dc:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80049de:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	7b1b      	ldrb	r3, [r3, #12]
 80049e4:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80049e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	7b5b      	ldrb	r3, [r3, #13]
 80049ec:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80049ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	7b9b      	ldrb	r3, [r3, #14]
 80049f4:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80049f6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	7bdb      	ldrb	r3, [r3, #15]
 80049fc:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80049fe:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a00:	683a      	ldr	r2, [r7, #0]
 8004a02:	7c12      	ldrb	r2, [r2, #16]
 8004a04:	2a00      	cmp	r2, #0
 8004a06:	d102      	bne.n	8004a0e <ETH_SetMACConfig+0x4a>
 8004a08:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004a0c:	e000      	b.n	8004a10 <ETH_SetMACConfig+0x4c>
 8004a0e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004a10:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	7c52      	ldrb	r2, [r2, #17]
 8004a16:	2a00      	cmp	r2, #0
 8004a18:	d102      	bne.n	8004a20 <ETH_SetMACConfig+0x5c>
 8004a1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004a1e:	e000      	b.n	8004a22 <ETH_SetMACConfig+0x5e>
 8004a20:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004a22:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	7c9b      	ldrb	r3, [r3, #18]
 8004a28:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004a2a:	431a      	orrs	r2, r3
               macconf->Speed |
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8004a30:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8004a36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	7f1b      	ldrb	r3, [r3, #28]
 8004a3c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8004a3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	7f5b      	ldrb	r3, [r3, #29]
 8004a44:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8004a46:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004a48:	683a      	ldr	r2, [r7, #0]
 8004a4a:	7f92      	ldrb	r2, [r2, #30]
 8004a4c:	2a00      	cmp	r2, #0
 8004a4e:	d102      	bne.n	8004a56 <ETH_SetMACConfig+0x92>
 8004a50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a54:	e000      	b.n	8004a58 <ETH_SetMACConfig+0x94>
 8004a56:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8004a58:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	7fdb      	ldrb	r3, [r3, #31]
 8004a5e:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8004a60:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a62:	683a      	ldr	r2, [r7, #0]
 8004a64:	f892 2020 	ldrb.w	r2, [r2, #32]
 8004a68:	2a00      	cmp	r2, #0
 8004a6a:	d102      	bne.n	8004a72 <ETH_SetMACConfig+0xae>
 8004a6c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a70:	e000      	b.n	8004a74 <ETH_SetMACConfig+0xb0>
 8004a72:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8004a74:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8004a7a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a82:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8004a84:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8004a8a:	4313      	orrs	r3, r2
 8004a8c:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	4b56      	ldr	r3, [pc, #344]	; (8004bf0 <ETH_SetMACConfig+0x22c>)
 8004a96:	4013      	ands	r3, r2
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	6812      	ldr	r2, [r2, #0]
 8004a9c:	68f9      	ldr	r1, [r7, #12]
 8004a9e:	430b      	orrs	r3, r1
 8004aa0:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004aae:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ab0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ab8:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004ac2:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004ac4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8004acc:	2a00      	cmp	r2, #0
 8004ace:	d102      	bne.n	8004ad6 <ETH_SetMACConfig+0x112>
 8004ad0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004ad4:	e000      	b.n	8004ad8 <ETH_SetMACConfig+0x114>
 8004ad6:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004ad8:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8004ada:	683b      	ldr	r3, [r7, #0]
 8004adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	685a      	ldr	r2, [r3, #4]
 8004ae8:	4b42      	ldr	r3, [pc, #264]	; (8004bf4 <ETH_SetMACConfig+0x230>)
 8004aea:	4013      	ands	r3, r2
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	6812      	ldr	r2, [r2, #0]
 8004af0:	68f9      	ldr	r1, [r7, #12]
 8004af2:	430b      	orrs	r3, r1
 8004af4:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004afc:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	4b3a      	ldr	r3, [pc, #232]	; (8004bf8 <ETH_SetMACConfig+0x234>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6812      	ldr	r2, [r2, #0]
 8004b14:	68f9      	ldr	r1, [r7, #12]
 8004b16:	430b      	orrs	r3, r1
 8004b18:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b20:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b26:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004b28:	683a      	ldr	r2, [r7, #0]
 8004b2a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8004b2e:	2a00      	cmp	r2, #0
 8004b30:	d101      	bne.n	8004b36 <ETH_SetMACConfig+0x172>
 8004b32:	2280      	movs	r2, #128	; 0x80
 8004b34:	e000      	b.n	8004b38 <ETH_SetMACConfig+0x174>
 8004b36:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8004b38:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004b40:	4313      	orrs	r3, r2
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b4a:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8004b4e:	4013      	ands	r3, r2
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	6812      	ldr	r2, [r2, #0]
 8004b54:	68f9      	ldr	r1, [r7, #12]
 8004b56:	430b      	orrs	r3, r1
 8004b58:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8004b60:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8004b68:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b76:	f023 0103 	bic.w	r1, r3, #3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	430a      	orrs	r2, r1
 8004b82:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8004b8e:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	430a      	orrs	r2, r1
 8004b9c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004baa:	2a00      	cmp	r2, #0
 8004bac:	d101      	bne.n	8004bb2 <ETH_SetMACConfig+0x1ee>
 8004bae:	2240      	movs	r2, #64	; 0x40
 8004bb0:	e000      	b.n	8004bb4 <ETH_SetMACConfig+0x1f0>
 8004bb2:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004bb4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004bbc:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004bbe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004bc6:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004bd4:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	68fa      	ldr	r2, [r7, #12]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004be4:	bf00      	nop
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	00048083 	.word	0x00048083
 8004bf4:	c0f88000 	.word	0xc0f88000
 8004bf8:	fffffef0 	.word	0xfffffef0

08004bfc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	4b38      	ldr	r3, [pc, #224]	; (8004cf4 <ETH_SetDMAConfig+0xf8>)
 8004c12:	4013      	ands	r3, r2
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	6811      	ldr	r1, [r2, #0]
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6812      	ldr	r2, [r2, #0]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c22:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	791b      	ldrb	r3, [r3, #4]
 8004c28:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c2e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	7b1b      	ldrb	r3, [r3, #12]
 8004c34:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004c36:	4313      	orrs	r3, r2
 8004c38:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c42:	685a      	ldr	r2, [r3, #4]
 8004c44:	4b2c      	ldr	r3, [pc, #176]	; (8004cf8 <ETH_SetDMAConfig+0xfc>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	687a      	ldr	r2, [r7, #4]
 8004c4a:	6812      	ldr	r2, [r2, #0]
 8004c4c:	68f9      	ldr	r1, [r7, #12]
 8004c4e:	430b      	orrs	r3, r1
 8004c50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c54:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	7b5b      	ldrb	r3, [r3, #13]
 8004c5a:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c6c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004c70:	4b22      	ldr	r3, [pc, #136]	; (8004cfc <ETH_SetDMAConfig+0x100>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	68f9      	ldr	r1, [r7, #12]
 8004c7a:	430b      	orrs	r3, r1
 8004c7c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004c80:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	7d1b      	ldrb	r3, [r3, #20]
 8004c8c:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c8e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	7f5b      	ldrb	r3, [r3, #29]
 8004c94:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004ca6:	4b16      	ldr	r3, [pc, #88]	; (8004d00 <ETH_SetDMAConfig+0x104>)
 8004ca8:	4013      	ands	r3, r2
 8004caa:	687a      	ldr	r2, [r7, #4]
 8004cac:	6812      	ldr	r2, [r2, #0]
 8004cae:	68f9      	ldr	r1, [r7, #12]
 8004cb0:	430b      	orrs	r3, r1
 8004cb2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004cb6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	7f1b      	ldrb	r3, [r3, #28]
 8004cbe:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cd0:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004cd4:	4b0b      	ldr	r3, [pc, #44]	; (8004d04 <ETH_SetDMAConfig+0x108>)
 8004cd6:	4013      	ands	r3, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	6812      	ldr	r2, [r2, #0]
 8004cdc:	68f9      	ldr	r1, [r7, #12]
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ce4:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004ce8:	bf00      	nop
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr
 8004cf4:	ffff87fd 	.word	0xffff87fd
 8004cf8:	ffff2ffe 	.word	0xffff2ffe
 8004cfc:	fffec000 	.word	0xfffec000
 8004d00:	ffc0efef 	.word	0xffc0efef
 8004d04:	7fc0ffff 	.word	0x7fc0ffff

08004d08 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b0a4      	sub	sp, #144	; 0x90
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004d10:	2301      	movs	r3, #1
 8004d12:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004d16:	2300      	movs	r3, #0
 8004d18:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004d20:	2300      	movs	r3, #0
 8004d22:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004d26:	2301      	movs	r3, #1
 8004d28:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004d32:	2301      	movs	r3, #1
 8004d34:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004d44:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d48:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004d54:	2300      	movs	r3, #0
 8004d56:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004d60:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004d64:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004d70:	2301      	movs	r3, #1
 8004d72:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004d76:	2300      	movs	r3, #0
 8004d78:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004d82:	2300      	movs	r3, #0
 8004d84:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004d8e:	2300      	movs	r3, #0
 8004d90:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004d94:	2300      	movs	r3, #0
 8004d96:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004d9a:	2301      	movs	r3, #1
 8004d9c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004da0:	2320      	movs	r3, #32
 8004da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004da6:	2301      	movs	r3, #1
 8004da8:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004dac:	2300      	movs	r3, #0
 8004dae:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004db2:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004db8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dbc:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004dc4:	2302      	movs	r3, #2
 8004dc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004de2:	2300      	movs	r3, #0
 8004de4:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004de6:	2301      	movs	r3, #1
 8004de8:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004dec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f7ff fde6 	bl	80049c4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004df8:	2301      	movs	r3, #1
 8004dfa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004e00:	2300      	movs	r3, #0
 8004e02:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004e04:	2300      	movs	r3, #0
 8004e06:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004e0e:	2300      	movs	r3, #0
 8004e10:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004e12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e16:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004e1c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004e20:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004e22:	2300      	movs	r3, #0
 8004e24:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004e28:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004e2e:	f107 0308 	add.w	r3, r7, #8
 8004e32:	4619      	mov	r1, r3
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f7ff fee1 	bl	8004bfc <ETH_SetDMAConfig>
}
 8004e3a:	bf00      	nop
 8004e3c:	3790      	adds	r7, #144	; 0x90
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b085      	sub	sp, #20
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	60fb      	str	r3, [r7, #12]
 8004e4e:	e01d      	b.n	8004e8c <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	68d9      	ldr	r1, [r3, #12]
 8004e54:	68fa      	ldr	r2, [r7, #12]
 8004e56:	4613      	mov	r3, r2
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	4413      	add	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	440b      	add	r3, r1
 8004e60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	2200      	movs	r2, #0
 8004e78:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004e7a:	68b9      	ldr	r1, [r7, #8]
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	3206      	adds	r2, #6
 8004e82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	3301      	adds	r3, #1
 8004e8a:	60fb      	str	r3, [r7, #12]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d9de      	bls.n	8004e50 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68da      	ldr	r2, [r3, #12]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb4:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	68da      	ldr	r2, [r3, #12]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ec4:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004ec8:	bf00      	nop
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr

08004ed4 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b085      	sub	sp, #20
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004edc:	2300      	movs	r3, #0
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	e023      	b.n	8004f2a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6919      	ldr	r1, [r3, #16]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	4413      	add	r3, r2
 8004eee:	00db      	lsls	r3, r3, #3
 8004ef0:	440b      	add	r3, r1
 8004ef2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004efa:	68bb      	ldr	r3, [r7, #8]
 8004efc:	2200      	movs	r2, #0
 8004efe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	2200      	movs	r2, #0
 8004f04:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2200      	movs	r2, #0
 8004f10:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	2200      	movs	r2, #0
 8004f16:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004f18:	68b9      	ldr	r1, [r7, #8]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	3212      	adds	r2, #18
 8004f20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	3301      	adds	r3, #1
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	2b03      	cmp	r3, #3
 8004f2e:	d9d8      	bls.n	8004ee2 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	2200      	movs	r2, #0
 8004f3a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2200      	movs	r2, #0
 8004f46:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2200      	movs	r2, #0
 8004f4c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f56:	461a      	mov	r2, r3
 8004f58:	2303      	movs	r3, #3
 8004f5a:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	691a      	ldr	r2, [r3, #16]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f6a:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f7e:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004f82:	bf00      	nop
 8004f84:	3714      	adds	r7, #20
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr
	...

08004f90 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004f90:	b480      	push	{r7}
 8004f92:	b089      	sub	sp, #36	; 0x24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
 8004f98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004f9e:	4b89      	ldr	r3, [pc, #548]	; (80051c4 <HAL_GPIO_Init+0x234>)
 8004fa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004fa2:	e194      	b.n	80052ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	681a      	ldr	r2, [r3, #0]
 8004fa8:	2101      	movs	r1, #1
 8004faa:	69fb      	ldr	r3, [r7, #28]
 8004fac:	fa01 f303 	lsl.w	r3, r1, r3
 8004fb0:	4013      	ands	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8186 	beq.w	80052c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 0303 	and.w	r3, r3, #3
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d005      	beq.n	8004fd4 <HAL_GPIO_Init+0x44>
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 0303 	and.w	r3, r3, #3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d130      	bne.n	8005036 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	005b      	lsls	r3, r3, #1
 8004fde:	2203      	movs	r2, #3
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	68da      	ldr	r2, [r3, #12]
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	005b      	lsls	r3, r3, #1
 8004ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff8:	69ba      	ldr	r2, [r7, #24]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	69ba      	ldr	r2, [r7, #24]
 8005002:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800500a:	2201      	movs	r2, #1
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	fa02 f303 	lsl.w	r3, r2, r3
 8005012:	43db      	mvns	r3, r3
 8005014:	69ba      	ldr	r2, [r7, #24]
 8005016:	4013      	ands	r3, r2
 8005018:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	091b      	lsrs	r3, r3, #4
 8005020:	f003 0201 	and.w	r2, r3, #1
 8005024:	69fb      	ldr	r3, [r7, #28]
 8005026:	fa02 f303 	lsl.w	r3, r2, r3
 800502a:	69ba      	ldr	r2, [r7, #24]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	f003 0303 	and.w	r3, r3, #3
 800503e:	2b03      	cmp	r3, #3
 8005040:	d017      	beq.n	8005072 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005048:	69fb      	ldr	r3, [r7, #28]
 800504a:	005b      	lsls	r3, r3, #1
 800504c:	2203      	movs	r2, #3
 800504e:	fa02 f303 	lsl.w	r3, r2, r3
 8005052:	43db      	mvns	r3, r3
 8005054:	69ba      	ldr	r2, [r7, #24]
 8005056:	4013      	ands	r3, r2
 8005058:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	689a      	ldr	r2, [r3, #8]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	005b      	lsls	r3, r3, #1
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	4313      	orrs	r3, r2
 800506a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b02      	cmp	r3, #2
 800507c:	d123      	bne.n	80050c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	08da      	lsrs	r2, r3, #3
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	3208      	adds	r2, #8
 8005086:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800508c:	69fb      	ldr	r3, [r7, #28]
 800508e:	f003 0307 	and.w	r3, r3, #7
 8005092:	009b      	lsls	r3, r3, #2
 8005094:	220f      	movs	r2, #15
 8005096:	fa02 f303 	lsl.w	r3, r2, r3
 800509a:	43db      	mvns	r3, r3
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	4013      	ands	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	691a      	ldr	r2, [r3, #16]
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	f003 0307 	and.w	r3, r3, #7
 80050ac:	009b      	lsls	r3, r3, #2
 80050ae:	fa02 f303 	lsl.w	r3, r2, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80050b8:	69fb      	ldr	r3, [r7, #28]
 80050ba:	08da      	lsrs	r2, r3, #3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	3208      	adds	r2, #8
 80050c0:	69b9      	ldr	r1, [r7, #24]
 80050c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	005b      	lsls	r3, r3, #1
 80050d0:	2203      	movs	r2, #3
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	69ba      	ldr	r2, [r7, #24]
 80050da:	4013      	ands	r3, r2
 80050dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	f003 0203 	and.w	r2, r3, #3
 80050e6:	69fb      	ldr	r3, [r7, #28]
 80050e8:	005b      	lsls	r3, r3, #1
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 80e0 	beq.w	80052c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005108:	4b2f      	ldr	r3, [pc, #188]	; (80051c8 <HAL_GPIO_Init+0x238>)
 800510a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800510e:	4a2e      	ldr	r2, [pc, #184]	; (80051c8 <HAL_GPIO_Init+0x238>)
 8005110:	f043 0302 	orr.w	r3, r3, #2
 8005114:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005118:	4b2b      	ldr	r3, [pc, #172]	; (80051c8 <HAL_GPIO_Init+0x238>)
 800511a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005126:	4a29      	ldr	r2, [pc, #164]	; (80051cc <HAL_GPIO_Init+0x23c>)
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	089b      	lsrs	r3, r3, #2
 800512c:	3302      	adds	r3, #2
 800512e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	009b      	lsls	r3, r3, #2
 800513c:	220f      	movs	r2, #15
 800513e:	fa02 f303 	lsl.w	r3, r2, r3
 8005142:	43db      	mvns	r3, r3
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	4013      	ands	r3, r2
 8005148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a20      	ldr	r2, [pc, #128]	; (80051d0 <HAL_GPIO_Init+0x240>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d052      	beq.n	80051f8 <HAL_GPIO_Init+0x268>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	4a1f      	ldr	r2, [pc, #124]	; (80051d4 <HAL_GPIO_Init+0x244>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d031      	beq.n	80051be <HAL_GPIO_Init+0x22e>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	4a1e      	ldr	r2, [pc, #120]	; (80051d8 <HAL_GPIO_Init+0x248>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d02b      	beq.n	80051ba <HAL_GPIO_Init+0x22a>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_GPIO_Init+0x24c>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d025      	beq.n	80051b6 <HAL_GPIO_Init+0x226>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <HAL_GPIO_Init+0x250>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d01f      	beq.n	80051b2 <HAL_GPIO_Init+0x222>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	4a1b      	ldr	r2, [pc, #108]	; (80051e4 <HAL_GPIO_Init+0x254>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d019      	beq.n	80051ae <HAL_GPIO_Init+0x21e>
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	4a1a      	ldr	r2, [pc, #104]	; (80051e8 <HAL_GPIO_Init+0x258>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d013      	beq.n	80051aa <HAL_GPIO_Init+0x21a>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a19      	ldr	r2, [pc, #100]	; (80051ec <HAL_GPIO_Init+0x25c>)
 8005186:	4293      	cmp	r3, r2
 8005188:	d00d      	beq.n	80051a6 <HAL_GPIO_Init+0x216>
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_GPIO_Init+0x260>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d007      	beq.n	80051a2 <HAL_GPIO_Init+0x212>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <HAL_GPIO_Init+0x264>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_GPIO_Init+0x20e>
 800519a:	2309      	movs	r3, #9
 800519c:	e02d      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 800519e:	230a      	movs	r3, #10
 80051a0:	e02b      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051a2:	2308      	movs	r3, #8
 80051a4:	e029      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051a6:	2307      	movs	r3, #7
 80051a8:	e027      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051aa:	2306      	movs	r3, #6
 80051ac:	e025      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051ae:	2305      	movs	r3, #5
 80051b0:	e023      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051b2:	2304      	movs	r3, #4
 80051b4:	e021      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051b6:	2303      	movs	r3, #3
 80051b8:	e01f      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051ba:	2302      	movs	r3, #2
 80051bc:	e01d      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051be:	2301      	movs	r3, #1
 80051c0:	e01b      	b.n	80051fa <HAL_GPIO_Init+0x26a>
 80051c2:	bf00      	nop
 80051c4:	58000080 	.word	0x58000080
 80051c8:	58024400 	.word	0x58024400
 80051cc:	58000400 	.word	0x58000400
 80051d0:	58020000 	.word	0x58020000
 80051d4:	58020400 	.word	0x58020400
 80051d8:	58020800 	.word	0x58020800
 80051dc:	58020c00 	.word	0x58020c00
 80051e0:	58021000 	.word	0x58021000
 80051e4:	58021400 	.word	0x58021400
 80051e8:	58021800 	.word	0x58021800
 80051ec:	58021c00 	.word	0x58021c00
 80051f0:	58022000 	.word	0x58022000
 80051f4:	58022400 	.word	0x58022400
 80051f8:	2300      	movs	r3, #0
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	f002 0203 	and.w	r2, r2, #3
 8005200:	0092      	lsls	r2, r2, #2
 8005202:	4093      	lsls	r3, r2
 8005204:	69ba      	ldr	r2, [r7, #24]
 8005206:	4313      	orrs	r3, r2
 8005208:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800520a:	4938      	ldr	r1, [pc, #224]	; (80052ec <HAL_GPIO_Init+0x35c>)
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	089b      	lsrs	r3, r3, #2
 8005210:	3302      	adds	r3, #2
 8005212:	69ba      	ldr	r2, [r7, #24]
 8005214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005218:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	43db      	mvns	r3, r3
 8005224:	69ba      	ldr	r2, [r7, #24]
 8005226:	4013      	ands	r3, r2
 8005228:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	4313      	orrs	r3, r2
 800523c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800523e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005242:	69bb      	ldr	r3, [r7, #24]
 8005244:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005246:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	43db      	mvns	r3, r3
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	4013      	ands	r3, r2
 8005256:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005260:	2b00      	cmp	r3, #0
 8005262:	d003      	beq.n	800526c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800526c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	43db      	mvns	r3, r3
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005290:	69ba      	ldr	r2, [r7, #24]
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	4313      	orrs	r3, r2
 8005296:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005298:	697b      	ldr	r3, [r7, #20]
 800529a:	69ba      	ldr	r2, [r7, #24]
 800529c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	43db      	mvns	r3, r3
 80052a8:	69ba      	ldr	r2, [r7, #24]
 80052aa:	4013      	ands	r3, r2
 80052ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d003      	beq.n	80052c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80052ba:	69ba      	ldr	r2, [r7, #24]
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	3301      	adds	r3, #1
 80052cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	681a      	ldr	r2, [r3, #0]
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
 80052d8:	2b00      	cmp	r3, #0
 80052da:	f47f ae63 	bne.w	8004fa4 <HAL_GPIO_Init+0x14>
  }
}
 80052de:	bf00      	nop
 80052e0:	bf00      	nop
 80052e2:	3724      	adds	r7, #36	; 0x24
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr
 80052ec:	58000400 	.word	0x58000400

080052f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b085      	sub	sp, #20
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	887b      	ldrh	r3, [r7, #2]
 8005302:	4013      	ands	r3, r2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d002      	beq.n	800530e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005308:	2301      	movs	r3, #1
 800530a:	73fb      	strb	r3, [r7, #15]
 800530c:	e001      	b.n	8005312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005312:	7bfb      	ldrb	r3, [r7, #15]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	807b      	strh	r3, [r7, #2]
 800532c:	4613      	mov	r3, r2
 800532e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005330:	787b      	ldrb	r3, [r7, #1]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005336:	887a      	ldrh	r2, [r7, #2]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800533c:	e003      	b.n	8005346 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800533e:	887b      	ldrh	r3, [r7, #2]
 8005340:	041a      	lsls	r2, r3, #16
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	619a      	str	r2, [r3, #24]
}
 8005346:	bf00      	nop
 8005348:	370c      	adds	r7, #12
 800534a:	46bd      	mov	sp, r7
 800534c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005350:	4770      	bx	lr

08005352 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005352:	b480      	push	{r7}
 8005354:	b085      	sub	sp, #20
 8005356:	af00      	add	r7, sp, #0
 8005358:	6078      	str	r0, [r7, #4]
 800535a:	460b      	mov	r3, r1
 800535c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005364:	887a      	ldrh	r2, [r7, #2]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4013      	ands	r3, r2
 800536a:	041a      	lsls	r2, r3, #16
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	43d9      	mvns	r1, r3
 8005370:	887b      	ldrh	r3, [r7, #2]
 8005372:	400b      	ands	r3, r1
 8005374:	431a      	orrs	r2, r3
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	619a      	str	r2, [r3, #24]
}
 800537a:	bf00      	nop
 800537c:	3714      	adds	r7, #20
 800537e:	46bd      	mov	sp, r7
 8005380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005384:	4770      	bx	lr
	...

08005388 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8005388:	b480      	push	{r7}
 800538a:	b083      	sub	sp, #12
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005390:	4a08      	ldr	r2, [pc, #32]	; (80053b4 <HAL_HSEM_FastTake+0x2c>)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	3320      	adds	r3, #32
 8005396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800539a:	4a07      	ldr	r2, [pc, #28]	; (80053b8 <HAL_HSEM_FastTake+0x30>)
 800539c:	4293      	cmp	r3, r2
 800539e:	d101      	bne.n	80053a4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80053a0:	2300      	movs	r3, #0
 80053a2:	e000      	b.n	80053a6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	58026400 	.word	0x58026400
 80053b8:	80000300 	.word	0x80000300

080053bc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80053c6:	4906      	ldr	r1, [pc, #24]	; (80053e0 <HAL_HSEM_Release+0x24>)
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80053d4:	bf00      	nop
 80053d6:	370c      	adds	r7, #12
 80053d8:	46bd      	mov	sp, r7
 80053da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053de:	4770      	bx	lr
 80053e0:	58026400 	.word	0x58026400

080053e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80053e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80053e6:	b08f      	sub	sp, #60	; 0x3c
 80053e8:	af0a      	add	r7, sp, #40	; 0x28
 80053ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d101      	bne.n	80053f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80053f2:	2301      	movs	r3, #1
 80053f4:	e116      	b.n	8005624 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc fcc1 	bl	8001d98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2203      	movs	r2, #3
 800541a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005422:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005426:	2b00      	cmp	r3, #0
 8005428:	d102      	bne.n	8005430 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	2200      	movs	r2, #0
 800542e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	4618      	mov	r0, r3
 8005436:	f004 fded 	bl	800a014 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	603b      	str	r3, [r7, #0]
 8005440:	687e      	ldr	r6, [r7, #4]
 8005442:	466d      	mov	r5, sp
 8005444:	f106 0410 	add.w	r4, r6, #16
 8005448:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800544a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800544c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800544e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005450:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005454:	e885 0003 	stmia.w	r5, {r0, r1}
 8005458:	1d33      	adds	r3, r6, #4
 800545a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800545c:	6838      	ldr	r0, [r7, #0]
 800545e:	f004 fd6b 	bl	8009f38 <USB_CoreInit>
 8005462:	4603      	mov	r3, r0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d005      	beq.n	8005474 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2202      	movs	r2, #2
 800546c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	e0d7      	b.n	8005624 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f004 fddb 	bl	800a036 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005480:	2300      	movs	r3, #0
 8005482:	73fb      	strb	r3, [r7, #15]
 8005484:	e04a      	b.n	800551c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005486:	7bfa      	ldrb	r2, [r7, #15]
 8005488:	6879      	ldr	r1, [r7, #4]
 800548a:	4613      	mov	r3, r2
 800548c:	00db      	lsls	r3, r3, #3
 800548e:	4413      	add	r3, r2
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	440b      	add	r3, r1
 8005494:	333d      	adds	r3, #61	; 0x3d
 8005496:	2201      	movs	r2, #1
 8005498:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	6879      	ldr	r1, [r7, #4]
 800549e:	4613      	mov	r3, r2
 80054a0:	00db      	lsls	r3, r3, #3
 80054a2:	4413      	add	r3, r2
 80054a4:	009b      	lsls	r3, r3, #2
 80054a6:	440b      	add	r3, r1
 80054a8:	333c      	adds	r3, #60	; 0x3c
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80054ae:	7bfa      	ldrb	r2, [r7, #15]
 80054b0:	7bfb      	ldrb	r3, [r7, #15]
 80054b2:	b298      	uxth	r0, r3
 80054b4:	6879      	ldr	r1, [r7, #4]
 80054b6:	4613      	mov	r3, r2
 80054b8:	00db      	lsls	r3, r3, #3
 80054ba:	4413      	add	r3, r2
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	440b      	add	r3, r1
 80054c0:	3344      	adds	r3, #68	; 0x44
 80054c2:	4602      	mov	r2, r0
 80054c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80054c6:	7bfa      	ldrb	r2, [r7, #15]
 80054c8:	6879      	ldr	r1, [r7, #4]
 80054ca:	4613      	mov	r3, r2
 80054cc:	00db      	lsls	r3, r3, #3
 80054ce:	4413      	add	r3, r2
 80054d0:	009b      	lsls	r3, r3, #2
 80054d2:	440b      	add	r3, r1
 80054d4:	3340      	adds	r3, #64	; 0x40
 80054d6:	2200      	movs	r2, #0
 80054d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80054da:	7bfa      	ldrb	r2, [r7, #15]
 80054dc:	6879      	ldr	r1, [r7, #4]
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	440b      	add	r3, r1
 80054e8:	3348      	adds	r3, #72	; 0x48
 80054ea:	2200      	movs	r2, #0
 80054ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80054ee:	7bfa      	ldrb	r2, [r7, #15]
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	4613      	mov	r3, r2
 80054f4:	00db      	lsls	r3, r3, #3
 80054f6:	4413      	add	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	440b      	add	r3, r1
 80054fc:	334c      	adds	r3, #76	; 0x4c
 80054fe:	2200      	movs	r2, #0
 8005500:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005502:	7bfa      	ldrb	r2, [r7, #15]
 8005504:	6879      	ldr	r1, [r7, #4]
 8005506:	4613      	mov	r3, r2
 8005508:	00db      	lsls	r3, r3, #3
 800550a:	4413      	add	r3, r2
 800550c:	009b      	lsls	r3, r3, #2
 800550e:	440b      	add	r3, r1
 8005510:	3354      	adds	r3, #84	; 0x54
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005516:	7bfb      	ldrb	r3, [r7, #15]
 8005518:	3301      	adds	r3, #1
 800551a:	73fb      	strb	r3, [r7, #15]
 800551c:	7bfa      	ldrb	r2, [r7, #15]
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	429a      	cmp	r2, r3
 8005524:	d3af      	bcc.n	8005486 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005526:	2300      	movs	r3, #0
 8005528:	73fb      	strb	r3, [r7, #15]
 800552a:	e044      	b.n	80055b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800552c:	7bfa      	ldrb	r2, [r7, #15]
 800552e:	6879      	ldr	r1, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800553e:	2200      	movs	r2, #0
 8005540:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005542:	7bfa      	ldrb	r2, [r7, #15]
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	00db      	lsls	r3, r3, #3
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005554:	7bfa      	ldrb	r2, [r7, #15]
 8005556:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005558:	7bfa      	ldrb	r2, [r7, #15]
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	4613      	mov	r3, r2
 800555e:	00db      	lsls	r3, r3, #3
 8005560:	4413      	add	r3, r2
 8005562:	009b      	lsls	r3, r3, #2
 8005564:	440b      	add	r3, r1
 8005566:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800556a:	2200      	movs	r2, #0
 800556c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800556e:	7bfa      	ldrb	r2, [r7, #15]
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	4613      	mov	r3, r2
 8005574:	00db      	lsls	r3, r3, #3
 8005576:	4413      	add	r3, r2
 8005578:	009b      	lsls	r3, r3, #2
 800557a:	440b      	add	r3, r1
 800557c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005584:	7bfa      	ldrb	r2, [r7, #15]
 8005586:	6879      	ldr	r1, [r7, #4]
 8005588:	4613      	mov	r3, r2
 800558a:	00db      	lsls	r3, r3, #3
 800558c:	4413      	add	r3, r2
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	440b      	add	r3, r1
 8005592:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005596:	2200      	movs	r2, #0
 8005598:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800559a:	7bfa      	ldrb	r2, [r7, #15]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	4613      	mov	r3, r2
 80055a0:	00db      	lsls	r3, r3, #3
 80055a2:	4413      	add	r3, r2
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	440b      	add	r3, r1
 80055a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80055b0:	7bfb      	ldrb	r3, [r7, #15]
 80055b2:	3301      	adds	r3, #1
 80055b4:	73fb      	strb	r3, [r7, #15]
 80055b6:	7bfa      	ldrb	r2, [r7, #15]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	429a      	cmp	r2, r3
 80055be:	d3b5      	bcc.n	800552c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	603b      	str	r3, [r7, #0]
 80055c6:	687e      	ldr	r6, [r7, #4]
 80055c8:	466d      	mov	r5, sp
 80055ca:	f106 0410 	add.w	r4, r6, #16
 80055ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80055d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80055d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80055da:	e885 0003 	stmia.w	r5, {r0, r1}
 80055de:	1d33      	adds	r3, r6, #4
 80055e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80055e2:	6838      	ldr	r0, [r7, #0]
 80055e4:	f004 fd74 	bl	800a0d0 <USB_DevInit>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2202      	movs	r2, #2
 80055f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80055f6:	2301      	movs	r3, #1
 80055f8:	e014      	b.n	8005624 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2200      	movs	r2, #0
 80055fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2201      	movs	r2, #1
 8005606:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800560e:	2b01      	cmp	r3, #1
 8005610:	d102      	bne.n	8005618 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f80a 	bl	800562c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4618      	mov	r0, r3
 800561e:	f004 ff32 	bl	800a486 <USB_DevDisconnect>

  return HAL_OK;
 8005622:	2300      	movs	r3, #0
}
 8005624:	4618      	mov	r0, r3
 8005626:	3714      	adds	r7, #20
 8005628:	46bd      	mov	sp, r7
 800562a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800562c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2201      	movs	r2, #1
 800563e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2200      	movs	r2, #0
 8005646:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	699b      	ldr	r3, [r3, #24]
 800564e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_PCDEx_ActivateLPM+0x44>)
 800565c:	4313      	orrs	r3, r2
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8005662:	2300      	movs	r3, #0
}
 8005664:	4618      	mov	r0, r3
 8005666:	3714      	adds	r7, #20
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	10000003 	.word	0x10000003

08005674 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b084      	sub	sp, #16
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800567c:	4b29      	ldr	r3, [pc, #164]	; (8005724 <HAL_PWREx_ConfigSupply+0xb0>)
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	f003 0307 	and.w	r3, r3, #7
 8005684:	2b06      	cmp	r3, #6
 8005686:	d00a      	beq.n	800569e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8005688:	4b26      	ldr	r3, [pc, #152]	; (8005724 <HAL_PWREx_ConfigSupply+0xb0>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	429a      	cmp	r2, r3
 8005694:	d001      	beq.n	800569a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e040      	b.n	800571c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800569a:	2300      	movs	r3, #0
 800569c:	e03e      	b.n	800571c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800569e:	4b21      	ldr	r3, [pc, #132]	; (8005724 <HAL_PWREx_ConfigSupply+0xb0>)
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80056a6:	491f      	ldr	r1, [pc, #124]	; (8005724 <HAL_PWREx_ConfigSupply+0xb0>)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80056ae:	f7fc fcc5 	bl	800203c <HAL_GetTick>
 80056b2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056b4:	e009      	b.n	80056ca <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056b6:	f7fc fcc1 	bl	800203c <HAL_GetTick>
 80056ba:	4602      	mov	r2, r0
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80056c4:	d901      	bls.n	80056ca <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80056c6:	2301      	movs	r3, #1
 80056c8:	e028      	b.n	800571c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80056ca:	4b16      	ldr	r3, [pc, #88]	; (8005724 <HAL_PWREx_ConfigSupply+0xb0>)
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80056d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056d6:	d1ee      	bne.n	80056b6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2b1e      	cmp	r3, #30
 80056dc:	d008      	beq.n	80056f0 <HAL_PWREx_ConfigSupply+0x7c>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2b2e      	cmp	r3, #46	; 0x2e
 80056e2:	d005      	beq.n	80056f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b1d      	cmp	r3, #29
 80056e8:	d002      	beq.n	80056f0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b2d      	cmp	r3, #45	; 0x2d
 80056ee:	d114      	bne.n	800571a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80056f0:	f7fc fca4 	bl	800203c <HAL_GetTick>
 80056f4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80056f6:	e009      	b.n	800570c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80056f8:	f7fc fca0 	bl	800203c <HAL_GetTick>
 80056fc:	4602      	mov	r2, r0
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005706:	d901      	bls.n	800570c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	e007      	b.n	800571c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800570c:	4b05      	ldr	r3, [pc, #20]	; (8005724 <HAL_PWREx_ConfigSupply+0xb0>)
 800570e:	68db      	ldr	r3, [r3, #12]
 8005710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005718:	d1ee      	bne.n	80056f8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3710      	adds	r7, #16
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	58024800 	.word	0x58024800

08005728 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005728:	b480      	push	{r7}
 800572a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800572c:	4b05      	ldr	r3, [pc, #20]	; (8005744 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	4a04      	ldr	r2, [pc, #16]	; (8005744 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8005732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005736:	60d3      	str	r3, [r2, #12]
}
 8005738:	bf00      	nop
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	58024800 	.word	0x58024800

08005748 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b08c      	sub	sp, #48	; 0x30
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d102      	bne.n	800575c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	f000 bc1d 	b.w	8005f96 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0301 	and.w	r3, r3, #1
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8087 	beq.w	8005878 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800576a:	4b99      	ldr	r3, [pc, #612]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005774:	4b96      	ldr	r3, [pc, #600]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005778:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800577a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800577c:	2b10      	cmp	r3, #16
 800577e:	d007      	beq.n	8005790 <HAL_RCC_OscConfig+0x48>
 8005780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005782:	2b18      	cmp	r3, #24
 8005784:	d110      	bne.n	80057a8 <HAL_RCC_OscConfig+0x60>
 8005786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005788:	f003 0303 	and.w	r3, r3, #3
 800578c:	2b02      	cmp	r3, #2
 800578e:	d10b      	bne.n	80057a8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005790:	4b8f      	ldr	r3, [pc, #572]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d06c      	beq.n	8005876 <HAL_RCC_OscConfig+0x12e>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d168      	bne.n	8005876 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e3f6      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057b0:	d106      	bne.n	80057c0 <HAL_RCC_OscConfig+0x78>
 80057b2:	4b87      	ldr	r3, [pc, #540]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a86      	ldr	r2, [pc, #536]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e02e      	b.n	800581e <HAL_RCC_OscConfig+0xd6>
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	685b      	ldr	r3, [r3, #4]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d10c      	bne.n	80057e2 <HAL_RCC_OscConfig+0x9a>
 80057c8:	4b81      	ldr	r3, [pc, #516]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a80      	ldr	r2, [pc, #512]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057d2:	6013      	str	r3, [r2, #0]
 80057d4:	4b7e      	ldr	r3, [pc, #504]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a7d      	ldr	r2, [pc, #500]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80057de:	6013      	str	r3, [r2, #0]
 80057e0:	e01d      	b.n	800581e <HAL_RCC_OscConfig+0xd6>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057ea:	d10c      	bne.n	8005806 <HAL_RCC_OscConfig+0xbe>
 80057ec:	4b78      	ldr	r3, [pc, #480]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	4a77      	ldr	r2, [pc, #476]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057f6:	6013      	str	r3, [r2, #0]
 80057f8:	4b75      	ldr	r3, [pc, #468]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a74      	ldr	r2, [pc, #464]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80057fe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	e00b      	b.n	800581e <HAL_RCC_OscConfig+0xd6>
 8005806:	4b72      	ldr	r3, [pc, #456]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	4a71      	ldr	r2, [pc, #452]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800580c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005810:	6013      	str	r3, [r2, #0]
 8005812:	4b6f      	ldr	r3, [pc, #444]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6e      	ldr	r2, [pc, #440]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005818:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800581c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d013      	beq.n	800584e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005826:	f7fc fc09 	bl	800203c <HAL_GetTick>
 800582a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800582e:	f7fc fc05 	bl	800203c <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b64      	cmp	r3, #100	; 0x64
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e3aa      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005840:	4b63      	ldr	r3, [pc, #396]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d0f0      	beq.n	800582e <HAL_RCC_OscConfig+0xe6>
 800584c:	e014      	b.n	8005878 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800584e:	f7fc fbf5 	bl	800203c <HAL_GetTick>
 8005852:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005854:	e008      	b.n	8005868 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005856:	f7fc fbf1 	bl	800203c <HAL_GetTick>
 800585a:	4602      	mov	r2, r0
 800585c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800585e:	1ad3      	subs	r3, r2, r3
 8005860:	2b64      	cmp	r3, #100	; 0x64
 8005862:	d901      	bls.n	8005868 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8005864:	2303      	movs	r3, #3
 8005866:	e396      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8005868:	4b59      	ldr	r3, [pc, #356]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1f0      	bne.n	8005856 <HAL_RCC_OscConfig+0x10e>
 8005874:	e000      	b.n	8005878 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005876:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f003 0302 	and.w	r3, r3, #2
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 80cb 	beq.w	8005a1c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005886:	4b52      	ldr	r3, [pc, #328]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800588e:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005890:	4b4f      	ldr	r3, [pc, #316]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d007      	beq.n	80058ac <HAL_RCC_OscConfig+0x164>
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	2b18      	cmp	r3, #24
 80058a0:	d156      	bne.n	8005950 <HAL_RCC_OscConfig+0x208>
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	f003 0303 	and.w	r3, r3, #3
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d151      	bne.n	8005950 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80058ac:	4b48      	ldr	r3, [pc, #288]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0304 	and.w	r3, r3, #4
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <HAL_RCC_OscConfig+0x17c>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d101      	bne.n	80058c4 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 80058c0:	2301      	movs	r3, #1
 80058c2:	e368      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80058c4:	4b42      	ldr	r3, [pc, #264]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f023 0219 	bic.w	r2, r3, #25
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	493f      	ldr	r1, [pc, #252]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80058d6:	f7fc fbb1 	bl	800203c <HAL_GetTick>
 80058da:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058de:	f7fc fbad 	bl	800203c <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e352      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80058f0:	4b37      	ldr	r3, [pc, #220]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0304 	and.w	r3, r3, #4
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fc:	f7fc fbce 	bl	800209c <HAL_GetREVID>
 8005900:	4603      	mov	r3, r0
 8005902:	f241 0203 	movw	r2, #4099	; 0x1003
 8005906:	4293      	cmp	r3, r2
 8005908:	d817      	bhi.n	800593a <HAL_RCC_OscConfig+0x1f2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	2b40      	cmp	r3, #64	; 0x40
 8005910:	d108      	bne.n	8005924 <HAL_RCC_OscConfig+0x1dc>
 8005912:	4b2f      	ldr	r3, [pc, #188]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800591a:	4a2d      	ldr	r2, [pc, #180]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800591c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005920:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005922:	e07b      	b.n	8005a1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005924:	4b2a      	ldr	r3, [pc, #168]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	691b      	ldr	r3, [r3, #16]
 8005930:	031b      	lsls	r3, r3, #12
 8005932:	4927      	ldr	r1, [pc, #156]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005934:	4313      	orrs	r3, r2
 8005936:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005938:	e070      	b.n	8005a1c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800593a:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	691b      	ldr	r3, [r3, #16]
 8005946:	061b      	lsls	r3, r3, #24
 8005948:	4921      	ldr	r1, [pc, #132]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800594a:	4313      	orrs	r3, r2
 800594c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800594e:	e065      	b.n	8005a1c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	68db      	ldr	r3, [r3, #12]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d048      	beq.n	80059ea <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005958:	4b1d      	ldr	r3, [pc, #116]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f023 0219 	bic.w	r2, r3, #25
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	68db      	ldr	r3, [r3, #12]
 8005964:	491a      	ldr	r1, [pc, #104]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005966:	4313      	orrs	r3, r2
 8005968:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800596a:	f7fc fb67 	bl	800203c <HAL_GetTick>
 800596e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005970:	e008      	b.n	8005984 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005972:	f7fc fb63 	bl	800203c <HAL_GetTick>
 8005976:	4602      	mov	r2, r0
 8005978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	2b02      	cmp	r3, #2
 800597e:	d901      	bls.n	8005984 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e308      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005984:	4b12      	ldr	r3, [pc, #72]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f003 0304 	and.w	r3, r3, #4
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0f0      	beq.n	8005972 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005990:	f7fc fb84 	bl	800209c <HAL_GetREVID>
 8005994:	4603      	mov	r3, r0
 8005996:	f241 0203 	movw	r2, #4099	; 0x1003
 800599a:	4293      	cmp	r3, r2
 800599c:	d81a      	bhi.n	80059d4 <HAL_RCC_OscConfig+0x28c>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b40      	cmp	r3, #64	; 0x40
 80059a4:	d108      	bne.n	80059b8 <HAL_RCC_OscConfig+0x270>
 80059a6:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80059ae:	4a08      	ldr	r2, [pc, #32]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80059b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059b4:	6053      	str	r3, [r2, #4]
 80059b6:	e031      	b.n	8005a1c <HAL_RCC_OscConfig+0x2d4>
 80059b8:	4b05      	ldr	r3, [pc, #20]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80059ba:	685b      	ldr	r3, [r3, #4]
 80059bc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	691b      	ldr	r3, [r3, #16]
 80059c4:	031b      	lsls	r3, r3, #12
 80059c6:	4902      	ldr	r1, [pc, #8]	; (80059d0 <HAL_RCC_OscConfig+0x288>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	604b      	str	r3, [r1, #4]
 80059cc:	e026      	b.n	8005a1c <HAL_RCC_OscConfig+0x2d4>
 80059ce:	bf00      	nop
 80059d0:	58024400 	.word	0x58024400
 80059d4:	4b9a      	ldr	r3, [pc, #616]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 80059d6:	685b      	ldr	r3, [r3, #4]
 80059d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	061b      	lsls	r3, r3, #24
 80059e2:	4997      	ldr	r1, [pc, #604]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 80059e4:	4313      	orrs	r3, r2
 80059e6:	604b      	str	r3, [r1, #4]
 80059e8:	e018      	b.n	8005a1c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059ea:	4b95      	ldr	r3, [pc, #596]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a94      	ldr	r2, [pc, #592]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 80059f0:	f023 0301 	bic.w	r3, r3, #1
 80059f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059f6:	f7fc fb21 	bl	800203c <HAL_GetTick>
 80059fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80059fc:	e008      	b.n	8005a10 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059fe:	f7fc fb1d 	bl	800203c <HAL_GetTick>
 8005a02:	4602      	mov	r2, r0
 8005a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a06:	1ad3      	subs	r3, r2, r3
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d901      	bls.n	8005a10 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8005a0c:	2303      	movs	r3, #3
 8005a0e:	e2c2      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005a10:	4b8b      	ldr	r3, [pc, #556]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f003 0304 	and.w	r3, r3, #4
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d1f0      	bne.n	80059fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0310 	and.w	r3, r3, #16
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	f000 80a9 	beq.w	8005b7c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a2a:	4b85      	ldr	r3, [pc, #532]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a32:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005a34:	4b82      	ldr	r3, [pc, #520]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a38:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b08      	cmp	r3, #8
 8005a3e:	d007      	beq.n	8005a50 <HAL_RCC_OscConfig+0x308>
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	2b18      	cmp	r3, #24
 8005a44:	d13a      	bne.n	8005abc <HAL_RCC_OscConfig+0x374>
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	f003 0303 	and.w	r3, r3, #3
 8005a4c:	2b01      	cmp	r3, #1
 8005a4e:	d135      	bne.n	8005abc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a50:	4b7b      	ldr	r3, [pc, #492]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d005      	beq.n	8005a68 <HAL_RCC_OscConfig+0x320>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	69db      	ldr	r3, [r3, #28]
 8005a60:	2b80      	cmp	r3, #128	; 0x80
 8005a62:	d001      	beq.n	8005a68 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8005a64:	2301      	movs	r3, #1
 8005a66:	e296      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a68:	f7fc fb18 	bl	800209c <HAL_GetREVID>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	f241 0203 	movw	r2, #4099	; 0x1003
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d817      	bhi.n	8005aa6 <HAL_RCC_OscConfig+0x35e>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	2b20      	cmp	r3, #32
 8005a7c:	d108      	bne.n	8005a90 <HAL_RCC_OscConfig+0x348>
 8005a7e:	4b70      	ldr	r3, [pc, #448]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005a86:	4a6e      	ldr	r2, [pc, #440]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a8c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005a8e:	e075      	b.n	8005b7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005a90:	4b6b      	ldr	r3, [pc, #428]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6a1b      	ldr	r3, [r3, #32]
 8005a9c:	069b      	lsls	r3, r3, #26
 8005a9e:	4968      	ldr	r1, [pc, #416]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aa4:	e06a      	b.n	8005b7c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005aa6:	4b66      	ldr	r3, [pc, #408]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	061b      	lsls	r3, r3, #24
 8005ab4:	4962      	ldr	r1, [pc, #392]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005aba:	e05f      	b.n	8005b7c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	69db      	ldr	r3, [r3, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d042      	beq.n	8005b4a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005ac4:	4b5e      	ldr	r3, [pc, #376]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	4a5d      	ldr	r2, [pc, #372]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005aca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ace:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ad0:	f7fc fab4 	bl	800203c <HAL_GetTick>
 8005ad4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005ad6:	e008      	b.n	8005aea <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005ad8:	f7fc fab0 	bl	800203c <HAL_GetTick>
 8005adc:	4602      	mov	r2, r0
 8005ade:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ae0:	1ad3      	subs	r3, r2, r3
 8005ae2:	2b02      	cmp	r3, #2
 8005ae4:	d901      	bls.n	8005aea <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005ae6:	2303      	movs	r3, #3
 8005ae8:	e255      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005aea:	4b55      	ldr	r3, [pc, #340]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d0f0      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005af6:	f7fc fad1 	bl	800209c <HAL_GetREVID>
 8005afa:	4603      	mov	r3, r0
 8005afc:	f241 0203 	movw	r2, #4099	; 0x1003
 8005b00:	4293      	cmp	r3, r2
 8005b02:	d817      	bhi.n	8005b34 <HAL_RCC_OscConfig+0x3ec>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a1b      	ldr	r3, [r3, #32]
 8005b08:	2b20      	cmp	r3, #32
 8005b0a:	d108      	bne.n	8005b1e <HAL_RCC_OscConfig+0x3d6>
 8005b0c:	4b4c      	ldr	r3, [pc, #304]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005b14:	4a4a      	ldr	r2, [pc, #296]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005b1a:	6053      	str	r3, [r2, #4]
 8005b1c:	e02e      	b.n	8005b7c <HAL_RCC_OscConfig+0x434>
 8005b1e:	4b48      	ldr	r3, [pc, #288]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6a1b      	ldr	r3, [r3, #32]
 8005b2a:	069b      	lsls	r3, r3, #26
 8005b2c:	4944      	ldr	r1, [pc, #272]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	604b      	str	r3, [r1, #4]
 8005b32:	e023      	b.n	8005b7c <HAL_RCC_OscConfig+0x434>
 8005b34:	4b42      	ldr	r3, [pc, #264]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	6a1b      	ldr	r3, [r3, #32]
 8005b40:	061b      	lsls	r3, r3, #24
 8005b42:	493f      	ldr	r1, [pc, #252]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	60cb      	str	r3, [r1, #12]
 8005b48:	e018      	b.n	8005b7c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8005b4a:	4b3d      	ldr	r3, [pc, #244]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b56:	f7fc fa71 	bl	800203c <HAL_GetTick>
 8005b5a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b5c:	e008      	b.n	8005b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005b5e:	f7fc fa6d 	bl	800203c <HAL_GetTick>
 8005b62:	4602      	mov	r2, r0
 8005b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b66:	1ad3      	subs	r3, r2, r3
 8005b68:	2b02      	cmp	r3, #2
 8005b6a:	d901      	bls.n	8005b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005b6c:	2303      	movs	r3, #3
 8005b6e:	e212      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8005b70:	4b33      	ldr	r3, [pc, #204]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d1f0      	bne.n	8005b5e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f003 0308 	and.w	r3, r3, #8
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d036      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	695b      	ldr	r3, [r3, #20]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d019      	beq.n	8005bc4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005b90:	4b2b      	ldr	r3, [pc, #172]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005b94:	4a2a      	ldr	r2, [pc, #168]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005b96:	f043 0301 	orr.w	r3, r3, #1
 8005b9a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b9c:	f7fc fa4e 	bl	800203c <HAL_GetTick>
 8005ba0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005ba2:	e008      	b.n	8005bb6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ba4:	f7fc fa4a 	bl	800203c <HAL_GetTick>
 8005ba8:	4602      	mov	r2, r0
 8005baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bac:	1ad3      	subs	r3, r2, r3
 8005bae:	2b02      	cmp	r3, #2
 8005bb0:	d901      	bls.n	8005bb6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005bb2:	2303      	movs	r3, #3
 8005bb4:	e1ef      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005bb6:	4b22      	ldr	r3, [pc, #136]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005bb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bba:	f003 0302 	and.w	r3, r3, #2
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d0f0      	beq.n	8005ba4 <HAL_RCC_OscConfig+0x45c>
 8005bc2:	e018      	b.n	8005bf6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005bc4:	4b1e      	ldr	r3, [pc, #120]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005bc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bc8:	4a1d      	ldr	r2, [pc, #116]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005bca:	f023 0301 	bic.w	r3, r3, #1
 8005bce:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bd0:	f7fc fa34 	bl	800203c <HAL_GetTick>
 8005bd4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bd6:	e008      	b.n	8005bea <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005bd8:	f7fc fa30 	bl	800203c <HAL_GetTick>
 8005bdc:	4602      	mov	r2, r0
 8005bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005be0:	1ad3      	subs	r3, r2, r3
 8005be2:	2b02      	cmp	r3, #2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e1d5      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005bea:	4b15      	ldr	r3, [pc, #84]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1f0      	bne.n	8005bd8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 0320 	and.w	r3, r3, #32
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d039      	beq.n	8005c76 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	699b      	ldr	r3, [r3, #24]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d01c      	beq.n	8005c44 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005c0a:	4b0d      	ldr	r3, [pc, #52]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	4a0c      	ldr	r2, [pc, #48]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005c10:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005c14:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c16:	f7fc fa11 	bl	800203c <HAL_GetTick>
 8005c1a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c1c:	e008      	b.n	8005c30 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c1e:	f7fc fa0d 	bl	800203c <HAL_GetTick>
 8005c22:	4602      	mov	r2, r0
 8005c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c26:	1ad3      	subs	r3, r2, r3
 8005c28:	2b02      	cmp	r3, #2
 8005c2a:	d901      	bls.n	8005c30 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005c2c:	2303      	movs	r3, #3
 8005c2e:	e1b2      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005c30:	4b03      	ldr	r3, [pc, #12]	; (8005c40 <HAL_RCC_OscConfig+0x4f8>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d0f0      	beq.n	8005c1e <HAL_RCC_OscConfig+0x4d6>
 8005c3c:	e01b      	b.n	8005c76 <HAL_RCC_OscConfig+0x52e>
 8005c3e:	bf00      	nop
 8005c40:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005c44:	4b9b      	ldr	r3, [pc, #620]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a9a      	ldr	r2, [pc, #616]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005c4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c4e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005c50:	f7fc f9f4 	bl	800203c <HAL_GetTick>
 8005c54:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c56:	e008      	b.n	8005c6a <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005c58:	f7fc f9f0 	bl	800203c <HAL_GetTick>
 8005c5c:	4602      	mov	r2, r0
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c60:	1ad3      	subs	r3, r2, r3
 8005c62:	2b02      	cmp	r3, #2
 8005c64:	d901      	bls.n	8005c6a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e195      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005c6a:	4b92      	ldr	r3, [pc, #584]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d1f0      	bne.n	8005c58 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f003 0304 	and.w	r3, r3, #4
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	f000 8081 	beq.w	8005d86 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005c84:	4b8c      	ldr	r3, [pc, #560]	; (8005eb8 <HAL_RCC_OscConfig+0x770>)
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	4a8b      	ldr	r2, [pc, #556]	; (8005eb8 <HAL_RCC_OscConfig+0x770>)
 8005c8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005c90:	f7fc f9d4 	bl	800203c <HAL_GetTick>
 8005c94:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005c98:	f7fc f9d0 	bl	800203c <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e175      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005caa:	4b83      	ldr	r3, [pc, #524]	; (8005eb8 <HAL_RCC_OscConfig+0x770>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d0f0      	beq.n	8005c98 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d106      	bne.n	8005ccc <HAL_RCC_OscConfig+0x584>
 8005cbe:	4b7d      	ldr	r3, [pc, #500]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cc2:	4a7c      	ldr	r2, [pc, #496]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005cc4:	f043 0301 	orr.w	r3, r3, #1
 8005cc8:	6713      	str	r3, [r2, #112]	; 0x70
 8005cca:	e02d      	b.n	8005d28 <HAL_RCC_OscConfig+0x5e0>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	689b      	ldr	r3, [r3, #8]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10c      	bne.n	8005cee <HAL_RCC_OscConfig+0x5a6>
 8005cd4:	4b77      	ldr	r3, [pc, #476]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cd8:	4a76      	ldr	r2, [pc, #472]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005cda:	f023 0301 	bic.w	r3, r3, #1
 8005cde:	6713      	str	r3, [r2, #112]	; 0x70
 8005ce0:	4b74      	ldr	r3, [pc, #464]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ce4:	4a73      	ldr	r2, [pc, #460]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005ce6:	f023 0304 	bic.w	r3, r3, #4
 8005cea:	6713      	str	r3, [r2, #112]	; 0x70
 8005cec:	e01c      	b.n	8005d28 <HAL_RCC_OscConfig+0x5e0>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	2b05      	cmp	r3, #5
 8005cf4:	d10c      	bne.n	8005d10 <HAL_RCC_OscConfig+0x5c8>
 8005cf6:	4b6f      	ldr	r3, [pc, #444]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005cfa:	4a6e      	ldr	r2, [pc, #440]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005cfc:	f043 0304 	orr.w	r3, r3, #4
 8005d00:	6713      	str	r3, [r2, #112]	; 0x70
 8005d02:	4b6c      	ldr	r3, [pc, #432]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d06:	4a6b      	ldr	r2, [pc, #428]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	6713      	str	r3, [r2, #112]	; 0x70
 8005d0e:	e00b      	b.n	8005d28 <HAL_RCC_OscConfig+0x5e0>
 8005d10:	4b68      	ldr	r3, [pc, #416]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d14:	4a67      	ldr	r2, [pc, #412]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d16:	f023 0301 	bic.w	r3, r3, #1
 8005d1a:	6713      	str	r3, [r2, #112]	; 0x70
 8005d1c:	4b65      	ldr	r3, [pc, #404]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d20:	4a64      	ldr	r2, [pc, #400]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d22:	f023 0304 	bic.w	r3, r3, #4
 8005d26:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d015      	beq.n	8005d5c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d30:	f7fc f984 	bl	800203c <HAL_GetTick>
 8005d34:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d38:	f7fc f980 	bl	800203c <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e123      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005d4e:	4b59      	ldr	r3, [pc, #356]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d52:	f003 0302 	and.w	r3, r3, #2
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d0ee      	beq.n	8005d38 <HAL_RCC_OscConfig+0x5f0>
 8005d5a:	e014      	b.n	8005d86 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d5c:	f7fc f96e 	bl	800203c <HAL_GetTick>
 8005d60:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d62:	e00a      	b.n	8005d7a <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d64:	f7fc f96a 	bl	800203c <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6c:	1ad3      	subs	r3, r2, r3
 8005d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e10d      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005d7a:	4b4e      	ldr	r3, [pc, #312]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d7e:	f003 0302 	and.w	r3, r3, #2
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1ee      	bne.n	8005d64 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 8102 	beq.w	8005f94 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005d90:	4b48      	ldr	r3, [pc, #288]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005d92:	691b      	ldr	r3, [r3, #16]
 8005d94:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d98:	2b18      	cmp	r3, #24
 8005d9a:	f000 80bd 	beq.w	8005f18 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	f040 809e 	bne.w	8005ee4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005da8:	4b42      	ldr	r3, [pc, #264]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	4a41      	ldr	r2, [pc, #260]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005dae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005db4:	f7fc f942 	bl	800203c <HAL_GetTick>
 8005db8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dba:	e008      	b.n	8005dce <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005dbc:	f7fc f93e 	bl	800203c <HAL_GetTick>
 8005dc0:	4602      	mov	r2, r0
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc4:	1ad3      	subs	r3, r2, r3
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d901      	bls.n	8005dce <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e0e3      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005dce:	4b39      	ldr	r3, [pc, #228]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d1f0      	bne.n	8005dbc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005dda:	4b36      	ldr	r3, [pc, #216]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005dde:	4b37      	ldr	r3, [pc, #220]	; (8005ebc <HAL_RCC_OscConfig+0x774>)
 8005de0:	4013      	ands	r3, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005de6:	687a      	ldr	r2, [r7, #4]
 8005de8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005dea:	0112      	lsls	r2, r2, #4
 8005dec:	430a      	orrs	r2, r1
 8005dee:	4931      	ldr	r1, [pc, #196]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005df0:	4313      	orrs	r3, r2
 8005df2:	628b      	str	r3, [r1, #40]	; 0x28
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005df8:	3b01      	subs	r3, #1
 8005dfa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e02:	3b01      	subs	r3, #1
 8005e04:	025b      	lsls	r3, r3, #9
 8005e06:	b29b      	uxth	r3, r3
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e0e:	3b01      	subs	r3, #1
 8005e10:	041b      	lsls	r3, r3, #16
 8005e12:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e1c:	3b01      	subs	r3, #1
 8005e1e:	061b      	lsls	r3, r3, #24
 8005e20:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005e24:	4923      	ldr	r1, [pc, #140]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e26:	4313      	orrs	r3, r2
 8005e28:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005e2a:	4b22      	ldr	r3, [pc, #136]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e2e:	4a21      	ldr	r2, [pc, #132]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e30:	f023 0301 	bic.w	r3, r3, #1
 8005e34:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005e36:	4b1f      	ldr	r3, [pc, #124]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e3a:	4b21      	ldr	r3, [pc, #132]	; (8005ec0 <HAL_RCC_OscConfig+0x778>)
 8005e3c:	4013      	ands	r3, r2
 8005e3e:	687a      	ldr	r2, [r7, #4]
 8005e40:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005e42:	00d2      	lsls	r2, r2, #3
 8005e44:	491b      	ldr	r1, [pc, #108]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005e4a:	4b1a      	ldr	r3, [pc, #104]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4e:	f023 020c 	bic.w	r2, r3, #12
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e56:	4917      	ldr	r1, [pc, #92]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005e5c:	4b15      	ldr	r3, [pc, #84]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e60:	f023 0202 	bic.w	r2, r3, #2
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e68:	4912      	ldr	r1, [pc, #72]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e6a:	4313      	orrs	r3, r2
 8005e6c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005e6e:	4b11      	ldr	r3, [pc, #68]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e72:	4a10      	ldr	r2, [pc, #64]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e78:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e7a:	4b0e      	ldr	r3, [pc, #56]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7e:	4a0d      	ldr	r2, [pc, #52]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e84:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005e86:	4b0b      	ldr	r3, [pc, #44]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8a:	4a0a      	ldr	r2, [pc, #40]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005e92:	4b08      	ldr	r3, [pc, #32]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e96:	4a07      	ldr	r2, [pc, #28]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e9e:	4b05      	ldr	r3, [pc, #20]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a04      	ldr	r2, [pc, #16]	; (8005eb4 <HAL_RCC_OscConfig+0x76c>)
 8005ea4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005eaa:	f7fc f8c7 	bl	800203c <HAL_GetTick>
 8005eae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005eb0:	e011      	b.n	8005ed6 <HAL_RCC_OscConfig+0x78e>
 8005eb2:	bf00      	nop
 8005eb4:	58024400 	.word	0x58024400
 8005eb8:	58024800 	.word	0x58024800
 8005ebc:	fffffc0c 	.word	0xfffffc0c
 8005ec0:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ec4:	f7fc f8ba 	bl	800203c <HAL_GetTick>
 8005ec8:	4602      	mov	r2, r0
 8005eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ecc:	1ad3      	subs	r3, r2, r3
 8005ece:	2b02      	cmp	r3, #2
 8005ed0:	d901      	bls.n	8005ed6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005ed2:	2303      	movs	r3, #3
 8005ed4:	e05f      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005ed6:	4b32      	ldr	r3, [pc, #200]	; (8005fa0 <HAL_RCC_OscConfig+0x858>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d0f0      	beq.n	8005ec4 <HAL_RCC_OscConfig+0x77c>
 8005ee2:	e057      	b.n	8005f94 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005ee4:	4b2e      	ldr	r3, [pc, #184]	; (8005fa0 <HAL_RCC_OscConfig+0x858>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a2d      	ldr	r2, [pc, #180]	; (8005fa0 <HAL_RCC_OscConfig+0x858>)
 8005eea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005eee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ef0:	f7fc f8a4 	bl	800203c <HAL_GetTick>
 8005ef4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005ef6:	e008      	b.n	8005f0a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005ef8:	f7fc f8a0 	bl	800203c <HAL_GetTick>
 8005efc:	4602      	mov	r2, r0
 8005efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f00:	1ad3      	subs	r3, r2, r3
 8005f02:	2b02      	cmp	r3, #2
 8005f04:	d901      	bls.n	8005f0a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005f06:	2303      	movs	r3, #3
 8005f08:	e045      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005f0a:	4b25      	ldr	r3, [pc, #148]	; (8005fa0 <HAL_RCC_OscConfig+0x858>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d1f0      	bne.n	8005ef8 <HAL_RCC_OscConfig+0x7b0>
 8005f16:	e03d      	b.n	8005f94 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005f18:	4b21      	ldr	r3, [pc, #132]	; (8005fa0 <HAL_RCC_OscConfig+0x858>)
 8005f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f1c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005f1e:	4b20      	ldr	r3, [pc, #128]	; (8005fa0 <HAL_RCC_OscConfig+0x858>)
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d031      	beq.n	8005f90 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	f003 0203 	and.w	r2, r3, #3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d12a      	bne.n	8005f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f3a:	693b      	ldr	r3, [r7, #16]
 8005f3c:	091b      	lsrs	r3, r3, #4
 8005f3e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d122      	bne.n	8005f90 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f54:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005f56:	429a      	cmp	r2, r3
 8005f58:	d11a      	bne.n	8005f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	0a5b      	lsrs	r3, r3, #9
 8005f5e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f66:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005f68:	429a      	cmp	r2, r3
 8005f6a:	d111      	bne.n	8005f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d108      	bne.n	8005f90 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	0e1b      	lsrs	r3, r3, #24
 8005f82:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f8a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005f8c:	429a      	cmp	r2, r3
 8005f8e:	d001      	beq.n	8005f94 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	e000      	b.n	8005f96 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005f94:	2300      	movs	r3, #0
}
 8005f96:	4618      	mov	r0, r3
 8005f98:	3730      	adds	r7, #48	; 0x30
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	58024400 	.word	0x58024400

08005fa4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
 8005fac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d101      	bne.n	8005fb8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005fb4:	2301      	movs	r3, #1
 8005fb6:	e19c      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005fb8:	4b8a      	ldr	r3, [pc, #552]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f003 030f 	and.w	r3, r3, #15
 8005fc0:	683a      	ldr	r2, [r7, #0]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d910      	bls.n	8005fe8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005fc6:	4b87      	ldr	r3, [pc, #540]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f023 020f 	bic.w	r2, r3, #15
 8005fce:	4985      	ldr	r1, [pc, #532]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005fd6:	4b83      	ldr	r3, [pc, #524]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	f003 030f 	and.w	r3, r3, #15
 8005fde:	683a      	ldr	r2, [r7, #0]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d001      	beq.n	8005fe8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e184      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f003 0304 	and.w	r3, r3, #4
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d010      	beq.n	8006016 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	691a      	ldr	r2, [r3, #16]
 8005ff8:	4b7b      	ldr	r3, [pc, #492]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006000:	429a      	cmp	r2, r3
 8006002:	d908      	bls.n	8006016 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006004:	4b78      	ldr	r3, [pc, #480]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006006:	699b      	ldr	r3, [r3, #24]
 8006008:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	4975      	ldr	r1, [pc, #468]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006012:	4313      	orrs	r3, r2
 8006014:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0308 	and.w	r3, r3, #8
 800601e:	2b00      	cmp	r3, #0
 8006020:	d010      	beq.n	8006044 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	695a      	ldr	r2, [r3, #20]
 8006026:	4b70      	ldr	r3, [pc, #448]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006028:	69db      	ldr	r3, [r3, #28]
 800602a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800602e:	429a      	cmp	r2, r3
 8006030:	d908      	bls.n	8006044 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006032:	4b6d      	ldr	r3, [pc, #436]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006034:	69db      	ldr	r3, [r3, #28]
 8006036:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	695b      	ldr	r3, [r3, #20]
 800603e:	496a      	ldr	r1, [pc, #424]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006040:	4313      	orrs	r3, r2
 8006042:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b00      	cmp	r3, #0
 800604e:	d010      	beq.n	8006072 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	699a      	ldr	r2, [r3, #24]
 8006054:	4b64      	ldr	r3, [pc, #400]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006056:	69db      	ldr	r3, [r3, #28]
 8006058:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800605c:	429a      	cmp	r2, r3
 800605e:	d908      	bls.n	8006072 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006060:	4b61      	ldr	r3, [pc, #388]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006062:	69db      	ldr	r3, [r3, #28]
 8006064:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	495e      	ldr	r1, [pc, #376]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 800606e:	4313      	orrs	r3, r2
 8006070:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0320 	and.w	r3, r3, #32
 800607a:	2b00      	cmp	r3, #0
 800607c:	d010      	beq.n	80060a0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	69da      	ldr	r2, [r3, #28]
 8006082:	4b59      	ldr	r3, [pc, #356]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800608a:	429a      	cmp	r2, r3
 800608c:	d908      	bls.n	80060a0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800608e:	4b56      	ldr	r3, [pc, #344]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006090:	6a1b      	ldr	r3, [r3, #32]
 8006092:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	69db      	ldr	r3, [r3, #28]
 800609a:	4953      	ldr	r1, [pc, #332]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 800609c:	4313      	orrs	r3, r2
 800609e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0302 	and.w	r3, r3, #2
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d010      	beq.n	80060ce <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	68da      	ldr	r2, [r3, #12]
 80060b0:	4b4d      	ldr	r3, [pc, #308]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80060b2:	699b      	ldr	r3, [r3, #24]
 80060b4:	f003 030f 	and.w	r3, r3, #15
 80060b8:	429a      	cmp	r2, r3
 80060ba:	d908      	bls.n	80060ce <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060bc:	4b4a      	ldr	r3, [pc, #296]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80060be:	699b      	ldr	r3, [r3, #24]
 80060c0:	f023 020f 	bic.w	r2, r3, #15
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	4947      	ldr	r1, [pc, #284]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80060ca:	4313      	orrs	r3, r2
 80060cc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d055      	beq.n	8006186 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80060da:	4b43      	ldr	r3, [pc, #268]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80060dc:	699b      	ldr	r3, [r3, #24]
 80060de:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	689b      	ldr	r3, [r3, #8]
 80060e6:	4940      	ldr	r1, [pc, #256]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80060e8:	4313      	orrs	r3, r2
 80060ea:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d107      	bne.n	8006104 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80060f4:	4b3c      	ldr	r3, [pc, #240]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d121      	bne.n	8006144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e0f6      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b03      	cmp	r3, #3
 800610a:	d107      	bne.n	800611c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d115      	bne.n	8006144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006118:	2301      	movs	r3, #1
 800611a:	e0ea      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	685b      	ldr	r3, [r3, #4]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d107      	bne.n	8006134 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006124:	4b30      	ldr	r3, [pc, #192]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d109      	bne.n	8006144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	e0de      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006134:	4b2c      	ldr	r3, [pc, #176]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f003 0304 	and.w	r3, r3, #4
 800613c:	2b00      	cmp	r3, #0
 800613e:	d101      	bne.n	8006144 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8006140:	2301      	movs	r3, #1
 8006142:	e0d6      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006144:	4b28      	ldr	r3, [pc, #160]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006146:	691b      	ldr	r3, [r3, #16]
 8006148:	f023 0207 	bic.w	r2, r3, #7
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	4925      	ldr	r1, [pc, #148]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006152:	4313      	orrs	r3, r2
 8006154:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006156:	f7fb ff71 	bl	800203c <HAL_GetTick>
 800615a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800615c:	e00a      	b.n	8006174 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800615e:	f7fb ff6d 	bl	800203c <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	f241 3288 	movw	r2, #5000	; 0x1388
 800616c:	4293      	cmp	r3, r2
 800616e:	d901      	bls.n	8006174 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8006170:	2303      	movs	r3, #3
 8006172:	e0be      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	00db      	lsls	r3, r3, #3
 8006182:	429a      	cmp	r2, r3
 8006184:	d1eb      	bne.n	800615e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f003 0302 	and.w	r3, r3, #2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d010      	beq.n	80061b4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68da      	ldr	r2, [r3, #12]
 8006196:	4b14      	ldr	r3, [pc, #80]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	f003 030f 	and.w	r3, r3, #15
 800619e:	429a      	cmp	r2, r3
 80061a0:	d208      	bcs.n	80061b4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	f023 020f 	bic.w	r2, r3, #15
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	490e      	ldr	r1, [pc, #56]	; (80061e8 <HAL_RCC_ClockConfig+0x244>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80061b4:	4b0b      	ldr	r3, [pc, #44]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 030f 	and.w	r3, r3, #15
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d214      	bcs.n	80061ec <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c2:	4b08      	ldr	r3, [pc, #32]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f023 020f 	bic.w	r2, r3, #15
 80061ca:	4906      	ldr	r1, [pc, #24]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061d2:	4b04      	ldr	r3, [pc, #16]	; (80061e4 <HAL_RCC_ClockConfig+0x240>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f003 030f 	and.w	r3, r3, #15
 80061da:	683a      	ldr	r2, [r7, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d005      	beq.n	80061ec <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80061e0:	2301      	movs	r3, #1
 80061e2:	e086      	b.n	80062f2 <HAL_RCC_ClockConfig+0x34e>
 80061e4:	52002000 	.word	0x52002000
 80061e8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d010      	beq.n	800621a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 80061fe:	699b      	ldr	r3, [r3, #24]
 8006200:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006204:	429a      	cmp	r2, r3
 8006206:	d208      	bcs.n	800621a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006208:	4b3c      	ldr	r3, [pc, #240]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	691b      	ldr	r3, [r3, #16]
 8006214:	4939      	ldr	r1, [pc, #228]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006216:	4313      	orrs	r3, r2
 8006218:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f003 0308 	and.w	r3, r3, #8
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	695a      	ldr	r2, [r3, #20]
 800622a:	4b34      	ldr	r3, [pc, #208]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 800622c:	69db      	ldr	r3, [r3, #28]
 800622e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006232:	429a      	cmp	r2, r3
 8006234:	d208      	bcs.n	8006248 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006236:	4b31      	ldr	r3, [pc, #196]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006238:	69db      	ldr	r3, [r3, #28]
 800623a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	695b      	ldr	r3, [r3, #20]
 8006242:	492e      	ldr	r1, [pc, #184]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006244:	4313      	orrs	r3, r2
 8006246:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f003 0310 	and.w	r3, r3, #16
 8006250:	2b00      	cmp	r3, #0
 8006252:	d010      	beq.n	8006276 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	699a      	ldr	r2, [r3, #24]
 8006258:	4b28      	ldr	r3, [pc, #160]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 800625a:	69db      	ldr	r3, [r3, #28]
 800625c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006260:	429a      	cmp	r2, r3
 8006262:	d208      	bcs.n	8006276 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006264:	4b25      	ldr	r3, [pc, #148]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006266:	69db      	ldr	r3, [r3, #28]
 8006268:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	4922      	ldr	r1, [pc, #136]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006272:	4313      	orrs	r3, r2
 8006274:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f003 0320 	and.w	r3, r3, #32
 800627e:	2b00      	cmp	r3, #0
 8006280:	d010      	beq.n	80062a4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	69da      	ldr	r2, [r3, #28]
 8006286:	4b1d      	ldr	r3, [pc, #116]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800628e:	429a      	cmp	r2, r3
 8006290:	d208      	bcs.n	80062a4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006292:	4b1a      	ldr	r3, [pc, #104]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 8006294:	6a1b      	ldr	r3, [r3, #32]
 8006296:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	69db      	ldr	r3, [r3, #28]
 800629e:	4917      	ldr	r1, [pc, #92]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 80062a0:	4313      	orrs	r3, r2
 80062a2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80062a4:	f000 f834 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 80062a8:	4602      	mov	r2, r0
 80062aa:	4b14      	ldr	r3, [pc, #80]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 80062ac:	699b      	ldr	r3, [r3, #24]
 80062ae:	0a1b      	lsrs	r3, r3, #8
 80062b0:	f003 030f 	and.w	r3, r3, #15
 80062b4:	4912      	ldr	r1, [pc, #72]	; (8006300 <HAL_RCC_ClockConfig+0x35c>)
 80062b6:	5ccb      	ldrb	r3, [r1, r3]
 80062b8:	f003 031f 	and.w	r3, r3, #31
 80062bc:	fa22 f303 	lsr.w	r3, r2, r3
 80062c0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80062c2:	4b0e      	ldr	r3, [pc, #56]	; (80062fc <HAL_RCC_ClockConfig+0x358>)
 80062c4:	699b      	ldr	r3, [r3, #24]
 80062c6:	f003 030f 	and.w	r3, r3, #15
 80062ca:	4a0d      	ldr	r2, [pc, #52]	; (8006300 <HAL_RCC_ClockConfig+0x35c>)
 80062cc:	5cd3      	ldrb	r3, [r2, r3]
 80062ce:	f003 031f 	and.w	r3, r3, #31
 80062d2:	693a      	ldr	r2, [r7, #16]
 80062d4:	fa22 f303 	lsr.w	r3, r2, r3
 80062d8:	4a0a      	ldr	r2, [pc, #40]	; (8006304 <HAL_RCC_ClockConfig+0x360>)
 80062da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80062dc:	4a0a      	ldr	r2, [pc, #40]	; (8006308 <HAL_RCC_ClockConfig+0x364>)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 80062e2:	4b0a      	ldr	r3, [pc, #40]	; (800630c <HAL_RCC_ClockConfig+0x368>)
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fb fe5e 	bl	8001fa8 <HAL_InitTick>
 80062ec:	4603      	mov	r3, r0
 80062ee:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80062f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3718      	adds	r7, #24
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	58024400 	.word	0x58024400
 8006300:	0800a5bc 	.word	0x0800a5bc
 8006304:	24000004 	.word	0x24000004
 8006308:	24000000 	.word	0x24000000
 800630c:	24000008 	.word	0x24000008

08006310 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006310:	b480      	push	{r7}
 8006312:	b089      	sub	sp, #36	; 0x24
 8006314:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006316:	4bb3      	ldr	r3, [pc, #716]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800631e:	2b18      	cmp	r3, #24
 8006320:	f200 8155 	bhi.w	80065ce <HAL_RCC_GetSysClockFreq+0x2be>
 8006324:	a201      	add	r2, pc, #4	; (adr r2, 800632c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006326:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800632a:	bf00      	nop
 800632c:	08006391 	.word	0x08006391
 8006330:	080065cf 	.word	0x080065cf
 8006334:	080065cf 	.word	0x080065cf
 8006338:	080065cf 	.word	0x080065cf
 800633c:	080065cf 	.word	0x080065cf
 8006340:	080065cf 	.word	0x080065cf
 8006344:	080065cf 	.word	0x080065cf
 8006348:	080065cf 	.word	0x080065cf
 800634c:	080063b7 	.word	0x080063b7
 8006350:	080065cf 	.word	0x080065cf
 8006354:	080065cf 	.word	0x080065cf
 8006358:	080065cf 	.word	0x080065cf
 800635c:	080065cf 	.word	0x080065cf
 8006360:	080065cf 	.word	0x080065cf
 8006364:	080065cf 	.word	0x080065cf
 8006368:	080065cf 	.word	0x080065cf
 800636c:	080063bd 	.word	0x080063bd
 8006370:	080065cf 	.word	0x080065cf
 8006374:	080065cf 	.word	0x080065cf
 8006378:	080065cf 	.word	0x080065cf
 800637c:	080065cf 	.word	0x080065cf
 8006380:	080065cf 	.word	0x080065cf
 8006384:	080065cf 	.word	0x080065cf
 8006388:	080065cf 	.word	0x080065cf
 800638c:	080063c3 	.word	0x080063c3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006390:	4b94      	ldr	r3, [pc, #592]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f003 0320 	and.w	r3, r3, #32
 8006398:	2b00      	cmp	r3, #0
 800639a:	d009      	beq.n	80063b0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800639c:	4b91      	ldr	r3, [pc, #580]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	08db      	lsrs	r3, r3, #3
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	4a90      	ldr	r2, [pc, #576]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063a8:	fa22 f303 	lsr.w	r3, r2, r3
 80063ac:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80063ae:	e111      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80063b0:	4b8d      	ldr	r3, [pc, #564]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80063b2:	61bb      	str	r3, [r7, #24]
    break;
 80063b4:	e10e      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80063b6:	4b8d      	ldr	r3, [pc, #564]	; (80065ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80063b8:	61bb      	str	r3, [r7, #24]
    break;
 80063ba:	e10b      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80063bc:	4b8c      	ldr	r3, [pc, #560]	; (80065f0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80063be:	61bb      	str	r3, [r7, #24]
    break;
 80063c0:	e108      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063c2:	4b88      	ldr	r3, [pc, #544]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063c6:	f003 0303 	and.w	r3, r3, #3
 80063ca:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 80063cc:	4b85      	ldr	r3, [pc, #532]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d0:	091b      	lsrs	r3, r3, #4
 80063d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063d6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 80063d8:	4b82      	ldr	r3, [pc, #520]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063dc:	f003 0301 	and.w	r3, r3, #1
 80063e0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 80063e2:	4b80      	ldr	r3, [pc, #512]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e6:	08db      	lsrs	r3, r3, #3
 80063e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063ec:	68fa      	ldr	r2, [r7, #12]
 80063ee:	fb02 f303 	mul.w	r3, r2, r3
 80063f2:	ee07 3a90 	vmov	s15, r3
 80063f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063fa:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b00      	cmp	r3, #0
 8006402:	f000 80e1 	beq.w	80065c8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006406:	697b      	ldr	r3, [r7, #20]
 8006408:	2b02      	cmp	r3, #2
 800640a:	f000 8083 	beq.w	8006514 <HAL_RCC_GetSysClockFreq+0x204>
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b02      	cmp	r3, #2
 8006412:	f200 80a1 	bhi.w	8006558 <HAL_RCC_GetSysClockFreq+0x248>
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <HAL_RCC_GetSysClockFreq+0x114>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d056      	beq.n	80064d0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006422:	e099      	b.n	8006558 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006424:	4b6f      	ldr	r3, [pc, #444]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f003 0320 	and.w	r3, r3, #32
 800642c:	2b00      	cmp	r3, #0
 800642e:	d02d      	beq.n	800648c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006430:	4b6c      	ldr	r3, [pc, #432]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	08db      	lsrs	r3, r3, #3
 8006436:	f003 0303 	and.w	r3, r3, #3
 800643a:	4a6b      	ldr	r2, [pc, #428]	; (80065e8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800643c:	fa22 f303 	lsr.w	r3, r2, r3
 8006440:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800644c:	693b      	ldr	r3, [r7, #16]
 800644e:	ee07 3a90 	vmov	s15, r3
 8006452:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006456:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800645a:	4b62      	ldr	r3, [pc, #392]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006462:	ee07 3a90 	vmov	s15, r3
 8006466:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800646a:	ed97 6a02 	vldr	s12, [r7, #8]
 800646e:	eddf 5a61 	vldr	s11, [pc, #388]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006472:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006476:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800647a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800647e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006482:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006486:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800648a:	e087      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	ee07 3a90 	vmov	s15, r3
 8006492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006496:	eddf 6a58 	vldr	s13, [pc, #352]	; 80065f8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800649a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800649e:	4b51      	ldr	r3, [pc, #324]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064a6:	ee07 3a90 	vmov	s15, r3
 80064aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064ae:	ed97 6a02 	vldr	s12, [r7, #8]
 80064b2:	eddf 5a50 	vldr	s11, [pc, #320]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064ce:	e065      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	ee07 3a90 	vmov	s15, r3
 80064d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064da:	eddf 6a48 	vldr	s13, [pc, #288]	; 80065fc <HAL_RCC_GetSysClockFreq+0x2ec>
 80064de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064e2:	4b40      	ldr	r3, [pc, #256]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064ea:	ee07 3a90 	vmov	s15, r3
 80064ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80064f6:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80064fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006502:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006506:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800650a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800650e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006512:	e043      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	ee07 3a90 	vmov	s15, r3
 800651a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800651e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006600 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006522:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006526:	4b2f      	ldr	r3, [pc, #188]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800652a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800652e:	ee07 3a90 	vmov	s15, r3
 8006532:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006536:	ed97 6a02 	vldr	s12, [r7, #8]
 800653a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 800653e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006542:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006546:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800654a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800654e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006552:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006556:	e021      	b.n	800659c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006558:	693b      	ldr	r3, [r7, #16]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	eddf 6a26 	vldr	s13, [pc, #152]	; 80065fc <HAL_RCC_GetSysClockFreq+0x2ec>
 8006566:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800656a:	4b1e      	ldr	r3, [pc, #120]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800656c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800656e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006572:	ee07 3a90 	vmov	s15, r3
 8006576:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800657a:	ed97 6a02 	vldr	s12, [r7, #8]
 800657e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80065f4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006582:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006586:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800658a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800658e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006592:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006596:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800659a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800659c:	4b11      	ldr	r3, [pc, #68]	; (80065e4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800659e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065a0:	0a5b      	lsrs	r3, r3, #9
 80065a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065a6:	3301      	adds	r3, #1
 80065a8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	ee07 3a90 	vmov	s15, r3
 80065b0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80065b4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065b8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065c0:	ee17 3a90 	vmov	r3, s15
 80065c4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 80065c6:	e005      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 80065c8:	2300      	movs	r3, #0
 80065ca:	61bb      	str	r3, [r7, #24]
    break;
 80065cc:	e002      	b.n	80065d4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 80065ce:	4b07      	ldr	r3, [pc, #28]	; (80065ec <HAL_RCC_GetSysClockFreq+0x2dc>)
 80065d0:	61bb      	str	r3, [r7, #24]
    break;
 80065d2:	bf00      	nop
  }

  return sysclockfreq;
 80065d4:	69bb      	ldr	r3, [r7, #24]
}
 80065d6:	4618      	mov	r0, r3
 80065d8:	3724      	adds	r7, #36	; 0x24
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
 80065e2:	bf00      	nop
 80065e4:	58024400 	.word	0x58024400
 80065e8:	03d09000 	.word	0x03d09000
 80065ec:	003d0900 	.word	0x003d0900
 80065f0:	007a1200 	.word	0x007a1200
 80065f4:	46000000 	.word	0x46000000
 80065f8:	4c742400 	.word	0x4c742400
 80065fc:	4a742400 	.word	0x4a742400
 8006600:	4af42400 	.word	0x4af42400

08006604 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800660a:	f7ff fe81 	bl	8006310 <HAL_RCC_GetSysClockFreq>
 800660e:	4602      	mov	r2, r0
 8006610:	4b10      	ldr	r3, [pc, #64]	; (8006654 <HAL_RCC_GetHCLKFreq+0x50>)
 8006612:	699b      	ldr	r3, [r3, #24]
 8006614:	0a1b      	lsrs	r3, r3, #8
 8006616:	f003 030f 	and.w	r3, r3, #15
 800661a:	490f      	ldr	r1, [pc, #60]	; (8006658 <HAL_RCC_GetHCLKFreq+0x54>)
 800661c:	5ccb      	ldrb	r3, [r1, r3]
 800661e:	f003 031f 	and.w	r3, r3, #31
 8006622:	fa22 f303 	lsr.w	r3, r2, r3
 8006626:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006628:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <HAL_RCC_GetHCLKFreq+0x50>)
 800662a:	699b      	ldr	r3, [r3, #24]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	4a09      	ldr	r2, [pc, #36]	; (8006658 <HAL_RCC_GetHCLKFreq+0x54>)
 8006632:	5cd3      	ldrb	r3, [r2, r3]
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	fa22 f303 	lsr.w	r3, r2, r3
 800663e:	4a07      	ldr	r2, [pc, #28]	; (800665c <HAL_RCC_GetHCLKFreq+0x58>)
 8006640:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006642:	4a07      	ldr	r2, [pc, #28]	; (8006660 <HAL_RCC_GetHCLKFreq+0x5c>)
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8006648:	4b04      	ldr	r3, [pc, #16]	; (800665c <HAL_RCC_GetHCLKFreq+0x58>)
 800664a:	681b      	ldr	r3, [r3, #0]
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}
 8006654:	58024400 	.word	0x58024400
 8006658:	0800a5bc 	.word	0x0800a5bc
 800665c:	24000004 	.word	0x24000004
 8006660:	24000000 	.word	0x24000000

08006664 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006664:	b580      	push	{r7, lr}
 8006666:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8006668:	f7ff ffcc 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 800666c:	4602      	mov	r2, r0
 800666e:	4b06      	ldr	r3, [pc, #24]	; (8006688 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006670:	69db      	ldr	r3, [r3, #28]
 8006672:	091b      	lsrs	r3, r3, #4
 8006674:	f003 0307 	and.w	r3, r3, #7
 8006678:	4904      	ldr	r1, [pc, #16]	; (800668c <HAL_RCC_GetPCLK1Freq+0x28>)
 800667a:	5ccb      	ldrb	r3, [r1, r3]
 800667c:	f003 031f 	and.w	r3, r3, #31
 8006680:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8006684:	4618      	mov	r0, r3
 8006686:	bd80      	pop	{r7, pc}
 8006688:	58024400 	.word	0x58024400
 800668c:	0800a5bc 	.word	0x0800a5bc

08006690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006694:	f7ff ffb6 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8006698:	4602      	mov	r2, r0
 800669a:	4b06      	ldr	r3, [pc, #24]	; (80066b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800669c:	69db      	ldr	r3, [r3, #28]
 800669e:	0a1b      	lsrs	r3, r3, #8
 80066a0:	f003 0307 	and.w	r3, r3, #7
 80066a4:	4904      	ldr	r1, [pc, #16]	; (80066b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80066a6:	5ccb      	ldrb	r3, [r1, r3]
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	bd80      	pop	{r7, pc}
 80066b4:	58024400 	.word	0x58024400
 80066b8:	0800a5bc 	.word	0x0800a5bc

080066bc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80066c4:	2300      	movs	r3, #0
 80066c6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80066c8:	2300      	movs	r3, #0
 80066ca:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d03f      	beq.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066e0:	d02a      	beq.n	8006738 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80066e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80066e6:	d824      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066ec:	d018      	beq.n	8006720 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80066ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80066f2:	d81e      	bhi.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d003      	beq.n	8006700 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80066f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066fc:	d007      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x52>
 80066fe:	e018      	b.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006700:	4ba3      	ldr	r3, [pc, #652]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006704:	4aa2      	ldr	r2, [pc, #648]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006706:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800670a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800670c:	e015      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	3304      	adds	r3, #4
 8006712:	2102      	movs	r1, #2
 8006714:	4618      	mov	r0, r3
 8006716:	f001 f9d5 	bl	8007ac4 <RCCEx_PLL2_Config>
 800671a:	4603      	mov	r3, r0
 800671c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800671e:	e00c      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	3324      	adds	r3, #36	; 0x24
 8006724:	2102      	movs	r1, #2
 8006726:	4618      	mov	r0, r3
 8006728:	f001 fa7e 	bl	8007c28 <RCCEx_PLL3_Config>
 800672c:	4603      	mov	r3, r0
 800672e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8006730:	e003      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	75fb      	strb	r3, [r7, #23]
      break;
 8006736:	e000      	b.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8006738:	bf00      	nop
    }

    if(ret == HAL_OK)
 800673a:	7dfb      	ldrb	r3, [r7, #23]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d109      	bne.n	8006754 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8006740:	4b93      	ldr	r3, [pc, #588]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800674c:	4990      	ldr	r1, [pc, #576]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800674e:	4313      	orrs	r3, r2
 8006750:	650b      	str	r3, [r1, #80]	; 0x50
 8006752:	e001      	b.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006760:	2b00      	cmp	r3, #0
 8006762:	d03d      	beq.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006768:	2b04      	cmp	r3, #4
 800676a:	d826      	bhi.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800676c:	a201      	add	r2, pc, #4	; (adr r2, 8006774 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800676e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006772:	bf00      	nop
 8006774:	08006789 	.word	0x08006789
 8006778:	08006797 	.word	0x08006797
 800677c:	080067a9 	.word	0x080067a9
 8006780:	080067c1 	.word	0x080067c1
 8006784:	080067c1 	.word	0x080067c1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006788:	4b81      	ldr	r3, [pc, #516]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800678a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800678c:	4a80      	ldr	r2, [pc, #512]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800678e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006792:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006794:	e015      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	3304      	adds	r3, #4
 800679a:	2100      	movs	r1, #0
 800679c:	4618      	mov	r0, r3
 800679e:	f001 f991 	bl	8007ac4 <RCCEx_PLL2_Config>
 80067a2:	4603      	mov	r3, r0
 80067a4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067a6:	e00c      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3324      	adds	r3, #36	; 0x24
 80067ac:	2100      	movs	r1, #0
 80067ae:	4618      	mov	r0, r3
 80067b0:	f001 fa3a 	bl	8007c28 <RCCEx_PLL3_Config>
 80067b4:	4603      	mov	r3, r0
 80067b6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067b8:	e003      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	75fb      	strb	r3, [r7, #23]
      break;
 80067be:	e000      	b.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80067c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067c2:	7dfb      	ldrb	r3, [r7, #23]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d109      	bne.n	80067dc <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80067c8:	4b71      	ldr	r3, [pc, #452]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067cc:	f023 0207 	bic.w	r2, r3, #7
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067d4:	496e      	ldr	r1, [pc, #440]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067d6:	4313      	orrs	r3, r2
 80067d8:	650b      	str	r3, [r1, #80]	; 0x50
 80067da:	e001      	b.n	80067e0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067dc:	7dfb      	ldrb	r3, [r7, #23]
 80067de:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d042      	beq.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80067f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067f4:	d02b      	beq.n	800684e <HAL_RCCEx_PeriphCLKConfig+0x192>
 80067f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067fa:	d825      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 80067fc:	2bc0      	cmp	r3, #192	; 0xc0
 80067fe:	d028      	beq.n	8006852 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006800:	2bc0      	cmp	r3, #192	; 0xc0
 8006802:	d821      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006804:	2b80      	cmp	r3, #128	; 0x80
 8006806:	d016      	beq.n	8006836 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006808:	2b80      	cmp	r3, #128	; 0x80
 800680a:	d81d      	bhi.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006810:	2b40      	cmp	r3, #64	; 0x40
 8006812:	d007      	beq.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006814:	e018      	b.n	8006848 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006816:	4b5e      	ldr	r3, [pc, #376]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800681a:	4a5d      	ldr	r2, [pc, #372]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800681c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006820:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006822:	e017      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	3304      	adds	r3, #4
 8006828:	2100      	movs	r1, #0
 800682a:	4618      	mov	r0, r3
 800682c:	f001 f94a 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006830:	4603      	mov	r3, r0
 8006832:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006834:	e00e      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	3324      	adds	r3, #36	; 0x24
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f001 f9f3 	bl	8007c28 <RCCEx_PLL3_Config>
 8006842:	4603      	mov	r3, r0
 8006844:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006846:	e005      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	75fb      	strb	r3, [r7, #23]
      break;
 800684c:	e002      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800684e:	bf00      	nop
 8006850:	e000      	b.n	8006854 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8006852:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006854:	7dfb      	ldrb	r3, [r7, #23]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800685a:	4b4d      	ldr	r3, [pc, #308]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800685c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800685e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006866:	494a      	ldr	r1, [pc, #296]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006868:	4313      	orrs	r3, r2
 800686a:	650b      	str	r3, [r1, #80]	; 0x50
 800686c:	e001      	b.n	8006872 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800686e:	7dfb      	ldrb	r3, [r7, #23]
 8006870:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800687a:	2b00      	cmp	r3, #0
 800687c:	d049      	beq.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006888:	d030      	beq.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x230>
 800688a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800688e:	d82a      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006890:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006894:	d02c      	beq.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006896:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800689a:	d824      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800689c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a0:	d018      	beq.n	80068d4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80068a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068a6:	d81e      	bhi.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d003      	beq.n	80068b4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80068ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068b0:	d007      	beq.n	80068c2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80068b2:	e018      	b.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068b4:	4b36      	ldr	r3, [pc, #216]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068b8:	4a35      	ldr	r2, [pc, #212]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068c0:	e017      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	3304      	adds	r3, #4
 80068c6:	2100      	movs	r1, #0
 80068c8:	4618      	mov	r0, r3
 80068ca:	f001 f8fb 	bl	8007ac4 <RCCEx_PLL2_Config>
 80068ce:	4603      	mov	r3, r0
 80068d0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80068d2:	e00e      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	3324      	adds	r3, #36	; 0x24
 80068d8:	2100      	movs	r1, #0
 80068da:	4618      	mov	r0, r3
 80068dc:	f001 f9a4 	bl	8007c28 <RCCEx_PLL3_Config>
 80068e0:	4603      	mov	r3, r0
 80068e2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80068e4:	e005      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
      break;
 80068ea:	e002      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80068ec:	bf00      	nop
 80068ee:	e000      	b.n	80068f2 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80068f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80068f2:	7dfb      	ldrb	r3, [r7, #23]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d10a      	bne.n	800690e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80068f8:	4b25      	ldr	r3, [pc, #148]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80068fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068fc:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006906:	4922      	ldr	r1, [pc, #136]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006908:	4313      	orrs	r3, r2
 800690a:	658b      	str	r3, [r1, #88]	; 0x58
 800690c:	e001      	b.n	8006912 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800690e:	7dfb      	ldrb	r3, [r7, #23]
 8006910:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800691a:	2b00      	cmp	r3, #0
 800691c:	d04b      	beq.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006924:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006928:	d030      	beq.n	800698c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800692a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800692e:	d82a      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006930:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8006934:	d02e      	beq.n	8006994 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8006936:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800693a:	d824      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800693c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006940:	d018      	beq.n	8006974 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8006942:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006946:	d81e      	bhi.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8006948:	2b00      	cmp	r3, #0
 800694a:	d003      	beq.n	8006954 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800694c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006950:	d007      	beq.n	8006962 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8006952:	e018      	b.n	8006986 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006954:	4b0e      	ldr	r3, [pc, #56]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006958:	4a0d      	ldr	r2, [pc, #52]	; (8006990 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800695a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800695e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006960:	e019      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	3304      	adds	r3, #4
 8006966:	2100      	movs	r1, #0
 8006968:	4618      	mov	r0, r3
 800696a:	f001 f8ab 	bl	8007ac4 <RCCEx_PLL2_Config>
 800696e:	4603      	mov	r3, r0
 8006970:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006972:	e010      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	3324      	adds	r3, #36	; 0x24
 8006978:	2100      	movs	r1, #0
 800697a:	4618      	mov	r0, r3
 800697c:	f001 f954 	bl	8007c28 <RCCEx_PLL3_Config>
 8006980:	4603      	mov	r3, r0
 8006982:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006984:	e007      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006986:	2301      	movs	r3, #1
 8006988:	75fb      	strb	r3, [r7, #23]
      break;
 800698a:	e004      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800698c:	bf00      	nop
 800698e:	e002      	b.n	8006996 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006990:	58024400 	.word	0x58024400
      break;
 8006994:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006996:	7dfb      	ldrb	r3, [r7, #23]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d10a      	bne.n	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800699c:	4b99      	ldr	r3, [pc, #612]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800699e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069a0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80069aa:	4996      	ldr	r1, [pc, #600]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069ac:	4313      	orrs	r3, r2
 80069ae:	658b      	str	r3, [r1, #88]	; 0x58
 80069b0:	e001      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069b2:	7dfb      	ldrb	r3, [r7, #23]
 80069b4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d032      	beq.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80069c6:	2b30      	cmp	r3, #48	; 0x30
 80069c8:	d01c      	beq.n	8006a04 <HAL_RCCEx_PeriphCLKConfig+0x348>
 80069ca:	2b30      	cmp	r3, #48	; 0x30
 80069cc:	d817      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d00c      	beq.n	80069ec <HAL_RCCEx_PeriphCLKConfig+0x330>
 80069d2:	2b20      	cmp	r3, #32
 80069d4:	d813      	bhi.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x342>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d016      	beq.n	8006a08 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 80069da:	2b10      	cmp	r3, #16
 80069dc:	d10f      	bne.n	80069fe <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80069de:	4b89      	ldr	r3, [pc, #548]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e2:	4a88      	ldr	r2, [pc, #544]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80069e8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069ea:	e00e      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	3304      	adds	r3, #4
 80069f0:	2102      	movs	r1, #2
 80069f2:	4618      	mov	r0, r3
 80069f4:	f001 f866 	bl	8007ac4 <RCCEx_PLL2_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80069fc:	e005      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	75fb      	strb	r3, [r7, #23]
      break;
 8006a02:	e002      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006a04:	bf00      	nop
 8006a06:	e000      	b.n	8006a0a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006a08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d109      	bne.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006a10:	4b7c      	ldr	r3, [pc, #496]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a1c:	4979      	ldr	r1, [pc, #484]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006a22:	e001      	b.n	8006a28 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d047      	beq.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a38:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a3c:	d030      	beq.n	8006aa0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8006a3e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a42:	d82a      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a44:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a48:	d02c      	beq.n	8006aa4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006a4a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006a4e:	d824      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a54:	d018      	beq.n	8006a88 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8006a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a5a:	d81e      	bhi.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d003      	beq.n	8006a68 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8006a60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a64:	d007      	beq.n	8006a76 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8006a66:	e018      	b.n	8006a9a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006a68:	4b66      	ldr	r3, [pc, #408]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a6c:	4a65      	ldr	r2, [pc, #404]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a72:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a74:	e017      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	3304      	adds	r3, #4
 8006a7a:	2100      	movs	r1, #0
 8006a7c:	4618      	mov	r0, r3
 8006a7e:	f001 f821 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006a82:	4603      	mov	r3, r0
 8006a84:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a86:	e00e      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	3324      	adds	r3, #36	; 0x24
 8006a8c:	2100      	movs	r1, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f001 f8ca 	bl	8007c28 <RCCEx_PLL3_Config>
 8006a94:	4603      	mov	r3, r0
 8006a96:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006a98:	e005      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9e:	e002      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006aa0:	bf00      	nop
 8006aa2:	e000      	b.n	8006aa6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006aa4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aa6:	7dfb      	ldrb	r3, [r7, #23]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d109      	bne.n	8006ac0 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8006aac:	4b55      	ldr	r3, [pc, #340]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ab0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ab8:	4952      	ldr	r1, [pc, #328]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006aba:	4313      	orrs	r3, r2
 8006abc:	650b      	str	r3, [r1, #80]	; 0x50
 8006abe:	e001      	b.n	8006ac4 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ac0:	7dfb      	ldrb	r3, [r7, #23]
 8006ac2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d049      	beq.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ad4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ad8:	d02e      	beq.n	8006b38 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8006ada:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006ade:	d828      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006ae0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006ae4:	d02a      	beq.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006ae6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006aea:	d822      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006aec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006af0:	d026      	beq.n	8006b40 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006af2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006af6:	d81c      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006af8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006afc:	d010      	beq.n	8006b20 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8006afe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b02:	d816      	bhi.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d01d      	beq.n	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006b08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b0c:	d111      	bne.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2101      	movs	r1, #1
 8006b14:	4618      	mov	r0, r3
 8006b16:	f000 ffd5 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b1e:	e012      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	3324      	adds	r3, #36	; 0x24
 8006b24:	2101      	movs	r1, #1
 8006b26:	4618      	mov	r0, r3
 8006b28:	f001 f87e 	bl	8007c28 <RCCEx_PLL3_Config>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8006b30:	e009      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	75fb      	strb	r3, [r7, #23]
      break;
 8006b36:	e006      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b38:	bf00      	nop
 8006b3a:	e004      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8006b44:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b46:	7dfb      	ldrb	r3, [r7, #23]
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d109      	bne.n	8006b60 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8006b4c:	4b2d      	ldr	r3, [pc, #180]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b50:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b58:	492a      	ldr	r1, [pc, #168]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	650b      	str	r3, [r1, #80]	; 0x50
 8006b5e:	e001      	b.n	8006b64 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
 8006b62:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d04d      	beq.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006b76:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b7a:	d02e      	beq.n	8006bda <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8006b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b80:	d828      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b86:	d02a      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x522>
 8006b88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b8c:	d822      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b8e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b92:	d026      	beq.n	8006be2 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006b94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b98:	d81c      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b9e:	d010      	beq.n	8006bc2 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006ba0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ba4:	d816      	bhi.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d01d      	beq.n	8006be6 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006baa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bae:	d111      	bne.n	8006bd4 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	2101      	movs	r1, #1
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f000 ff84 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006bc0:	e012      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	3324      	adds	r3, #36	; 0x24
 8006bc6:	2101      	movs	r1, #1
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f001 f82d 	bl	8007c28 <RCCEx_PLL3_Config>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006bd2:	e009      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
      break;
 8006bd8:	e006      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006bda:	bf00      	nop
 8006bdc:	e004      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006bde:	bf00      	nop
 8006be0:	e002      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006be2:	bf00      	nop
 8006be4:	e000      	b.n	8006be8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006be6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006be8:	7dfb      	ldrb	r3, [r7, #23]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10c      	bne.n	8006c08 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006bee:	4b05      	ldr	r3, [pc, #20]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006bf2:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006bfc:	4901      	ldr	r1, [pc, #4]	; (8006c04 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	658b      	str	r3, [r1, #88]	; 0x58
 8006c02:	e003      	b.n	8006c0c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006c04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c08:	7dfb      	ldrb	r3, [r7, #23]
 8006c0a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d02f      	beq.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c20:	d00e      	beq.n	8006c40 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006c22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c26:	d814      	bhi.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d015      	beq.n	8006c58 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006c2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006c30:	d10f      	bne.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006c32:	4baf      	ldr	r3, [pc, #700]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c36:	4aae      	ldr	r2, [pc, #696]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006c3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c3e:	e00c      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	3304      	adds	r3, #4
 8006c44:	2101      	movs	r1, #1
 8006c46:	4618      	mov	r0, r3
 8006c48:	f000 ff3c 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006c4c:	4603      	mov	r3, r0
 8006c4e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006c50:	e003      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	75fb      	strb	r3, [r7, #23]
      break;
 8006c56:	e000      	b.n	8006c5a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006c58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d109      	bne.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006c60:	4ba3      	ldr	r3, [pc, #652]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c64:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c6c:	49a0      	ldr	r1, [pc, #640]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c6e:	4313      	orrs	r3, r2
 8006c70:	650b      	str	r3, [r1, #80]	; 0x50
 8006c72:	e001      	b.n	8006c78 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c74:	7dfb      	ldrb	r3, [r7, #23]
 8006c76:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d032      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c88:	2b03      	cmp	r3, #3
 8006c8a:	d81b      	bhi.n	8006cc4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006c8c:	a201      	add	r2, pc, #4	; (adr r2, 8006c94 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006c8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c92:	bf00      	nop
 8006c94:	08006ccb 	.word	0x08006ccb
 8006c98:	08006ca5 	.word	0x08006ca5
 8006c9c:	08006cb3 	.word	0x08006cb3
 8006ca0:	08006ccb 	.word	0x08006ccb
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006ca4:	4b92      	ldr	r3, [pc, #584]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ca8:	4a91      	ldr	r2, [pc, #580]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006cae:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006cb0:	e00c      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	2102      	movs	r1, #2
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f000 ff03 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006cc2:	e003      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006cc4:	2301      	movs	r3, #1
 8006cc6:	75fb      	strb	r3, [r7, #23]
      break;
 8006cc8:	e000      	b.n	8006ccc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006cca:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ccc:	7dfb      	ldrb	r3, [r7, #23]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d109      	bne.n	8006ce6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006cd2:	4b87      	ldr	r3, [pc, #540]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cd6:	f023 0203 	bic.w	r2, r3, #3
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cde:	4984      	ldr	r1, [pc, #528]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ce0:	4313      	orrs	r3, r2
 8006ce2:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006ce4:	e001      	b.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	f000 8086 	beq.w	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cf8:	4b7e      	ldr	r3, [pc, #504]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a7d      	ldr	r2, [pc, #500]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006cfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006d04:	f7fb f99a 	bl	800203c <HAL_GetTick>
 8006d08:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d0a:	e009      	b.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d0c:	f7fb f996 	bl	800203c <HAL_GetTick>
 8006d10:	4602      	mov	r2, r0
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	1ad3      	subs	r3, r2, r3
 8006d16:	2b64      	cmp	r3, #100	; 0x64
 8006d18:	d902      	bls.n	8006d20 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006d1a:	2303      	movs	r3, #3
 8006d1c:	75fb      	strb	r3, [r7, #23]
        break;
 8006d1e:	e005      	b.n	8006d2c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006d20:	4b74      	ldr	r3, [pc, #464]	; (8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d0ef      	beq.n	8006d0c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006d2c:	7dfb      	ldrb	r3, [r7, #23]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d166      	bne.n	8006e00 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006d32:	4b6f      	ldr	r3, [pc, #444]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d3c:	4053      	eors	r3, r2
 8006d3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d013      	beq.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006d46:	4b6a      	ldr	r3, [pc, #424]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d4e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006d50:	4b67      	ldr	r3, [pc, #412]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d54:	4a66      	ldr	r2, [pc, #408]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d5a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006d5c:	4b64      	ldr	r3, [pc, #400]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d60:	4a63      	ldr	r2, [pc, #396]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d66:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006d68:	4a61      	ldr	r2, [pc, #388]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006d74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d78:	d115      	bne.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d7a:	f7fb f95f 	bl	800203c <HAL_GetTick>
 8006d7e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d80:	e00b      	b.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d82:	f7fb f95b 	bl	800203c <HAL_GetTick>
 8006d86:	4602      	mov	r2, r0
 8006d88:	693b      	ldr	r3, [r7, #16]
 8006d8a:	1ad3      	subs	r3, r2, r3
 8006d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d90:	4293      	cmp	r3, r2
 8006d92:	d902      	bls.n	8006d9a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006d94:	2303      	movs	r3, #3
 8006d96:	75fb      	strb	r3, [r7, #23]
            break;
 8006d98:	e005      	b.n	8006da6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006d9a:	4b55      	ldr	r3, [pc, #340]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d9e:	f003 0302 	and.w	r3, r3, #2
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d0ed      	beq.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006da6:	7dfb      	ldrb	r3, [r7, #23]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d126      	bne.n	8006dfa <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006db2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006db6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006dba:	d10d      	bne.n	8006dd8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006dbc:	4b4c      	ldr	r3, [pc, #304]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dbe:	691b      	ldr	r3, [r3, #16]
 8006dc0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dca:	0919      	lsrs	r1, r3, #4
 8006dcc:	4b4a      	ldr	r3, [pc, #296]	; (8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006dce:	400b      	ands	r3, r1
 8006dd0:	4947      	ldr	r1, [pc, #284]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	610b      	str	r3, [r1, #16]
 8006dd6:	e005      	b.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006dd8:	4b45      	ldr	r3, [pc, #276]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dda:	691b      	ldr	r3, [r3, #16]
 8006ddc:	4a44      	ldr	r2, [pc, #272]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006dde:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006de2:	6113      	str	r3, [r2, #16]
 8006de4:	4b42      	ldr	r3, [pc, #264]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006de6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df2:	493f      	ldr	r1, [pc, #252]	; (8006ef0 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006df4:	4313      	orrs	r3, r2
 8006df6:	670b      	str	r3, [r1, #112]	; 0x70
 8006df8:	e004      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006dfa:	7dfb      	ldrb	r3, [r7, #23]
 8006dfc:	75bb      	strb	r3, [r7, #22]
 8006dfe:	e001      	b.n	8006e04 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e00:	7dfb      	ldrb	r3, [r7, #23]
 8006e02:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f003 0301 	and.w	r3, r3, #1
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	f000 8085 	beq.w	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e16:	2b28      	cmp	r3, #40	; 0x28
 8006e18:	d866      	bhi.n	8006ee8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006e1a:	a201      	add	r2, pc, #4	; (adr r2, 8006e20 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e20:	08006efd 	.word	0x08006efd
 8006e24:	08006ee9 	.word	0x08006ee9
 8006e28:	08006ee9 	.word	0x08006ee9
 8006e2c:	08006ee9 	.word	0x08006ee9
 8006e30:	08006ee9 	.word	0x08006ee9
 8006e34:	08006ee9 	.word	0x08006ee9
 8006e38:	08006ee9 	.word	0x08006ee9
 8006e3c:	08006ee9 	.word	0x08006ee9
 8006e40:	08006ec5 	.word	0x08006ec5
 8006e44:	08006ee9 	.word	0x08006ee9
 8006e48:	08006ee9 	.word	0x08006ee9
 8006e4c:	08006ee9 	.word	0x08006ee9
 8006e50:	08006ee9 	.word	0x08006ee9
 8006e54:	08006ee9 	.word	0x08006ee9
 8006e58:	08006ee9 	.word	0x08006ee9
 8006e5c:	08006ee9 	.word	0x08006ee9
 8006e60:	08006ed7 	.word	0x08006ed7
 8006e64:	08006ee9 	.word	0x08006ee9
 8006e68:	08006ee9 	.word	0x08006ee9
 8006e6c:	08006ee9 	.word	0x08006ee9
 8006e70:	08006ee9 	.word	0x08006ee9
 8006e74:	08006ee9 	.word	0x08006ee9
 8006e78:	08006ee9 	.word	0x08006ee9
 8006e7c:	08006ee9 	.word	0x08006ee9
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006ee9 	.word	0x08006ee9
 8006e88:	08006ee9 	.word	0x08006ee9
 8006e8c:	08006ee9 	.word	0x08006ee9
 8006e90:	08006ee9 	.word	0x08006ee9
 8006e94:	08006ee9 	.word	0x08006ee9
 8006e98:	08006ee9 	.word	0x08006ee9
 8006e9c:	08006ee9 	.word	0x08006ee9
 8006ea0:	08006efd 	.word	0x08006efd
 8006ea4:	08006ee9 	.word	0x08006ee9
 8006ea8:	08006ee9 	.word	0x08006ee9
 8006eac:	08006ee9 	.word	0x08006ee9
 8006eb0:	08006ee9 	.word	0x08006ee9
 8006eb4:	08006ee9 	.word	0x08006ee9
 8006eb8:	08006ee9 	.word	0x08006ee9
 8006ebc:	08006ee9 	.word	0x08006ee9
 8006ec0:	08006efd 	.word	0x08006efd
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	3304      	adds	r3, #4
 8006ec8:	2101      	movs	r1, #1
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f000 fdfa 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ed4:	e013      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	3324      	adds	r3, #36	; 0x24
 8006eda:	2101      	movs	r1, #1
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fea3 	bl	8007c28 <RCCEx_PLL3_Config>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006ee6:	e00a      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ee8:	2301      	movs	r3, #1
 8006eea:	75fb      	strb	r3, [r7, #23]
      break;
 8006eec:	e007      	b.n	8006efe <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006eee:	bf00      	nop
 8006ef0:	58024400 	.word	0x58024400
 8006ef4:	58024800 	.word	0x58024800
 8006ef8:	00ffffcf 	.word	0x00ffffcf
      break;
 8006efc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d109      	bne.n	8006f18 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006f04:	4b96      	ldr	r3, [pc, #600]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f08:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f10:	4993      	ldr	r1, [pc, #588]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	654b      	str	r3, [r1, #84]	; 0x54
 8006f16:	e001      	b.n	8006f1c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f18:	7dfb      	ldrb	r3, [r7, #23]
 8006f1a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	f003 0302 	and.w	r3, r3, #2
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d038      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f2c:	2b05      	cmp	r3, #5
 8006f2e:	d821      	bhi.n	8006f74 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006f30:	a201      	add	r2, pc, #4	; (adr r2, 8006f38 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006f32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f36:	bf00      	nop
 8006f38:	08006f7b 	.word	0x08006f7b
 8006f3c:	08006f51 	.word	0x08006f51
 8006f40:	08006f63 	.word	0x08006f63
 8006f44:	08006f7b 	.word	0x08006f7b
 8006f48:	08006f7b 	.word	0x08006f7b
 8006f4c:	08006f7b 	.word	0x08006f7b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	3304      	adds	r3, #4
 8006f54:	2101      	movs	r1, #1
 8006f56:	4618      	mov	r0, r3
 8006f58:	f000 fdb4 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f60:	e00c      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	3324      	adds	r3, #36	; 0x24
 8006f66:	2101      	movs	r1, #1
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fe5d 	bl	8007c28 <RCCEx_PLL3_Config>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006f72:	e003      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	75fb      	strb	r3, [r7, #23]
      break;
 8006f78:	e000      	b.n	8006f7c <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006f7a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f7c:	7dfb      	ldrb	r3, [r7, #23]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d109      	bne.n	8006f96 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006f82:	4b77      	ldr	r3, [pc, #476]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f86:	f023 0207 	bic.w	r2, r3, #7
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f8e:	4974      	ldr	r1, [pc, #464]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f90:	4313      	orrs	r3, r2
 8006f92:	654b      	str	r3, [r1, #84]	; 0x54
 8006f94:	e001      	b.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f96:	7dfb      	ldrb	r3, [r7, #23]
 8006f98:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0304 	and.w	r3, r3, #4
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d03a      	beq.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fac:	2b05      	cmp	r3, #5
 8006fae:	d821      	bhi.n	8006ff4 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006fb0:	a201      	add	r2, pc, #4	; (adr r2, 8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb6:	bf00      	nop
 8006fb8:	08006ffb 	.word	0x08006ffb
 8006fbc:	08006fd1 	.word	0x08006fd1
 8006fc0:	08006fe3 	.word	0x08006fe3
 8006fc4:	08006ffb 	.word	0x08006ffb
 8006fc8:	08006ffb 	.word	0x08006ffb
 8006fcc:	08006ffb 	.word	0x08006ffb
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	3304      	adds	r3, #4
 8006fd4:	2101      	movs	r1, #1
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f000 fd74 	bl	8007ac4 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006fe0:	e00c      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	3324      	adds	r3, #36	; 0x24
 8006fe6:	2101      	movs	r1, #1
 8006fe8:	4618      	mov	r0, r3
 8006fea:	f000 fe1d 	bl	8007c28 <RCCEx_PLL3_Config>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006ff2:	e003      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ff8:	e000      	b.n	8006ffc <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006ffc:	7dfb      	ldrb	r3, [r7, #23]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10a      	bne.n	8007018 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007002:	4b57      	ldr	r3, [pc, #348]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007006:	f023 0207 	bic.w	r2, r3, #7
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	4953      	ldr	r1, [pc, #332]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007012:	4313      	orrs	r3, r2
 8007014:	658b      	str	r3, [r1, #88]	; 0x58
 8007016:	e001      	b.n	800701c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007018:	7dfb      	ldrb	r3, [r7, #23]
 800701a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f003 0320 	and.w	r3, r3, #32
 8007024:	2b00      	cmp	r3, #0
 8007026:	d04b      	beq.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800702e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007032:	d02e      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007034:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007038:	d828      	bhi.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800703a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800703e:	d02a      	beq.n	8007096 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007044:	d822      	bhi.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007046:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800704a:	d026      	beq.n	800709a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800704c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007050:	d81c      	bhi.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007056:	d010      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800705c:	d816      	bhi.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800705e:	2b00      	cmp	r3, #0
 8007060:	d01d      	beq.n	800709e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007066:	d111      	bne.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	3304      	adds	r3, #4
 800706c:	2100      	movs	r1, #0
 800706e:	4618      	mov	r0, r3
 8007070:	f000 fd28 	bl	8007ac4 <RCCEx_PLL2_Config>
 8007074:	4603      	mov	r3, r0
 8007076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007078:	e012      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	3324      	adds	r3, #36	; 0x24
 800707e:	2102      	movs	r1, #2
 8007080:	4618      	mov	r0, r3
 8007082:	f000 fdd1 	bl	8007c28 <RCCEx_PLL3_Config>
 8007086:	4603      	mov	r3, r0
 8007088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800708a:	e009      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	75fb      	strb	r3, [r7, #23]
      break;
 8007090:	e006      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007092:	bf00      	nop
 8007094:	e004      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007096:	bf00      	nop
 8007098:	e002      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800709a:	bf00      	nop
 800709c:	e000      	b.n	80070a0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800709e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80070a0:	7dfb      	ldrb	r3, [r7, #23]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d10a      	bne.n	80070bc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80070a6:	4b2e      	ldr	r3, [pc, #184]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070aa:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b4:	492a      	ldr	r1, [pc, #168]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80070b6:	4313      	orrs	r3, r2
 80070b8:	654b      	str	r3, [r1, #84]	; 0x54
 80070ba:	e001      	b.n	80070c0 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070bc:	7dfb      	ldrb	r3, [r7, #23]
 80070be:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d04d      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070d2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070d6:	d02e      	beq.n	8007136 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80070d8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80070dc:	d828      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e2:	d02a      	beq.n	800713a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80070e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e8:	d822      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070ee:	d026      	beq.n	800713e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 80070f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80070f4:	d81c      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 80070f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80070fa:	d010      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 80070fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007100:	d816      	bhi.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8007102:	2b00      	cmp	r3, #0
 8007104:	d01d      	beq.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8007106:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800710a:	d111      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	3304      	adds	r3, #4
 8007110:	2100      	movs	r1, #0
 8007112:	4618      	mov	r0, r3
 8007114:	f000 fcd6 	bl	8007ac4 <RCCEx_PLL2_Config>
 8007118:	4603      	mov	r3, r0
 800711a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800711c:	e012      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	3324      	adds	r3, #36	; 0x24
 8007122:	2102      	movs	r1, #2
 8007124:	4618      	mov	r0, r3
 8007126:	f000 fd7f 	bl	8007c28 <RCCEx_PLL3_Config>
 800712a:	4603      	mov	r3, r0
 800712c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800712e:	e009      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007130:	2301      	movs	r3, #1
 8007132:	75fb      	strb	r3, [r7, #23]
      break;
 8007134:	e006      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007136:	bf00      	nop
 8007138:	e004      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800713a:	bf00      	nop
 800713c:	e002      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800713e:	bf00      	nop
 8007140:	e000      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8007142:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007144:	7dfb      	ldrb	r3, [r7, #23]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d10c      	bne.n	8007164 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800714a:	4b05      	ldr	r3, [pc, #20]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800714c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800714e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007158:	4901      	ldr	r1, [pc, #4]	; (8007160 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800715a:	4313      	orrs	r3, r2
 800715c:	658b      	str	r3, [r1, #88]	; 0x58
 800715e:	e003      	b.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8007160:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007164:	7dfb      	ldrb	r3, [r7, #23]
 8007166:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007170:	2b00      	cmp	r3, #0
 8007172:	d04b      	beq.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800717a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800717e:	d02e      	beq.n	80071de <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8007180:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8007184:	d828      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007186:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800718a:	d02a      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800718c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007190:	d822      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007192:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007196:	d026      	beq.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007198:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800719c:	d81c      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800719e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a2:	d010      	beq.n	80071c6 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80071a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80071a8:	d816      	bhi.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d01d      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80071ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80071b2:	d111      	bne.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	3304      	adds	r3, #4
 80071b8:	2100      	movs	r1, #0
 80071ba:	4618      	mov	r0, r3
 80071bc:	f000 fc82 	bl	8007ac4 <RCCEx_PLL2_Config>
 80071c0:	4603      	mov	r3, r0
 80071c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071c4:	e012      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	3324      	adds	r3, #36	; 0x24
 80071ca:	2102      	movs	r1, #2
 80071cc:	4618      	mov	r0, r3
 80071ce:	f000 fd2b 	bl	8007c28 <RCCEx_PLL3_Config>
 80071d2:	4603      	mov	r3, r0
 80071d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80071d6:	e009      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	75fb      	strb	r3, [r7, #23]
      break;
 80071dc:	e006      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071de:	bf00      	nop
 80071e0:	e004      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071e2:	bf00      	nop
 80071e4:	e002      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071e6:	bf00      	nop
 80071e8:	e000      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 80071ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ec:	7dfb      	ldrb	r3, [r7, #23]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d10a      	bne.n	8007208 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80071f2:	4b9d      	ldr	r3, [pc, #628]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007200:	4999      	ldr	r1, [pc, #612]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007202:	4313      	orrs	r3, r2
 8007204:	658b      	str	r3, [r1, #88]	; 0x58
 8007206:	e001      	b.n	800720c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007208:	7dfb      	ldrb	r3, [r7, #23]
 800720a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 0308 	and.w	r3, r3, #8
 8007214:	2b00      	cmp	r3, #0
 8007216:	d01a      	beq.n	800724e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800721e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007222:	d10a      	bne.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	3324      	adds	r3, #36	; 0x24
 8007228:	2102      	movs	r1, #2
 800722a:	4618      	mov	r0, r3
 800722c:	f000 fcfc 	bl	8007c28 <RCCEx_PLL3_Config>
 8007230:	4603      	mov	r3, r0
 8007232:	2b00      	cmp	r3, #0
 8007234:	d001      	beq.n	800723a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800723a:	4b8b      	ldr	r3, [pc, #556]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800723c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800723e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007248:	4987      	ldr	r1, [pc, #540]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800724a:	4313      	orrs	r3, r2
 800724c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f003 0310 	and.w	r3, r3, #16
 8007256:	2b00      	cmp	r3, #0
 8007258:	d01a      	beq.n	8007290 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007260:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007264:	d10a      	bne.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	3324      	adds	r3, #36	; 0x24
 800726a:	2102      	movs	r1, #2
 800726c:	4618      	mov	r0, r3
 800726e:	f000 fcdb 	bl	8007c28 <RCCEx_PLL3_Config>
 8007272:	4603      	mov	r3, r0
 8007274:	2b00      	cmp	r3, #0
 8007276:	d001      	beq.n	800727c <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 8007278:	2301      	movs	r3, #1
 800727a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800727c:	4b7a      	ldr	r3, [pc, #488]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800727e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007280:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800728a:	4977      	ldr	r1, [pc, #476]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800728c:	4313      	orrs	r3, r2
 800728e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007298:	2b00      	cmp	r3, #0
 800729a:	d034      	beq.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072a6:	d01d      	beq.n	80072e4 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80072a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80072ac:	d817      	bhi.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d003      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80072b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072b6:	d009      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80072b8:	e011      	b.n	80072de <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	3304      	adds	r3, #4
 80072be:	2100      	movs	r1, #0
 80072c0:	4618      	mov	r0, r3
 80072c2:	f000 fbff 	bl	8007ac4 <RCCEx_PLL2_Config>
 80072c6:	4603      	mov	r3, r0
 80072c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072ca:	e00c      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	3324      	adds	r3, #36	; 0x24
 80072d0:	2102      	movs	r1, #2
 80072d2:	4618      	mov	r0, r3
 80072d4:	f000 fca8 	bl	8007c28 <RCCEx_PLL3_Config>
 80072d8:	4603      	mov	r3, r0
 80072da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 80072dc:	e003      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	75fb      	strb	r3, [r7, #23]
      break;
 80072e2:	e000      	b.n	80072e6 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 80072e4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072e6:	7dfb      	ldrb	r3, [r7, #23]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d10a      	bne.n	8007302 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ec:	4b5e      	ldr	r3, [pc, #376]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80072fa:	495b      	ldr	r1, [pc, #364]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072fc:	4313      	orrs	r3, r2
 80072fe:	658b      	str	r3, [r1, #88]	; 0x58
 8007300:	e001      	b.n	8007306 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007302:	7dfb      	ldrb	r3, [r7, #23]
 8007304:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800730e:	2b00      	cmp	r3, #0
 8007310:	d033      	beq.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007318:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800731c:	d01c      	beq.n	8007358 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800731e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007322:	d816      	bhi.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007324:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007328:	d003      	beq.n	8007332 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800732a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800732e:	d007      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8007330:	e00f      	b.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007332:	4b4d      	ldr	r3, [pc, #308]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007336:	4a4c      	ldr	r2, [pc, #304]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007338:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800733c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800733e:	e00c      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	3324      	adds	r3, #36	; 0x24
 8007344:	2101      	movs	r1, #1
 8007346:	4618      	mov	r0, r3
 8007348:	f000 fc6e 	bl	8007c28 <RCCEx_PLL3_Config>
 800734c:	4603      	mov	r3, r0
 800734e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8007350:	e003      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007352:	2301      	movs	r3, #1
 8007354:	75fb      	strb	r3, [r7, #23]
      break;
 8007356:	e000      	b.n	800735a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8007358:	bf00      	nop
    }

    if(ret == HAL_OK)
 800735a:	7dfb      	ldrb	r3, [r7, #23]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10a      	bne.n	8007376 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007360:	4b41      	ldr	r3, [pc, #260]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800736e:	493e      	ldr	r1, [pc, #248]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007370:	4313      	orrs	r3, r2
 8007372:	654b      	str	r3, [r1, #84]	; 0x54
 8007374:	e001      	b.n	800737a <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007382:	2b00      	cmp	r3, #0
 8007384:	d029      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800738a:	2b00      	cmp	r3, #0
 800738c:	d003      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800738e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007392:	d007      	beq.n	80073a4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007394:	e00f      	b.n	80073b6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007396:	4b34      	ldr	r3, [pc, #208]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800739a:	4a33      	ldr	r2, [pc, #204]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800739c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80073a0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80073a2:	e00b      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	3304      	adds	r3, #4
 80073a8:	2102      	movs	r1, #2
 80073aa:	4618      	mov	r0, r3
 80073ac:	f000 fb8a 	bl	8007ac4 <RCCEx_PLL2_Config>
 80073b0:	4603      	mov	r3, r0
 80073b2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80073b4:	e002      	b.n	80073bc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80073b6:	2301      	movs	r3, #1
 80073b8:	75fb      	strb	r3, [r7, #23]
      break;
 80073ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d109      	bne.n	80073d6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80073c2:	4b29      	ldr	r3, [pc, #164]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073c6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073ce:	4926      	ldr	r1, [pc, #152]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80073d0:	4313      	orrs	r3, r2
 80073d2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80073d4:	e001      	b.n	80073da <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80073d6:	7dfb      	ldrb	r3, [r7, #23]
 80073d8:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00a      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3324      	adds	r3, #36	; 0x24
 80073ea:	2102      	movs	r1, #2
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fc1b 	bl	8007c28 <RCCEx_PLL3_Config>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d001      	beq.n	80073fc <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 80073f8:	2301      	movs	r3, #1
 80073fa:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007404:	2b00      	cmp	r3, #0
 8007406:	d033      	beq.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800740c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007410:	d017      	beq.n	8007442 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007412:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007416:	d811      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007418:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800741c:	d013      	beq.n	8007446 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800741e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007422:	d80b      	bhi.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d010      	beq.n	800744a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007428:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800742c:	d106      	bne.n	800743c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800742e:	4b0e      	ldr	r3, [pc, #56]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007432:	4a0d      	ldr	r2, [pc, #52]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007434:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007438:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800743a:	e007      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800743c:	2301      	movs	r3, #1
 800743e:	75fb      	strb	r3, [r7, #23]
      break;
 8007440:	e004      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007442:	bf00      	nop
 8007444:	e002      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8007446:	bf00      	nop
 8007448:	e000      	b.n	800744c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800744a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800744c:	7dfb      	ldrb	r3, [r7, #23]
 800744e:	2b00      	cmp	r3, #0
 8007450:	d10c      	bne.n	800746c <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007452:	4b05      	ldr	r3, [pc, #20]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007454:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007456:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800745e:	4902      	ldr	r1, [pc, #8]	; (8007468 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007460:	4313      	orrs	r3, r2
 8007462:	654b      	str	r3, [r1, #84]	; 0x54
 8007464:	e004      	b.n	8007470 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 8007466:	bf00      	nop
 8007468:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800746c:	7dfb      	ldrb	r3, [r7, #23]
 800746e:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007478:	2b00      	cmp	r3, #0
 800747a:	d008      	beq.n	800748e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800747c:	4b31      	ldr	r3, [pc, #196]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800747e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007480:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007488:	492e      	ldr	r1, [pc, #184]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800748a:	4313      	orrs	r3, r2
 800748c:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d009      	beq.n	80074ae <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800749a:	4b2a      	ldr	r3, [pc, #168]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800749c:	691b      	ldr	r3, [r3, #16]
 800749e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074a8:	4926      	ldr	r1, [pc, #152]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074aa:	4313      	orrs	r3, r2
 80074ac:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80074ba:	4b22      	ldr	r3, [pc, #136]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074be:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80074c6:	491f      	ldr	r1, [pc, #124]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074c8:	4313      	orrs	r3, r2
 80074ca:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00d      	beq.n	80074f4 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80074d8:	4b1a      	ldr	r3, [pc, #104]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074da:	691b      	ldr	r3, [r3, #16]
 80074dc:	4a19      	ldr	r2, [pc, #100]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074de:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80074e2:	6113      	str	r3, [r2, #16]
 80074e4:	4b17      	ldr	r3, [pc, #92]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074e6:	691a      	ldr	r2, [r3, #16]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80074ee:	4915      	ldr	r1, [pc, #84]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074f0:	4313      	orrs	r3, r2
 80074f2:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	da08      	bge.n	800750e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80074fc:	4b11      	ldr	r3, [pc, #68]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80074fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007500:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007508:	490e      	ldr	r1, [pc, #56]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800750a:	4313      	orrs	r3, r2
 800750c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800751a:	4b0a      	ldr	r3, [pc, #40]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007528:	4906      	ldr	r1, [pc, #24]	; (8007544 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800752a:	4313      	orrs	r3, r2
 800752c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800752e:	7dbb      	ldrb	r3, [r7, #22]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d101      	bne.n	8007538 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8007534:	2300      	movs	r3, #0
 8007536:	e000      	b.n	800753a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8007538:	2301      	movs	r3, #1
}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	58024400 	.word	0x58024400

08007548 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800754c:	f7ff f85a 	bl	8006604 <HAL_RCC_GetHCLKFreq>
 8007550:	4602      	mov	r2, r0
 8007552:	4b06      	ldr	r3, [pc, #24]	; (800756c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8007554:	6a1b      	ldr	r3, [r3, #32]
 8007556:	091b      	lsrs	r3, r3, #4
 8007558:	f003 0307 	and.w	r3, r3, #7
 800755c:	4904      	ldr	r1, [pc, #16]	; (8007570 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800755e:	5ccb      	ldrb	r3, [r1, r3]
 8007560:	f003 031f 	and.w	r3, r3, #31
 8007564:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8007568:	4618      	mov	r0, r3
 800756a:	bd80      	pop	{r7, pc}
 800756c:	58024400 	.word	0x58024400
 8007570:	0800a5bc 	.word	0x0800a5bc

08007574 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8007574:	b480      	push	{r7}
 8007576:	b089      	sub	sp, #36	; 0x24
 8007578:	af00      	add	r7, sp, #0
 800757a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800757c:	4ba1      	ldr	r3, [pc, #644]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800757e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007580:	f003 0303 	and.w	r3, r3, #3
 8007584:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8007586:	4b9f      	ldr	r3, [pc, #636]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800758a:	0b1b      	lsrs	r3, r3, #12
 800758c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007590:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007592:	4b9c      	ldr	r3, [pc, #624]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007596:	091b      	lsrs	r3, r3, #4
 8007598:	f003 0301 	and.w	r3, r3, #1
 800759c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800759e:	4b99      	ldr	r3, [pc, #612]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80075a2:	08db      	lsrs	r3, r3, #3
 80075a4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80075a8:	693a      	ldr	r2, [r7, #16]
 80075aa:	fb02 f303 	mul.w	r3, r2, r3
 80075ae:	ee07 3a90 	vmov	s15, r3
 80075b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075b6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f000 8111 	beq.w	80077e4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	2b02      	cmp	r3, #2
 80075c6:	f000 8083 	beq.w	80076d0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	2b02      	cmp	r3, #2
 80075ce:	f200 80a1 	bhi.w	8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80075d8:	69bb      	ldr	r3, [r7, #24]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d056      	beq.n	800768c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80075de:	e099      	b.n	8007714 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80075e0:	4b88      	ldr	r3, [pc, #544]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0320 	and.w	r3, r3, #32
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d02d      	beq.n	8007648 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80075ec:	4b85      	ldr	r3, [pc, #532]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	08db      	lsrs	r3, r3, #3
 80075f2:	f003 0303 	and.w	r3, r3, #3
 80075f6:	4a84      	ldr	r2, [pc, #528]	; (8007808 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80075f8:	fa22 f303 	lsr.w	r3, r2, r3
 80075fc:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80075fe:	68bb      	ldr	r3, [r7, #8]
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007608:	697b      	ldr	r3, [r7, #20]
 800760a:	ee07 3a90 	vmov	s15, r3
 800760e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007612:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007616:	4b7b      	ldr	r3, [pc, #492]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800761a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800761e:	ee07 3a90 	vmov	s15, r3
 8007622:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007626:	ed97 6a03 	vldr	s12, [r7, #12]
 800762a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800762e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007632:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007636:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800763a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800763e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007642:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8007646:	e087      	b.n	8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	ee07 3a90 	vmov	s15, r3
 800764e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007652:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007810 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8007656:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800765a:	4b6a      	ldr	r3, [pc, #424]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800765c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800765e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007662:	ee07 3a90 	vmov	s15, r3
 8007666:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800766a:	ed97 6a03 	vldr	s12, [r7, #12]
 800766e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007672:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007676:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800767a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800767e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007682:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007686:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800768a:	e065      	b.n	8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	ee07 3a90 	vmov	s15, r3
 8007692:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007696:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800769a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800769e:	4b59      	ldr	r3, [pc, #356]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076a6:	ee07 3a90 	vmov	s15, r3
 80076aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80076b2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80076be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80076c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80076c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80076ca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80076ce:	e043      	b.n	8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	ee07 3a90 	vmov	s15, r3
 80076d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076da:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007818 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 80076de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80076e2:	4b48      	ldr	r3, [pc, #288]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80076e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076ea:	ee07 3a90 	vmov	s15, r3
 80076ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80076f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80076f6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80076fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80076fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007702:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007706:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800770a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800770e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007712:	e021      	b.n	8007758 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	ee07 3a90 	vmov	s15, r3
 800771a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800771e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007814 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007722:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007726:	4b37      	ldr	r3, [pc, #220]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800772e:	ee07 3a90 	vmov	s15, r3
 8007732:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007736:	ed97 6a03 	vldr	s12, [r7, #12]
 800773a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800780c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800773e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007742:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007746:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800774a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800774e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007752:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007756:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8007758:	4b2a      	ldr	r3, [pc, #168]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800775a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800775c:	0a5b      	lsrs	r3, r3, #9
 800775e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800776e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007772:	edd7 6a07 	vldr	s13, [r7, #28]
 8007776:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800777a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800777e:	ee17 2a90 	vmov	r2, s15
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8007786:	4b1f      	ldr	r3, [pc, #124]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800778a:	0c1b      	lsrs	r3, r3, #16
 800778c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007790:	ee07 3a90 	vmov	s15, r3
 8007794:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007798:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800779c:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80077a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077ac:	ee17 2a90 	vmov	r2, s15
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 80077b4:	4b13      	ldr	r3, [pc, #76]	; (8007804 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	0e1b      	lsrs	r3, r3, #24
 80077ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80077ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80077ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80077d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80077d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80077da:	ee17 2a90 	vmov	r2, s15
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 80077e2:	e008      	b.n	80077f6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2200      	movs	r2, #0
 80077f4:	609a      	str	r2, [r3, #8]
}
 80077f6:	bf00      	nop
 80077f8:	3724      	adds	r7, #36	; 0x24
 80077fa:	46bd      	mov	sp, r7
 80077fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007800:	4770      	bx	lr
 8007802:	bf00      	nop
 8007804:	58024400 	.word	0x58024400
 8007808:	03d09000 	.word	0x03d09000
 800780c:	46000000 	.word	0x46000000
 8007810:	4c742400 	.word	0x4c742400
 8007814:	4a742400 	.word	0x4a742400
 8007818:	4af42400 	.word	0x4af42400

0800781c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800781c:	b480      	push	{r7}
 800781e:	b089      	sub	sp, #36	; 0x24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007824:	4ba1      	ldr	r3, [pc, #644]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007828:	f003 0303 	and.w	r3, r3, #3
 800782c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800782e:	4b9f      	ldr	r3, [pc, #636]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	0d1b      	lsrs	r3, r3, #20
 8007834:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007838:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800783a:	4b9c      	ldr	r3, [pc, #624]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800783c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800783e:	0a1b      	lsrs	r3, r3, #8
 8007840:	f003 0301 	and.w	r3, r3, #1
 8007844:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8007846:	4b99      	ldr	r3, [pc, #612]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800784a:	08db      	lsrs	r3, r3, #3
 800784c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007850:	693a      	ldr	r2, [r7, #16]
 8007852:	fb02 f303 	mul.w	r3, r2, r3
 8007856:	ee07 3a90 	vmov	s15, r3
 800785a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800785e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8007862:	697b      	ldr	r3, [r7, #20]
 8007864:	2b00      	cmp	r3, #0
 8007866:	f000 8111 	beq.w	8007a8c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800786a:	69bb      	ldr	r3, [r7, #24]
 800786c:	2b02      	cmp	r3, #2
 800786e:	f000 8083 	beq.w	8007978 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8007872:	69bb      	ldr	r3, [r7, #24]
 8007874:	2b02      	cmp	r3, #2
 8007876:	f200 80a1 	bhi.w	80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800787a:	69bb      	ldr	r3, [r7, #24]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d003      	beq.n	8007888 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8007880:	69bb      	ldr	r3, [r7, #24]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d056      	beq.n	8007934 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8007886:	e099      	b.n	80079bc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007888:	4b88      	ldr	r3, [pc, #544]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f003 0320 	and.w	r3, r3, #32
 8007890:	2b00      	cmp	r3, #0
 8007892:	d02d      	beq.n	80078f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007894:	4b85      	ldr	r3, [pc, #532]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	08db      	lsrs	r3, r3, #3
 800789a:	f003 0303 	and.w	r3, r3, #3
 800789e:	4a84      	ldr	r2, [pc, #528]	; (8007ab0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80078a0:	fa22 f303 	lsr.w	r3, r2, r3
 80078a4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	ee07 3a90 	vmov	s15, r3
 80078b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078be:	4b7b      	ldr	r3, [pc, #492]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078c6:	ee07 3a90 	vmov	s15, r3
 80078ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80078d2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80078d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80078da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80078de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80078e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078ea:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80078ee:	e087      	b.n	8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	ee07 3a90 	vmov	s15, r3
 80078f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078fa:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007ab8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80078fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007902:	4b6a      	ldr	r3, [pc, #424]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800790a:	ee07 3a90 	vmov	s15, r3
 800790e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007912:	ed97 6a03 	vldr	s12, [r7, #12]
 8007916:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800791a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800791e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007922:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800792a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800792e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007932:	e065      	b.n	8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007934:	697b      	ldr	r3, [r7, #20]
 8007936:	ee07 3a90 	vmov	s15, r3
 800793a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800793e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8007942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007946:	4b59      	ldr	r3, [pc, #356]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800794a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007956:	ed97 6a03 	vldr	s12, [r7, #12]
 800795a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800795e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007966:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800796a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800796e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007972:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007976:	e043      	b.n	8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007978:	697b      	ldr	r3, [r7, #20]
 800797a:	ee07 3a90 	vmov	s15, r3
 800797e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007982:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007ac0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8007986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800798a:	4b48      	ldr	r3, [pc, #288]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800798c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800798e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007992:	ee07 3a90 	vmov	s15, r3
 8007996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800799a:	ed97 6a03 	vldr	s12, [r7, #12]
 800799e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079ba:	e021      	b.n	8007a00 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	ee07 3a90 	vmov	s15, r3
 80079c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80079c6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007abc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80079ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80079ce:	4b37      	ldr	r3, [pc, #220]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079d6:	ee07 3a90 	vmov	s15, r3
 80079da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80079de:	ed97 6a03 	vldr	s12, [r7, #12]
 80079e2:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80079e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80079ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80079ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80079f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80079f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80079fe:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007a00:	4b2a      	ldr	r3, [pc, #168]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a04:	0a5b      	lsrs	r3, r3, #9
 8007a06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a0a:	ee07 3a90 	vmov	s15, r3
 8007a0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a12:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a26:	ee17 2a90 	vmov	r2, s15
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8007a2e:	4b1f      	ldr	r3, [pc, #124]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a32:	0c1b      	lsrs	r3, r3, #16
 8007a34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a38:	ee07 3a90 	vmov	s15, r3
 8007a3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a40:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a48:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a54:	ee17 2a90 	vmov	r2, s15
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8007a5c:	4b13      	ldr	r3, [pc, #76]	; (8007aac <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a60:	0e1b      	lsrs	r3, r3, #24
 8007a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a66:	ee07 3a90 	vmov	s15, r3
 8007a6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007a72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007a76:	edd7 6a07 	vldr	s13, [r7, #28]
 8007a7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007a7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007a82:	ee17 2a90 	vmov	r2, s15
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8007a8a:	e008      	b.n	8007a9e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2200      	movs	r2, #0
 8007a96:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	609a      	str	r2, [r3, #8]
}
 8007a9e:	bf00      	nop
 8007aa0:	3724      	adds	r7, #36	; 0x24
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa8:	4770      	bx	lr
 8007aaa:	bf00      	nop
 8007aac:	58024400 	.word	0x58024400
 8007ab0:	03d09000 	.word	0x03d09000
 8007ab4:	46000000 	.word	0x46000000
 8007ab8:	4c742400 	.word	0x4c742400
 8007abc:	4a742400 	.word	0x4a742400
 8007ac0:	4af42400 	.word	0x4af42400

08007ac4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b084      	sub	sp, #16
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
 8007acc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007ad2:	4b53      	ldr	r3, [pc, #332]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007ad4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ad6:	f003 0303 	and.w	r3, r3, #3
 8007ada:	2b03      	cmp	r3, #3
 8007adc:	d101      	bne.n	8007ae2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8007ade:	2301      	movs	r3, #1
 8007ae0:	e099      	b.n	8007c16 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007ae2:	4b4f      	ldr	r3, [pc, #316]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a4e      	ldr	r2, [pc, #312]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007ae8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007aec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007aee:	f7fa faa5 	bl	800203c <HAL_GetTick>
 8007af2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007af4:	e008      	b.n	8007b08 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007af6:	f7fa faa1 	bl	800203c <HAL_GetTick>
 8007afa:	4602      	mov	r2, r0
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	1ad3      	subs	r3, r2, r3
 8007b00:	2b02      	cmp	r3, #2
 8007b02:	d901      	bls.n	8007b08 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007b04:	2303      	movs	r3, #3
 8007b06:	e086      	b.n	8007c16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007b08:	4b45      	ldr	r3, [pc, #276]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1f0      	bne.n	8007af6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007b14:	4b42      	ldr	r3, [pc, #264]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b18:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	031b      	lsls	r3, r3, #12
 8007b22:	493f      	ldr	r1, [pc, #252]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b24:	4313      	orrs	r3, r2
 8007b26:	628b      	str	r3, [r1, #40]	; 0x28
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	685b      	ldr	r3, [r3, #4]
 8007b2c:	3b01      	subs	r3, #1
 8007b2e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	025b      	lsls	r3, r3, #9
 8007b3a:	b29b      	uxth	r3, r3
 8007b3c:	431a      	orrs	r2, r3
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	3b01      	subs	r3, #1
 8007b44:	041b      	lsls	r3, r3, #16
 8007b46:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b4a:	431a      	orrs	r2, r3
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	691b      	ldr	r3, [r3, #16]
 8007b50:	3b01      	subs	r3, #1
 8007b52:	061b      	lsls	r3, r3, #24
 8007b54:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b58:	4931      	ldr	r1, [pc, #196]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8007b5e:	4b30      	ldr	r3, [pc, #192]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	695b      	ldr	r3, [r3, #20]
 8007b6a:	492d      	ldr	r1, [pc, #180]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8007b70:	4b2b      	ldr	r3, [pc, #172]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	f023 0220 	bic.w	r2, r3, #32
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	699b      	ldr	r3, [r3, #24]
 8007b7c:	4928      	ldr	r1, [pc, #160]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8007b82:	4b27      	ldr	r3, [pc, #156]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b86:	4a26      	ldr	r2, [pc, #152]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b88:	f023 0310 	bic.w	r3, r3, #16
 8007b8c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8007b8e:	4b24      	ldr	r3, [pc, #144]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007b92:	4b24      	ldr	r3, [pc, #144]	; (8007c24 <RCCEx_PLL2_Config+0x160>)
 8007b94:	4013      	ands	r3, r2
 8007b96:	687a      	ldr	r2, [r7, #4]
 8007b98:	69d2      	ldr	r2, [r2, #28]
 8007b9a:	00d2      	lsls	r2, r2, #3
 8007b9c:	4920      	ldr	r1, [pc, #128]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007b9e:	4313      	orrs	r3, r2
 8007ba0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007ba2:	4b1f      	ldr	r3, [pc, #124]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba6:	4a1e      	ldr	r2, [pc, #120]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007ba8:	f043 0310 	orr.w	r3, r3, #16
 8007bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d106      	bne.n	8007bc2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007bb4:	4b1a      	ldr	r3, [pc, #104]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bb8:	4a19      	ldr	r2, [pc, #100]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007bba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007bbe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bc0:	e00f      	b.n	8007be2 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	2b01      	cmp	r3, #1
 8007bc6:	d106      	bne.n	8007bd6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007bc8:	4b15      	ldr	r3, [pc, #84]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bcc:	4a14      	ldr	r2, [pc, #80]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007bce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007bd2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007bd4:	e005      	b.n	8007be2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007bd6:	4b12      	ldr	r3, [pc, #72]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bda:	4a11      	ldr	r2, [pc, #68]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007bdc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007be0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007be2:	4b0f      	ldr	r3, [pc, #60]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a0e      	ldr	r2, [pc, #56]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007be8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007bec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bee:	f7fa fa25 	bl	800203c <HAL_GetTick>
 8007bf2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007bf4:	e008      	b.n	8007c08 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007bf6:	f7fa fa21 	bl	800203c <HAL_GetTick>
 8007bfa:	4602      	mov	r2, r0
 8007bfc:	68bb      	ldr	r3, [r7, #8]
 8007bfe:	1ad3      	subs	r3, r2, r3
 8007c00:	2b02      	cmp	r3, #2
 8007c02:	d901      	bls.n	8007c08 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007c04:	2303      	movs	r3, #3
 8007c06:	e006      	b.n	8007c16 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007c08:	4b05      	ldr	r3, [pc, #20]	; (8007c20 <RCCEx_PLL2_Config+0x15c>)
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d0f0      	beq.n	8007bf6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	58024400 	.word	0x58024400
 8007c24:	ffff0007 	.word	0xffff0007

08007c28 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b084      	sub	sp, #16
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
 8007c30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007c36:	4b53      	ldr	r3, [pc, #332]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b03      	cmp	r3, #3
 8007c40:	d101      	bne.n	8007c46 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e099      	b.n	8007d7a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007c46:	4b4f      	ldr	r3, [pc, #316]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a4e      	ldr	r2, [pc, #312]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007c4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c52:	f7fa f9f3 	bl	800203c <HAL_GetTick>
 8007c56:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c58:	e008      	b.n	8007c6c <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007c5a:	f7fa f9ef 	bl	800203c <HAL_GetTick>
 8007c5e:	4602      	mov	r2, r0
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d901      	bls.n	8007c6c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007c68:	2303      	movs	r3, #3
 8007c6a:	e086      	b.n	8007d7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007c6c:	4b45      	ldr	r3, [pc, #276]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1f0      	bne.n	8007c5a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007c78:	4b42      	ldr	r3, [pc, #264]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	051b      	lsls	r3, r3, #20
 8007c86:	493f      	ldr	r1, [pc, #252]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007c88:	4313      	orrs	r3, r2
 8007c8a:	628b      	str	r3, [r1, #40]	; 0x28
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	3b01      	subs	r3, #1
 8007c92:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	3b01      	subs	r3, #1
 8007c9c:	025b      	lsls	r3, r3, #9
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	431a      	orrs	r2, r3
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	3b01      	subs	r3, #1
 8007ca8:	041b      	lsls	r3, r3, #16
 8007caa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007cae:	431a      	orrs	r2, r3
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	691b      	ldr	r3, [r3, #16]
 8007cb4:	3b01      	subs	r3, #1
 8007cb6:	061b      	lsls	r3, r3, #24
 8007cb8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007cbc:	4931      	ldr	r1, [pc, #196]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007cc2:	4b30      	ldr	r3, [pc, #192]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cc6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	695b      	ldr	r3, [r3, #20]
 8007cce:	492d      	ldr	r1, [pc, #180]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007cd4:	4b2b      	ldr	r3, [pc, #172]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cd8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	699b      	ldr	r3, [r3, #24]
 8007ce0:	4928      	ldr	r1, [pc, #160]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007ce6:	4b27      	ldr	r3, [pc, #156]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007ce8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cea:	4a26      	ldr	r2, [pc, #152]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007cec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007cf0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007cf2:	4b24      	ldr	r3, [pc, #144]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007cf6:	4b24      	ldr	r3, [pc, #144]	; (8007d88 <RCCEx_PLL3_Config+0x160>)
 8007cf8:	4013      	ands	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	69d2      	ldr	r2, [r2, #28]
 8007cfe:	00d2      	lsls	r2, r2, #3
 8007d00:	4920      	ldr	r1, [pc, #128]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007d06:	4b1f      	ldr	r3, [pc, #124]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	4a1e      	ldr	r2, [pc, #120]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d106      	bne.n	8007d26 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007d18:	4b1a      	ldr	r3, [pc, #104]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a19      	ldr	r2, [pc, #100]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d1e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007d22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d24:	e00f      	b.n	8007d46 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	2b01      	cmp	r3, #1
 8007d2a:	d106      	bne.n	8007d3a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007d2c:	4b15      	ldr	r3, [pc, #84]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d30:	4a14      	ldr	r2, [pc, #80]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007d36:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007d38:	e005      	b.n	8007d46 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007d3a:	4b12      	ldr	r3, [pc, #72]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d3e:	4a11      	ldr	r2, [pc, #68]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d40:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007d44:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007d46:	4b0f      	ldr	r3, [pc, #60]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a0e      	ldr	r2, [pc, #56]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d50:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d52:	f7fa f973 	bl	800203c <HAL_GetTick>
 8007d56:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d58:	e008      	b.n	8007d6c <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007d5a:	f7fa f96f 	bl	800203c <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d901      	bls.n	8007d6c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e006      	b.n	8007d7a <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007d6c:	4b05      	ldr	r3, [pc, #20]	; (8007d84 <RCCEx_PLL3_Config+0x15c>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d0f0      	beq.n	8007d5a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007d78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	58024400 	.word	0x58024400
 8007d88:	ffff0007 	.word	0xffff0007

08007d8c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e0f1      	b.n	8007f82 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2200      	movs	r2, #0
 8007da2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	4a78      	ldr	r2, [pc, #480]	; (8007f8c <HAL_SPI_Init+0x200>)
 8007daa:	4293      	cmp	r3, r2
 8007dac:	d00f      	beq.n	8007dce <HAL_SPI_Init+0x42>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a77      	ldr	r2, [pc, #476]	; (8007f90 <HAL_SPI_Init+0x204>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00a      	beq.n	8007dce <HAL_SPI_Init+0x42>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a75      	ldr	r2, [pc, #468]	; (8007f94 <HAL_SPI_Init+0x208>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d005      	beq.n	8007dce <HAL_SPI_Init+0x42>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	2b0f      	cmp	r3, #15
 8007dc8:	d901      	bls.n	8007dce <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e0d9      	b.n	8007f82 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	f000 fba2 	bl	8008518 <SPI_GetPacketSize>
 8007dd4:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a6c      	ldr	r2, [pc, #432]	; (8007f8c <HAL_SPI_Init+0x200>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d00c      	beq.n	8007dfa <HAL_SPI_Init+0x6e>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a6a      	ldr	r2, [pc, #424]	; (8007f90 <HAL_SPI_Init+0x204>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d007      	beq.n	8007dfa <HAL_SPI_Init+0x6e>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a69      	ldr	r2, [pc, #420]	; (8007f94 <HAL_SPI_Init+0x208>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d002      	beq.n	8007dfa <HAL_SPI_Init+0x6e>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	2b08      	cmp	r3, #8
 8007df8:	d811      	bhi.n	8007e1e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007dfe:	4a63      	ldr	r2, [pc, #396]	; (8007f8c <HAL_SPI_Init+0x200>)
 8007e00:	4293      	cmp	r3, r2
 8007e02:	d009      	beq.n	8007e18 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a61      	ldr	r2, [pc, #388]	; (8007f90 <HAL_SPI_Init+0x204>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d004      	beq.n	8007e18 <HAL_SPI_Init+0x8c>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a60      	ldr	r2, [pc, #384]	; (8007f94 <HAL_SPI_Init+0x208>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d104      	bne.n	8007e22 <HAL_SPI_Init+0x96>
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	2b10      	cmp	r3, #16
 8007e1c:	d901      	bls.n	8007e22 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e0af      	b.n	8007f82 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e28:	b2db      	uxtb	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d106      	bne.n	8007e3c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f7f9 fe70 	bl	8001b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2202      	movs	r2, #2
 8007e40:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	681a      	ldr	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	f022 0201 	bic.w	r2, r2, #1
 8007e52:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	689b      	ldr	r3, [r3, #8]
 8007e5a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007e5e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	699b      	ldr	r3, [r3, #24]
 8007e64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007e68:	d119      	bne.n	8007e9e <HAL_SPI_Init+0x112>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007e72:	d103      	bne.n	8007e7c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d008      	beq.n	8007e8e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d10c      	bne.n	8007e9e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007e88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007e8c:	d107      	bne.n	8007e9e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	681a      	ldr	r2, [r3, #0]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007e9c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	69da      	ldr	r2, [r3, #28]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb0:	ea42 0103 	orr.w	r1, r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	68da      	ldr	r2, [r3, #12]
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	430a      	orrs	r2, r1
 8007ebe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec8:	431a      	orrs	r2, r3
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ece:	431a      	orrs	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	699b      	ldr	r3, [r3, #24]
 8007ed4:	431a      	orrs	r2, r3
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	431a      	orrs	r2, r3
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	695b      	ldr	r3, [r3, #20]
 8007ee0:	431a      	orrs	r2, r3
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6a1b      	ldr	r3, [r3, #32]
 8007ee6:	431a      	orrs	r2, r3
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	685b      	ldr	r3, [r3, #4]
 8007eec:	431a      	orrs	r2, r3
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ef2:	431a      	orrs	r2, r3
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	689b      	ldr	r3, [r3, #8]
 8007ef8:	431a      	orrs	r2, r3
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007efe:	ea42 0103 	orr.w	r1, r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	430a      	orrs	r2, r1
 8007f0c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	685b      	ldr	r3, [r3, #4]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d113      	bne.n	8007f3e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f28:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007f3c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f022 0201 	bic.w	r2, r2, #1
 8007f4c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d00a      	beq.n	8007f70 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68db      	ldr	r3, [r3, #12]
 8007f60:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	2200      	movs	r2, #0
 8007f74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007f80:	2300      	movs	r3, #0
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	3710      	adds	r7, #16
 8007f86:	46bd      	mov	sp, r7
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	bf00      	nop
 8007f8c:	40013000 	.word	0x40013000
 8007f90:	40003800 	.word	0x40003800
 8007f94:	40003c00 	.word	0x40003c00

08007f98 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f98:	b580      	push	{r7, lr}
 8007f9a:	b08a      	sub	sp, #40	; 0x28
 8007f9c:	af02      	add	r7, sp, #8
 8007f9e:	60f8      	str	r0, [r7, #12]
 8007fa0:	60b9      	str	r1, [r7, #8]
 8007fa2:	603b      	str	r3, [r7, #0]
 8007fa4:	4613      	mov	r3, r2
 8007fa6:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	3320      	adds	r3, #32
 8007fae:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007fba:	2b01      	cmp	r3, #1
 8007fbc:	d101      	bne.n	8007fc2 <HAL_SPI_Transmit+0x2a>
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	e1d7      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007fca:	f7fa f837 	bl	800203c <HAL_GetTick>
 8007fce:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007fd6:	b2db      	uxtb	r3, r3
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d007      	beq.n	8007fec <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007fdc:	2302      	movs	r3, #2
 8007fde:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007fe8:	7efb      	ldrb	r3, [r7, #27]
 8007fea:	e1c2      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d002      	beq.n	8007ff8 <HAL_SPI_Transmit+0x60>
 8007ff2:	88fb      	ldrh	r3, [r7, #6]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d107      	bne.n	8008008 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	2200      	movs	r2, #0
 8008000:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008004:	7efb      	ldrb	r3, [r7, #27]
 8008006:	e1b4      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2203      	movs	r2, #3
 800800c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2200      	movs	r2, #0
 8008014:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	68ba      	ldr	r2, [r7, #8]
 800801c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	88fa      	ldrh	r2, [r7, #6]
 8008022:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	88fa      	ldrh	r2, [r7, #6]
 800802a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	2200      	movs	r2, #0
 8008032:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	2200      	movs	r2, #0
 8008038:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2200      	movs	r2, #0
 8008040:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2200      	movs	r2, #0
 8008048:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	2200      	movs	r2, #0
 800804e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	689b      	ldr	r3, [r3, #8]
 8008054:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008058:	d107      	bne.n	800806a <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008068:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	685a      	ldr	r2, [r3, #4]
 8008070:	4b96      	ldr	r3, [pc, #600]	; (80082cc <HAL_SPI_Transmit+0x334>)
 8008072:	4013      	ands	r3, r2
 8008074:	88f9      	ldrh	r1, [r7, #6]
 8008076:	68fa      	ldr	r2, [r7, #12]
 8008078:	6812      	ldr	r2, [r2, #0]
 800807a:	430b      	orrs	r3, r1
 800807c:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	f042 0201 	orr.w	r2, r2, #1
 800808c:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008096:	d107      	bne.n	80080a8 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	681a      	ldr	r2, [r3, #0]
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080a6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	68db      	ldr	r3, [r3, #12]
 80080ac:	2b0f      	cmp	r3, #15
 80080ae:	d947      	bls.n	8008140 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80080b0:	e03f      	b.n	8008132 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	695b      	ldr	r3, [r3, #20]
 80080b8:	f003 0302 	and.w	r3, r3, #2
 80080bc:	2b02      	cmp	r3, #2
 80080be:	d114      	bne.n	80080ea <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	6812      	ldr	r2, [r2, #0]
 80080ca:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080d0:	1d1a      	adds	r2, r3, #4
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080dc:	b29b      	uxth	r3, r3
 80080de:	3b01      	subs	r3, #1
 80080e0:	b29a      	uxth	r2, r3
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080e8:	e023      	b.n	8008132 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80080ea:	f7f9 ffa7 	bl	800203c <HAL_GetTick>
 80080ee:	4602      	mov	r2, r0
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	1ad3      	subs	r3, r2, r3
 80080f4:	683a      	ldr	r2, [r7, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d803      	bhi.n	8008102 <HAL_SPI_Transmit+0x16a>
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008100:	d102      	bne.n	8008108 <HAL_SPI_Transmit+0x170>
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d114      	bne.n	8008132 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8008108:	68f8      	ldr	r0, [r7, #12]
 800810a:	f000 f937 	bl	800837c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800811c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	2201      	movs	r2, #1
 800812a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800812e:	2303      	movs	r3, #3
 8008130:	e11f      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008138:	b29b      	uxth	r3, r3
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1b9      	bne.n	80080b2 <HAL_SPI_Transmit+0x11a>
 800813e:	e0f2      	b.n	8008326 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	68db      	ldr	r3, [r3, #12]
 8008144:	2b07      	cmp	r3, #7
 8008146:	f240 80e7 	bls.w	8008318 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800814a:	e05d      	b.n	8008208 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	695b      	ldr	r3, [r3, #20]
 8008152:	f003 0302 	and.w	r3, r3, #2
 8008156:	2b02      	cmp	r3, #2
 8008158:	d132      	bne.n	80081c0 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b01      	cmp	r3, #1
 8008164:	d918      	bls.n	8008198 <HAL_SPI_Transmit+0x200>
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d014      	beq.n	8008198 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6812      	ldr	r2, [r2, #0]
 8008178:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800817e:	1d1a      	adds	r2, r3, #4
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800818a:	b29b      	uxth	r3, r3
 800818c:	3b02      	subs	r3, #2
 800818e:	b29a      	uxth	r2, r3
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008196:	e037      	b.n	8008208 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800819c:	881a      	ldrh	r2, [r3, #0]
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081a6:	1c9a      	adds	r2, r3, #2
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	3b01      	subs	r3, #1
 80081b6:	b29a      	uxth	r2, r3
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80081be:	e023      	b.n	8008208 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80081c0:	f7f9 ff3c 	bl	800203c <HAL_GetTick>
 80081c4:	4602      	mov	r2, r0
 80081c6:	697b      	ldr	r3, [r7, #20]
 80081c8:	1ad3      	subs	r3, r2, r3
 80081ca:	683a      	ldr	r2, [r7, #0]
 80081cc:	429a      	cmp	r2, r3
 80081ce:	d803      	bhi.n	80081d8 <HAL_SPI_Transmit+0x240>
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081d6:	d102      	bne.n	80081de <HAL_SPI_Transmit+0x246>
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d114      	bne.n	8008208 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80081de:	68f8      	ldr	r0, [r7, #12]
 80081e0:	f000 f8cc 	bl	800837c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	2201      	movs	r2, #1
 8008200:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008204:	2303      	movs	r3, #3
 8008206:	e0b4      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800820e:	b29b      	uxth	r3, r3
 8008210:	2b00      	cmp	r3, #0
 8008212:	d19b      	bne.n	800814c <HAL_SPI_Transmit+0x1b4>
 8008214:	e087      	b.n	8008326 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	695b      	ldr	r3, [r3, #20]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b02      	cmp	r3, #2
 8008222:	d155      	bne.n	80082d0 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800822a:	b29b      	uxth	r3, r3
 800822c:	2b03      	cmp	r3, #3
 800822e:	d918      	bls.n	8008262 <HAL_SPI_Transmit+0x2ca>
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008234:	2b40      	cmp	r3, #64	; 0x40
 8008236:	d914      	bls.n	8008262 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	6812      	ldr	r2, [r2, #0]
 8008242:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008248:	1d1a      	adds	r2, r3, #4
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008254:	b29b      	uxth	r3, r3
 8008256:	3b04      	subs	r3, #4
 8008258:	b29a      	uxth	r2, r3
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008260:	e05a      	b.n	8008318 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008268:	b29b      	uxth	r3, r3
 800826a:	2b01      	cmp	r3, #1
 800826c:	d917      	bls.n	800829e <HAL_SPI_Transmit+0x306>
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800827a:	881a      	ldrh	r2, [r3, #0]
 800827c:	69fb      	ldr	r3, [r7, #28]
 800827e:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008284:	1c9a      	adds	r2, r3, #2
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008290:	b29b      	uxth	r3, r3
 8008292:	3b02      	subs	r3, #2
 8008294:	b29a      	uxth	r2, r3
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800829c:	e03c      	b.n	8008318 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	3320      	adds	r3, #32
 80082a8:	7812      	ldrb	r2, [r2, #0]
 80082aa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29a      	uxth	r2, r3
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80082c8:	e026      	b.n	8008318 <HAL_SPI_Transmit+0x380>
 80082ca:	bf00      	nop
 80082cc:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80082d0:	f7f9 feb4 	bl	800203c <HAL_GetTick>
 80082d4:	4602      	mov	r2, r0
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	683a      	ldr	r2, [r7, #0]
 80082dc:	429a      	cmp	r2, r3
 80082de:	d803      	bhi.n	80082e8 <HAL_SPI_Transmit+0x350>
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082e6:	d102      	bne.n	80082ee <HAL_SPI_Transmit+0x356>
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d114      	bne.n	8008318 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 80082ee:	68f8      	ldr	r0, [r7, #12]
 80082f0:	f000 f844 	bl	800837c <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	2200      	movs	r2, #0
 80082f8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008302:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008314:	2303      	movs	r3, #3
 8008316:	e02c      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	f47f af78 	bne.w	8008216 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	9300      	str	r3, [sp, #0]
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	2200      	movs	r2, #0
 800832e:	2108      	movs	r1, #8
 8008330:	68f8      	ldr	r0, [r7, #12]
 8008332:	f000 f8c3 	bl	80084bc <SPI_WaitOnFlagUntilTimeout>
 8008336:	4603      	mov	r3, r0
 8008338:	2b00      	cmp	r3, #0
 800833a:	d007      	beq.n	800834c <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008342:	f043 0220 	orr.w	r2, r3, #32
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	f000 f815 	bl	800837c <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	2200      	movs	r2, #0
 8008356:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008368:	2b00      	cmp	r3, #0
 800836a:	d001      	beq.n	8008370 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e000      	b.n	8008372 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 8008370:	7efb      	ldrb	r3, [r7, #27]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3720      	adds	r7, #32
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}
 800837a:	bf00      	nop

0800837c <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800837c:	b480      	push	{r7}
 800837e:	b085      	sub	sp, #20
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	695b      	ldr	r3, [r3, #20]
 800838a:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	699a      	ldr	r2, [r3, #24]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f042 0208 	orr.w	r2, r2, #8
 800839a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	699a      	ldr	r2, [r3, #24]
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f042 0210 	orr.w	r2, r2, #16
 80083aa:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	681a      	ldr	r2, [r3, #0]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	f022 0201 	bic.w	r2, r2, #1
 80083ba:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6919      	ldr	r1, [r3, #16]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681a      	ldr	r2, [r3, #0]
 80083c6:	4b3c      	ldr	r3, [pc, #240]	; (80084b8 <SPI_CloseTransfer+0x13c>)
 80083c8:	400b      	ands	r3, r1
 80083ca:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	689a      	ldr	r2, [r3, #8]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 80083da:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80083e2:	b2db      	uxtb	r3, r3
 80083e4:	2b04      	cmp	r3, #4
 80083e6:	d014      	beq.n	8008412 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	f003 0320 	and.w	r3, r3, #32
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d00f      	beq.n	8008412 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	699a      	ldr	r2, [r3, #24]
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f042 0220 	orr.w	r2, r2, #32
 8008410:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008418:	b2db      	uxtb	r3, r3
 800841a:	2b03      	cmp	r3, #3
 800841c:	d014      	beq.n	8008448 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008424:	2b00      	cmp	r3, #0
 8008426:	d00f      	beq.n	8008448 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800842e:	f043 0204 	orr.w	r2, r3, #4
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	699a      	ldr	r2, [r3, #24]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008446:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00f      	beq.n	8008472 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008458:	f043 0201 	orr.w	r2, r3, #1
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	699a      	ldr	r2, [r3, #24]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008470:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008478:	2b00      	cmp	r3, #0
 800847a:	d00f      	beq.n	800849c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008482:	f043 0208 	orr.w	r2, r3, #8
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	699a      	ldr	r2, [r3, #24]
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800849a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2200      	movs	r2, #0
 80084a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 80084ac:	bf00      	nop
 80084ae:	3714      	adds	r7, #20
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr
 80084b8:	fffffc90 	.word	0xfffffc90

080084bc <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	60f8      	str	r0, [r7, #12]
 80084c4:	60b9      	str	r1, [r7, #8]
 80084c6:	603b      	str	r3, [r7, #0]
 80084c8:	4613      	mov	r3, r2
 80084ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084cc:	e010      	b.n	80084f0 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80084ce:	f7f9 fdb5 	bl	800203c <HAL_GetTick>
 80084d2:	4602      	mov	r2, r0
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	1ad3      	subs	r3, r2, r3
 80084d8:	69ba      	ldr	r2, [r7, #24]
 80084da:	429a      	cmp	r2, r3
 80084dc:	d803      	bhi.n	80084e6 <SPI_WaitOnFlagUntilTimeout+0x2a>
 80084de:	69bb      	ldr	r3, [r7, #24]
 80084e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084e4:	d102      	bne.n	80084ec <SPI_WaitOnFlagUntilTimeout+0x30>
 80084e6:	69bb      	ldr	r3, [r7, #24]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d101      	bne.n	80084f0 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 80084ec:	2303      	movs	r3, #3
 80084ee:	e00f      	b.n	8008510 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	695a      	ldr	r2, [r3, #20]
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	4013      	ands	r3, r2
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	429a      	cmp	r2, r3
 80084fe:	bf0c      	ite	eq
 8008500:	2301      	moveq	r3, #1
 8008502:	2300      	movne	r3, #0
 8008504:	b2db      	uxtb	r3, r3
 8008506:	461a      	mov	r2, r3
 8008508:	79fb      	ldrb	r3, [r7, #7]
 800850a:	429a      	cmp	r2, r3
 800850c:	d0df      	beq.n	80084ce <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800850e:	2300      	movs	r3, #0
}
 8008510:	4618      	mov	r0, r3
 8008512:	3710      	adds	r7, #16
 8008514:	46bd      	mov	sp, r7
 8008516:	bd80      	pop	{r7, pc}

08008518 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008524:	095b      	lsrs	r3, r3, #5
 8008526:	3301      	adds	r3, #1
 8008528:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	68db      	ldr	r3, [r3, #12]
 800852e:	3301      	adds	r3, #1
 8008530:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	3307      	adds	r3, #7
 8008536:	08db      	lsrs	r3, r3, #3
 8008538:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800853a:	68bb      	ldr	r3, [r7, #8]
 800853c:	68fa      	ldr	r2, [r7, #12]
 800853e:	fb02 f303 	mul.w	r3, r2, r3
}
 8008542:	4618      	mov	r0, r3
 8008544:	3714      	adds	r7, #20
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr

0800854e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800854e:	b580      	push	{r7, lr}
 8008550:	b082      	sub	sp, #8
 8008552:	af00      	add	r7, sp, #0
 8008554:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2b00      	cmp	r3, #0
 800855a:	d101      	bne.n	8008560 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800855c:	2301      	movs	r3, #1
 800855e:	e042      	b.n	80085e6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008566:	2b00      	cmp	r3, #0
 8008568:	d106      	bne.n	8008578 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2200      	movs	r2, #0
 800856e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f7f9 fb3e 	bl	8001bf4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2224      	movs	r2, #36	; 0x24
 800857c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	681a      	ldr	r2, [r3, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f022 0201 	bic.w	r2, r2, #1
 800858e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008590:	6878      	ldr	r0, [r7, #4]
 8008592:	f000 fbeb 	bl	8008d6c <UART_SetConfig>
 8008596:	4603      	mov	r3, r0
 8008598:	2b01      	cmp	r3, #1
 800859a:	d101      	bne.n	80085a0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800859c:	2301      	movs	r3, #1
 800859e:	e022      	b.n	80085e6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d002      	beq.n	80085ae <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f001 f947 	bl	800983c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80085bc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	689a      	ldr	r2, [r3, #8]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80085cc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	f042 0201 	orr.w	r2, r2, #1
 80085dc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 f9ce 	bl	8009980 <UART_CheckIdleState>
 80085e4:	4603      	mov	r3, r0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3708      	adds	r7, #8
 80085ea:	46bd      	mov	sp, r7
 80085ec:	bd80      	pop	{r7, pc}
	...

080085f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b0ba      	sub	sp, #232	; 0xe8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	69db      	ldr	r3, [r3, #28]
 80085fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008616:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800861a:	f640 030f 	movw	r3, #2063	; 0x80f
 800861e:	4013      	ands	r3, r2
 8008620:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008624:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008628:	2b00      	cmp	r3, #0
 800862a:	d11b      	bne.n	8008664 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800862c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008630:	f003 0320 	and.w	r3, r3, #32
 8008634:	2b00      	cmp	r3, #0
 8008636:	d015      	beq.n	8008664 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8008638:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800863c:	f003 0320 	and.w	r3, r3, #32
 8008640:	2b00      	cmp	r3, #0
 8008642:	d105      	bne.n	8008650 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8008644:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008648:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800864c:	2b00      	cmp	r3, #0
 800864e:	d009      	beq.n	8008664 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008654:	2b00      	cmp	r3, #0
 8008656:	f000 835a 	beq.w	8008d0e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	4798      	blx	r3
      }
      return;
 8008662:	e354      	b.n	8008d0e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8008664:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008668:	2b00      	cmp	r3, #0
 800866a:	f000 811f 	beq.w	80088ac <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800866e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008672:	4b8b      	ldr	r3, [pc, #556]	; (80088a0 <HAL_UART_IRQHandler+0x2b0>)
 8008674:	4013      	ands	r3, r2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d106      	bne.n	8008688 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800867a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800867e:	4b89      	ldr	r3, [pc, #548]	; (80088a4 <HAL_UART_IRQHandler+0x2b4>)
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	f000 8112 	beq.w	80088ac <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008688:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800868c:	f003 0301 	and.w	r3, r3, #1
 8008690:	2b00      	cmp	r3, #0
 8008692:	d011      	beq.n	80086b8 <HAL_UART_IRQHandler+0xc8>
 8008694:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008698:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00b      	beq.n	80086b8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2201      	movs	r2, #1
 80086a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086ae:	f043 0201 	orr.w	r2, r3, #1
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086bc:	f003 0302 	and.w	r3, r3, #2
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d011      	beq.n	80086e8 <HAL_UART_IRQHandler+0xf8>
 80086c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086c8:	f003 0301 	and.w	r3, r3, #1
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d00b      	beq.n	80086e8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2202      	movs	r2, #2
 80086d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086de:	f043 0204 	orr.w	r2, r3, #4
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80086e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80086ec:	f003 0304 	and.w	r3, r3, #4
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d011      	beq.n	8008718 <HAL_UART_IRQHandler+0x128>
 80086f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80086f8:	f003 0301 	and.w	r3, r3, #1
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d00b      	beq.n	8008718 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	2204      	movs	r2, #4
 8008706:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800870e:	f043 0202 	orr.w	r2, r3, #2
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008718:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800871c:	f003 0308 	and.w	r3, r3, #8
 8008720:	2b00      	cmp	r3, #0
 8008722:	d017      	beq.n	8008754 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008728:	f003 0320 	and.w	r3, r3, #32
 800872c:	2b00      	cmp	r3, #0
 800872e:	d105      	bne.n	800873c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8008730:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008734:	4b5a      	ldr	r3, [pc, #360]	; (80088a0 <HAL_UART_IRQHandler+0x2b0>)
 8008736:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00b      	beq.n	8008754 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	681b      	ldr	r3, [r3, #0]
 8008740:	2208      	movs	r2, #8
 8008742:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800874a:	f043 0208 	orr.w	r2, r3, #8
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008758:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800875c:	2b00      	cmp	r3, #0
 800875e:	d012      	beq.n	8008786 <HAL_UART_IRQHandler+0x196>
 8008760:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008764:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008768:	2b00      	cmp	r3, #0
 800876a:	d00c      	beq.n	8008786 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008774:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800877c:	f043 0220 	orr.w	r2, r3, #32
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800878c:	2b00      	cmp	r3, #0
 800878e:	f000 82c0 	beq.w	8008d12 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008792:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008796:	f003 0320 	and.w	r3, r3, #32
 800879a:	2b00      	cmp	r3, #0
 800879c:	d013      	beq.n	80087c6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800879e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80087a2:	f003 0320 	and.w	r3, r3, #32
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d105      	bne.n	80087b6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80087aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80087ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d007      	beq.n	80087c6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d003      	beq.n	80087c6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087c2:	6878      	ldr	r0, [r7, #4]
 80087c4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80087cc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	689b      	ldr	r3, [r3, #8]
 80087d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087da:	2b40      	cmp	r3, #64	; 0x40
 80087dc:	d005      	beq.n	80087ea <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80087de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80087e2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d04f      	beq.n	800888a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80087ea:	6878      	ldr	r0, [r7, #4]
 80087ec:	f001 f9dc 	bl	8009ba8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fa:	2b40      	cmp	r3, #64	; 0x40
 80087fc:	d141      	bne.n	8008882 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	3308      	adds	r3, #8
 8008804:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008808:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800880c:	e853 3f00 	ldrex	r3, [r3]
 8008810:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008814:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008818:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800881c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	3308      	adds	r3, #8
 8008826:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800882a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800882e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008832:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008836:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800883a:	e841 2300 	strex	r3, r2, [r1]
 800883e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008842:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008846:	2b00      	cmp	r3, #0
 8008848:	d1d9      	bne.n	80087fe <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800884e:	2b00      	cmp	r3, #0
 8008850:	d013      	beq.n	800887a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008856:	4a14      	ldr	r2, [pc, #80]	; (80088a8 <HAL_UART_IRQHandler+0x2b8>)
 8008858:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885e:	4618      	mov	r0, r3
 8008860:	f7fa fbc6 	bl	8002ff0 <HAL_DMA_Abort_IT>
 8008864:	4603      	mov	r3, r0
 8008866:	2b00      	cmp	r3, #0
 8008868:	d017      	beq.n	800889a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800886e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008870:	687a      	ldr	r2, [r7, #4]
 8008872:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008874:	4610      	mov	r0, r2
 8008876:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008878:	e00f      	b.n	800889a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800887a:	6878      	ldr	r0, [r7, #4]
 800887c:	f000 fa60 	bl	8008d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008880:	e00b      	b.n	800889a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008882:	6878      	ldr	r0, [r7, #4]
 8008884:	f000 fa5c 	bl	8008d40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008888:	e007      	b.n	800889a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800888a:	6878      	ldr	r0, [r7, #4]
 800888c:	f000 fa58 	bl	8008d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008898:	e23b      	b.n	8008d12 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800889a:	bf00      	nop
    return;
 800889c:	e239      	b.n	8008d12 <HAL_UART_IRQHandler+0x722>
 800889e:	bf00      	nop
 80088a0:	10000001 	.word	0x10000001
 80088a4:	04000120 	.word	0x04000120
 80088a8:	08009c75 	.word	0x08009c75

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	f040 81ce 	bne.w	8008c52 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80088b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088ba:	f003 0310 	and.w	r3, r3, #16
 80088be:	2b00      	cmp	r3, #0
 80088c0:	f000 81c7 	beq.w	8008c52 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80088c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088c8:	f003 0310 	and.w	r3, r3, #16
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	f000 81c0 	beq.w	8008c52 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	2210      	movs	r2, #16
 80088d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e4:	2b40      	cmp	r3, #64	; 0x40
 80088e6:	f040 813b 	bne.w	8008b60 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a8b      	ldr	r2, [pc, #556]	; (8008b20 <HAL_UART_IRQHandler+0x530>)
 80088f2:	4293      	cmp	r3, r2
 80088f4:	d059      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	4a89      	ldr	r2, [pc, #548]	; (8008b24 <HAL_UART_IRQHandler+0x534>)
 80088fe:	4293      	cmp	r3, r2
 8008900:	d053      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	4a87      	ldr	r2, [pc, #540]	; (8008b28 <HAL_UART_IRQHandler+0x538>)
 800890a:	4293      	cmp	r3, r2
 800890c:	d04d      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a85      	ldr	r2, [pc, #532]	; (8008b2c <HAL_UART_IRQHandler+0x53c>)
 8008916:	4293      	cmp	r3, r2
 8008918:	d047      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a83      	ldr	r2, [pc, #524]	; (8008b30 <HAL_UART_IRQHandler+0x540>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d041      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a81      	ldr	r2, [pc, #516]	; (8008b34 <HAL_UART_IRQHandler+0x544>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d03b      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	4a7f      	ldr	r2, [pc, #508]	; (8008b38 <HAL_UART_IRQHandler+0x548>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d035      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a7d      	ldr	r2, [pc, #500]	; (8008b3c <HAL_UART_IRQHandler+0x54c>)
 8008946:	4293      	cmp	r3, r2
 8008948:	d02f      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a7b      	ldr	r2, [pc, #492]	; (8008b40 <HAL_UART_IRQHandler+0x550>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d029      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	4a79      	ldr	r2, [pc, #484]	; (8008b44 <HAL_UART_IRQHandler+0x554>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d023      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	4a77      	ldr	r2, [pc, #476]	; (8008b48 <HAL_UART_IRQHandler+0x558>)
 800896a:	4293      	cmp	r3, r2
 800896c:	d01d      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a75      	ldr	r2, [pc, #468]	; (8008b4c <HAL_UART_IRQHandler+0x55c>)
 8008976:	4293      	cmp	r3, r2
 8008978:	d017      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	4a73      	ldr	r2, [pc, #460]	; (8008b50 <HAL_UART_IRQHandler+0x560>)
 8008982:	4293      	cmp	r3, r2
 8008984:	d011      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a71      	ldr	r2, [pc, #452]	; (8008b54 <HAL_UART_IRQHandler+0x564>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d00b      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a6f      	ldr	r2, [pc, #444]	; (8008b58 <HAL_UART_IRQHandler+0x568>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d005      	beq.n	80089aa <HAL_UART_IRQHandler+0x3ba>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a6d      	ldr	r2, [pc, #436]	; (8008b5c <HAL_UART_IRQHandler+0x56c>)
 80089a6:	4293      	cmp	r3, r2
 80089a8:	d105      	bne.n	80089b6 <HAL_UART_IRQHandler+0x3c6>
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	685b      	ldr	r3, [r3, #4]
 80089b2:	b29b      	uxth	r3, r3
 80089b4:	e004      	b.n	80089c0 <HAL_UART_IRQHandler+0x3d0>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	b29b      	uxth	r3, r3
 80089c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80089c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	f000 81a4 	beq.w	8008d16 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80089d4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089d8:	429a      	cmp	r2, r3
 80089da:	f080 819c 	bcs.w	8008d16 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80089e4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089ec:	69db      	ldr	r3, [r3, #28]
 80089ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80089f2:	f000 8086 	beq.w	8008b02 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008a02:	e853 3f00 	ldrex	r3, [r3]
 8008a06:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008a0a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008a0e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a12:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008a20:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008a24:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a28:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008a2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008a38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d1da      	bne.n	80089f6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	3308      	adds	r3, #8
 8008a46:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a4a:	e853 3f00 	ldrex	r3, [r3]
 8008a4e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008a52:	f023 0301 	bic.w	r3, r3, #1
 8008a56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	3308      	adds	r3, #8
 8008a60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008a64:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008a68:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008a6c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008a76:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e1      	bne.n	8008a40 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	3308      	adds	r3, #8
 8008a82:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008a8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a92:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008aa0:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008aa2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008aa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e3      	bne.n	8008a7c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2220      	movs	r2, #32
 8008ab8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ad0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ad2:	f023 0310 	bic.w	r3, r3, #16
 8008ad6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008ae4:	65bb      	str	r3, [r7, #88]	; 0x58
 8008ae6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008aea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008af2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e4      	bne.n	8008ac2 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7f9 ff59 	bl	80029b4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b0e:	b29b      	uxth	r3, r3
 8008b10:	1ad3      	subs	r3, r2, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	4619      	mov	r1, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 f91c 	bl	8008d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008b1c:	e0fb      	b.n	8008d16 <HAL_UART_IRQHandler+0x726>
 8008b1e:	bf00      	nop
 8008b20:	40020010 	.word	0x40020010
 8008b24:	40020028 	.word	0x40020028
 8008b28:	40020040 	.word	0x40020040
 8008b2c:	40020058 	.word	0x40020058
 8008b30:	40020070 	.word	0x40020070
 8008b34:	40020088 	.word	0x40020088
 8008b38:	400200a0 	.word	0x400200a0
 8008b3c:	400200b8 	.word	0x400200b8
 8008b40:	40020410 	.word	0x40020410
 8008b44:	40020428 	.word	0x40020428
 8008b48:	40020440 	.word	0x40020440
 8008b4c:	40020458 	.word	0x40020458
 8008b50:	40020470 	.word	0x40020470
 8008b54:	40020488 	.word	0x40020488
 8008b58:	400204a0 	.word	0x400204a0
 8008b5c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b6c:	b29b      	uxth	r3, r3
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008b7a:	b29b      	uxth	r3, r3
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	f000 80cc 	beq.w	8008d1a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8008b82:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008b86:	2b00      	cmp	r3, #0
 8008b88:	f000 80c7 	beq.w	8008d1a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b94:	e853 3f00 	ldrex	r3, [r3]
 8008b98:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008b9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008ba0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	461a      	mov	r2, r3
 8008baa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008bae:	647b      	str	r3, [r7, #68]	; 0x44
 8008bb0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008bb4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008bb6:	e841 2300 	strex	r3, r2, [r1]
 8008bba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d1e4      	bne.n	8008b8c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3308      	adds	r3, #8
 8008bc8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bcc:	e853 3f00 	ldrex	r3, [r3]
 8008bd0:	623b      	str	r3, [r7, #32]
   return(result);
 8008bd2:	6a3a      	ldr	r2, [r7, #32]
 8008bd4:	4b54      	ldr	r3, [pc, #336]	; (8008d28 <HAL_UART_IRQHandler+0x738>)
 8008bd6:	4013      	ands	r3, r2
 8008bd8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3308      	adds	r3, #8
 8008be2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008be6:	633a      	str	r2, [r7, #48]	; 0x30
 8008be8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008bec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008bee:	e841 2300 	strex	r3, r2, [r1]
 8008bf2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d1e3      	bne.n	8008bc2 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2220      	movs	r2, #32
 8008bfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	2200      	movs	r2, #0
 8008c06:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c14:	693b      	ldr	r3, [r7, #16]
 8008c16:	e853 3f00 	ldrex	r3, [r3]
 8008c1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	f023 0310 	bic.w	r3, r3, #16
 8008c22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	461a      	mov	r2, r3
 8008c2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008c30:	61fb      	str	r3, [r7, #28]
 8008c32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c34:	69b9      	ldr	r1, [r7, #24]
 8008c36:	69fa      	ldr	r2, [r7, #28]
 8008c38:	e841 2300 	strex	r3, r2, [r1]
 8008c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d1e4      	bne.n	8008c0e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008c44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c48:	4619      	mov	r1, r3
 8008c4a:	6878      	ldr	r0, [r7, #4]
 8008c4c:	f000 f882 	bl	8008d54 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008c50:	e063      	b.n	8008d1a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	d00e      	beq.n	8008c7c <HAL_UART_IRQHandler+0x68c>
 8008c5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d008      	beq.n	8008c7c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008c72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008c74:	6878      	ldr	r0, [r7, #4]
 8008c76:	f001 f83e 	bl	8009cf6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008c7a:	e051      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008c7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d014      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008c88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d105      	bne.n	8008ca0 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008c94:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c98:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d008      	beq.n	8008cb2 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d03a      	beq.n	8008d1e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008cac:	6878      	ldr	r0, [r7, #4]
 8008cae:	4798      	blx	r3
    }
    return;
 8008cb0:	e035      	b.n	8008d1e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d009      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x6e2>
 8008cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d003      	beq.n	8008cd2 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 ffe8 	bl	8009ca0 <UART_EndTransmit_IT>
    return;
 8008cd0:	e026      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d009      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x702>
 8008cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008ce2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d003      	beq.n	8008cf2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f001 f817 	bl	8009d1e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008cf0:	e016      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008cf6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d010      	beq.n	8008d20 <HAL_UART_IRQHandler+0x730>
 8008cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	da0c      	bge.n	8008d20 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f000 ffff 	bl	8009d0a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008d0c:	e008      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
      return;
 8008d0e:	bf00      	nop
 8008d10:	e006      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
    return;
 8008d12:	bf00      	nop
 8008d14:	e004      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
      return;
 8008d16:	bf00      	nop
 8008d18:	e002      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
      return;
 8008d1a:	bf00      	nop
 8008d1c:	e000      	b.n	8008d20 <HAL_UART_IRQHandler+0x730>
    return;
 8008d1e:	bf00      	nop
  }
}
 8008d20:	37e8      	adds	r7, #232	; 0xe8
 8008d22:	46bd      	mov	sp, r7
 8008d24:	bd80      	pop	{r7, pc}
 8008d26:	bf00      	nop
 8008d28:	effffffe 	.word	0xeffffffe

08008d2c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d2c:	b480      	push	{r7}
 8008d2e:	b083      	sub	sp, #12
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008d34:	bf00      	nop
 8008d36:	370c      	adds	r7, #12
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3e:	4770      	bx	lr

08008d40 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d40:	b480      	push	{r7}
 8008d42:	b083      	sub	sp, #12
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b083      	sub	sp, #12
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
 8008d5c:	460b      	mov	r3, r1
 8008d5e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008d60:	bf00      	nop
 8008d62:	370c      	adds	r7, #12
 8008d64:	46bd      	mov	sp, r7
 8008d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6a:	4770      	bx	lr

08008d6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008d70:	b092      	sub	sp, #72	; 0x48
 8008d72:	af00      	add	r7, sp, #0
 8008d74:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008d76:	2300      	movs	r3, #0
 8008d78:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008d7c:	697b      	ldr	r3, [r7, #20]
 8008d7e:	689a      	ldr	r2, [r3, #8]
 8008d80:	697b      	ldr	r3, [r7, #20]
 8008d82:	691b      	ldr	r3, [r3, #16]
 8008d84:	431a      	orrs	r2, r3
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	695b      	ldr	r3, [r3, #20]
 8008d8a:	431a      	orrs	r2, r3
 8008d8c:	697b      	ldr	r3, [r7, #20]
 8008d8e:	69db      	ldr	r3, [r3, #28]
 8008d90:	4313      	orrs	r3, r2
 8008d92:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	681a      	ldr	r2, [r3, #0]
 8008d9a:	4bbe      	ldr	r3, [pc, #760]	; (8009094 <UART_SetConfig+0x328>)
 8008d9c:	4013      	ands	r3, r2
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	6812      	ldr	r2, [r2, #0]
 8008da2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008da4:	430b      	orrs	r3, r1
 8008da6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008da8:	697b      	ldr	r3, [r7, #20]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	68da      	ldr	r2, [r3, #12]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	430a      	orrs	r2, r1
 8008dbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008dbe:	697b      	ldr	r3, [r7, #20]
 8008dc0:	699b      	ldr	r3, [r3, #24]
 8008dc2:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4ab3      	ldr	r2, [pc, #716]	; (8009098 <UART_SetConfig+0x32c>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d004      	beq.n	8008dd8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	6a1b      	ldr	r3, [r3, #32]
 8008dd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	689a      	ldr	r2, [r3, #8]
 8008dde:	4baf      	ldr	r3, [pc, #700]	; (800909c <UART_SetConfig+0x330>)
 8008de0:	4013      	ands	r3, r2
 8008de2:	697a      	ldr	r2, [r7, #20]
 8008de4:	6812      	ldr	r2, [r2, #0]
 8008de6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008de8:	430b      	orrs	r3, r1
 8008dea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008dec:	697b      	ldr	r3, [r7, #20]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008df2:	f023 010f 	bic.w	r1, r3, #15
 8008df6:	697b      	ldr	r3, [r7, #20]
 8008df8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	430a      	orrs	r2, r1
 8008e00:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	4aa6      	ldr	r2, [pc, #664]	; (80090a0 <UART_SetConfig+0x334>)
 8008e08:	4293      	cmp	r3, r2
 8008e0a:	d177      	bne.n	8008efc <UART_SetConfig+0x190>
 8008e0c:	4ba5      	ldr	r3, [pc, #660]	; (80090a4 <UART_SetConfig+0x338>)
 8008e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e10:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e14:	2b28      	cmp	r3, #40	; 0x28
 8008e16:	d86d      	bhi.n	8008ef4 <UART_SetConfig+0x188>
 8008e18:	a201      	add	r2, pc, #4	; (adr r2, 8008e20 <UART_SetConfig+0xb4>)
 8008e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e1e:	bf00      	nop
 8008e20:	08008ec5 	.word	0x08008ec5
 8008e24:	08008ef5 	.word	0x08008ef5
 8008e28:	08008ef5 	.word	0x08008ef5
 8008e2c:	08008ef5 	.word	0x08008ef5
 8008e30:	08008ef5 	.word	0x08008ef5
 8008e34:	08008ef5 	.word	0x08008ef5
 8008e38:	08008ef5 	.word	0x08008ef5
 8008e3c:	08008ef5 	.word	0x08008ef5
 8008e40:	08008ecd 	.word	0x08008ecd
 8008e44:	08008ef5 	.word	0x08008ef5
 8008e48:	08008ef5 	.word	0x08008ef5
 8008e4c:	08008ef5 	.word	0x08008ef5
 8008e50:	08008ef5 	.word	0x08008ef5
 8008e54:	08008ef5 	.word	0x08008ef5
 8008e58:	08008ef5 	.word	0x08008ef5
 8008e5c:	08008ef5 	.word	0x08008ef5
 8008e60:	08008ed5 	.word	0x08008ed5
 8008e64:	08008ef5 	.word	0x08008ef5
 8008e68:	08008ef5 	.word	0x08008ef5
 8008e6c:	08008ef5 	.word	0x08008ef5
 8008e70:	08008ef5 	.word	0x08008ef5
 8008e74:	08008ef5 	.word	0x08008ef5
 8008e78:	08008ef5 	.word	0x08008ef5
 8008e7c:	08008ef5 	.word	0x08008ef5
 8008e80:	08008edd 	.word	0x08008edd
 8008e84:	08008ef5 	.word	0x08008ef5
 8008e88:	08008ef5 	.word	0x08008ef5
 8008e8c:	08008ef5 	.word	0x08008ef5
 8008e90:	08008ef5 	.word	0x08008ef5
 8008e94:	08008ef5 	.word	0x08008ef5
 8008e98:	08008ef5 	.word	0x08008ef5
 8008e9c:	08008ef5 	.word	0x08008ef5
 8008ea0:	08008ee5 	.word	0x08008ee5
 8008ea4:	08008ef5 	.word	0x08008ef5
 8008ea8:	08008ef5 	.word	0x08008ef5
 8008eac:	08008ef5 	.word	0x08008ef5
 8008eb0:	08008ef5 	.word	0x08008ef5
 8008eb4:	08008ef5 	.word	0x08008ef5
 8008eb8:	08008ef5 	.word	0x08008ef5
 8008ebc:	08008ef5 	.word	0x08008ef5
 8008ec0:	08008eed 	.word	0x08008eed
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eca:	e222      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008ecc:	2304      	movs	r3, #4
 8008ece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ed2:	e21e      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008ed4:	2308      	movs	r3, #8
 8008ed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eda:	e21a      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008edc:	2310      	movs	r3, #16
 8008ede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ee2:	e216      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008ee4:	2320      	movs	r3, #32
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eea:	e212      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008eec:	2340      	movs	r3, #64	; 0x40
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e20e      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008ef4:	2380      	movs	r3, #128	; 0x80
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e20a      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a69      	ldr	r2, [pc, #420]	; (80090a8 <UART_SetConfig+0x33c>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d130      	bne.n	8008f68 <UART_SetConfig+0x1fc>
 8008f06:	4b67      	ldr	r3, [pc, #412]	; (80090a4 <UART_SetConfig+0x338>)
 8008f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f0a:	f003 0307 	and.w	r3, r3, #7
 8008f0e:	2b05      	cmp	r3, #5
 8008f10:	d826      	bhi.n	8008f60 <UART_SetConfig+0x1f4>
 8008f12:	a201      	add	r2, pc, #4	; (adr r2, 8008f18 <UART_SetConfig+0x1ac>)
 8008f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f18:	08008f31 	.word	0x08008f31
 8008f1c:	08008f39 	.word	0x08008f39
 8008f20:	08008f41 	.word	0x08008f41
 8008f24:	08008f49 	.word	0x08008f49
 8008f28:	08008f51 	.word	0x08008f51
 8008f2c:	08008f59 	.word	0x08008f59
 8008f30:	2300      	movs	r3, #0
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e1ec      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f38:	2304      	movs	r3, #4
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e1e8      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f40:	2308      	movs	r3, #8
 8008f42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f46:	e1e4      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f48:	2310      	movs	r3, #16
 8008f4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f4e:	e1e0      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f50:	2320      	movs	r3, #32
 8008f52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f56:	e1dc      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f58:	2340      	movs	r3, #64	; 0x40
 8008f5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f5e:	e1d8      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f60:	2380      	movs	r3, #128	; 0x80
 8008f62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f66:	e1d4      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008f68:	697b      	ldr	r3, [r7, #20]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a4f      	ldr	r2, [pc, #316]	; (80090ac <UART_SetConfig+0x340>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d130      	bne.n	8008fd4 <UART_SetConfig+0x268>
 8008f72:	4b4c      	ldr	r3, [pc, #304]	; (80090a4 <UART_SetConfig+0x338>)
 8008f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f76:	f003 0307 	and.w	r3, r3, #7
 8008f7a:	2b05      	cmp	r3, #5
 8008f7c:	d826      	bhi.n	8008fcc <UART_SetConfig+0x260>
 8008f7e:	a201      	add	r2, pc, #4	; (adr r2, 8008f84 <UART_SetConfig+0x218>)
 8008f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f84:	08008f9d 	.word	0x08008f9d
 8008f88:	08008fa5 	.word	0x08008fa5
 8008f8c:	08008fad 	.word	0x08008fad
 8008f90:	08008fb5 	.word	0x08008fb5
 8008f94:	08008fbd 	.word	0x08008fbd
 8008f98:	08008fc5 	.word	0x08008fc5
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fa2:	e1b6      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fa4:	2304      	movs	r3, #4
 8008fa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008faa:	e1b2      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fac:	2308      	movs	r3, #8
 8008fae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fb2:	e1ae      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fb4:	2310      	movs	r3, #16
 8008fb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fba:	e1aa      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fbc:	2320      	movs	r3, #32
 8008fbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fc2:	e1a6      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fc4:	2340      	movs	r3, #64	; 0x40
 8008fc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fca:	e1a2      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fcc:	2380      	movs	r3, #128	; 0x80
 8008fce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008fd2:	e19e      	b.n	8009312 <UART_SetConfig+0x5a6>
 8008fd4:	697b      	ldr	r3, [r7, #20]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	4a35      	ldr	r2, [pc, #212]	; (80090b0 <UART_SetConfig+0x344>)
 8008fda:	4293      	cmp	r3, r2
 8008fdc:	d130      	bne.n	8009040 <UART_SetConfig+0x2d4>
 8008fde:	4b31      	ldr	r3, [pc, #196]	; (80090a4 <UART_SetConfig+0x338>)
 8008fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008fe2:	f003 0307 	and.w	r3, r3, #7
 8008fe6:	2b05      	cmp	r3, #5
 8008fe8:	d826      	bhi.n	8009038 <UART_SetConfig+0x2cc>
 8008fea:	a201      	add	r2, pc, #4	; (adr r2, 8008ff0 <UART_SetConfig+0x284>)
 8008fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ff0:	08009009 	.word	0x08009009
 8008ff4:	08009011 	.word	0x08009011
 8008ff8:	08009019 	.word	0x08009019
 8008ffc:	08009021 	.word	0x08009021
 8009000:	08009029 	.word	0x08009029
 8009004:	08009031 	.word	0x08009031
 8009008:	2300      	movs	r3, #0
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e180      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009010:	2304      	movs	r3, #4
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e17c      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009018:	2308      	movs	r3, #8
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e178      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009020:	2310      	movs	r3, #16
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e174      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009028:	2320      	movs	r3, #32
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e170      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009030:	2340      	movs	r3, #64	; 0x40
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009036:	e16c      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009038:	2380      	movs	r3, #128	; 0x80
 800903a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800903e:	e168      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009040:	697b      	ldr	r3, [r7, #20]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1b      	ldr	r2, [pc, #108]	; (80090b4 <UART_SetConfig+0x348>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d142      	bne.n	80090d0 <UART_SetConfig+0x364>
 800904a:	4b16      	ldr	r3, [pc, #88]	; (80090a4 <UART_SetConfig+0x338>)
 800904c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800904e:	f003 0307 	and.w	r3, r3, #7
 8009052:	2b05      	cmp	r3, #5
 8009054:	d838      	bhi.n	80090c8 <UART_SetConfig+0x35c>
 8009056:	a201      	add	r2, pc, #4	; (adr r2, 800905c <UART_SetConfig+0x2f0>)
 8009058:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800905c:	08009075 	.word	0x08009075
 8009060:	0800907d 	.word	0x0800907d
 8009064:	08009085 	.word	0x08009085
 8009068:	0800908d 	.word	0x0800908d
 800906c:	080090b9 	.word	0x080090b9
 8009070:	080090c1 	.word	0x080090c1
 8009074:	2300      	movs	r3, #0
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e14a      	b.n	8009312 <UART_SetConfig+0x5a6>
 800907c:	2304      	movs	r3, #4
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e146      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009084:	2308      	movs	r3, #8
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e142      	b.n	8009312 <UART_SetConfig+0x5a6>
 800908c:	2310      	movs	r3, #16
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009092:	e13e      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009094:	cfff69f3 	.word	0xcfff69f3
 8009098:	58000c00 	.word	0x58000c00
 800909c:	11fff4ff 	.word	0x11fff4ff
 80090a0:	40011000 	.word	0x40011000
 80090a4:	58024400 	.word	0x58024400
 80090a8:	40004400 	.word	0x40004400
 80090ac:	40004800 	.word	0x40004800
 80090b0:	40004c00 	.word	0x40004c00
 80090b4:	40005000 	.word	0x40005000
 80090b8:	2320      	movs	r3, #32
 80090ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090be:	e128      	b.n	8009312 <UART_SetConfig+0x5a6>
 80090c0:	2340      	movs	r3, #64	; 0x40
 80090c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090c6:	e124      	b.n	8009312 <UART_SetConfig+0x5a6>
 80090c8:	2380      	movs	r3, #128	; 0x80
 80090ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ce:	e120      	b.n	8009312 <UART_SetConfig+0x5a6>
 80090d0:	697b      	ldr	r3, [r7, #20]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	4acb      	ldr	r2, [pc, #812]	; (8009404 <UART_SetConfig+0x698>)
 80090d6:	4293      	cmp	r3, r2
 80090d8:	d176      	bne.n	80091c8 <UART_SetConfig+0x45c>
 80090da:	4bcb      	ldr	r3, [pc, #812]	; (8009408 <UART_SetConfig+0x69c>)
 80090dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80090e2:	2b28      	cmp	r3, #40	; 0x28
 80090e4:	d86c      	bhi.n	80091c0 <UART_SetConfig+0x454>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <UART_SetConfig+0x380>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009191 	.word	0x08009191
 80090f0:	080091c1 	.word	0x080091c1
 80090f4:	080091c1 	.word	0x080091c1
 80090f8:	080091c1 	.word	0x080091c1
 80090fc:	080091c1 	.word	0x080091c1
 8009100:	080091c1 	.word	0x080091c1
 8009104:	080091c1 	.word	0x080091c1
 8009108:	080091c1 	.word	0x080091c1
 800910c:	08009199 	.word	0x08009199
 8009110:	080091c1 	.word	0x080091c1
 8009114:	080091c1 	.word	0x080091c1
 8009118:	080091c1 	.word	0x080091c1
 800911c:	080091c1 	.word	0x080091c1
 8009120:	080091c1 	.word	0x080091c1
 8009124:	080091c1 	.word	0x080091c1
 8009128:	080091c1 	.word	0x080091c1
 800912c:	080091a1 	.word	0x080091a1
 8009130:	080091c1 	.word	0x080091c1
 8009134:	080091c1 	.word	0x080091c1
 8009138:	080091c1 	.word	0x080091c1
 800913c:	080091c1 	.word	0x080091c1
 8009140:	080091c1 	.word	0x080091c1
 8009144:	080091c1 	.word	0x080091c1
 8009148:	080091c1 	.word	0x080091c1
 800914c:	080091a9 	.word	0x080091a9
 8009150:	080091c1 	.word	0x080091c1
 8009154:	080091c1 	.word	0x080091c1
 8009158:	080091c1 	.word	0x080091c1
 800915c:	080091c1 	.word	0x080091c1
 8009160:	080091c1 	.word	0x080091c1
 8009164:	080091c1 	.word	0x080091c1
 8009168:	080091c1 	.word	0x080091c1
 800916c:	080091b1 	.word	0x080091b1
 8009170:	080091c1 	.word	0x080091c1
 8009174:	080091c1 	.word	0x080091c1
 8009178:	080091c1 	.word	0x080091c1
 800917c:	080091c1 	.word	0x080091c1
 8009180:	080091c1 	.word	0x080091c1
 8009184:	080091c1 	.word	0x080091c1
 8009188:	080091c1 	.word	0x080091c1
 800918c:	080091b9 	.word	0x080091b9
 8009190:	2301      	movs	r3, #1
 8009192:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009196:	e0bc      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009198:	2304      	movs	r3, #4
 800919a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800919e:	e0b8      	b.n	8009312 <UART_SetConfig+0x5a6>
 80091a0:	2308      	movs	r3, #8
 80091a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091a6:	e0b4      	b.n	8009312 <UART_SetConfig+0x5a6>
 80091a8:	2310      	movs	r3, #16
 80091aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091ae:	e0b0      	b.n	8009312 <UART_SetConfig+0x5a6>
 80091b0:	2320      	movs	r3, #32
 80091b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091b6:	e0ac      	b.n	8009312 <UART_SetConfig+0x5a6>
 80091b8:	2340      	movs	r3, #64	; 0x40
 80091ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091be:	e0a8      	b.n	8009312 <UART_SetConfig+0x5a6>
 80091c0:	2380      	movs	r3, #128	; 0x80
 80091c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80091c6:	e0a4      	b.n	8009312 <UART_SetConfig+0x5a6>
 80091c8:	697b      	ldr	r3, [r7, #20]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	4a8f      	ldr	r2, [pc, #572]	; (800940c <UART_SetConfig+0x6a0>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d130      	bne.n	8009234 <UART_SetConfig+0x4c8>
 80091d2:	4b8d      	ldr	r3, [pc, #564]	; (8009408 <UART_SetConfig+0x69c>)
 80091d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d6:	f003 0307 	and.w	r3, r3, #7
 80091da:	2b05      	cmp	r3, #5
 80091dc:	d826      	bhi.n	800922c <UART_SetConfig+0x4c0>
 80091de:	a201      	add	r2, pc, #4	; (adr r2, 80091e4 <UART_SetConfig+0x478>)
 80091e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091e4:	080091fd 	.word	0x080091fd
 80091e8:	08009205 	.word	0x08009205
 80091ec:	0800920d 	.word	0x0800920d
 80091f0:	08009215 	.word	0x08009215
 80091f4:	0800921d 	.word	0x0800921d
 80091f8:	08009225 	.word	0x08009225
 80091fc:	2300      	movs	r3, #0
 80091fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009202:	e086      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009204:	2304      	movs	r3, #4
 8009206:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800920a:	e082      	b.n	8009312 <UART_SetConfig+0x5a6>
 800920c:	2308      	movs	r3, #8
 800920e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009212:	e07e      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009214:	2310      	movs	r3, #16
 8009216:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800921a:	e07a      	b.n	8009312 <UART_SetConfig+0x5a6>
 800921c:	2320      	movs	r3, #32
 800921e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009222:	e076      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009224:	2340      	movs	r3, #64	; 0x40
 8009226:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800922a:	e072      	b.n	8009312 <UART_SetConfig+0x5a6>
 800922c:	2380      	movs	r3, #128	; 0x80
 800922e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009232:	e06e      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009234:	697b      	ldr	r3, [r7, #20]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	4a75      	ldr	r2, [pc, #468]	; (8009410 <UART_SetConfig+0x6a4>)
 800923a:	4293      	cmp	r3, r2
 800923c:	d130      	bne.n	80092a0 <UART_SetConfig+0x534>
 800923e:	4b72      	ldr	r3, [pc, #456]	; (8009408 <UART_SetConfig+0x69c>)
 8009240:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009242:	f003 0307 	and.w	r3, r3, #7
 8009246:	2b05      	cmp	r3, #5
 8009248:	d826      	bhi.n	8009298 <UART_SetConfig+0x52c>
 800924a:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <UART_SetConfig+0x4e4>)
 800924c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009250:	08009269 	.word	0x08009269
 8009254:	08009271 	.word	0x08009271
 8009258:	08009279 	.word	0x08009279
 800925c:	08009281 	.word	0x08009281
 8009260:	08009289 	.word	0x08009289
 8009264:	08009291 	.word	0x08009291
 8009268:	2300      	movs	r3, #0
 800926a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800926e:	e050      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009270:	2304      	movs	r3, #4
 8009272:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009276:	e04c      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009278:	2308      	movs	r3, #8
 800927a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800927e:	e048      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009280:	2310      	movs	r3, #16
 8009282:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009286:	e044      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009288:	2320      	movs	r3, #32
 800928a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800928e:	e040      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009290:	2340      	movs	r3, #64	; 0x40
 8009292:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009296:	e03c      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009298:	2380      	movs	r3, #128	; 0x80
 800929a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800929e:	e038      	b.n	8009312 <UART_SetConfig+0x5a6>
 80092a0:	697b      	ldr	r3, [r7, #20]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a5b      	ldr	r2, [pc, #364]	; (8009414 <UART_SetConfig+0x6a8>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d130      	bne.n	800930c <UART_SetConfig+0x5a0>
 80092aa:	4b57      	ldr	r3, [pc, #348]	; (8009408 <UART_SetConfig+0x69c>)
 80092ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ae:	f003 0307 	and.w	r3, r3, #7
 80092b2:	2b05      	cmp	r3, #5
 80092b4:	d826      	bhi.n	8009304 <UART_SetConfig+0x598>
 80092b6:	a201      	add	r2, pc, #4	; (adr r2, 80092bc <UART_SetConfig+0x550>)
 80092b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092bc:	080092d5 	.word	0x080092d5
 80092c0:	080092dd 	.word	0x080092dd
 80092c4:	080092e5 	.word	0x080092e5
 80092c8:	080092ed 	.word	0x080092ed
 80092cc:	080092f5 	.word	0x080092f5
 80092d0:	080092fd 	.word	0x080092fd
 80092d4:	2302      	movs	r3, #2
 80092d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092da:	e01a      	b.n	8009312 <UART_SetConfig+0x5a6>
 80092dc:	2304      	movs	r3, #4
 80092de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092e2:	e016      	b.n	8009312 <UART_SetConfig+0x5a6>
 80092e4:	2308      	movs	r3, #8
 80092e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092ea:	e012      	b.n	8009312 <UART_SetConfig+0x5a6>
 80092ec:	2310      	movs	r3, #16
 80092ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092f2:	e00e      	b.n	8009312 <UART_SetConfig+0x5a6>
 80092f4:	2320      	movs	r3, #32
 80092f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80092fa:	e00a      	b.n	8009312 <UART_SetConfig+0x5a6>
 80092fc:	2340      	movs	r3, #64	; 0x40
 80092fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009302:	e006      	b.n	8009312 <UART_SetConfig+0x5a6>
 8009304:	2380      	movs	r3, #128	; 0x80
 8009306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800930a:	e002      	b.n	8009312 <UART_SetConfig+0x5a6>
 800930c:	2380      	movs	r3, #128	; 0x80
 800930e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009312:	697b      	ldr	r3, [r7, #20]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	4a3f      	ldr	r2, [pc, #252]	; (8009414 <UART_SetConfig+0x6a8>)
 8009318:	4293      	cmp	r3, r2
 800931a:	f040 80f8 	bne.w	800950e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800931e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009322:	2b20      	cmp	r3, #32
 8009324:	dc46      	bgt.n	80093b4 <UART_SetConfig+0x648>
 8009326:	2b02      	cmp	r3, #2
 8009328:	f2c0 8082 	blt.w	8009430 <UART_SetConfig+0x6c4>
 800932c:	3b02      	subs	r3, #2
 800932e:	2b1e      	cmp	r3, #30
 8009330:	d87e      	bhi.n	8009430 <UART_SetConfig+0x6c4>
 8009332:	a201      	add	r2, pc, #4	; (adr r2, 8009338 <UART_SetConfig+0x5cc>)
 8009334:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009338:	080093bb 	.word	0x080093bb
 800933c:	08009431 	.word	0x08009431
 8009340:	080093c3 	.word	0x080093c3
 8009344:	08009431 	.word	0x08009431
 8009348:	08009431 	.word	0x08009431
 800934c:	08009431 	.word	0x08009431
 8009350:	080093d3 	.word	0x080093d3
 8009354:	08009431 	.word	0x08009431
 8009358:	08009431 	.word	0x08009431
 800935c:	08009431 	.word	0x08009431
 8009360:	08009431 	.word	0x08009431
 8009364:	08009431 	.word	0x08009431
 8009368:	08009431 	.word	0x08009431
 800936c:	08009431 	.word	0x08009431
 8009370:	080093e3 	.word	0x080093e3
 8009374:	08009431 	.word	0x08009431
 8009378:	08009431 	.word	0x08009431
 800937c:	08009431 	.word	0x08009431
 8009380:	08009431 	.word	0x08009431
 8009384:	08009431 	.word	0x08009431
 8009388:	08009431 	.word	0x08009431
 800938c:	08009431 	.word	0x08009431
 8009390:	08009431 	.word	0x08009431
 8009394:	08009431 	.word	0x08009431
 8009398:	08009431 	.word	0x08009431
 800939c:	08009431 	.word	0x08009431
 80093a0:	08009431 	.word	0x08009431
 80093a4:	08009431 	.word	0x08009431
 80093a8:	08009431 	.word	0x08009431
 80093ac:	08009431 	.word	0x08009431
 80093b0:	08009423 	.word	0x08009423
 80093b4:	2b40      	cmp	r3, #64	; 0x40
 80093b6:	d037      	beq.n	8009428 <UART_SetConfig+0x6bc>
 80093b8:	e03a      	b.n	8009430 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80093ba:	f7fe f8c5 	bl	8007548 <HAL_RCCEx_GetD3PCLK1Freq>
 80093be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80093c0:	e03c      	b.n	800943c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093c6:	4618      	mov	r0, r3
 80093c8:	f7fe f8d4 	bl	8007574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80093cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093d0:	e034      	b.n	800943c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80093d2:	f107 0318 	add.w	r3, r7, #24
 80093d6:	4618      	mov	r0, r3
 80093d8:	f7fe fa20 	bl	800781c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80093dc:	69fb      	ldr	r3, [r7, #28]
 80093de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80093e0:	e02c      	b.n	800943c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <UART_SetConfig+0x69c>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d016      	beq.n	800941c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80093ee:	4b06      	ldr	r3, [pc, #24]	; (8009408 <UART_SetConfig+0x69c>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	08db      	lsrs	r3, r3, #3
 80093f4:	f003 0303 	and.w	r3, r3, #3
 80093f8:	4a07      	ldr	r2, [pc, #28]	; (8009418 <UART_SetConfig+0x6ac>)
 80093fa:	fa22 f303 	lsr.w	r3, r2, r3
 80093fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009400:	e01c      	b.n	800943c <UART_SetConfig+0x6d0>
 8009402:	bf00      	nop
 8009404:	40011400 	.word	0x40011400
 8009408:	58024400 	.word	0x58024400
 800940c:	40007800 	.word	0x40007800
 8009410:	40007c00 	.word	0x40007c00
 8009414:	58000c00 	.word	0x58000c00
 8009418:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800941c:	4b9d      	ldr	r3, [pc, #628]	; (8009694 <UART_SetConfig+0x928>)
 800941e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009420:	e00c      	b.n	800943c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009422:	4b9d      	ldr	r3, [pc, #628]	; (8009698 <UART_SetConfig+0x92c>)
 8009424:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009426:	e009      	b.n	800943c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009428:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800942c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800942e:	e005      	b.n	800943c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8009430:	2300      	movs	r3, #0
 8009432:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800943a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800943c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800943e:	2b00      	cmp	r3, #0
 8009440:	f000 81de 	beq.w	8009800 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009448:	4a94      	ldr	r2, [pc, #592]	; (800969c <UART_SetConfig+0x930>)
 800944a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800944e:	461a      	mov	r2, r3
 8009450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009452:	fbb3 f3f2 	udiv	r3, r3, r2
 8009456:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8009458:	697b      	ldr	r3, [r7, #20]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	4613      	mov	r3, r2
 800945e:	005b      	lsls	r3, r3, #1
 8009460:	4413      	add	r3, r2
 8009462:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009464:	429a      	cmp	r2, r3
 8009466:	d305      	bcc.n	8009474 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8009468:	697b      	ldr	r3, [r7, #20]
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800946e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009470:	429a      	cmp	r2, r3
 8009472:	d903      	bls.n	800947c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8009474:	2301      	movs	r3, #1
 8009476:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800947a:	e1c1      	b.n	8009800 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800947c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947e:	2200      	movs	r2, #0
 8009480:	60bb      	str	r3, [r7, #8]
 8009482:	60fa      	str	r2, [r7, #12]
 8009484:	697b      	ldr	r3, [r7, #20]
 8009486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009488:	4a84      	ldr	r2, [pc, #528]	; (800969c <UART_SetConfig+0x930>)
 800948a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800948e:	b29b      	uxth	r3, r3
 8009490:	2200      	movs	r2, #0
 8009492:	603b      	str	r3, [r7, #0]
 8009494:	607a      	str	r2, [r7, #4]
 8009496:	e9d7 2300 	ldrd	r2, r3, [r7]
 800949a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800949e:	f7f6 ff1b 	bl	80002d8 <__aeabi_uldivmod>
 80094a2:	4602      	mov	r2, r0
 80094a4:	460b      	mov	r3, r1
 80094a6:	4610      	mov	r0, r2
 80094a8:	4619      	mov	r1, r3
 80094aa:	f04f 0200 	mov.w	r2, #0
 80094ae:	f04f 0300 	mov.w	r3, #0
 80094b2:	020b      	lsls	r3, r1, #8
 80094b4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80094b8:	0202      	lsls	r2, r0, #8
 80094ba:	6979      	ldr	r1, [r7, #20]
 80094bc:	6849      	ldr	r1, [r1, #4]
 80094be:	0849      	lsrs	r1, r1, #1
 80094c0:	2000      	movs	r0, #0
 80094c2:	460c      	mov	r4, r1
 80094c4:	4605      	mov	r5, r0
 80094c6:	eb12 0804 	adds.w	r8, r2, r4
 80094ca:	eb43 0905 	adc.w	r9, r3, r5
 80094ce:	697b      	ldr	r3, [r7, #20]
 80094d0:	685b      	ldr	r3, [r3, #4]
 80094d2:	2200      	movs	r2, #0
 80094d4:	469a      	mov	sl, r3
 80094d6:	4693      	mov	fp, r2
 80094d8:	4652      	mov	r2, sl
 80094da:	465b      	mov	r3, fp
 80094dc:	4640      	mov	r0, r8
 80094de:	4649      	mov	r1, r9
 80094e0:	f7f6 fefa 	bl	80002d8 <__aeabi_uldivmod>
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	4613      	mov	r3, r2
 80094ea:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80094ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80094f2:	d308      	bcc.n	8009506 <UART_SetConfig+0x79a>
 80094f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80094fa:	d204      	bcs.n	8009506 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80094fc:	697b      	ldr	r3, [r7, #20]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009502:	60da      	str	r2, [r3, #12]
 8009504:	e17c      	b.n	8009800 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009506:	2301      	movs	r3, #1
 8009508:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800950c:	e178      	b.n	8009800 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	69db      	ldr	r3, [r3, #28]
 8009512:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009516:	f040 80c5 	bne.w	80096a4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800951a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800951e:	2b20      	cmp	r3, #32
 8009520:	dc48      	bgt.n	80095b4 <UART_SetConfig+0x848>
 8009522:	2b00      	cmp	r3, #0
 8009524:	db7b      	blt.n	800961e <UART_SetConfig+0x8b2>
 8009526:	2b20      	cmp	r3, #32
 8009528:	d879      	bhi.n	800961e <UART_SetConfig+0x8b2>
 800952a:	a201      	add	r2, pc, #4	; (adr r2, 8009530 <UART_SetConfig+0x7c4>)
 800952c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009530:	080095bb 	.word	0x080095bb
 8009534:	080095c3 	.word	0x080095c3
 8009538:	0800961f 	.word	0x0800961f
 800953c:	0800961f 	.word	0x0800961f
 8009540:	080095cb 	.word	0x080095cb
 8009544:	0800961f 	.word	0x0800961f
 8009548:	0800961f 	.word	0x0800961f
 800954c:	0800961f 	.word	0x0800961f
 8009550:	080095db 	.word	0x080095db
 8009554:	0800961f 	.word	0x0800961f
 8009558:	0800961f 	.word	0x0800961f
 800955c:	0800961f 	.word	0x0800961f
 8009560:	0800961f 	.word	0x0800961f
 8009564:	0800961f 	.word	0x0800961f
 8009568:	0800961f 	.word	0x0800961f
 800956c:	0800961f 	.word	0x0800961f
 8009570:	080095eb 	.word	0x080095eb
 8009574:	0800961f 	.word	0x0800961f
 8009578:	0800961f 	.word	0x0800961f
 800957c:	0800961f 	.word	0x0800961f
 8009580:	0800961f 	.word	0x0800961f
 8009584:	0800961f 	.word	0x0800961f
 8009588:	0800961f 	.word	0x0800961f
 800958c:	0800961f 	.word	0x0800961f
 8009590:	0800961f 	.word	0x0800961f
 8009594:	0800961f 	.word	0x0800961f
 8009598:	0800961f 	.word	0x0800961f
 800959c:	0800961f 	.word	0x0800961f
 80095a0:	0800961f 	.word	0x0800961f
 80095a4:	0800961f 	.word	0x0800961f
 80095a8:	0800961f 	.word	0x0800961f
 80095ac:	0800961f 	.word	0x0800961f
 80095b0:	08009611 	.word	0x08009611
 80095b4:	2b40      	cmp	r3, #64	; 0x40
 80095b6:	d02e      	beq.n	8009616 <UART_SetConfig+0x8aa>
 80095b8:	e031      	b.n	800961e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095ba:	f7fd f853 	bl	8006664 <HAL_RCC_GetPCLK1Freq>
 80095be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c0:	e033      	b.n	800962a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095c2:	f7fd f865 	bl	8006690 <HAL_RCC_GetPCLK2Freq>
 80095c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c8:	e02f      	b.n	800962a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ce:	4618      	mov	r0, r3
 80095d0:	f7fd ffd0 	bl	8007574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d8:	e027      	b.n	800962a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095da:	f107 0318 	add.w	r3, r7, #24
 80095de:	4618      	mov	r0, r3
 80095e0:	f7fe f91c 	bl	800781c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e8:	e01f      	b.n	800962a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095ea:	4b2d      	ldr	r3, [pc, #180]	; (80096a0 <UART_SetConfig+0x934>)
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0320 	and.w	r3, r3, #32
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d009      	beq.n	800960a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f6:	4b2a      	ldr	r3, [pc, #168]	; (80096a0 <UART_SetConfig+0x934>)
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	08db      	lsrs	r3, r3, #3
 80095fc:	f003 0303 	and.w	r3, r3, #3
 8009600:	4a24      	ldr	r2, [pc, #144]	; (8009694 <UART_SetConfig+0x928>)
 8009602:	fa22 f303 	lsr.w	r3, r2, r3
 8009606:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009608:	e00f      	b.n	800962a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800960a:	4b22      	ldr	r3, [pc, #136]	; (8009694 <UART_SetConfig+0x928>)
 800960c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960e:	e00c      	b.n	800962a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009610:	4b21      	ldr	r3, [pc, #132]	; (8009698 <UART_SetConfig+0x92c>)
 8009612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009614:	e009      	b.n	800962a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800961a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800961c:	e005      	b.n	800962a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800961e:	2300      	movs	r3, #0
 8009620:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009622:	2301      	movs	r3, #1
 8009624:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009628:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800962a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800962c:	2b00      	cmp	r3, #0
 800962e:	f000 80e7 	beq.w	8009800 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8009632:	697b      	ldr	r3, [r7, #20]
 8009634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009636:	4a19      	ldr	r2, [pc, #100]	; (800969c <UART_SetConfig+0x930>)
 8009638:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800963c:	461a      	mov	r2, r3
 800963e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009640:	fbb3 f3f2 	udiv	r3, r3, r2
 8009644:	005a      	lsls	r2, r3, #1
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	085b      	lsrs	r3, r3, #1
 800964c:	441a      	add	r2, r3
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	685b      	ldr	r3, [r3, #4]
 8009652:	fbb2 f3f3 	udiv	r3, r2, r3
 8009656:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009658:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800965a:	2b0f      	cmp	r3, #15
 800965c:	d916      	bls.n	800968c <UART_SetConfig+0x920>
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009664:	d212      	bcs.n	800968c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009668:	b29b      	uxth	r3, r3
 800966a:	f023 030f 	bic.w	r3, r3, #15
 800966e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009670:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009672:	085b      	lsrs	r3, r3, #1
 8009674:	b29b      	uxth	r3, r3
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	b29a      	uxth	r2, r3
 800967c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800967e:	4313      	orrs	r3, r2
 8009680:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8009688:	60da      	str	r2, [r3, #12]
 800968a:	e0b9      	b.n	8009800 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009692:	e0b5      	b.n	8009800 <UART_SetConfig+0xa94>
 8009694:	03d09000 	.word	0x03d09000
 8009698:	003d0900 	.word	0x003d0900
 800969c:	0800a64c 	.word	0x0800a64c
 80096a0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80096a4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80096a8:	2b20      	cmp	r3, #32
 80096aa:	dc49      	bgt.n	8009740 <UART_SetConfig+0x9d4>
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	db7c      	blt.n	80097aa <UART_SetConfig+0xa3e>
 80096b0:	2b20      	cmp	r3, #32
 80096b2:	d87a      	bhi.n	80097aa <UART_SetConfig+0xa3e>
 80096b4:	a201      	add	r2, pc, #4	; (adr r2, 80096bc <UART_SetConfig+0x950>)
 80096b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ba:	bf00      	nop
 80096bc:	08009747 	.word	0x08009747
 80096c0:	0800974f 	.word	0x0800974f
 80096c4:	080097ab 	.word	0x080097ab
 80096c8:	080097ab 	.word	0x080097ab
 80096cc:	08009757 	.word	0x08009757
 80096d0:	080097ab 	.word	0x080097ab
 80096d4:	080097ab 	.word	0x080097ab
 80096d8:	080097ab 	.word	0x080097ab
 80096dc:	08009767 	.word	0x08009767
 80096e0:	080097ab 	.word	0x080097ab
 80096e4:	080097ab 	.word	0x080097ab
 80096e8:	080097ab 	.word	0x080097ab
 80096ec:	080097ab 	.word	0x080097ab
 80096f0:	080097ab 	.word	0x080097ab
 80096f4:	080097ab 	.word	0x080097ab
 80096f8:	080097ab 	.word	0x080097ab
 80096fc:	08009777 	.word	0x08009777
 8009700:	080097ab 	.word	0x080097ab
 8009704:	080097ab 	.word	0x080097ab
 8009708:	080097ab 	.word	0x080097ab
 800970c:	080097ab 	.word	0x080097ab
 8009710:	080097ab 	.word	0x080097ab
 8009714:	080097ab 	.word	0x080097ab
 8009718:	080097ab 	.word	0x080097ab
 800971c:	080097ab 	.word	0x080097ab
 8009720:	080097ab 	.word	0x080097ab
 8009724:	080097ab 	.word	0x080097ab
 8009728:	080097ab 	.word	0x080097ab
 800972c:	080097ab 	.word	0x080097ab
 8009730:	080097ab 	.word	0x080097ab
 8009734:	080097ab 	.word	0x080097ab
 8009738:	080097ab 	.word	0x080097ab
 800973c:	0800979d 	.word	0x0800979d
 8009740:	2b40      	cmp	r3, #64	; 0x40
 8009742:	d02e      	beq.n	80097a2 <UART_SetConfig+0xa36>
 8009744:	e031      	b.n	80097aa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009746:	f7fc ff8d 	bl	8006664 <HAL_RCC_GetPCLK1Freq>
 800974a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800974c:	e033      	b.n	80097b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800974e:	f7fc ff9f 	bl	8006690 <HAL_RCC_GetPCLK2Freq>
 8009752:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009754:	e02f      	b.n	80097b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009756:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800975a:	4618      	mov	r0, r3
 800975c:	f7fd ff0a 	bl	8007574 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009762:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009764:	e027      	b.n	80097b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009766:	f107 0318 	add.w	r3, r7, #24
 800976a:	4618      	mov	r0, r3
 800976c:	f7fe f856 	bl	800781c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009774:	e01f      	b.n	80097b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009776:	4b2d      	ldr	r3, [pc, #180]	; (800982c <UART_SetConfig+0xac0>)
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f003 0320 	and.w	r3, r3, #32
 800977e:	2b00      	cmp	r3, #0
 8009780:	d009      	beq.n	8009796 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009782:	4b2a      	ldr	r3, [pc, #168]	; (800982c <UART_SetConfig+0xac0>)
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	08db      	lsrs	r3, r3, #3
 8009788:	f003 0303 	and.w	r3, r3, #3
 800978c:	4a28      	ldr	r2, [pc, #160]	; (8009830 <UART_SetConfig+0xac4>)
 800978e:	fa22 f303 	lsr.w	r3, r2, r3
 8009792:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009794:	e00f      	b.n	80097b6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009796:	4b26      	ldr	r3, [pc, #152]	; (8009830 <UART_SetConfig+0xac4>)
 8009798:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800979a:	e00c      	b.n	80097b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800979c:	4b25      	ldr	r3, [pc, #148]	; (8009834 <UART_SetConfig+0xac8>)
 800979e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a0:	e009      	b.n	80097b6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80097a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80097a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80097a8:	e005      	b.n	80097b6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80097ae:	2301      	movs	r3, #1
 80097b0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80097b4:	bf00      	nop
    }

    if (pclk != 0U)
 80097b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d021      	beq.n	8009800 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097c0:	4a1d      	ldr	r2, [pc, #116]	; (8009838 <UART_SetConfig+0xacc>)
 80097c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80097c6:	461a      	mov	r2, r3
 80097c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80097ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80097ce:	697b      	ldr	r3, [r7, #20]
 80097d0:	685b      	ldr	r3, [r3, #4]
 80097d2:	085b      	lsrs	r3, r3, #1
 80097d4:	441a      	add	r2, r3
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	685b      	ldr	r3, [r3, #4]
 80097da:	fbb2 f3f3 	udiv	r3, r2, r3
 80097de:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80097e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e2:	2b0f      	cmp	r3, #15
 80097e4:	d909      	bls.n	80097fa <UART_SetConfig+0xa8e>
 80097e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80097ec:	d205      	bcs.n	80097fa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80097ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097f0:	b29a      	uxth	r2, r3
 80097f2:	697b      	ldr	r3, [r7, #20]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	60da      	str	r2, [r3, #12]
 80097f8:	e002      	b.n	8009800 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80097fa:	2301      	movs	r3, #1
 80097fc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009800:	697b      	ldr	r3, [r7, #20]
 8009802:	2201      	movs	r2, #1
 8009804:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009808:	697b      	ldr	r3, [r7, #20]
 800980a:	2201      	movs	r2, #1
 800980c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009810:	697b      	ldr	r3, [r7, #20]
 8009812:	2200      	movs	r2, #0
 8009814:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009816:	697b      	ldr	r3, [r7, #20]
 8009818:	2200      	movs	r2, #0
 800981a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800981c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009820:	4618      	mov	r0, r3
 8009822:	3748      	adds	r7, #72	; 0x48
 8009824:	46bd      	mov	sp, r7
 8009826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800982a:	bf00      	nop
 800982c:	58024400 	.word	0x58024400
 8009830:	03d09000 	.word	0x03d09000
 8009834:	003d0900 	.word	0x003d0900
 8009838:	0800a64c 	.word	0x0800a64c

0800983c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800983c:	b480      	push	{r7}
 800983e:	b083      	sub	sp, #12
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009848:	f003 0301 	and.w	r3, r3, #1
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00a      	beq.n	8009866 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	430a      	orrs	r2, r1
 8009864:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	f003 0302 	and.w	r3, r3, #2
 800986e:	2b00      	cmp	r3, #0
 8009870:	d00a      	beq.n	8009888 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	685b      	ldr	r3, [r3, #4]
 8009878:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	430a      	orrs	r2, r1
 8009886:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800988c:	f003 0304 	and.w	r3, r3, #4
 8009890:	2b00      	cmp	r3, #0
 8009892:	d00a      	beq.n	80098aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	685b      	ldr	r3, [r3, #4]
 800989a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	430a      	orrs	r2, r1
 80098a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ae:	f003 0308 	and.w	r3, r3, #8
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d00a      	beq.n	80098cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	430a      	orrs	r2, r1
 80098ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d00a      	beq.n	80098ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	430a      	orrs	r2, r1
 80098ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	f003 0320 	and.w	r3, r3, #32
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d00a      	beq.n	8009910 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	430a      	orrs	r2, r1
 800990e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009918:	2b00      	cmp	r3, #0
 800991a:	d01a      	beq.n	8009952 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	685b      	ldr	r3, [r3, #4]
 8009922:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	430a      	orrs	r2, r1
 8009930:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009936:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800993a:	d10a      	bne.n	8009952 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	430a      	orrs	r2, r1
 8009950:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009956:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800995a:	2b00      	cmp	r3, #0
 800995c:	d00a      	beq.n	8009974 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	685b      	ldr	r3, [r3, #4]
 8009964:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	430a      	orrs	r2, r1
 8009972:	605a      	str	r2, [r3, #4]
  }
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009980:	b580      	push	{r7, lr}
 8009982:	b086      	sub	sp, #24
 8009984:	af02      	add	r7, sp, #8
 8009986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2200      	movs	r2, #0
 800998c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009990:	f7f8 fb54 	bl	800203c <HAL_GetTick>
 8009994:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	f003 0308 	and.w	r3, r3, #8
 80099a0:	2b08      	cmp	r3, #8
 80099a2:	d10e      	bne.n	80099c2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099a4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099a8:	9300      	str	r3, [sp, #0]
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 f82f 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 80099b8:	4603      	mov	r3, r0
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d001      	beq.n	80099c2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099be:	2303      	movs	r3, #3
 80099c0:	e025      	b.n	8009a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f003 0304 	and.w	r3, r3, #4
 80099cc:	2b04      	cmp	r3, #4
 80099ce:	d10e      	bne.n	80099ee <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80099d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80099d4:	9300      	str	r3, [sp, #0]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2200      	movs	r2, #0
 80099da:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 f819 	bl	8009a16 <UART_WaitOnFlagUntilTimeout>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d001      	beq.n	80099ee <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	e00f      	b.n	8009a0e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2220      	movs	r2, #32
 80099f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2220      	movs	r2, #32
 80099fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	2200      	movs	r2, #0
 8009a02:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	2200      	movs	r2, #0
 8009a08:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}

08009a16 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009a16:	b580      	push	{r7, lr}
 8009a18:	b09c      	sub	sp, #112	; 0x70
 8009a1a:	af00      	add	r7, sp, #0
 8009a1c:	60f8      	str	r0, [r7, #12]
 8009a1e:	60b9      	str	r1, [r7, #8]
 8009a20:	603b      	str	r3, [r7, #0]
 8009a22:	4613      	mov	r3, r2
 8009a24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a26:	e0a9      	b.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a28:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a2e:	f000 80a5 	beq.w	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a32:	f7f8 fb03 	bl	800203c <HAL_GetTick>
 8009a36:	4602      	mov	r2, r0
 8009a38:	683b      	ldr	r3, [r7, #0]
 8009a3a:	1ad3      	subs	r3, r2, r3
 8009a3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d302      	bcc.n	8009a48 <UART_WaitOnFlagUntilTimeout+0x32>
 8009a42:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d140      	bne.n	8009aca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a50:	e853 3f00 	ldrex	r3, [r3]
 8009a54:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009a56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009a5c:	667b      	str	r3, [r7, #100]	; 0x64
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	461a      	mov	r2, r3
 8009a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a68:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a6a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009a6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009a6e:	e841 2300 	strex	r3, r2, [r1]
 8009a72:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d1e6      	bne.n	8009a48 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	3308      	adds	r3, #8
 8009a80:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a84:	e853 3f00 	ldrex	r3, [r3]
 8009a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a8c:	f023 0301 	bic.w	r3, r3, #1
 8009a90:	663b      	str	r3, [r7, #96]	; 0x60
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	3308      	adds	r3, #8
 8009a98:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009a9a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009a9c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a9e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009aa0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009aa2:	e841 2300 	strex	r3, r2, [r1]
 8009aa6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009aa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d1e5      	bne.n	8009a7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2220      	movs	r2, #32
 8009ab2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	2220      	movs	r2, #32
 8009aba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	2200      	movs	r2, #0
 8009ac2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009ac6:	2303      	movs	r3, #3
 8009ac8:	e069      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f003 0304 	and.w	r3, r3, #4
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d051      	beq.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009ae6:	d149      	bne.n	8009b7c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009af0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009afa:	e853 3f00 	ldrex	r3, [r3]
 8009afe:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b02:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009b06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b10:	637b      	str	r3, [r7, #52]	; 0x34
 8009b12:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b14:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009b18:	e841 2300 	strex	r3, r2, [r1]
 8009b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d1e6      	bne.n	8009af2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	3308      	adds	r3, #8
 8009b2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b2c:	697b      	ldr	r3, [r7, #20]
 8009b2e:	e853 3f00 	ldrex	r3, [r3]
 8009b32:	613b      	str	r3, [r7, #16]
   return(result);
 8009b34:	693b      	ldr	r3, [r7, #16]
 8009b36:	f023 0301 	bic.w	r3, r3, #1
 8009b3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	3308      	adds	r3, #8
 8009b42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009b44:	623a      	str	r2, [r7, #32]
 8009b46:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b48:	69f9      	ldr	r1, [r7, #28]
 8009b4a:	6a3a      	ldr	r2, [r7, #32]
 8009b4c:	e841 2300 	strex	r3, r2, [r1]
 8009b50:	61bb      	str	r3, [r7, #24]
   return(result);
 8009b52:	69bb      	ldr	r3, [r7, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d1e5      	bne.n	8009b24 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	2220      	movs	r2, #32
 8009b5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2220      	movs	r2, #32
 8009b64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2220      	movs	r2, #32
 8009b6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	2200      	movs	r2, #0
 8009b74:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8009b78:	2303      	movs	r3, #3
 8009b7a:	e010      	b.n	8009b9e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	69da      	ldr	r2, [r3, #28]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	4013      	ands	r3, r2
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	429a      	cmp	r2, r3
 8009b8a:	bf0c      	ite	eq
 8009b8c:	2301      	moveq	r3, #1
 8009b8e:	2300      	movne	r3, #0
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	461a      	mov	r2, r3
 8009b94:	79fb      	ldrb	r3, [r7, #7]
 8009b96:	429a      	cmp	r2, r3
 8009b98:	f43f af46 	beq.w	8009a28 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3770      	adds	r7, #112	; 0x70
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
	...

08009ba8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009ba8:	b480      	push	{r7}
 8009baa:	b095      	sub	sp, #84	; 0x54
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009bb8:	e853 3f00 	ldrex	r3, [r3]
 8009bbc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bc0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009bc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	461a      	mov	r2, r3
 8009bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009bce:	643b      	str	r3, [r7, #64]	; 0x40
 8009bd0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bd2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009bd4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009bd6:	e841 2300 	strex	r3, r2, [r1]
 8009bda:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1e6      	bne.n	8009bb0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	3308      	adds	r3, #8
 8009be8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	e853 3f00 	ldrex	r3, [r3]
 8009bf0:	61fb      	str	r3, [r7, #28]
   return(result);
 8009bf2:	69fa      	ldr	r2, [r7, #28]
 8009bf4:	4b1e      	ldr	r3, [pc, #120]	; (8009c70 <UART_EndRxTransfer+0xc8>)
 8009bf6:	4013      	ands	r3, r2
 8009bf8:	64bb      	str	r3, [r7, #72]	; 0x48
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	3308      	adds	r3, #8
 8009c00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c02:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009c04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009c08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c0a:	e841 2300 	strex	r3, r2, [r1]
 8009c0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d1e5      	bne.n	8009be2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d118      	bne.n	8009c50 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	e853 3f00 	ldrex	r3, [r3]
 8009c2a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 0310 	bic.w	r3, r3, #16
 8009c32:	647b      	str	r3, [r7, #68]	; 0x44
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	461a      	mov	r2, r3
 8009c3a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c3c:	61bb      	str	r3, [r7, #24]
 8009c3e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c40:	6979      	ldr	r1, [r7, #20]
 8009c42:	69ba      	ldr	r2, [r7, #24]
 8009c44:	e841 2300 	strex	r3, r2, [r1]
 8009c48:	613b      	str	r3, [r7, #16]
   return(result);
 8009c4a:	693b      	ldr	r3, [r7, #16]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d1e6      	bne.n	8009c1e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2220      	movs	r2, #32
 8009c54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009c64:	bf00      	nop
 8009c66:	3754      	adds	r7, #84	; 0x54
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	effffffe 	.word	0xeffffffe

08009c74 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c80:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009c82:	68fb      	ldr	r3, [r7, #12]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff f854 	bl	8008d40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b088      	sub	sp, #32
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cbc:	61fb      	str	r3, [r7, #28]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	61bb      	str	r3, [r7, #24]
 8009cc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6979      	ldr	r1, [r7, #20]
 8009ccc:	69ba      	ldr	r2, [r7, #24]
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	613b      	str	r3, [r7, #16]
   return(result);
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e6      	bne.n	8009ca8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2220      	movs	r2, #32
 8009cde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f7ff f81f 	bl	8008d2c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009cee:	bf00      	nop
 8009cf0:	3720      	adds	r7, #32
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bd80      	pop	{r7, pc}

08009cf6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009cf6:	b480      	push	{r7}
 8009cf8:	b083      	sub	sp, #12
 8009cfa:	af00      	add	r7, sp, #0
 8009cfc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009cfe:	bf00      	nop
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009d0a:	b480      	push	{r7}
 8009d0c:	b083      	sub	sp, #12
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009d12:	bf00      	nop
 8009d14:	370c      	adds	r7, #12
 8009d16:	46bd      	mov	sp, r7
 8009d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1c:	4770      	bx	lr

08009d1e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009d1e:	b480      	push	{r7}
 8009d20:	b083      	sub	sp, #12
 8009d22:	af00      	add	r7, sp, #0
 8009d24:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009d26:	bf00      	nop
 8009d28:	370c      	adds	r7, #12
 8009d2a:	46bd      	mov	sp, r7
 8009d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d30:	4770      	bx	lr

08009d32 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009d32:	b480      	push	{r7}
 8009d34:	b085      	sub	sp, #20
 8009d36:	af00      	add	r7, sp, #0
 8009d38:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009d40:	2b01      	cmp	r3, #1
 8009d42:	d101      	bne.n	8009d48 <HAL_UARTEx_DisableFifoMode+0x16>
 8009d44:	2302      	movs	r3, #2
 8009d46:	e027      	b.n	8009d98 <HAL_UARTEx_DisableFifoMode+0x66>
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2224      	movs	r2, #36	; 0x24
 8009d54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	681a      	ldr	r2, [r3, #0]
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	f022 0201 	bic.w	r2, r2, #1
 8009d6e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009d76:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2220      	movs	r2, #32
 8009d8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2200      	movs	r2, #0
 8009d92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d96:	2300      	movs	r3, #0
}
 8009d98:	4618      	mov	r0, r3
 8009d9a:	3714      	adds	r7, #20
 8009d9c:	46bd      	mov	sp, r7
 8009d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da2:	4770      	bx	lr

08009da4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b084      	sub	sp, #16
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
 8009dac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009db4:	2b01      	cmp	r3, #1
 8009db6:	d101      	bne.n	8009dbc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009db8:	2302      	movs	r3, #2
 8009dba:	e02d      	b.n	8009e18 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2201      	movs	r2, #1
 8009dc0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	2224      	movs	r2, #36	; 0x24
 8009dc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	681a      	ldr	r2, [r3, #0]
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f022 0201 	bic.w	r2, r2, #1
 8009de2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	689b      	ldr	r3, [r3, #8]
 8009dea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	430a      	orrs	r2, r1
 8009df6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009df8:	6878      	ldr	r0, [r7, #4]
 8009dfa:	f000 f84f 	bl	8009e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	68fa      	ldr	r2, [r7, #12]
 8009e04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e16:	2300      	movs	r3, #0
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	3710      	adds	r7, #16
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	bd80      	pop	{r7, pc}

08009e20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b084      	sub	sp, #16
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
 8009e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d101      	bne.n	8009e38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009e34:	2302      	movs	r3, #2
 8009e36:	e02d      	b.n	8009e94 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2201      	movs	r2, #1
 8009e3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2224      	movs	r2, #36	; 0x24
 8009e44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	681b      	ldr	r3, [r3, #0]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681a      	ldr	r2, [r3, #0]
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	f022 0201 	bic.w	r2, r2, #1
 8009e5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	689b      	ldr	r3, [r3, #8]
 8009e66:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	683a      	ldr	r2, [r7, #0]
 8009e70:	430a      	orrs	r2, r1
 8009e72:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	f000 f811 	bl	8009e9c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	68fa      	ldr	r2, [r7, #12]
 8009e80:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2220      	movs	r2, #32
 8009e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009e92:	2300      	movs	r3, #0
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b085      	sub	sp, #20
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	d108      	bne.n	8009ebe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009ebc:	e031      	b.n	8009f22 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009ebe:	2310      	movs	r3, #16
 8009ec0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009ec2:	2310      	movs	r3, #16
 8009ec4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	689b      	ldr	r3, [r3, #8]
 8009ecc:	0e5b      	lsrs	r3, r3, #25
 8009ece:	b2db      	uxtb	r3, r3
 8009ed0:	f003 0307 	and.w	r3, r3, #7
 8009ed4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689b      	ldr	r3, [r3, #8]
 8009edc:	0f5b      	lsrs	r3, r3, #29
 8009ede:	b2db      	uxtb	r3, r3
 8009ee0:	f003 0307 	and.w	r3, r3, #7
 8009ee4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ee6:	7bbb      	ldrb	r3, [r7, #14]
 8009ee8:	7b3a      	ldrb	r2, [r7, #12]
 8009eea:	4911      	ldr	r1, [pc, #68]	; (8009f30 <UARTEx_SetNbDataToProcess+0x94>)
 8009eec:	5c8a      	ldrb	r2, [r1, r2]
 8009eee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009ef2:	7b3a      	ldrb	r2, [r7, #12]
 8009ef4:	490f      	ldr	r1, [pc, #60]	; (8009f34 <UARTEx_SetNbDataToProcess+0x98>)
 8009ef6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009ef8:	fb93 f3f2 	sdiv	r3, r3, r2
 8009efc:	b29a      	uxth	r2, r3
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	7b7a      	ldrb	r2, [r7, #13]
 8009f08:	4909      	ldr	r1, [pc, #36]	; (8009f30 <UARTEx_SetNbDataToProcess+0x94>)
 8009f0a:	5c8a      	ldrb	r2, [r1, r2]
 8009f0c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009f10:	7b7a      	ldrb	r2, [r7, #13]
 8009f12:	4908      	ldr	r1, [pc, #32]	; (8009f34 <UARTEx_SetNbDataToProcess+0x98>)
 8009f14:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009f16:	fb93 f3f2 	sdiv	r3, r3, r2
 8009f1a:	b29a      	uxth	r2, r3
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009f22:	bf00      	nop
 8009f24:	3714      	adds	r7, #20
 8009f26:	46bd      	mov	sp, r7
 8009f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f2c:	4770      	bx	lr
 8009f2e:	bf00      	nop
 8009f30:	0800a664 	.word	0x0800a664
 8009f34:	0800a66c 	.word	0x0800a66c

08009f38 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f38:	b084      	sub	sp, #16
 8009f3a:	b580      	push	{r7, lr}
 8009f3c:	b084      	sub	sp, #16
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
 8009f42:	f107 001c 	add.w	r0, r7, #28
 8009f46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009f4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	d120      	bne.n	8009f92 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	68da      	ldr	r2, [r3, #12]
 8009f60:	4b2a      	ldr	r3, [pc, #168]	; (800a00c <USB_CoreInit+0xd4>)
 8009f62:	4013      	ands	r3, r2
 8009f64:	687a      	ldr	r2, [r7, #4]
 8009f66:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	68db      	ldr	r3, [r3, #12]
 8009f6c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009f74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f76:	2b01      	cmp	r3, #1
 8009f78:	d105      	bne.n	8009f86 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	68db      	ldr	r3, [r3, #12]
 8009f7e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 faac 	bl	800a4e4 <USB_CoreReset>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	73fb      	strb	r3, [r7, #15]
 8009f90:	e01a      	b.n	8009fc8 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	68db      	ldr	r3, [r3, #12]
 8009f96:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f000 faa0 	bl	800a4e4 <USB_CoreReset>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009fa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d106      	bne.n	8009fbc <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fb2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	639a      	str	r2, [r3, #56]	; 0x38
 8009fba:	e005      	b.n	8009fc8 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fca:	2b01      	cmp	r3, #1
 8009fcc:	d116      	bne.n	8009ffc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009fd2:	b29a      	uxth	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009fdc:	4b0c      	ldr	r3, [pc, #48]	; (800a010 <USB_CoreInit+0xd8>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	687a      	ldr	r2, [r7, #4]
 8009fe2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	689b      	ldr	r3, [r3, #8]
 8009fe8:	f043 0206 	orr.w	r2, r3, #6
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	689b      	ldr	r3, [r3, #8]
 8009ff4:	f043 0220 	orr.w	r2, r3, #32
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a008:	b004      	add	sp, #16
 800a00a:	4770      	bx	lr
 800a00c:	ffbdffbf 	.word	0xffbdffbf
 800a010:	03ee0000 	.word	0x03ee0000

0800a014 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f023 0201 	bic.w	r2, r3, #1
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	370c      	adds	r7, #12
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr

0800a036 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a036:	b580      	push	{r7, lr}
 800a038:	b084      	sub	sp, #16
 800a03a:	af00      	add	r7, sp, #0
 800a03c:	6078      	str	r0, [r7, #4]
 800a03e:	460b      	mov	r3, r1
 800a040:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a042:	2300      	movs	r3, #0
 800a044:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	68db      	ldr	r3, [r3, #12]
 800a04a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a052:	78fb      	ldrb	r3, [r7, #3]
 800a054:	2b01      	cmp	r3, #1
 800a056:	d115      	bne.n	800a084 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	68db      	ldr	r3, [r3, #12]
 800a05c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a064:	2001      	movs	r0, #1
 800a066:	f7f7 fff5 	bl	8002054 <HAL_Delay>
      ms++;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	3301      	adds	r3, #1
 800a06e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa29 	bl	800a4c8 <USB_GetMode>
 800a076:	4603      	mov	r3, r0
 800a078:	2b01      	cmp	r3, #1
 800a07a:	d01e      	beq.n	800a0ba <USB_SetCurrentMode+0x84>
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	2b31      	cmp	r3, #49	; 0x31
 800a080:	d9f0      	bls.n	800a064 <USB_SetCurrentMode+0x2e>
 800a082:	e01a      	b.n	800a0ba <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d115      	bne.n	800a0b6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a096:	2001      	movs	r0, #1
 800a098:	f7f7 ffdc 	bl	8002054 <HAL_Delay>
      ms++;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	3301      	adds	r3, #1
 800a0a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a0a2:	6878      	ldr	r0, [r7, #4]
 800a0a4:	f000 fa10 	bl	800a4c8 <USB_GetMode>
 800a0a8:	4603      	mov	r3, r0
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d005      	beq.n	800a0ba <USB_SetCurrentMode+0x84>
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2b31      	cmp	r3, #49	; 0x31
 800a0b2:	d9f0      	bls.n	800a096 <USB_SetCurrentMode+0x60>
 800a0b4:	e001      	b.n	800a0ba <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a0b6:	2301      	movs	r3, #1
 800a0b8:	e005      	b.n	800a0c6 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2b32      	cmp	r3, #50	; 0x32
 800a0be:	d101      	bne.n	800a0c4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	e000      	b.n	800a0c6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a0c4:	2300      	movs	r3, #0
}
 800a0c6:	4618      	mov	r0, r3
 800a0c8:	3710      	adds	r7, #16
 800a0ca:	46bd      	mov	sp, r7
 800a0cc:	bd80      	pop	{r7, pc}
	...

0800a0d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a0d0:	b084      	sub	sp, #16
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b086      	sub	sp, #24
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
 800a0da:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a0de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	613b      	str	r3, [r7, #16]
 800a0ee:	e009      	b.n	800a104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a0f0:	687a      	ldr	r2, [r7, #4]
 800a0f2:	693b      	ldr	r3, [r7, #16]
 800a0f4:	3340      	adds	r3, #64	; 0x40
 800a0f6:	009b      	lsls	r3, r3, #2
 800a0f8:	4413      	add	r3, r2
 800a0fa:	2200      	movs	r2, #0
 800a0fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	3301      	adds	r3, #1
 800a102:	613b      	str	r3, [r7, #16]
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2b0e      	cmp	r3, #14
 800a108:	d9f2      	bls.n	800a0f0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a10a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	d11c      	bne.n	800a14a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a11e:	f043 0302 	orr.w	r3, r3, #2
 800a122:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a128:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	601a      	str	r2, [r3, #0]
 800a148:	e005      	b.n	800a156 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a14e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a15c:	461a      	mov	r2, r3
 800a15e:	2300      	movs	r3, #0
 800a160:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a168:	4619      	mov	r1, r3
 800a16a:	68fb      	ldr	r3, [r7, #12]
 800a16c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a170:	461a      	mov	r2, r3
 800a172:	680b      	ldr	r3, [r1, #0]
 800a174:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a178:	2b01      	cmp	r3, #1
 800a17a:	d10c      	bne.n	800a196 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d104      	bne.n	800a18c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a182:	2100      	movs	r1, #0
 800a184:	6878      	ldr	r0, [r7, #4]
 800a186:	f000 f965 	bl	800a454 <USB_SetDevSpeed>
 800a18a:	e008      	b.n	800a19e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a18c:	2101      	movs	r1, #1
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f000 f960 	bl	800a454 <USB_SetDevSpeed>
 800a194:	e003      	b.n	800a19e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a196:	2103      	movs	r1, #3
 800a198:	6878      	ldr	r0, [r7, #4]
 800a19a:	f000 f95b 	bl	800a454 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a19e:	2110      	movs	r1, #16
 800a1a0:	6878      	ldr	r0, [r7, #4]
 800a1a2:	f000 f8f3 	bl	800a38c <USB_FlushTxFifo>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d001      	beq.n	800a1b0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a1b0:	6878      	ldr	r0, [r7, #4]
 800a1b2:	f000 f91f 	bl	800a3f4 <USB_FlushRxFifo>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d001      	beq.n	800a1c0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a1bc:	2301      	movs	r3, #1
 800a1be:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	2300      	movs	r3, #0
 800a1d6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1de:	461a      	mov	r2, r3
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	613b      	str	r3, [r7, #16]
 800a1e8:	e043      	b.n	800a272 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	015a      	lsls	r2, r3, #5
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	4413      	add	r3, r2
 800a1f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a1fc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a200:	d118      	bne.n	800a234 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a202:	693b      	ldr	r3, [r7, #16]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d10a      	bne.n	800a21e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a208:	693b      	ldr	r3, [r7, #16]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a214:	461a      	mov	r2, r3
 800a216:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a21a:	6013      	str	r3, [r2, #0]
 800a21c:	e013      	b.n	800a246 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a21e:	693b      	ldr	r3, [r7, #16]
 800a220:	015a      	lsls	r2, r3, #5
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	4413      	add	r3, r2
 800a226:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a22a:	461a      	mov	r2, r3
 800a22c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a230:	6013      	str	r3, [r2, #0]
 800a232:	e008      	b.n	800a246 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	015a      	lsls	r2, r3, #5
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	4413      	add	r3, r2
 800a23c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a240:	461a      	mov	r2, r3
 800a242:	2300      	movs	r3, #0
 800a244:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	015a      	lsls	r2, r3, #5
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	4413      	add	r3, r2
 800a24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a252:	461a      	mov	r2, r3
 800a254:	2300      	movs	r3, #0
 800a256:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a258:	693b      	ldr	r3, [r7, #16]
 800a25a:	015a      	lsls	r2, r3, #5
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	4413      	add	r3, r2
 800a260:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a264:	461a      	mov	r2, r3
 800a266:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a26a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	3301      	adds	r3, #1
 800a270:	613b      	str	r3, [r7, #16]
 800a272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a274:	693a      	ldr	r2, [r7, #16]
 800a276:	429a      	cmp	r2, r3
 800a278:	d3b7      	bcc.n	800a1ea <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a27a:	2300      	movs	r3, #0
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	e043      	b.n	800a308 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a280:	693b      	ldr	r3, [r7, #16]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	4413      	add	r3, r2
 800a288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a292:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a296:	d118      	bne.n	800a2ca <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d10a      	bne.n	800a2b4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a29e:	693b      	ldr	r3, [r7, #16]
 800a2a0:	015a      	lsls	r2, r3, #5
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2aa:	461a      	mov	r2, r3
 800a2ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a2b0:	6013      	str	r3, [r2, #0]
 800a2b2:	e013      	b.n	800a2dc <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	015a      	lsls	r2, r3, #5
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	4413      	add	r3, r2
 800a2bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2c0:	461a      	mov	r2, r3
 800a2c2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a2c6:	6013      	str	r3, [r2, #0]
 800a2c8:	e008      	b.n	800a2dc <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	015a      	lsls	r2, r3, #5
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d6:	461a      	mov	r2, r3
 800a2d8:	2300      	movs	r3, #0
 800a2da:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	015a      	lsls	r2, r3, #5
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	4413      	add	r3, r2
 800a2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2e8:	461a      	mov	r2, r3
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a2ee:	693b      	ldr	r3, [r7, #16]
 800a2f0:	015a      	lsls	r2, r3, #5
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	4413      	add	r3, r2
 800a2f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2fa:	461a      	mov	r2, r3
 800a2fc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a300:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a302:	693b      	ldr	r3, [r7, #16]
 800a304:	3301      	adds	r3, #1
 800a306:	613b      	str	r3, [r7, #16]
 800a308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a30a:	693a      	ldr	r2, [r7, #16]
 800a30c:	429a      	cmp	r2, r3
 800a30e:	d3b7      	bcc.n	800a280 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a316:	691b      	ldr	r3, [r3, #16]
 800a318:	68fa      	ldr	r2, [r7, #12]
 800a31a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a31e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a322:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	2200      	movs	r2, #0
 800a328:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a330:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a334:	2b00      	cmp	r3, #0
 800a336:	d105      	bne.n	800a344 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	699b      	ldr	r3, [r3, #24]
 800a33c:	f043 0210 	orr.w	r2, r3, #16
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	699a      	ldr	r2, [r3, #24]
 800a348:	4b0e      	ldr	r3, [pc, #56]	; (800a384 <USB_DevInit+0x2b4>)
 800a34a:	4313      	orrs	r3, r2
 800a34c:	687a      	ldr	r2, [r7, #4]
 800a34e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a352:	2b00      	cmp	r3, #0
 800a354:	d005      	beq.n	800a362 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	699b      	ldr	r3, [r3, #24]
 800a35a:	f043 0208 	orr.w	r2, r3, #8
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a364:	2b01      	cmp	r3, #1
 800a366:	d105      	bne.n	800a374 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	699a      	ldr	r2, [r3, #24]
 800a36c:	4b06      	ldr	r3, [pc, #24]	; (800a388 <USB_DevInit+0x2b8>)
 800a36e:	4313      	orrs	r3, r2
 800a370:	687a      	ldr	r2, [r7, #4]
 800a372:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a374:	7dfb      	ldrb	r3, [r7, #23]
}
 800a376:	4618      	mov	r0, r3
 800a378:	3718      	adds	r7, #24
 800a37a:	46bd      	mov	sp, r7
 800a37c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a380:	b004      	add	sp, #16
 800a382:	4770      	bx	lr
 800a384:	803c3800 	.word	0x803c3800
 800a388:	40000004 	.word	0x40000004

0800a38c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b085      	sub	sp, #20
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
 800a394:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	3301      	adds	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	4a13      	ldr	r2, [pc, #76]	; (800a3f0 <USB_FlushTxFifo+0x64>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d901      	bls.n	800a3ac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	e01b      	b.n	800a3e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	691b      	ldr	r3, [r3, #16]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	daf2      	bge.n	800a39a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a3b4:	2300      	movs	r3, #0
 800a3b6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	019b      	lsls	r3, r3, #6
 800a3bc:	f043 0220 	orr.w	r2, r3, #32
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	3301      	adds	r3, #1
 800a3c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	4a08      	ldr	r2, [pc, #32]	; (800a3f0 <USB_FlushTxFifo+0x64>)
 800a3ce:	4293      	cmp	r3, r2
 800a3d0:	d901      	bls.n	800a3d6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a3d2:	2303      	movs	r3, #3
 800a3d4:	e006      	b.n	800a3e4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	691b      	ldr	r3, [r3, #16]
 800a3da:	f003 0320 	and.w	r3, r3, #32
 800a3de:	2b20      	cmp	r3, #32
 800a3e0:	d0f0      	beq.n	800a3c4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a3e2:	2300      	movs	r3, #0
}
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	3714      	adds	r7, #20
 800a3e8:	46bd      	mov	sp, r7
 800a3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ee:	4770      	bx	lr
 800a3f0:	00030d40 	.word	0x00030d40

0800a3f4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a3f4:	b480      	push	{r7}
 800a3f6:	b085      	sub	sp, #20
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	3301      	adds	r3, #1
 800a404:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	4a11      	ldr	r2, [pc, #68]	; (800a450 <USB_FlushRxFifo+0x5c>)
 800a40a:	4293      	cmp	r3, r2
 800a40c:	d901      	bls.n	800a412 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e018      	b.n	800a444 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	691b      	ldr	r3, [r3, #16]
 800a416:	2b00      	cmp	r3, #0
 800a418:	daf2      	bge.n	800a400 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a41a:	2300      	movs	r3, #0
 800a41c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2210      	movs	r2, #16
 800a422:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	3301      	adds	r3, #1
 800a428:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	4a08      	ldr	r2, [pc, #32]	; (800a450 <USB_FlushRxFifo+0x5c>)
 800a42e:	4293      	cmp	r3, r2
 800a430:	d901      	bls.n	800a436 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a432:	2303      	movs	r3, #3
 800a434:	e006      	b.n	800a444 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	691b      	ldr	r3, [r3, #16]
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	2b10      	cmp	r3, #16
 800a440:	d0f0      	beq.n	800a424 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3714      	adds	r7, #20
 800a448:	46bd      	mov	sp, r7
 800a44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a44e:	4770      	bx	lr
 800a450:	00030d40 	.word	0x00030d40

0800a454 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a454:	b480      	push	{r7}
 800a456:	b085      	sub	sp, #20
 800a458:	af00      	add	r7, sp, #0
 800a45a:	6078      	str	r0, [r7, #4]
 800a45c:	460b      	mov	r3, r1
 800a45e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a46a:	681a      	ldr	r2, [r3, #0]
 800a46c:	78fb      	ldrb	r3, [r7, #3]
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a474:	4313      	orrs	r3, r2
 800a476:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a478:	2300      	movs	r3, #0
}
 800a47a:	4618      	mov	r0, r3
 800a47c:	3714      	adds	r7, #20
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a486:	b480      	push	{r7}
 800a488:	b085      	sub	sp, #20
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	68fa      	ldr	r2, [r7, #12]
 800a49c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a4a0:	f023 0303 	bic.w	r3, r3, #3
 800a4a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a4ac:	685b      	ldr	r3, [r3, #4]
 800a4ae:	68fa      	ldr	r2, [r7, #12]
 800a4b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a4b4:	f043 0302 	orr.w	r3, r3, #2
 800a4b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a4ba:	2300      	movs	r3, #0
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3714      	adds	r7, #20
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c6:	4770      	bx	lr

0800a4c8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b083      	sub	sp, #12
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	695b      	ldr	r3, [r3, #20]
 800a4d4:	f003 0301 	and.w	r3, r3, #1
}
 800a4d8:	4618      	mov	r0, r3
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr

0800a4e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4e4:	b480      	push	{r7}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4ec:	2300      	movs	r3, #0
 800a4ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	3301      	adds	r3, #1
 800a4f4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	4a13      	ldr	r2, [pc, #76]	; (800a548 <USB_CoreReset+0x64>)
 800a4fa:	4293      	cmp	r3, r2
 800a4fc:	d901      	bls.n	800a502 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4fe:	2303      	movs	r3, #3
 800a500:	e01b      	b.n	800a53a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	691b      	ldr	r3, [r3, #16]
 800a506:	2b00      	cmp	r3, #0
 800a508:	daf2      	bge.n	800a4f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a50a:	2300      	movs	r3, #0
 800a50c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	691b      	ldr	r3, [r3, #16]
 800a512:	f043 0201 	orr.w	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	3301      	adds	r3, #1
 800a51e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	4a09      	ldr	r2, [pc, #36]	; (800a548 <USB_CoreReset+0x64>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d901      	bls.n	800a52c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e006      	b.n	800a53a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a52c:	687b      	ldr	r3, [r7, #4]
 800a52e:	691b      	ldr	r3, [r3, #16]
 800a530:	f003 0301 	and.w	r3, r3, #1
 800a534:	2b01      	cmp	r3, #1
 800a536:	d0f0      	beq.n	800a51a <USB_CoreReset+0x36>

  return HAL_OK;
 800a538:	2300      	movs	r3, #0
}
 800a53a:	4618      	mov	r0, r3
 800a53c:	3714      	adds	r7, #20
 800a53e:	46bd      	mov	sp, r7
 800a540:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a544:	4770      	bx	lr
 800a546:	bf00      	nop
 800a548:	00030d40 	.word	0x00030d40

0800a54c <__libc_init_array>:
 800a54c:	b570      	push	{r4, r5, r6, lr}
 800a54e:	4d0d      	ldr	r5, [pc, #52]	; (800a584 <__libc_init_array+0x38>)
 800a550:	4c0d      	ldr	r4, [pc, #52]	; (800a588 <__libc_init_array+0x3c>)
 800a552:	1b64      	subs	r4, r4, r5
 800a554:	10a4      	asrs	r4, r4, #2
 800a556:	2600      	movs	r6, #0
 800a558:	42a6      	cmp	r6, r4
 800a55a:	d109      	bne.n	800a570 <__libc_init_array+0x24>
 800a55c:	4d0b      	ldr	r5, [pc, #44]	; (800a58c <__libc_init_array+0x40>)
 800a55e:	4c0c      	ldr	r4, [pc, #48]	; (800a590 <__libc_init_array+0x44>)
 800a560:	f000 f820 	bl	800a5a4 <_init>
 800a564:	1b64      	subs	r4, r4, r5
 800a566:	10a4      	asrs	r4, r4, #2
 800a568:	2600      	movs	r6, #0
 800a56a:	42a6      	cmp	r6, r4
 800a56c:	d105      	bne.n	800a57a <__libc_init_array+0x2e>
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	f855 3b04 	ldr.w	r3, [r5], #4
 800a574:	4798      	blx	r3
 800a576:	3601      	adds	r6, #1
 800a578:	e7ee      	b.n	800a558 <__libc_init_array+0xc>
 800a57a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a57e:	4798      	blx	r3
 800a580:	3601      	adds	r6, #1
 800a582:	e7f2      	b.n	800a56a <__libc_init_array+0x1e>
 800a584:	0800a67c 	.word	0x0800a67c
 800a588:	0800a67c 	.word	0x0800a67c
 800a58c:	0800a67c 	.word	0x0800a67c
 800a590:	0800a680 	.word	0x0800a680

0800a594 <memset>:
 800a594:	4402      	add	r2, r0
 800a596:	4603      	mov	r3, r0
 800a598:	4293      	cmp	r3, r2
 800a59a:	d100      	bne.n	800a59e <memset+0xa>
 800a59c:	4770      	bx	lr
 800a59e:	f803 1b01 	strb.w	r1, [r3], #1
 800a5a2:	e7f9      	b.n	800a598 <memset+0x4>

0800a5a4 <_init>:
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	bf00      	nop
 800a5a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5aa:	bc08      	pop	{r3}
 800a5ac:	469e      	mov	lr, r3
 800a5ae:	4770      	bx	lr

0800a5b0 <_fini>:
 800a5b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5b2:	bf00      	nop
 800a5b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b6:	bc08      	pop	{r3}
 800a5b8:	469e      	mov	lr, r3
 800a5ba:	4770      	bx	lr
