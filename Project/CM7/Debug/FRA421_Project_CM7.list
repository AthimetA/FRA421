
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010a5c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  08010cfc  08010cfc  00020cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080126c4  080126c4  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  080126c4  080126c4  000226c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080126cc  080126cc  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080126cc  080126cc  000226cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080126d0  080126d0  000226d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  080126d4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  0801275c  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  080127bc  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  0801281c  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  0801281c  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002641a  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056590  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a90  00000000  00000000  0005a190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019e8  00000000  00000000  0005bc20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023aee  00000000  00000000  0009b03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001937b4  00000000  00000000  000beb29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002522dd  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000076c0  00000000  00000000  00252330  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08010ce4 	.word	0x08010ce4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	08010ce4 	.word	0x08010ce4

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80e4 	bne.w	8000966 <Player_Reading_Card+0x212>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b46      	ldr	r3, [pc, #280]	; (8000970 <Player_Reading_Card+0x21c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fe47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2f      	ldr	r3, [pc, #188]	; (8000970 <Player_Reading_Card+0x21c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 0;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2200      	movs	r2, #0
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e03b      	b.n	8000966 <Player_Reading_Card+0x212>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d136      	bne.n	8000966 <Player_Reading_Card+0x212>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d132      	bne.n	8000966 <Player_Reading_Card+0x212>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d92e      	bls.n	8000966 <Player_Reading_Card+0x212>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fe12 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Player_Reading_Card+0x21c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				if(ptrYugiohCard_dst->cardType == 2)
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	785b      	ldrb	r3, [r3, #1]
 800093c:	2b02      	cmp	r3, #2
 800093e:	d103      	bne.n	8000948 <Player_Reading_Card+0x1f4>
					ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000940:	69bb      	ldr	r3, [r7, #24]
 8000942:	2201      	movs	r2, #1
 8000944:	725a      	strb	r2, [r3, #9]
 8000946:	e002      	b.n	800094e <Player_Reading_Card+0x1fa>
					ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000948:	69bb      	ldr	r3, [r7, #24]
 800094a:	2200      	movs	r2, #0
 800094c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800094e:	6a38      	ldr	r0, [r7, #32]
 8000950:	f7ff fee4 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000954:	6a3b      	ldr	r3, [r7, #32]
 8000956:	2200      	movs	r2, #0
 8000958:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800095a:	68bb      	ldr	r3, [r7, #8]
 800095c:	781b      	ldrb	r3, [r3, #0]
 800095e:	3301      	adds	r3, #1
 8000960:	b2da      	uxtb	r2, r3
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3738      	adds	r7, #56	; 0x38
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	aaaaaaab 	.word	0xaaaaaaab

08000974 <Player_Reading_Card_Monster_SPS>:

void Player_Reading_Card_Monster_SPS(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b08c      	sub	sp, #48	; 0x30
 8000978:	af00      	add	r7, sp, #0
 800097a:	60f8      	str	r0, [r7, #12]
 800097c:	60b9      	str	r1, [r7, #8]
 800097e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000980:	68fb      	ldr	r3, [r7, #12]
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	881b      	ldrh	r3, [r3, #0]
 800098a:	461a      	mov	r2, r3
 800098c:	2358      	movs	r3, #88	; 0x58
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	3328      	adds	r3, #40	; 0x28
 8000994:	68fa      	ldr	r2, [r7, #12]
 8000996:	4413      	add	r3, r2
 8000998:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	3318      	adds	r3, #24
 800099e:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009a6:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	3308      	adds	r3, #8
 80009ac:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80009b4:	69fb      	ldr	r3, [r7, #28]
 80009b6:	78db      	ldrb	r3, [r3, #3]
 80009b8:	2b01      	cmp	r3, #1
 80009ba:	f040 8098 	bne.w	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 80009be:	2300      	movs	r3, #0
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
 80009c2:	e00d      	b.n	80009e0 <Player_Reading_Card_Monster_SPS+0x6c>
			if (ptrYugiohCard_src->cardType == 1) {
 80009c4:	69bb      	ldr	r3, [r7, #24]
 80009c6:	785b      	ldrb	r3, [r3, #1]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d103      	bne.n	80009d4 <Player_Reading_Card_Monster_SPS+0x60>
				flag_played = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80009d2:	e008      	b.n	80009e6 <Player_Reading_Card_Monster_SPS+0x72>
			}
			ptrYugiohCard_played++;
 80009d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d6:	3310      	adds	r3, #16
 80009d8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	3301      	adds	r3, #1
 80009de:	627b      	str	r3, [r7, #36]	; 0x24
 80009e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009e2:	2b05      	cmp	r3, #5
 80009e4:	ddee      	ble.n	80009c4 <Player_Reading_Card_Monster_SPS+0x50>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80009ec:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	623b      	str	r3, [r7, #32]
 80009f2:	e00f      	b.n	8000a14 <Player_Reading_Card_Monster_SPS+0xa0>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80009f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	69bb      	ldr	r3, [r7, #24]
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	429a      	cmp	r2, r3
 80009fe:	d103      	bne.n	8000a08 <Player_Reading_Card_Monster_SPS+0x94>
				flag_played = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000a06:	e008      	b.n	8000a1a <Player_Reading_Card_Monster_SPS+0xa6>
			}
			ptrYugiohCard_played++;
 8000a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000a0a:	3310      	adds	r3, #16
 8000a0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000a0e:	6a3b      	ldr	r3, [r7, #32]
 8000a10:	3301      	adds	r3, #1
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	6a3b      	ldr	r3, [r7, #32]
 8000a16:	2b04      	cmp	r3, #4
 8000a18:	ddec      	ble.n	80009f4 <Player_Reading_Card_Monster_SPS+0x80>
		}

		if (player->turn == first && flag_played == 0) {
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d12f      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>
 8000a24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d12b      	bne.n	8000a84 <Player_Reading_Card_Monster_SPS+0x110>

			if (ptrYugiohCard_src->standPosition < 6)
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	799b      	ldrb	r3, [r3, #6]
 8000a30:	2b05      	cmp	r3, #5
 8000a32:	d85c      	bhi.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a34:	6878      	ldr	r0, [r7, #4]
 8000a36:	f000 fd7c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a3a:	6979      	ldr	r1, [r7, #20]
 8000a3c:	69b8      	ldr	r0, [r7, #24]
 8000a3e:	f7ff fe21 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	799a      	ldrb	r2, [r3, #6]
 8000a46:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000a48:	fba3 1302 	umull	r1, r3, r3, r2
 8000a4c:	0899      	lsrs	r1, r3, #2
 8000a4e:	460b      	mov	r3, r1
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	440b      	add	r3, r1
 8000a54:	005b      	lsls	r3, r3, #1
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b2da      	uxtb	r2, r3
 8000a5a:	697b      	ldr	r3, [r7, #20]
 8000a5c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a5e:	697b      	ldr	r3, [r7, #20]
 8000a60:	2200      	movs	r2, #0
 8000a62:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000a64:	697b      	ldr	r3, [r7, #20]
 8000a66:	2200      	movs	r2, #0
 8000a68:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a6a:	69f8      	ldr	r0, [r7, #28]
 8000a6c:	f7ff fe56 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a70:	69fb      	ldr	r3, [r7, #28]
 8000a72:	2200      	movs	r2, #0
 8000a74:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a76:	68bb      	ldr	r3, [r7, #8]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a82:	e034      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d12f      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000a8e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d12b      	bne.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a96:	69bb      	ldr	r3, [r7, #24]
 8000a98:	799b      	ldrb	r3, [r3, #6]
 8000a9a:	2b05      	cmp	r3, #5
 8000a9c:	d927      	bls.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f000 fd47 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000aa4:	6979      	ldr	r1, [r7, #20]
 8000aa6:	69b8      	ldr	r0, [r7, #24]
 8000aa8:	f7ff fdec 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	799a      	ldrb	r2, [r3, #6]
 8000ab0:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <Player_Reading_Card_Monster_SPS+0x184>)
 8000ab2:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab6:	0899      	lsrs	r1, r3, #2
 8000ab8:	460b      	mov	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	440b      	add	r3, r1
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	1ad3      	subs	r3, r2, r3
 8000ac2:	b2da      	uxtb	r2, r3
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ac8:	697b      	ldr	r3, [r7, #20]
 8000aca:	2200      	movs	r2, #0
 8000acc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000ace:	697b      	ldr	r3, [r7, #20]
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ad4:	69f8      	ldr	r0, [r7, #28]
 8000ad6:	f7ff fe21 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	2200      	movs	r2, #0
 8000ade:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000aec:	e7ff      	b.n	8000aee <Player_Reading_Card_Monster_SPS+0x17a>
 8000aee:	bf00      	nop
 8000af0:	3730      	adds	r7, #48	; 0x30
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	aaaaaaab 	.word	0xaaaaaaab

08000afc <Player_Reading_Card_Monster_Battle>:

void Player_Reading_Card_Monster_Battle(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	b08a      	sub	sp, #40	; 0x28
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	60f8      	str	r0, [r7, #12]
 8000b04:	60b9      	str	r1, [r7, #8]
 8000b06:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	3328      	adds	r3, #40	; 0x28
 8000b0c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	881b      	ldrh	r3, [r3, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	2358      	movs	r3, #88	; 0x58
 8000b16:	fb02 f303 	mul.w	r3, r2, r3
 8000b1a:	3328      	adds	r3, #40	; 0x28
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	3318      	adds	r3, #24
 8000b26:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000b2e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3308      	adds	r3, #8
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000b36:	2301      	movs	r3, #1
 8000b38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d17d      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
	{


		// Check if in Monster
		for (int i  = 0;  i < 6; ++i) {
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
 8000b48:	e00d      	b.n	8000b66 <Player_Reading_Card_Monster_Battle+0x6a>
			if (ptrYugiohCard_src->cardType == 1 ) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	785b      	ldrb	r3, [r3, #1]
 8000b4e:	2b01      	cmp	r3, #1
 8000b50:	d103      	bne.n	8000b5a <Player_Reading_Card_Monster_Battle+0x5e>
				flag_played = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b58:	e008      	b.n	8000b6c <Player_Reading_Card_Monster_Battle+0x70>
			}
			ptrYugiohCard_played++;
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5c:	3310      	adds	r3, #16
 8000b5e:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000b60:	69fb      	ldr	r3, [r7, #28]
 8000b62:	3301      	adds	r3, #1
 8000b64:	61fb      	str	r3, [r7, #28]
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	2b05      	cmp	r3, #5
 8000b6a:	ddee      	ble.n	8000b4a <Player_Reading_Card_Monster_Battle+0x4e>
		}

		if (player->turn == first && flag_played == 0) {
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d12f      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>
 8000b76:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d12b      	bne.n	8000bd6 <Player_Reading_Card_Monster_Battle+0xda>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	799b      	ldrb	r3, [r3, #6]
 8000b82:	2b05      	cmp	r3, #5
 8000b84:	d85c      	bhi.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b86:	6878      	ldr	r0, [r7, #4]
 8000b88:	f000 fcd3 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b8c:	6939      	ldr	r1, [r7, #16]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff fd78 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b94:	693b      	ldr	r3, [r7, #16]
 8000b96:	799a      	ldrb	r2, [r3, #6]
 8000b98:	4b2b      	ldr	r3, [pc, #172]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000b9a:	fba3 1302 	umull	r1, r3, r3, r2
 8000b9e:	0899      	lsrs	r1, r3, #2
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	440b      	add	r3, r1
 8000ba6:	005b      	lsls	r3, r3, #1
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	b2da      	uxtb	r2, r3
 8000bac:	693b      	ldr	r3, [r7, #16]
 8000bae:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000bb0:	693b      	ldr	r3, [r7, #16]
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000bb6:	693b      	ldr	r3, [r7, #16]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bbc:	69b8      	ldr	r0, [r7, #24]
 8000bbe:	f7ff fdad 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bc2:	69bb      	ldr	r3, [r7, #24]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bc8:	68bb      	ldr	r3, [r7, #8]
 8000bca:	781b      	ldrb	r3, [r3, #0]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	b2da      	uxtb	r2, r3
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000bd4:	e034      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d12f      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000be0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d12b      	bne.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	799b      	ldrb	r3, [r3, #6]
 8000bec:	2b05      	cmp	r3, #5
 8000bee:	d927      	bls.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bf0:	6878      	ldr	r0, [r7, #4]
 8000bf2:	f000 fc9e 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bf6:	6939      	ldr	r1, [r7, #16]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff fd43 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bfe:	693b      	ldr	r3, [r7, #16]
 8000c00:	799a      	ldrb	r2, [r3, #6]
 8000c02:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <Player_Reading_Card_Monster_Battle+0x14c>)
 8000c04:	fba3 1302 	umull	r1, r3, r3, r2
 8000c08:	0899      	lsrs	r1, r3, #2
 8000c0a:	460b      	mov	r3, r1
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	440b      	add	r3, r1
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	1ad3      	subs	r3, r2, r3
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	2200      	movs	r2, #0
 8000c24:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000c26:	69b8      	ldr	r0, [r7, #24]
 8000c28:	f7ff fd78 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	2200      	movs	r2, #0
 8000c30:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	781b      	ldrb	r3, [r3, #0]
 8000c36:	3301      	adds	r3, #1
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	68bb      	ldr	r3, [r7, #8]
 8000c3c:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000c3e:	e7ff      	b.n	8000c40 <Player_Reading_Card_Monster_Battle+0x144>
 8000c40:	bf00      	nop
 8000c42:	3728      	adds	r7, #40	; 0x28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	aaaaaaab 	.word	0xaaaaaaab

08000c4c <Player_Reading_Card_Trap>:

void Player_Reading_Card_Trap(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b08a      	sub	sp, #40	; 0x28
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	3328      	adds	r3, #40	; 0x28
 8000c5c:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	881b      	ldrh	r3, [r3, #0]
 8000c62:	461a      	mov	r2, r3
 8000c64:	2358      	movs	r3, #88	; 0x58
 8000c66:	fb02 f303 	mul.w	r3, r2, r3
 8000c6a:	3328      	adds	r3, #40	; 0x28
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	4413      	add	r3, r2
 8000c70:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c72:	69bb      	ldr	r3, [r7, #24]
 8000c74:	3318      	adds	r3, #24
 8000c76:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c7e:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	3308      	adds	r3, #8
 8000c84:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	78db      	ldrb	r3, [r3, #3]
 8000c90:	2b01      	cmp	r3, #1
 8000c92:	f040 8088 	bne.w	8000da6 <Player_Reading_Card_Trap+0x15a>
	{


		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c96:	2300      	movs	r3, #0
 8000c98:	61fb      	str	r3, [r7, #28]
 8000c9a:	e017      	b.n	8000ccc <Player_Reading_Card_Trap+0x80>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 3
 8000c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	68db      	ldr	r3, [r3, #12]
 8000ca4:	429a      	cmp	r2, r3
 8000ca6:	d10b      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
 8000ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000caa:	785b      	ldrb	r3, [r3, #1]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <Player_Reading_Card_Trap+0x74>
					&&ptrYugiohCard_played->actionPoint_Eff > 0) {
 8000cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb2:	7a5b      	ldrb	r3, [r3, #9]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	d003      	beq.n	8000cc0 <Player_Reading_Card_Trap+0x74>
				flag_played = 0;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000cbe:	e008      	b.n	8000cd2 <Player_Reading_Card_Trap+0x86>
			}
			ptrYugiohCard_played++;
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	3310      	adds	r3, #16
 8000cc4:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < 6; ++i) {
 8000cc6:	69fb      	ldr	r3, [r7, #28]
 8000cc8:	3301      	adds	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	2b05      	cmp	r3, #5
 8000cd0:	dde4      	ble.n	8000c9c <Player_Reading_Card_Trap+0x50>
		}

		if (player->turn == first && flag_played == 0) {
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d12f      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>
 8000cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d12b      	bne.n	8000d3c <Player_Reading_Card_Trap+0xf0>

			if (ptrYugiohCard_src->standPosition < 6)
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	799b      	ldrb	r3, [r3, #6]
 8000ce8:	2b05      	cmp	r3, #5
 8000cea:	d85c      	bhi.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f000 fc20 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000cf2:	6939      	ldr	r1, [r7, #16]
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	f7ff fcc5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000cfa:	693b      	ldr	r3, [r7, #16]
 8000cfc:	799a      	ldrb	r2, [r3, #6]
 8000cfe:	4b2c      	ldr	r3, [pc, #176]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d00:	fba3 1302 	umull	r1, r3, r3, r2
 8000d04:	0899      	lsrs	r1, r3, #2
 8000d06:	460b      	mov	r3, r1
 8000d08:	005b      	lsls	r3, r3, #1
 8000d0a:	440b      	add	r3, r1
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	1ad3      	subs	r3, r2, r3
 8000d10:	b2da      	uxtb	r2, r3
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d16:	693b      	ldr	r3, [r7, #16]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	2200      	movs	r2, #0
 8000d20:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d22:	69b8      	ldr	r0, [r7, #24]
 8000d24:	f7ff fcfa 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d28:	69bb      	ldr	r3, [r7, #24]
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d2e:	68bb      	ldr	r3, [r7, #8]
 8000d30:	781b      	ldrb	r3, [r3, #0]
 8000d32:	3301      	adds	r3, #1
 8000d34:	b2da      	uxtb	r2, r3
 8000d36:	68bb      	ldr	r3, [r7, #8]
 8000d38:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d3a:	e034      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d12f      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000d46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d12b      	bne.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	799b      	ldrb	r3, [r3, #6]
 8000d52:	2b05      	cmp	r3, #5
 8000d54:	d927      	bls.n	8000da6 <Player_Reading_Card_Trap+0x15a>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f000 fbeb 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d5c:	6939      	ldr	r1, [r7, #16]
 8000d5e:	6978      	ldr	r0, [r7, #20]
 8000d60:	f7ff fc90 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	799a      	ldrb	r2, [r3, #6]
 8000d68:	4b11      	ldr	r3, [pc, #68]	; (8000db0 <Player_Reading_Card_Trap+0x164>)
 8000d6a:	fba3 1302 	umull	r1, r3, r3, r2
 8000d6e:	0899      	lsrs	r1, r3, #2
 8000d70:	460b      	mov	r3, r1
 8000d72:	005b      	lsls	r3, r3, #1
 8000d74:	440b      	add	r3, r1
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	b2da      	uxtb	r2, r3
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	2200      	movs	r2, #0
 8000d84:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 0;
 8000d86:	693b      	ldr	r3, [r7, #16]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d8c:	69b8      	ldr	r0, [r7, #24]
 8000d8e:	f7ff fcc5 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d92:	69bb      	ldr	r3, [r7, #24]
 8000d94:	2200      	movs	r2, #0
 8000d96:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	3301      	adds	r3, #1
 8000d9e:	b2da      	uxtb	r2, r3
 8000da0:	68bb      	ldr	r3, [r7, #8]
 8000da2:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000da4:	e7ff      	b.n	8000da6 <Player_Reading_Card_Trap+0x15a>
 8000da6:	bf00      	nop
 8000da8:	3728      	adds	r7, #40	; 0x28
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	aaaaaaab 	.word	0xaaaaaaab

08000db4 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b08a      	sub	sp, #40	; 0x28
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	60f8      	str	r0, [r7, #12]
 8000dbc:	60b9      	str	r1, [r7, #8]
 8000dbe:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	3328      	adds	r3, #40	; 0x28
 8000dc4:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	461a      	mov	r2, r3
 8000dcc:	2358      	movs	r3, #88	; 0x58
 8000dce:	fb02 f303 	mul.w	r3, r2, r3
 8000dd2:	3328      	adds	r3, #40	; 0x28
 8000dd4:	68fa      	ldr	r2, [r7, #12]
 8000dd6:	4413      	add	r3, r2
 8000dd8:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000dda:	6a3b      	ldr	r3, [r7, #32]
 8000ddc:	3318      	adds	r3, #24
 8000dde:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000de6:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	3308      	adds	r3, #8
 8000dec:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 8000df4:	23ff      	movs	r3, #255	; 0xff
 8000df6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 8000df8:	6a3b      	ldr	r3, [r7, #32]
 8000dfa:	78db      	ldrb	r3, [r3, #3]
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d17d      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	799b      	ldrb	r3, [r3, #6]
 8000e04:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	3308      	adds	r3, #8
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	4413      	add	r3, r2
 8000e10:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	68db      	ldr	r3, [r3, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d006      	beq.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	789b      	ldrb	r3, [r3, #2]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d102      	bne.n	8000e28 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 8000e22:	2300      	movs	r3, #0
 8000e24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d12f      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>
 8000e32:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d12b      	bne.n	8000e92 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	799b      	ldrb	r3, [r3, #6]
 8000e3e:	2b05      	cmp	r3, #5
 8000e40:	d85c      	bhi.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 fb75 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000e48:	69b9      	ldr	r1, [r7, #24]
 8000e4a:	69f8      	ldr	r0, [r7, #28]
 8000e4c:	f7ff fc1a 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	799a      	ldrb	r2, [r3, #6]
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000e56:	fba3 1302 	umull	r1, r3, r3, r2
 8000e5a:	0899      	lsrs	r1, r3, #2
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	440b      	add	r3, r1
 8000e62:	005b      	lsls	r3, r3, #1
 8000e64:	1ad3      	subs	r3, r2, r3
 8000e66:	b2da      	uxtb	r2, r3
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000e6c:	69bb      	ldr	r3, [r7, #24]
 8000e6e:	2200      	movs	r2, #0
 8000e70:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000e72:	69bb      	ldr	r3, [r7, #24]
 8000e74:	2201      	movs	r2, #1
 8000e76:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000e78:	6a38      	ldr	r0, [r7, #32]
 8000e7a:	f7ff fc4f 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000e7e:	6a3b      	ldr	r3, [r7, #32]
 8000e80:	2200      	movs	r2, #0
 8000e82:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000e90:	e034      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000e98:	2b01      	cmp	r3, #1
 8000e9a:	d12f      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d12b      	bne.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	799b      	ldrb	r3, [r3, #6]
 8000ea8:	2b05      	cmp	r3, #5
 8000eaa:	d927      	bls.n	8000efc <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000eac:	6878      	ldr	r0, [r7, #4]
 8000eae:	f000 fb40 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000eb2:	69b9      	ldr	r1, [r7, #24]
 8000eb4:	69f8      	ldr	r0, [r7, #28]
 8000eb6:	f7ff fbe5 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000eba:	69bb      	ldr	r3, [r7, #24]
 8000ebc:	799a      	ldrb	r2, [r3, #6]
 8000ebe:	4b11      	ldr	r3, [pc, #68]	; (8000f04 <Player_Reading_Card_Stopdef+0x150>)
 8000ec0:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec4:	0899      	lsrs	r1, r3, #2
 8000ec6:	460b      	mov	r3, r1
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	440b      	add	r3, r1
 8000ecc:	005b      	lsls	r3, r3, #1
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	b2da      	uxtb	r2, r3
 8000ed2:	69bb      	ldr	r3, [r7, #24]
 8000ed4:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2201      	movs	r2, #1
 8000ee0:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000ee2:	6a38      	ldr	r0, [r7, #32]
 8000ee4:	f7ff fc1a 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000ee8:	6a3b      	ldr	r3, [r7, #32]
 8000eea:	2200      	movs	r2, #0
 8000eec:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000eee:	68bb      	ldr	r3, [r7, #8]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	b2da      	uxtb	r2, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000efa:	e7ff      	b.n	8000efc <Player_Reading_Card_Stopdef+0x148>
 8000efc:	bf00      	nop
 8000efe:	3728      	adds	r7, #40	; 0x28
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	aaaaaaab 	.word	0xaaaaaaab

08000f08 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	3328      	adds	r3, #40	; 0x28
 8000f18:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	881b      	ldrh	r3, [r3, #0]
 8000f1e:	461a      	mov	r2, r3
 8000f20:	2358      	movs	r3, #88	; 0x58
 8000f22:	fb02 f303 	mul.w	r3, r2, r3
 8000f26:	3328      	adds	r3, #40	; 0x28
 8000f28:	68fa      	ldr	r2, [r7, #12]
 8000f2a:	4413      	add	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000f2e:	69bb      	ldr	r3, [r7, #24]
 8000f30:	3318      	adds	r3, #24
 8000f32:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000f3a:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	3308      	adds	r3, #8
 8000f40:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000f48:	69bb      	ldr	r3, [r7, #24]
 8000f4a:	78db      	ldrb	r3, [r3, #3]
 8000f4c:	2b01      	cmp	r3, #1
 8000f4e:	f040 8083 	bne.w	8001058 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3368      	adds	r3, #104	; 0x68
 8000f56:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
 8000f5c:	e00f      	b.n	8000f7e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	68db      	ldr	r3, [r3, #12]
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d103      	bne.n	8000f72 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000f70:	e008      	b.n	8000f84 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	3310      	adds	r3, #16
 8000f76:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	61fb      	str	r3, [r7, #28]
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	2b13      	cmp	r3, #19
 8000f82:	ddec      	ble.n	8000f5e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d12f      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>
 8000f8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d12b      	bne.n	8000fee <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f96:	697b      	ldr	r3, [r7, #20]
 8000f98:	799b      	ldrb	r3, [r3, #6]
 8000f9a:	2b05      	cmp	r3, #5
 8000f9c:	d85c      	bhi.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 fac7 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000fa4:	6939      	ldr	r1, [r7, #16]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff fb6c 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	799a      	ldrb	r2, [r3, #6]
 8000fb0:	4b2b      	ldr	r3, [pc, #172]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 8000fb2:	fba3 1302 	umull	r1, r3, r3, r2
 8000fb6:	0899      	lsrs	r1, r3, #2
 8000fb8:	460b      	mov	r3, r1
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	440b      	add	r3, r1
 8000fbe:	005b      	lsls	r3, r3, #1
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	2200      	movs	r2, #0
 8000fcc:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fd4:	69b8      	ldr	r0, [r7, #24]
 8000fd6:	f7ff fba1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	2200      	movs	r2, #0
 8000fde:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fe0:	68bb      	ldr	r3, [r7, #8]
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	3301      	adds	r3, #1
 8000fe6:	b2da      	uxtb	r2, r3
 8000fe8:	68bb      	ldr	r3, [r7, #8]
 8000fea:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000fec:	e034      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ff4:	2b01      	cmp	r3, #1
 8000ff6:	d12f      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8000ff8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d12b      	bne.n	8001058 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8001000:	697b      	ldr	r3, [r7, #20]
 8001002:	799b      	ldrb	r3, [r3, #6]
 8001004:	2b05      	cmp	r3, #5
 8001006:	d927      	bls.n	8001058 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f000 fa92 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800100e:	6939      	ldr	r1, [r7, #16]
 8001010:	6978      	ldr	r0, [r7, #20]
 8001012:	f7ff fb37 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	799a      	ldrb	r2, [r3, #6]
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <Player_Reading_Card_Reborn+0x158>)
 800101c:	fba3 1302 	umull	r1, r3, r3, r2
 8001020:	0899      	lsrs	r1, r3, #2
 8001022:	460b      	mov	r3, r1
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	440b      	add	r3, r1
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	b2da      	uxtb	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	2201      	movs	r2, #1
 800103c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800103e:	69b8      	ldr	r0, [r7, #24]
 8001040:	f7ff fb6c 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001044:	69bb      	ldr	r3, [r7, #24]
 8001046:	2200      	movs	r2, #0
 8001048:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	b2da      	uxtb	r2, r3
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001056:	e7ff      	b.n	8001058 <Player_Reading_Card_Reborn+0x150>
 8001058:	bf00      	nop
 800105a:	3728      	adds	r7, #40	; 0x28
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	aaaaaaab 	.word	0xaaaaaaab

08001064 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b08c      	sub	sp, #48	; 0x30
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	3328      	adds	r3, #40	; 0x28
 8001074:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	881b      	ldrh	r3, [r3, #0]
 800107a:	461a      	mov	r2, r3
 800107c:	2358      	movs	r3, #88	; 0x58
 800107e:	fb02 f303 	mul.w	r3, r2, r3
 8001082:	3328      	adds	r3, #40	; 0x28
 8001084:	68fa      	ldr	r2, [r7, #12]
 8001086:	4413      	add	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800108a:	69bb      	ldr	r3, [r7, #24]
 800108c:	3318      	adds	r3, #24
 800108e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001096:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3308      	adds	r3, #8
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 800109e:	2300      	movs	r3, #0
 80010a0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 80010a4:	69bb      	ldr	r3, [r7, #24]
 80010a6:	78db      	ldrb	r3, [r3, #3]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	f040 80cb 	bne.w	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
 80010b2:	e013      	b.n	80010dc <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80010b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010b6:	68da      	ldr	r2, [r3, #12]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	68db      	ldr	r3, [r3, #12]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d107      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	785b      	ldrb	r3, [r3, #1]
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d103      	bne.n	80010d0 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 80010c8:	2301      	movs	r3, #1
 80010ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80010ce:	e008      	b.n	80010e2 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 80010d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010d2:	3310      	adds	r3, #16
 80010d4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80010d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010d8:	3301      	adds	r3, #1
 80010da:	627b      	str	r3, [r7, #36]	; 0x24
 80010dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010de:	2b05      	cmp	r3, #5
 80010e0:	dde8      	ble.n	80010b4 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010e8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80010ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010ec:	68da      	ldr	r2, [r3, #12]
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	68db      	ldr	r3, [r3, #12]
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d102      	bne.n	80010fc <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 80010f6:	2301      	movs	r3, #1
 80010f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	3368      	adds	r3, #104	; 0x68
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001102:	2300      	movs	r3, #0
 8001104:	623b      	str	r3, [r7, #32]
 8001106:	e00f      	b.n	8001128 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8001108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800110a:	68da      	ldr	r2, [r3, #12]
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	429a      	cmp	r2, r3
 8001112:	d103      	bne.n	800111c <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8001114:	2301      	movs	r3, #1
 8001116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800111a:	e008      	b.n	800112e <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 800111c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800111e:	3310      	adds	r3, #16
 8001120:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001122:	6a3b      	ldr	r3, [r7, #32]
 8001124:	3301      	adds	r3, #1
 8001126:	623b      	str	r3, [r7, #32]
 8001128:	6a3b      	ldr	r3, [r7, #32]
 800112a:	2b13      	cmp	r3, #19
 800112c:	ddec      	ble.n	8001108 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
 800113a:	e00f      	b.n	800115c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800113c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800113e:	68da      	ldr	r2, [r3, #12]
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	429a      	cmp	r2, r3
 8001146:	d103      	bne.n	8001150 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8001148:	2301      	movs	r3, #1
 800114a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800114e:	e008      	b.n	8001162 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8001150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001152:	3310      	adds	r3, #16
 8001154:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3301      	adds	r3, #1
 800115a:	61fb      	str	r3, [r7, #28]
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	2b04      	cmp	r3, #4
 8001160:	ddec      	ble.n	800113c <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8001162:	697b      	ldr	r3, [r7, #20]
 8001164:	78db      	ldrb	r3, [r3, #3]
 8001166:	2b05      	cmp	r3, #5
 8001168:	d902      	bls.n	8001170 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8001176:	2b00      	cmp	r3, #0
 8001178:	d12f      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>
 800117a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800117e:	2b00      	cmp	r3, #0
 8001180:	d12b      	bne.n	80011da <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	799b      	ldrb	r3, [r3, #6]
 8001186:	2b05      	cmp	r3, #5
 8001188:	d85c      	bhi.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f000 f9d1 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001190:	6939      	ldr	r1, [r7, #16]
 8001192:	6978      	ldr	r0, [r7, #20]
 8001194:	f7ff fa76 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	799a      	ldrb	r2, [r3, #6]
 800119c:	4b2b      	ldr	r3, [pc, #172]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 800119e:	fba3 1302 	umull	r1, r3, r3, r2
 80011a2:	0899      	lsrs	r1, r3, #2
 80011a4:	460b      	mov	r3, r1
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	440b      	add	r3, r1
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	b2da      	uxtb	r2, r3
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	2200      	movs	r2, #0
 80011b8:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	2201      	movs	r2, #1
 80011be:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80011c0:	69b8      	ldr	r0, [r7, #24]
 80011c2:	f7ff faab 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80011c6:	69bb      	ldr	r3, [r7, #24]
 80011c8:	2200      	movs	r2, #0
 80011ca:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	3301      	adds	r3, #1
 80011d2:	b2da      	uxtb	r2, r3
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80011d8:	e034      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80011e0:	2b01      	cmp	r3, #1
 80011e2:	d12f      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 80011e4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d12b      	bne.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	799b      	ldrb	r3, [r3, #6]
 80011f0:	2b05      	cmp	r3, #5
 80011f2:	d927      	bls.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f000 f99c 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80011fa:	6939      	ldr	r1, [r7, #16]
 80011fc:	6978      	ldr	r0, [r7, #20]
 80011fe:	f7ff fa41 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	799a      	ldrb	r2, [r3, #6]
 8001206:	4b11      	ldr	r3, [pc, #68]	; (800124c <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8001208:	fba3 1302 	umull	r1, r3, r3, r2
 800120c:	0899      	lsrs	r1, r3, #2
 800120e:	460b      	mov	r3, r1
 8001210:	005b      	lsls	r3, r3, #1
 8001212:	440b      	add	r3, r1
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	b2da      	uxtb	r2, r3
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	2200      	movs	r2, #0
 8001222:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001224:	693b      	ldr	r3, [r7, #16]
 8001226:	2201      	movs	r2, #1
 8001228:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800122a:	69b8      	ldr	r0, [r7, #24]
 800122c:	f7ff fa76 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001230:	69bb      	ldr	r3, [r7, #24]
 8001232:	2200      	movs	r2, #0
 8001234:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	3301      	adds	r3, #1
 800123c:	b2da      	uxtb	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001242:	e7ff      	b.n	8001244 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8001244:	bf00      	nop
 8001246:	3730      	adds	r7, #48	; 0x30
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	aaaaaaab 	.word	0xaaaaaaab

08001250 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	3328      	adds	r3, #40	; 0x28
 8001260:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	881b      	ldrh	r3, [r3, #0]
 8001266:	461a      	mov	r2, r3
 8001268:	2358      	movs	r3, #88	; 0x58
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	3328      	adds	r3, #40	; 0x28
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	4413      	add	r3, r2
 8001274:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	3318      	adds	r3, #24
 800127a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001282:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	3308      	adds	r3, #8
 8001288:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 800128a:	2301      	movs	r3, #1
 800128c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8001290:	69bb      	ldr	r3, [r7, #24]
 8001292:	78db      	ldrb	r3, [r3, #3]
 8001294:	2b01      	cmp	r3, #1
 8001296:	f040 80c7 	bne.w	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
 800129e:	e00f      	b.n	80012c0 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012a2:	68da      	ldr	r2, [r3, #12]
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	68db      	ldr	r3, [r3, #12]
 80012a8:	429a      	cmp	r2, r3
 80012aa:	d103      	bne.n	80012b4 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 80012ac:	2301      	movs	r3, #1
 80012ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 80012b2:	e008      	b.n	80012c6 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 80012b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b6:	3310      	adds	r3, #16
 80012b8:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 80012ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012bc:	3301      	adds	r3, #1
 80012be:	627b      	str	r3, [r7, #36]	; 0x24
 80012c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012c2:	2b05      	cmp	r3, #5
 80012c4:	ddec      	ble.n	80012a0 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2b03      	cmp	r3, #3
 80012cc:	d102      	bne.n	80012d4 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 80012ce:	2300      	movs	r3, #0
 80012d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012da:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	68db      	ldr	r3, [r3, #12]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d102      	bne.n	80012ee <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 80012e8:	2301      	movs	r3, #1
 80012ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	3368      	adds	r3, #104	; 0x68
 80012f2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
 80012f8:	e00f      	b.n	800131a <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	68da      	ldr	r2, [r3, #12]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	429a      	cmp	r2, r3
 8001304:	d103      	bne.n	800130e <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8001306:	2301      	movs	r3, #1
 8001308:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 800130c:	e008      	b.n	8001320 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 800130e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001310:	3310      	adds	r3, #16
 8001312:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8001314:	6a3b      	ldr	r3, [r7, #32]
 8001316:	3301      	adds	r3, #1
 8001318:	623b      	str	r3, [r7, #32]
 800131a:	6a3b      	ldr	r3, [r7, #32]
 800131c:	2b13      	cmp	r3, #19
 800131e:	ddec      	ble.n	80012fa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
 800132c:	e00f      	b.n	800134e <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800132e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001330:	68da      	ldr	r2, [r3, #12]
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	68db      	ldr	r3, [r3, #12]
 8001336:	429a      	cmp	r2, r3
 8001338:	d103      	bne.n	8001342 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 800133a:	2301      	movs	r3, #1
 800133c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8001340:	e008      	b.n	8001354 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8001342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001344:	3310      	adds	r3, #16
 8001346:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	3301      	adds	r3, #1
 800134c:	61fb      	str	r3, [r7, #28]
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	2b04      	cmp	r3, #4
 8001352:	ddec      	ble.n	800132e <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 800135a:	2b00      	cmp	r3, #0
 800135c:	d12f      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>
 800135e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001362:	2b00      	cmp	r3, #0
 8001364:	d12b      	bne.n	80013be <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	799b      	ldrb	r3, [r3, #6]
 800136a:	2b05      	cmp	r3, #5
 800136c:	d85c      	bhi.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 800136e:	6878      	ldr	r0, [r7, #4]
 8001370:	f000 f8df 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001374:	6939      	ldr	r1, [r7, #16]
 8001376:	6978      	ldr	r0, [r7, #20]
 8001378:	f7ff f984 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	799a      	ldrb	r2, [r3, #6]
 8001380:	4b2b      	ldr	r3, [pc, #172]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8001382:	fba3 1302 	umull	r1, r3, r3, r2
 8001386:	0899      	lsrs	r1, r3, #2
 8001388:	460b      	mov	r3, r1
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	440b      	add	r3, r1
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	b2da      	uxtb	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	2200      	movs	r2, #0
 800139c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	2201      	movs	r2, #1
 80013a2:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 80013a4:	69b8      	ldr	r0, [r7, #24]
 80013a6:	f7ff f9b9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	2200      	movs	r2, #0
 80013ae:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	3301      	adds	r3, #1
 80013b6:	b2da      	uxtb	r2, r3
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 80013bc:	e034      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d12f      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 80013c8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d12b      	bne.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	799b      	ldrb	r3, [r3, #6]
 80013d4:	2b05      	cmp	r3, #5
 80013d6:	d927      	bls.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f000 f8aa 	bl	8001532 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80013de:	6939      	ldr	r1, [r7, #16]
 80013e0:	6978      	ldr	r0, [r7, #20]
 80013e2:	f7ff f94f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80013e6:	693b      	ldr	r3, [r7, #16]
 80013e8:	799a      	ldrb	r2, [r3, #6]
 80013ea:	4b11      	ldr	r3, [pc, #68]	; (8001430 <Player_Reading_Card_Monster_Effect+0x1e0>)
 80013ec:	fba3 1302 	umull	r1, r3, r3, r2
 80013f0:	0899      	lsrs	r1, r3, #2
 80013f2:	460b      	mov	r3, r1
 80013f4:	005b      	lsls	r3, r3, #1
 80013f6:	440b      	add	r3, r1
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	2200      	movs	r2, #0
 8001406:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	2201      	movs	r2, #1
 800140c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800140e:	69b8      	ldr	r0, [r7, #24]
 8001410:	f7ff f984 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8001414:	69bb      	ldr	r3, [r7, #24]
 8001416:	2200      	movs	r2, #0
 8001418:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	3301      	adds	r3, #1
 8001420:	b2da      	uxtb	r2, r3
 8001422:	68bb      	ldr	r3, [r7, #8]
 8001424:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8001426:	e7ff      	b.n	8001428 <Player_Reading_Card_Monster_Effect+0x1d8>
 8001428:	bf00      	nop
 800142a:	3730      	adds	r7, #48	; 0x30
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	aaaaaaab 	.word	0xaaaaaaab

08001434 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800143c:	f107 0308 	add.w	r3, r7, #8
 8001440:	2200      	movs	r2, #0
 8001442:	601a      	str	r2, [r3, #0]
 8001444:	605a      	str	r2, [r3, #4]
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001450:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001452:	2300      	movs	r3, #0
 8001454:	76fb      	strb	r3, [r7, #27]
 8001456:	e00b      	b.n	8001470 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	69f9      	ldr	r1, [r7, #28]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff f910 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	3310      	adds	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800146a:	7efb      	ldrb	r3, [r7, #27]
 800146c:	3301      	adds	r3, #1
 800146e:	76fb      	strb	r3, [r7, #27]
 8001470:	7efb      	ldrb	r3, [r7, #27]
 8001472:	2b05      	cmp	r3, #5
 8001474:	d9f0      	bls.n	8001458 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001476:	bf00      	nop
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}

08001480 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001480:	b580      	push	{r7, lr}
 8001482:	b088      	sub	sp, #32
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001488:	f107 0308 	add.w	r3, r7, #8
 800148c:	2200      	movs	r2, #0
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	605a      	str	r2, [r3, #4]
 8001492:	609a      	str	r2, [r3, #8]
 8001494:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800149c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800149e:	2300      	movs	r3, #0
 80014a0:	76fb      	strb	r3, [r7, #27]
 80014a2:	e00b      	b.n	80014bc <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014a4:	f107 0308 	add.w	r3, r7, #8
 80014a8:	69f9      	ldr	r1, [r7, #28]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff f8ea 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014b0:	69fb      	ldr	r3, [r7, #28]
 80014b2:	3310      	adds	r3, #16
 80014b4:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80014b6:	7efb      	ldrb	r3, [r7, #27]
 80014b8:	3301      	adds	r3, #1
 80014ba:	76fb      	strb	r3, [r7, #27]
 80014bc:	7efb      	ldrb	r3, [r7, #27]
 80014be:	2b05      	cmp	r3, #5
 80014c0:	d9f0      	bls.n	80014a4 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3368      	adds	r3, #104	; 0x68
 80014c6:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014c8:	2300      	movs	r3, #0
 80014ca:	76bb      	strb	r3, [r7, #26]
 80014cc:	e00b      	b.n	80014e6 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014ce:	f107 0308 	add.w	r3, r7, #8
 80014d2:	69f9      	ldr	r1, [r7, #28]
 80014d4:	4618      	mov	r0, r3
 80014d6:	f7ff f8d5 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	3310      	adds	r3, #16
 80014de:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 80014e0:	7ebb      	ldrb	r3, [r7, #26]
 80014e2:	3301      	adds	r3, #1
 80014e4:	76bb      	strb	r3, [r7, #26]
 80014e6:	7ebb      	ldrb	r3, [r7, #26]
 80014e8:	2b13      	cmp	r3, #19
 80014ea:	d9f0      	bls.n	80014ce <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	3308      	adds	r3, #8
 80014f0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80014f2:	2300      	movs	r3, #0
 80014f4:	767b      	strb	r3, [r7, #25]
 80014f6:	e00b      	b.n	8001510 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80014f8:	f107 0308 	add.w	r3, r7, #8
 80014fc:	69f9      	ldr	r1, [r7, #28]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff f8c0 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001504:	69fb      	ldr	r3, [r7, #28]
 8001506:	3310      	adds	r3, #16
 8001508:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 800150a:	7e7b      	ldrb	r3, [r7, #25]
 800150c:	3301      	adds	r3, #1
 800150e:	767b      	strb	r3, [r7, #25]
 8001510:	7e7b      	ldrb	r3, [r7, #25]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9f0      	bls.n	80014f8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800151c:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	69f9      	ldr	r1, [r7, #28]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff f8ad 	bl	8000684 <YUGIOH_card_copy>
}
 800152a:	bf00      	nop
 800152c:	3720      	adds	r7, #32
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8001532:	b580      	push	{r7, lr}
 8001534:	b086      	sub	sp, #24
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001540:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8001548:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001550:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001558:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800155a:	2306      	movs	r3, #6
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	e00c      	b.n	800157a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001560:	6939      	ldr	r1, [r7, #16]
 8001562:	6978      	ldr	r0, [r7, #20]
 8001564:	f7ff f88e 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	3b10      	subs	r3, #16
 800156c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800156e:	693b      	ldr	r3, [r7, #16]
 8001570:	3b10      	subs	r3, #16
 8001572:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	3b01      	subs	r3, #1
 8001578:	60fb      	str	r3, [r7, #12]
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	2b00      	cmp	r3, #0
 800157e:	dcef      	bgt.n	8001560 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001580:	bf00      	nop
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b086      	sub	sp, #24
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001598:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80015a0:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f203 4384 	addw	r3, r3, #1156	; 0x484
 80015a8:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	f203 4394 	addw	r3, r3, #1172	; 0x494
 80015b0:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80015b2:	2306      	movs	r3, #6
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e02c      	b.n	8001612 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80015b8:	6939      	ldr	r1, [r7, #16]
 80015ba:	6978      	ldr	r0, [r7, #20]
 80015bc:	f7ff f862 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	3b02      	subs	r3, #2
 80015c4:	68fa      	ldr	r2, [r7, #12]
 80015c6:	1e50      	subs	r0, r2, #1
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	4413      	add	r3, r2
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	f500 7394 	add.w	r3, r0, #296	; 0x128
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	440b      	add	r3, r1
 80015de:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	3b02      	subs	r3, #2
 80015e4:	68fa      	ldr	r2, [r7, #12]
 80015e6:	1e50      	subs	r0, r2, #1
 80015e8:	687a      	ldr	r2, [r7, #4]
 80015ea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	440b      	add	r3, r1
 80015fe:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	3b10      	subs	r3, #16
 8001604:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	3b10      	subs	r3, #16
 800160a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	3b01      	subs	r3, #1
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	2b00      	cmp	r3, #0
 8001616:	dccf      	bgt.n	80015b8 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 8001618:	bf00      	nop
 800161a:	bf00      	nop
 800161c:	3718      	adds	r7, #24
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}

08001622 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 8001622:	b580      	push	{r7, lr}
 8001624:	b08a      	sub	sp, #40	; 0x28
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 800162c:	f107 030c 	add.w	r3, r7, #12
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	3368      	adds	r3, #104	; 0x68
 800163e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3368      	adds	r3, #104	; 0x68
 800164c:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001654:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001656:	2314      	movs	r3, #20
 8001658:	61fb      	str	r3, [r7, #28]
 800165a:	e00c      	b.n	8001676 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800165c:	6a39      	ldr	r1, [r7, #32]
 800165e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001660:	f7ff f810 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	3b10      	subs	r3, #16
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	3b10      	subs	r3, #16
 800166e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001670:	69fb      	ldr	r3, [r7, #28]
 8001672:	3b01      	subs	r3, #1
 8001674:	61fb      	str	r3, [r7, #28]
 8001676:	69fb      	ldr	r3, [r7, #28]
 8001678:	2b00      	cmp	r3, #0
 800167a:	dcef      	bgt.n	800165c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	3368      	adds	r3, #104	; 0x68
 8001684:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001686:	6a39      	ldr	r1, [r7, #32]
 8001688:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800168a:	f7fe fffb 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001696:	6a38      	ldr	r0, [r7, #32]
 8001698:	f7fe fff4 	bl	8000684 <YUGIOH_card_copy>

}
 800169c:	bf00      	nop
 800169e:	3728      	adds	r7, #40	; 0x28
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b084      	sub	sp, #16
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	3338      	adds	r3, #56	; 0x38
 80016b0:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016b2:	2300      	movs	r3, #0
 80016b4:	72fb      	strb	r3, [r7, #11]
 80016b6:	e00d      	b.n	80016d4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d003      	beq.n	80016c8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 80016c0:	68f9      	ldr	r1, [r7, #12]
 80016c2:	6878      	ldr	r0, [r7, #4]
 80016c4:	f7ff ffad 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	3310      	adds	r3, #16
 80016cc:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	3301      	adds	r3, #1
 80016d2:	72fb      	strb	r3, [r7, #11]
 80016d4:	7afb      	ldrb	r3, [r7, #11]
 80016d6:	2b02      	cmp	r3, #2
 80016d8:	d9ee      	bls.n	80016b8 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 80016da:	bf00      	nop
 80016dc:	bf00      	nop
 80016de:	3710      	adds	r7, #16
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	3308      	adds	r3, #8
 80016f2:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	3338      	adds	r3, #56	; 0x38
 80016f8:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	3308      	adds	r3, #8
 80016fe:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	3338      	adds	r3, #56	; 0x38
 8001704:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001706:	2300      	movs	r3, #0
 8001708:	73fb      	strb	r3, [r7, #15]
 800170a:	e00d      	b.n	8001728 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d003      	beq.n	800171c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8001714:	6979      	ldr	r1, [r7, #20]
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f7ff ff83 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3310      	adds	r3, #16
 8001720:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001722:	7bfb      	ldrb	r3, [r7, #15]
 8001724:	3301      	adds	r3, #1
 8001726:	73fb      	strb	r3, [r7, #15]
 8001728:	7bfb      	ldrb	r3, [r7, #15]
 800172a:	2b02      	cmp	r3, #2
 800172c:	d9ee      	bls.n	800170c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800172e:	2300      	movs	r3, #0
 8001730:	73bb      	strb	r3, [r7, #14]
 8001732:	e00d      	b.n	8001750 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 800173c:	6939      	ldr	r1, [r7, #16]
 800173e:	6838      	ldr	r0, [r7, #0]
 8001740:	f7ff ff6f 	bl	8001622 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	3310      	adds	r3, #16
 8001748:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800174a:	7bbb      	ldrb	r3, [r7, #14]
 800174c:	3301      	adds	r3, #1
 800174e:	73bb      	strb	r3, [r7, #14]
 8001750:	7bbb      	ldrb	r3, [r7, #14]
 8001752:	2b02      	cmp	r3, #2
 8001754:	d9ee      	bls.n	8001734 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8001756:	bf00      	nop
 8001758:	bf00      	nop
 800175a:	3718      	adds	r7, #24
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8001760:	b580      	push	{r7, lr}
 8001762:	b088      	sub	sp, #32
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 800176c:	2300      	movs	r3, #0
 800176e:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001776:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	3368      	adds	r3, #104	; 0x68
 800177c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	3368      	adds	r3, #104	; 0x68
 8001782:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8001784:	2300      	movs	r3, #0
 8001786:	74fb      	strb	r3, [r7, #19]
 8001788:	e010      	b.n	80017ac <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	68da      	ldr	r2, [r3, #12]
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	429a      	cmp	r2, r3
 8001794:	d104      	bne.n	80017a0 <YUGIOH_Reborn+0x40>
			flag = 1;
 8001796:	2301      	movs	r3, #1
 8001798:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 800179a:	7cfb      	ldrb	r3, [r7, #19]
 800179c:	77bb      	strb	r3, [r7, #30]
			break;
 800179e:	e008      	b.n	80017b2 <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3310      	adds	r3, #16
 80017a4:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 80017a6:	7cfb      	ldrb	r3, [r7, #19]
 80017a8:	3301      	adds	r3, #1
 80017aa:	74fb      	strb	r3, [r7, #19]
 80017ac:	7cfb      	ldrb	r3, [r7, #19]
 80017ae:	2b13      	cmp	r3, #19
 80017b0:	d9eb      	bls.n	800178a <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	3338      	adds	r3, #56	; 0x38
 80017b6:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 80017b8:	7ffb      	ldrb	r3, [r7, #31]
 80017ba:	2b01      	cmp	r3, #1
 80017bc:	d134      	bne.n	8001828 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 80017be:	69bb      	ldr	r3, [r7, #24]
 80017c0:	799a      	ldrb	r2, [r3, #6]
 80017c2:	4b1b      	ldr	r3, [pc, #108]	; (8001830 <YUGIOH_Reborn+0xd0>)
 80017c4:	fba3 1302 	umull	r1, r3, r3, r2
 80017c8:	0899      	lsrs	r1, r3, #2
 80017ca:	460b      	mov	r3, r1
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	440b      	add	r3, r1
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 80017d6:	7afb      	ldrb	r3, [r7, #11]
 80017d8:	011b      	lsls	r3, r3, #4
 80017da:	3308      	adds	r3, #8
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	4619      	mov	r1, r3
 80017e2:	69b8      	ldr	r0, [r7, #24]
 80017e4:	f7fe ff4e 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 80017e8:	7fbb      	ldrb	r3, [r7, #30]
 80017ea:	3301      	adds	r3, #1
 80017ec:	011b      	lsls	r3, r3, #4
 80017ee:	3368      	adds	r3, #104	; 0x68
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	4413      	add	r3, r2
 80017f4:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 80017f6:	7fbb      	ldrb	r3, [r7, #30]
 80017f8:	011b      	lsls	r3, r3, #4
 80017fa:	3368      	adds	r3, #104	; 0x68
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8001802:	7fbb      	ldrb	r3, [r7, #30]
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	e00c      	b.n	8001822 <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001808:	6979      	ldr	r1, [r7, #20]
 800180a:	69b8      	ldr	r0, [r7, #24]
 800180c:	f7fe ff3a 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	3310      	adds	r3, #16
 8001814:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	3310      	adds	r3, #16
 800181a:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	3301      	adds	r3, #1
 8001820:	60fb      	str	r3, [r7, #12]
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	2b13      	cmp	r3, #19
 8001826:	ddef      	ble.n	8001808 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8001828:	bf00      	nop
 800182a:	3720      	adds	r7, #32
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	aaaaaaab 	.word	0xaaaaaaab

08001834 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001842:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800184a:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	799a      	ldrb	r2, [r3, #6]
 8001850:	4b0d      	ldr	r3, [pc, #52]	; (8001888 <YUGIOH_Ancient_Rules+0x54>)
 8001852:	fba3 1302 	umull	r1, r3, r3, r2
 8001856:	0899      	lsrs	r1, r3, #2
 8001858:	460b      	mov	r3, r1
 800185a:	005b      	lsls	r3, r3, #1
 800185c:	440b      	add	r3, r1
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3308      	adds	r3, #8
 8001868:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 800186a:	7cfb      	ldrb	r3, [r7, #19]
 800186c:	011b      	lsls	r3, r3, #4
 800186e:	3308      	adds	r3, #8
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	4413      	add	r3, r2
 8001874:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001876:	68f9      	ldr	r1, [r7, #12]
 8001878:	6978      	ldr	r0, [r7, #20]
 800187a:	f7fe ff03 	bl	8000684 <YUGIOH_card_copy>

}
 800187e:	bf00      	nop
 8001880:	3718      	adds	r7, #24
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	aaaaaaab 	.word	0xaaaaaaab

0800188c <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	3308      	adds	r3, #8
 800189a:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	3338      	adds	r3, #56	; 0x38
 80018a0:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 80018a2:	683b      	ldr	r3, [r7, #0]
 80018a4:	3308      	adds	r3, #8
 80018a6:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	3338      	adds	r3, #56	; 0x38
 80018ac:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 80018ae:	2300      	movs	r3, #0
 80018b0:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	73bb      	strb	r3, [r7, #14]
 80018b6:	e00c      	b.n	80018d2 <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	785b      	ldrb	r3, [r3, #1]
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d102      	bne.n	80018c6 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 80018c0:	7bfb      	ldrb	r3, [r7, #15]
 80018c2:	3301      	adds	r3, #1
 80018c4:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3310      	adds	r3, #16
 80018ca:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	3301      	adds	r3, #1
 80018d0:	73bb      	strb	r3, [r7, #14]
 80018d2:	7bbb      	ldrb	r3, [r7, #14]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d9ef      	bls.n	80018b8 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018d8:	2300      	movs	r3, #0
 80018da:	737b      	strb	r3, [r7, #13]
 80018dc:	e00c      	b.n	80018f8 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	785b      	ldrb	r3, [r3, #1]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d102      	bne.n	80018ec <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 80018e6:	7bfb      	ldrb	r3, [r7, #15]
 80018e8:	3301      	adds	r3, #1
 80018ea:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	3310      	adds	r3, #16
 80018f0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80018f2:	7b7b      	ldrb	r3, [r7, #13]
 80018f4:	3301      	adds	r3, #1
 80018f6:	737b      	strb	r3, [r7, #13]
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d9ef      	bls.n	80018de <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	889a      	ldrh	r2, [r3, #4]
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	b29b      	uxth	r3, r3
 8001906:	4619      	mov	r1, r3
 8001908:	0089      	lsls	r1, r1, #2
 800190a:	440b      	add	r3, r1
 800190c:	4619      	mov	r1, r3
 800190e:	0109      	lsls	r1, r1, #4
 8001910:	1acb      	subs	r3, r1, r3
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	b29b      	uxth	r3, r3
 8001916:	4413      	add	r3, r2
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	809a      	strh	r2, [r3, #4]

}
 800191e:	bf00      	nop
 8001920:	371c      	adds	r7, #28
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 800192c:	b480      	push	{r7}
 800192e:	b087      	sub	sp, #28
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
 8001934:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800193c:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001944:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	799a      	ldrb	r2, [r3, #6]
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <YUGIOH_Stop_Defense+0x68>)
 800194c:	fba3 1302 	umull	r1, r3, r3, r2
 8001950:	0899      	lsrs	r1, r3, #2
 8001952:	460b      	mov	r3, r1
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	440b      	add	r3, r1
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	3308      	adds	r3, #8
 8001962:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8001964:	7cfb      	ldrb	r3, [r7, #19]
 8001966:	011b      	lsls	r3, r3, #4
 8001968:	3308      	adds	r3, #8
 800196a:	683a      	ldr	r2, [r7, #0]
 800196c:	4413      	add	r3, r2
 800196e:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	789b      	ldrb	r3, [r3, #2]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d106      	bne.n	8001986 <YUGIOH_Stop_Defense+0x5a>
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d002      	beq.n	8001986 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	2201      	movs	r2, #1
 8001984:	709a      	strb	r2, [r3, #2]
	}

}
 8001986:	bf00      	nop
 8001988:	371c      	adds	r7, #28
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	aaaaaaab 	.word	0xaaaaaaab

08001998 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 8001998:	b480      	push	{r7}
 800199a:	b085      	sub	sp, #20
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	3308      	adds	r3, #8
 80019a6:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	e016      	b.n	80019dc <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d10a      	bne.n	80019d0 <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	7a5b      	ldrb	r3, [r3, #9]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d006      	beq.n	80019d0 <YUGIOH_Check_Trap_On_board+0x38>
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	785b      	ldrb	r3, [r3, #1]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d102      	bne.n	80019d0 <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	e009      	b.n	80019e4 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	3310      	adds	r3, #16
 80019d4:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80019d6:	68bb      	ldr	r3, [r7, #8]
 80019d8:	3301      	adds	r3, #1
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b02      	cmp	r3, #2
 80019e0:	dde5      	ble.n	80019ae <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 80019e2:	23ff      	movs	r3, #255	; 0xff
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	3714      	adds	r7, #20
 80019e8:	46bd      	mov	sp, r7
 80019ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ee:	4770      	bx	lr

080019f0 <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3308      	adds	r3, #8
 80019fe:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8001a00:	2300      	movs	r3, #0
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	e016      	b.n	8001a34 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	68da      	ldr	r2, [r3, #12]
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d10a      	bne.n	8001a28 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	7a5b      	ldrb	r3, [r3, #9]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d006      	beq.n	8001a28 <YUGIOH_Check_Spell_On_board+0x38>
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	785b      	ldrb	r3, [r3, #1]
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d102      	bne.n	8001a28 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	e009      	b.n	8001a3c <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	3310      	adds	r3, #16
 8001a2c:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	3301      	adds	r3, #1
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	dde5      	ble.n	8001a06 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8001a3a:	23ff      	movs	r3, #255	; 0xff
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3714      	adds	r7, #20
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr

08001a48 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3308      	adds	r3, #8
 8001a54:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a56:	2300      	movs	r3, #0
 8001a58:	60bb      	str	r3, [r7, #8]
 8001a5a:	e00c      	b.n	8001a76 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2201      	movs	r2, #1
 8001a68:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	3310      	adds	r3, #16
 8001a6e:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	3301      	adds	r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	ddef      	ble.n	8001a5c <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8001a7c:	bf00      	nop
 8001a7e:	bf00      	nop
 8001a80:	3714      	adds	r7, #20
 8001a82:	46bd      	mov	sp, r7
 8001a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a88:	4770      	bx	lr

08001a8a <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8001a8a:	b480      	push	{r7}
 8001a8c:	b085      	sub	sp, #20
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	3338      	adds	r3, #56	; 0x38
 8001a96:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001a98:	2303      	movs	r3, #3
 8001a9a:	60bb      	str	r3, [r7, #8]
 8001a9c:	e00c      	b.n	8001ab8 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	3310      	adds	r3, #16
 8001ab0:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8001ab2:	68bb      	ldr	r3, [r7, #8]
 8001ab4:	3301      	adds	r3, #1
 8001ab6:	60bb      	str	r3, [r7, #8]
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	ddef      	ble.n	8001a9e <YUGIOH_Monster_Activated+0x14>
	}
}
 8001abe:	bf00      	nop
 8001ac0:	bf00      	nop
 8001ac2:	3714      	adds	r7, #20
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr

08001acc <MainGUI>:
void MainGUI()
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001ad2:	4b55      	ldr	r3, [pc, #340]	; (8001c28 <MainGUI+0x15c>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	9202      	str	r2, [sp, #8]
 8001ad8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001adc:	9201      	str	r2, [sp, #4]
 8001ade:	685a      	ldr	r2, [r3, #4]
 8001ae0:	9200      	str	r2, [sp, #0]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <MainGUI+0x160>)
 8001ae6:	2105      	movs	r1, #5
 8001ae8:	2005      	movs	r0, #5
 8001aea:	f005 f82a 	bl	8006b42 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001aee:	4b4e      	ldr	r3, [pc, #312]	; (8001c28 <MainGUI+0x15c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	9202      	str	r2, [sp, #8]
 8001af4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001af8:	9201      	str	r2, [sp, #4]
 8001afa:	685a      	ldr	r2, [r3, #4]
 8001afc:	9200      	str	r2, [sp, #0]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a4b      	ldr	r2, [pc, #300]	; (8001c30 <MainGUI+0x164>)
 8001b02:	2114      	movs	r1, #20
 8001b04:	2005      	movs	r0, #5
 8001b06:	f005 f81c 	bl	8006b42 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b0a:	4b47      	ldr	r3, [pc, #284]	; (8001c28 <MainGUI+0x15c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	9202      	str	r2, [sp, #8]
 8001b10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b14:	9201      	str	r2, [sp, #4]
 8001b16:	685a      	ldr	r2, [r3, #4]
 8001b18:	9200      	str	r2, [sp, #0]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a45      	ldr	r2, [pc, #276]	; (8001c34 <MainGUI+0x168>)
 8001b1e:	2123      	movs	r1, #35	; 0x23
 8001b20:	2005      	movs	r0, #5
 8001b22:	f005 f80e 	bl	8006b42 <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b26:	4b40      	ldr	r3, [pc, #256]	; (8001c28 <MainGUI+0x15c>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	9202      	str	r2, [sp, #8]
 8001b2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b30:	9201      	str	r2, [sp, #4]
 8001b32:	685a      	ldr	r2, [r3, #4]
 8001b34:	9200      	str	r2, [sp, #0]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a3f      	ldr	r2, [pc, #252]	; (8001c38 <MainGUI+0x16c>)
 8001b3a:	2123      	movs	r1, #35	; 0x23
 8001b3c:	203c      	movs	r0, #60	; 0x3c
 8001b3e:	f004 ffb6 	bl	8006aae <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b42:	4b39      	ldr	r3, [pc, #228]	; (8001c28 <MainGUI+0x15c>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	9202      	str	r2, [sp, #8]
 8001b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b4c:	9201      	str	r2, [sp, #4]
 8001b4e:	685a      	ldr	r2, [r3, #4]
 8001b50:	9200      	str	r2, [sp, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a39      	ldr	r2, [pc, #228]	; (8001c3c <MainGUI+0x170>)
 8001b56:	2132      	movs	r1, #50	; 0x32
 8001b58:	2000      	movs	r0, #0
 8001b5a:	f004 fff2 	bl	8006b42 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b5e:	4b32      	ldr	r3, [pc, #200]	; (8001c28 <MainGUI+0x15c>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	9202      	str	r2, [sp, #8]
 8001b64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b68:	9201      	str	r2, [sp, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	9200      	str	r2, [sp, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4a33      	ldr	r2, [pc, #204]	; (8001c40 <MainGUI+0x174>)
 8001b72:	213c      	movs	r1, #60	; 0x3c
 8001b74:	2000      	movs	r0, #0
 8001b76:	f004 ffe4 	bl	8006b42 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MainGUI+0x15c>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	9202      	str	r2, [sp, #8]
 8001b80:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001b84:	9201      	str	r2, [sp, #4]
 8001b86:	685a      	ldr	r2, [r3, #4]
 8001b88:	9200      	str	r2, [sp, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a2d      	ldr	r2, [pc, #180]	; (8001c44 <MainGUI+0x178>)
 8001b8e:	2105      	movs	r1, #5
 8001b90:	2005      	movs	r0, #5
 8001b92:	f004 ff8c 	bl	8006aae <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001b96:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <MainGUI+0x15c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	9202      	str	r2, [sp, #8]
 8001b9c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba0:	9201      	str	r2, [sp, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	9200      	str	r2, [sp, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a21      	ldr	r2, [pc, #132]	; (8001c30 <MainGUI+0x164>)
 8001baa:	2114      	movs	r1, #20
 8001bac:	2005      	movs	r0, #5
 8001bae:	f004 ff7e 	bl	8006aae <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <MainGUI+0x15c>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	9202      	str	r2, [sp, #8]
 8001bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bbc:	9201      	str	r2, [sp, #4]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	9200      	str	r2, [sp, #0]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a20      	ldr	r2, [pc, #128]	; (8001c48 <MainGUI+0x17c>)
 8001bc6:	2123      	movs	r1, #35	; 0x23
 8001bc8:	2005      	movs	r0, #5
 8001bca:	f004 ff70 	bl	8006aae <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bce:	4b16      	ldr	r3, [pc, #88]	; (8001c28 <MainGUI+0x15c>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	9202      	str	r2, [sp, #8]
 8001bd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bd8:	9201      	str	r2, [sp, #4]
 8001bda:	685a      	ldr	r2, [r3, #4]
 8001bdc:	9200      	str	r2, [sp, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a15      	ldr	r2, [pc, #84]	; (8001c38 <MainGUI+0x16c>)
 8001be2:	2123      	movs	r1, #35	; 0x23
 8001be4:	203c      	movs	r0, #60	; 0x3c
 8001be6:	f004 ffac 	bl	8006b42 <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001bea:	4b0f      	ldr	r3, [pc, #60]	; (8001c28 <MainGUI+0x15c>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	9202      	str	r2, [sp, #8]
 8001bf0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf4:	9201      	str	r2, [sp, #4]
 8001bf6:	685a      	ldr	r2, [r3, #4]
 8001bf8:	9200      	str	r2, [sp, #0]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a0f      	ldr	r2, [pc, #60]	; (8001c3c <MainGUI+0x170>)
 8001bfe:	2132      	movs	r1, #50	; 0x32
 8001c00:	2000      	movs	r0, #0
 8001c02:	f004 ff54 	bl	8006aae <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001c06:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <MainGUI+0x15c>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	9202      	str	r2, [sp, #8]
 8001c0c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c10:	9201      	str	r2, [sp, #4]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	9200      	str	r2, [sp, #0]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a09      	ldr	r2, [pc, #36]	; (8001c40 <MainGUI+0x174>)
 8001c1a:	213c      	movs	r1, #60	; 0x3c
 8001c1c:	2000      	movs	r0, #0
 8001c1e:	f004 ff46 	bl	8006aae <ST7735_WriteString>
}
 8001c22:	bf00      	nop
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	2400000c 	.word	0x2400000c
 8001c2c:	08010cfc 	.word	0x08010cfc
 8001c30:	08010d08 	.word	0x08010d08
 8001c34:	08010d18 	.word	0x08010d18
 8001c38:	08010d20 	.word	0x08010d20
 8001c3c:	08010d28 	.word	0x08010d28
 8001c40:	08010d3c 	.word	0x08010d3c
 8001c44:	08010d50 	.word	0x08010d50
 8001c48:	08010d5c 	.word	0x08010d5c

08001c4c <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af04      	add	r7, sp, #16
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8001c56:	2300      	movs	r3, #0
 8001c58:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8001c5a:	4b49      	ldr	r3, [pc, #292]	; (8001d80 <LCDvalue+0x134>)
 8001c5c:	881a      	ldrh	r2, [r3, #0]
 8001c5e:	4b49      	ldr	r3, [pc, #292]	; (8001d84 <LCDvalue+0x138>)
 8001c60:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 8001c62:	4b49      	ldr	r3, [pc, #292]	; (8001d88 <LCDvalue+0x13c>)
 8001c64:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001c68:	4a48      	ldr	r2, [pc, #288]	; (8001d8c <LCDvalue+0x140>)
 8001c6a:	f04f 0300 	mov.w	r3, #0
 8001c6e:	f7fe fb87 	bl	8000380 <__aeabi_uldivmod>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4613      	mov	r3, r2
 8001c78:	817b      	strh	r3, [r7, #10]
	time -= a;
 8001c7a:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <LCDvalue+0x138>)
 8001c7c:	881a      	ldrh	r2, [r3, #0]
 8001c7e:	897b      	ldrh	r3, [r7, #10]
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	4b3f      	ldr	r3, [pc, #252]	; (8001d84 <LCDvalue+0x138>)
 8001c86:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8001c88:	4b3e      	ldr	r3, [pc, #248]	; (8001d84 <LCDvalue+0x138>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4940      	ldr	r1, [pc, #256]	; (8001d90 <LCDvalue+0x144>)
 8001c90:	4840      	ldr	r0, [pc, #256]	; (8001d94 <LCDvalue+0x148>)
 8001c92:	f00e fca9 	bl	80105e8 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8001c96:	2300      	movs	r3, #0
 8001c98:	60fb      	str	r3, [r7, #12]
 8001c9a:	e012      	b.n	8001cc2 <LCDvalue+0x76>
		if(t_c[i] == 0){
 8001c9c:	4a3d      	ldr	r2, [pc, #244]	; (8001d94 <LCDvalue+0x148>)
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <LCDvalue+0x70>
			t_c[i] = 32;
 8001ca8:	4a3a      	ldr	r2, [pc, #232]	; (8001d94 <LCDvalue+0x148>)
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	2220      	movs	r2, #32
 8001cb0:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	4a37      	ldr	r2, [pc, #220]	; (8001d94 <LCDvalue+0x148>)
 8001cb8:	2120      	movs	r1, #32
 8001cba:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	3301      	adds	r3, #1
 8001cc0:	60fb      	str	r3, [r7, #12]
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	dde9      	ble.n	8001c9c <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8001cc8:	4b2e      	ldr	r3, [pc, #184]	; (8001d84 <LCDvalue+0x138>)
 8001cca:	881b      	ldrh	r3, [r3, #0]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f040 811d 	bne.w	8001f0c <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8001cd2:	4831      	ldr	r0, [pc, #196]	; (8001d98 <LCDvalue+0x14c>)
 8001cd4:	f00c f8ac 	bl	800de30 <HAL_TIM_Base_Stop_IT>
		time = 0;
 8001cd8:	4b2a      	ldr	r3, [pc, #168]	; (8001d84 <LCDvalue+0x138>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 8001cde:	2000      	movs	r0, #0
 8001ce0:	f005 f94c 	bl	8006f7c <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 8001ce4:	2000      	movs	r0, #0
 8001ce6:	f005 f95a 	bl	8006f9e <ST7735_FillScreen1>
		while(time == 0){
 8001cea:	e10a      	b.n	8001f02 <LCDvalue+0x2b6>
			uint8_t credit = 1;
 8001cec:	2301      	movs	r3, #1
 8001cee:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 8001cf0:	7a7b      	ldrb	r3, [r7, #9]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d15e      	bne.n	8001db4 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	4b28      	ldr	r3, [pc, #160]	; (8001d9c <LCDvalue+0x150>)
 8001cfc:	9203      	str	r2, [sp, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	9202      	str	r2, [sp, #8]
 8001d02:	221f      	movs	r2, #31
 8001d04:	9201      	str	r2, [sp, #4]
 8001d06:	685a      	ldr	r2, [r3, #4]
 8001d08:	9200      	str	r2, [sp, #0]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a24      	ldr	r2, [pc, #144]	; (8001da0 <LCDvalue+0x154>)
 8001d0e:	2123      	movs	r1, #35	; 0x23
 8001d10:	200f      	movs	r0, #15
 8001d12:	f004 ff60 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	781a      	ldrb	r2, [r3, #0]
 8001d1a:	4b22      	ldr	r3, [pc, #136]	; (8001da4 <LCDvalue+0x158>)
 8001d1c:	9203      	str	r2, [sp, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	9202      	str	r2, [sp, #8]
 8001d22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d26:	9201      	str	r2, [sp, #4]
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	9200      	str	r2, [sp, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a1e      	ldr	r2, [pc, #120]	; (8001da8 <LCDvalue+0x15c>)
 8001d30:	213c      	movs	r1, #60	; 0x3c
 8001d32:	2005      	movs	r0, #5
 8001d34:	f004 ff4f 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	781a      	ldrb	r2, [r3, #0]
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <LCDvalue+0x150>)
 8001d3e:	9203      	str	r2, [sp, #12]
 8001d40:	2200      	movs	r2, #0
 8001d42:	9202      	str	r2, [sp, #8]
 8001d44:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001d48:	9201      	str	r2, [sp, #4]
 8001d4a:	685a      	ldr	r2, [r3, #4]
 8001d4c:	9200      	str	r2, [sp, #0]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a16      	ldr	r2, [pc, #88]	; (8001dac <LCDvalue+0x160>)
 8001d52:	2123      	movs	r1, #35	; 0x23
 8001d54:	2014      	movs	r0, #20
 8001d56:	f004 ff3e 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	781a      	ldrb	r2, [r3, #0]
 8001d5e:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <LCDvalue+0x158>)
 8001d60:	9203      	str	r2, [sp, #12]
 8001d62:	2200      	movs	r2, #0
 8001d64:	9202      	str	r2, [sp, #8]
 8001d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6a:	9201      	str	r2, [sp, #4]
 8001d6c:	685a      	ldr	r2, [r3, #4]
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a0f      	ldr	r2, [pc, #60]	; (8001db0 <LCDvalue+0x164>)
 8001d74:	213c      	movs	r1, #60	; 0x3c
 8001d76:	2000      	movs	r0, #0
 8001d78:	f004 ff2d 	bl	8006bd6 <ST7735_WriteStringNSS>
 8001d7c:	e0c1      	b.n	8001f02 <LCDvalue+0x2b6>
 8001d7e:	bf00      	nop
 8001d80:	24000000 	.word	0x24000000
 8001d84:	24000174 	.word	0x24000174
 8001d88:	24000ea0 	.word	0x24000ea0
 8001d8c:	000f4240 	.word	0x000f4240
 8001d90:	08010d64 	.word	0x08010d64
 8001d94:	24000170 	.word	0x24000170
 8001d98:	240002e8 	.word	0x240002e8
 8001d9c:	24000014 	.word	0x24000014
 8001da0:	08010d68 	.word	0x08010d68
 8001da4:	2400000c 	.word	0x2400000c
 8001da8:	08010d74 	.word	0x08010d74
 8001dac:	08010d88 	.word	0x08010d88
 8001db0:	08010d90 	.word	0x08010d90
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8001db4:	7a7b      	ldrb	r3, [r7, #9]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	f040 80a3 	bne.w	8001f02 <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	781a      	ldrb	r2, [r3, #0]
 8001dc0:	4ba1      	ldr	r3, [pc, #644]	; (8002048 <LCDvalue+0x3fc>)
 8001dc2:	9203      	str	r2, [sp, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	9202      	str	r2, [sp, #8]
 8001dc8:	221f      	movs	r2, #31
 8001dca:	9201      	str	r2, [sp, #4]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	9200      	str	r2, [sp, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4a9e      	ldr	r2, [pc, #632]	; (800204c <LCDvalue+0x400>)
 8001dd4:	2119      	movs	r1, #25
 8001dd6:	200f      	movs	r0, #15
 8001dd8:	f004 fefd 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	781a      	ldrb	r2, [r3, #0]
 8001de0:	4b9b      	ldr	r3, [pc, #620]	; (8002050 <LCDvalue+0x404>)
 8001de2:	9203      	str	r2, [sp, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	9202      	str	r2, [sp, #8]
 8001de8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dec:	9201      	str	r2, [sp, #4]
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	9200      	str	r2, [sp, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a97      	ldr	r2, [pc, #604]	; (8002054 <LCDvalue+0x408>)
 8001df6:	2132      	movs	r1, #50	; 0x32
 8001df8:	2005      	movs	r0, #5
 8001dfa:	f004 feec 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001dfe:	683b      	ldr	r3, [r7, #0]
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b91      	ldr	r3, [pc, #580]	; (8002048 <LCDvalue+0x3fc>)
 8001e04:	9203      	str	r2, [sp, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	9202      	str	r2, [sp, #8]
 8001e0a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a90      	ldr	r2, [pc, #576]	; (8002058 <LCDvalue+0x40c>)
 8001e18:	2119      	movs	r1, #25
 8001e1a:	2014      	movs	r0, #20
 8001e1c:	f004 fedb 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	4b8a      	ldr	r3, [pc, #552]	; (8002050 <LCDvalue+0x404>)
 8001e26:	9203      	str	r2, [sp, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9202      	str	r2, [sp, #8]
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a88      	ldr	r2, [pc, #544]	; (800205c <LCDvalue+0x410>)
 8001e3a:	2132      	movs	r1, #50	; 0x32
 8001e3c:	2000      	movs	r0, #0
 8001e3e:	f004 feca 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 8001e42:	4b83      	ldr	r3, [pc, #524]	; (8002050 <LCDvalue+0x404>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	9203      	str	r2, [sp, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	9202      	str	r2, [sp, #8]
 8001e4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e50:	9201      	str	r2, [sp, #4]
 8001e52:	685a      	ldr	r2, [r3, #4]
 8001e54:	9200      	str	r2, [sp, #0]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a81      	ldr	r2, [pc, #516]	; (8002060 <LCDvalue+0x414>)
 8001e5a:	2141      	movs	r1, #65	; 0x41
 8001e5c:	2000      	movs	r0, #0
 8001e5e:	f004 feba 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 8001e62:	4b7b      	ldr	r3, [pc, #492]	; (8002050 <LCDvalue+0x404>)
 8001e64:	2201      	movs	r2, #1
 8001e66:	9203      	str	r2, [sp, #12]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	9202      	str	r2, [sp, #8]
 8001e6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e70:	9201      	str	r2, [sp, #4]
 8001e72:	685a      	ldr	r2, [r3, #4]
 8001e74:	9200      	str	r2, [sp, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a79      	ldr	r2, [pc, #484]	; (8002060 <LCDvalue+0x414>)
 8001e7a:	2141      	movs	r1, #65	; 0x41
 8001e7c:	2000      	movs	r0, #0
 8001e7e:	f004 feaa 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 8001e82:	4b73      	ldr	r3, [pc, #460]	; (8002050 <LCDvalue+0x404>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	9203      	str	r2, [sp, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	9202      	str	r2, [sp, #8]
 8001e8c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001e90:	9201      	str	r2, [sp, #4]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	9200      	str	r2, [sp, #0]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a72      	ldr	r2, [pc, #456]	; (8002064 <LCDvalue+0x418>)
 8001e9a:	2164      	movs	r1, #100	; 0x64
 8001e9c:	2000      	movs	r0, #0
 8001e9e:	f004 fe9a 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 8001ea2:	4b6b      	ldr	r3, [pc, #428]	; (8002050 <LCDvalue+0x404>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	9203      	str	r2, [sp, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	9202      	str	r2, [sp, #8]
 8001eac:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001eb0:	9201      	str	r2, [sp, #4]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	9200      	str	r2, [sp, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a6b      	ldr	r2, [pc, #428]	; (8002068 <LCDvalue+0x41c>)
 8001eba:	2173      	movs	r1, #115	; 0x73
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f004 fe8a 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 8001ec2:	4b63      	ldr	r3, [pc, #396]	; (8002050 <LCDvalue+0x404>)
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	9203      	str	r2, [sp, #12]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	9202      	str	r2, [sp, #8]
 8001ecc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001ed0:	9201      	str	r2, [sp, #4]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	9200      	str	r2, [sp, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a64      	ldr	r2, [pc, #400]	; (800206c <LCDvalue+0x420>)
 8001eda:	2173      	movs	r1, #115	; 0x73
 8001edc:	2000      	movs	r0, #0
 8001ede:	f004 fe7a 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 8001ee2:	4b5b      	ldr	r3, [pc, #364]	; (8002050 <LCDvalue+0x404>)
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	9203      	str	r2, [sp, #12]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	9202      	str	r2, [sp, #8]
 8001eec:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001ef0:	9201      	str	r2, [sp, #4]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	9200      	str	r2, [sp, #0]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	; (8002070 <LCDvalue+0x424>)
 8001efa:	215a      	movs	r1, #90	; 0x5a
 8001efc:	2000      	movs	r0, #0
 8001efe:	f004 fe6a 	bl	8006bd6 <ST7735_WriteStringNSS>
		while(time == 0){
 8001f02:	4b5c      	ldr	r3, [pc, #368]	; (8002074 <LCDvalue+0x428>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	f43f aef0 	beq.w	8001cec <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	889b      	ldrh	r3, [r3, #4]
 8001f10:	461a      	mov	r2, r3
 8001f12:	4959      	ldr	r1, [pc, #356]	; (8002078 <LCDvalue+0x42c>)
 8001f14:	4859      	ldr	r0, [pc, #356]	; (800207c <LCDvalue+0x430>)
 8001f16:	f00e fb67 	bl	80105e8 <siprintf>
	if(C_LP_ATK[3] == 0){
 8001f1a:	4b58      	ldr	r3, [pc, #352]	; (800207c <LCDvalue+0x430>)
 8001f1c:	78db      	ldrb	r3, [r3, #3]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10e      	bne.n	8001f40 <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 8001f22:	4b56      	ldr	r3, [pc, #344]	; (800207c <LCDvalue+0x430>)
 8001f24:	789a      	ldrb	r2, [r3, #2]
 8001f26:	4b55      	ldr	r3, [pc, #340]	; (800207c <LCDvalue+0x430>)
 8001f28:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 8001f2a:	4b54      	ldr	r3, [pc, #336]	; (800207c <LCDvalue+0x430>)
 8001f2c:	785a      	ldrb	r2, [r3, #1]
 8001f2e:	4b53      	ldr	r3, [pc, #332]	; (800207c <LCDvalue+0x430>)
 8001f30:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 8001f32:	4b52      	ldr	r3, [pc, #328]	; (800207c <LCDvalue+0x430>)
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	4b51      	ldr	r3, [pc, #324]	; (800207c <LCDvalue+0x430>)
 8001f38:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8001f3a:	4b50      	ldr	r3, [pc, #320]	; (800207c <LCDvalue+0x430>)
 8001f3c:	2220      	movs	r2, #32
 8001f3e:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	781a      	ldrb	r2, [r3, #0]
 8001f44:	4b42      	ldr	r3, [pc, #264]	; (8002050 <LCDvalue+0x404>)
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	9202      	str	r2, [sp, #8]
 8001f4c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f50:	9201      	str	r2, [sp, #4]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	9200      	str	r2, [sp, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a48      	ldr	r2, [pc, #288]	; (800207c <LCDvalue+0x430>)
 8001f5a:	2114      	movs	r1, #20
 8001f5c:	205a      	movs	r0, #90	; 0x5a
 8001f5e:	f004 fe3a 	bl	8006bd6 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	781a      	ldrb	r2, [r3, #0]
 8001f66:	4b3a      	ldr	r3, [pc, #232]	; (8002050 <LCDvalue+0x404>)
 8001f68:	9203      	str	r2, [sp, #12]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	9202      	str	r2, [sp, #8]
 8001f6e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001f72:	9201      	str	r2, [sp, #4]
 8001f74:	685a      	ldr	r2, [r3, #4]
 8001f76:	9200      	str	r2, [sp, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a41      	ldr	r2, [pc, #260]	; (8002080 <LCDvalue+0x434>)
 8001f7c:	2132      	movs	r1, #50	; 0x32
 8001f7e:	2069      	movs	r0, #105	; 0x69
 8001f80:	f004 fe29 	bl	8006bd6 <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	889b      	ldrh	r3, [r3, #4]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	493b      	ldr	r1, [pc, #236]	; (8002078 <LCDvalue+0x42c>)
 8001f8c:	483d      	ldr	r0, [pc, #244]	; (8002084 <LCDvalue+0x438>)
 8001f8e:	f00e fb2b 	bl	80105e8 <siprintf>
	if(C_LP_DEF[3] == 0){
 8001f92:	4b3c      	ldr	r3, [pc, #240]	; (8002084 <LCDvalue+0x438>)
 8001f94:	78db      	ldrb	r3, [r3, #3]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d10e      	bne.n	8001fb8 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8001f9a:	4b3a      	ldr	r3, [pc, #232]	; (8002084 <LCDvalue+0x438>)
 8001f9c:	789a      	ldrb	r2, [r3, #2]
 8001f9e:	4b39      	ldr	r3, [pc, #228]	; (8002084 <LCDvalue+0x438>)
 8001fa0:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 8001fa2:	4b38      	ldr	r3, [pc, #224]	; (8002084 <LCDvalue+0x438>)
 8001fa4:	785a      	ldrb	r2, [r3, #1]
 8001fa6:	4b37      	ldr	r3, [pc, #220]	; (8002084 <LCDvalue+0x438>)
 8001fa8:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8001faa:	4b36      	ldr	r3, [pc, #216]	; (8002084 <LCDvalue+0x438>)
 8001fac:	781a      	ldrb	r2, [r3, #0]
 8001fae:	4b35      	ldr	r3, [pc, #212]	; (8002084 <LCDvalue+0x438>)
 8001fb0:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 8001fb2:	4b34      	ldr	r3, [pc, #208]	; (8002084 <LCDvalue+0x438>)
 8001fb4:	2220      	movs	r2, #32
 8001fb6:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	781a      	ldrb	r2, [r3, #0]
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <LCDvalue+0x404>)
 8001fbe:	9203      	str	r2, [sp, #12]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	9202      	str	r2, [sp, #8]
 8001fc4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fc8:	9201      	str	r2, [sp, #4]
 8001fca:	685a      	ldr	r2, [r3, #4]
 8001fcc:	9200      	str	r2, [sp, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	; (8002084 <LCDvalue+0x438>)
 8001fd2:	2114      	movs	r1, #20
 8001fd4:	205a      	movs	r0, #90	; 0x5a
 8001fd6:	f004 fdfe 	bl	8006bd6 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b1c      	ldr	r3, [pc, #112]	; (8002050 <LCDvalue+0x404>)
 8001fe0:	9203      	str	r2, [sp, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	9202      	str	r2, [sp, #8]
 8001fe6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001fea:	9201      	str	r2, [sp, #4]
 8001fec:	685a      	ldr	r2, [r3, #4]
 8001fee:	9200      	str	r2, [sp, #0]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a25      	ldr	r2, [pc, #148]	; (8002088 <LCDvalue+0x43c>)
 8001ff4:	2132      	movs	r1, #50	; 0x32
 8001ff6:	2069      	movs	r0, #105	; 0x69
 8001ff8:	f004 fded 	bl	8006bd6 <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 8001ffc:	4b23      	ldr	r3, [pc, #140]	; (800208c <LCDvalue+0x440>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	461a      	mov	r2, r3
 8002002:	491d      	ldr	r1, [pc, #116]	; (8002078 <LCDvalue+0x42c>)
 8002004:	4822      	ldr	r0, [pc, #136]	; (8002090 <LCDvalue+0x444>)
 8002006:	f00e faef 	bl	80105e8 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800200a:	4b11      	ldr	r3, [pc, #68]	; (8002050 <LCDvalue+0x404>)
 800200c:	2200      	movs	r2, #0
 800200e:	9203      	str	r2, [sp, #12]
 8002010:	2200      	movs	r2, #0
 8002012:	9202      	str	r2, [sp, #8]
 8002014:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002018:	9201      	str	r2, [sp, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	9200      	str	r2, [sp, #0]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <LCDvalue+0x444>)
 8002022:	2123      	movs	r1, #35	; 0x23
 8002024:	2032      	movs	r0, #50	; 0x32
 8002026:	f004 fdd6 	bl	8006bd6 <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <LCDvalue+0x404>)
 800202c:	2201      	movs	r2, #1
 800202e:	9203      	str	r2, [sp, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	9202      	str	r2, [sp, #8]
 8002034:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002038:	9201      	str	r2, [sp, #4]
 800203a:	685a      	ldr	r2, [r3, #4]
 800203c:	9200      	str	r2, [sp, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a13      	ldr	r2, [pc, #76]	; (8002090 <LCDvalue+0x444>)
 8002042:	2123      	movs	r1, #35	; 0x23
 8002044:	2032      	movs	r0, #50	; 0x32
 8002046:	e025      	b.n	8002094 <LCDvalue+0x448>
 8002048:	24000014 	.word	0x24000014
 800204c:	08010d68 	.word	0x08010d68
 8002050:	2400000c 	.word	0x2400000c
 8002054:	08010d74 	.word	0x08010d74
 8002058:	08010d88 	.word	0x08010d88
 800205c:	08010d90 	.word	0x08010d90
 8002060:	08010d3c 	.word	0x08010d3c
 8002064:	08010da4 	.word	0x08010da4
 8002068:	08010db0 	.word	0x08010db0
 800206c:	08010dc0 	.word	0x08010dc0
 8002070:	08010dcc 	.word	0x08010dcc
 8002074:	24000174 	.word	0x24000174
 8002078:	08010d64 	.word	0x08010d64
 800207c:	24000164 	.word	0x24000164
 8002080:	24000170 	.word	0x24000170
 8002084:	24000168 	.word	0x24000168
 8002088:	08010ddc 	.word	0x08010ddc
 800208c:	24000176 	.word	0x24000176
 8002090:	2400016c 	.word	0x2400016c
 8002094:	f004 fd9f 	bl	8006bd6 <ST7735_WriteStringNSS>

}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af04      	add	r7, sp, #16
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	3304      	adds	r3, #4
 80020ae:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	3304      	adds	r3, #4
 80020b4:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3304      	adds	r3, #4
 80020ba:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80020c2:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	2201      	movs	r2, #1
 80020d0:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 80020e0:	2108      	movs	r1, #8
 80020e2:	48ad      	ldr	r0, [pc, #692]	; (8002398 <GAME_PLAY_Management+0x2f8>)
 80020e4:	f008 fca6 	bl	800aa34 <HAL_GPIO_ReadPin>
 80020e8:	4603      	mov	r3, r0
 80020ea:	461a      	mov	r2, r3
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 80020f0:	2102      	movs	r1, #2
 80020f2:	48aa      	ldr	r0, [pc, #680]	; (800239c <GAME_PLAY_Management+0x2fc>)
 80020f4:	f008 fc9e 	bl	800aa34 <HAL_GPIO_ReadPin>
 80020f8:	4603      	mov	r3, r0
 80020fa:	461a      	mov	r2, r3
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 8002100:	2104      	movs	r1, #4
 8002102:	48a5      	ldr	r0, [pc, #660]	; (8002398 <GAME_PLAY_Management+0x2f8>)
 8002104:	f008 fc96 	bl	800aa34 <HAL_GPIO_ReadPin>
 8002108:	4603      	mov	r3, r0
 800210a:	461a      	mov	r2, r3
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 8002110:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002114:	48a2      	ldr	r0, [pc, #648]	; (80023a0 <GAME_PLAY_Management+0x300>)
 8002116:	f008 fc8d 	bl	800aa34 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	461a      	mov	r2, r3
 800211e:	69bb      	ldr	r3, [r7, #24]
 8002120:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8002128:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	3304      	adds	r3, #4
 800212e:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	3304      	adds	r3, #4
 8002134:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 8002136:	7dfb      	ldrb	r3, [r7, #23]
 8002138:	2b04      	cmp	r3, #4
 800213a:	f200 829b 	bhi.w	8002674 <GAME_PLAY_Management+0x5d4>
 800213e:	a201      	add	r2, pc, #4	; (adr r2, 8002144 <GAME_PLAY_Management+0xa4>)
 8002140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002144:	08002159 	.word	0x08002159
 8002148:	080023d5 	.word	0x080023d5
 800214c:	08002533 	.word	0x08002533
 8002150:	080025b1 	.word	0x080025b1
 8002154:	0800262f 	.word	0x0800262f
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002158:	4b92      	ldr	r3, [pc, #584]	; (80023a4 <GAME_PLAY_Management+0x304>)
 800215a:	2200      	movs	r2, #0
 800215c:	9202      	str	r2, [sp, #8]
 800215e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002162:	9201      	str	r2, [sp, #4]
 8002164:	685a      	ldr	r2, [r3, #4]
 8002166:	9200      	str	r2, [sp, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a8f      	ldr	r2, [pc, #572]	; (80023a8 <GAME_PLAY_Management+0x308>)
 800216c:	2105      	movs	r1, #5
 800216e:	2005      	movs	r0, #5
 8002170:	f004 fc9d 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002174:	4b8b      	ldr	r3, [pc, #556]	; (80023a4 <GAME_PLAY_Management+0x304>)
 8002176:	2200      	movs	r2, #0
 8002178:	9202      	str	r2, [sp, #8]
 800217a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800217e:	9201      	str	r2, [sp, #4]
 8002180:	685a      	ldr	r2, [r3, #4]
 8002182:	9200      	str	r2, [sp, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4a89      	ldr	r2, [pc, #548]	; (80023ac <GAME_PLAY_Management+0x30c>)
 8002188:	210f      	movs	r1, #15
 800218a:	2000      	movs	r0, #0
 800218c:	f004 fc8f 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8002190:	4b87      	ldr	r3, [pc, #540]	; (80023b0 <GAME_PLAY_Management+0x310>)
 8002192:	2200      	movs	r2, #0
 8002194:	9202      	str	r2, [sp, #8]
 8002196:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800219a:	9201      	str	r2, [sp, #4]
 800219c:	685a      	ldr	r2, [r3, #4]
 800219e:	9200      	str	r2, [sp, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	4a84      	ldr	r2, [pc, #528]	; (80023b4 <GAME_PLAY_Management+0x314>)
 80021a4:	2123      	movs	r1, #35	; 0x23
 80021a6:	2008      	movs	r0, #8
 80021a8:	f004 fc81 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80021ac:	4b80      	ldr	r3, [pc, #512]	; (80023b0 <GAME_PLAY_Management+0x310>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	9202      	str	r2, [sp, #8]
 80021b2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80021b6:	9201      	str	r2, [sp, #4]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	9200      	str	r2, [sp, #0]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a7e      	ldr	r2, [pc, #504]	; (80023b8 <GAME_PLAY_Management+0x318>)
 80021c0:	213c      	movs	r1, #60	; 0x3c
 80021c2:	2019      	movs	r0, #25
 80021c4:	f004 fc73 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021c8:	4b76      	ldr	r3, [pc, #472]	; (80023a4 <GAME_PLAY_Management+0x304>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	9202      	str	r2, [sp, #8]
 80021ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021d2:	9201      	str	r2, [sp, #4]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	9200      	str	r2, [sp, #0]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4a74      	ldr	r2, [pc, #464]	; (80023ac <GAME_PLAY_Management+0x30c>)
 80021dc:	214b      	movs	r1, #75	; 0x4b
 80021de:	2000      	movs	r0, #0
 80021e0:	f004 fc65 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80021e4:	4b6f      	ldr	r3, [pc, #444]	; (80023a4 <GAME_PLAY_Management+0x304>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	9202      	str	r2, [sp, #8]
 80021ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ee:	9201      	str	r2, [sp, #4]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	9200      	str	r2, [sp, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a71      	ldr	r2, [pc, #452]	; (80023bc <GAME_PLAY_Management+0x31c>)
 80021f8:	215a      	movs	r1, #90	; 0x5a
 80021fa:	2000      	movs	r0, #0
 80021fc:	f004 fc57 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002200:	4b68      	ldr	r3, [pc, #416]	; (80023a4 <GAME_PLAY_Management+0x304>)
 8002202:	2200      	movs	r2, #0
 8002204:	9202      	str	r2, [sp, #8]
 8002206:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800220a:	9201      	str	r2, [sp, #4]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	9200      	str	r2, [sp, #0]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a6b      	ldr	r2, [pc, #428]	; (80023c0 <GAME_PLAY_Management+0x320>)
 8002214:	215a      	movs	r1, #90	; 0x5a
 8002216:	205d      	movs	r0, #93	; 0x5d
 8002218:	f004 fc49 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800221c:	4b61      	ldr	r3, [pc, #388]	; (80023a4 <GAME_PLAY_Management+0x304>)
 800221e:	2200      	movs	r2, #0
 8002220:	9202      	str	r2, [sp, #8]
 8002222:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002226:	9201      	str	r2, [sp, #4]
 8002228:	685a      	ldr	r2, [r3, #4]
 800222a:	9200      	str	r2, [sp, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a65      	ldr	r2, [pc, #404]	; (80023c4 <GAME_PLAY_Management+0x324>)
 8002230:	2169      	movs	r1, #105	; 0x69
 8002232:	2000      	movs	r0, #0
 8002234:	f004 fc3b 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002238:	4b5a      	ldr	r3, [pc, #360]	; (80023a4 <GAME_PLAY_Management+0x304>)
 800223a:	2200      	movs	r2, #0
 800223c:	9202      	str	r2, [sp, #8]
 800223e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002242:	9201      	str	r2, [sp, #4]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	9200      	str	r2, [sp, #0]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a5f      	ldr	r2, [pc, #380]	; (80023c8 <GAME_PLAY_Management+0x328>)
 800224c:	2169      	movs	r1, #105	; 0x69
 800224e:	2064      	movs	r0, #100	; 0x64
 8002250:	f004 fc2d 	bl	8006aae <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002254:	4b53      	ldr	r3, [pc, #332]	; (80023a4 <GAME_PLAY_Management+0x304>)
 8002256:	2200      	movs	r2, #0
 8002258:	9202      	str	r2, [sp, #8]
 800225a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800225e:	9201      	str	r2, [sp, #4]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	9200      	str	r2, [sp, #0]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a59      	ldr	r2, [pc, #356]	; (80023cc <GAME_PLAY_Management+0x32c>)
 8002268:	2105      	movs	r1, #5
 800226a:	2005      	movs	r0, #5
 800226c:	f004 fc69 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002270:	4b4c      	ldr	r3, [pc, #304]	; (80023a4 <GAME_PLAY_Management+0x304>)
 8002272:	2200      	movs	r2, #0
 8002274:	9202      	str	r2, [sp, #8]
 8002276:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800227a:	9201      	str	r2, [sp, #4]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	9200      	str	r2, [sp, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <GAME_PLAY_Management+0x30c>)
 8002284:	210f      	movs	r1, #15
 8002286:	2000      	movs	r0, #0
 8002288:	f004 fc5b 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800228c:	4b48      	ldr	r3, [pc, #288]	; (80023b0 <GAME_PLAY_Management+0x310>)
 800228e:	2200      	movs	r2, #0
 8002290:	9202      	str	r2, [sp, #8]
 8002292:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002296:	9201      	str	r2, [sp, #4]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	9200      	str	r2, [sp, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a45      	ldr	r2, [pc, #276]	; (80023b4 <GAME_PLAY_Management+0x314>)
 80022a0:	2123      	movs	r1, #35	; 0x23
 80022a2:	2008      	movs	r0, #8
 80022a4:	f004 fc4d 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80022a8:	4b41      	ldr	r3, [pc, #260]	; (80023b0 <GAME_PLAY_Management+0x310>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	9202      	str	r2, [sp, #8]
 80022ae:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80022b2:	9201      	str	r2, [sp, #4]
 80022b4:	685a      	ldr	r2, [r3, #4]
 80022b6:	9200      	str	r2, [sp, #0]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a3f      	ldr	r2, [pc, #252]	; (80023b8 <GAME_PLAY_Management+0x318>)
 80022bc:	213c      	movs	r1, #60	; 0x3c
 80022be:	2014      	movs	r0, #20
 80022c0:	f004 fc3f 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022c4:	4b37      	ldr	r3, [pc, #220]	; (80023a4 <GAME_PLAY_Management+0x304>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	9202      	str	r2, [sp, #8]
 80022ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ce:	9201      	str	r2, [sp, #4]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	9200      	str	r2, [sp, #0]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <GAME_PLAY_Management+0x30c>)
 80022d8:	214b      	movs	r1, #75	; 0x4b
 80022da:	2000      	movs	r0, #0
 80022dc:	f004 fc31 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80022e0:	4b30      	ldr	r3, [pc, #192]	; (80023a4 <GAME_PLAY_Management+0x304>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	9202      	str	r2, [sp, #8]
 80022e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ea:	9201      	str	r2, [sp, #4]
 80022ec:	685a      	ldr	r2, [r3, #4]
 80022ee:	9200      	str	r2, [sp, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4a32      	ldr	r2, [pc, #200]	; (80023bc <GAME_PLAY_Management+0x31c>)
 80022f4:	215a      	movs	r1, #90	; 0x5a
 80022f6:	2000      	movs	r0, #0
 80022f8:	f004 fc23 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80022fc:	4b29      	ldr	r3, [pc, #164]	; (80023a4 <GAME_PLAY_Management+0x304>)
 80022fe:	2200      	movs	r2, #0
 8002300:	9202      	str	r2, [sp, #8]
 8002302:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002306:	9201      	str	r2, [sp, #4]
 8002308:	685a      	ldr	r2, [r3, #4]
 800230a:	9200      	str	r2, [sp, #0]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a2c      	ldr	r2, [pc, #176]	; (80023c0 <GAME_PLAY_Management+0x320>)
 8002310:	215a      	movs	r1, #90	; 0x5a
 8002312:	205d      	movs	r0, #93	; 0x5d
 8002314:	f004 fc15 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002318:	4b22      	ldr	r3, [pc, #136]	; (80023a4 <GAME_PLAY_Management+0x304>)
 800231a:	2200      	movs	r2, #0
 800231c:	9202      	str	r2, [sp, #8]
 800231e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002322:	9201      	str	r2, [sp, #4]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	9200      	str	r2, [sp, #0]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a26      	ldr	r2, [pc, #152]	; (80023c4 <GAME_PLAY_Management+0x324>)
 800232c:	2169      	movs	r1, #105	; 0x69
 800232e:	2000      	movs	r0, #0
 8002330:	f004 fc07 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002334:	4b1b      	ldr	r3, [pc, #108]	; (80023a4 <GAME_PLAY_Management+0x304>)
 8002336:	2200      	movs	r2, #0
 8002338:	9202      	str	r2, [sp, #8]
 800233a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800233e:	9201      	str	r2, [sp, #4]
 8002340:	685a      	ldr	r2, [r3, #4]
 8002342:	9200      	str	r2, [sp, #0]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <GAME_PLAY_Management+0x328>)
 8002348:	2169      	movs	r1, #105	; 0x69
 800234a:	2064      	movs	r0, #100	; 0x64
 800234c:	f004 fbf9 	bl	8006b42 <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8002350:	2108      	movs	r1, #8
 8002352:	481f      	ldr	r0, [pc, #124]	; (80023d0 <GAME_PLAY_Management+0x330>)
 8002354:	f008 fb6e 	bl	800aa34 <HAL_GPIO_ReadPin>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d10a      	bne.n	8002374 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800235e:	2000      	movs	r0, #0
 8002360:	f004 fe0c 	bl	8006f7c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8002364:	2000      	movs	r0, #0
 8002366:	f004 fe1a 	bl	8006f9e <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8002372:	e17f      	b.n	8002674 <GAME_PLAY_Management+0x5d4>
			state_game->PlyerAction_State = PS_AFK;
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	2200      	movs	r2, #0
 8002378:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	2200      	movs	r2, #0
 8002380:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	2200      	movs	r2, #0
 8002388:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	2200      	movs	r2, #0
 8002390:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8002394:	e16e      	b.n	8002674 <GAME_PLAY_Management+0x5d4>
 8002396:	bf00      	nop
 8002398:	58020800 	.word	0x58020800
 800239c:	58020400 	.word	0x58020400
 80023a0:	58021400 	.word	0x58021400
 80023a4:	2400000c 	.word	0x2400000c
 80023a8:	08010d50 	.word	0x08010d50
 80023ac:	08010d3c 	.word	0x08010d3c
 80023b0:	24000014 	.word	0x24000014
 80023b4:	08010de0 	.word	0x08010de0
 80023b8:	08010dec 	.word	0x08010dec
 80023bc:	08010df4 	.word	0x08010df4
 80023c0:	08010e04 	.word	0x08010e04
 80023c4:	08010e0c 	.word	0x08010e0c
 80023c8:	08010ddc 	.word	0x08010ddc
 80023cc:	08010cfc 	.word	0x08010cfc
 80023d0:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023d4:	4ba9      	ldr	r3, [pc, #676]	; (800267c <GAME_PLAY_Management+0x5dc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	9202      	str	r2, [sp, #8]
 80023da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023de:	9201      	str	r2, [sp, #4]
 80023e0:	685a      	ldr	r2, [r3, #4]
 80023e2:	9200      	str	r2, [sp, #0]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4aa6      	ldr	r2, [pc, #664]	; (8002680 <GAME_PLAY_Management+0x5e0>)
 80023e8:	2105      	movs	r1, #5
 80023ea:	2005      	movs	r0, #5
 80023ec:	f004 fb5f 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80023f0:	4ba2      	ldr	r3, [pc, #648]	; (800267c <GAME_PLAY_Management+0x5dc>)
 80023f2:	2200      	movs	r2, #0
 80023f4:	9202      	str	r2, [sp, #8]
 80023f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023fa:	9201      	str	r2, [sp, #4]
 80023fc:	685a      	ldr	r2, [r3, #4]
 80023fe:	9200      	str	r2, [sp, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4aa0      	ldr	r2, [pc, #640]	; (8002684 <GAME_PLAY_Management+0x5e4>)
 8002404:	210f      	movs	r1, #15
 8002406:	2000      	movs	r0, #0
 8002408:	f004 fb51 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800240c:	4b9e      	ldr	r3, [pc, #632]	; (8002688 <GAME_PLAY_Management+0x5e8>)
 800240e:	2200      	movs	r2, #0
 8002410:	9202      	str	r2, [sp, #8]
 8002412:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8002416:	9201      	str	r2, [sp, #4]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	9200      	str	r2, [sp, #0]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a9b      	ldr	r2, [pc, #620]	; (800268c <GAME_PLAY_Management+0x5ec>)
 8002420:	2123      	movs	r1, #35	; 0x23
 8002422:	2019      	movs	r0, #25
 8002424:	f004 fb43 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8002428:	4b97      	ldr	r3, [pc, #604]	; (8002688 <GAME_PLAY_Management+0x5e8>)
 800242a:	2200      	movs	r2, #0
 800242c:	9202      	str	r2, [sp, #8]
 800242e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002432:	9201      	str	r2, [sp, #4]
 8002434:	685a      	ldr	r2, [r3, #4]
 8002436:	9200      	str	r2, [sp, #0]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a95      	ldr	r2, [pc, #596]	; (8002690 <GAME_PLAY_Management+0x5f0>)
 800243c:	213c      	movs	r1, #60	; 0x3c
 800243e:	2021      	movs	r0, #33	; 0x21
 8002440:	f004 fb35 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002444:	4b8d      	ldr	r3, [pc, #564]	; (800267c <GAME_PLAY_Management+0x5dc>)
 8002446:	2200      	movs	r2, #0
 8002448:	9202      	str	r2, [sp, #8]
 800244a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800244e:	9201      	str	r2, [sp, #4]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	9200      	str	r2, [sp, #0]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8b      	ldr	r2, [pc, #556]	; (8002684 <GAME_PLAY_Management+0x5e4>)
 8002458:	214b      	movs	r1, #75	; 0x4b
 800245a:	2000      	movs	r0, #0
 800245c:	f004 fb27 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8002460:	4b86      	ldr	r3, [pc, #536]	; (800267c <GAME_PLAY_Management+0x5dc>)
 8002462:	2200      	movs	r2, #0
 8002464:	9202      	str	r2, [sp, #8]
 8002466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800246a:	9201      	str	r2, [sp, #4]
 800246c:	685a      	ldr	r2, [r3, #4]
 800246e:	9200      	str	r2, [sp, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a88      	ldr	r2, [pc, #544]	; (8002694 <GAME_PLAY_Management+0x5f4>)
 8002474:	2105      	movs	r1, #5
 8002476:	2005      	movs	r0, #5
 8002478:	f004 fb63 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800247c:	4b7f      	ldr	r3, [pc, #508]	; (800267c <GAME_PLAY_Management+0x5dc>)
 800247e:	2200      	movs	r2, #0
 8002480:	9202      	str	r2, [sp, #8]
 8002482:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002486:	9201      	str	r2, [sp, #4]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	9200      	str	r2, [sp, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a7d      	ldr	r2, [pc, #500]	; (8002684 <GAME_PLAY_Management+0x5e4>)
 8002490:	210f      	movs	r1, #15
 8002492:	2000      	movs	r0, #0
 8002494:	f004 fb55 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8002498:	4b7b      	ldr	r3, [pc, #492]	; (8002688 <GAME_PLAY_Management+0x5e8>)
 800249a:	2200      	movs	r2, #0
 800249c:	9202      	str	r2, [sp, #8]
 800249e:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80024a2:	9201      	str	r2, [sp, #4]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	9200      	str	r2, [sp, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a78      	ldr	r2, [pc, #480]	; (800268c <GAME_PLAY_Management+0x5ec>)
 80024ac:	2123      	movs	r1, #35	; 0x23
 80024ae:	2019      	movs	r0, #25
 80024b0:	f004 fb47 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80024b4:	4b74      	ldr	r3, [pc, #464]	; (8002688 <GAME_PLAY_Management+0x5e8>)
 80024b6:	2200      	movs	r2, #0
 80024b8:	9202      	str	r2, [sp, #8]
 80024ba:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80024be:	9201      	str	r2, [sp, #4]
 80024c0:	685a      	ldr	r2, [r3, #4]
 80024c2:	9200      	str	r2, [sp, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a74      	ldr	r2, [pc, #464]	; (8002698 <GAME_PLAY_Management+0x5f8>)
 80024c8:	213c      	movs	r1, #60	; 0x3c
 80024ca:	2025      	movs	r0, #37	; 0x25
 80024cc:	f004 fb39 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80024d0:	4b6a      	ldr	r3, [pc, #424]	; (800267c <GAME_PLAY_Management+0x5dc>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	9202      	str	r2, [sp, #8]
 80024d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024da:	9201      	str	r2, [sp, #4]
 80024dc:	685a      	ldr	r2, [r3, #4]
 80024de:	9200      	str	r2, [sp, #0]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a68      	ldr	r2, [pc, #416]	; (8002684 <GAME_PLAY_Management+0x5e4>)
 80024e4:	214b      	movs	r1, #75	; 0x4b
 80024e6:	2000      	movs	r0, #0
 80024e8:	f004 fb2b 	bl	8006b42 <ST7735_WriteString1>
		HAL_Delay(1500);
 80024ec:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80024f0:	f005 f952 	bl	8007798 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 80024f4:	2000      	movs	r0, #0
 80024f6:	f004 fd41 	bl	8006f7c <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80024fa:	2000      	movs	r0, #0
 80024fc:	f004 fd4f 	bl	8006f9e <ST7735_FillScreen1>
		MainGUI();
 8002500:	f7ff fae4 	bl	8001acc <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800250a:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002512:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 8002514:	69f8      	ldr	r0, [r7, #28]
 8002516:	f7fe ffb3 	bl	8001480 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 800251a:	69b8      	ldr	r0, [r7, #24]
 800251c:	f7fe ffb0 	bl	8001480 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	2202      	movs	r2, #2
 8002524:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 8002530:	e0a0      	b.n	8002674 <GAME_PLAY_Management+0x5d4>
	case first_player:
		if (state_game -> F_flag == 0){
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8002538:	2b00      	cmp	r3, #0
 800253a:	d12b      	bne.n	8002594 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800253c:	4b52      	ldr	r3, [pc, #328]	; (8002688 <GAME_PLAY_Management+0x5e8>)
 800253e:	2200      	movs	r2, #0
 8002540:	9202      	str	r2, [sp, #8]
 8002542:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002546:	9201      	str	r2, [sp, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	9200      	str	r2, [sp, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a53      	ldr	r2, [pc, #332]	; (800269c <GAME_PLAY_Management+0x5fc>)
 8002550:	215a      	movs	r1, #90	; 0x5a
 8002552:	200f      	movs	r0, #15
 8002554:	f004 faf5 	bl	8006b42 <ST7735_WriteString1>
			HAL_Delay(1500);
 8002558:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800255c:	f005 f91c 	bl	8007798 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8002560:	2300      	movs	r3, #0
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	2326      	movs	r3, #38	; 0x26
 8002566:	2280      	movs	r2, #128	; 0x80
 8002568:	215a      	movs	r1, #90	; 0x5a
 800256a:	2000      	movs	r0, #0
 800256c:	f004 fc08 	bl	8006d80 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 8002576:	3301      	adds	r3, #1
 8002578:	b2da      	uxtb	r2, r3
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	2200      	movs	r2, #0
 8002584:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 8002588:	4b45      	ldr	r3, [pc, #276]	; (80026a0 <GAME_PLAY_Management+0x600>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	3301      	adds	r3, #1
 800258e:	b2da      	uxtb	r2, r3
 8002590:	4b43      	ldr	r3, [pc, #268]	; (80026a0 <GAME_PLAY_Management+0x600>)
 8002592:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	3304      	adds	r3, #4
 8002598:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80025a0:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	6839      	ldr	r1, [r7, #0]
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f87d 	bl	80026a8 <GAME_PLAY_Phase_Management>
		break;
 80025ae:	e061      	b.n	8002674 <GAME_PLAY_Management+0x5d4>
	case second_player:
		if (state_game -> S_flag == 0){
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d12b      	bne.n	8002612 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80025ba:	4b33      	ldr	r3, [pc, #204]	; (8002688 <GAME_PLAY_Management+0x5e8>)
 80025bc:	2200      	movs	r2, #0
 80025be:	9202      	str	r2, [sp, #8]
 80025c0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80025c4:	9201      	str	r2, [sp, #4]
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	9200      	str	r2, [sp, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a33      	ldr	r2, [pc, #204]	; (800269c <GAME_PLAY_Management+0x5fc>)
 80025ce:	215a      	movs	r1, #90	; 0x5a
 80025d0:	200f      	movs	r0, #15
 80025d2:	f004 fa6c 	bl	8006aae <ST7735_WriteString>
			HAL_Delay(1500);
 80025d6:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80025da:	f005 f8dd 	bl	8007798 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 80025de:	2300      	movs	r3, #0
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2326      	movs	r3, #38	; 0x26
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	215a      	movs	r1, #90	; 0x5a
 80025e8:	2000      	movs	r0, #0
 80025ea:	f004 fb55 	bl	8006c98 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80025f4:	3301      	adds	r3, #1
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2200      	movs	r2, #0
 8002602:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <GAME_PLAY_Management+0x600>)
 8002608:	781b      	ldrb	r3, [r3, #0]
 800260a:	3301      	adds	r3, #1
 800260c:	b2da      	uxtb	r2, r3
 800260e:	4b24      	ldr	r3, [pc, #144]	; (80026a0 <GAME_PLAY_Management+0x600>)
 8002610:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8002618:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	3304      	adds	r3, #4
 800261e:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	693a      	ldr	r2, [r7, #16]
 8002624:	6839      	ldr	r1, [r7, #0]
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	f000 f83e 	bl	80026a8 <GAME_PLAY_Phase_Management>
		break;
 800262c:	e022      	b.n	8002674 <GAME_PLAY_Management+0x5d4>
	case Game_Ended:
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800262e:	2108      	movs	r1, #8
 8002630:	481c      	ldr	r0, [pc, #112]	; (80026a4 <GAME_PLAY_Management+0x604>)
 8002632:	f008 f9ff 	bl	800aa34 <HAL_GPIO_ReadPin>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d10a      	bne.n	8002652 <GAME_PLAY_Management+0x5b2>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800263c:	2000      	movs	r0, #0
 800263e:	f004 fc9d 	bl	8006f7c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8002642:	2000      	movs	r0, #0
 8002644:	f004 fcab 	bl	8006f9e <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	2201      	movs	r2, #1
 800264c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8002650:	e00f      	b.n	8002672 <GAME_PLAY_Management+0x5d2>
			state_game->PlyerAction_State = PS_AFK;
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	2200      	movs	r2, #0
 8002656:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8002672:	bf00      	nop
	}
}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	2400000c 	.word	0x2400000c
 8002680:	08010d50 	.word	0x08010d50
 8002684:	08010d3c 	.word	0x08010d3c
 8002688:	24000014 	.word	0x24000014
 800268c:	08010e1c 	.word	0x08010e1c
 8002690:	08010e24 	.word	0x08010e24
 8002694:	08010cfc 	.word	0x08010cfc
 8002698:	08010e2c 	.word	0x08010e2c
 800269c:	08010e34 	.word	0x08010e34
 80026a0:	24000176 	.word	0x24000176
 80026a4:	58020000 	.word	0x58020000

080026a8 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 80026a8:	b590      	push	{r4, r7, lr}
 80026aa:	f5ad 7d1d 	sub.w	sp, sp, #628	; 0x274
 80026ae:	af04      	add	r7, sp, #16
 80026b0:	f507 7418 	add.w	r4, r7, #608	; 0x260
 80026b4:	f5a4 7415 	sub.w	r4, r4, #596	; 0x254
 80026b8:	6020      	str	r0, [r4, #0]
 80026ba:	f507 7018 	add.w	r0, r7, #608	; 0x260
 80026be:	f5a0 7016 	sub.w	r0, r0, #600	; 0x258
 80026c2:	6001      	str	r1, [r0, #0]
 80026c4:	f507 7118 	add.w	r1, r7, #608	; 0x260
 80026c8:	f5a1 7117 	sub.w	r1, r1, #604	; 0x25c
 80026cc:	600a      	str	r2, [r1, #0]
 80026ce:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80026d2:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80026d6:	6013      	str	r3, [r2, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 80026d8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026dc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 80026e6:	f887 324b 	strb.w	r3, [r7, #587]	; 0x24b

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 80026ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80026ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 80026f8:	f887 324a 	strb.w	r3, [r7, #586]	; 0x24a

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 80026fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002700:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 800270a:	f887 3249 	strb.w	r3, [r7, #585]	; 0x249
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	Player dummyPlayer = {0};
 800270e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002712:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8002716:	4618      	mov	r0, r3
 8002718:	f44f 7307 	mov.w	r3, #540	; 0x21c
 800271c:	461a      	mov	r2, r3
 800271e:	2100      	movs	r1, #0
 8002720:	f00d fe6a 	bl	80103f8 <memset>

	switch (PAS) {
 8002724:	f897 324b 	ldrb.w	r3, [r7, #587]	; 0x24b
 8002728:	2b03      	cmp	r3, #3
 800272a:	f203 8379 	bhi.w	8005e20 <GAME_PLAY_Phase_Management+0x3778>
 800272e:	a201      	add	r2, pc, #4	; (adr r2, 8002734 <GAME_PLAY_Phase_Management+0x8c>)
 8002730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002734:	08005e13 	.word	0x08005e13
 8002738:	08002745 	.word	0x08002745
 800273c:	0800289d 	.word	0x0800289d
 8002740:	0800493b 	.word	0x0800493b
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 8002744:	48b5      	ldr	r0, [pc, #724]	; (8002a1c <GAME_PLAY_Phase_Management+0x374>)
 8002746:	f00b fafb 	bl	800dd40 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 800274a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800274e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8002752:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002756:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800275a:	6811      	ldr	r1, [r2, #0]
 800275c:	6818      	ldr	r0, [r3, #0]
 800275e:	f7ff fa75 	bl	8001c4c <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8002762:	4baf      	ldr	r3, [pc, #700]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 8002764:	2200      	movs	r2, #0
 8002766:	9202      	str	r2, [sp, #8]
 8002768:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	9200      	str	r2, [sp, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4aab      	ldr	r2, [pc, #684]	; (8002a24 <GAME_PLAY_Phase_Management+0x37c>)
 8002776:	2123      	movs	r1, #35	; 0x23
 8002778:	206e      	movs	r0, #110	; 0x6e
 800277a:	f004 f998 	bl	8006aae <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800277e:	4ba8      	ldr	r3, [pc, #672]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 8002780:	2200      	movs	r2, #0
 8002782:	9202      	str	r2, [sp, #8]
 8002784:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	685a      	ldr	r2, [r3, #4]
 800278c:	9200      	str	r2, [sp, #0]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4aa4      	ldr	r2, [pc, #656]	; (8002a24 <GAME_PLAY_Phase_Management+0x37c>)
 8002792:	2123      	movs	r1, #35	; 0x23
 8002794:	206e      	movs	r0, #110	; 0x6e
 8002796:	f004 f9d4 	bl	8006b42 <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800279a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800279e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	781a      	ldrb	r2, [r3, #0]
 80027a6:	4b9e      	ldr	r3, [pc, #632]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 80027a8:	9203      	str	r2, [sp, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	9202      	str	r2, [sp, #8]
 80027ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027b2:	9201      	str	r2, [sp, #4]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	9200      	str	r2, [sp, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a9b      	ldr	r2, [pc, #620]	; (8002a28 <GAME_PLAY_Phase_Management+0x380>)
 80027bc:	215a      	movs	r1, #90	; 0x5a
 80027be:	2005      	movs	r0, #5
 80027c0:	f004 fa09 	bl	8006bd6 <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80027c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80027c8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	4b93      	ldr	r3, [pc, #588]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 80027d2:	9203      	str	r2, [sp, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	9202      	str	r2, [sp, #8]
 80027d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80027dc:	9201      	str	r2, [sp, #4]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	9200      	str	r2, [sp, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a91      	ldr	r2, [pc, #580]	; (8002a2c <GAME_PLAY_Phase_Management+0x384>)
 80027e6:	215a      	movs	r1, #90	; 0x5a
 80027e8:	2005      	movs	r0, #5
 80027ea:	f004 f9f4 	bl	8006bd6 <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80027ee:	2101      	movs	r1, #1
 80027f0:	488f      	ldr	r0, [pc, #572]	; (8002a30 <GAME_PLAY_Phase_Management+0x388>)
 80027f2:	f008 f91f 	bl	800aa34 <HAL_GPIO_ReadPin>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f043 830c 	bne.w	8005e16 <GAME_PLAY_Phase_Management+0x376e>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 80027fe:	2000      	movs	r0, #0
 8002800:	f004 fbbc 	bl	8006f7c <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8002804:	2000      	movs	r0, #0
 8002806:	f004 fbca 	bl	8006f9e <ST7735_FillScreen1>
			MainGUI();
 800280a:	f7ff f95f 	bl	8001acc <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 800280e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002812:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	2202      	movs	r2, #2
 800281a:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800281e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002822:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2201      	movs	r2, #1
 800282a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 800282e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002832:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2200      	movs	r2, #0
 800283a:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 800283c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002840:	f004 ffaa 	bl	8007798 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002844:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002848:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	781a      	ldrb	r2, [r3, #0]
 8002850:	4b73      	ldr	r3, [pc, #460]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 8002852:	9203      	str	r2, [sp, #12]
 8002854:	2200      	movs	r2, #0
 8002856:	9202      	str	r2, [sp, #8]
 8002858:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800285c:	9201      	str	r2, [sp, #4]
 800285e:	685a      	ldr	r2, [r3, #4]
 8002860:	9200      	str	r2, [sp, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a70      	ldr	r2, [pc, #448]	; (8002a28 <GAME_PLAY_Phase_Management+0x380>)
 8002866:	215a      	movs	r1, #90	; 0x5a
 8002868:	2005      	movs	r0, #5
 800286a:	f004 f9b4 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800286e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002872:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	4b69      	ldr	r3, [pc, #420]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 800287c:	9203      	str	r2, [sp, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	9202      	str	r2, [sp, #8]
 8002882:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002886:	9201      	str	r2, [sp, #4]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a69      	ldr	r2, [pc, #420]	; (8002a34 <GAME_PLAY_Phase_Management+0x38c>)
 8002890:	215a      	movs	r1, #90	; 0x5a
 8002892:	2005      	movs	r0, #5
 8002894:	f004 f99f 	bl	8006bd6 <ST7735_WriteStringNSS>
		}
		break;
 8002898:	f003 babd 	b.w	8005e16 <GAME_PLAY_Phase_Management+0x376e>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 800289c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028a0:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80028a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028a8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80028ac:	6811      	ldr	r1, [r2, #0]
 80028ae:	6818      	ldr	r0, [r3, #0]
 80028b0:	f7ff f9cc 	bl	8001c4c <LCDvalue>

		switch (PMS)
 80028b4:	f897 324a 	ldrb.w	r3, [r7, #586]	; 0x24a
 80028b8:	2b07      	cmp	r3, #7
 80028ba:	f203 82ae 	bhi.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
 80028be:	a201      	add	r2, pc, #4	; (adr r2, 80028c4 <GAME_PLAY_Phase_Management+0x21c>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	08004911 	.word	0x08004911
 80028c8:	080028e5 	.word	0x080028e5
 80028cc:	08002a99 	.word	0x08002a99
 80028d0:	08002c03 	.word	0x08002c03
 80028d4:	08003189 	.word	0x08003189
 80028d8:	0800389d 	.word	0x0800389d
 80028dc:	0800368d 	.word	0x0800368d
 80028e0:	0800346d 	.word	0x0800346d
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 80028e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80028e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	f040 80a7 	bne.w	8002a44 <GAME_PLAY_Phase_Management+0x39c>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80028f6:	4b4a      	ldr	r3, [pc, #296]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	9202      	str	r2, [sp, #8]
 80028fc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002900:	9201      	str	r2, [sp, #4]
 8002902:	685a      	ldr	r2, [r3, #4]
 8002904:	9200      	str	r2, [sp, #0]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a4b      	ldr	r2, [pc, #300]	; (8002a38 <GAME_PLAY_Phase_Management+0x390>)
 800290a:	2123      	movs	r1, #35	; 0x23
 800290c:	206e      	movs	r0, #110	; 0x6e
 800290e:	f004 f8ce 	bl	8006aae <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8002912:	4b43      	ldr	r3, [pc, #268]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 8002914:	2200      	movs	r2, #0
 8002916:	9202      	str	r2, [sp, #8]
 8002918:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800291c:	9201      	str	r2, [sp, #4]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	9200      	str	r2, [sp, #0]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a44      	ldr	r2, [pc, #272]	; (8002a38 <GAME_PLAY_Phase_Management+0x390>)
 8002926:	2123      	movs	r1, #35	; 0x23
 8002928:	206e      	movs	r0, #110	; 0x6e
 800292a:	f004 f90a 	bl	8006b42 <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800292e:	2101      	movs	r1, #1
 8002930:	483f      	ldr	r0, [pc, #252]	; (8002a30 <GAME_PLAY_Phase_Management+0x388>)
 8002932:	f008 f87f 	bl	800aa34 <HAL_GPIO_ReadPin>
 8002936:	4603      	mov	r3, r0
 8002938:	2b00      	cmp	r3, #0
 800293a:	d15b      	bne.n	80029f4 <GAME_PLAY_Phase_Management+0x34c>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 800293c:	2000      	movs	r0, #0
 800293e:	f004 fb1d 	bl	8006f7c <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8002942:	2000      	movs	r0, #0
 8002944:	f004 fb2b 	bl	8006f9e <ST7735_FillScreen1>
					MainGUI();
 8002948:	f7ff f8c0 	bl	8001acc <MainGUI>
					state_game->action = 50;
 800294c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002950:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	2232      	movs	r2, #50	; 0x32
 8002958:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 800295a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800295e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	2200      	movs	r2, #0
 8002966:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 800296a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800296e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002972:	6818      	ldr	r0, [r3, #0]
 8002974:	f7ff f889 	bl	8001a8a <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8002978:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800297c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	2203      	movs	r2, #3
 8002984:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8002988:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800298c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	2201      	movs	r2, #1
 8002994:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8002998:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800299c:	f004 fefc 	bl	8007798 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 80029a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029a4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	781a      	ldrb	r2, [r3, #0]
 80029ac:	4b1c      	ldr	r3, [pc, #112]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 80029ae:	9203      	str	r2, [sp, #12]
 80029b0:	2200      	movs	r2, #0
 80029b2:	9202      	str	r2, [sp, #8]
 80029b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029b8:	9201      	str	r2, [sp, #4]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	9200      	str	r2, [sp, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1e      	ldr	r2, [pc, #120]	; (8002a3c <GAME_PLAY_Phase_Management+0x394>)
 80029c2:	215a      	movs	r1, #90	; 0x5a
 80029c4:	2005      	movs	r0, #5
 80029c6:	f004 f906 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 80029ca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029ce:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	781a      	ldrb	r2, [r3, #0]
 80029d6:	4b12      	ldr	r3, [pc, #72]	; (8002a20 <GAME_PLAY_Phase_Management+0x378>)
 80029d8:	9203      	str	r2, [sp, #12]
 80029da:	2200      	movs	r2, #0
 80029dc:	9202      	str	r2, [sp, #8]
 80029de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029e2:	9201      	str	r2, [sp, #4]
 80029e4:	685a      	ldr	r2, [r3, #4]
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a15      	ldr	r2, [pc, #84]	; (8002a40 <GAME_PLAY_Phase_Management+0x398>)
 80029ec:	215a      	movs	r1, #90	; 0x5a
 80029ee:	2005      	movs	r0, #5
 80029f0:	f004 f8f1 	bl	8006bd6 <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80029f4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80029f8:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80029fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a00:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8002a04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a08:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	6809      	ldr	r1, [r1, #0]
 8002a10:	6818      	ldr	r0, [r3, #0]
 8002a12:	f7fd fe9f 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8002a16:	f001 bf7e 	b.w	8004916 <GAME_PLAY_Phase_Management+0x226e>
 8002a1a:	bf00      	nop
 8002a1c:	240002e8 	.word	0x240002e8
 8002a20:	2400000c 	.word	0x2400000c
 8002a24:	08010e40 	.word	0x08010e40
 8002a28:	08010e44 	.word	0x08010e44
 8002a2c:	08010e54 	.word	0x08010e54
 8002a30:	58020800 	.word	0x58020800
 8002a34:	08010e60 	.word	0x08010e60
 8002a38:	08010e70 	.word	0x08010e70
 8002a3c:	08010e74 	.word	0x08010e74
 8002a40:	08010e84 	.word	0x08010e84
			else if (state_game->action == 1)
 8002a44:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a48:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	f041 8760 	bne.w	8004916 <GAME_PLAY_Phase_Management+0x226e>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002a56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2300      	movs	r3, #0
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	2326      	movs	r3, #38	; 0x26
 8002a6a:	2280      	movs	r2, #128	; 0x80
 8002a6c:	215a      	movs	r1, #90	; 0x5a
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f004 f9fa 	bl	8006e68 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8002a74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	2200      	movs	r2, #0
 8002a80:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8002a84:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a88:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	2202      	movs	r2, #2
 8002a90:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002a94:	f001 bf3f 	b.w	8004916 <GAME_PLAY_Phase_Management+0x226e>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002a98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002a9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	4ba6      	ldr	r3, [pc, #664]	; (8002d40 <GAME_PLAY_Phase_Management+0x698>)
 8002aa6:	9203      	str	r2, [sp, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	9202      	str	r2, [sp, #8]
 8002aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ab0:	9201      	str	r2, [sp, #4]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	9200      	str	r2, [sp, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4aa2      	ldr	r2, [pc, #648]	; (8002d44 <GAME_PLAY_Phase_Management+0x69c>)
 8002aba:	215a      	movs	r1, #90	; 0x5a
 8002abc:	2005      	movs	r0, #5
 8002abe:	f004 f88a 	bl	8006bd6 <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002ac2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ac6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002ad0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8002ad4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ad8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002ae2:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

			if (state_game->action == 1)
 8002ae6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002aea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	781b      	ldrb	r3, [r3, #0]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d147      	bne.n	8002b86 <GAME_PLAY_Phase_Management+0x4de>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8002af6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002afa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	789b      	ldrb	r3, [r3, #2]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d10c      	bne.n	8002b20 <GAME_PLAY_Phase_Management+0x478>
					ptrYugiohCard_src->cardState = 0;
 8002b06:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002b0e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b12:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2202      	movs	r2, #2
 8002b1a:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8002b1c:	f001 befe 	b.w	800491c <GAME_PLAY_Phase_Management+0x2274>
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8002b20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	785b      	ldrb	r3, [r3, #1]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	f041 86f5 	bne.w	800491c <GAME_PLAY_Phase_Management+0x2274>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8002b32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002b3a:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002b3e:	6818      	ldr	r0, [r3, #0]
 8002b40:	f7fe ff56 	bl	80019f0 <YUGIOH_Check_Spell_On_board>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f887 322e 	strb.w	r3, [r7, #558]	; 0x22e
					if (idxC != 255) {
 8002b4a:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002b4e:	2bff      	cmp	r3, #255	; 0xff
 8002b50:	d00c      	beq.n	8002b6c <GAME_PLAY_Phase_Management+0x4c4>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8002b52:	f897 322e 	ldrb.w	r3, [r7, #558]	; 0x22e
 8002b56:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002b5a:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002b5e:	011b      	lsls	r3, r3, #4
 8002b60:	3308      	adds	r3, #8
 8002b62:	6812      	ldr	r2, [r2, #0]
 8002b64:	4413      	add	r3, r2
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fdc3 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8002b6c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002b70:	2201      	movs	r2, #1
 8002b72:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8002b74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b78:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	2202      	movs	r2, #2
 8002b80:	701a      	strb	r2, [r3, #0]
			break;
 8002b82:	f001 becb 	b.w	800491c <GAME_PLAY_Phase_Management+0x2274>
			else if (state_game->action == 2)
 8002b86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b8a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	781b      	ldrb	r3, [r3, #0]
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f041 86c2 	bne.w	800491c <GAME_PLAY_Phase_Management+0x2274>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002b98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002b9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	9301      	str	r3, [sp, #4]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	2326      	movs	r3, #38	; 0x26
 8002bac:	2280      	movs	r2, #128	; 0x80
 8002bae:	215a      	movs	r1, #90	; 0x5a
 8002bb0:	2000      	movs	r0, #0
 8002bb2:	f004 f959 	bl	8006e68 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002bb6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bba:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2326      	movs	r3, #38	; 0x26
 8002bca:	2280      	movs	r2, #128	; 0x80
 8002bcc:	215a      	movs	r1, #90	; 0x5a
 8002bce:	2000      	movs	r0, #0
 8002bd0:	f004 f94a 	bl	8006e68 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002bd4:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002bd8:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002bdc:	f7fd fd52 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8002be0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002be4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	2203      	movs	r2, #3
 8002bec:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8002bee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002bf2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2203      	movs	r2, #3
 8002bfa:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002bfe:	f001 be8d 	b.w	800491c <GAME_PLAY_Phase_Management+0x2274>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8002c02:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c06:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002c10:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (state_game->action == 3)
 8002c14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c18:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	781b      	ldrb	r3, [r3, #0]
 8002c20:	2b03      	cmp	r3, #3
 8002c22:	f041 867e 	bne.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8002c26:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002c2a:	785b      	ldrb	r3, [r3, #1]
 8002c2c:	2b03      	cmp	r3, #3
 8002c2e:	f040 8093 	bne.w	8002d58 <GAME_PLAY_Phase_Management+0x6b0>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002c32:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c36:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	781a      	ldrb	r2, [r3, #0]
 8002c3e:	4b40      	ldr	r3, [pc, #256]	; (8002d40 <GAME_PLAY_Phase_Management+0x698>)
 8002c40:	9203      	str	r2, [sp, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	9202      	str	r2, [sp, #8]
 8002c46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c4a:	9201      	str	r2, [sp, #4]
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	9200      	str	r2, [sp, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a3d      	ldr	r2, [pc, #244]	; (8002d48 <GAME_PLAY_Phase_Management+0x6a0>)
 8002c54:	215a      	movs	r1, #90	; 0x5a
 8002c56:	2005      	movs	r0, #5
 8002c58:	f003 ffbd 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002c5c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c60:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	781a      	ldrb	r2, [r3, #0]
 8002c68:	4b35      	ldr	r3, [pc, #212]	; (8002d40 <GAME_PLAY_Phase_Management+0x698>)
 8002c6a:	9203      	str	r2, [sp, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	9202      	str	r2, [sp, #8]
 8002c70:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c74:	9201      	str	r2, [sp, #4]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	9200      	str	r2, [sp, #0]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a33      	ldr	r2, [pc, #204]	; (8002d4c <GAME_PLAY_Phase_Management+0x6a4>)
 8002c7e:	215a      	movs	r1, #90	; 0x5a
 8002c80:	2005      	movs	r0, #5
 8002c82:	f003 ffa8 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002c86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002c8a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	781a      	ldrb	r2, [r3, #0]
 8002c92:	4b2b      	ldr	r3, [pc, #172]	; (8002d40 <GAME_PLAY_Phase_Management+0x698>)
 8002c94:	9203      	str	r2, [sp, #12]
 8002c96:	2200      	movs	r2, #0
 8002c98:	9202      	str	r2, [sp, #8]
 8002c9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c9e:	9201      	str	r2, [sp, #4]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	9200      	str	r2, [sp, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	4a2a      	ldr	r2, [pc, #168]	; (8002d50 <GAME_PLAY_Phase_Management+0x6a8>)
 8002ca8:	2169      	movs	r1, #105	; 0x69
 8002caa:	2005      	movs	r0, #5
 8002cac:	f003 ff93 	bl	8006bd6 <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8002cb0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002cb8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002cbc:	799a      	ldrb	r2, [r3, #6]
 8002cbe:	4b25      	ldr	r3, [pc, #148]	; (8002d54 <GAME_PLAY_Phase_Management+0x6ac>)
 8002cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8002cc4:	0899      	lsrs	r1, r3, #2
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	005b      	lsls	r3, r3, #1
 8002cca:	440b      	add	r3, r1
 8002ccc:	005b      	lsls	r3, r3, #1
 8002cce:	1ad3      	subs	r3, r2, r3
 8002cd0:	f887 322f 	strb.w	r3, [r7, #559]	; 0x22f
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002cd4:	f897 322f 	ldrb.w	r3, [r7, #559]	; 0x22f
 8002cd8:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002cdc:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002ce0:	011b      	lsls	r3, r3, #4
 8002ce2:	3308      	adds	r3, #8
 8002ce4:	6812      	ldr	r2, [r2, #0]
 8002ce6:	4413      	add	r3, r2
 8002ce8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002cec:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002cf0:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002cf4:	f7fd fcc6 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002cf8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002cfc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d00:	6818      	ldr	r0, [r3, #0]
 8002d02:	f7fe fb97 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002d06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d0a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002d14:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002d18:	4618      	mov	r0, r3
 8002d1a:	f7fd fcb3 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8002d1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002d2c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d30:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	2201      	movs	r2, #1
 8002d38:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8002d3c:	f001 bdf1 	b.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
 8002d40:	2400000c 	.word	0x2400000c
 8002d44:	08010e94 	.word	0x08010e94
 8002d48:	08010ea4 	.word	0x08010ea4
 8002d4c:	08010eb4 	.word	0x08010eb4
 8002d50:	08010ec4 	.word	0x08010ec4
 8002d54:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 2)
 8002d58:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d5c:	785b      	ldrb	r3, [r3, #1]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	f040 8146 	bne.w	8002ff0 <GAME_PLAY_Phase_Management+0x948>
					state_game->count_chain = 1;
 8002d64:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d68:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2201      	movs	r2, #1
 8002d70:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8002d72:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002d76:	789b      	ldrb	r3, [r3, #2]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	f040 80a7 	bne.w	8002ecc <GAME_PLAY_Phase_Management+0x824>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002d7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002d82:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	781a      	ldrb	r2, [r3, #0]
 8002d8a:	4b92      	ldr	r3, [pc, #584]	; (8002fd4 <GAME_PLAY_Phase_Management+0x92c>)
 8002d8c:	9203      	str	r2, [sp, #12]
 8002d8e:	2200      	movs	r2, #0
 8002d90:	9202      	str	r2, [sp, #8]
 8002d92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d96:	9201      	str	r2, [sp, #4]
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	9200      	str	r2, [sp, #0]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a8e      	ldr	r2, [pc, #568]	; (8002fd8 <GAME_PLAY_Phase_Management+0x930>)
 8002da0:	215a      	movs	r1, #90	; 0x5a
 8002da2:	2005      	movs	r0, #5
 8002da4:	f003 ff17 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002da8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dac:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	781a      	ldrb	r2, [r3, #0]
 8002db4:	4b87      	ldr	r3, [pc, #540]	; (8002fd4 <GAME_PLAY_Phase_Management+0x92c>)
 8002db6:	9203      	str	r2, [sp, #12]
 8002db8:	2200      	movs	r2, #0
 8002dba:	9202      	str	r2, [sp, #8]
 8002dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dc0:	9201      	str	r2, [sp, #4]
 8002dc2:	685a      	ldr	r2, [r3, #4]
 8002dc4:	9200      	str	r2, [sp, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a84      	ldr	r2, [pc, #528]	; (8002fdc <GAME_PLAY_Phase_Management+0x934>)
 8002dca:	215a      	movs	r1, #90	; 0x5a
 8002dcc:	2005      	movs	r0, #5
 8002dce:	f003 ff02 	bl	8006bd6 <ST7735_WriteStringNSS>
						state_game->action = 4;
 8002dd2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002dd6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2204      	movs	r2, #4
 8002dde:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8002de0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002de4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	f7fe fbce 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8002dee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002df2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002e02:	f7fd fc3f 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8002e06:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e0a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e14:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002e18:	6812      	ldr	r2, [r2, #0]
 8002e1a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8002e1e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e22:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002e2c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8002e30:	6812      	ldr	r2, [r2, #0]
 8002e32:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8002e36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e3a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002e44:	3301      	adds	r3, #1
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e4c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002e56:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e5a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	9301      	str	r3, [sp, #4]
 8002e64:	2300      	movs	r3, #0
 8002e66:	9300      	str	r3, [sp, #0]
 8002e68:	2326      	movs	r3, #38	; 0x26
 8002e6a:	2280      	movs	r2, #128	; 0x80
 8002e6c:	215a      	movs	r1, #90	; 0x5a
 8002e6e:	2000      	movs	r0, #0
 8002e70:	f003 fffa 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002e74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e78:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	9301      	str	r3, [sp, #4]
 8002e82:	2300      	movs	r3, #0
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	2326      	movs	r3, #38	; 0x26
 8002e88:	2280      	movs	r2, #128	; 0x80
 8002e8a:	215a      	movs	r1, #90	; 0x5a
 8002e8c:	2000      	movs	r0, #0
 8002e8e:	f003 ffeb 	bl	8006e68 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002e92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002e96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002e9a:	6818      	ldr	r0, [r3, #0]
 8002e9c:	f7fe faca 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002ea0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ea4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002eae:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fbe6 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8002eb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ebc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	2207      	movs	r2, #7
 8002ec4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002ec8:	f001 bd2b 	b.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002ecc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002ed0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	781a      	ldrb	r2, [r3, #0]
 8002ed8:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <GAME_PLAY_Phase_Management+0x92c>)
 8002eda:	9203      	str	r2, [sp, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	9202      	str	r2, [sp, #8]
 8002ee0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee4:	9201      	str	r2, [sp, #4]
 8002ee6:	685a      	ldr	r2, [r3, #4]
 8002ee8:	9200      	str	r2, [sp, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a3c      	ldr	r2, [pc, #240]	; (8002fe0 <GAME_PLAY_Phase_Management+0x938>)
 8002eee:	215a      	movs	r1, #90	; 0x5a
 8002ef0:	2005      	movs	r0, #5
 8002ef2:	f003 fe70 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002ef6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002efa:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	781a      	ldrb	r2, [r3, #0]
 8002f02:	4b34      	ldr	r3, [pc, #208]	; (8002fd4 <GAME_PLAY_Phase_Management+0x92c>)
 8002f04:	9203      	str	r2, [sp, #12]
 8002f06:	2200      	movs	r2, #0
 8002f08:	9202      	str	r2, [sp, #8]
 8002f0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f0e:	9201      	str	r2, [sp, #4]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	9200      	str	r2, [sp, #0]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a33      	ldr	r2, [pc, #204]	; (8002fe4 <GAME_PLAY_Phase_Management+0x93c>)
 8002f18:	215a      	movs	r1, #90	; 0x5a
 8002f1a:	2005      	movs	r0, #5
 8002f1c:	f003 fe5b 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002f20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f24:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	781a      	ldrb	r2, [r3, #0]
 8002f2c:	4b29      	ldr	r3, [pc, #164]	; (8002fd4 <GAME_PLAY_Phase_Management+0x92c>)
 8002f2e:	9203      	str	r2, [sp, #12]
 8002f30:	2200      	movs	r2, #0
 8002f32:	9202      	str	r2, [sp, #8]
 8002f34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f38:	9201      	str	r2, [sp, #4]
 8002f3a:	685a      	ldr	r2, [r3, #4]
 8002f3c:	9200      	str	r2, [sp, #0]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a29      	ldr	r2, [pc, #164]	; (8002fe8 <GAME_PLAY_Phase_Management+0x940>)
 8002f42:	2169      	movs	r1, #105	; 0x69
 8002f44:	2005      	movs	r0, #5
 8002f46:	f003 fe46 	bl	8006bd6 <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002f4a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002f4e:	799a      	ldrb	r2, [r3, #6]
 8002f50:	4b26      	ldr	r3, [pc, #152]	; (8002fec <GAME_PLAY_Phase_Management+0x944>)
 8002f52:	fba3 1302 	umull	r1, r3, r3, r2
 8002f56:	0899      	lsrs	r1, r3, #2
 8002f58:	460b      	mov	r3, r1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	440b      	add	r3, r1
 8002f5e:	005b      	lsls	r3, r3, #1
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	f887 3230 	strb.w	r3, [r7, #560]	; 0x230
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002f66:	f897 3230 	ldrb.w	r3, [r7, #560]	; 0x230
 8002f6a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8002f6e:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8002f72:	011b      	lsls	r3, r3, #4
 8002f74:	3308      	adds	r3, #8
 8002f76:	6812      	ldr	r2, [r2, #0]
 8002f78:	4413      	add	r3, r2
 8002f7a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002f7e:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8002f82:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8002f86:	f7fd fb7d 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8002f8a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f8e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002f92:	6818      	ldr	r0, [r3, #0]
 8002f94:	f7fe fa4e 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8002f98:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002f9c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002fa6:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fd fb6a 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8002fb0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fb4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	2200      	movs	r2, #0
 8002fbc:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8002fbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8002fc2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002fce:	f001 bca8 	b.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
 8002fd2:	bf00      	nop
 8002fd4:	2400000c 	.word	0x2400000c
 8002fd8:	08010ecc 	.word	0x08010ecc
 8002fdc:	08010ee4 	.word	0x08010ee4
 8002fe0:	08010ea4 	.word	0x08010ea4
 8002fe4:	08010eb4 	.word	0x08010eb4
 8002fe8:	08010ec4 	.word	0x08010ec4
 8002fec:	aaaaaaab 	.word	0xaaaaaaab
				else if (ptrYugiohCard_src->cardType == 1)
 8002ff0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8002ff4:	785b      	ldrb	r3, [r3, #1]
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	f041 8493 	bne.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
					state_game->test = 2;
 8002ffc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003000:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2202      	movs	r2, #2
 8003008:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 800300c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003010:	78db      	ldrb	r3, [r3, #3]
 8003012:	2b06      	cmp	r3, #6
 8003014:	f200 80a0 	bhi.w	8003158 <GAME_PLAY_Phase_Management+0xab0>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003018:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800301c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	781a      	ldrb	r2, [r3, #0]
 8003024:	4b8b      	ldr	r3, [pc, #556]	; (8003254 <GAME_PLAY_Phase_Management+0xbac>)
 8003026:	9203      	str	r2, [sp, #12]
 8003028:	2200      	movs	r2, #0
 800302a:	9202      	str	r2, [sp, #8]
 800302c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003030:	9201      	str	r2, [sp, #4]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	9200      	str	r2, [sp, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a87      	ldr	r2, [pc, #540]	; (8003258 <GAME_PLAY_Phase_Management+0xbb0>)
 800303a:	215a      	movs	r1, #90	; 0x5a
 800303c:	2005      	movs	r0, #5
 800303e:	f003 fdca 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003042:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003046:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	781a      	ldrb	r2, [r3, #0]
 800304e:	4b81      	ldr	r3, [pc, #516]	; (8003254 <GAME_PLAY_Phase_Management+0xbac>)
 8003050:	9203      	str	r2, [sp, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	9202      	str	r2, [sp, #8]
 8003056:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800305a:	9201      	str	r2, [sp, #4]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	9200      	str	r2, [sp, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a7e      	ldr	r2, [pc, #504]	; (800325c <GAME_PLAY_Phase_Management+0xbb4>)
 8003064:	2169      	movs	r1, #105	; 0x69
 8003066:	2005      	movs	r0, #5
 8003068:	f003 fdb5 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800306c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003070:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	781a      	ldrb	r2, [r3, #0]
 8003078:	4b76      	ldr	r3, [pc, #472]	; (8003254 <GAME_PLAY_Phase_Management+0xbac>)
 800307a:	9203      	str	r2, [sp, #12]
 800307c:	2200      	movs	r2, #0
 800307e:	9202      	str	r2, [sp, #8]
 8003080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003084:	9201      	str	r2, [sp, #4]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	9200      	str	r2, [sp, #0]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a74      	ldr	r2, [pc, #464]	; (8003260 <GAME_PLAY_Phase_Management+0xbb8>)
 800308e:	215a      	movs	r1, #90	; 0x5a
 8003090:	2005      	movs	r0, #5
 8003092:	f003 fda0 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003096:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800309a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	781a      	ldrb	r2, [r3, #0]
 80030a2:	4b6c      	ldr	r3, [pc, #432]	; (8003254 <GAME_PLAY_Phase_Management+0xbac>)
 80030a4:	9203      	str	r2, [sp, #12]
 80030a6:	2200      	movs	r2, #0
 80030a8:	9202      	str	r2, [sp, #8]
 80030aa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030ae:	9201      	str	r2, [sp, #4]
 80030b0:	685a      	ldr	r2, [r3, #4]
 80030b2:	9200      	str	r2, [sp, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a69      	ldr	r2, [pc, #420]	; (800325c <GAME_PLAY_Phase_Management+0xbb4>)
 80030b8:	2169      	movs	r1, #105	; 0x69
 80030ba:	2005      	movs	r0, #5
 80030bc:	f003 fd8b 	bl	8006bd6 <ST7735_WriteStringNSS>
						state_game->test = 1;
 80030c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80030c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80030d0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80030d4:	799a      	ldrb	r2, [r3, #6]
 80030d6:	4b63      	ldr	r3, [pc, #396]	; (8003264 <GAME_PLAY_Phase_Management+0xbbc>)
 80030d8:	fba3 1302 	umull	r1, r3, r3, r2
 80030dc:	0899      	lsrs	r1, r3, #2
 80030de:	460b      	mov	r3, r1
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	440b      	add	r3, r1
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	1ad3      	subs	r3, r2, r3
 80030e8:	f887 3231 	strb.w	r3, [r7, #561]	; 0x231
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80030ec:	f897 3231 	ldrb.w	r3, [r7, #561]	; 0x231
 80030f0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80030f4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	3308      	adds	r3, #8
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4413      	add	r3, r2
 8003100:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003104:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003108:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 800310c:	f7fd faba 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003110:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003114:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003118:	6818      	ldr	r0, [r3, #0]
 800311a:	f7fe f98b 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 800311e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003122:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800312c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003130:	4618      	mov	r0, r3
 8003132:	f7fd faa7 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8003136:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800313a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003144:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003148:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003154:	f001 bbe5 	b.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003158:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800315c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003160:	6818      	ldr	r0, [r3, #0]
 8003162:	f7fe f967 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8003166:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800316a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2204      	movs	r2, #4
 8003172:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8003174:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003178:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	2204      	movs	r2, #4
 8003180:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003184:	f001 bbcd 	b.w	8004922 <GAME_PLAY_Phase_Management+0x227a>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8003188:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800318c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003196:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

			if (playerAtk->noBTN == GPIO_PIN_RESET)
 800319a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800319e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	789b      	ldrb	r3, [r3, #2]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d11f      	bne.n	80031ea <GAME_PLAY_Phase_Management+0xb42>
			{
				state_game->action = 0;
 80031aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ae:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2200      	movs	r2, #0
 80031b6:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80031b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
				YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80031c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031d0:	6818      	ldr	r0, [r3, #0]
 80031d2:	f7fe f92f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_clear(&playerAtk->CardInPlayed);
 80031d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7fd fa84 	bl	80006f2 <YUGIOH_card_clear>
			}

			if (state_game->action == 4)
 80031ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031ee:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b04      	cmp	r3, #4
 80031f8:	d111      	bne.n	800321e <GAME_PLAY_Phase_Management+0xb76>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 80031fa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80031fe:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003202:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003206:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800320a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800320e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003212:	6812      	ldr	r2, [r2, #0]
 8003214:	6809      	ldr	r1, [r1, #0]
 8003216:	6818      	ldr	r0, [r3, #0]
 8003218:	f7fd fbac 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 800321c:	e0d0      	b.n	80033c0 <GAME_PLAY_Phase_Management+0xd18>
			}
			else if (state_game->action == 5)
 800321e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003222:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b05      	cmp	r3, #5
 800322c:	d11c      	bne.n	8003268 <GAME_PLAY_Phase_Management+0xbc0>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card_Monster_SPS(RFIDmain,state_game,playerAtk);
 800322e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003232:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003236:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800323a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800323e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003242:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003246:	6812      	ldr	r2, [r2, #0]
 8003248:	6809      	ldr	r1, [r1, #0]
 800324a:	6818      	ldr	r0, [r3, #0]
 800324c:	f7fd fb92 	bl	8000974 <Player_Reading_Card_Monster_SPS>
 8003250:	e0b6      	b.n	80033c0 <GAME_PLAY_Phase_Management+0xd18>
 8003252:	bf00      	nop
 8003254:	2400000c 	.word	0x2400000c
 8003258:	08010ef8 	.word	0x08010ef8
 800325c:	08010f04 	.word	0x08010f04
 8003260:	08010f10 	.word	0x08010f10
 8003264:	aaaaaaab 	.word	0xaaaaaaab
			}
			else if (state_game->action == 6)
 8003268:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800326c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b06      	cmp	r3, #6
 8003276:	f040 80a3 	bne.w	80033c0 <GAME_PLAY_Phase_Management+0xd18>
			{
				uint8_t monsterflag = 0 ;
 800327a:	2300      	movs	r3, #0
 800327c:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8003280:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003284:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800328e:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8003292:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8003296:	78db      	ldrb	r3, [r3, #3]
 8003298:	2b04      	cmp	r3, #4
 800329a:	d804      	bhi.n	80032a6 <GAME_PLAY_Phase_Management+0xbfe>
				{
					monsterflag += 1;
 800329c:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80032a0:	3301      	adds	r3, #1
 80032a2:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}
				ptrYugiohCard_dst++;
 80032a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80032aa:	3310      	adds	r3, #16
 80032ac:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80032b0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80032b4:	78db      	ldrb	r3, [r3, #3]
 80032b6:	2b04      	cmp	r3, #4
 80032b8:	d804      	bhi.n	80032c4 <GAME_PLAY_Phase_Management+0xc1c>
				{
					monsterflag += 1;
 80032ba:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80032be:	3301      	adds	r3, #1
 80032c0:	f887 325b 	strb.w	r3, [r7, #603]	; 0x25b
				}

				if (monsterflag == 2)
 80032c4:	f897 325b 	ldrb.w	r3, [r7, #603]	; 0x25b
 80032c8:	2b02      	cmp	r3, #2
 80032ca:	d160      	bne.n	800338e <GAME_PLAY_Phase_Management+0xce6>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 80032cc:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80032d0:	799a      	ldrb	r2, [r3, #6]
 80032d2:	4b9c      	ldr	r3, [pc, #624]	; (8003544 <GAME_PLAY_Phase_Management+0xe9c>)
 80032d4:	fba3 1302 	umull	r1, r3, r3, r2
 80032d8:	0899      	lsrs	r1, r3, #2
 80032da:	460b      	mov	r3, r1
 80032dc:	005b      	lsls	r3, r3, #1
 80032de:	440b      	add	r3, r1
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	f887 3232 	strb.w	r3, [r7, #562]	; 0x232
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80032e8:	f897 3232 	ldrb.w	r3, [r7, #562]	; 0x232
 80032ec:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80032f0:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80032f4:	011b      	lsls	r3, r3, #4
 80032f6:	3308      	adds	r3, #8
 80032f8:	6812      	ldr	r2, [r2, #0]
 80032fa:	4413      	add	r3, r2
 80032fc:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003300:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8003304:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8003308:	f7fd f9bc 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 800330c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003310:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 800331a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800331e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003322:	4611      	mov	r1, r2
 8003324:	6818      	ldr	r0, [r3, #0]
 8003326:	f7fe f97c 	bl	8001622 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 800332a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800332e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f503 72dc 	add.w	r2, r3, #440	; 0x1b8
 8003338:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800333c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003340:	4611      	mov	r1, r2
 8003342:	6818      	ldr	r0, [r3, #0]
 8003344:	f7fe f96d 	bl	8001622 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003348:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800334c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003350:	6818      	ldr	r0, [r3, #0]
 8003352:	f7fe f86f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8003356:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800335a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003364:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003368:	4618      	mov	r0, r3
 800336a:	f7fd f98b 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800336e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003372:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800337c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003380:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 800338c:	e018      	b.n	80033c0 <GAME_PLAY_Phase_Management+0xd18>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 800338e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003392:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003396:	6818      	ldr	r0, [r3, #0]
 8003398:	f7fe f84c 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 800339c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80033aa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033ae:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80033b8:	4619      	mov	r1, r3
 80033ba:	4610      	mov	r0, r2
 80033bc:	f7fd f962 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80033c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033c4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	4b5e      	ldr	r3, [pc, #376]	; (8003548 <GAME_PLAY_Phase_Management+0xea0>)
 80033ce:	9203      	str	r2, [sp, #12]
 80033d0:	2200      	movs	r2, #0
 80033d2:	9202      	str	r2, [sp, #8]
 80033d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033d8:	9201      	str	r2, [sp, #4]
 80033da:	685a      	ldr	r2, [r3, #4]
 80033dc:	9200      	str	r2, [sp, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a5a      	ldr	r2, [pc, #360]	; (800354c <GAME_PLAY_Phase_Management+0xea4>)
 80033e2:	215a      	movs	r1, #90	; 0x5a
 80033e4:	2005      	movs	r0, #5
 80033e6:	f003 fbf6 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80033ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80033ee:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	781a      	ldrb	r2, [r3, #0]
 80033f6:	4b54      	ldr	r3, [pc, #336]	; (8003548 <GAME_PLAY_Phase_Management+0xea0>)
 80033f8:	9203      	str	r2, [sp, #12]
 80033fa:	2200      	movs	r2, #0
 80033fc:	9202      	str	r2, [sp, #8]
 80033fe:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003402:	9201      	str	r2, [sp, #4]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	9200      	str	r2, [sp, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a51      	ldr	r2, [pc, #324]	; (8003550 <GAME_PLAY_Phase_Management+0xea8>)
 800340c:	2169      	movs	r1, #105	; 0x69
 800340e:	2005      	movs	r0, #5
 8003410:	f003 fbe1 	bl	8006bd6 <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003414:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003418:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	781a      	ldrb	r2, [r3, #0]
 8003420:	4b49      	ldr	r3, [pc, #292]	; (8003548 <GAME_PLAY_Phase_Management+0xea0>)
 8003422:	9203      	str	r2, [sp, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	9202      	str	r2, [sp, #8]
 8003428:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800342c:	9201      	str	r2, [sp, #4]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	9200      	str	r2, [sp, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a47      	ldr	r2, [pc, #284]	; (8003554 <GAME_PLAY_Phase_Management+0xeac>)
 8003436:	215a      	movs	r1, #90	; 0x5a
 8003438:	2005      	movs	r0, #5
 800343a:	f003 fbcc 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800343e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003442:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	4b3f      	ldr	r3, [pc, #252]	; (8003548 <GAME_PLAY_Phase_Management+0xea0>)
 800344c:	9203      	str	r2, [sp, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	9202      	str	r2, [sp, #8]
 8003452:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003456:	9201      	str	r2, [sp, #4]
 8003458:	685a      	ldr	r2, [r3, #4]
 800345a:	9200      	str	r2, [sp, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a3c      	ldr	r2, [pc, #240]	; (8003550 <GAME_PLAY_Phase_Management+0xea8>)
 8003460:	2169      	movs	r1, #105	; 0x69
 8003462:	2005      	movs	r0, #5
 8003464:	f003 fbb7 	bl	8006bd6 <ST7735_WriteStringNSS>
			break;
 8003468:	f001 ba65 	b.w	8004936 <GAME_PLAY_Phase_Management+0x228e>
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800346c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003470:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	781a      	ldrb	r2, [r3, #0]
 8003478:	4b33      	ldr	r3, [pc, #204]	; (8003548 <GAME_PLAY_Phase_Management+0xea0>)
 800347a:	9203      	str	r2, [sp, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	9202      	str	r2, [sp, #8]
 8003480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003484:	9201      	str	r2, [sp, #4]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	9200      	str	r2, [sp, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a32      	ldr	r2, [pc, #200]	; (8003558 <GAME_PLAY_Phase_Management+0xeb0>)
 800348e:	215a      	movs	r1, #90	; 0x5a
 8003490:	2005      	movs	r0, #5
 8003492:	f003 fba0 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003496:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800349a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	781a      	ldrb	r2, [r3, #0]
 80034a2:	4b29      	ldr	r3, [pc, #164]	; (8003548 <GAME_PLAY_Phase_Management+0xea0>)
 80034a4:	9203      	str	r2, [sp, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	9202      	str	r2, [sp, #8]
 80034aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034ae:	9201      	str	r2, [sp, #4]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	9200      	str	r2, [sp, #0]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a29      	ldr	r2, [pc, #164]	; (800355c <GAME_PLAY_Phase_Management+0xeb4>)
 80034b8:	215a      	movs	r1, #90	; 0x5a
 80034ba:	2005      	movs	r0, #5
 80034bc:	f003 fb8b 	bl	8006bd6 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80034c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b04      	cmp	r3, #4
 80034ce:	d147      	bne.n	8003560 <GAME_PLAY_Phase_Management+0xeb8>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 80034d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034d4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	789b      	ldrb	r3, [r3, #2]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d11d      	bne.n	800351c <GAME_PLAY_Phase_Management+0xe74>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80034e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80034e4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	9301      	str	r3, [sp, #4]
 80034ee:	2300      	movs	r3, #0
 80034f0:	9300      	str	r3, [sp, #0]
 80034f2:	2326      	movs	r3, #38	; 0x26
 80034f4:	2280      	movs	r2, #128	; 0x80
 80034f6:	215a      	movs	r1, #90	; 0x5a
 80034f8:	2000      	movs	r0, #0
 80034fa:	f003 fcb5 	bl	8006e68 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 80034fe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003502:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2205      	movs	r2, #5
 800350a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800350e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003512:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2200      	movs	r2, #0
 800351a:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 800351c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003520:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8003524:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003528:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800352c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003530:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	6809      	ldr	r1, [r1, #0]
 8003538:	6818      	ldr	r0, [r3, #0]
 800353a:	f7fd fb87 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 800353e:	f001 b9f3 	b.w	8004928 <GAME_PLAY_Phase_Management+0x2280>
 8003542:	bf00      	nop
 8003544:	aaaaaaab 	.word	0xaaaaaaab
 8003548:	2400000c 	.word	0x2400000c
 800354c:	08010ef8 	.word	0x08010ef8
 8003550:	08010f04 	.word	0x08010f04
 8003554:	08010f10 	.word	0x08010f10
 8003558:	08010f20 	.word	0x08010f20
 800355c:	08010f38 	.word	0x08010f38
			else if ((state_game->action == 5 )){
 8003560:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003564:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b05      	cmp	r3, #5
 800356e:	f041 81db 	bne.w	8004928 <GAME_PLAY_Phase_Management+0x2280>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003572:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003576:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	9301      	str	r3, [sp, #4]
 8003580:	2300      	movs	r3, #0
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	2326      	movs	r3, #38	; 0x26
 8003586:	2280      	movs	r2, #128	; 0x80
 8003588:	215a      	movs	r1, #90	; 0x5a
 800358a:	2000      	movs	r0, #0
 800358c:	f003 fc6c 	bl	8006e68 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003590:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003594:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800359e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 80035a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035a6:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80035aa:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	f7fe f9f2 	bl	8001998 <YUGIOH_Check_Trap_On_board>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f887 3234 	strb.w	r3, [r7, #564]	; 0x234
				if (idx != 255)
 80035ba:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80035be:	2bff      	cmp	r3, #255	; 0xff
 80035c0:	d05b      	beq.n	800367a <GAME_PLAY_Phase_Management+0xfd2>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 80035c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035ca:	6818      	ldr	r0, [r3, #0]
 80035cc:	f7fd ffdd 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80035d0:	f897 3234 	ldrb.w	r3, [r7, #564]	; 0x234
 80035d4:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80035d8:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	3308      	adds	r3, #8
 80035e0:	6812      	ldr	r2, [r2, #0]
 80035e2:	4413      	add	r3, r2
 80035e4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80035e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80035ec:	2200      	movs	r2, #0
 80035ee:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80035f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80035f4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80035fe:	4619      	mov	r1, r3
 8003600:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003604:	f7fd f83e 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 8003608:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800360c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003616:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800361a:	6812      	ldr	r2, [r2, #0]
 800361c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8003620:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003624:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800362e:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8003632:	6812      	ldr	r2, [r2, #0]
 8003634:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 8003638:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800363c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003646:	3301      	adds	r3, #1
 8003648:	b2da      	uxtb	r2, r3
 800364a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800364e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 8003658:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800365c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2206      	movs	r2, #6
 8003664:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8003668:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800366c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2204      	movs	r2, #4
 8003674:	701a      	strb	r2, [r3, #0]
			break;
 8003676:	f001 b957 	b.w	8004928 <GAME_PLAY_Phase_Management+0x2280>
					state_game->action = 4;
 800367a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800367e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2204      	movs	r2, #4
 8003686:	701a      	strb	r2, [r3, #0]
			break;
 8003688:	f001 b94e 	b.w	8004928 <GAME_PLAY_Phase_Management+0x2280>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800368c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003690:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	781a      	ldrb	r2, [r3, #0]
 8003698:	4b7d      	ldr	r3, [pc, #500]	; (8003890 <GAME_PLAY_Phase_Management+0x11e8>)
 800369a:	9203      	str	r2, [sp, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	9202      	str	r2, [sp, #8]
 80036a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036a4:	9201      	str	r2, [sp, #4]
 80036a6:	685a      	ldr	r2, [r3, #4]
 80036a8:	9200      	str	r2, [sp, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a79      	ldr	r2, [pc, #484]	; (8003894 <GAME_PLAY_Phase_Management+0x11ec>)
 80036ae:	215a      	movs	r1, #90	; 0x5a
 80036b0:	2005      	movs	r0, #5
 80036b2:	f003 fa90 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80036b6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036ba:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	781a      	ldrb	r2, [r3, #0]
 80036c2:	4b73      	ldr	r3, [pc, #460]	; (8003890 <GAME_PLAY_Phase_Management+0x11e8>)
 80036c4:	9203      	str	r2, [sp, #12]
 80036c6:	2200      	movs	r2, #0
 80036c8:	9202      	str	r2, [sp, #8]
 80036ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80036ce:	9201      	str	r2, [sp, #4]
 80036d0:	685a      	ldr	r2, [r3, #4]
 80036d2:	9200      	str	r2, [sp, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a70      	ldr	r2, [pc, #448]	; (8003898 <GAME_PLAY_Phase_Management+0x11f0>)
 80036d8:	215a      	movs	r1, #90	; 0x5a
 80036da:	2005      	movs	r0, #5
 80036dc:	f003 fa7b 	bl	8006bd6 <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80036e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b04      	cmp	r3, #4
 80036ee:	d147      	bne.n	8003780 <GAME_PLAY_Phase_Management+0x10d8>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 80036f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80036f4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	789b      	ldrb	r3, [r3, #2]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d12c      	bne.n	800375a <GAME_PLAY_Phase_Management+0x10b2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003700:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003704:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2300      	movs	r3, #0
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	2326      	movs	r3, #38	; 0x26
 8003714:	2280      	movs	r2, #128	; 0x80
 8003716:	215a      	movs	r1, #90	; 0x5a
 8003718:	2000      	movs	r0, #0
 800371a:	f003 fba5 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800371e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003722:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	9301      	str	r3, [sp, #4]
 800372c:	2300      	movs	r3, #0
 800372e:	9300      	str	r3, [sp, #0]
 8003730:	2326      	movs	r3, #38	; 0x26
 8003732:	2280      	movs	r2, #128	; 0x80
 8003734:	215a      	movs	r1, #90	; 0x5a
 8003736:	2000      	movs	r0, #0
 8003738:	f003 fb96 	bl	8006e68 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 800373c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003740:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2205      	movs	r2, #5
 8003748:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800374c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003750:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	2200      	movs	r2, #0
 8003758:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card_Trap(RFIDmain,state_game,playerAtk);
 800375a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800375e:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8003762:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003766:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800376a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800376e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8003772:	6812      	ldr	r2, [r2, #0]
 8003774:	6809      	ldr	r1, [r1, #0]
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	f7fd fa68 	bl	8000c4c <Player_Reading_Card_Trap>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 800377c:	f001 b8d7 	b.w	800492e <GAME_PLAY_Phase_Management+0x2286>
			else if ((state_game->action == 5 )){
 8003780:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003784:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	781b      	ldrb	r3, [r3, #0]
 800378c:	2b05      	cmp	r3, #5
 800378e:	f041 80ce 	bne.w	800492e <GAME_PLAY_Phase_Management+0x2286>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003792:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003796:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80037a0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 80037a4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037a8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80037ac:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	f7fe f8f1 	bl	8001998 <YUGIOH_Check_Trap_On_board>
 80037b6:	4603      	mov	r3, r0
 80037b8:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
				if (idx != 255)
 80037bc:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 80037c0:	2bff      	cmp	r3, #255	; 0xff
 80037c2:	d05b      	beq.n	800387c <GAME_PLAY_Phase_Management+0x11d4>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 80037c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037c8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037cc:	6818      	ldr	r0, [r3, #0]
 80037ce:	f7fd fedc 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 80037d2:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 80037d6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80037da:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	3308      	adds	r3, #8
 80037e2:	6812      	ldr	r2, [r2, #0]
 80037e4:	4413      	add	r3, r2
 80037e6:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80037ea:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80037ee:	2200      	movs	r2, #0
 80037f0:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80037f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80037f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003800:	4619      	mov	r1, r3
 8003802:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8003806:	f7fc ff3d 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 800380a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800380e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003818:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800381c:	6812      	ldr	r2, [r2, #0]
 800381e:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 8003822:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003826:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8003830:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8003834:	6812      	ldr	r2, [r2, #0]
 8003836:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 800383a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800383e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003848:	3301      	adds	r3, #1
 800384a:	b2da      	uxtb	r2, r3
 800384c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003850:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 800385a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800385e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	2206      	movs	r2, #6
 8003866:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 800386a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800386e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2204      	movs	r2, #4
 8003876:	701a      	strb	r2, [r3, #0]
			break;
 8003878:	f001 b859 	b.w	800492e <GAME_PLAY_Phase_Management+0x2286>
					state_game->action = 4;
 800387c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003880:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	2204      	movs	r2, #4
 8003888:	701a      	strb	r2, [r3, #0]
			break;
 800388a:	f001 b850 	b.w	800492e <GAME_PLAY_Phase_Management+0x2286>
 800388e:	bf00      	nop
 8003890:	2400000c 	.word	0x2400000c
 8003894:	08010f38 	.word	0x08010f38
 8003898:	08010f20 	.word	0x08010f20
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800389c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038a0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	781a      	ldrb	r2, [r3, #0]
 80038a8:	4b9a      	ldr	r3, [pc, #616]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 80038aa:	9203      	str	r2, [sp, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	9202      	str	r2, [sp, #8]
 80038b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80038b4:	9201      	str	r2, [sp, #4]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	9200      	str	r2, [sp, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a96      	ldr	r2, [pc, #600]	; (8003b18 <GAME_PLAY_Phase_Management+0x1470>)
 80038be:	215a      	movs	r1, #90	; 0x5a
 80038c0:	2005      	movs	r0, #5
 80038c2:	f003 f988 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 80038c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038ca:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	781a      	ldrb	r2, [r3, #0]
 80038d2:	4b90      	ldr	r3, [pc, #576]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 80038d4:	9203      	str	r2, [sp, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	9202      	str	r2, [sp, #8]
 80038da:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80038de:	9201      	str	r2, [sp, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
 80038e2:	9200      	str	r2, [sp, #0]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a8d      	ldr	r2, [pc, #564]	; (8003b1c <GAME_PLAY_Phase_Management+0x1474>)
 80038e8:	2169      	movs	r1, #105	; 0x69
 80038ea:	2005      	movs	r0, #5
 80038ec:	f003 f973 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80038f0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80038f4:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	781a      	ldrb	r2, [r3, #0]
 80038fc:	4b85      	ldr	r3, [pc, #532]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 80038fe:	9203      	str	r2, [sp, #12]
 8003900:	2200      	movs	r2, #0
 8003902:	9202      	str	r2, [sp, #8]
 8003904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003908:	9201      	str	r2, [sp, #4]
 800390a:	685a      	ldr	r2, [r3, #4]
 800390c:	9200      	str	r2, [sp, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4a83      	ldr	r2, [pc, #524]	; (8003b20 <GAME_PLAY_Phase_Management+0x1478>)
 8003912:	215a      	movs	r1, #90	; 0x5a
 8003914:	2005      	movs	r0, #5
 8003916:	f003 f95e 	bl	8006bd6 <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 800391a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800391e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	781a      	ldrb	r2, [r3, #0]
 8003926:	4b7b      	ldr	r3, [pc, #492]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 8003928:	9203      	str	r2, [sp, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	9202      	str	r2, [sp, #8]
 800392e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003932:	9201      	str	r2, [sp, #4]
 8003934:	685a      	ldr	r2, [r3, #4]
 8003936:	9200      	str	r2, [sp, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4a78      	ldr	r2, [pc, #480]	; (8003b1c <GAME_PLAY_Phase_Management+0x1474>)
 800393c:	2169      	movs	r1, #105	; 0x69
 800393e:	2005      	movs	r0, #5
 8003940:	f003 f949 	bl	8006bd6 <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8003944:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003948:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	785b      	ldrb	r3, [r3, #1]
 8003950:	4619      	mov	r1, r3
 8003952:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003956:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800395a:	f501 7394 	add.w	r3, r1, #296	; 0x128
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	6812      	ldr	r2, [r2, #0]
 8003962:	4413      	add	r3, r2
 8003964:	3304      	adds	r3, #4
 8003966:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 800396a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800396e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	785b      	ldrb	r3, [r3, #1]
 8003976:	4619      	mov	r1, r3
 8003978:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800397c:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003980:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8003984:	009b      	lsls	r3, r3, #2
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	4413      	add	r3, r2
 800398a:	3304      	adds	r3, #4
 800398c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

			if(state_game->action == 4)
 8003990:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003994:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b04      	cmp	r3, #4
 800399e:	f040 82cd 	bne.w	8003f3c <GAME_PLAY_Phase_Management+0x1894>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 80039a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	785a      	ldrb	r2, [r3, #1]
 80039ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80039bc:	429a      	cmp	r2, r3
 80039be:	f080 825d 	bcs.w	8003e7c <GAME_PLAY_Phase_Management+0x17d4>
				{
					state_game->test = 165;
 80039c2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039c6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	22a5      	movs	r2, #165	; 0xa5
 80039ce:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80039d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	785b      	ldrb	r3, [r3, #1]
 80039de:	4619      	mov	r1, r3
 80039e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80039e4:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80039e8:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80039ec:	011b      	lsls	r3, r3, #4
 80039ee:	6812      	ldr	r2, [r2, #0]
 80039f0:	4413      	add	r3, r2
 80039f2:	3304      	adds	r3, #4
 80039f4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

					if (ptrYugiohCard_src->cardSignature == 11)
 80039f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b0b      	cmp	r3, #11
 8003a00:	f040 8096 	bne.w	8003b30 <GAME_PLAY_Phase_Management+0x1488>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 8003a04:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f7fd fe4a 	bl	80016a4 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003a10:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fd fe01 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003a20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a24:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	785b      	ldrb	r3, [r3, #1]
 8003a2c:	3301      	adds	r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003a34:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a3c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	781a      	ldrb	r2, [r3, #0]
 8003a44:	4b33      	ldr	r3, [pc, #204]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 8003a46:	9203      	str	r2, [sp, #12]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	9202      	str	r2, [sp, #8]
 8003a4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a50:	9201      	str	r2, [sp, #4]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	9200      	str	r2, [sp, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4a32      	ldr	r2, [pc, #200]	; (8003b24 <GAME_PLAY_Phase_Management+0x147c>)
 8003a5a:	215a      	movs	r1, #90	; 0x5a
 8003a5c:	2005      	movs	r0, #5
 8003a5e:	f003 f8ba 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003a62:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	781a      	ldrb	r2, [r3, #0]
 8003a6a:	4b2a      	ldr	r3, [pc, #168]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 8003a6c:	9203      	str	r2, [sp, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	9202      	str	r2, [sp, #8]
 8003a72:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003a76:	9201      	str	r2, [sp, #4]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	9200      	str	r2, [sp, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a2a      	ldr	r2, [pc, #168]	; (8003b28 <GAME_PLAY_Phase_Management+0x1480>)
 8003a80:	2169      	movs	r1, #105	; 0x69
 8003a82:	2005      	movs	r0, #5
 8003a84:	f003 f8a7 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003a88:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	781a      	ldrb	r2, [r3, #0]
 8003a90:	4b20      	ldr	r3, [pc, #128]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 8003a92:	9203      	str	r2, [sp, #12]
 8003a94:	2200      	movs	r2, #0
 8003a96:	9202      	str	r2, [sp, #8]
 8003a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a9c:	9201      	str	r2, [sp, #4]
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	9200      	str	r2, [sp, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a21      	ldr	r2, [pc, #132]	; (8003b2c <GAME_PLAY_Phase_Management+0x1484>)
 8003aa6:	215a      	movs	r1, #90	; 0x5a
 8003aa8:	2005      	movs	r0, #5
 8003aaa:	f003 f894 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003aae:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	781a      	ldrb	r2, [r3, #0]
 8003ab6:	4b17      	ldr	r3, [pc, #92]	; (8003b14 <GAME_PLAY_Phase_Management+0x146c>)
 8003ab8:	9203      	str	r2, [sp, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	9202      	str	r2, [sp, #8]
 8003abe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003ac2:	9201      	str	r2, [sp, #4]
 8003ac4:	685a      	ldr	r2, [r3, #4]
 8003ac6:	9200      	str	r2, [sp, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <GAME_PLAY_Phase_Management+0x1474>)
 8003acc:	2169      	movs	r1, #105	; 0x69
 8003ace:	2005      	movs	r0, #5
 8003ad0:	f003 f881 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003ad4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003ad8:	f003 fe5e 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003adc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	781b      	ldrb	r3, [r3, #0]
 8003ae4:	9301      	str	r3, [sp, #4]
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	9300      	str	r3, [sp, #0]
 8003aea:	2326      	movs	r3, #38	; 0x26
 8003aec:	2280      	movs	r2, #128	; 0x80
 8003aee:	215a      	movs	r1, #90	; 0x5a
 8003af0:	2000      	movs	r0, #0
 8003af2:	f003 f9b9 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003af6:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	9301      	str	r3, [sp, #4]
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2326      	movs	r3, #38	; 0x26
 8003b06:	2280      	movs	r2, #128	; 0x80
 8003b08:	215a      	movs	r1, #90	; 0x5a
 8003b0a:	2000      	movs	r0, #0
 8003b0c:	f003 f9ac 	bl	8006e68 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 8003b10:	f000 bf10 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
 8003b14:	2400000c 	.word	0x2400000c
 8003b18:	08010f54 	.word	0x08010f54
 8003b1c:	08010f64 	.word	0x08010f64
 8003b20:	08010f74 	.word	0x08010f74
 8003b24:	08010f88 	.word	0x08010f88
 8003b28:	08010f98 	.word	0x08010f98
 8003b2c:	08010fa0 	.word	0x08010fa0
					else if (ptrYugiohCard_src->cardSignature == 12)
 8003b30:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	2b0c      	cmp	r3, #12
 8003b38:	f040 808c 	bne.w	8003c54 <GAME_PLAY_Phase_Management+0x15ac>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 8003b3c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b40:	681a      	ldr	r2, [r3, #0]
 8003b42:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4610      	mov	r0, r2
 8003b4c:	f7fd fdca 	bl	80016e4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003b50:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f7fd fd61 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003b60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	785b      	ldrb	r3, [r3, #1]
 8003b6c:	3301      	adds	r3, #1
 8003b6e:	b2da      	uxtb	r2, r3
 8003b70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003b74:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003b7c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	781a      	ldrb	r2, [r3, #0]
 8003b84:	4bb5      	ldr	r3, [pc, #724]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003b86:	9203      	str	r2, [sp, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	9202      	str	r2, [sp, #8]
 8003b8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b90:	9201      	str	r2, [sp, #4]
 8003b92:	685a      	ldr	r2, [r3, #4]
 8003b94:	9200      	str	r2, [sp, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4ab1      	ldr	r2, [pc, #708]	; (8003e60 <GAME_PLAY_Phase_Management+0x17b8>)
 8003b9a:	215a      	movs	r1, #90	; 0x5a
 8003b9c:	2005      	movs	r0, #5
 8003b9e:	f003 f81a 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003ba2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	781a      	ldrb	r2, [r3, #0]
 8003baa:	4bac      	ldr	r3, [pc, #688]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003bac:	9203      	str	r2, [sp, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	9202      	str	r2, [sp, #8]
 8003bb2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003bb6:	9201      	str	r2, [sp, #4]
 8003bb8:	685a      	ldr	r2, [r3, #4]
 8003bba:	9200      	str	r2, [sp, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4aa9      	ldr	r2, [pc, #676]	; (8003e64 <GAME_PLAY_Phase_Management+0x17bc>)
 8003bc0:	2169      	movs	r1, #105	; 0x69
 8003bc2:	2005      	movs	r0, #5
 8003bc4:	f003 f807 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003bc8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	781a      	ldrb	r2, [r3, #0]
 8003bd0:	4ba2      	ldr	r3, [pc, #648]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003bd2:	9203      	str	r2, [sp, #12]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	9202      	str	r2, [sp, #8]
 8003bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bdc:	9201      	str	r2, [sp, #4]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	9200      	str	r2, [sp, #0]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4aa0      	ldr	r2, [pc, #640]	; (8003e68 <GAME_PLAY_Phase_Management+0x17c0>)
 8003be6:	215a      	movs	r1, #90	; 0x5a
 8003be8:	2005      	movs	r0, #5
 8003bea:	f002 fff4 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003bee:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	781a      	ldrb	r2, [r3, #0]
 8003bf6:	4b99      	ldr	r3, [pc, #612]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003bf8:	9203      	str	r2, [sp, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	9202      	str	r2, [sp, #8]
 8003bfe:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8003c02:	9201      	str	r2, [sp, #4]
 8003c04:	685a      	ldr	r2, [r3, #4]
 8003c06:	9200      	str	r2, [sp, #0]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a98      	ldr	r2, [pc, #608]	; (8003e6c <GAME_PLAY_Phase_Management+0x17c4>)
 8003c0c:	2169      	movs	r1, #105	; 0x69
 8003c0e:	2005      	movs	r0, #5
 8003c10:	f002 ffe1 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003c14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003c18:	f003 fdbe 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003c1c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	781b      	ldrb	r3, [r3, #0]
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2300      	movs	r3, #0
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2326      	movs	r3, #38	; 0x26
 8003c2c:	2280      	movs	r2, #128	; 0x80
 8003c2e:	215a      	movs	r1, #90	; 0x5a
 8003c30:	2000      	movs	r0, #0
 8003c32:	f003 f919 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003c36:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	2300      	movs	r3, #0
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	2326      	movs	r3, #38	; 0x26
 8003c46:	2280      	movs	r2, #128	; 0x80
 8003c48:	215a      	movs	r1, #90	; 0x5a
 8003c4a:	2000      	movs	r0, #0
 8003c4c:	f003 f90c 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 8003c50:	f000 be70 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
					else if (ptrYugiohCard_src->cardSignature == 13)
 8003c54:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b0d      	cmp	r3, #13
 8003c5c:	d110      	bne.n	8003c80 <GAME_PLAY_Phase_Management+0x15d8>
						state_game->test = 166;
 8003c5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	22a6      	movs	r2, #166	; 0xa6
 8003c6a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003c6e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c72:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	2205      	movs	r2, #5
 8003c7a:	701a      	strb	r2, [r3, #0]
			break;
 8003c7c:	f000 be5a 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 8003c80:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b0e      	cmp	r3, #14
 8003c88:	d005      	beq.n	8003c96 <GAME_PLAY_Phase_Management+0x15ee>
 8003c8a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b0f      	cmp	r3, #15
 8003c92:	f040 8094 	bne.w	8003dbe <GAME_PLAY_Phase_Management+0x1716>
						state_game->test = 133;
 8003c96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003c9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2285      	movs	r2, #133	; 0x85
 8003ca2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 8003ca6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f7fd fde9 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003cba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	f7fd fcac 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8003cca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	785b      	ldrb	r3, [r3, #1]
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	b2da      	uxtb	r2, r3
 8003cda:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003cde:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003ce6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	781a      	ldrb	r2, [r3, #0]
 8003cee:	4b5b      	ldr	r3, [pc, #364]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003cf0:	9203      	str	r2, [sp, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	9202      	str	r2, [sp, #8]
 8003cf6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cfa:	9201      	str	r2, [sp, #4]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	9200      	str	r2, [sp, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a5b      	ldr	r2, [pc, #364]	; (8003e70 <GAME_PLAY_Phase_Management+0x17c8>)
 8003d04:	215a      	movs	r1, #90	; 0x5a
 8003d06:	2005      	movs	r0, #5
 8003d08:	f002 ff65 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d0c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	781a      	ldrb	r2, [r3, #0]
 8003d14:	4b51      	ldr	r3, [pc, #324]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003d16:	9203      	str	r2, [sp, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	9202      	str	r2, [sp, #8]
 8003d1c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003d20:	9201      	str	r2, [sp, #4]
 8003d22:	685a      	ldr	r2, [r3, #4]
 8003d24:	9200      	str	r2, [sp, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a52      	ldr	r2, [pc, #328]	; (8003e74 <GAME_PLAY_Phase_Management+0x17cc>)
 8003d2a:	2169      	movs	r1, #105	; 0x69
 8003d2c:	2005      	movs	r0, #5
 8003d2e:	f002 ff52 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d32:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	781a      	ldrb	r2, [r3, #0]
 8003d3a:	4b48      	ldr	r3, [pc, #288]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003d3c:	9203      	str	r2, [sp, #12]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	9202      	str	r2, [sp, #8]
 8003d42:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d46:	9201      	str	r2, [sp, #4]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	9200      	str	r2, [sp, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a46      	ldr	r2, [pc, #280]	; (8003e68 <GAME_PLAY_Phase_Management+0x17c0>)
 8003d50:	215a      	movs	r1, #90	; 0x5a
 8003d52:	2005      	movs	r0, #5
 8003d54:	f002 ff3f 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003d58:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	781a      	ldrb	r2, [r3, #0]
 8003d60:	4b3e      	ldr	r3, [pc, #248]	; (8003e5c <GAME_PLAY_Phase_Management+0x17b4>)
 8003d62:	9203      	str	r2, [sp, #12]
 8003d64:	2200      	movs	r2, #0
 8003d66:	9202      	str	r2, [sp, #8]
 8003d68:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8003d6c:	9201      	str	r2, [sp, #4]
 8003d6e:	685a      	ldr	r2, [r3, #4]
 8003d70:	9200      	str	r2, [sp, #0]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a40      	ldr	r2, [pc, #256]	; (8003e78 <GAME_PLAY_Phase_Management+0x17d0>)
 8003d76:	2169      	movs	r1, #105	; 0x69
 8003d78:	2005      	movs	r0, #5
 8003d7a:	f002 ff2c 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8003d7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003d82:	f003 fd09 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003d86:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	9301      	str	r3, [sp, #4]
 8003d90:	2300      	movs	r3, #0
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	2326      	movs	r3, #38	; 0x26
 8003d96:	2280      	movs	r2, #128	; 0x80
 8003d98:	215a      	movs	r1, #90	; 0x5a
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	f003 f864 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8003da0:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	9301      	str	r3, [sp, #4]
 8003daa:	2300      	movs	r3, #0
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	2326      	movs	r3, #38	; 0x26
 8003db0:	2280      	movs	r2, #128	; 0x80
 8003db2:	215a      	movs	r1, #90	; 0x5a
 8003db4:	2000      	movs	r0, #0
 8003db6:	f003 f857 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 8003dba:	f000 bdbb 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
					else if(ptrYugiohCard_src->cardSignature == 16)
 8003dbe:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b10      	cmp	r3, #16
 8003dc6:	d110      	bne.n	8003dea <GAME_PLAY_Phase_Management+0x1742>
						state_game->test = 124;
 8003dc8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003dcc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	227c      	movs	r2, #124	; 0x7c
 8003dd4:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8003dd8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ddc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	2205      	movs	r2, #5
 8003de4:	701a      	strb	r2, [r3, #0]
			break;
 8003de6:	f000 bda5 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
					else if(ptrYugiohCard_src->cardSignature == 17)
 8003dea:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	2b11      	cmp	r3, #17
 8003df2:	d108      	bne.n	8003e06 <GAME_PLAY_Phase_Management+0x175e>
						state_game->action = 5;
 8003df4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003df8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	2205      	movs	r2, #5
 8003e00:	701a      	strb	r2, [r3, #0]
			break;
 8003e02:	f000 bd97 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 8003e06:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b12      	cmp	r3, #18
 8003e0e:	d005      	beq.n	8003e1c <GAME_PLAY_Phase_Management+0x1774>
 8003e10:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8003e14:	781b      	ldrb	r3, [r3, #0]
 8003e16:	2b13      	cmp	r3, #19
 8003e18:	f040 858c 	bne.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8003e1c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	785b      	ldrb	r3, [r3, #1]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f040 8585 	bne.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003e2a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8003e34:	4618      	mov	r0, r3
 8003e36:	f7fd fbf4 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8003e3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	785b      	ldrb	r3, [r3, #1]
 8003e46:	3301      	adds	r3, #1
 8003e48:	b2da      	uxtb	r2, r3
 8003e4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	705a      	strb	r2, [r3, #1]
			break;
 8003e56:	f000 bd6d 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
 8003e5a:	bf00      	nop
 8003e5c:	2400000c 	.word	0x2400000c
 8003e60:	08010f88 	.word	0x08010f88
 8003e64:	08010fb0 	.word	0x08010fb0
 8003e68:	08010fa0 	.word	0x08010fa0
 8003e6c:	08010f64 	.word	0x08010f64
 8003e70:	08010fbc 	.word	0x08010fbc
 8003e74:	08010fcc 	.word	0x08010fcc
 8003e78:	08010fdc 	.word	0x08010fdc
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003e7c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e80:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2326      	movs	r3, #38	; 0x26
 8003e90:	2280      	movs	r2, #128	; 0x80
 8003e92:	215a      	movs	r1, #90	; 0x5a
 8003e94:	2000      	movs	r0, #0
 8003e96:	f002 ffe7 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003e9a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003e9e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	781b      	ldrb	r3, [r3, #0]
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	2326      	movs	r3, #38	; 0x26
 8003eae:	2280      	movs	r2, #128	; 0x80
 8003eb0:	215a      	movs	r1, #90	; 0x5a
 8003eb2:	2000      	movs	r0, #0
 8003eb4:	f002 ffd8 	bl	8006e68 <ST7735_FillRectangleNSS>
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003ebe:	e020      	b.n	8003f02 <GAME_PLAY_Phase_Management+0x185a>
						state_game->ptrChainUser[i] = &dummyPlayer;
 8003ec0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ec4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003ece:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	4413      	add	r3, r2
 8003ed6:	f107 0210 	add.w	r2, r7, #16
 8003eda:	605a      	str	r2, [r3, #4]
						state_game->ptrChainOpponent[i] = &dummyPlayer;
 8003edc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003ee0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003eea:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8003eee:	009b      	lsls	r3, r3, #2
 8003ef0:	4413      	add	r3, r2
 8003ef2:	f107 0210 	add.w	r2, r7, #16
 8003ef6:	605a      	str	r2, [r3, #4]
					for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8003ef8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003efc:	3301      	adds	r3, #1
 8003efe:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8003f02:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8003f06:	2b05      	cmp	r3, #5
 8003f08:	ddda      	ble.n	8003ec0 <GAME_PLAY_Phase_Management+0x1818>
					state_game->ChainCount = 0;
 8003f0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f0e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->action = 0;
 8003f1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f1e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	2200      	movs	r2, #0
 8003f26:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8003f28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f2c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8003f38:	f000 bcfc 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
			else if (state_game->action == 5)
 8003f3c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f40:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b05      	cmp	r3, #5
 8003f4a:	f040 80c1 	bne.w	80040d0 <GAME_PLAY_Phase_Management+0x1a28>
				state_game->test = 167;
 8003f4e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f52:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	22a7      	movs	r2, #167	; 0xa7
 8003f5a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 8003f5e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f62:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	785b      	ldrb	r3, [r3, #1]
 8003f6a:	4619      	mov	r1, r3
 8003f6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003f70:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8003f74:	f101 0344 	add.w	r3, r1, #68	; 0x44
 8003f78:	011b      	lsls	r3, r3, #4
 8003f7a:	6812      	ldr	r2, [r2, #0]
 8003f7c:	4413      	add	r3, r2
 8003f7e:	3304      	adds	r3, #4
 8003f80:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 8003f84:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	789b      	ldrb	r3, [r3, #2]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d123      	bne.n	8003fd8 <GAME_PLAY_Phase_Management+0x1930>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8003f90:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7fd fa4c 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 8003f9c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	f7fc fba3 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 8003fac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fb0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	2204      	movs	r2, #4
 8003fb8:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8003fba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fbe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	785b      	ldrb	r3, [r3, #1]
 8003fc6:	3301      	adds	r3, #1
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8003fce:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	705a      	strb	r2, [r3, #1]
 8003fd6:	e028      	b.n	800402a <GAME_PLAY_Phase_Management+0x1982>
				else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8003fd8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	785b      	ldrb	r3, [r3, #1]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d122      	bne.n	800402a <GAME_PLAY_Phase_Management+0x1982>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 8003fe4:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fa22 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_clear(&(*ptrUser)->CardInPlayed);
 8003ff0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fc fb79 	bl	80006f2 <YUGIOH_card_clear>
					state_game->action = 4;
 8004000:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004004:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2204      	movs	r2, #4
 800400c:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 800400e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004012:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	785b      	ldrb	r3, [r3, #1]
 800401a:	3301      	adds	r3, #1
 800401c:	b2da      	uxtb	r2, r3
 800401e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004022:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 800402a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b0d      	cmp	r3, #13
 8004032:	d110      	bne.n	8004056 <GAME_PLAY_Phase_Management+0x19ae>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 8004034:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800403e:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004042:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004046:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 800404a:	6809      	ldr	r1, [r1, #0]
 800404c:	6818      	ldr	r0, [r3, #0]
 800404e:	f7fc ff5b 	bl	8000f08 <Player_Reading_Card_Reborn>
			break;
 8004052:	f000 bc6f 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 8004056:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b10      	cmp	r3, #16
 800405e:	d110      	bne.n	8004082 <GAME_PLAY_Phase_Management+0x19da>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8004060:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800406a:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800406e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004072:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004076:	6809      	ldr	r1, [r1, #0]
 8004078:	6818      	ldr	r0, [r3, #0]
 800407a:	f7fc fff3 	bl	8001064 <Player_Reading_Card_Ancient_Rule>
			break;
 800407e:	f000 bc59 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
				else if (ptrYugiohCard_src->cardSignature == 17)
 8004082:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b11      	cmp	r3, #17
 800408a:	d110      	bne.n	80040ae <GAME_PLAY_Phase_Management+0x1a06>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 800408c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004096:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 800409a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800409e:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80040a2:	6809      	ldr	r1, [r1, #0]
 80040a4:	6818      	ldr	r0, [r3, #0]
 80040a6:	f7fc fe85 	bl	8000db4 <Player_Reading_Card_Stopdef>
			break;
 80040aa:	f000 bc43 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 80040ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80040b2:	681a      	ldr	r2, [r3, #0]
 80040b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040b8:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80040bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040c0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80040c4:	6809      	ldr	r1, [r1, #0]
 80040c6:	6818      	ldr	r0, [r3, #0]
 80040c8:	f7fc fb44 	bl	8000754 <Player_Reading_Card>
			break;
 80040cc:	f000 bc32 	b.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
			else if (state_game->action == 6)
 80040d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	781b      	ldrb	r3, [r3, #0]
 80040dc:	2b06      	cmp	r3, #6
 80040de:	f040 8429 	bne.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
				state_game->test = 169;
 80040e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040e6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	22a9      	movs	r2, #169	; 0xa9
 80040ee:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80040f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80040f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	785b      	ldrb	r3, [r3, #1]
 80040fe:	4619      	mov	r1, r3
 8004100:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004104:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8004108:	f101 0344 	add.w	r3, r1, #68	; 0x44
 800410c:	011b      	lsls	r3, r3, #4
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	4413      	add	r3, r2
 8004112:	3304      	adds	r3, #4
 8004114:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				if (ptrYugiohCard_src->cardSignature == 13){
 8004118:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b0d      	cmp	r3, #13
 8004120:	f040 819d 	bne.w	800445e <GAME_PLAY_Phase_Management+0x1db6>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004124:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	4b66      	ldr	r3, [pc, #408]	; (80042c8 <GAME_PLAY_Phase_Management+0x1c20>)
 800412e:	9203      	str	r2, [sp, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	9202      	str	r2, [sp, #8]
 8004134:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004138:	9201      	str	r2, [sp, #4]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	9200      	str	r2, [sp, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a62      	ldr	r2, [pc, #392]	; (80042cc <GAME_PLAY_Phase_Management+0x1c24>)
 8004142:	215a      	movs	r1, #90	; 0x5a
 8004144:	2005      	movs	r0, #5
 8004146:	f002 fd46 	bl	8006bd6 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 800414a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	789b      	ldrb	r3, [r3, #2]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 80c4 	bne.w	80042e0 <GAME_PLAY_Phase_Management+0x1c38>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004158:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	9301      	str	r3, [sp, #4]
 8004162:	2300      	movs	r3, #0
 8004164:	9300      	str	r3, [sp, #0]
 8004166:	2326      	movs	r3, #38	; 0x26
 8004168:	2280      	movs	r2, #128	; 0x80
 800416a:	215a      	movs	r1, #90	; 0x5a
 800416c:	2000      	movs	r0, #0
 800416e:	f002 fe7b 	bl	8006e68 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8004172:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004176:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	22aa      	movs	r2, #170	; 0xaa
 800417e:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004182:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800418c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 8004190:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004194:	2200      	movs	r2, #0
 8004196:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8004198:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80041a2:	4619      	mov	r1, r3
 80041a4:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80041a8:	f7fc fa6c 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 80041ac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4618      	mov	r0, r3
 80041b4:	f7fd fad4 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 80041b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	2204      	movs	r2, #4
 80041c4:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80041c6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80041d0:	4618      	mov	r0, r3
 80041d2:	f7fd fa26 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 80041d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	785b      	ldrb	r3, [r3, #1]
 80041e2:	3301      	adds	r3, #1
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80041ea:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80041f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	781a      	ldrb	r2, [r3, #0]
 80041fa:	4b33      	ldr	r3, [pc, #204]	; (80042c8 <GAME_PLAY_Phase_Management+0x1c20>)
 80041fc:	9203      	str	r2, [sp, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	9202      	str	r2, [sp, #8]
 8004202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004206:	9201      	str	r2, [sp, #4]
 8004208:	685a      	ldr	r2, [r3, #4]
 800420a:	9200      	str	r2, [sp, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a30      	ldr	r2, [pc, #192]	; (80042d0 <GAME_PLAY_Phase_Management+0x1c28>)
 8004210:	215a      	movs	r1, #90	; 0x5a
 8004212:	2005      	movs	r0, #5
 8004214:	f002 fcdf 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004218:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	781a      	ldrb	r2, [r3, #0]
 8004220:	4b29      	ldr	r3, [pc, #164]	; (80042c8 <GAME_PLAY_Phase_Management+0x1c20>)
 8004222:	9203      	str	r2, [sp, #12]
 8004224:	2200      	movs	r2, #0
 8004226:	9202      	str	r2, [sp, #8]
 8004228:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800422c:	9201      	str	r2, [sp, #4]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	9200      	str	r2, [sp, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a27      	ldr	r2, [pc, #156]	; (80042d4 <GAME_PLAY_Phase_Management+0x1c2c>)
 8004236:	2169      	movs	r1, #105	; 0x69
 8004238:	2005      	movs	r0, #5
 800423a:	f002 fccc 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800423e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	781a      	ldrb	r2, [r3, #0]
 8004246:	4b20      	ldr	r3, [pc, #128]	; (80042c8 <GAME_PLAY_Phase_Management+0x1c20>)
 8004248:	9203      	str	r2, [sp, #12]
 800424a:	2200      	movs	r2, #0
 800424c:	9202      	str	r2, [sp, #8]
 800424e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004252:	9201      	str	r2, [sp, #4]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	9200      	str	r2, [sp, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1f      	ldr	r2, [pc, #124]	; (80042d8 <GAME_PLAY_Phase_Management+0x1c30>)
 800425c:	215a      	movs	r1, #90	; 0x5a
 800425e:	2005      	movs	r0, #5
 8004260:	f002 fcb9 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004264:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	4b16      	ldr	r3, [pc, #88]	; (80042c8 <GAME_PLAY_Phase_Management+0x1c20>)
 800426e:	9203      	str	r2, [sp, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	9202      	str	r2, [sp, #8]
 8004274:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004278:	9201      	str	r2, [sp, #4]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	9200      	str	r2, [sp, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a16      	ldr	r2, [pc, #88]	; (80042dc <GAME_PLAY_Phase_Management+0x1c34>)
 8004282:	2169      	movs	r1, #105	; 0x69
 8004284:	2005      	movs	r0, #5
 8004286:	f002 fca6 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 800428a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800428e:	f003 fa83 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004292:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	9301      	str	r3, [sp, #4]
 800429c:	2300      	movs	r3, #0
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	2326      	movs	r3, #38	; 0x26
 80042a2:	2280      	movs	r2, #128	; 0x80
 80042a4:	215a      	movs	r1, #90	; 0x5a
 80042a6:	2000      	movs	r0, #0
 80042a8:	f002 fdde 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80042ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	9301      	str	r3, [sp, #4]
 80042b6:	2300      	movs	r3, #0
 80042b8:	9300      	str	r3, [sp, #0]
 80042ba:	2326      	movs	r3, #38	; 0x26
 80042bc:	2280      	movs	r2, #128	; 0x80
 80042be:	215a      	movs	r1, #90	; 0x5a
 80042c0:	2000      	movs	r0, #0
 80042c2:	f002 fdd1 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 80042c6:	e335      	b.n	8004934 <GAME_PLAY_Phase_Management+0x228c>
 80042c8:	2400000c 	.word	0x2400000c
 80042cc:	08010e94 	.word	0x08010e94
 80042d0:	08010f88 	.word	0x08010f88
 80042d4:	08010fe8 	.word	0x08010fe8
 80042d8:	08010fa0 	.word	0x08010fa0
 80042dc:	08010f64 	.word	0x08010f64
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 80042e0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	785b      	ldrb	r3, [r3, #1]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	f040 8323 	bne.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80042ee:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	2300      	movs	r3, #0
 80042fa:	9300      	str	r3, [sp, #0]
 80042fc:	2326      	movs	r3, #38	; 0x26
 80042fe:	2280      	movs	r2, #128	; 0x80
 8004300:	215a      	movs	r1, #90	; 0x5a
 8004302:	2000      	movs	r0, #0
 8004304:	f002 fdb0 	bl	8006e68 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004308:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800430c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	22ab      	movs	r2, #171	; 0xab
 8004314:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004318:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004322:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004326:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800432a:	2201      	movs	r2, #1
 800432c:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800432e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004338:	4619      	mov	r1, r3
 800433a:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800433e:	f7fc f9a1 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8004342:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4618      	mov	r0, r3
 800434a:	f7fd fa09 	bl	8001760 <YUGIOH_Reborn>
						state_game->action = 4;
 800434e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004352:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2204      	movs	r2, #4
 800435a:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800435c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd f95b 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 800436c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004370:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	785b      	ldrb	r3, [r3, #1]
 8004378:	3301      	adds	r3, #1
 800437a:	b2da      	uxtb	r2, r3
 800437c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004380:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004388:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	781a      	ldrb	r2, [r3, #0]
 8004390:	4ba5      	ldr	r3, [pc, #660]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 8004392:	9203      	str	r2, [sp, #12]
 8004394:	2200      	movs	r2, #0
 8004396:	9202      	str	r2, [sp, #8]
 8004398:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800439c:	9201      	str	r2, [sp, #4]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	9200      	str	r2, [sp, #0]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4aa1      	ldr	r2, [pc, #644]	; (800462c <GAME_PLAY_Phase_Management+0x1f84>)
 80043a6:	215a      	movs	r1, #90	; 0x5a
 80043a8:	2005      	movs	r0, #5
 80043aa:	f002 fc14 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 80043ae:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	781a      	ldrb	r2, [r3, #0]
 80043b6:	4b9c      	ldr	r3, [pc, #624]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 80043b8:	9203      	str	r2, [sp, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	9202      	str	r2, [sp, #8]
 80043be:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80043c2:	9201      	str	r2, [sp, #4]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	9200      	str	r2, [sp, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a99      	ldr	r2, [pc, #612]	; (8004630 <GAME_PLAY_Phase_Management+0x1f88>)
 80043cc:	2169      	movs	r1, #105	; 0x69
 80043ce:	2005      	movs	r0, #5
 80043d0:	f002 fc01 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80043d4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	781a      	ldrb	r2, [r3, #0]
 80043dc:	4b92      	ldr	r3, [pc, #584]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 80043de:	9203      	str	r2, [sp, #12]
 80043e0:	2200      	movs	r2, #0
 80043e2:	9202      	str	r2, [sp, #8]
 80043e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043e8:	9201      	str	r2, [sp, #4]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	9200      	str	r2, [sp, #0]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a90      	ldr	r2, [pc, #576]	; (8004634 <GAME_PLAY_Phase_Management+0x1f8c>)
 80043f2:	215a      	movs	r1, #90	; 0x5a
 80043f4:	2005      	movs	r0, #5
 80043f6:	f002 fbee 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80043fa:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	781a      	ldrb	r2, [r3, #0]
 8004402:	4b89      	ldr	r3, [pc, #548]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 8004404:	9203      	str	r2, [sp, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	9202      	str	r2, [sp, #8]
 800440a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800440e:	9201      	str	r2, [sp, #4]
 8004410:	685a      	ldr	r2, [r3, #4]
 8004412:	9200      	str	r2, [sp, #0]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a88      	ldr	r2, [pc, #544]	; (8004638 <GAME_PLAY_Phase_Management+0x1f90>)
 8004418:	2169      	movs	r1, #105	; 0x69
 800441a:	2005      	movs	r0, #5
 800441c:	f002 fbdb 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004420:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004424:	f003 f9b8 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004428:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	781b      	ldrb	r3, [r3, #0]
 8004430:	9301      	str	r3, [sp, #4]
 8004432:	2300      	movs	r3, #0
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	2326      	movs	r3, #38	; 0x26
 8004438:	2280      	movs	r2, #128	; 0x80
 800443a:	215a      	movs	r1, #90	; 0x5a
 800443c:	2000      	movs	r0, #0
 800443e:	f002 fd13 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004442:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	9301      	str	r3, [sp, #4]
 800444c:	2300      	movs	r3, #0
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	2326      	movs	r3, #38	; 0x26
 8004452:	2280      	movs	r2, #128	; 0x80
 8004454:	215a      	movs	r1, #90	; 0x5a
 8004456:	2000      	movs	r0, #0
 8004458:	f002 fd06 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 800445c:	e26a      	b.n	8004934 <GAME_PLAY_Phase_Management+0x228c>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800445e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004462:	781b      	ldrb	r3, [r3, #0]
 8004464:	2b10      	cmp	r3, #16
 8004466:	f040 81aa 	bne.w	80047be <GAME_PLAY_Phase_Management+0x2116>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800446a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	9301      	str	r3, [sp, #4]
 8004474:	2300      	movs	r3, #0
 8004476:	9300      	str	r3, [sp, #0]
 8004478:	2326      	movs	r3, #38	; 0x26
 800447a:	2280      	movs	r2, #128	; 0x80
 800447c:	215a      	movs	r1, #90	; 0x5a
 800447e:	2000      	movs	r0, #0
 8004480:	f002 fcf2 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004484:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	4b66      	ldr	r3, [pc, #408]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 800448e:	9203      	str	r2, [sp, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	9202      	str	r2, [sp, #8]
 8004494:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004498:	9201      	str	r2, [sp, #4]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	9200      	str	r2, [sp, #0]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	4a66      	ldr	r2, [pc, #408]	; (800463c <GAME_PLAY_Phase_Management+0x1f94>)
 80044a2:	215a      	movs	r1, #90	; 0x5a
 80044a4:	2005      	movs	r0, #5
 80044a6:	f002 fb96 	bl	8006bd6 <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80044aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	789b      	ldrb	r3, [r3, #2]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	f040 80c4 	bne.w	8004640 <GAME_PLAY_Phase_Management+0x1f98>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80044b8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	781b      	ldrb	r3, [r3, #0]
 80044c0:	9301      	str	r3, [sp, #4]
 80044c2:	2300      	movs	r3, #0
 80044c4:	9300      	str	r3, [sp, #0]
 80044c6:	2326      	movs	r3, #38	; 0x26
 80044c8:	2280      	movs	r2, #128	; 0x80
 80044ca:	215a      	movs	r1, #90	; 0x5a
 80044cc:	2000      	movs	r0, #0
 80044ce:	f002 fccb 	bl	8006e68 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80044d2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80044d6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	22aa      	movs	r2, #170	; 0xaa
 80044de:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80044e2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80044ec:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 0;
 80044f0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80044f4:	2200      	movs	r2, #0
 80044f6:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80044f8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004502:	4619      	mov	r1, r3
 8004504:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004508:	f7fc f8bc 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 800450c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4618      	mov	r0, r3
 8004514:	f7fd f98e 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8004518:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800451c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	2204      	movs	r2, #4
 8004524:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8004526:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004530:	4618      	mov	r0, r3
 8004532:	f7fd f876 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 8004536:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800453a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	785b      	ldrb	r3, [r3, #1]
 8004542:	3301      	adds	r3, #1
 8004544:	b2da      	uxtb	r2, r3
 8004546:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800454a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004552:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	781a      	ldrb	r2, [r3, #0]
 800455a:	4b33      	ldr	r3, [pc, #204]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 800455c:	9203      	str	r2, [sp, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	9202      	str	r2, [sp, #8]
 8004562:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004566:	9201      	str	r2, [sp, #4]
 8004568:	685a      	ldr	r2, [r3, #4]
 800456a:	9200      	str	r2, [sp, #0]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a2f      	ldr	r2, [pc, #188]	; (800462c <GAME_PLAY_Phase_Management+0x1f84>)
 8004570:	215a      	movs	r1, #90	; 0x5a
 8004572:	2005      	movs	r0, #5
 8004574:	f002 fb2f 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004578:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	781a      	ldrb	r2, [r3, #0]
 8004580:	4b29      	ldr	r3, [pc, #164]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 8004582:	9203      	str	r2, [sp, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	9202      	str	r2, [sp, #8]
 8004588:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800458c:	9201      	str	r2, [sp, #4]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	9200      	str	r2, [sp, #0]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a26      	ldr	r2, [pc, #152]	; (8004630 <GAME_PLAY_Phase_Management+0x1f88>)
 8004596:	2169      	movs	r1, #105	; 0x69
 8004598:	2005      	movs	r0, #5
 800459a:	f002 fb1c 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800459e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 80045a8:	9203      	str	r2, [sp, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	9202      	str	r2, [sp, #8]
 80045ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80045b2:	9201      	str	r2, [sp, #4]
 80045b4:	685a      	ldr	r2, [r3, #4]
 80045b6:	9200      	str	r2, [sp, #0]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a1e      	ldr	r2, [pc, #120]	; (8004634 <GAME_PLAY_Phase_Management+0x1f8c>)
 80045bc:	215a      	movs	r1, #90	; 0x5a
 80045be:	2005      	movs	r0, #5
 80045c0:	f002 fb09 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80045c4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	781a      	ldrb	r2, [r3, #0]
 80045cc:	4b16      	ldr	r3, [pc, #88]	; (8004628 <GAME_PLAY_Phase_Management+0x1f80>)
 80045ce:	9203      	str	r2, [sp, #12]
 80045d0:	2200      	movs	r2, #0
 80045d2:	9202      	str	r2, [sp, #8]
 80045d4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80045d8:	9201      	str	r2, [sp, #4]
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	9200      	str	r2, [sp, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a15      	ldr	r2, [pc, #84]	; (8004638 <GAME_PLAY_Phase_Management+0x1f90>)
 80045e2:	2169      	movs	r1, #105	; 0x69
 80045e4:	2005      	movs	r0, #5
 80045e6:	f002 faf6 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80045ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80045ee:	f003 f8d3 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80045f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	9301      	str	r3, [sp, #4]
 80045fc:	2300      	movs	r3, #0
 80045fe:	9300      	str	r3, [sp, #0]
 8004600:	2326      	movs	r3, #38	; 0x26
 8004602:	2280      	movs	r2, #128	; 0x80
 8004604:	215a      	movs	r1, #90	; 0x5a
 8004606:	2000      	movs	r0, #0
 8004608:	f002 fc2e 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800460c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	9301      	str	r3, [sp, #4]
 8004616:	2300      	movs	r3, #0
 8004618:	9300      	str	r3, [sp, #0]
 800461a:	2326      	movs	r3, #38	; 0x26
 800461c:	2280      	movs	r2, #128	; 0x80
 800461e:	215a      	movs	r1, #90	; 0x5a
 8004620:	2000      	movs	r0, #0
 8004622:	f002 fc21 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 8004626:	e185      	b.n	8004934 <GAME_PLAY_Phase_Management+0x228c>
 8004628:	2400000c 	.word	0x2400000c
 800462c:	08010f88 	.word	0x08010f88
 8004630:	08010fe8 	.word	0x08010fe8
 8004634:	08010fa0 	.word	0x08010fa0
 8004638:	08010f64 	.word	0x08010f64
 800463c:	08010e94 	.word	0x08010e94
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8004640:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	785b      	ldrb	r3, [r3, #1]
 8004648:	2b00      	cmp	r3, #0
 800464a:	f040 8173 	bne.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800464e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	2300      	movs	r3, #0
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	2326      	movs	r3, #38	; 0x26
 800465e:	2280      	movs	r2, #128	; 0x80
 8004660:	215a      	movs	r1, #90	; 0x5a
 8004662:	2000      	movs	r0, #0
 8004664:	f002 fc00 	bl	8006e68 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8004668:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800466c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	22ab      	movs	r2, #171	; 0xab
 8004674:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8004678:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004682:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
						ptrYugiohCard_dst->cardState = 1;
 8004686:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800468a:	2201      	movs	r2, #1
 800468c:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 800468e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004698:	4619      	mov	r1, r3
 800469a:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800469e:	f7fb fff1 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 80046a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fd f8c3 	bl	8001834 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 80046ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2204      	movs	r2, #4
 80046ba:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80046bc:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fc ffab 	bl	8001622 <YUGIOH_To_GY>
						state_game->count_chain++;
 80046cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	785b      	ldrb	r3, [r3, #1]
 80046d8:	3301      	adds	r3, #1
 80046da:	b2da      	uxtb	r2, r3
 80046dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80046e0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80046e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	781a      	ldrb	r2, [r3, #0]
 80046f0:	4ba3      	ldr	r3, [pc, #652]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 80046f2:	9203      	str	r2, [sp, #12]
 80046f4:	2200      	movs	r2, #0
 80046f6:	9202      	str	r2, [sp, #8]
 80046f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80046fc:	9201      	str	r2, [sp, #4]
 80046fe:	685a      	ldr	r2, [r3, #4]
 8004700:	9200      	str	r2, [sp, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4a9f      	ldr	r2, [pc, #636]	; (8004984 <GAME_PLAY_Phase_Management+0x22dc>)
 8004706:	215a      	movs	r1, #90	; 0x5a
 8004708:	2005      	movs	r0, #5
 800470a:	f002 fa64 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800470e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	781a      	ldrb	r2, [r3, #0]
 8004716:	4b9a      	ldr	r3, [pc, #616]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 8004718:	9203      	str	r2, [sp, #12]
 800471a:	2200      	movs	r2, #0
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004722:	9201      	str	r2, [sp, #4]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	9200      	str	r2, [sp, #0]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a97      	ldr	r2, [pc, #604]	; (8004988 <GAME_PLAY_Phase_Management+0x22e0>)
 800472c:	2169      	movs	r1, #105	; 0x69
 800472e:	2005      	movs	r0, #5
 8004730:	f002 fa51 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004734:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	781a      	ldrb	r2, [r3, #0]
 800473c:	4b90      	ldr	r3, [pc, #576]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 800473e:	9203      	str	r2, [sp, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	9202      	str	r2, [sp, #8]
 8004744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004748:	9201      	str	r2, [sp, #4]
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	9200      	str	r2, [sp, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a8e      	ldr	r2, [pc, #568]	; (800498c <GAME_PLAY_Phase_Management+0x22e4>)
 8004752:	215a      	movs	r1, #90	; 0x5a
 8004754:	2005      	movs	r0, #5
 8004756:	f002 fa3e 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800475a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	781a      	ldrb	r2, [r3, #0]
 8004762:	4b87      	ldr	r3, [pc, #540]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 8004764:	9203      	str	r2, [sp, #12]
 8004766:	2200      	movs	r2, #0
 8004768:	9202      	str	r2, [sp, #8]
 800476a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800476e:	9201      	str	r2, [sp, #4]
 8004770:	685a      	ldr	r2, [r3, #4]
 8004772:	9200      	str	r2, [sp, #0]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a86      	ldr	r2, [pc, #536]	; (8004990 <GAME_PLAY_Phase_Management+0x22e8>)
 8004778:	2169      	movs	r1, #105	; 0x69
 800477a:	2005      	movs	r0, #5
 800477c:	f002 fa2b 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8004780:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004784:	f003 f808 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004788:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	9301      	str	r3, [sp, #4]
 8004792:	2300      	movs	r3, #0
 8004794:	9300      	str	r3, [sp, #0]
 8004796:	2326      	movs	r3, #38	; 0x26
 8004798:	2280      	movs	r2, #128	; 0x80
 800479a:	215a      	movs	r1, #90	; 0x5a
 800479c:	2000      	movs	r0, #0
 800479e:	f002 fb63 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80047a2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	9301      	str	r3, [sp, #4]
 80047ac:	2300      	movs	r3, #0
 80047ae:	9300      	str	r3, [sp, #0]
 80047b0:	2326      	movs	r3, #38	; 0x26
 80047b2:	2280      	movs	r2, #128	; 0x80
 80047b4:	215a      	movs	r1, #90	; 0x5a
 80047b6:	2000      	movs	r0, #0
 80047b8:	f002 fb56 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 80047bc:	e0ba      	b.n	8004934 <GAME_PLAY_Phase_Management+0x228c>
				else if(ptrYugiohCard_src->cardSignature == 17){
 80047be:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b11      	cmp	r3, #17
 80047c6:	f040 80b5 	bne.w	8004934 <GAME_PLAY_Phase_Management+0x228c>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 80047ca:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047d4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 80047d8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80047e2:	4619      	mov	r1, r3
 80047e4:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 80047e8:	f7fb ff4c 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 80047ec:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4619      	mov	r1, r3
 80047fa:	4610      	mov	r0, r2
 80047fc:	f7fd f896 	bl	800192c <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8004800:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004804:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	2204      	movs	r2, #4
 800480c:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800480e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004818:	4618      	mov	r0, r3
 800481a:	f7fc ff02 	bl	8001622 <YUGIOH_To_GY>
					state_game->count_chain++;
 800481e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004822:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	785b      	ldrb	r3, [r3, #1]
 800482a:	3301      	adds	r3, #1
 800482c:	b2da      	uxtb	r2, r3
 800482e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004832:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 800483a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	781a      	ldrb	r2, [r3, #0]
 8004842:	4b4f      	ldr	r3, [pc, #316]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 8004844:	9203      	str	r2, [sp, #12]
 8004846:	2200      	movs	r2, #0
 8004848:	9202      	str	r2, [sp, #8]
 800484a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800484e:	9201      	str	r2, [sp, #4]
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	9200      	str	r2, [sp, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a4b      	ldr	r2, [pc, #300]	; (8004984 <GAME_PLAY_Phase_Management+0x22dc>)
 8004858:	215a      	movs	r1, #90	; 0x5a
 800485a:	2005      	movs	r0, #5
 800485c:	f002 f9bb 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8004860:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	781a      	ldrb	r2, [r3, #0]
 8004868:	4b45      	ldr	r3, [pc, #276]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 800486a:	9203      	str	r2, [sp, #12]
 800486c:	2200      	movs	r2, #0
 800486e:	9202      	str	r2, [sp, #8]
 8004870:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004874:	9201      	str	r2, [sp, #4]
 8004876:	685a      	ldr	r2, [r3, #4]
 8004878:	9200      	str	r2, [sp, #0]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a45      	ldr	r2, [pc, #276]	; (8004994 <GAME_PLAY_Phase_Management+0x22ec>)
 800487e:	2169      	movs	r1, #105	; 0x69
 8004880:	2005      	movs	r0, #5
 8004882:	f002 f9a8 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8004886:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	781a      	ldrb	r2, [r3, #0]
 800488e:	4b3c      	ldr	r3, [pc, #240]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 8004890:	9203      	str	r2, [sp, #12]
 8004892:	2200      	movs	r2, #0
 8004894:	9202      	str	r2, [sp, #8]
 8004896:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800489a:	9201      	str	r2, [sp, #4]
 800489c:	685a      	ldr	r2, [r3, #4]
 800489e:	9200      	str	r2, [sp, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a3a      	ldr	r2, [pc, #232]	; (800498c <GAME_PLAY_Phase_Management+0x22e4>)
 80048a4:	215a      	movs	r1, #90	; 0x5a
 80048a6:	2005      	movs	r0, #5
 80048a8:	f002 f995 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80048ac:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	781a      	ldrb	r2, [r3, #0]
 80048b4:	4b32      	ldr	r3, [pc, #200]	; (8004980 <GAME_PLAY_Phase_Management+0x22d8>)
 80048b6:	9203      	str	r2, [sp, #12]
 80048b8:	2200      	movs	r2, #0
 80048ba:	9202      	str	r2, [sp, #8]
 80048bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80048c0:	9201      	str	r2, [sp, #4]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	9200      	str	r2, [sp, #0]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a31      	ldr	r2, [pc, #196]	; (8004990 <GAME_PLAY_Phase_Management+0x22e8>)
 80048ca:	2169      	movs	r1, #105	; 0x69
 80048cc:	2005      	movs	r0, #5
 80048ce:	f002 f982 	bl	8006bd6 <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 80048d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048d6:	f002 ff5f 	bl	8007798 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80048da:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	9301      	str	r3, [sp, #4]
 80048e4:	2300      	movs	r3, #0
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2326      	movs	r3, #38	; 0x26
 80048ea:	2280      	movs	r2, #128	; 0x80
 80048ec:	215a      	movs	r1, #90	; 0x5a
 80048ee:	2000      	movs	r0, #0
 80048f0:	f002 faba 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80048f4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	781b      	ldrb	r3, [r3, #0]
 80048fc:	9301      	str	r3, [sp, #4]
 80048fe:	2300      	movs	r3, #0
 8004900:	9300      	str	r3, [sp, #0]
 8004902:	2326      	movs	r3, #38	; 0x26
 8004904:	2280      	movs	r2, #128	; 0x80
 8004906:	215a      	movs	r1, #90	; 0x5a
 8004908:	2000      	movs	r0, #0
 800490a:	f002 faad 	bl	8006e68 <ST7735_FillRectangleNSS>
			break;
 800490e:	e011      	b.n	8004934 <GAME_PLAY_Phase_Management+0x228c>
			break;
 8004910:	bf00      	nop
 8004912:	f001 ba82 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004916:	bf00      	nop
 8004918:	f001 ba7f 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
			break;
 800491c:	bf00      	nop
 800491e:	f001 ba7c 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004922:	bf00      	nop
 8004924:	f001 ba79 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004928:	bf00      	nop
 800492a:	f001 ba76 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
			break;
 800492e:	bf00      	nop
 8004930:	f001 ba73 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
			break;
 8004934:	bf00      	nop
		}
		break;
 8004936:	f001 ba70 	b.w	8005e1a <GAME_PLAY_Phase_Management+0x3772>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 800493a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800493e:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004942:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004946:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800494a:	6811      	ldr	r1, [r2, #0]
 800494c:	6818      	ldr	r0, [r3, #0]
 800494e:	f7fd f97d 	bl	8001c4c <LCDvalue>
			switch(PBS){
 8004952:	f897 3249 	ldrb.w	r3, [r7, #585]	; 0x249
 8004956:	2b06      	cmp	r3, #6
 8004958:	f201 8261 	bhi.w	8005e1e <GAME_PLAY_Phase_Management+0x3776>
 800495c:	a201      	add	r2, pc, #4	; (adr r2, 8004964 <GAME_PLAY_Phase_Management+0x22bc>)
 800495e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004962:	bf00      	nop
 8004964:	08005dfb 	.word	0x08005dfb
 8004968:	08004999 	.word	0x08004999
 800496c:	080050c9 	.word	0x080050c9
 8004970:	08004d93 	.word	0x08004d93
 8004974:	080053fd 	.word	0x080053fd
 8004978:	080056dd 	.word	0x080056dd
 800497c:	08005c21 	.word	0x08005c21
 8004980:	2400000c 	.word	0x2400000c
 8004984:	08010f88 	.word	0x08010f88
 8004988:	08010fe8 	.word	0x08010fe8
 800498c:	08010fa0 	.word	0x08010fa0
 8004990:	08010f64 	.word	0x08010f64
 8004994:	08010ff8 	.word	0x08010ff8
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 8004998:	4ba2      	ldr	r3, [pc, #648]	; (8004c24 <GAME_PLAY_Phase_Management+0x257c>)
 800499a:	2200      	movs	r2, #0
 800499c:	9202      	str	r2, [sp, #8]
 800499e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80049a2:	9201      	str	r2, [sp, #4]
 80049a4:	685a      	ldr	r2, [r3, #4]
 80049a6:	9200      	str	r2, [sp, #0]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a9f      	ldr	r2, [pc, #636]	; (8004c28 <GAME_PLAY_Phase_Management+0x2580>)
 80049ac:	2123      	movs	r1, #35	; 0x23
 80049ae:	206e      	movs	r0, #110	; 0x6e
 80049b0:	f002 f87d 	bl	8006aae <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80049b4:	4b9b      	ldr	r3, [pc, #620]	; (8004c24 <GAME_PLAY_Phase_Management+0x257c>)
 80049b6:	2200      	movs	r2, #0
 80049b8:	9202      	str	r2, [sp, #8]
 80049ba:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80049be:	9201      	str	r2, [sp, #4]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	9200      	str	r2, [sp, #0]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a98      	ldr	r2, [pc, #608]	; (8004c28 <GAME_PLAY_Phase_Management+0x2580>)
 80049c8:	2123      	movs	r1, #35	; 0x23
 80049ca:	206e      	movs	r0, #110	; 0x6e
 80049cc:	f002 f8b9 	bl	8006b42 <ST7735_WriteString1>
				if(state_game->action == 50){
 80049d0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049d4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	2b32      	cmp	r3, #50	; 0x32
 80049de:	f040 809b 	bne.w	8004b18 <GAME_PLAY_Phase_Management+0x2470>
					Player_Reading_Card_Monster_Battle(RFIDmain, state_game, playerDef);
 80049e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049e6:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80049ea:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049ee:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80049f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80049f6:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80049fa:	6812      	ldr	r2, [r2, #0]
 80049fc:	6809      	ldr	r1, [r1, #0]
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f7fc f87c 	bl	8000afc <Player_Reading_Card_Monster_Battle>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8004a04:	2101      	movs	r1, #1
 8004a06:	4889      	ldr	r0, [pc, #548]	; (8004c2c <GAME_PLAY_Phase_Management+0x2584>)
 8004a08:	f006 f814 	bl	800aa34 <HAL_GPIO_ReadPin>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f041 81f5 	bne.w	8005dfe <GAME_PLAY_Phase_Management+0x3756>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8004a14:	4886      	ldr	r0, [pc, #536]	; (8004c30 <GAME_PLAY_Phase_Management+0x2588>)
 8004a16:	f009 fa0b 	bl	800de30 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8004a1a:	4986      	ldr	r1, [pc, #536]	; (8004c34 <GAME_PLAY_Phase_Management+0x258c>)
 8004a1c:	f04f 0200 	mov.w	r2, #0
 8004a20:	f04f 0300 	mov.w	r3, #0
 8004a24:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004a28:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a2c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	9301      	str	r3, [sp, #4]
 8004a36:	2300      	movs	r3, #0
 8004a38:	9300      	str	r3, [sp, #0]
 8004a3a:	2326      	movs	r3, #38	; 0x26
 8004a3c:	2280      	movs	r2, #128	; 0x80
 8004a3e:	215a      	movs	r1, #90	; 0x5a
 8004a40:	2000      	movs	r0, #0
 8004a42:	f002 fa11 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8004a46:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a4a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	781a      	ldrb	r2, [r3, #0]
 8004a52:	4b79      	ldr	r3, [pc, #484]	; (8004c38 <GAME_PLAY_Phase_Management+0x2590>)
 8004a54:	9203      	str	r2, [sp, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	9202      	str	r2, [sp, #8]
 8004a5a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004a5e:	9201      	str	r2, [sp, #4]
 8004a60:	685a      	ldr	r2, [r3, #4]
 8004a62:	9200      	str	r2, [sp, #0]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a75      	ldr	r2, [pc, #468]	; (8004c3c <GAME_PLAY_Phase_Management+0x2594>)
 8004a68:	215a      	movs	r1, #90	; 0x5a
 8004a6a:	200f      	movs	r0, #15
 8004a6c:	f002 f8b3 	bl	8006bd6 <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 8004a70:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004a74:	f002 fe90 	bl	8007798 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004a78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a7c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	9301      	str	r3, [sp, #4]
 8004a86:	2300      	movs	r3, #0
 8004a88:	9300      	str	r3, [sp, #0]
 8004a8a:	2326      	movs	r3, #38	; 0x26
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	215a      	movs	r1, #90	; 0x5a
 8004a90:	2000      	movs	r0, #0
 8004a92:	f002 f9e9 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004a96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004a9a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	781b      	ldrb	r3, [r3, #0]
 8004aa2:	9301      	str	r3, [sp, #4]
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	9300      	str	r3, [sp, #0]
 8004aa8:	2326      	movs	r3, #38	; 0x26
 8004aaa:	2280      	movs	r2, #128	; 0x80
 8004aac:	215a      	movs	r1, #90	; 0x5a
 8004aae:	2000      	movs	r0, #0
 8004ab0:	f002 f9da 	bl	8006e68 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8004ab4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ab8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8004ac2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ac6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004aca:	6818      	ldr	r0, [r3, #0]
 8004acc:	f7fc ffbc 	bl	8001a48 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 8004ad0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ad4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8004ade:	2b02      	cmp	r3, #2
 8004ae0:	d108      	bne.n	8004af4 <GAME_PLAY_Phase_Management+0x244c>
							state_game->MainGame_State = second_player;
 8004ae2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ae6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	2203      	movs	r2, #3
 8004aee:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8004af2:	e007      	b.n	8004b04 <GAME_PLAY_Phase_Management+0x245c>
						}
						else{
							state_game->MainGame_State = first_player;
 8004af4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004af8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2202      	movs	r2, #2
 8004b00:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 8004b04:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b08:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	2201      	movs	r2, #1
 8004b10:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 8004b14:	f001 b973 	b.w	8005dfe <GAME_PLAY_Phase_Management+0x3756>
				else if(state_game->action == 51){
 8004b18:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b1c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b33      	cmp	r3, #51	; 0x33
 8004b26:	f041 816a 	bne.w	8005dfe <GAME_PLAY_Phase_Management+0x3756>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004b2a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b2e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	9301      	str	r3, [sp, #4]
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9300      	str	r3, [sp, #0]
 8004b3c:	2326      	movs	r3, #38	; 0x26
 8004b3e:	2280      	movs	r2, #128	; 0x80
 8004b40:	215a      	movs	r1, #90	; 0x5a
 8004b42:	2000      	movs	r0, #0
 8004b44:	f002 f990 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004b48:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b4c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	9301      	str	r3, [sp, #4]
 8004b56:	2300      	movs	r3, #0
 8004b58:	9300      	str	r3, [sp, #0]
 8004b5a:	2326      	movs	r3, #38	; 0x26
 8004b5c:	2280      	movs	r2, #128	; 0x80
 8004b5e:	215a      	movs	r1, #90	; 0x5a
 8004b60:	2000      	movs	r0, #0
 8004b62:	f002 f981 	bl	8006e68 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 8004b66:	2300      	movs	r3, #0
 8004b68:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004b6c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b70:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004b7a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 8004b7e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004b82:	799b      	ldrb	r3, [r3, #6]
 8004b84:	f887 3235 	strb.w	r3, [r7, #565]	; 0x235
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8004b88:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004b8c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3338      	adds	r3, #56	; 0x38
 8004b94:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004b98:	2300      	movs	r3, #0
 8004b9a:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004b9e:	e013      	b.n	8004bc8 <GAME_PLAY_Phase_Management+0x2520>
						if(ptrYugiohCard_dst->cardData == 0){
 8004ba0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d104      	bne.n	8004bb4 <GAME_PLAY_Phase_Management+0x250c>
							check_def_mon++;
 8004baa:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004bae:	3301      	adds	r3, #1
 8004bb0:	f887 3253 	strb.w	r3, [r7, #595]	; 0x253
						ptrYugiohCard_dst++;
 8004bb4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004bb8:	3310      	adds	r3, #16
 8004bba:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for(uint8_t i = 0;i < 3; ++i){
 8004bbe:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	f887 3252 	strb.w	r3, [r7, #594]	; 0x252
 8004bc8:	f897 3252 	ldrb.w	r3, [r7, #594]	; 0x252
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d9e7      	bls.n	8004ba0 <GAME_PLAY_Phase_Management+0x24f8>
					uint8_t flag_can_atk = 0;
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004bd6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bda:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004be4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8004be8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004bec:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	3338      	adds	r3, #56	; 0x38
 8004bf4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8004bfe:	e02c      	b.n	8004c5a <GAME_PLAY_Phase_Management+0x25b2>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8004c00:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004c04:	68da      	ldr	r2, [r3, #12]
 8004c06:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c0a:	68db      	ldr	r3, [r3, #12]
 8004c0c:	429a      	cmp	r2, r3
 8004c0e:	d11a      	bne.n	8004c46 <GAME_PLAY_Phase_Management+0x259e>
							if(ptrYugiohCard_dst->cardState == 1){
 8004c10:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c14:	789b      	ldrb	r3, [r3, #2]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d112      	bne.n	8004c40 <GAME_PLAY_Phase_Management+0x2598>
								flag_can_atk = 2;
 8004c1a:	2302      	movs	r3, #2
 8004c1c:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
								break;
 8004c20:	e01f      	b.n	8004c62 <GAME_PLAY_Phase_Management+0x25ba>
 8004c22:	bf00      	nop
 8004c24:	2400000c 	.word	0x2400000c
 8004c28:	08011008 	.word	0x08011008
 8004c2c:	58020800 	.word	0x58020800
 8004c30:	240002e8 	.word	0x240002e8
 8004c34:	24000ea0 	.word	0x24000ea0
 8004c38:	24000014 	.word	0x24000014
 8004c3c:	0801100c 	.word	0x0801100c
								flag_can_atk = 1;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
						ptrYugiohCard_dst++;
 8004c46:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c4a:	3310      	adds	r3, #16
 8004c4c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					for (uint8_t i = 0;i < 3; ++i) {
 8004c50:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8004c54:	3301      	adds	r3, #1
 8004c56:	f887 3250 	strb.w	r3, [r7, #592]	; 0x250
 8004c5a:	f897 3250 	ldrb.w	r3, [r7, #592]	; 0x250
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d9ce      	bls.n	8004c00 <GAME_PLAY_Phase_Management+0x2558>
					if (check_def_mon < 3)
 8004c62:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004c66:	2b02      	cmp	r3, #2
 8004c68:	d810      	bhi.n	8004c8c <GAME_PLAY_Phase_Management+0x25e4>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 8004c6a:	f897 3235 	ldrb.w	r3, [r7, #565]	; 0x235
 8004c6e:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004c72:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004c76:	6812      	ldr	r2, [r2, #0]
 8004c78:	3301      	adds	r3, #1
 8004c7a:	011b      	lsls	r3, r3, #4
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3304      	adds	r3, #4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <GAME_PLAY_Phase_Management+0x25e4>
							flag_can_atk = 1;
 8004c86:	2301      	movs	r3, #1
 8004c88:	f887 3251 	strb.w	r3, [r7, #593]	; 0x251
					if (flag_can_atk == 2) {
 8004c8c:	f897 3251 	ldrb.w	r3, [r7, #593]	; 0x251
 8004c90:	2b02      	cmp	r3, #2
 8004c92:	d165      	bne.n	8004d60 <GAME_PLAY_Phase_Management+0x26b8>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 8004c94:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004c98:	7a1b      	ldrb	r3, [r3, #8]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d047      	beq.n	8004d2e <GAME_PLAY_Phase_Management+0x2686>
 8004c9e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004ca2:	789b      	ldrb	r3, [r3, #2]
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d142      	bne.n	8004d2e <GAME_PLAY_Phase_Management+0x2686>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 8004ca8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004cac:	7a1b      	ldrb	r3, [r3, #8]
 8004cae:	3b01      	subs	r3, #1
 8004cb0:	b2da      	uxtb	r2, r3
 8004cb2:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004cb6:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 8004cb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cbc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8004ccc:	f7fb fcda 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8004cd0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004cd4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004cde:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							if(check_def_mon == 3){
 8004ce2:	f897 3253 	ldrb.w	r3, [r7, #595]	; 0x253
 8004ce6:	2b03      	cmp	r3, #3
 8004ce8:	d104      	bne.n	8004cf4 <GAME_PLAY_Phase_Management+0x264c>
								ptrYugiohCard_dst->targetPosition = 99;
 8004cea:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004cee:	2263      	movs	r2, #99	; 0x63
 8004cf0:	71da      	strb	r2, [r3, #7]
 8004cf2:	e004      	b.n	8004cfe <GAME_PLAY_Phase_Management+0x2656>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8004cf4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8004cf8:	f897 2235 	ldrb.w	r2, [r7, #565]	; 0x235
 8004cfc:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 8004cfe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004d06:	6818      	ldr	r0, [r3, #0]
 8004d08:	f7fc fb94 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8004d0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d10:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	2234      	movs	r2, #52	; 0x34
 8004d18:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8004d1a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d1e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	2203      	movs	r2, #3
 8004d26:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004d2a:	f001 b868 	b.w	8005dfe <GAME_PLAY_Phase_Management+0x3756>
							state_game->test = 222;
 8004d2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d32:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	22de      	movs	r2, #222	; 0xde
 8004d3a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 8004d3e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d42:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	2232      	movs	r2, #50	; 0x32
 8004d4a:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004d4c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d50:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	2201      	movs	r2, #1
 8004d58:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004d5c:	f001 b84f 	b.w	8005dfe <GAME_PLAY_Phase_Management+0x3756>
						state_game->test = 223;
 8004d60:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d64:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	22df      	movs	r2, #223	; 0xdf
 8004d6c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8004d70:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d74:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2232      	movs	r2, #50	; 0x32
 8004d7c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8004d7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8004d8e:	f001 b836 	b.w	8005dfe <GAME_PLAY_Phase_Management+0x3756>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004d92:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004d96:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	781a      	ldrb	r2, [r3, #0]
 8004d9e:	4bc5      	ldr	r3, [pc, #788]	; (80050b4 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004da0:	9203      	str	r2, [sp, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	9202      	str	r2, [sp, #8]
 8004da6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004daa:	9201      	str	r2, [sp, #4]
 8004dac:	685a      	ldr	r2, [r3, #4]
 8004dae:	9200      	str	r2, [sp, #0]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4ac1      	ldr	r2, [pc, #772]	; (80050b8 <GAME_PLAY_Phase_Management+0x2a10>)
 8004db4:	215a      	movs	r1, #90	; 0x5a
 8004db6:	2005      	movs	r0, #5
 8004db8:	f001 ff0d 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8004dbc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dc0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	781a      	ldrb	r2, [r3, #0]
 8004dc8:	4bba      	ldr	r3, [pc, #744]	; (80050b4 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004dca:	9203      	str	r2, [sp, #12]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	9202      	str	r2, [sp, #8]
 8004dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dd4:	9201      	str	r2, [sp, #4]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	9200      	str	r2, [sp, #0]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4ab7      	ldr	r2, [pc, #732]	; (80050bc <GAME_PLAY_Phase_Management+0x2a14>)
 8004dde:	2169      	movs	r1, #105	; 0x69
 8004de0:	2005      	movs	r0, #5
 8004de2:	f001 fef8 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004de6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004dea:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	781a      	ldrb	r2, [r3, #0]
 8004df2:	4bb0      	ldr	r3, [pc, #704]	; (80050b4 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004df4:	9203      	str	r2, [sp, #12]
 8004df6:	2200      	movs	r2, #0
 8004df8:	9202      	str	r2, [sp, #8]
 8004dfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004dfe:	9201      	str	r2, [sp, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	9200      	str	r2, [sp, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4aae      	ldr	r2, [pc, #696]	; (80050c0 <GAME_PLAY_Phase_Management+0x2a18>)
 8004e08:	215a      	movs	r1, #90	; 0x5a
 8004e0a:	2005      	movs	r0, #5
 8004e0c:	f001 fee3 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004e10:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e14:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	781a      	ldrb	r2, [r3, #0]
 8004e1c:	4ba5      	ldr	r3, [pc, #660]	; (80050b4 <GAME_PLAY_Phase_Management+0x2a0c>)
 8004e1e:	9203      	str	r2, [sp, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	9202      	str	r2, [sp, #8]
 8004e24:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004e28:	9201      	str	r2, [sp, #4]
 8004e2a:	685a      	ldr	r2, [r3, #4]
 8004e2c:	9200      	str	r2, [sp, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4aa4      	ldr	r2, [pc, #656]	; (80050c4 <GAME_PLAY_Phase_Management+0x2a1c>)
 8004e32:	2169      	movs	r1, #105	; 0x69
 8004e34:	2005      	movs	r0, #5
 8004e36:	f001 fece 	bl	8006bd6 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8004e3a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e3e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	781b      	ldrb	r3, [r3, #0]
 8004e46:	2b34      	cmp	r3, #52	; 0x34
 8004e48:	d141      	bne.n	8004ece <GAME_PLAY_Phase_Management+0x2826>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8004e4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e4e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	789b      	ldrb	r3, [r3, #2]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d115      	bne.n	8004e86 <GAME_PLAY_Phase_Management+0x27de>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 8004e5a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e5e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2204      	movs	r2, #4
 8004e66:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 8004e6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2236      	movs	r2, #54	; 0x36
 8004e76:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 8004e78:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e7c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	2200      	movs	r2, #0
 8004e84:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 8004e86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e8a:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004e8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e92:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004e96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004e9a:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004e9e:	6812      	ldr	r2, [r2, #0]
 8004ea0:	6809      	ldr	r1, [r1, #0]
 8004ea2:	6818      	ldr	r0, [r3, #0]
 8004ea4:	f7fb fed2 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 8004ea8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eac:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8004eb0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004eb4:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 8004eb8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ebc:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 8004ec0:	6812      	ldr	r2, [r2, #0]
 8004ec2:	6809      	ldr	r1, [r1, #0]
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	f7fc f9c3 	bl	8001250 <Player_Reading_Card_Monster_Effect>





				break;
 8004eca:	f000 bf9a 	b.w	8005e02 <GAME_PLAY_Phase_Management+0x375a>
				else if ((state_game->action == 53 ))
 8004ece:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ed2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	781b      	ldrb	r3, [r3, #0]
 8004eda:	2b35      	cmp	r3, #53	; 0x35
 8004edc:	f040 8791 	bne.w	8005e02 <GAME_PLAY_Phase_Management+0x375a>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8004ee0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ee4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	781b      	ldrb	r3, [r3, #0]
 8004eec:	9301      	str	r3, [sp, #4]
 8004eee:	2300      	movs	r3, #0
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	2326      	movs	r3, #38	; 0x26
 8004ef4:	2280      	movs	r2, #128	; 0x80
 8004ef6:	215a      	movs	r1, #90	; 0x5a
 8004ef8:	2000      	movs	r0, #0
 8004efa:	f001 ffb5 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8004efe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f02:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	781b      	ldrb	r3, [r3, #0]
 8004f0a:	9301      	str	r3, [sp, #4]
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	9300      	str	r3, [sp, #0]
 8004f10:	2326      	movs	r3, #38	; 0x26
 8004f12:	2280      	movs	r2, #128	; 0x80
 8004f14:	215a      	movs	r1, #90	; 0x5a
 8004f16:	2000      	movs	r0, #0
 8004f18:	f001 ffa6 	bl	8006e68 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8004f1c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f20:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004f2a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8004f2e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f32:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8004f36:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8004f3a:	6818      	ldr	r0, [r3, #0]
 8004f3c:	f7fc fd2c 	bl	8001998 <YUGIOH_Check_Trap_On_board>
 8004f40:	4603      	mov	r3, r0
 8004f42:	f887 3237 	strb.w	r3, [r7, #567]	; 0x237
					if(ptrYugiohCard_src->cardSignature == 3){
 8004f46:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	2b03      	cmp	r3, #3
 8004f4e:	d14f      	bne.n	8004ff0 <GAME_PLAY_Phase_Management+0x2948>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8004f50:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f54:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f58:	6818      	ldr	r0, [r3, #0]
 8004f5a:	f7fc fb16 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8004f5e:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8004f62:	2200      	movs	r2, #0
 8004f64:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8004f66:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f6a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8004f74:	4619      	mov	r1, r3
 8004f76:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8004f7a:	f7fb fb83 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 8004f7e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f82:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004f8c:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8004f90:	6812      	ldr	r2, [r2, #0]
 8004f92:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 8004f96:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004f9a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8004fa4:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 8004fa8:	6812      	ldr	r2, [r2, #0]
 8004faa:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8004fae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fb2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	b2da      	uxtb	r2, r3
 8004fc0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fc4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 8004fce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fd2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	2202      	movs	r2, #2
 8004fda:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8004fde:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004fe2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2234      	movs	r2, #52	; 0x34
 8004fea:	701a      	strb	r2, [r3, #0]
				break;
 8004fec:	f000 bf09 	b.w	8005e02 <GAME_PLAY_Phase_Management+0x375a>
						if (idx != 255)
 8004ff0:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 8004ff4:	2bff      	cmp	r3, #255	; 0xff
 8004ff6:	f000 8704 	beq.w	8005e02 <GAME_PLAY_Phase_Management+0x375a>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8004ffa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8004ffe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	f7fc fac1 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 8005008:	f897 3237 	ldrb.w	r3, [r7, #567]	; 0x237
 800500c:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005010:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005014:	011b      	lsls	r3, r3, #4
 8005016:	3308      	adds	r3, #8
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	4413      	add	r3, r2
 800501c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8005020:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005024:	2200      	movs	r2, #0
 8005026:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8005028:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800502c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8005036:	4619      	mov	r1, r3
 8005038:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 800503c:	f7fb fb22 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8005040:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005044:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800504e:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005052:	6812      	ldr	r2, [r2, #0]
 8005054:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 8005058:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800505c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005066:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 800506a:	6812      	ldr	r2, [r2, #0]
 800506c:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8005070:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005074:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800507e:	3301      	adds	r3, #1
 8005080:	b2da      	uxtb	r2, r3
 8005082:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005086:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8005090:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005094:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	2202      	movs	r2, #2
 800509c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80050a0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050a4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2234      	movs	r2, #52	; 0x34
 80050ac:	701a      	strb	r2, [r3, #0]
				break;
 80050ae:	f000 bea8 	b.w	8005e02 <GAME_PLAY_Phase_Management+0x375a>
 80050b2:	bf00      	nop
 80050b4:	2400000c 	.word	0x2400000c
 80050b8:	08011018 	.word	0x08011018
 80050bc:	08011028 	.word	0x08011028
 80050c0:	08011034 	.word	0x08011034
 80050c4:	08011044 	.word	0x08011044
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80050c8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050cc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	4bc4      	ldr	r3, [pc, #784]	; (80053e8 <GAME_PLAY_Phase_Management+0x2d40>)
 80050d6:	9203      	str	r2, [sp, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	9202      	str	r2, [sp, #8]
 80050dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80050e0:	9201      	str	r2, [sp, #4]
 80050e2:	685a      	ldr	r2, [r3, #4]
 80050e4:	9200      	str	r2, [sp, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4ac0      	ldr	r2, [pc, #768]	; (80053ec <GAME_PLAY_Phase_Management+0x2d44>)
 80050ea:	215a      	movs	r1, #90	; 0x5a
 80050ec:	2005      	movs	r0, #5
 80050ee:	f001 fd72 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80050f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80050f6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	781a      	ldrb	r2, [r3, #0]
 80050fe:	4bba      	ldr	r3, [pc, #744]	; (80053e8 <GAME_PLAY_Phase_Management+0x2d40>)
 8005100:	9203      	str	r2, [sp, #12]
 8005102:	2200      	movs	r2, #0
 8005104:	9202      	str	r2, [sp, #8]
 8005106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800510a:	9201      	str	r2, [sp, #4]
 800510c:	685a      	ldr	r2, [r3, #4]
 800510e:	9200      	str	r2, [sp, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4ab7      	ldr	r2, [pc, #732]	; (80053f0 <GAME_PLAY_Phase_Management+0x2d48>)
 8005114:	2169      	movs	r1, #105	; 0x69
 8005116:	2005      	movs	r0, #5
 8005118:	f001 fd5d 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800511c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005120:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	781a      	ldrb	r2, [r3, #0]
 8005128:	4baf      	ldr	r3, [pc, #700]	; (80053e8 <GAME_PLAY_Phase_Management+0x2d40>)
 800512a:	9203      	str	r2, [sp, #12]
 800512c:	2200      	movs	r2, #0
 800512e:	9202      	str	r2, [sp, #8]
 8005130:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005134:	9201      	str	r2, [sp, #4]
 8005136:	685a      	ldr	r2, [r3, #4]
 8005138:	9200      	str	r2, [sp, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4aad      	ldr	r2, [pc, #692]	; (80053f4 <GAME_PLAY_Phase_Management+0x2d4c>)
 800513e:	215a      	movs	r1, #90	; 0x5a
 8005140:	2005      	movs	r0, #5
 8005142:	f001 fd48 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005146:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800514a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	781a      	ldrb	r2, [r3, #0]
 8005152:	4ba5      	ldr	r3, [pc, #660]	; (80053e8 <GAME_PLAY_Phase_Management+0x2d40>)
 8005154:	9203      	str	r2, [sp, #12]
 8005156:	2200      	movs	r2, #0
 8005158:	9202      	str	r2, [sp, #8]
 800515a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800515e:	9201      	str	r2, [sp, #4]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	9200      	str	r2, [sp, #0]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4aa4      	ldr	r2, [pc, #656]	; (80053f8 <GAME_PLAY_Phase_Management+0x2d50>)
 8005168:	2169      	movs	r1, #105	; 0x69
 800516a:	2005      	movs	r0, #5
 800516c:	f001 fd33 	bl	8006bd6 <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 8005170:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005174:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b34      	cmp	r3, #52	; 0x34
 800517e:	d141      	bne.n	8005204 <GAME_PLAY_Phase_Management+0x2b5c>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 8005180:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005184:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	789b      	ldrb	r3, [r3, #2]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d115      	bne.n	80051bc <GAME_PLAY_Phase_Management+0x2b14>
						//affect
						state_game->action = 54;
 8005190:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005194:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	2236      	movs	r2, #54	; 0x36
 800519c:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800519e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051a2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2204      	movs	r2, #4
 80051aa:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80051ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	2200      	movs	r2, #0
 80051ba:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card_Trap(RFIDmain,state_game,playerDef);
 80051bc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051c0:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80051c4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051c8:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80051cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051d0:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80051d4:	6812      	ldr	r2, [r2, #0]
 80051d6:	6809      	ldr	r1, [r1, #0]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	f7fb fd37 	bl	8000c4c <Player_Reading_Card_Trap>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80051de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051e2:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 80051e6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051ea:	f5a3 7116 	sub.w	r1, r3, #600	; 0x258
 80051ee:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80051f2:	f5a3 7315 	sub.w	r3, r3, #596	; 0x254
 80051f6:	6812      	ldr	r2, [r2, #0]
 80051f8:	6809      	ldr	r1, [r1, #0]
 80051fa:	6818      	ldr	r0, [r3, #0]
 80051fc:	f7fc f828 	bl	8001250 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 8005200:	f000 be01 	b.w	8005e06 <GAME_PLAY_Phase_Management+0x375e>
				else if ((state_game->action == 53 )){
 8005204:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005208:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b35      	cmp	r3, #53	; 0x35
 8005212:	f040 85f8 	bne.w	8005e06 <GAME_PLAY_Phase_Management+0x375e>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005216:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800521a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	781b      	ldrb	r3, [r3, #0]
 8005222:	9301      	str	r3, [sp, #4]
 8005224:	2300      	movs	r3, #0
 8005226:	9300      	str	r3, [sp, #0]
 8005228:	2326      	movs	r3, #38	; 0x26
 800522a:	2280      	movs	r2, #128	; 0x80
 800522c:	215a      	movs	r1, #90	; 0x5a
 800522e:	2000      	movs	r0, #0
 8005230:	f001 fe1a 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005234:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005238:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	9301      	str	r3, [sp, #4]
 8005242:	2300      	movs	r3, #0
 8005244:	9300      	str	r3, [sp, #0]
 8005246:	2326      	movs	r3, #38	; 0x26
 8005248:	2280      	movs	r2, #128	; 0x80
 800524a:	215a      	movs	r1, #90	; 0x5a
 800524c:	2000      	movs	r0, #0
 800524e:	f001 fe0b 	bl	8006e68 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8005252:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005256:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005260:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 8005264:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005268:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800526c:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005270:	6818      	ldr	r0, [r3, #0]
 8005272:	f7fc fb91 	bl	8001998 <YUGIOH_Check_Trap_On_board>
 8005276:	4603      	mov	r3, r0
 8005278:	f887 3236 	strb.w	r3, [r7, #566]	; 0x236
					if(ptrYugiohCard_src->cardSignature == 3){
 800527c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005280:	781b      	ldrb	r3, [r3, #0]
 8005282:	2b03      	cmp	r3, #3
 8005284:	d14f      	bne.n	8005326 <GAME_PLAY_Phase_Management+0x2c7e>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8005286:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800528a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800528e:	6818      	ldr	r0, [r3, #0]
 8005290:	f7fc f97b 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8005294:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005298:	2200      	movs	r2, #0
 800529a:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800529c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80052aa:	4619      	mov	r1, r3
 80052ac:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 80052b0:	f7fb f9e8 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 80052b4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052b8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80052c2:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 80052cc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052d0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f507 7218 	add.w	r2, r7, #608	; 0x260
 80052da:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 80052de:	6812      	ldr	r2, [r2, #0]
 80052e0:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80052e4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052e8:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80052f2:	3301      	adds	r3, #1
 80052f4:	b2da      	uxtb	r2, r3
 80052f6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80052fa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 8005304:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005308:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	2203      	movs	r2, #3
 8005310:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 8005314:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005318:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2234      	movs	r2, #52	; 0x34
 8005320:	701a      	strb	r2, [r3, #0]
				break;
 8005322:	f000 bd70 	b.w	8005e06 <GAME_PLAY_Phase_Management+0x375e>
						if (idx != 255)
 8005326:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 800532a:	2bff      	cmp	r3, #255	; 0xff
 800532c:	f000 856b 	beq.w	8005e06 <GAME_PLAY_Phase_Management+0x375e>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 8005330:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005334:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	f7fc f926 	bl	800158a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800533e:	f897 3236 	ldrb.w	r3, [r7, #566]	; 0x236
 8005342:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005346:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 800534a:	011b      	lsls	r3, r3, #4
 800534c:	3308      	adds	r3, #8
 800534e:	6812      	ldr	r2, [r2, #0]
 8005350:	4413      	add	r3, r2
 8005352:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 8005356:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 800535a:	2200      	movs	r2, #0
 800535c:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 800535e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005362:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800536c:	4619      	mov	r1, r3
 800536e:	f8d7 025c 	ldr.w	r0, [r7, #604]	; 0x25c
 8005372:	f7fb f987 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8005376:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800537a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f507 7218 	add.w	r2, r7, #608	; 0x260
 8005384:	f5a2 7218 	sub.w	r2, r2, #608	; 0x260
 8005388:	6812      	ldr	r2, [r2, #0]
 800538a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 800538e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005392:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f507 7218 	add.w	r2, r7, #608	; 0x260
 800539c:	f5a2 7217 	sub.w	r2, r2, #604	; 0x25c
 80053a0:	6812      	ldr	r2, [r2, #0]
 80053a2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80053a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053aa:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80053b4:	3301      	adds	r3, #1
 80053b6:	b2da      	uxtb	r2, r3
 80053b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053bc:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 80053c6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053ca:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	2202      	movs	r2, #2
 80053d2:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 80053d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80053da:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2234      	movs	r2, #52	; 0x34
 80053e2:	701a      	strb	r2, [r3, #0]
				break;
 80053e4:	f000 bd0f 	b.w	8005e06 <GAME_PLAY_Phase_Management+0x375e>
 80053e8:	2400000c 	.word	0x2400000c
 80053ec:	08011034 	.word	0x08011034
 80053f0:	08011050 	.word	0x08011050
 80053f4:	08011058 	.word	0x08011058
 80053f8:	08011068 	.word	0x08011068
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80053fc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005400:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	781a      	ldrb	r2, [r3, #0]
 8005408:	4bb2      	ldr	r3, [pc, #712]	; (80056d4 <GAME_PLAY_Phase_Management+0x302c>)
 800540a:	9203      	str	r2, [sp, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	9202      	str	r2, [sp, #8]
 8005410:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005414:	9201      	str	r2, [sp, #4]
 8005416:	685a      	ldr	r2, [r3, #4]
 8005418:	9200      	str	r2, [sp, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4aae      	ldr	r2, [pc, #696]	; (80056d8 <GAME_PLAY_Phase_Management+0x3030>)
 800541e:	215a      	movs	r1, #90	; 0x5a
 8005420:	2005      	movs	r0, #5
 8005422:	f001 fbd8 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005426:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800542a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	781a      	ldrb	r2, [r3, #0]
 8005432:	4ba8      	ldr	r3, [pc, #672]	; (80056d4 <GAME_PLAY_Phase_Management+0x302c>)
 8005434:	9203      	str	r2, [sp, #12]
 8005436:	2200      	movs	r2, #0
 8005438:	9202      	str	r2, [sp, #8]
 800543a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800543e:	9201      	str	r2, [sp, #4]
 8005440:	685a      	ldr	r2, [r3, #4]
 8005442:	9200      	str	r2, [sp, #0]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	4aa4      	ldr	r2, [pc, #656]	; (80056d8 <GAME_PLAY_Phase_Management+0x3030>)
 8005448:	215a      	movs	r1, #90	; 0x5a
 800544a:	2005      	movs	r0, #5
 800544c:	f001 fbc3 	bl	8006bd6 <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8005450:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005454:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	785b      	ldrb	r3, [r3, #1]
 800545c:	4619      	mov	r1, r3
 800545e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005462:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 8005466:	f501 7394 	add.w	r3, r1, #296	; 0x128
 800546a:	009b      	lsls	r3, r3, #2
 800546c:	6812      	ldr	r2, [r2, #0]
 800546e:	4413      	add	r3, r2
 8005470:	3304      	adds	r3, #4
 8005472:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8005476:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800547a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	785b      	ldrb	r3, [r3, #1]
 8005482:	4619      	mov	r1, r3
 8005484:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005488:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 800548c:	f501 7397 	add.w	r3, r1, #302	; 0x12e
 8005490:	009b      	lsls	r3, r3, #2
 8005492:	6812      	ldr	r2, [r2, #0]
 8005494:	4413      	add	r3, r2
 8005496:	3304      	adds	r3, #4
 8005498:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

				if(state_game->action == 54)
 800549c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054a0:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	781b      	ldrb	r3, [r3, #0]
 80054a8:	2b36      	cmp	r3, #54	; 0x36
 80054aa:	f040 84ae 	bne.w	8005e0a <GAME_PLAY_Phase_Management+0x3762>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 80054ae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054b2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	785a      	ldrb	r2, [r3, #1]
 80054ba:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054be:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80054c8:	429a      	cmp	r2, r3
 80054ca:	f080 80a3 	bcs.w	8005614 <GAME_PLAY_Phase_Management+0x2f6c>
					{
						state_game->test = 165;
 80054ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	22a5      	movs	r2, #165	; 0xa5
 80054da:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80054de:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054e2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	785b      	ldrb	r3, [r3, #1]
 80054ea:	4619      	mov	r1, r3
 80054ec:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80054f0:	f5a3 7216 	sub.w	r2, r3, #600	; 0x258
 80054f4:	f101 0344 	add.w	r3, r1, #68	; 0x44
 80054f8:	011b      	lsls	r3, r3, #4
 80054fa:	6812      	ldr	r2, [r2, #0]
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

						if (ptrYugiohCard_src->cardSignature == 3)
 8005504:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	2b03      	cmp	r3, #3
 800550c:	d11d      	bne.n	800554a <GAME_PLAY_Phase_Management+0x2ea2>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 800550e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2262      	movs	r2, #98	; 0x62
 8005516:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800551a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 8005524:	4618      	mov	r0, r3
 8005526:	f7fc f87c 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 800552a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800552e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	785b      	ldrb	r3, [r3, #1]
 8005536:	3301      	adds	r3, #1
 8005538:	b2da      	uxtb	r2, r3
 800553a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800553e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 8005546:	f000 bc60 	b.w	8005e0a <GAME_PLAY_Phase_Management+0x3762>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 800554a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800554e:	781b      	ldrb	r3, [r3, #0]
 8005550:	2b0e      	cmp	r3, #14
 8005552:	d004      	beq.n	800555e <GAME_PLAY_Phase_Management+0x2eb6>
 8005554:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	2b0f      	cmp	r3, #15
 800555c:	d129      	bne.n	80055b2 <GAME_PLAY_Phase_Management+0x2f0a>
							state_game->test = 133;
 800555e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005562:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2285      	movs	r2, #133	; 0x85
 800556a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 800556e:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	4619      	mov	r1, r3
 800557c:	4610      	mov	r0, r2
 800557e:	f7fc f985 	bl	800188c <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8005582:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 800558c:	4618      	mov	r0, r3
 800558e:	f7fc f848 	bl	8001622 <YUGIOH_To_GY>
							state_game->count_chain++;
 8005592:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005596:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	785b      	ldrb	r3, [r3, #1]
 800559e:	3301      	adds	r3, #1
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	705a      	strb	r2, [r3, #1]
				break;
 80055ae:	f000 bc2c 	b.w	8005e0a <GAME_PLAY_Phase_Management+0x3762>
						else if(ptrYugiohCard_src->cardSignature == 20){
 80055b2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b14      	cmp	r3, #20
 80055ba:	f040 8426 	bne.w	8005e0a <GAME_PLAY_Phase_Management+0x3762>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80055be:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f8d7 1244 	ldr.w	r1, [r7, #580]	; 0x244
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fc f82a 	bl	8001622 <YUGIOH_To_GY>
							if(state_game->MainGame_State == first_player){
 80055ce:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055d2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d108      	bne.n	80055f2 <GAME_PLAY_Phase_Management+0x2f4a>
								state_game->MainGame_State = second_player;
 80055e0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055e4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2203      	movs	r2, #3
 80055ec:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80055f0:	e007      	b.n	8005602 <GAME_PLAY_Phase_Management+0x2f5a>
								state_game->MainGame_State = first_player;
 80055f2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80055f6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2202      	movs	r2, #2
 80055fe:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 8005602:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005606:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2201      	movs	r2, #1
 800560e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8005612:	e3fa      	b.n	8005e0a <GAME_PLAY_Phase_Management+0x3762>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005614:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005618:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	781b      	ldrb	r3, [r3, #0]
 8005620:	9301      	str	r3, [sp, #4]
 8005622:	2300      	movs	r3, #0
 8005624:	9300      	str	r3, [sp, #0]
 8005626:	2326      	movs	r3, #38	; 0x26
 8005628:	2280      	movs	r2, #128	; 0x80
 800562a:	215a      	movs	r1, #90	; 0x5a
 800562c:	2000      	movs	r0, #0
 800562e:	f001 fc1b 	bl	8006e68 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005632:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005636:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	9301      	str	r3, [sp, #4]
 8005640:	2300      	movs	r3, #0
 8005642:	9300      	str	r3, [sp, #0]
 8005644:	2326      	movs	r3, #38	; 0x26
 8005646:	2280      	movs	r2, #128	; 0x80
 8005648:	215a      	movs	r1, #90	; 0x5a
 800564a:	2000      	movs	r0, #0
 800564c:	f001 fc0c 	bl	8006e68 <ST7735_FillRectangleNSS>
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005650:	2300      	movs	r3, #0
 8005652:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 8005656:	e020      	b.n	800569a <GAME_PLAY_Phase_Management+0x2ff2>
							state_game->ptrChainUser[i] = &dummyPlayer;
 8005658:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800565c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005666:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	4413      	add	r3, r2
 800566e:	f107 0210 	add.w	r2, r7, #16
 8005672:	605a      	str	r2, [r3, #4]
							state_game->ptrChainOpponent[i] = &dummyPlayer;
 8005674:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005678:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005682:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	4413      	add	r3, r2
 800568a:	f107 0210 	add.w	r2, r7, #16
 800568e:	605a      	str	r2, [r3, #4]
						for (int i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8005690:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8005694:	3301      	adds	r3, #1
 8005696:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 800569a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 800569e:	2b05      	cmp	r3, #5
 80056a0:	ddda      	ble.n	8005658 <GAME_PLAY_Phase_Management+0x2fb0>
						state_game->ChainCount = 0;
 80056a2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056a6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->action = 50;
 80056b2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056b6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	2232      	movs	r2, #50	; 0x32
 80056be:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 80056c0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056c4:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2205      	movs	r2, #5
 80056cc:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80056d0:	e39b      	b.n	8005e0a <GAME_PLAY_Phase_Management+0x3762>
 80056d2:	bf00      	nop
 80056d4:	2400000c 	.word	0x2400000c
 80056d8:	08011078 	.word	0x08011078
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 80056dc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80056e0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80056ea:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 80056ee:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80056f2:	791b      	ldrb	r3, [r3, #4]
 80056f4:	f887 3243 	strb.w	r3, [r7, #579]	; 0x243

				if(ptrYugiohCard_src->targetPosition == 99)
 80056f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80056fc:	79db      	ldrb	r3, [r3, #7]
 80056fe:	2b63      	cmp	r3, #99	; 0x63
 8005700:	d122      	bne.n	8005748 <GAME_PLAY_Phase_Management+0x30a0>
				{
					playerDef->life_point -= atk*100;
 8005702:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005706:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	889a      	ldrh	r2, [r3, #4]
 800570e:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005712:	b29b      	uxth	r3, r3
 8005714:	4619      	mov	r1, r3
 8005716:	0249      	lsls	r1, r1, #9
 8005718:	1ac9      	subs	r1, r1, r3
 800571a:	0089      	lsls	r1, r1, #2
 800571c:	4419      	add	r1, r3
 800571e:	00c9      	lsls	r1, r1, #3
 8005720:	1acb      	subs	r3, r1, r3
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	b29b      	uxth	r3, r3
 8005726:	4413      	add	r3, r2
 8005728:	b29a      	uxth	r2, r3
 800572a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800572e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005736:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800573a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	2206      	movs	r2, #6
 8005742:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->PlyerAction_Battle_Substate = after_calculate;
						}

					}
				}
				break;
 8005746:	e362      	b.n	8005e0e <GAME_PLAY_Phase_Management+0x3766>
				else if(ptrYugiohCard_src->targetPosition == 98)
 8005748:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 800574c:	79db      	ldrb	r3, [r3, #7]
 800574e:	2b62      	cmp	r3, #98	; 0x62
 8005750:	d108      	bne.n	8005764 <GAME_PLAY_Phase_Management+0x30bc>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 8005752:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005756:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2206      	movs	r2, #6
 800575e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005762:	e354      	b.n	8005e0e <GAME_PLAY_Phase_Management+0x3766>
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 8005764:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005768:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	3308      	adds	r3, #8
 8005770:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 8005774:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005778:	79db      	ldrb	r3, [r3, #7]
 800577a:	4619      	mov	r1, r3
 800577c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005780:	f5a3 7218 	sub.w	r2, r3, #608	; 0x260
 8005784:	010b      	lsls	r3, r1, #4
 8005786:	3308      	adds	r3, #8
 8005788:	6812      	ldr	r2, [r2, #0]
 800578a:	4413      	add	r3, r2
 800578c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
					state_game->test = 54;
 8005790:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005794:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2236      	movs	r2, #54	; 0x36
 800579c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 80057a0:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80057a4:	789b      	ldrb	r3, [r3, #2]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f040 8100 	bne.w	80059ac <GAME_PLAY_Phase_Management+0x3304>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80057ac:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057b0:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	781a      	ldrb	r2, [r3, #0]
 80057b8:	4b77      	ldr	r3, [pc, #476]	; (8005998 <GAME_PLAY_Phase_Management+0x32f0>)
 80057ba:	9203      	str	r2, [sp, #12]
 80057bc:	2200      	movs	r2, #0
 80057be:	9202      	str	r2, [sp, #8]
 80057c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80057c4:	9201      	str	r2, [sp, #4]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	9200      	str	r2, [sp, #0]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4a73      	ldr	r2, [pc, #460]	; (800599c <GAME_PLAY_Phase_Management+0x32f4>)
 80057ce:	215a      	movs	r1, #90	; 0x5a
 80057d0:	2005      	movs	r0, #5
 80057d2:	f001 fa00 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80057d6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80057da:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	781a      	ldrb	r2, [r3, #0]
 80057e2:	4b6d      	ldr	r3, [pc, #436]	; (8005998 <GAME_PLAY_Phase_Management+0x32f0>)
 80057e4:	9203      	str	r2, [sp, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	9202      	str	r2, [sp, #8]
 80057ea:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80057ee:	9201      	str	r2, [sp, #4]
 80057f0:	685a      	ldr	r2, [r3, #4]
 80057f2:	9200      	str	r2, [sp, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a6a      	ldr	r2, [pc, #424]	; (80059a0 <GAME_PLAY_Phase_Management+0x32f8>)
 80057f8:	2169      	movs	r1, #105	; 0x69
 80057fa:	2005      	movs	r0, #5
 80057fc:	f001 f9eb 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005800:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005804:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	781a      	ldrb	r2, [r3, #0]
 800580c:	4b62      	ldr	r3, [pc, #392]	; (8005998 <GAME_PLAY_Phase_Management+0x32f0>)
 800580e:	9203      	str	r2, [sp, #12]
 8005810:	2200      	movs	r2, #0
 8005812:	9202      	str	r2, [sp, #8]
 8005814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005818:	9201      	str	r2, [sp, #4]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	9200      	str	r2, [sp, #0]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a60      	ldr	r2, [pc, #384]	; (80059a4 <GAME_PLAY_Phase_Management+0x32fc>)
 8005822:	215a      	movs	r1, #90	; 0x5a
 8005824:	2005      	movs	r0, #5
 8005826:	f001 f9d6 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800582a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800582e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	781a      	ldrb	r2, [r3, #0]
 8005836:	4b58      	ldr	r3, [pc, #352]	; (8005998 <GAME_PLAY_Phase_Management+0x32f0>)
 8005838:	9203      	str	r2, [sp, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	9202      	str	r2, [sp, #8]
 800583e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005842:	9201      	str	r2, [sp, #4]
 8005844:	685a      	ldr	r2, [r3, #4]
 8005846:	9200      	str	r2, [sp, #0]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a57      	ldr	r2, [pc, #348]	; (80059a8 <GAME_PLAY_Phase_Management+0x3300>)
 800584c:	2169      	movs	r1, #105	; 0x69
 800584e:	2005      	movs	r0, #5
 8005850:	f001 f9c1 	bl	8006bd6 <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 8005854:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005858:	795b      	ldrb	r3, [r3, #5]
 800585a:	f887 3241 	strb.w	r3, [r7, #577]	; 0x241
						if(atk < def){
 800585e:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005862:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005866:	429a      	cmp	r2, r3
 8005868:	d25e      	bcs.n	8005928 <GAME_PLAY_Phase_Management+0x3280>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800586a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800586e:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	781b      	ldrb	r3, [r3, #0]
 8005876:	9301      	str	r3, [sp, #4]
 8005878:	2300      	movs	r3, #0
 800587a:	9300      	str	r3, [sp, #0]
 800587c:	2326      	movs	r3, #38	; 0x26
 800587e:	2280      	movs	r2, #128	; 0x80
 8005880:	215a      	movs	r1, #90	; 0x5a
 8005882:	2000      	movs	r0, #0
 8005884:	f001 faf0 	bl	8006e68 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005888:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800588c:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	2300      	movs	r3, #0
 8005898:	9300      	str	r3, [sp, #0]
 800589a:	2326      	movs	r3, #38	; 0x26
 800589c:	2280      	movs	r2, #128	; 0x80
 800589e:	215a      	movs	r1, #90	; 0x5a
 80058a0:	2000      	movs	r0, #0
 80058a2:	f001 fae1 	bl	8006e68 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 80058a6:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058aa:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	889a      	ldrh	r2, [r3, #4]
 80058b2:	f897 1241 	ldrb.w	r1, [r7, #577]	; 0x241
 80058b6:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 80058ba:	1acb      	subs	r3, r1, r3
 80058bc:	b29b      	uxth	r3, r3
 80058be:	4619      	mov	r1, r3
 80058c0:	0249      	lsls	r1, r1, #9
 80058c2:	1ac9      	subs	r1, r1, r3
 80058c4:	0089      	lsls	r1, r1, #2
 80058c6:	4419      	add	r1, r3
 80058c8:	00c9      	lsls	r1, r1, #3
 80058ca:	1acb      	subs	r3, r1, r3
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	b29b      	uxth	r3, r3
 80058d0:	4413      	add	r3, r2
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058d8:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 80058e0:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80058e4:	799b      	ldrb	r3, [r3, #6]
 80058e6:	4619      	mov	r1, r3
 80058e8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058ec:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 80058f0:	010b      	lsls	r3, r1, #4
 80058f2:	3308      	adds	r3, #8
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	441a      	add	r2, r3
 80058f8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80058fc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005900:	4611      	mov	r1, r2
 8005902:	6818      	ldr	r0, [r3, #0]
 8005904:	f7fb fe8d 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005908:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800590c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005910:	6818      	ldr	r0, [r3, #0]
 8005912:	f7fb fd8f 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005916:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800591a:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2206      	movs	r2, #6
 8005922:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005926:	e272      	b.n	8005e0e <GAME_PLAY_Phase_Management+0x3766>
						else if(atk > def){
 8005928:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 800592c:	f897 3241 	ldrb.w	r3, [r7, #577]	; 0x241
 8005930:	429a      	cmp	r2, r3
 8005932:	f240 826c 	bls.w	8005e0e <GAME_PLAY_Phase_Management+0x3766>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005936:	f507 7318 	add.w	r3, r7, #608	; 0x260
 800593a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	9301      	str	r3, [sp, #4]
 8005944:	2300      	movs	r3, #0
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	2326      	movs	r3, #38	; 0x26
 800594a:	2280      	movs	r2, #128	; 0x80
 800594c:	215a      	movs	r1, #90	; 0x5a
 800594e:	2000      	movs	r0, #0
 8005950:	f001 fa8a 	bl	8006e68 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005954:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005958:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	9301      	str	r3, [sp, #4]
 8005962:	2300      	movs	r3, #0
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	2326      	movs	r3, #38	; 0x26
 8005968:	2280      	movs	r2, #128	; 0x80
 800596a:	215a      	movs	r1, #90	; 0x5a
 800596c:	2000      	movs	r0, #0
 800596e:	f001 fa7b 	bl	8006e68 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005972:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005976:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 800597a:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 800597e:	6818      	ldr	r0, [r3, #0]
 8005980:	f7fb fe4f 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005984:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005988:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	2206      	movs	r2, #6
 8005990:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005994:	e23b      	b.n	8005e0e <GAME_PLAY_Phase_Management+0x3766>
 8005996:	bf00      	nop
 8005998:	2400000c 	.word	0x2400000c
 800599c:	08011088 	.word	0x08011088
 80059a0:	08011098 	.word	0x08011098
 80059a4:	080110a8 	.word	0x080110a8
 80059a8:	080110b8 	.word	0x080110b8
					else if(ptrYugiohCard_dst->cardState == 1){
 80059ac:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80059b0:	789b      	ldrb	r3, [r3, #2]
 80059b2:	2b01      	cmp	r3, #1
 80059b4:	f040 822b 	bne.w	8005e0e <GAME_PLAY_Phase_Management+0x3766>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80059b8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059bc:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	781a      	ldrb	r2, [r3, #0]
 80059c4:	4b91      	ldr	r3, [pc, #580]	; (8005c0c <GAME_PLAY_Phase_Management+0x3564>)
 80059c6:	9203      	str	r2, [sp, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	9202      	str	r2, [sp, #8]
 80059cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059d0:	9201      	str	r2, [sp, #4]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	9200      	str	r2, [sp, #0]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a8d      	ldr	r2, [pc, #564]	; (8005c10 <GAME_PLAY_Phase_Management+0x3568>)
 80059da:	215a      	movs	r1, #90	; 0x5a
 80059dc:	2005      	movs	r0, #5
 80059de:	f001 f8fa 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 80059e2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 80059e6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	781a      	ldrb	r2, [r3, #0]
 80059ee:	4b87      	ldr	r3, [pc, #540]	; (8005c0c <GAME_PLAY_Phase_Management+0x3564>)
 80059f0:	9203      	str	r2, [sp, #12]
 80059f2:	2200      	movs	r2, #0
 80059f4:	9202      	str	r2, [sp, #8]
 80059f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80059fa:	9201      	str	r2, [sp, #4]
 80059fc:	685a      	ldr	r2, [r3, #4]
 80059fe:	9200      	str	r2, [sp, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	4a84      	ldr	r2, [pc, #528]	; (8005c14 <GAME_PLAY_Phase_Management+0x356c>)
 8005a04:	2169      	movs	r1, #105	; 0x69
 8005a06:	2005      	movs	r0, #5
 8005a08:	f001 f8e5 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005a0c:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a10:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781a      	ldrb	r2, [r3, #0]
 8005a18:	4b7c      	ldr	r3, [pc, #496]	; (8005c0c <GAME_PLAY_Phase_Management+0x3564>)
 8005a1a:	9203      	str	r2, [sp, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	9202      	str	r2, [sp, #8]
 8005a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005a24:	9201      	str	r2, [sp, #4]
 8005a26:	685a      	ldr	r2, [r3, #4]
 8005a28:	9200      	str	r2, [sp, #0]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4a7a      	ldr	r2, [pc, #488]	; (8005c18 <GAME_PLAY_Phase_Management+0x3570>)
 8005a2e:	215a      	movs	r1, #90	; 0x5a
 8005a30:	2005      	movs	r0, #5
 8005a32:	f001 f8d0 	bl	8006bd6 <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8005a36:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a3a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	4b72      	ldr	r3, [pc, #456]	; (8005c0c <GAME_PLAY_Phase_Management+0x3564>)
 8005a44:	9203      	str	r2, [sp, #12]
 8005a46:	2200      	movs	r2, #0
 8005a48:	9202      	str	r2, [sp, #8]
 8005a4a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005a4e:	9201      	str	r2, [sp, #4]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	9200      	str	r2, [sp, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	4a71      	ldr	r2, [pc, #452]	; (8005c1c <GAME_PLAY_Phase_Management+0x3574>)
 8005a58:	2169      	movs	r1, #105	; 0x69
 8005a5a:	2005      	movs	r0, #5
 8005a5c:	f001 f8bb 	bl	8006bd6 <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8005a60:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8005a64:	791b      	ldrb	r3, [r3, #4]
 8005a66:	f887 3242 	strb.w	r3, [r7, #578]	; 0x242
						state_game->test = 60;
 8005a6a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a6e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	223c      	movs	r2, #60	; 0x3c
 8005a76:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8005a7a:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005a7e:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d266      	bcs.n	8005b54 <GAME_PLAY_Phase_Management+0x34ac>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005a86:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005a8a:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	781b      	ldrb	r3, [r3, #0]
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	2300      	movs	r3, #0
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	2326      	movs	r3, #38	; 0x26
 8005a9a:	2280      	movs	r2, #128	; 0x80
 8005a9c:	215a      	movs	r1, #90	; 0x5a
 8005a9e:	2000      	movs	r0, #0
 8005aa0:	f001 f9e2 	bl	8006e68 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005aa4:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005aa8:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	9301      	str	r3, [sp, #4]
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	2326      	movs	r3, #38	; 0x26
 8005ab8:	2280      	movs	r2, #128	; 0x80
 8005aba:	215a      	movs	r1, #90	; 0x5a
 8005abc:	2000      	movs	r0, #0
 8005abe:	f001 f9d3 	bl	8006e68 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8005ac2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ac6:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	223d      	movs	r2, #61	; 0x3d
 8005ace:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8005ad2:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ad6:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	889a      	ldrh	r2, [r3, #4]
 8005ade:	f897 1242 	ldrb.w	r1, [r7, #578]	; 0x242
 8005ae2:	f897 3243 	ldrb.w	r3, [r7, #579]	; 0x243
 8005ae6:	1acb      	subs	r3, r1, r3
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	0249      	lsls	r1, r1, #9
 8005aee:	1ac9      	subs	r1, r1, r3
 8005af0:	0089      	lsls	r1, r1, #2
 8005af2:	4419      	add	r1, r3
 8005af4:	00c9      	lsls	r1, r1, #3
 8005af6:	1acb      	subs	r3, r1, r3
 8005af8:	009b      	lsls	r3, r3, #2
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	4413      	add	r3, r2
 8005afe:	b29a      	uxth	r2, r3
 8005b00:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b04:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8005b0c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8005b10:	799b      	ldrb	r3, [r3, #6]
 8005b12:	4619      	mov	r1, r3
 8005b14:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b18:	f5a3 7217 	sub.w	r2, r3, #604	; 0x25c
 8005b1c:	010b      	lsls	r3, r1, #4
 8005b1e:	3308      	adds	r3, #8
 8005b20:	6812      	ldr	r2, [r2, #0]
 8005b22:	441a      	add	r2, r3
 8005b24:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b28:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b2c:	4611      	mov	r1, r2
 8005b2e:	6818      	ldr	r0, [r3, #0]
 8005b30:	f7fb fd77 	bl	8001622 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8005b34:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b38:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b3c:	6818      	ldr	r0, [r3, #0]
 8005b3e:	f7fb fc79 	bl	8001434 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005b42:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b46:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	2206      	movs	r2, #6
 8005b4e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005b52:	e15c      	b.n	8005e0e <GAME_PLAY_Phase_Management+0x3766>
						else if(atk > atk2){
 8005b54:	f897 2243 	ldrb.w	r2, [r7, #579]	; 0x243
 8005b58:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	f240 8156 	bls.w	8005e0e <GAME_PLAY_Phase_Management+0x3766>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005b62:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b66:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	9301      	str	r3, [sp, #4]
 8005b70:	2300      	movs	r3, #0
 8005b72:	9300      	str	r3, [sp, #0]
 8005b74:	2326      	movs	r3, #38	; 0x26
 8005b76:	2280      	movs	r2, #128	; 0x80
 8005b78:	215a      	movs	r1, #90	; 0x5a
 8005b7a:	2000      	movs	r0, #0
 8005b7c:	f001 f974 	bl	8006e68 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005b80:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005b84:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	9301      	str	r3, [sp, #4]
 8005b8e:	2300      	movs	r3, #0
 8005b90:	9300      	str	r3, [sp, #0]
 8005b92:	2326      	movs	r3, #38	; 0x26
 8005b94:	2280      	movs	r2, #128	; 0x80
 8005b96:	215a      	movs	r1, #90	; 0x5a
 8005b98:	2000      	movs	r0, #0
 8005b9a:	f001 f965 	bl	8006e68 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8005b9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ba2:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	2246      	movs	r2, #70	; 0x46
 8005baa:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8005bae:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bb2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	889a      	ldrh	r2, [r3, #4]
 8005bba:	f897 1243 	ldrb.w	r1, [r7, #579]	; 0x243
 8005bbe:	f897 3242 	ldrb.w	r3, [r7, #578]	; 0x242
 8005bc2:	1acb      	subs	r3, r1, r3
 8005bc4:	b29b      	uxth	r3, r3
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	0249      	lsls	r1, r1, #9
 8005bca:	1ac9      	subs	r1, r1, r3
 8005bcc:	0089      	lsls	r1, r1, #2
 8005bce:	4419      	add	r1, r3
 8005bd0:	00c9      	lsls	r1, r1, #3
 8005bd2:	1acb      	subs	r3, r1, r3
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	b29b      	uxth	r3, r3
 8005bd8:	4413      	add	r3, r2
 8005bda:	b29a      	uxth	r2, r3
 8005bdc:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005be0:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8005be8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bec:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005bf0:	f8d7 125c 	ldr.w	r1, [r7, #604]	; 0x25c
 8005bf4:	6818      	ldr	r0, [r3, #0]
 8005bf6:	f7fb fd14 	bl	8001622 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8005bfa:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005bfe:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	2206      	movs	r2, #6
 8005c06:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005c0a:	e100      	b.n	8005e0e <GAME_PLAY_Phase_Management+0x3766>
 8005c0c:	2400000c 	.word	0x2400000c
 8005c10:	08011088 	.word	0x08011088
 8005c14:	080110cc 	.word	0x080110cc
 8005c18:	080110a8 	.word	0x080110a8
 8005c1c:	080110dc 	.word	0x080110dc
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005c20:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c24:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	781a      	ldrb	r2, [r3, #0]
 8005c2c:	4b7f      	ldr	r3, [pc, #508]	; (8005e2c <GAME_PLAY_Phase_Management+0x3784>)
 8005c2e:	9203      	str	r2, [sp, #12]
 8005c30:	2200      	movs	r2, #0
 8005c32:	9202      	str	r2, [sp, #8]
 8005c34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c38:	9201      	str	r2, [sp, #4]
 8005c3a:	685a      	ldr	r2, [r3, #4]
 8005c3c:	9200      	str	r2, [sp, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a7b      	ldr	r2, [pc, #492]	; (8005e30 <GAME_PLAY_Phase_Management+0x3788>)
 8005c42:	215a      	movs	r1, #90	; 0x5a
 8005c44:	2005      	movs	r0, #5
 8005c46:	f000 ffc6 	bl	8006bd6 <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005c4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c4e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	781a      	ldrb	r2, [r3, #0]
 8005c56:	4b75      	ldr	r3, [pc, #468]	; (8005e2c <GAME_PLAY_Phase_Management+0x3784>)
 8005c58:	9203      	str	r2, [sp, #12]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	9202      	str	r2, [sp, #8]
 8005c5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005c62:	9201      	str	r2, [sp, #4]
 8005c64:	685a      	ldr	r2, [r3, #4]
 8005c66:	9200      	str	r2, [sp, #0]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	4a72      	ldr	r2, [pc, #456]	; (8005e34 <GAME_PLAY_Phase_Management+0x378c>)
 8005c6c:	215a      	movs	r1, #90	; 0x5a
 8005c6e:	2005      	movs	r0, #5
 8005c70:	f000 ffb1 	bl	8006bd6 <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8005c74:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c78:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8005c82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
				YUGIOH_card_clear(ptrYugiohCard_src);
 8005c86:	f8d7 0244 	ldr.w	r0, [r7, #580]	; 0x244
 8005c8a:	f7fa fd32 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8005c8e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005c92:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	889b      	ldrh	r3, [r3, #4]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d009      	beq.n	8005cb2 <GAME_PLAY_Phase_Management+0x360a>
 8005c9e:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ca2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	889b      	ldrh	r3, [r3, #4]
 8005caa:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d94b      	bls.n	8005d4a <GAME_PLAY_Phase_Management+0x36a2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 8005cb2:	2301      	movs	r3, #1
 8005cb4:	9301      	str	r3, [sp, #4]
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	9300      	str	r3, [sp, #0]
 8005cba:	2326      	movs	r3, #38	; 0x26
 8005cbc:	2280      	movs	r2, #128	; 0x80
 8005cbe:	215a      	movs	r1, #90	; 0x5a
 8005cc0:	2000      	movs	r0, #0
 8005cc2:	f001 f8d1 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2326      	movs	r3, #38	; 0x26
 8005cd0:	2280      	movs	r2, #128	; 0x80
 8005cd2:	215a      	movs	r1, #90	; 0x5a
 8005cd4:	2000      	movs	r0, #0
 8005cd6:	f001 f8c7 	bl	8006e68 <ST7735_FillRectangleNSS>
					HAL_Delay(200);
 8005cda:	20c8      	movs	r0, #200	; 0xc8
 8005cdc:	f001 fd5c 	bl	8007798 <HAL_Delay>
					ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,playerAtk->displayNSS);
 8005ce0:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005ce4:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	781a      	ldrb	r2, [r3, #0]
 8005cec:	4b52      	ldr	r3, [pc, #328]	; (8005e38 <GAME_PLAY_Phase_Management+0x3790>)
 8005cee:	9203      	str	r2, [sp, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	9202      	str	r2, [sp, #8]
 8005cf4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8005cf8:	9201      	str	r2, [sp, #4]
 8005cfa:	685a      	ldr	r2, [r3, #4]
 8005cfc:	9200      	str	r2, [sp, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a4e      	ldr	r2, [pc, #312]	; (8005e3c <GAME_PLAY_Phase_Management+0x3794>)
 8005d02:	215a      	movs	r1, #90	; 0x5a
 8005d04:	2014      	movs	r0, #20
 8005d06:	f000 ff66 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerDef->displayNSS);
 8005d0a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d0e:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	781a      	ldrb	r2, [r3, #0]
 8005d16:	4b48      	ldr	r3, [pc, #288]	; (8005e38 <GAME_PLAY_Phase_Management+0x3790>)
 8005d18:	9203      	str	r2, [sp, #12]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	9202      	str	r2, [sp, #8]
 8005d1e:	221f      	movs	r2, #31
 8005d20:	9201      	str	r2, [sp, #4]
 8005d22:	685a      	ldr	r2, [r3, #4]
 8005d24:	9200      	str	r2, [sp, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a45      	ldr	r2, [pc, #276]	; (8005e40 <GAME_PLAY_Phase_Management+0x3798>)
 8005d2a:	215a      	movs	r1, #90	; 0x5a
 8005d2c:	200f      	movs	r0, #15
 8005d2e:	f000 ff52 	bl	8006bd6 <ST7735_WriteStringNSS>
					HAL_Delay(200);
 8005d32:	20c8      	movs	r0, #200	; 0xc8
 8005d34:	f001 fd30 	bl	8007798 <HAL_Delay>
					state_game->MainGame_State = Game_Ended;
 8005d38:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d3c:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	2204      	movs	r2, #4
 8005d44:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8005d48:	e062      	b.n	8005e10 <GAME_PLAY_Phase_Management+0x3768>
					state_game->action = 50;
 8005d4a:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d4e:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2232      	movs	r2, #50	; 0x32
 8005d56:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8005d58:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d5c:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2326      	movs	r3, #38	; 0x26
 8005d6c:	2280      	movs	r2, #128	; 0x80
 8005d6e:	215a      	movs	r1, #90	; 0x5a
 8005d70:	2000      	movs	r0, #0
 8005d72:	f001 f879 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8005d76:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d7a:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	9301      	str	r3, [sp, #4]
 8005d84:	2300      	movs	r3, #0
 8005d86:	9300      	str	r3, [sp, #0]
 8005d88:	2326      	movs	r3, #38	; 0x26
 8005d8a:	2280      	movs	r2, #128	; 0x80
 8005d8c:	215a      	movs	r1, #90	; 0x5a
 8005d8e:	2000      	movs	r0, #0
 8005d90:	f001 f86a 	bl	8006e68 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8005d94:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005d98:	f5a3 7317 	sub.w	r3, r3, #604	; 0x25c
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	781a      	ldrb	r2, [r3, #0]
 8005da0:	4b22      	ldr	r3, [pc, #136]	; (8005e2c <GAME_PLAY_Phase_Management+0x3784>)
 8005da2:	9203      	str	r2, [sp, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	9202      	str	r2, [sp, #8]
 8005da8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dac:	9201      	str	r2, [sp, #4]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	9200      	str	r2, [sp, #0]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	4a1e      	ldr	r2, [pc, #120]	; (8005e30 <GAME_PLAY_Phase_Management+0x3788>)
 8005db6:	215a      	movs	r1, #90	; 0x5a
 8005db8:	2005      	movs	r0, #5
 8005dba:	f000 ff0c 	bl	8006bd6 <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8005dbe:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dc2:	f5a3 7318 	sub.w	r3, r3, #608	; 0x260
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	781a      	ldrb	r2, [r3, #0]
 8005dca:	4b18      	ldr	r3, [pc, #96]	; (8005e2c <GAME_PLAY_Phase_Management+0x3784>)
 8005dcc:	9203      	str	r2, [sp, #12]
 8005dce:	2200      	movs	r2, #0
 8005dd0:	9202      	str	r2, [sp, #8]
 8005dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005dd6:	9201      	str	r2, [sp, #4]
 8005dd8:	685a      	ldr	r2, [r3, #4]
 8005dda:	9200      	str	r2, [sp, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	4a15      	ldr	r2, [pc, #84]	; (8005e34 <GAME_PLAY_Phase_Management+0x378c>)
 8005de0:	215a      	movs	r1, #90	; 0x5a
 8005de2:	2005      	movs	r0, #5
 8005de4:	f000 fef7 	bl	8006bd6 <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8005de8:	f507 7318 	add.w	r3, r7, #608	; 0x260
 8005dec:	f5a3 7316 	sub.w	r3, r3, #600	; 0x258
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	2201      	movs	r2, #1
 8005df4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8005df8:	e00a      	b.n	8005e10 <GAME_PLAY_Phase_Management+0x3768>
				break;
 8005dfa:	bf00      	nop
 8005dfc:	e00f      	b.n	8005e1e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005dfe:	bf00      	nop
 8005e00:	e00d      	b.n	8005e1e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e02:	bf00      	nop
 8005e04:	e00b      	b.n	8005e1e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e06:	bf00      	nop
 8005e08:	e009      	b.n	8005e1e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e0a:	bf00      	nop
 8005e0c:	e007      	b.n	8005e1e <GAME_PLAY_Phase_Management+0x3776>
				break;
 8005e0e:	bf00      	nop
			}
			break;
 8005e10:	e005      	b.n	8005e1e <GAME_PLAY_Phase_Management+0x3776>
		break;
 8005e12:	bf00      	nop
 8005e14:	e004      	b.n	8005e20 <GAME_PLAY_Phase_Management+0x3778>
		break;
 8005e16:	bf00      	nop
 8005e18:	e002      	b.n	8005e20 <GAME_PLAY_Phase_Management+0x3778>
		break;
 8005e1a:	bf00      	nop
 8005e1c:	e000      	b.n	8005e20 <GAME_PLAY_Phase_Management+0x3778>
			break;
 8005e1e:	bf00      	nop

	}
}
 8005e20:	bf00      	nop
 8005e22:	f507 7719 	add.w	r7, r7, #612	; 0x264
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd90      	pop	{r4, r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	2400000c 	.word	0x2400000c
 8005e30:	080110f0 	.word	0x080110f0
 8005e34:	08011100 	.word	0x08011100
 8005e38:	24000014 	.word	0x24000014
 8005e3c:	08010d88 	.word	0x08010d88
 8005e40:	08010d68 	.word	0x08010d68

08005e44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005e48:	4b3d      	ldr	r3, [pc, #244]	; (8005f40 <SystemInit+0xfc>)
 8005e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e4e:	4a3c      	ldr	r2, [pc, #240]	; (8005f40 <SystemInit+0xfc>)
 8005e50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005e54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8005e58:	4b39      	ldr	r3, [pc, #228]	; (8005f40 <SystemInit+0xfc>)
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	4a38      	ldr	r2, [pc, #224]	; (8005f40 <SystemInit+0xfc>)
 8005e5e:	f043 0310 	orr.w	r3, r3, #16
 8005e62:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005e64:	4b37      	ldr	r3, [pc, #220]	; (8005f44 <SystemInit+0x100>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	2b06      	cmp	r3, #6
 8005e6e:	d807      	bhi.n	8005e80 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005e70:	4b34      	ldr	r3, [pc, #208]	; (8005f44 <SystemInit+0x100>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f023 030f 	bic.w	r3, r3, #15
 8005e78:	4a32      	ldr	r2, [pc, #200]	; (8005f44 <SystemInit+0x100>)
 8005e7a:	f043 0307 	orr.w	r3, r3, #7
 8005e7e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8005e80:	4b31      	ldr	r3, [pc, #196]	; (8005f48 <SystemInit+0x104>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4a30      	ldr	r2, [pc, #192]	; (8005f48 <SystemInit+0x104>)
 8005e86:	f043 0301 	orr.w	r3, r3, #1
 8005e8a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8005e8c:	4b2e      	ldr	r3, [pc, #184]	; (8005f48 <SystemInit+0x104>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8005e92:	4b2d      	ldr	r3, [pc, #180]	; (8005f48 <SystemInit+0x104>)
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	492c      	ldr	r1, [pc, #176]	; (8005f48 <SystemInit+0x104>)
 8005e98:	4b2c      	ldr	r3, [pc, #176]	; (8005f4c <SystemInit+0x108>)
 8005e9a:	4013      	ands	r3, r2
 8005e9c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8005e9e:	4b29      	ldr	r3, [pc, #164]	; (8005f44 <SystemInit+0x100>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f003 0308 	and.w	r3, r3, #8
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d007      	beq.n	8005eba <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8005eaa:	4b26      	ldr	r3, [pc, #152]	; (8005f44 <SystemInit+0x100>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f023 030f 	bic.w	r3, r3, #15
 8005eb2:	4a24      	ldr	r2, [pc, #144]	; (8005f44 <SystemInit+0x100>)
 8005eb4:	f043 0307 	orr.w	r3, r3, #7
 8005eb8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8005eba:	4b23      	ldr	r3, [pc, #140]	; (8005f48 <SystemInit+0x104>)
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8005ec0:	4b21      	ldr	r3, [pc, #132]	; (8005f48 <SystemInit+0x104>)
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8005ec6:	4b20      	ldr	r3, [pc, #128]	; (8005f48 <SystemInit+0x104>)
 8005ec8:	2200      	movs	r2, #0
 8005eca:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8005ecc:	4b1e      	ldr	r3, [pc, #120]	; (8005f48 <SystemInit+0x104>)
 8005ece:	4a20      	ldr	r2, [pc, #128]	; (8005f50 <SystemInit+0x10c>)
 8005ed0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8005ed2:	4b1d      	ldr	r3, [pc, #116]	; (8005f48 <SystemInit+0x104>)
 8005ed4:	4a1f      	ldr	r2, [pc, #124]	; (8005f54 <SystemInit+0x110>)
 8005ed6:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8005ed8:	4b1b      	ldr	r3, [pc, #108]	; (8005f48 <SystemInit+0x104>)
 8005eda:	4a1f      	ldr	r2, [pc, #124]	; (8005f58 <SystemInit+0x114>)
 8005edc:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8005ede:	4b1a      	ldr	r3, [pc, #104]	; (8005f48 <SystemInit+0x104>)
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8005ee4:	4b18      	ldr	r3, [pc, #96]	; (8005f48 <SystemInit+0x104>)
 8005ee6:	4a1c      	ldr	r2, [pc, #112]	; (8005f58 <SystemInit+0x114>)
 8005ee8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8005eea:	4b17      	ldr	r3, [pc, #92]	; (8005f48 <SystemInit+0x104>)
 8005eec:	2200      	movs	r2, #0
 8005eee:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8005ef0:	4b15      	ldr	r3, [pc, #84]	; (8005f48 <SystemInit+0x104>)
 8005ef2:	4a19      	ldr	r2, [pc, #100]	; (8005f58 <SystemInit+0x114>)
 8005ef4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8005ef6:	4b14      	ldr	r3, [pc, #80]	; (8005f48 <SystemInit+0x104>)
 8005ef8:	2200      	movs	r2, #0
 8005efa:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8005efc:	4b12      	ldr	r3, [pc, #72]	; (8005f48 <SystemInit+0x104>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a11      	ldr	r2, [pc, #68]	; (8005f48 <SystemInit+0x104>)
 8005f02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f06:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8005f08:	4b0f      	ldr	r3, [pc, #60]	; (8005f48 <SystemInit+0x104>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <SystemInit+0x118>)
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	4a12      	ldr	r2, [pc, #72]	; (8005f5c <SystemInit+0x118>)
 8005f14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f18:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8005f1a:	4b11      	ldr	r3, [pc, #68]	; (8005f60 <SystemInit+0x11c>)
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	4b11      	ldr	r3, [pc, #68]	; (8005f64 <SystemInit+0x120>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f26:	d202      	bcs.n	8005f2e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8005f28:	4b0f      	ldr	r3, [pc, #60]	; (8005f68 <SystemInit+0x124>)
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8005f2e:	4b0f      	ldr	r3, [pc, #60]	; (8005f6c <SystemInit+0x128>)
 8005f30:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8005f34:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8005f36:	bf00      	nop
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3e:	4770      	bx	lr
 8005f40:	e000ed00 	.word	0xe000ed00
 8005f44:	52002000 	.word	0x52002000
 8005f48:	58024400 	.word	0x58024400
 8005f4c:	eaf6ed7f 	.word	0xeaf6ed7f
 8005f50:	02020200 	.word	0x02020200
 8005f54:	01ff0000 	.word	0x01ff0000
 8005f58:	01010280 	.word	0x01010280
 8005f5c:	580000c0 	.word	0x580000c0
 8005f60:	5c001000 	.word	0x5c001000
 8005f64:	ffff0000 	.word	0xffff0000
 8005f68:	51008108 	.word	0x51008108
 8005f6c:	52004000 	.word	0x52004000

08005f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b082      	sub	sp, #8
 8005f74:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8005f76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005f7a:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8005f7c:	bf00      	nop
 8005f7e:	4b37      	ldr	r3, [pc, #220]	; (800605c <main+0xec>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d004      	beq.n	8005f94 <main+0x24>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	1e5a      	subs	r2, r3, #1
 8005f8e:	607a      	str	r2, [r7, #4]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	dcf4      	bgt.n	8005f7e <main+0xe>
	if ( timeout < 0 )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	da01      	bge.n	8005f9e <main+0x2e>
	{
		Error_Handler();
 8005f9a:	f000 fbeb 	bl	8006774 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005f9e:	f001 fb69 	bl	8007674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005fa2:	f000 f863 	bl	800606c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8005fa6:	f000 f8e5 	bl	8006174 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8005faa:	4b2c      	ldr	r3, [pc, #176]	; (800605c <main+0xec>)
 8005fac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fb0:	4a2a      	ldr	r2, [pc, #168]	; (800605c <main+0xec>)
 8005fb2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005fb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005fba:	4b28      	ldr	r3, [pc, #160]	; (800605c <main+0xec>)
 8005fbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005fc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8005fc8:	2000      	movs	r0, #0
 8005fca:	f004 fd7f 	bl	800aacc <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8005fce:	2100      	movs	r1, #0
 8005fd0:	2000      	movs	r0, #0
 8005fd2:	f004 fd95 	bl	800ab00 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8005fd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005fda:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8005fdc:	bf00      	nop
 8005fde:	4b1f      	ldr	r3, [pc, #124]	; (800605c <main+0xec>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d104      	bne.n	8005ff4 <main+0x84>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	1e5a      	subs	r2, r3, #1
 8005fee:	607a      	str	r2, [r7, #4]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	dcf4      	bgt.n	8005fde <main+0x6e>
	if ( timeout < 0 )
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	da01      	bge.n	8005ffe <main+0x8e>
	{
		Error_Handler();
 8005ffa:	f000 fbbb 	bl	8006774 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005ffe:	f000 fa6d 	bl	80064dc <MX_GPIO_Init>
  MX_ETH_Init();
 8006002:	f000 f8e9 	bl	80061d8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8006006:	f000 f9c1 	bl	800638c <MX_USART3_UART_Init>
  MX_DMA_Init();
 800600a:	f000 fa3f 	bl	800648c <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 800600e:	f000 fa0b 	bl	8006428 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8006012:	f000 f92d 	bl	8006270 <MX_SPI3_Init>
  MX_TIM7_Init();
 8006016:	f000 f983 	bl	8006320 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 800601a:	f000 fcb3 	bl	8006984 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 800601e:	2000      	movs	r0, #0
 8006020:	f000 ffbd 	bl	8006f9e <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8006024:	2000      	movs	r0, #0
 8006026:	f000 ffa9 	bl	8006f7c <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 800602a:	f001 fba9 	bl	8007780 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	4b0b      	ldr	r3, [pc, #44]	; (8006060 <main+0xf0>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	2bc8      	cmp	r3, #200	; 0xc8
 8006038:	d9f7      	bls.n	800602a <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 800603a:	f001 fba1 	bl	8007780 <HAL_GetTick>
 800603e:	4603      	mov	r3, r0
 8006040:	4a07      	ldr	r2, [pc, #28]	; (8006060 <main+0xf0>)
 8006042:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8006044:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006048:	4806      	ldr	r0, [pc, #24]	; (8006064 <main+0xf4>)
 800604a:	f004 fd24 	bl	800aa96 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 800604e:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8006052:	4905      	ldr	r1, [pc, #20]	; (8006068 <main+0xf8>)
 8006054:	4618      	mov	r0, r3
 8006056:	f7fc f823 	bl	80020a0 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 800605a:	e7e6      	b.n	800602a <main+0xba>
 800605c:	58024400 	.word	0x58024400
 8006060:	24000e98 	.word	0x24000e98
 8006064:	58020400 	.word	0x58020400
 8006068:	240009c0 	.word	0x240009c0

0800606c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b09c      	sub	sp, #112	; 0x70
 8006070:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006076:	224c      	movs	r2, #76	; 0x4c
 8006078:	2100      	movs	r1, #0
 800607a:	4618      	mov	r0, r3
 800607c:	f00a f9bc 	bl	80103f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006080:	1d3b      	adds	r3, r7, #4
 8006082:	2220      	movs	r2, #32
 8006084:	2100      	movs	r1, #0
 8006086:	4618      	mov	r0, r3
 8006088:	f00a f9b6 	bl	80103f8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800608c:	2004      	movs	r0, #4
 800608e:	f004 fe93 	bl	800adb8 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8006092:	2300      	movs	r3, #0
 8006094:	603b      	str	r3, [r7, #0]
 8006096:	4b34      	ldr	r3, [pc, #208]	; (8006168 <SystemClock_Config+0xfc>)
 8006098:	699b      	ldr	r3, [r3, #24]
 800609a:	4a33      	ldr	r2, [pc, #204]	; (8006168 <SystemClock_Config+0xfc>)
 800609c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80060a0:	6193      	str	r3, [r2, #24]
 80060a2:	4b31      	ldr	r3, [pc, #196]	; (8006168 <SystemClock_Config+0xfc>)
 80060a4:	699b      	ldr	r3, [r3, #24]
 80060a6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80060aa:	603b      	str	r3, [r7, #0]
 80060ac:	4b2f      	ldr	r3, [pc, #188]	; (800616c <SystemClock_Config+0x100>)
 80060ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b0:	4a2e      	ldr	r2, [pc, #184]	; (800616c <SystemClock_Config+0x100>)
 80060b2:	f043 0301 	orr.w	r3, r3, #1
 80060b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80060b8:	4b2c      	ldr	r3, [pc, #176]	; (800616c <SystemClock_Config+0x100>)
 80060ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060bc:	f003 0301 	and.w	r3, r3, #1
 80060c0:	603b      	str	r3, [r7, #0]
 80060c2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80060c4:	bf00      	nop
 80060c6:	4b28      	ldr	r3, [pc, #160]	; (8006168 <SystemClock_Config+0xfc>)
 80060c8:	699b      	ldr	r3, [r3, #24]
 80060ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d2:	d1f8      	bne.n	80060c6 <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80060d4:	4b26      	ldr	r3, [pc, #152]	; (8006170 <SystemClock_Config+0x104>)
 80060d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d8:	f023 0303 	bic.w	r3, r3, #3
 80060dc:	4a24      	ldr	r2, [pc, #144]	; (8006170 <SystemClock_Config+0x104>)
 80060de:	f043 0302 	orr.w	r3, r3, #2
 80060e2:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80060e4:	2301      	movs	r3, #1
 80060e6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80060e8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80060ec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80060ee:	2302      	movs	r3, #2
 80060f0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80060f2:	2302      	movs	r3, #2
 80060f4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80060f6:	2301      	movs	r3, #1
 80060f8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 80060fa:	2378      	movs	r3, #120	; 0x78
 80060fc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80060fe:	2302      	movs	r3, #2
 8006100:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006102:	2302      	movs	r3, #2
 8006104:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006106:	2302      	movs	r3, #2
 8006108:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800610a:	230c      	movs	r3, #12
 800610c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800610e:	2300      	movs	r3, #0
 8006110:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006112:	2300      	movs	r3, #0
 8006114:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006116:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800611a:	4618      	mov	r0, r3
 800611c:	f004 feb6 	bl	800ae8c <HAL_RCC_OscConfig>
 8006120:	4603      	mov	r3, r0
 8006122:	2b00      	cmp	r3, #0
 8006124:	d001      	beq.n	800612a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8006126:	f000 fb25 	bl	8006774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800612a:	233f      	movs	r3, #63	; 0x3f
 800612c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800612e:	2303      	movs	r3, #3
 8006130:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8006132:	2300      	movs	r3, #0
 8006134:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8006136:	2308      	movs	r3, #8
 8006138:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800613a:	2340      	movs	r3, #64	; 0x40
 800613c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800613e:	2340      	movs	r3, #64	; 0x40
 8006140:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8006142:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006146:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8006148:	2340      	movs	r3, #64	; 0x40
 800614a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800614c:	1d3b      	adds	r3, r7, #4
 800614e:	2104      	movs	r1, #4
 8006150:	4618      	mov	r0, r3
 8006152:	f005 fac9 	bl	800b6e8 <HAL_RCC_ClockConfig>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 800615c:	f000 fb0a 	bl	8006774 <Error_Handler>
  }
}
 8006160:	bf00      	nop
 8006162:	3770      	adds	r7, #112	; 0x70
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}
 8006168:	58024800 	.word	0x58024800
 800616c:	58000400 	.word	0x58000400
 8006170:	58024400 	.word	0x58024400

08006174 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b0b0      	sub	sp, #192	; 0xc0
 8006178:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800617a:	1d3b      	adds	r3, r7, #4
 800617c:	22bc      	movs	r2, #188	; 0xbc
 800617e:	2100      	movs	r1, #0
 8006180:	4618      	mov	r0, r3
 8006182:	f00a f939 	bl	80103f8 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8006186:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 800618a:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 800618c:	2301      	movs	r3, #1
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8006190:	2318      	movs	r3, #24
 8006192:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006194:	2302      	movs	r3, #2
 8006196:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8006198:	2304      	movs	r3, #4
 800619a:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 800619c:	2302      	movs	r3, #2
 800619e:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 80061a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 80061a6:	2300      	movs	r3, #0
 80061a8:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 80061aa:	2300      	movs	r3, #0
 80061ac:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 80061ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80061b2:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 80061b4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80061b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80061bc:	1d3b      	adds	r3, r7, #4
 80061be:	4618      	mov	r0, r3
 80061c0:	f005 fe1e 	bl	800be00 <HAL_RCCEx_PeriphCLKConfig>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d001      	beq.n	80061ce <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 80061ca:	f000 fad3 	bl	8006774 <Error_Handler>
  }
}
 80061ce:	bf00      	nop
 80061d0:	37c0      	adds	r7, #192	; 0xc0
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80061dc:	4b1e      	ldr	r3, [pc, #120]	; (8006258 <MX_ETH_Init+0x80>)
 80061de:	4a1f      	ldr	r2, [pc, #124]	; (800625c <MX_ETH_Init+0x84>)
 80061e0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80061e2:	4b1f      	ldr	r3, [pc, #124]	; (8006260 <MX_ETH_Init+0x88>)
 80061e4:	2200      	movs	r2, #0
 80061e6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80061e8:	4b1d      	ldr	r3, [pc, #116]	; (8006260 <MX_ETH_Init+0x88>)
 80061ea:	2280      	movs	r2, #128	; 0x80
 80061ec:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80061ee:	4b1c      	ldr	r3, [pc, #112]	; (8006260 <MX_ETH_Init+0x88>)
 80061f0:	22e1      	movs	r2, #225	; 0xe1
 80061f2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80061f4:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <MX_ETH_Init+0x88>)
 80061f6:	2200      	movs	r2, #0
 80061f8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80061fa:	4b19      	ldr	r3, [pc, #100]	; (8006260 <MX_ETH_Init+0x88>)
 80061fc:	2200      	movs	r2, #0
 80061fe:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8006200:	4b17      	ldr	r3, [pc, #92]	; (8006260 <MX_ETH_Init+0x88>)
 8006202:	2200      	movs	r2, #0
 8006204:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8006206:	4b14      	ldr	r3, [pc, #80]	; (8006258 <MX_ETH_Init+0x80>)
 8006208:	4a15      	ldr	r2, [pc, #84]	; (8006260 <MX_ETH_Init+0x88>)
 800620a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800620c:	4b12      	ldr	r3, [pc, #72]	; (8006258 <MX_ETH_Init+0x80>)
 800620e:	2201      	movs	r2, #1
 8006210:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8006212:	4b11      	ldr	r3, [pc, #68]	; (8006258 <MX_ETH_Init+0x80>)
 8006214:	4a13      	ldr	r2, [pc, #76]	; (8006264 <MX_ETH_Init+0x8c>)
 8006216:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8006218:	4b0f      	ldr	r3, [pc, #60]	; (8006258 <MX_ETH_Init+0x80>)
 800621a:	4a13      	ldr	r2, [pc, #76]	; (8006268 <MX_ETH_Init+0x90>)
 800621c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800621e:	4b0e      	ldr	r3, [pc, #56]	; (8006258 <MX_ETH_Init+0x80>)
 8006220:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8006224:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8006226:	480c      	ldr	r0, [pc, #48]	; (8006258 <MX_ETH_Init+0x80>)
 8006228:	f003 fe30 	bl	8009e8c <HAL_ETH_Init>
 800622c:	4603      	mov	r3, r0
 800622e:	2b00      	cmp	r3, #0
 8006230:	d001      	beq.n	8006236 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8006232:	f000 fa9f 	bl	8006774 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8006236:	2238      	movs	r2, #56	; 0x38
 8006238:	2100      	movs	r1, #0
 800623a:	480c      	ldr	r0, [pc, #48]	; (800626c <MX_ETH_Init+0x94>)
 800623c:	f00a f8dc 	bl	80103f8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8006240:	4b0a      	ldr	r3, [pc, #40]	; (800626c <MX_ETH_Init+0x94>)
 8006242:	2221      	movs	r2, #33	; 0x21
 8006244:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8006246:	4b09      	ldr	r3, [pc, #36]	; (800626c <MX_ETH_Init+0x94>)
 8006248:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800624c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800624e:	4b07      	ldr	r3, [pc, #28]	; (800626c <MX_ETH_Init+0x94>)
 8006250:	2200      	movs	r2, #0
 8006252:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8006254:	bf00      	nop
 8006256:	bd80      	pop	{r7, pc}
 8006258:	240001b0 	.word	0x240001b0
 800625c:	40028000 	.word	0x40028000
 8006260:	24000ea8 	.word	0x24000ea8
 8006264:	240000e8 	.word	0x240000e8
 8006268:	24000088 	.word	0x24000088
 800626c:	24000178 	.word	0x24000178

08006270 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8006270:	b580      	push	{r7, lr}
 8006272:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8006274:	4b28      	ldr	r3, [pc, #160]	; (8006318 <MX_SPI3_Init+0xa8>)
 8006276:	4a29      	ldr	r2, [pc, #164]	; (800631c <MX_SPI3_Init+0xac>)
 8006278:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800627a:	4b27      	ldr	r3, [pc, #156]	; (8006318 <MX_SPI3_Init+0xa8>)
 800627c:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8006280:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8006282:	4b25      	ldr	r3, [pc, #148]	; (8006318 <MX_SPI3_Init+0xa8>)
 8006284:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006288:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800628a:	4b23      	ldr	r3, [pc, #140]	; (8006318 <MX_SPI3_Init+0xa8>)
 800628c:	2207      	movs	r2, #7
 800628e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <MX_SPI3_Init+0xa8>)
 8006292:	2200      	movs	r2, #0
 8006294:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006296:	4b20      	ldr	r3, [pc, #128]	; (8006318 <MX_SPI3_Init+0xa8>)
 8006298:	2200      	movs	r2, #0
 800629a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800629c:	4b1e      	ldr	r3, [pc, #120]	; (8006318 <MX_SPI3_Init+0xa8>)
 800629e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80062a2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80062a4:	4b1c      	ldr	r3, [pc, #112]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062a6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062aa:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80062ac:	4b1a      	ldr	r3, [pc, #104]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80062b2:	4b19      	ldr	r3, [pc, #100]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062b4:	2200      	movs	r2, #0
 80062b6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062b8:	4b17      	ldr	r3, [pc, #92]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062ba:	2200      	movs	r2, #0
 80062bc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 80062be:	4b16      	ldr	r3, [pc, #88]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062c0:	2200      	movs	r2, #0
 80062c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80062c4:	4b14      	ldr	r3, [pc, #80]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80062ca:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 80062d2:	4b11      	ldr	r3, [pc, #68]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062d4:	2200      	movs	r2, #0
 80062d6:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80062d8:	4b0f      	ldr	r3, [pc, #60]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062da:	2200      	movs	r2, #0
 80062dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 80062de:	4b0e      	ldr	r3, [pc, #56]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062e0:	2200      	movs	r2, #0
 80062e2:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062e6:	2200      	movs	r2, #0
 80062e8:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 80062ea:	4b0b      	ldr	r3, [pc, #44]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062ec:	2200      	movs	r2, #0
 80062ee:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 80062f0:	4b09      	ldr	r3, [pc, #36]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062f2:	2200      	movs	r2, #0
 80062f4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 80062f6:	4b08      	ldr	r3, [pc, #32]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062f8:	2200      	movs	r2, #0
 80062fa:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 80062fc:	4b06      	ldr	r3, [pc, #24]	; (8006318 <MX_SPI3_Init+0xa8>)
 80062fe:	2200      	movs	r2, #0
 8006300:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006302:	4805      	ldr	r0, [pc, #20]	; (8006318 <MX_SPI3_Init+0xa8>)
 8006304:	f007 f8e4 	bl	800d4d0 <HAL_SPI_Init>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d001      	beq.n	8006312 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 800630e:	f000 fa31 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006312:	bf00      	nop
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop
 8006318:	24000260 	.word	0x24000260
 800631c:	40003c00 	.word	0x40003c00

08006320 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006326:	1d3b      	adds	r3, r7, #4
 8006328:	2200      	movs	r2, #0
 800632a:	601a      	str	r2, [r3, #0]
 800632c:	605a      	str	r2, [r3, #4]
 800632e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8006330:	4b14      	ldr	r3, [pc, #80]	; (8006384 <MX_TIM7_Init+0x64>)
 8006332:	4a15      	ldr	r2, [pc, #84]	; (8006388 <MX_TIM7_Init+0x68>)
 8006334:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8006336:	4b13      	ldr	r3, [pc, #76]	; (8006384 <MX_TIM7_Init+0x64>)
 8006338:	22ef      	movs	r2, #239	; 0xef
 800633a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800633c:	4b11      	ldr	r3, [pc, #68]	; (8006384 <MX_TIM7_Init+0x64>)
 800633e:	2200      	movs	r2, #0
 8006340:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8006342:	4b10      	ldr	r3, [pc, #64]	; (8006384 <MX_TIM7_Init+0x64>)
 8006344:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006348:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800634a:	4b0e      	ldr	r3, [pc, #56]	; (8006384 <MX_TIM7_Init+0x64>)
 800634c:	2200      	movs	r2, #0
 800634e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8006350:	480c      	ldr	r0, [pc, #48]	; (8006384 <MX_TIM7_Init+0x64>)
 8006352:	f007 fc9e 	bl	800dc92 <HAL_TIM_Base_Init>
 8006356:	4603      	mov	r3, r0
 8006358:	2b00      	cmp	r3, #0
 800635a:	d001      	beq.n	8006360 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800635c:	f000 fa0a 	bl	8006774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006360:	2300      	movs	r3, #0
 8006362:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006364:	2300      	movs	r3, #0
 8006366:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8006368:	1d3b      	adds	r3, r7, #4
 800636a:	4619      	mov	r1, r3
 800636c:	4805      	ldr	r0, [pc, #20]	; (8006384 <MX_TIM7_Init+0x64>)
 800636e:	f007 ff6f 	bl	800e250 <HAL_TIMEx_MasterConfigSynchronization>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	d001      	beq.n	800637c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8006378:	f000 f9fc 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800637c:	bf00      	nop
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	240002e8 	.word	0x240002e8
 8006388:	40001400 	.word	0x40001400

0800638c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006390:	4b22      	ldr	r3, [pc, #136]	; (800641c <MX_USART3_UART_Init+0x90>)
 8006392:	4a23      	ldr	r2, [pc, #140]	; (8006420 <MX_USART3_UART_Init+0x94>)
 8006394:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8006396:	4b21      	ldr	r3, [pc, #132]	; (800641c <MX_USART3_UART_Init+0x90>)
 8006398:	4a22      	ldr	r2, [pc, #136]	; (8006424 <MX_USART3_UART_Init+0x98>)
 800639a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800639c:	4b1f      	ldr	r3, [pc, #124]	; (800641c <MX_USART3_UART_Init+0x90>)
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80063a2:	4b1e      	ldr	r3, [pc, #120]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063a4:	2200      	movs	r2, #0
 80063a6:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80063a8:	4b1c      	ldr	r3, [pc, #112]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80063ae:	4b1b      	ldr	r3, [pc, #108]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063b0:	220c      	movs	r2, #12
 80063b2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80063b4:	4b19      	ldr	r3, [pc, #100]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063b6:	2200      	movs	r2, #0
 80063b8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80063ba:	4b18      	ldr	r3, [pc, #96]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063bc:	2200      	movs	r2, #0
 80063be:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80063c0:	4b16      	ldr	r3, [pc, #88]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063c2:	2200      	movs	r2, #0
 80063c4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80063c6:	4b15      	ldr	r3, [pc, #84]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063c8:	2200      	movs	r2, #0
 80063ca:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80063cc:	4b13      	ldr	r3, [pc, #76]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063ce:	2200      	movs	r2, #0
 80063d0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80063d2:	4812      	ldr	r0, [pc, #72]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063d4:	f007 ffe8 	bl	800e3a8 <HAL_UART_Init>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d001      	beq.n	80063e2 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 80063de:	f000 f9c9 	bl	8006774 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063e2:	2100      	movs	r1, #0
 80063e4:	480d      	ldr	r0, [pc, #52]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063e6:	f009 fc09 	bl	800fbfc <HAL_UARTEx_SetTxFifoThreshold>
 80063ea:	4603      	mov	r3, r0
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 80063f0:	f000 f9c0 	bl	8006774 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80063f4:	2100      	movs	r1, #0
 80063f6:	4809      	ldr	r0, [pc, #36]	; (800641c <MX_USART3_UART_Init+0x90>)
 80063f8:	f009 fc3e 	bl	800fc78 <HAL_UARTEx_SetRxFifoThreshold>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d001      	beq.n	8006406 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8006402:	f000 f9b7 	bl	8006774 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006406:	4805      	ldr	r0, [pc, #20]	; (800641c <MX_USART3_UART_Init+0x90>)
 8006408:	f009 fbbf 	bl	800fb8a <HAL_UARTEx_DisableFifoMode>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8006412:	f000 f9af 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006416:	bf00      	nop
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	24000334 	.word	0x24000334
 8006420:	40004800 	.word	0x40004800
 8006424:	0005dc00 	.word	0x0005dc00

08006428 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800642c:	4b15      	ldr	r3, [pc, #84]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800642e:	4a16      	ldr	r2, [pc, #88]	; (8006488 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006430:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006432:	4b14      	ldr	r3, [pc, #80]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006434:	2209      	movs	r2, #9
 8006436:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006438:	4b12      	ldr	r3, [pc, #72]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800643a:	2202      	movs	r2, #2
 800643c:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800643e:	4b11      	ldr	r3, [pc, #68]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006440:	2200      	movs	r2, #0
 8006442:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006444:	4b0f      	ldr	r3, [pc, #60]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006446:	2202      	movs	r2, #2
 8006448:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800644a:	4b0e      	ldr	r3, [pc, #56]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800644c:	2200      	movs	r2, #0
 800644e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006450:	4b0c      	ldr	r3, [pc, #48]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006452:	2200      	movs	r2, #0
 8006454:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006458:	2200      	movs	r2, #0
 800645a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 800645c:	4b09      	ldr	r3, [pc, #36]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800645e:	2201      	movs	r2, #1
 8006460:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006462:	4b08      	ldr	r3, [pc, #32]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006464:	2201      	movs	r2, #1
 8006466:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006468:	4b06      	ldr	r3, [pc, #24]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800646a:	2200      	movs	r2, #0
 800646c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800646e:	4805      	ldr	r0, [pc, #20]	; (8006484 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006470:	f004 fb5a 	bl	800ab28 <HAL_PCD_Init>
 8006474:	4603      	mov	r3, r0
 8006476:	2b00      	cmp	r3, #0
 8006478:	d001      	beq.n	800647e <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800647a:	f000 f97b 	bl	8006774 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800647e:	bf00      	nop
 8006480:	bd80      	pop	{r7, pc}
 8006482:	bf00      	nop
 8006484:	240004b4 	.word	0x240004b4
 8006488:	40080000 	.word	0x40080000

0800648c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b082      	sub	sp, #8
 8006490:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006492:	4b11      	ldr	r3, [pc, #68]	; (80064d8 <MX_DMA_Init+0x4c>)
 8006494:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006498:	4a0f      	ldr	r2, [pc, #60]	; (80064d8 <MX_DMA_Init+0x4c>)
 800649a:	f043 0301 	orr.w	r3, r3, #1
 800649e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80064a2:	4b0d      	ldr	r3, [pc, #52]	; (80064d8 <MX_DMA_Init+0x4c>)
 80064a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80064a8:	f003 0301 	and.w	r3, r3, #1
 80064ac:	607b      	str	r3, [r7, #4]
 80064ae:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80064b0:	2200      	movs	r2, #0
 80064b2:	2100      	movs	r1, #0
 80064b4:	200c      	movs	r0, #12
 80064b6:	f001 fa8e 	bl	80079d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80064ba:	200c      	movs	r0, #12
 80064bc:	f001 faa5 	bl	8007a0a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80064c0:	2200      	movs	r2, #0
 80064c2:	2100      	movs	r1, #0
 80064c4:	200f      	movs	r0, #15
 80064c6:	f001 fa86 	bl	80079d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80064ca:	200f      	movs	r0, #15
 80064cc:	f001 fa9d 	bl	8007a0a <HAL_NVIC_EnableIRQ>

}
 80064d0:	bf00      	nop
 80064d2:	3708      	adds	r7, #8
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}
 80064d8:	58024400 	.word	0x58024400

080064dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b08e      	sub	sp, #56	; 0x38
 80064e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]
 80064ea:	605a      	str	r2, [r3, #4]
 80064ec:	609a      	str	r2, [r3, #8]
 80064ee:	60da      	str	r2, [r3, #12]
 80064f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80064f2:	4b8a      	ldr	r3, [pc, #552]	; (800671c <MX_GPIO_Init+0x240>)
 80064f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80064f8:	4a88      	ldr	r2, [pc, #544]	; (800671c <MX_GPIO_Init+0x240>)
 80064fa:	f043 0304 	orr.w	r3, r3, #4
 80064fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006502:	4b86      	ldr	r3, [pc, #536]	; (800671c <MX_GPIO_Init+0x240>)
 8006504:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006508:	f003 0304 	and.w	r3, r3, #4
 800650c:	623b      	str	r3, [r7, #32]
 800650e:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006510:	4b82      	ldr	r3, [pc, #520]	; (800671c <MX_GPIO_Init+0x240>)
 8006512:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006516:	4a81      	ldr	r2, [pc, #516]	; (800671c <MX_GPIO_Init+0x240>)
 8006518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800651c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006520:	4b7e      	ldr	r3, [pc, #504]	; (800671c <MX_GPIO_Init+0x240>)
 8006522:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652a:	61fb      	str	r3, [r7, #28]
 800652c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800652e:	4b7b      	ldr	r3, [pc, #492]	; (800671c <MX_GPIO_Init+0x240>)
 8006530:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006534:	4a79      	ldr	r2, [pc, #484]	; (800671c <MX_GPIO_Init+0x240>)
 8006536:	f043 0301 	orr.w	r3, r3, #1
 800653a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800653e:	4b77      	ldr	r3, [pc, #476]	; (800671c <MX_GPIO_Init+0x240>)
 8006540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006544:	f003 0301 	and.w	r3, r3, #1
 8006548:	61bb      	str	r3, [r7, #24]
 800654a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800654c:	4b73      	ldr	r3, [pc, #460]	; (800671c <MX_GPIO_Init+0x240>)
 800654e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006552:	4a72      	ldr	r2, [pc, #456]	; (800671c <MX_GPIO_Init+0x240>)
 8006554:	f043 0302 	orr.w	r3, r3, #2
 8006558:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800655c:	4b6f      	ldr	r3, [pc, #444]	; (800671c <MX_GPIO_Init+0x240>)
 800655e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006562:	f003 0302 	and.w	r3, r3, #2
 8006566:	617b      	str	r3, [r7, #20]
 8006568:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800656a:	4b6c      	ldr	r3, [pc, #432]	; (800671c <MX_GPIO_Init+0x240>)
 800656c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006570:	4a6a      	ldr	r2, [pc, #424]	; (800671c <MX_GPIO_Init+0x240>)
 8006572:	f043 0320 	orr.w	r3, r3, #32
 8006576:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800657a:	4b68      	ldr	r3, [pc, #416]	; (800671c <MX_GPIO_Init+0x240>)
 800657c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	613b      	str	r3, [r7, #16]
 8006586:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006588:	4b64      	ldr	r3, [pc, #400]	; (800671c <MX_GPIO_Init+0x240>)
 800658a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800658e:	4a63      	ldr	r2, [pc, #396]	; (800671c <MX_GPIO_Init+0x240>)
 8006590:	f043 0310 	orr.w	r3, r3, #16
 8006594:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006598:	4b60      	ldr	r3, [pc, #384]	; (800671c <MX_GPIO_Init+0x240>)
 800659a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800659e:	f003 0310 	and.w	r3, r3, #16
 80065a2:	60fb      	str	r3, [r7, #12]
 80065a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80065a6:	4b5d      	ldr	r3, [pc, #372]	; (800671c <MX_GPIO_Init+0x240>)
 80065a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ac:	4a5b      	ldr	r2, [pc, #364]	; (800671c <MX_GPIO_Init+0x240>)
 80065ae:	f043 0308 	orr.w	r3, r3, #8
 80065b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065b6:	4b59      	ldr	r3, [pc, #356]	; (800671c <MX_GPIO_Init+0x240>)
 80065b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065bc:	f003 0308 	and.w	r3, r3, #8
 80065c0:	60bb      	str	r3, [r7, #8]
 80065c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80065c4:	4b55      	ldr	r3, [pc, #340]	; (800671c <MX_GPIO_Init+0x240>)
 80065c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065ca:	4a54      	ldr	r2, [pc, #336]	; (800671c <MX_GPIO_Init+0x240>)
 80065cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80065d4:	4b51      	ldr	r3, [pc, #324]	; (800671c <MX_GPIO_Init+0x240>)
 80065d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80065da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 80065e2:	2201      	movs	r2, #1
 80065e4:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80065e8:	484d      	ldr	r0, [pc, #308]	; (8006720 <MX_GPIO_Init+0x244>)
 80065ea:	f004 fa3b 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 80065ee:	2200      	movs	r2, #0
 80065f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065f4:	484a      	ldr	r0, [pc, #296]	; (8006720 <MX_GPIO_Init+0x244>)
 80065f6:	f004 fa35 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80065fa:	2200      	movs	r2, #0
 80065fc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006600:	4848      	ldr	r0, [pc, #288]	; (8006724 <MX_GPIO_Init+0x248>)
 8006602:	f004 fa2f 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8006606:	2200      	movs	r2, #0
 8006608:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800660c:	4846      	ldr	r0, [pc, #280]	; (8006728 <MX_GPIO_Init+0x24c>)
 800660e:	f004 fa29 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8006612:	2201      	movs	r2, #1
 8006614:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006618:	4844      	ldr	r0, [pc, #272]	; (800672c <MX_GPIO_Init+0x250>)
 800661a:	f004 fa23 	bl	800aa64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 800661e:	230d      	movs	r3, #13
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006622:	2300      	movs	r3, #0
 8006624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006626:	2300      	movs	r3, #0
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800662a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800662e:	4619      	mov	r1, r3
 8006630:	483f      	ldr	r0, [pc, #252]	; (8006730 <MX_GPIO_Init+0x254>)
 8006632:	f004 f84f 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8006636:	2308      	movs	r3, #8
 8006638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800663a:	2300      	movs	r3, #0
 800663c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800663e:	2300      	movs	r3, #0
 8006640:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8006642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006646:	4619      	mov	r1, r3
 8006648:	483a      	ldr	r0, [pc, #232]	; (8006734 <MX_GPIO_Init+0x258>)
 800664a:	f004 f843 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 800664e:	2302      	movs	r3, #2
 8006650:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006652:	2300      	movs	r3, #0
 8006654:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006656:	2300      	movs	r3, #0
 8006658:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 800665a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800665e:	4619      	mov	r1, r3
 8006660:	4830      	ldr	r0, [pc, #192]	; (8006724 <MX_GPIO_Init+0x248>)
 8006662:	f004 f837 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8006666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800666a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800666c:	2300      	movs	r3, #0
 800666e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006670:	2300      	movs	r3, #0
 8006672:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8006674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006678:	4619      	mov	r1, r3
 800667a:	482f      	ldr	r0, [pc, #188]	; (8006738 <MX_GPIO_Init+0x25c>)
 800667c:	f004 f82a 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8006680:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8006684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006686:	2301      	movs	r3, #1
 8006688:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800668a:	2300      	movs	r3, #0
 800668c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800668e:	2300      	movs	r3, #0
 8006690:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006692:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006696:	4619      	mov	r1, r3
 8006698:	4821      	ldr	r0, [pc, #132]	; (8006720 <MX_GPIO_Init+0x244>)
 800669a:	f004 f81b 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800669e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80066a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066a4:	2301      	movs	r3, #1
 80066a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066a8:	2300      	movs	r3, #0
 80066aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ac:	2300      	movs	r3, #0
 80066ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80066b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066b4:	4619      	mov	r1, r3
 80066b6:	481b      	ldr	r0, [pc, #108]	; (8006724 <MX_GPIO_Init+0x248>)
 80066b8:	f004 f80c 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80066bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066c2:	2301      	movs	r3, #1
 80066c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80066ca:	2300      	movs	r3, #0
 80066cc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80066ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066d2:	4619      	mov	r1, r3
 80066d4:	4814      	ldr	r0, [pc, #80]	; (8006728 <MX_GPIO_Init+0x24c>)
 80066d6:	f003 fffd 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 80066da:	2380      	movs	r3, #128	; 0x80
 80066dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80066de:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80066e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80066e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066ec:	4619      	mov	r1, r3
 80066ee:	480f      	ldr	r0, [pc, #60]	; (800672c <MX_GPIO_Init+0x250>)
 80066f0:	f003 fff0 	bl	800a6d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 80066f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80066f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80066fa:	2301      	movs	r3, #1
 80066fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066fe:	2300      	movs	r3, #0
 8006700:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006702:	2300      	movs	r3, #0
 8006704:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8006706:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800670a:	4619      	mov	r1, r3
 800670c:	4807      	ldr	r0, [pc, #28]	; (800672c <MX_GPIO_Init+0x250>)
 800670e:	f003 ffe1 	bl	800a6d4 <HAL_GPIO_Init>

}
 8006712:	bf00      	nop
 8006714:	3738      	adds	r7, #56	; 0x38
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
 800671a:	bf00      	nop
 800671c:	58024400 	.word	0x58024400
 8006720:	58021000 	.word	0x58021000
 8006724:	58020400 	.word	0x58020400
 8006728:	58020c00 	.word	0x58020c00
 800672c:	58021800 	.word	0x58021800
 8006730:	58020800 	.word	0x58020800
 8006734:	58020000 	.word	0x58020000
 8006738:	58021400 	.word	0x58021400

0800673c <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800673c:	b4b0      	push	{r4, r5, r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a09      	ldr	r2, [pc, #36]	; (800676c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d10a      	bne.n	8006762 <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800674e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006752:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006756:	1854      	adds	r4, r2, r1
 8006758:	f143 0500 	adc.w	r5, r3, #0
 800675c:	4b04      	ldr	r3, [pc, #16]	; (8006770 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800675e:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 8006762:	bf00      	nop
 8006764:	370c      	adds	r7, #12
 8006766:	46bd      	mov	sp, r7
 8006768:	bcb0      	pop	{r4, r5, r7}
 800676a:	4770      	bx	lr
 800676c:	240002e8 	.word	0x240002e8
 8006770:	24000ea0 	.word	0x24000ea0

08006774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006774:	b480      	push	{r7}
 8006776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006778:	b672      	cpsid	i
}
 800677a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800677c:	e7fe      	b.n	800677c <Error_Handler+0x8>
	...

08006780 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8006784:	2200      	movs	r2, #0
 8006786:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800678a:	4802      	ldr	r0, [pc, #8]	; (8006794 <ST7735_Select+0x14>)
 800678c:	f004 f96a 	bl	800aa64 <HAL_GPIO_WritePin>
}
 8006790:	bf00      	nop
 8006792:	bd80      	pop	{r7, pc}
 8006794:	58021000 	.word	0x58021000

08006798 <ST7735_Unselect>:

void ST7735_Unselect() {
 8006798:	b580      	push	{r7, lr}
 800679a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800679c:	2201      	movs	r2, #1
 800679e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067a2:	4802      	ldr	r0, [pc, #8]	; (80067ac <ST7735_Unselect+0x14>)
 80067a4:	f004 f95e 	bl	800aa64 <HAL_GPIO_WritePin>
}
 80067a8:	bf00      	nop
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	58021000 	.word	0x58021000

080067b0 <ST7735_Select1>:
static void ST7735_Select1() {
 80067b0:	b580      	push	{r7, lr}
 80067b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80067b4:	2200      	movs	r2, #0
 80067b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067ba:	4802      	ldr	r0, [pc, #8]	; (80067c4 <ST7735_Select1+0x14>)
 80067bc:	f004 f952 	bl	800aa64 <HAL_GPIO_WritePin>
}
 80067c0:	bf00      	nop
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	58021000 	.word	0x58021000

080067c8 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80067c8:	b580      	push	{r7, lr}
 80067ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80067cc:	2201      	movs	r2, #1
 80067ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067d2:	4802      	ldr	r0, [pc, #8]	; (80067dc <ST7735_Unselect1+0x14>)
 80067d4:	f004 f946 	bl	800aa64 <HAL_GPIO_WritePin>
}
 80067d8:	bf00      	nop
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	58021000 	.word	0x58021000

080067e0 <ST7735_Reset>:

static void ST7735_Reset() {
 80067e0:	b580      	push	{r7, lr}
 80067e2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80067e4:	2200      	movs	r2, #0
 80067e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067ea:	4807      	ldr	r0, [pc, #28]	; (8006808 <ST7735_Reset+0x28>)
 80067ec:	f004 f93a 	bl	800aa64 <HAL_GPIO_WritePin>
	HAL_Delay(5);
 80067f0:	2005      	movs	r0, #5
 80067f2:	f000 ffd1 	bl	8007798 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80067f6:	2201      	movs	r2, #1
 80067f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80067fc:	4802      	ldr	r0, [pc, #8]	; (8006808 <ST7735_Reset+0x28>)
 80067fe:	f004 f931 	bl	800aa64 <HAL_GPIO_WritePin>
}
 8006802:	bf00      	nop
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	58021000 	.word	0x58021000

0800680c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800680c:	b580      	push	{r7, lr}
 800680e:	b082      	sub	sp, #8
 8006810:	af00      	add	r7, sp, #0
 8006812:	4603      	mov	r3, r0
 8006814:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8006816:	2200      	movs	r2, #0
 8006818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800681c:	4806      	ldr	r0, [pc, #24]	; (8006838 <ST7735_WriteCommand+0x2c>)
 800681e:	f004 f921 	bl	800aa64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8006822:	1df9      	adds	r1, r7, #7
 8006824:	f04f 33ff 	mov.w	r3, #4294967295
 8006828:	2201      	movs	r2, #1
 800682a:	4804      	ldr	r0, [pc, #16]	; (800683c <ST7735_WriteCommand+0x30>)
 800682c:	f006 ff56 	bl	800d6dc <HAL_SPI_Transmit>
}
 8006830:	bf00      	nop
 8006832:	3708      	adds	r7, #8
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	58021800 	.word	0x58021800
 800683c:	24000260 	.word	0x24000260

08006840 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
 8006848:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800684a:	2201      	movs	r2, #1
 800684c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006850:	4807      	ldr	r0, [pc, #28]	; (8006870 <ST7735_WriteData+0x30>)
 8006852:	f004 f907 	bl	800aa64 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	b29a      	uxth	r2, r3
 800685a:	f04f 33ff 	mov.w	r3, #4294967295
 800685e:	6879      	ldr	r1, [r7, #4]
 8006860:	4804      	ldr	r0, [pc, #16]	; (8006874 <ST7735_WriteData+0x34>)
 8006862:	f006 ff3b 	bl	800d6dc <HAL_SPI_Transmit>
}
 8006866:	bf00      	nop
 8006868:	3708      	adds	r7, #8
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	58021800 	.word	0x58021800
 8006874:	24000260 	.word	0x24000260

08006878 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8006878:	b580      	push	{r7, lr}
 800687a:	b084      	sub	sp, #16
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	607a      	str	r2, [r7, #4]
 8006886:	781b      	ldrb	r3, [r3, #0]
 8006888:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 800688a:	e034      	b.n	80068f6 <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	1c5a      	adds	r2, r3, #1
 8006890:	607a      	str	r2, [r7, #4]
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 8006896:	7afb      	ldrb	r3, [r7, #11]
 8006898:	4618      	mov	r0, r3
 800689a:	f7ff ffb7 	bl	800680c <ST7735_WriteCommand>

		numArgs = *addr++;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	1c5a      	adds	r2, r3, #1
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80068a8:	7abb      	ldrb	r3, [r7, #10]
 80068aa:	b29b      	uxth	r3, r3
 80068ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b0:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 80068b2:	7abb      	ldrb	r3, [r7, #10]
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 80068ba:	7abb      	ldrb	r3, [r7, #10]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d008      	beq.n	80068d2 <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 80068c0:	7abb      	ldrb	r3, [r7, #10]
 80068c2:	4619      	mov	r1, r3
 80068c4:	6878      	ldr	r0, [r7, #4]
 80068c6:	f7ff ffbb 	bl	8006840 <ST7735_WriteData>
			addr += numArgs;
 80068ca:	7abb      	ldrb	r3, [r7, #10]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	4413      	add	r3, r2
 80068d0:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80068d2:	89bb      	ldrh	r3, [r7, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d00e      	beq.n	80068f6 <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	607a      	str	r2, [r7, #4]
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 80068e2:	89bb      	ldrh	r3, [r7, #12]
 80068e4:	2bff      	cmp	r3, #255	; 0xff
 80068e6:	d102      	bne.n	80068ee <ST7735_ExecuteCommandList+0x76>
 80068e8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80068ec:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 80068ee:	89bb      	ldrh	r3, [r7, #12]
 80068f0:	4618      	mov	r0, r3
 80068f2:	f000 ff51 	bl	8007798 <HAL_Delay>
	while(numCommands--) {
 80068f6:	7bfb      	ldrb	r3, [r7, #15]
 80068f8:	1e5a      	subs	r2, r3, #1
 80068fa:	73fa      	strb	r2, [r7, #15]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d1c5      	bne.n	800688c <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8006900:	bf00      	nop
 8006902:	bf00      	nop
 8006904:	3710      	adds	r7, #16
 8006906:	46bd      	mov	sp, r7
 8006908:	bd80      	pop	{r7, pc}

0800690a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800690a:	b590      	push	{r4, r7, lr}
 800690c:	b085      	sub	sp, #20
 800690e:	af00      	add	r7, sp, #0
 8006910:	4604      	mov	r4, r0
 8006912:	4608      	mov	r0, r1
 8006914:	4611      	mov	r1, r2
 8006916:	461a      	mov	r2, r3
 8006918:	4623      	mov	r3, r4
 800691a:	71fb      	strb	r3, [r7, #7]
 800691c:	4603      	mov	r3, r0
 800691e:	71bb      	strb	r3, [r7, #6]
 8006920:	460b      	mov	r3, r1
 8006922:	717b      	strb	r3, [r7, #5]
 8006924:	4613      	mov	r3, r2
 8006926:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8006928:	202a      	movs	r0, #42	; 0x2a
 800692a:	f7ff ff6f 	bl	800680c <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800692e:	2300      	movs	r3, #0
 8006930:	733b      	strb	r3, [r7, #12]
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	3302      	adds	r3, #2
 8006936:	b2db      	uxtb	r3, r3
 8006938:	737b      	strb	r3, [r7, #13]
 800693a:	2300      	movs	r3, #0
 800693c:	73bb      	strb	r3, [r7, #14]
 800693e:	797b      	ldrb	r3, [r7, #5]
 8006940:	3302      	adds	r3, #2
 8006942:	b2db      	uxtb	r3, r3
 8006944:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006946:	f107 030c 	add.w	r3, r7, #12
 800694a:	2104      	movs	r1, #4
 800694c:	4618      	mov	r0, r3
 800694e:	f7ff ff77 	bl	8006840 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 8006952:	202b      	movs	r0, #43	; 0x2b
 8006954:	f7ff ff5a 	bl	800680c <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8006958:	79bb      	ldrb	r3, [r7, #6]
 800695a:	3301      	adds	r3, #1
 800695c:	b2db      	uxtb	r3, r3
 800695e:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8006960:	793b      	ldrb	r3, [r7, #4]
 8006962:	3301      	adds	r3, #1
 8006964:	b2db      	uxtb	r3, r3
 8006966:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8006968:	f107 030c 	add.w	r3, r7, #12
 800696c:	2104      	movs	r1, #4
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff ff66 	bl	8006840 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 8006974:	202c      	movs	r0, #44	; 0x2c
 8006976:	f7ff ff49 	bl	800680c <ST7735_WriteCommand>
}
 800697a:	bf00      	nop
 800697c:	3714      	adds	r7, #20
 800697e:	46bd      	mov	sp, r7
 8006980:	bd90      	pop	{r4, r7, pc}
	...

08006984 <ST7735_Init>:

void ST7735_Init() {
 8006984:	b580      	push	{r7, lr}
 8006986:	af00      	add	r7, sp, #0
	ST7735_Select();
 8006988:	f7ff fefa 	bl	8006780 <ST7735_Select>
	ST7735_Select1();
 800698c:	f7ff ff10 	bl	80067b0 <ST7735_Select1>
	ST7735_Reset();
 8006990:	f7ff ff26 	bl	80067e0 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 8006994:	4807      	ldr	r0, [pc, #28]	; (80069b4 <ST7735_Init+0x30>)
 8006996:	f7ff ff6f 	bl	8006878 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 800699a:	4807      	ldr	r0, [pc, #28]	; (80069b8 <ST7735_Init+0x34>)
 800699c:	f7ff ff6c 	bl	8006878 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 80069a0:	4806      	ldr	r0, [pc, #24]	; (80069bc <ST7735_Init+0x38>)
 80069a2:	f7ff ff69 	bl	8006878 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 80069a6:	f7ff fef7 	bl	8006798 <ST7735_Unselect>
	ST7735_Unselect1();
 80069aa:	f7ff ff0d 	bl	80067c8 <ST7735_Unselect1>
}
 80069ae:	bf00      	nop
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	080125e8 	.word	0x080125e8
 80069b8:	08012624 	.word	0x08012624
 80069bc:	08012634 	.word	0x08012634

080069c0 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80069c0:	b082      	sub	sp, #8
 80069c2:	b590      	push	{r4, r7, lr}
 80069c4:	b089      	sub	sp, #36	; 0x24
 80069c6:	af00      	add	r7, sp, #0
 80069c8:	637b      	str	r3, [r7, #52]	; 0x34
 80069ca:	4603      	mov	r3, r0
 80069cc:	80fb      	strh	r3, [r7, #6]
 80069ce:	460b      	mov	r3, r1
 80069d0:	80bb      	strh	r3, [r7, #4]
 80069d2:	4613      	mov	r3, r2
 80069d4:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80069d6:	88fb      	ldrh	r3, [r7, #6]
 80069d8:	b2d8      	uxtb	r0, r3
 80069da:	88bb      	ldrh	r3, [r7, #4]
 80069dc:	b2d9      	uxtb	r1, r3
 80069de:	88fb      	ldrh	r3, [r7, #6]
 80069e0:	b2da      	uxtb	r2, r3
 80069e2:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80069e6:	4413      	add	r3, r2
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	3b01      	subs	r3, #1
 80069ec:	b2dc      	uxtb	r4, r3
 80069ee:	88bb      	ldrh	r3, [r7, #4]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80069f6:	4413      	add	r3, r2
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	4622      	mov	r2, r4
 8006a00:	f7ff ff83 	bl	800690a <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 8006a04:	2300      	movs	r3, #0
 8006a06:	61fb      	str	r3, [r7, #28]
 8006a08:	e043      	b.n	8006a92 <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8006a0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a0c:	78fb      	ldrb	r3, [r7, #3]
 8006a0e:	3b20      	subs	r3, #32
 8006a10:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8006a14:	fb01 f303 	mul.w	r3, r1, r3
 8006a18:	4619      	mov	r1, r3
 8006a1a:	69fb      	ldr	r3, [r7, #28]
 8006a1c:	440b      	add	r3, r1
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	881b      	ldrh	r3, [r3, #0]
 8006a24:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 8006a26:	2300      	movs	r3, #0
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	e029      	b.n	8006a80 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8006a2c:	697a      	ldr	r2, [r7, #20]
 8006a2e:	69bb      	ldr	r3, [r7, #24]
 8006a30:	fa02 f303 	lsl.w	r3, r2, r3
 8006a34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d00e      	beq.n	8006a5a <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8006a3c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a3e:	0a1b      	lsrs	r3, r3, #8
 8006a40:	b29b      	uxth	r3, r3
 8006a42:	b2db      	uxtb	r3, r3
 8006a44:	743b      	strb	r3, [r7, #16]
 8006a46:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8006a4c:	f107 0310 	add.w	r3, r7, #16
 8006a50:	2102      	movs	r1, #2
 8006a52:	4618      	mov	r0, r3
 8006a54:	f7ff fef4 	bl	8006840 <ST7735_WriteData>
 8006a58:	e00f      	b.n	8006a7a <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8006a5a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a5e:	0a1b      	lsrs	r3, r3, #8
 8006a60:	b29b      	uxth	r3, r3
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	733b      	strb	r3, [r7, #12]
 8006a66:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8006a6e:	f107 030c 	add.w	r3, r7, #12
 8006a72:	2102      	movs	r1, #2
 8006a74:	4618      	mov	r0, r3
 8006a76:	f7ff fee3 	bl	8006840 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 8006a7a:	69bb      	ldr	r3, [r7, #24]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006a84:	461a      	mov	r2, r3
 8006a86:	69bb      	ldr	r3, [r7, #24]
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d3cf      	bcc.n	8006a2c <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	61fb      	str	r3, [r7, #28]
 8006a92:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006a96:	461a      	mov	r2, r3
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d3b5      	bcc.n	8006a0a <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	3724      	adds	r7, #36	; 0x24
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8006aaa:	b002      	add	sp, #8
 8006aac:	4770      	bx	lr

08006aae <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006aae:	b082      	sub	sp, #8
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b086      	sub	sp, #24
 8006ab4:	af04      	add	r7, sp, #16
 8006ab6:	603a      	str	r2, [r7, #0]
 8006ab8:	617b      	str	r3, [r7, #20]
 8006aba:	4603      	mov	r3, r0
 8006abc:	80fb      	strh	r3, [r7, #6]
 8006abe:	460b      	mov	r3, r1
 8006ac0:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 8006ac2:	f7ff fe5d 	bl	8006780 <ST7735_Select>

	while(*str) {
 8006ac6:	e02d      	b.n	8006b24 <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	7d3a      	ldrb	r2, [r7, #20]
 8006acc:	4413      	add	r3, r2
 8006ace:	2b7f      	cmp	r3, #127	; 0x7f
 8006ad0:	dd13      	ble.n	8006afa <ST7735_WriteString+0x4c>
			x = 0;
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006ad6:	7d7b      	ldrb	r3, [r7, #21]
 8006ad8:	b29a      	uxth	r2, r3
 8006ada:	88bb      	ldrh	r3, [r7, #4]
 8006adc:	4413      	add	r3, r2
 8006ade:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006ae0:	88bb      	ldrh	r3, [r7, #4]
 8006ae2:	7d7a      	ldrb	r2, [r7, #21]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	2b7f      	cmp	r3, #127	; 0x7f
 8006ae8:	dc21      	bgt.n	8006b2e <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8006aea:	683b      	ldr	r3, [r7, #0]
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b20      	cmp	r3, #32
 8006af0:	d103      	bne.n	8006afa <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	3301      	adds	r3, #1
 8006af6:	603b      	str	r3, [r7, #0]
				continue;
 8006af8:	e014      	b.n	8006b24 <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	781a      	ldrb	r2, [r3, #0]
 8006afe:	88b9      	ldrh	r1, [r7, #4]
 8006b00:	88f8      	ldrh	r0, [r7, #6]
 8006b02:	8c3b      	ldrh	r3, [r7, #32]
 8006b04:	9302      	str	r3, [sp, #8]
 8006b06:	8bbb      	ldrh	r3, [r7, #28]
 8006b08:	9301      	str	r3, [sp, #4]
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	9300      	str	r3, [sp, #0]
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f7ff ff56 	bl	80069c0 <ST7735_WriteChar>
		x += font.width;
 8006b14:	7d3b      	ldrb	r3, [r7, #20]
 8006b16:	b29a      	uxth	r2, r3
 8006b18:	88fb      	ldrh	r3, [r7, #6]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	80fb      	strh	r3, [r7, #6]
		str++;
 8006b1e:	683b      	ldr	r3, [r7, #0]
 8006b20:	3301      	adds	r3, #1
 8006b22:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d1cd      	bne.n	8006ac8 <ST7735_WriteString+0x1a>
 8006b2c:	e000      	b.n	8006b30 <ST7735_WriteString+0x82>
				break;
 8006b2e:	bf00      	nop
	}

	ST7735_Unselect();
 8006b30:	f7ff fe32 	bl	8006798 <ST7735_Unselect>
}
 8006b34:	bf00      	nop
 8006b36:	3708      	adds	r7, #8
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b3e:	b002      	add	sp, #8
 8006b40:	4770      	bx	lr

08006b42 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8006b42:	b082      	sub	sp, #8
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af04      	add	r7, sp, #16
 8006b4a:	603a      	str	r2, [r7, #0]
 8006b4c:	617b      	str	r3, [r7, #20]
 8006b4e:	4603      	mov	r3, r0
 8006b50:	80fb      	strh	r3, [r7, #6]
 8006b52:	460b      	mov	r3, r1
 8006b54:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 8006b56:	f7ff fe2b 	bl	80067b0 <ST7735_Select1>

	while(*str) {
 8006b5a:	e02d      	b.n	8006bb8 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8006b5c:	88fb      	ldrh	r3, [r7, #6]
 8006b5e:	7d3a      	ldrb	r2, [r7, #20]
 8006b60:	4413      	add	r3, r2
 8006b62:	2b7f      	cmp	r3, #127	; 0x7f
 8006b64:	dd13      	ble.n	8006b8e <ST7735_WriteString1+0x4c>
			x = 0;
 8006b66:	2300      	movs	r3, #0
 8006b68:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006b6a:	7d7b      	ldrb	r3, [r7, #21]
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	88bb      	ldrh	r3, [r7, #4]
 8006b70:	4413      	add	r3, r2
 8006b72:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006b74:	88bb      	ldrh	r3, [r7, #4]
 8006b76:	7d7a      	ldrb	r2, [r7, #21]
 8006b78:	4413      	add	r3, r2
 8006b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8006b7c:	dc21      	bgt.n	8006bc2 <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	2b20      	cmp	r3, #32
 8006b84:	d103      	bne.n	8006b8e <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	603b      	str	r3, [r7, #0]
				continue;
 8006b8c:	e014      	b.n	8006bb8 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	781a      	ldrb	r2, [r3, #0]
 8006b92:	88b9      	ldrh	r1, [r7, #4]
 8006b94:	88f8      	ldrh	r0, [r7, #6]
 8006b96:	8c3b      	ldrh	r3, [r7, #32]
 8006b98:	9302      	str	r3, [sp, #8]
 8006b9a:	8bbb      	ldrh	r3, [r7, #28]
 8006b9c:	9301      	str	r3, [sp, #4]
 8006b9e:	69bb      	ldr	r3, [r7, #24]
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f7ff ff0c 	bl	80069c0 <ST7735_WriteChar>
		x += font.width;
 8006ba8:	7d3b      	ldrb	r3, [r7, #20]
 8006baa:	b29a      	uxth	r2, r3
 8006bac:	88fb      	ldrh	r3, [r7, #6]
 8006bae:	4413      	add	r3, r2
 8006bb0:	80fb      	strh	r3, [r7, #6]
		str++;
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	3301      	adds	r3, #1
 8006bb6:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006bb8:	683b      	ldr	r3, [r7, #0]
 8006bba:	781b      	ldrb	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1cd      	bne.n	8006b5c <ST7735_WriteString1+0x1a>
 8006bc0:	e000      	b.n	8006bc4 <ST7735_WriteString1+0x82>
				break;
 8006bc2:	bf00      	nop
	}

	ST7735_Unselect1();
 8006bc4:	f7ff fe00 	bl	80067c8 <ST7735_Unselect1>
}
 8006bc8:	bf00      	nop
 8006bca:	3708      	adds	r7, #8
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006bd2:	b002      	add	sp, #8
 8006bd4:	4770      	bx	lr

08006bd6 <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 8006bd6:	b082      	sub	sp, #8
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af04      	add	r7, sp, #16
 8006bde:	603a      	str	r2, [r7, #0]
 8006be0:	617b      	str	r3, [r7, #20]
 8006be2:	4603      	mov	r3, r0
 8006be4:	80fb      	strh	r3, [r7, #6]
 8006be6:	460b      	mov	r3, r1
 8006be8:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8006bea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d102      	bne.n	8006bf8 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 8006bf2:	f7ff fdc5 	bl	8006780 <ST7735_Select>
 8006bf6:	e034      	b.n	8006c62 <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8006bf8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006bfc:	2b01      	cmp	r3, #1
 8006bfe:	d130      	bne.n	8006c62 <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8006c00:	f7ff fdd6 	bl	80067b0 <ST7735_Select1>

	}


	while(*str) {
 8006c04:	e02d      	b.n	8006c62 <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 8006c06:	88fb      	ldrh	r3, [r7, #6]
 8006c08:	7d3a      	ldrb	r2, [r7, #20]
 8006c0a:	4413      	add	r3, r2
 8006c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8006c0e:	dd13      	ble.n	8006c38 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8006c10:	2300      	movs	r3, #0
 8006c12:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8006c14:	7d7b      	ldrb	r3, [r7, #21]
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	88bb      	ldrh	r3, [r7, #4]
 8006c1a:	4413      	add	r3, r2
 8006c1c:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8006c1e:	88bb      	ldrh	r3, [r7, #4]
 8006c20:	7d7a      	ldrb	r2, [r7, #21]
 8006c22:	4413      	add	r3, r2
 8006c24:	2b7f      	cmp	r3, #127	; 0x7f
 8006c26:	dc21      	bgt.n	8006c6c <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8006c28:	683b      	ldr	r3, [r7, #0]
 8006c2a:	781b      	ldrb	r3, [r3, #0]
 8006c2c:	2b20      	cmp	r3, #32
 8006c2e:	d103      	bne.n	8006c38 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8006c30:	683b      	ldr	r3, [r7, #0]
 8006c32:	3301      	adds	r3, #1
 8006c34:	603b      	str	r3, [r7, #0]
				continue;
 8006c36:	e014      	b.n	8006c62 <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	781a      	ldrb	r2, [r3, #0]
 8006c3c:	88b9      	ldrh	r1, [r7, #4]
 8006c3e:	88f8      	ldrh	r0, [r7, #6]
 8006c40:	8c3b      	ldrh	r3, [r7, #32]
 8006c42:	9302      	str	r3, [sp, #8]
 8006c44:	8bbb      	ldrh	r3, [r7, #28]
 8006c46:	9301      	str	r3, [sp, #4]
 8006c48:	69bb      	ldr	r3, [r7, #24]
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	697b      	ldr	r3, [r7, #20]
 8006c4e:	f7ff feb7 	bl	80069c0 <ST7735_WriteChar>
		x += font.width;
 8006c52:	7d3b      	ldrb	r3, [r7, #20]
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	4413      	add	r3, r2
 8006c5a:	80fb      	strh	r3, [r7, #6]
		str++;
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	3301      	adds	r3, #1
 8006c60:	603b      	str	r3, [r7, #0]
	while(*str) {
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	781b      	ldrb	r3, [r3, #0]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1cd      	bne.n	8006c06 <ST7735_WriteStringNSS+0x30>
 8006c6a:	e000      	b.n	8006c6e <ST7735_WriteStringNSS+0x98>
				break;
 8006c6c:	bf00      	nop
	}
	if(NSS == 0){
 8006c6e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d102      	bne.n	8006c7c <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 8006c76:	f7ff fd8f 	bl	8006798 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 8006c7a:	e005      	b.n	8006c88 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 8006c7c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006c80:	2b01      	cmp	r3, #1
 8006c82:	d101      	bne.n	8006c88 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 8006c84:	f7ff fda0 	bl	80067c8 <ST7735_Unselect1>
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c92:	b002      	add	sp, #8
 8006c94:	4770      	bx	lr
	...

08006c98 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006c98:	b590      	push	{r4, r7, lr}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	4604      	mov	r4, r0
 8006ca0:	4608      	mov	r0, r1
 8006ca2:	4611      	mov	r1, r2
 8006ca4:	461a      	mov	r2, r3
 8006ca6:	4623      	mov	r3, r4
 8006ca8:	80fb      	strh	r3, [r7, #6]
 8006caa:	4603      	mov	r3, r0
 8006cac:	80bb      	strh	r3, [r7, #4]
 8006cae:	460b      	mov	r3, r1
 8006cb0:	807b      	strh	r3, [r7, #2]
 8006cb2:	4613      	mov	r3, r2
 8006cb4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006cb6:	88fb      	ldrh	r3, [r7, #6]
 8006cb8:	2b7f      	cmp	r3, #127	; 0x7f
 8006cba:	d858      	bhi.n	8006d6e <ST7735_FillRectangle+0xd6>
 8006cbc:	88bb      	ldrh	r3, [r7, #4]
 8006cbe:	2b7f      	cmp	r3, #127	; 0x7f
 8006cc0:	d855      	bhi.n	8006d6e <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006cc2:	88fa      	ldrh	r2, [r7, #6]
 8006cc4:	887b      	ldrh	r3, [r7, #2]
 8006cc6:	4413      	add	r3, r2
 8006cc8:	2b80      	cmp	r3, #128	; 0x80
 8006cca:	dd03      	ble.n	8006cd4 <ST7735_FillRectangle+0x3c>
 8006ccc:	88fb      	ldrh	r3, [r7, #6]
 8006cce:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006cd2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006cd4:	88ba      	ldrh	r2, [r7, #4]
 8006cd6:	883b      	ldrh	r3, [r7, #0]
 8006cd8:	4413      	add	r3, r2
 8006cda:	2b80      	cmp	r3, #128	; 0x80
 8006cdc:	dd03      	ble.n	8006ce6 <ST7735_FillRectangle+0x4e>
 8006cde:	88bb      	ldrh	r3, [r7, #4]
 8006ce0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006ce4:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 8006ce6:	f7ff fd4b 	bl	8006780 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006cea:	88fb      	ldrh	r3, [r7, #6]
 8006cec:	b2d8      	uxtb	r0, r3
 8006cee:	88bb      	ldrh	r3, [r7, #4]
 8006cf0:	b2d9      	uxtb	r1, r3
 8006cf2:	88fb      	ldrh	r3, [r7, #6]
 8006cf4:	b2da      	uxtb	r2, r3
 8006cf6:	887b      	ldrh	r3, [r7, #2]
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	4413      	add	r3, r2
 8006cfc:	b2db      	uxtb	r3, r3
 8006cfe:	3b01      	subs	r3, #1
 8006d00:	b2dc      	uxtb	r4, r3
 8006d02:	88bb      	ldrh	r3, [r7, #4]
 8006d04:	b2da      	uxtb	r2, r3
 8006d06:	883b      	ldrh	r3, [r7, #0]
 8006d08:	b2db      	uxtb	r3, r3
 8006d0a:	4413      	add	r3, r2
 8006d0c:	b2db      	uxtb	r3, r3
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	4622      	mov	r2, r4
 8006d14:	f7ff fdf9 	bl	800690a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006d18:	8c3b      	ldrh	r3, [r7, #32]
 8006d1a:	0a1b      	lsrs	r3, r3, #8
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	b2db      	uxtb	r3, r3
 8006d20:	733b      	strb	r3, [r7, #12]
 8006d22:	8c3b      	ldrh	r3, [r7, #32]
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006d2e:	4812      	ldr	r0, [pc, #72]	; (8006d78 <ST7735_FillRectangle+0xe0>)
 8006d30:	f003 fe98 	bl	800aa64 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006d34:	883b      	ldrh	r3, [r7, #0]
 8006d36:	80bb      	strh	r3, [r7, #4]
 8006d38:	e013      	b.n	8006d62 <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8006d3a:	887b      	ldrh	r3, [r7, #2]
 8006d3c:	80fb      	strh	r3, [r7, #6]
 8006d3e:	e00a      	b.n	8006d56 <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006d40:	f107 010c 	add.w	r1, r7, #12
 8006d44:	f04f 33ff 	mov.w	r3, #4294967295
 8006d48:	2202      	movs	r2, #2
 8006d4a:	480c      	ldr	r0, [pc, #48]	; (8006d7c <ST7735_FillRectangle+0xe4>)
 8006d4c:	f006 fcc6 	bl	800d6dc <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006d50:	88fb      	ldrh	r3, [r7, #6]
 8006d52:	3b01      	subs	r3, #1
 8006d54:	80fb      	strh	r3, [r7, #6]
 8006d56:	88fb      	ldrh	r3, [r7, #6]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1f1      	bne.n	8006d40 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8006d5c:	88bb      	ldrh	r3, [r7, #4]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	80bb      	strh	r3, [r7, #4]
 8006d62:	88bb      	ldrh	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d1e8      	bne.n	8006d3a <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8006d68:	f7ff fd16 	bl	8006798 <ST7735_Unselect>
 8006d6c:	e000      	b.n	8006d70 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006d6e:	bf00      	nop
}
 8006d70:	3714      	adds	r7, #20
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd90      	pop	{r4, r7, pc}
 8006d76:	bf00      	nop
 8006d78:	58021800 	.word	0x58021800
 8006d7c:	24000260 	.word	0x24000260

08006d80 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8006d80:	b590      	push	{r4, r7, lr}
 8006d82:	b085      	sub	sp, #20
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	4604      	mov	r4, r0
 8006d88:	4608      	mov	r0, r1
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4623      	mov	r3, r4
 8006d90:	80fb      	strh	r3, [r7, #6]
 8006d92:	4603      	mov	r3, r0
 8006d94:	80bb      	strh	r3, [r7, #4]
 8006d96:	460b      	mov	r3, r1
 8006d98:	807b      	strh	r3, [r7, #2]
 8006d9a:	4613      	mov	r3, r2
 8006d9c:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006d9e:	88fb      	ldrh	r3, [r7, #6]
 8006da0:	2b7f      	cmp	r3, #127	; 0x7f
 8006da2:	d858      	bhi.n	8006e56 <ST7735_FillRectangle1+0xd6>
 8006da4:	88bb      	ldrh	r3, [r7, #4]
 8006da6:	2b7f      	cmp	r3, #127	; 0x7f
 8006da8:	d855      	bhi.n	8006e56 <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006daa:	88fa      	ldrh	r2, [r7, #6]
 8006dac:	887b      	ldrh	r3, [r7, #2]
 8006dae:	4413      	add	r3, r2
 8006db0:	2b80      	cmp	r3, #128	; 0x80
 8006db2:	dd03      	ble.n	8006dbc <ST7735_FillRectangle1+0x3c>
 8006db4:	88fb      	ldrh	r3, [r7, #6]
 8006db6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006dba:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006dbc:	88ba      	ldrh	r2, [r7, #4]
 8006dbe:	883b      	ldrh	r3, [r7, #0]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	2b80      	cmp	r3, #128	; 0x80
 8006dc4:	dd03      	ble.n	8006dce <ST7735_FillRectangle1+0x4e>
 8006dc6:	88bb      	ldrh	r3, [r7, #4]
 8006dc8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006dcc:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 8006dce:	f7ff fcef 	bl	80067b0 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006dd2:	88fb      	ldrh	r3, [r7, #6]
 8006dd4:	b2d8      	uxtb	r0, r3
 8006dd6:	88bb      	ldrh	r3, [r7, #4]
 8006dd8:	b2d9      	uxtb	r1, r3
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	887b      	ldrh	r3, [r7, #2]
 8006de0:	b2db      	uxtb	r3, r3
 8006de2:	4413      	add	r3, r2
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	3b01      	subs	r3, #1
 8006de8:	b2dc      	uxtb	r4, r3
 8006dea:	88bb      	ldrh	r3, [r7, #4]
 8006dec:	b2da      	uxtb	r2, r3
 8006dee:	883b      	ldrh	r3, [r7, #0]
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	4413      	add	r3, r2
 8006df4:	b2db      	uxtb	r3, r3
 8006df6:	3b01      	subs	r3, #1
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	f7ff fd85 	bl	800690a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006e00:	8c3b      	ldrh	r3, [r7, #32]
 8006e02:	0a1b      	lsrs	r3, r3, #8
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	b2db      	uxtb	r3, r3
 8006e08:	733b      	strb	r3, [r7, #12]
 8006e0a:	8c3b      	ldrh	r3, [r7, #32]
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006e10:	2201      	movs	r2, #1
 8006e12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006e16:	4812      	ldr	r0, [pc, #72]	; (8006e60 <ST7735_FillRectangle1+0xe0>)
 8006e18:	f003 fe24 	bl	800aa64 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006e1c:	883b      	ldrh	r3, [r7, #0]
 8006e1e:	80bb      	strh	r3, [r7, #4]
 8006e20:	e013      	b.n	8006e4a <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 8006e22:	887b      	ldrh	r3, [r7, #2]
 8006e24:	80fb      	strh	r3, [r7, #6]
 8006e26:	e00a      	b.n	8006e3e <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006e28:	f107 010c 	add.w	r1, r7, #12
 8006e2c:	f04f 33ff 	mov.w	r3, #4294967295
 8006e30:	2202      	movs	r2, #2
 8006e32:	480c      	ldr	r0, [pc, #48]	; (8006e64 <ST7735_FillRectangle1+0xe4>)
 8006e34:	f006 fc52 	bl	800d6dc <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006e38:	88fb      	ldrh	r3, [r7, #6]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	80fb      	strh	r3, [r7, #6]
 8006e3e:	88fb      	ldrh	r3, [r7, #6]
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d1f1      	bne.n	8006e28 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 8006e44:	88bb      	ldrh	r3, [r7, #4]
 8006e46:	3b01      	subs	r3, #1
 8006e48:	80bb      	strh	r3, [r7, #4]
 8006e4a:	88bb      	ldrh	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d1e8      	bne.n	8006e22 <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8006e50:	f7ff fcba 	bl	80067c8 <ST7735_Unselect1>
 8006e54:	e000      	b.n	8006e58 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006e56:	bf00      	nop
}
 8006e58:	3714      	adds	r7, #20
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd90      	pop	{r4, r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	58021800 	.word	0x58021800
 8006e64:	24000260 	.word	0x24000260

08006e68 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8006e68:	b590      	push	{r4, r7, lr}
 8006e6a:	b085      	sub	sp, #20
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	4604      	mov	r4, r0
 8006e70:	4608      	mov	r0, r1
 8006e72:	4611      	mov	r1, r2
 8006e74:	461a      	mov	r2, r3
 8006e76:	4623      	mov	r3, r4
 8006e78:	80fb      	strh	r3, [r7, #6]
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	80bb      	strh	r3, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	807b      	strh	r3, [r7, #2]
 8006e82:	4613      	mov	r3, r2
 8006e84:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006e86:	88fb      	ldrh	r3, [r7, #6]
 8006e88:	2b7f      	cmp	r3, #127	; 0x7f
 8006e8a:	d86e      	bhi.n	8006f6a <ST7735_FillRectangleNSS+0x102>
 8006e8c:	88bb      	ldrh	r3, [r7, #4]
 8006e8e:	2b7f      	cmp	r3, #127	; 0x7f
 8006e90:	d86b      	bhi.n	8006f6a <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8006e92:	88fa      	ldrh	r2, [r7, #6]
 8006e94:	887b      	ldrh	r3, [r7, #2]
 8006e96:	4413      	add	r3, r2
 8006e98:	2b80      	cmp	r3, #128	; 0x80
 8006e9a:	dd03      	ble.n	8006ea4 <ST7735_FillRectangleNSS+0x3c>
 8006e9c:	88fb      	ldrh	r3, [r7, #6]
 8006e9e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006ea2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8006ea4:	88ba      	ldrh	r2, [r7, #4]
 8006ea6:	883b      	ldrh	r3, [r7, #0]
 8006ea8:	4413      	add	r3, r2
 8006eaa:	2b80      	cmp	r3, #128	; 0x80
 8006eac:	dd03      	ble.n	8006eb6 <ST7735_FillRectangleNSS+0x4e>
 8006eae:	88bb      	ldrh	r3, [r7, #4]
 8006eb0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8006eb4:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 8006eb6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d102      	bne.n	8006ec4 <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 8006ebe:	f7ff fc5f 	bl	8006780 <ST7735_Select>
 8006ec2:	e005      	b.n	8006ed0 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 8006ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 8006ecc:	f7ff fc70 	bl	80067b0 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8006ed0:	88fb      	ldrh	r3, [r7, #6]
 8006ed2:	b2d8      	uxtb	r0, r3
 8006ed4:	88bb      	ldrh	r3, [r7, #4]
 8006ed6:	b2d9      	uxtb	r1, r3
 8006ed8:	88fb      	ldrh	r3, [r7, #6]
 8006eda:	b2da      	uxtb	r2, r3
 8006edc:	887b      	ldrh	r3, [r7, #2]
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	4413      	add	r3, r2
 8006ee2:	b2db      	uxtb	r3, r3
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	b2dc      	uxtb	r4, r3
 8006ee8:	88bb      	ldrh	r3, [r7, #4]
 8006eea:	b2da      	uxtb	r2, r3
 8006eec:	883b      	ldrh	r3, [r7, #0]
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	4413      	add	r3, r2
 8006ef2:	b2db      	uxtb	r3, r3
 8006ef4:	3b01      	subs	r3, #1
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	4622      	mov	r2, r4
 8006efa:	f7ff fd06 	bl	800690a <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8006efe:	8c3b      	ldrh	r3, [r7, #32]
 8006f00:	0a1b      	lsrs	r3, r3, #8
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	b2db      	uxtb	r3, r3
 8006f06:	733b      	strb	r3, [r7, #12]
 8006f08:	8c3b      	ldrh	r3, [r7, #32]
 8006f0a:	b2db      	uxtb	r3, r3
 8006f0c:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006f14:	4817      	ldr	r0, [pc, #92]	; (8006f74 <ST7735_FillRectangleNSS+0x10c>)
 8006f16:	f003 fda5 	bl	800aa64 <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8006f1a:	883b      	ldrh	r3, [r7, #0]
 8006f1c:	80bb      	strh	r3, [r7, #4]
 8006f1e:	e013      	b.n	8006f48 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8006f20:	887b      	ldrh	r3, [r7, #2]
 8006f22:	80fb      	strh	r3, [r7, #6]
 8006f24:	e00a      	b.n	8006f3c <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8006f26:	f107 010c 	add.w	r1, r7, #12
 8006f2a:	f04f 33ff 	mov.w	r3, #4294967295
 8006f2e:	2202      	movs	r2, #2
 8006f30:	4811      	ldr	r0, [pc, #68]	; (8006f78 <ST7735_FillRectangleNSS+0x110>)
 8006f32:	f006 fbd3 	bl	800d6dc <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	3b01      	subs	r3, #1
 8006f3a:	80fb      	strh	r3, [r7, #6]
 8006f3c:	88fb      	ldrh	r3, [r7, #6]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d1f1      	bne.n	8006f26 <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 8006f42:	88bb      	ldrh	r3, [r7, #4]
 8006f44:	3b01      	subs	r3, #1
 8006f46:	80bb      	strh	r3, [r7, #4]
 8006f48:	88bb      	ldrh	r3, [r7, #4]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d1e8      	bne.n	8006f20 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8006f4e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d102      	bne.n	8006f5c <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 8006f56:	f7ff fc1f 	bl	8006798 <ST7735_Unselect>
 8006f5a:	e007      	b.n	8006f6c <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8006f5c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d103      	bne.n	8006f6c <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 8006f64:	f7ff fc30 	bl	80067c8 <ST7735_Unselect1>
 8006f68:	e000      	b.n	8006f6c <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8006f6a:	bf00      	nop
	}
}
 8006f6c:	3714      	adds	r7, #20
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd90      	pop	{r4, r7, pc}
 8006f72:	bf00      	nop
 8006f74:	58021800 	.word	0x58021800
 8006f78:	24000260 	.word	0x24000260

08006f7c <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b084      	sub	sp, #16
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	4603      	mov	r3, r0
 8006f84:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006f86:	88fb      	ldrh	r3, [r7, #6]
 8006f88:	9300      	str	r3, [sp, #0]
 8006f8a:	2380      	movs	r3, #128	; 0x80
 8006f8c:	2280      	movs	r2, #128	; 0x80
 8006f8e:	2100      	movs	r1, #0
 8006f90:	2000      	movs	r0, #0
 8006f92:	f7ff fe81 	bl	8006c98 <ST7735_FillRectangle>
}
 8006f96:	bf00      	nop
 8006f98:	3708      	adds	r7, #8
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	bd80      	pop	{r7, pc}

08006f9e <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 8006f9e:	b580      	push	{r7, lr}
 8006fa0:	b084      	sub	sp, #16
 8006fa2:	af02      	add	r7, sp, #8
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8006fa8:	88fb      	ldrh	r3, [r7, #6]
 8006faa:	9300      	str	r3, [sp, #0]
 8006fac:	2380      	movs	r3, #128	; 0x80
 8006fae:	2280      	movs	r2, #128	; 0x80
 8006fb0:	2100      	movs	r1, #0
 8006fb2:	2000      	movs	r0, #0
 8006fb4:	f7ff fee4 	bl	8006d80 <ST7735_FillRectangle1>
}
 8006fb8:	bf00      	nop
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006fc0:	b480      	push	{r7}
 8006fc2:	b083      	sub	sp, #12
 8006fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fc6:	4b0a      	ldr	r3, [pc, #40]	; (8006ff0 <HAL_MspInit+0x30>)
 8006fc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fcc:	4a08      	ldr	r2, [pc, #32]	; (8006ff0 <HAL_MspInit+0x30>)
 8006fce:	f043 0302 	orr.w	r3, r3, #2
 8006fd2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006fd6:	4b06      	ldr	r3, [pc, #24]	; (8006ff0 <HAL_MspInit+0x30>)
 8006fd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	607b      	str	r3, [r7, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006fe4:	bf00      	nop
 8006fe6:	370c      	adds	r7, #12
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fee:	4770      	bx	lr
 8006ff0:	58024400 	.word	0x58024400

08006ff4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b08e      	sub	sp, #56	; 0x38
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ffc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007000:	2200      	movs	r2, #0
 8007002:	601a      	str	r2, [r3, #0]
 8007004:	605a      	str	r2, [r3, #4]
 8007006:	609a      	str	r2, [r3, #8]
 8007008:	60da      	str	r2, [r3, #12]
 800700a:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	4a59      	ldr	r2, [pc, #356]	; (8007178 <HAL_ETH_MspInit+0x184>)
 8007012:	4293      	cmp	r3, r2
 8007014:	f040 80ab 	bne.w	800716e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8007018:	4b58      	ldr	r3, [pc, #352]	; (800717c <HAL_ETH_MspInit+0x188>)
 800701a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800701e:	4a57      	ldr	r2, [pc, #348]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007020:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007024:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007028:	4b54      	ldr	r3, [pc, #336]	; (800717c <HAL_ETH_MspInit+0x188>)
 800702a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800702e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007032:	623b      	str	r3, [r7, #32]
 8007034:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8007036:	4b51      	ldr	r3, [pc, #324]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007038:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800703c:	4a4f      	ldr	r2, [pc, #316]	; (800717c <HAL_ETH_MspInit+0x188>)
 800703e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007042:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007046:	4b4d      	ldr	r3, [pc, #308]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007048:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800704c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8007054:	4b49      	ldr	r3, [pc, #292]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007056:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800705a:	4a48      	ldr	r2, [pc, #288]	; (800717c <HAL_ETH_MspInit+0x188>)
 800705c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007060:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8007064:	4b45      	ldr	r3, [pc, #276]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007066:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800706a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800706e:	61bb      	str	r3, [r7, #24]
 8007070:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007072:	4b42      	ldr	r3, [pc, #264]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007078:	4a40      	ldr	r2, [pc, #256]	; (800717c <HAL_ETH_MspInit+0x188>)
 800707a:	f043 0304 	orr.w	r3, r3, #4
 800707e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007082:	4b3e      	ldr	r3, [pc, #248]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007088:	f003 0304 	and.w	r3, r3, #4
 800708c:	617b      	str	r3, [r7, #20]
 800708e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007090:	4b3a      	ldr	r3, [pc, #232]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007096:	4a39      	ldr	r2, [pc, #228]	; (800717c <HAL_ETH_MspInit+0x188>)
 8007098:	f043 0301 	orr.w	r3, r3, #1
 800709c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070a0:	4b36      	ldr	r3, [pc, #216]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070a6:	f003 0301 	and.w	r3, r3, #1
 80070aa:	613b      	str	r3, [r7, #16]
 80070ac:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80070ae:	4b33      	ldr	r3, [pc, #204]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070b4:	4a31      	ldr	r2, [pc, #196]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070b6:	f043 0302 	orr.w	r3, r3, #2
 80070ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070be:	4b2f      	ldr	r3, [pc, #188]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070c4:	f003 0302 	and.w	r3, r3, #2
 80070c8:	60fb      	str	r3, [r7, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80070cc:	4b2b      	ldr	r3, [pc, #172]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070d2:	4a2a      	ldr	r2, [pc, #168]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80070dc:	4b27      	ldr	r3, [pc, #156]	; (800717c <HAL_ETH_MspInit+0x188>)
 80070de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80070e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070e6:	60bb      	str	r3, [r7, #8]
 80070e8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80070ea:	2332      	movs	r3, #50	; 0x32
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070ee:	2302      	movs	r3, #2
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f2:	2300      	movs	r3, #0
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070f6:	2300      	movs	r3, #0
 80070f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80070fa:	230b      	movs	r3, #11
 80070fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80070fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007102:	4619      	mov	r1, r3
 8007104:	481e      	ldr	r0, [pc, #120]	; (8007180 <HAL_ETH_MspInit+0x18c>)
 8007106:	f003 fae5 	bl	800a6d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800710a:	2386      	movs	r3, #134	; 0x86
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710e:	2302      	movs	r3, #2
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007112:	2300      	movs	r3, #0
 8007114:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007116:	2300      	movs	r3, #0
 8007118:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800711a:	230b      	movs	r3, #11
 800711c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800711e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007122:	4619      	mov	r1, r3
 8007124:	4817      	ldr	r0, [pc, #92]	; (8007184 <HAL_ETH_MspInit+0x190>)
 8007126:	f003 fad5 	bl	800a6d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800712a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800712e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007130:	2302      	movs	r3, #2
 8007132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007134:	2300      	movs	r3, #0
 8007136:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007138:	2300      	movs	r3, #0
 800713a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800713c:	230b      	movs	r3, #11
 800713e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007140:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007144:	4619      	mov	r1, r3
 8007146:	4810      	ldr	r0, [pc, #64]	; (8007188 <HAL_ETH_MspInit+0x194>)
 8007148:	f003 fac4 	bl	800a6d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800714c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8007150:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007152:	2302      	movs	r3, #2
 8007154:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007156:	2300      	movs	r3, #0
 8007158:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800715a:	2300      	movs	r3, #0
 800715c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800715e:	230b      	movs	r3, #11
 8007160:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007162:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007166:	4619      	mov	r1, r3
 8007168:	4808      	ldr	r0, [pc, #32]	; (800718c <HAL_ETH_MspInit+0x198>)
 800716a:	f003 fab3 	bl	800a6d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800716e:	bf00      	nop
 8007170:	3738      	adds	r7, #56	; 0x38
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	40028000 	.word	0x40028000
 800717c:	58024400 	.word	0x58024400
 8007180:	58020800 	.word	0x58020800
 8007184:	58020000 	.word	0x58020000
 8007188:	58020400 	.word	0x58020400
 800718c:	58021800 	.word	0x58021800

08007190 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b08a      	sub	sp, #40	; 0x28
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007198:	f107 0314 	add.w	r3, r7, #20
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]
 80071a0:	605a      	str	r2, [r3, #4]
 80071a2:	609a      	str	r2, [r3, #8]
 80071a4:	60da      	str	r2, [r3, #12]
 80071a6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a2a      	ldr	r2, [pc, #168]	; (8007258 <HAL_SPI_MspInit+0xc8>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d14d      	bne.n	800724e <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80071b2:	4b2a      	ldr	r3, [pc, #168]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071b4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071b8:	4a28      	ldr	r2, [pc, #160]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80071be:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80071c2:	4b26      	ldr	r3, [pc, #152]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80071c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80071cc:	613b      	str	r3, [r7, #16]
 80071ce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80071d0:	4b22      	ldr	r3, [pc, #136]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071d6:	4a21      	ldr	r2, [pc, #132]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071d8:	f043 0302 	orr.w	r3, r3, #2
 80071dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071e0:	4b1e      	ldr	r3, [pc, #120]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	60fb      	str	r3, [r7, #12]
 80071ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80071ee:	4b1b      	ldr	r3, [pc, #108]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80071f4:	4a19      	ldr	r2, [pc, #100]	; (800725c <HAL_SPI_MspInit+0xcc>)
 80071f6:	f043 0304 	orr.w	r3, r3, #4
 80071fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80071fe:	4b17      	ldr	r3, [pc, #92]	; (800725c <HAL_SPI_MspInit+0xcc>)
 8007200:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007204:	f003 0304 	and.w	r3, r3, #4
 8007208:	60bb      	str	r3, [r7, #8]
 800720a:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800720c:	2304      	movs	r3, #4
 800720e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007210:	2302      	movs	r3, #2
 8007212:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007214:	2302      	movs	r3, #2
 8007216:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007218:	2300      	movs	r3, #0
 800721a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 800721c:	2307      	movs	r3, #7
 800721e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007220:	f107 0314 	add.w	r3, r7, #20
 8007224:	4619      	mov	r1, r3
 8007226:	480e      	ldr	r0, [pc, #56]	; (8007260 <HAL_SPI_MspInit+0xd0>)
 8007228:	f003 fa54 	bl	800a6d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800722c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007232:	2302      	movs	r3, #2
 8007234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8007236:	2302      	movs	r3, #2
 8007238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800723a:	2300      	movs	r3, #0
 800723c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800723e:	2306      	movs	r3, #6
 8007240:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007242:	f107 0314 	add.w	r3, r7, #20
 8007246:	4619      	mov	r1, r3
 8007248:	4806      	ldr	r0, [pc, #24]	; (8007264 <HAL_SPI_MspInit+0xd4>)
 800724a:	f003 fa43 	bl	800a6d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800724e:	bf00      	nop
 8007250:	3728      	adds	r7, #40	; 0x28
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	40003c00 	.word	0x40003c00
 800725c:	58024400 	.word	0x58024400
 8007260:	58020400 	.word	0x58020400
 8007264:	58020800 	.word	0x58020800

08007268 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b084      	sub	sp, #16
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a0e      	ldr	r2, [pc, #56]	; (80072b0 <HAL_TIM_Base_MspInit+0x48>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d116      	bne.n	80072a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800727a:	4b0e      	ldr	r3, [pc, #56]	; (80072b4 <HAL_TIM_Base_MspInit+0x4c>)
 800727c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007280:	4a0c      	ldr	r2, [pc, #48]	; (80072b4 <HAL_TIM_Base_MspInit+0x4c>)
 8007282:	f043 0320 	orr.w	r3, r3, #32
 8007286:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800728a:	4b0a      	ldr	r3, [pc, #40]	; (80072b4 <HAL_TIM_Base_MspInit+0x4c>)
 800728c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007290:	f003 0320 	and.w	r3, r3, #32
 8007294:	60fb      	str	r3, [r7, #12]
 8007296:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8007298:	2200      	movs	r2, #0
 800729a:	2100      	movs	r1, #0
 800729c:	2037      	movs	r0, #55	; 0x37
 800729e:	f000 fb9a 	bl	80079d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80072a2:	2037      	movs	r0, #55	; 0x37
 80072a4:	f000 fbb1 	bl	8007a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80072a8:	bf00      	nop
 80072aa:	3710      	adds	r7, #16
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}
 80072b0:	40001400 	.word	0x40001400
 80072b4:	58024400 	.word	0x58024400

080072b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b0b8      	sub	sp, #224	; 0xe0
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072c0:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	609a      	str	r2, [r3, #8]
 80072cc:	60da      	str	r2, [r3, #12]
 80072ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80072d0:	f107 0310 	add.w	r3, r7, #16
 80072d4:	22bc      	movs	r2, #188	; 0xbc
 80072d6:	2100      	movs	r1, #0
 80072d8:	4618      	mov	r0, r3
 80072da:	f009 f88d 	bl	80103f8 <memset>
  if(huart->Instance==USART3)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	4a57      	ldr	r2, [pc, #348]	; (8007440 <HAL_UART_MspInit+0x188>)
 80072e4:	4293      	cmp	r3, r2
 80072e6:	f040 80a6 	bne.w	8007436 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80072ea:	2302      	movs	r3, #2
 80072ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80072ee:	2300      	movs	r3, #0
 80072f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80072f4:	f107 0310 	add.w	r3, r7, #16
 80072f8:	4618      	mov	r0, r3
 80072fa:	f004 fd81 	bl	800be00 <HAL_RCCEx_PeriphCLKConfig>
 80072fe:	4603      	mov	r3, r0
 8007300:	2b00      	cmp	r3, #0
 8007302:	d001      	beq.n	8007308 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8007304:	f7ff fa36 	bl	8006774 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8007308:	4b4e      	ldr	r3, [pc, #312]	; (8007444 <HAL_UART_MspInit+0x18c>)
 800730a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800730e:	4a4d      	ldr	r2, [pc, #308]	; (8007444 <HAL_UART_MspInit+0x18c>)
 8007310:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007314:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007318:	4b4a      	ldr	r3, [pc, #296]	; (8007444 <HAL_UART_MspInit+0x18c>)
 800731a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800731e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007322:	60fb      	str	r3, [r7, #12]
 8007324:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007326:	4b47      	ldr	r3, [pc, #284]	; (8007444 <HAL_UART_MspInit+0x18c>)
 8007328:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800732c:	4a45      	ldr	r2, [pc, #276]	; (8007444 <HAL_UART_MspInit+0x18c>)
 800732e:	f043 0308 	orr.w	r3, r3, #8
 8007332:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007336:	4b43      	ldr	r3, [pc, #268]	; (8007444 <HAL_UART_MspInit+0x18c>)
 8007338:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800733c:	f003 0308 	and.w	r3, r3, #8
 8007340:	60bb      	str	r3, [r7, #8]
 8007342:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8007344:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007348:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800734c:	2302      	movs	r3, #2
 800734e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007352:	2300      	movs	r3, #0
 8007354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007358:	2300      	movs	r3, #0
 800735a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800735e:	2307      	movs	r3, #7
 8007360:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007364:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8007368:	4619      	mov	r1, r3
 800736a:	4837      	ldr	r0, [pc, #220]	; (8007448 <HAL_UART_MspInit+0x190>)
 800736c:	f003 f9b2 	bl	800a6d4 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8007370:	4b36      	ldr	r3, [pc, #216]	; (800744c <HAL_UART_MspInit+0x194>)
 8007372:	4a37      	ldr	r2, [pc, #220]	; (8007450 <HAL_UART_MspInit+0x198>)
 8007374:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8007376:	4b35      	ldr	r3, [pc, #212]	; (800744c <HAL_UART_MspInit+0x194>)
 8007378:	222d      	movs	r2, #45	; 0x2d
 800737a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800737c:	4b33      	ldr	r3, [pc, #204]	; (800744c <HAL_UART_MspInit+0x194>)
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007382:	4b32      	ldr	r3, [pc, #200]	; (800744c <HAL_UART_MspInit+0x194>)
 8007384:	2200      	movs	r2, #0
 8007386:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007388:	4b30      	ldr	r3, [pc, #192]	; (800744c <HAL_UART_MspInit+0x194>)
 800738a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800738e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007390:	4b2e      	ldr	r3, [pc, #184]	; (800744c <HAL_UART_MspInit+0x194>)
 8007392:	2200      	movs	r2, #0
 8007394:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007396:	4b2d      	ldr	r3, [pc, #180]	; (800744c <HAL_UART_MspInit+0x194>)
 8007398:	2200      	movs	r2, #0
 800739a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800739c:	4b2b      	ldr	r3, [pc, #172]	; (800744c <HAL_UART_MspInit+0x194>)
 800739e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80073a2:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80073a4:	4b29      	ldr	r3, [pc, #164]	; (800744c <HAL_UART_MspInit+0x194>)
 80073a6:	2200      	movs	r2, #0
 80073a8:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80073aa:	4b28      	ldr	r3, [pc, #160]	; (800744c <HAL_UART_MspInit+0x194>)
 80073ac:	2200      	movs	r2, #0
 80073ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80073b0:	4826      	ldr	r0, [pc, #152]	; (800744c <HAL_UART_MspInit+0x194>)
 80073b2:	f000 fb45 	bl	8007a40 <HAL_DMA_Init>
 80073b6:	4603      	mov	r3, r0
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d001      	beq.n	80073c0 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 80073bc:	f7ff f9da 	bl	8006774 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4a22      	ldr	r2, [pc, #136]	; (800744c <HAL_UART_MspInit+0x194>)
 80073c4:	67da      	str	r2, [r3, #124]	; 0x7c
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <HAL_UART_MspInit+0x194>)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 80073cc:	4b21      	ldr	r3, [pc, #132]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073ce:	4a22      	ldr	r2, [pc, #136]	; (8007458 <HAL_UART_MspInit+0x1a0>)
 80073d0:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 80073d2:	4b20      	ldr	r3, [pc, #128]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073d4:	222e      	movs	r2, #46	; 0x2e
 80073d6:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80073d8:	4b1e      	ldr	r3, [pc, #120]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073da:	2240      	movs	r2, #64	; 0x40
 80073dc:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80073de:	4b1d      	ldr	r3, [pc, #116]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80073e4:	4b1b      	ldr	r3, [pc, #108]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80073ea:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80073ec:	4b19      	ldr	r3, [pc, #100]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80073f2:	4b18      	ldr	r3, [pc, #96]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073f4:	2200      	movs	r2, #0
 80073f6:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80073f8:	4b16      	ldr	r3, [pc, #88]	; (8007454 <HAL_UART_MspInit+0x19c>)
 80073fa:	2200      	movs	r2, #0
 80073fc:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80073fe:	4b15      	ldr	r3, [pc, #84]	; (8007454 <HAL_UART_MspInit+0x19c>)
 8007400:	2200      	movs	r2, #0
 8007402:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8007404:	4b13      	ldr	r3, [pc, #76]	; (8007454 <HAL_UART_MspInit+0x19c>)
 8007406:	2200      	movs	r2, #0
 8007408:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 800740a:	4812      	ldr	r0, [pc, #72]	; (8007454 <HAL_UART_MspInit+0x19c>)
 800740c:	f000 fb18 	bl	8007a40 <HAL_DMA_Init>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d001      	beq.n	800741a <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8007416:	f7ff f9ad 	bl	8006774 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a0d      	ldr	r2, [pc, #52]	; (8007454 <HAL_UART_MspInit+0x19c>)
 800741e:	679a      	str	r2, [r3, #120]	; 0x78
 8007420:	4a0c      	ldr	r2, [pc, #48]	; (8007454 <HAL_UART_MspInit+0x19c>)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8007426:	2200      	movs	r2, #0
 8007428:	2100      	movs	r1, #0
 800742a:	2027      	movs	r0, #39	; 0x27
 800742c:	f000 fad3 	bl	80079d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8007430:	2027      	movs	r0, #39	; 0x27
 8007432:	f000 faea 	bl	8007a0a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8007436:	bf00      	nop
 8007438:	37e0      	adds	r7, #224	; 0xe0
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}
 800743e:	bf00      	nop
 8007440:	40004800 	.word	0x40004800
 8007444:	58024400 	.word	0x58024400
 8007448:	58020c00 	.word	0x58020c00
 800744c:	240003c4 	.word	0x240003c4
 8007450:	40020028 	.word	0x40020028
 8007454:	2400043c 	.word	0x2400043c
 8007458:	40020070 	.word	0x40020070

0800745c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b08a      	sub	sp, #40	; 0x28
 8007460:	af00      	add	r7, sp, #0
 8007462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007464:	f107 0314 	add.w	r3, r7, #20
 8007468:	2200      	movs	r2, #0
 800746a:	601a      	str	r2, [r3, #0]
 800746c:	605a      	str	r2, [r3, #4]
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	60da      	str	r2, [r3, #12]
 8007472:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <HAL_PCD_MspInit+0xa8>)
 800747a:	4293      	cmp	r3, r2
 800747c:	d13d      	bne.n	80074fa <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800747e:	f003 fcf5 	bl	800ae6c <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007482:	4b21      	ldr	r3, [pc, #132]	; (8007508 <HAL_PCD_MspInit+0xac>)
 8007484:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007488:	4a1f      	ldr	r2, [pc, #124]	; (8007508 <HAL_PCD_MspInit+0xac>)
 800748a:	f043 0301 	orr.w	r3, r3, #1
 800748e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007492:	4b1d      	ldr	r3, [pc, #116]	; (8007508 <HAL_PCD_MspInit+0xac>)
 8007494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007498:	f003 0301 	and.w	r3, r3, #1
 800749c:	613b      	str	r3, [r7, #16]
 800749e:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80074a0:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80074a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074a6:	2302      	movs	r3, #2
 80074a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074aa:	2300      	movs	r3, #0
 80074ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80074ae:	2300      	movs	r3, #0
 80074b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80074b2:	230a      	movs	r3, #10
 80074b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074b6:	f107 0314 	add.w	r3, r7, #20
 80074ba:	4619      	mov	r1, r3
 80074bc:	4813      	ldr	r0, [pc, #76]	; (800750c <HAL_PCD_MspInit+0xb0>)
 80074be:	f003 f909 	bl	800a6d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80074c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80074d0:	f107 0314 	add.w	r3, r7, #20
 80074d4:	4619      	mov	r1, r3
 80074d6:	480d      	ldr	r0, [pc, #52]	; (800750c <HAL_PCD_MspInit+0xb0>)
 80074d8:	f003 f8fc 	bl	800a6d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <HAL_PCD_MspInit+0xac>)
 80074de:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074e2:	4a09      	ldr	r2, [pc, #36]	; (8007508 <HAL_PCD_MspInit+0xac>)
 80074e4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80074e8:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80074ec:	4b06      	ldr	r3, [pc, #24]	; (8007508 <HAL_PCD_MspInit+0xac>)
 80074ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80074f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80074f6:	60fb      	str	r3, [r7, #12]
 80074f8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80074fa:	bf00      	nop
 80074fc:	3728      	adds	r7, #40	; 0x28
 80074fe:	46bd      	mov	sp, r7
 8007500:	bd80      	pop	{r7, pc}
 8007502:	bf00      	nop
 8007504:	40080000 	.word	0x40080000
 8007508:	58024400 	.word	0x58024400
 800750c:	58020000 	.word	0x58020000

08007510 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007510:	b480      	push	{r7}
 8007512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007514:	e7fe      	b.n	8007514 <NMI_Handler+0x4>

08007516 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007516:	b480      	push	{r7}
 8007518:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800751a:	e7fe      	b.n	800751a <HardFault_Handler+0x4>

0800751c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800751c:	b480      	push	{r7}
 800751e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007520:	e7fe      	b.n	8007520 <MemManage_Handler+0x4>

08007522 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007522:	b480      	push	{r7}
 8007524:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007526:	e7fe      	b.n	8007526 <BusFault_Handler+0x4>

08007528 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007528:	b480      	push	{r7}
 800752a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800752c:	e7fe      	b.n	800752c <UsageFault_Handler+0x4>

0800752e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800752e:	b480      	push	{r7}
 8007530:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007532:	bf00      	nop
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800753c:	b480      	push	{r7}
 800753e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007540:	bf00      	nop
 8007542:	46bd      	mov	sp, r7
 8007544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007548:	4770      	bx	lr

0800754a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800754a:	b480      	push	{r7}
 800754c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800754e:	bf00      	nop
 8007550:	46bd      	mov	sp, r7
 8007552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007556:	4770      	bx	lr

08007558 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800755c:	f000 f8fc 	bl	8007758 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007560:	bf00      	nop
 8007562:	bd80      	pop	{r7, pc}

08007564 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8007568:	4802      	ldr	r0, [pc, #8]	; (8007574 <DMA1_Stream1_IRQHandler+0x10>)
 800756a:	f001 fb29 	bl	8008bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800756e:	bf00      	nop
 8007570:	bd80      	pop	{r7, pc}
 8007572:	bf00      	nop
 8007574:	240003c4 	.word	0x240003c4

08007578 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8007578:	b580      	push	{r7, lr}
 800757a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 800757c:	4802      	ldr	r0, [pc, #8]	; (8007588 <DMA1_Stream4_IRQHandler+0x10>)
 800757e:	f001 fb1f 	bl	8008bc0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8007582:	bf00      	nop
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	2400043c 	.word	0x2400043c

0800758c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800758c:	b580      	push	{r7, lr}
 800758e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8007590:	4802      	ldr	r0, [pc, #8]	; (800759c <USART3_IRQHandler+0x10>)
 8007592:	f006 ff59 	bl	800e448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	24000334 	.word	0x24000334

080075a0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80075a4:	4802      	ldr	r0, [pc, #8]	; (80075b0 <TIM7_IRQHandler+0x10>)
 80075a6:	f006 fc72 	bl	800de8e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80075aa:	bf00      	nop
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	240002e8 	.word	0x240002e8

080075b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075b4:	b580      	push	{r7, lr}
 80075b6:	b086      	sub	sp, #24
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075bc:	4a14      	ldr	r2, [pc, #80]	; (8007610 <_sbrk+0x5c>)
 80075be:	4b15      	ldr	r3, [pc, #84]	; (8007614 <_sbrk+0x60>)
 80075c0:	1ad3      	subs	r3, r2, r3
 80075c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80075c4:	697b      	ldr	r3, [r7, #20]
 80075c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80075c8:	4b13      	ldr	r3, [pc, #76]	; (8007618 <_sbrk+0x64>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d102      	bne.n	80075d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80075d0:	4b11      	ldr	r3, [pc, #68]	; (8007618 <_sbrk+0x64>)
 80075d2:	4a12      	ldr	r2, [pc, #72]	; (800761c <_sbrk+0x68>)
 80075d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80075d6:	4b10      	ldr	r3, [pc, #64]	; (8007618 <_sbrk+0x64>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	693a      	ldr	r2, [r7, #16]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d207      	bcs.n	80075f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80075e4:	f008 fede 	bl	80103a4 <__errno>
 80075e8:	4603      	mov	r3, r0
 80075ea:	220c      	movs	r2, #12
 80075ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80075ee:	f04f 33ff 	mov.w	r3, #4294967295
 80075f2:	e009      	b.n	8007608 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80075f4:	4b08      	ldr	r3, [pc, #32]	; (8007618 <_sbrk+0x64>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80075fa:	4b07      	ldr	r3, [pc, #28]	; (8007618 <_sbrk+0x64>)
 80075fc:	681a      	ldr	r2, [r3, #0]
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4413      	add	r3, r2
 8007602:	4a05      	ldr	r2, [pc, #20]	; (8007618 <_sbrk+0x64>)
 8007604:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007606:	68fb      	ldr	r3, [r7, #12]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3718      	adds	r7, #24
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	24080000 	.word	0x24080000
 8007614:	00000400 	.word	0x00000400
 8007618:	24000eb0 	.word	0x24000eb0
 800761c:	24000ec8 	.word	0x24000ec8

08007620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8007620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007658 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8007624:	f7fe fc0e 	bl	8005e44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007628:	480c      	ldr	r0, [pc, #48]	; (800765c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800762a:	490d      	ldr	r1, [pc, #52]	; (8007660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800762c:	4a0d      	ldr	r2, [pc, #52]	; (8007664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800762e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007630:	e002      	b.n	8007638 <LoopCopyDataInit>

08007632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007636:	3304      	adds	r3, #4

08007638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800763a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800763c:	d3f9      	bcc.n	8007632 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800763e:	4a0a      	ldr	r2, [pc, #40]	; (8007668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007640:	4c0a      	ldr	r4, [pc, #40]	; (800766c <LoopFillZerobss+0x22>)
  movs r3, #0
 8007642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007644:	e001      	b.n	800764a <LoopFillZerobss>

08007646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007648:	3204      	adds	r2, #4

0800764a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800764a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800764c:	d3fb      	bcc.n	8007646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800764e:	f008 feaf 	bl	80103b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8007652:	f7fe fc8d 	bl	8005f70 <main>
  bx  lr
 8007656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007658:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800765c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8007660:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8007664:	080126d4 	.word	0x080126d4
  ldr r2, =_sbss
 8007668:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 800766c:	24000ec8 	.word	0x24000ec8

08007670 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007670:	e7fe      	b.n	8007670 <ADC3_IRQHandler>
	...

08007674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007674:	b580      	push	{r7, lr}
 8007676:	b082      	sub	sp, #8
 8007678:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800767a:	2003      	movs	r0, #3
 800767c:	f000 f9a0 	bl	80079c0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007680:	f004 f9e8 	bl	800ba54 <HAL_RCC_GetSysClockFreq>
 8007684:	4602      	mov	r2, r0
 8007686:	4b15      	ldr	r3, [pc, #84]	; (80076dc <HAL_Init+0x68>)
 8007688:	699b      	ldr	r3, [r3, #24]
 800768a:	0a1b      	lsrs	r3, r3, #8
 800768c:	f003 030f 	and.w	r3, r3, #15
 8007690:	4913      	ldr	r1, [pc, #76]	; (80076e0 <HAL_Init+0x6c>)
 8007692:	5ccb      	ldrb	r3, [r1, r3]
 8007694:	f003 031f 	and.w	r3, r3, #31
 8007698:	fa22 f303 	lsr.w	r3, r2, r3
 800769c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800769e:	4b0f      	ldr	r3, [pc, #60]	; (80076dc <HAL_Init+0x68>)
 80076a0:	699b      	ldr	r3, [r3, #24]
 80076a2:	f003 030f 	and.w	r3, r3, #15
 80076a6:	4a0e      	ldr	r2, [pc, #56]	; (80076e0 <HAL_Init+0x6c>)
 80076a8:	5cd3      	ldrb	r3, [r2, r3]
 80076aa:	f003 031f 	and.w	r3, r3, #31
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	fa22 f303 	lsr.w	r3, r2, r3
 80076b4:	4a0b      	ldr	r2, [pc, #44]	; (80076e4 <HAL_Init+0x70>)
 80076b6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80076b8:	4a0b      	ldr	r2, [pc, #44]	; (80076e8 <HAL_Init+0x74>)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80076be:	2000      	movs	r0, #0
 80076c0:	f000 f814 	bl	80076ec <HAL_InitTick>
 80076c4:	4603      	mov	r3, r0
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d001      	beq.n	80076ce <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80076ca:	2301      	movs	r3, #1
 80076cc:	e002      	b.n	80076d4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80076ce:	f7ff fc77 	bl	8006fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80076d2:	2300      	movs	r3, #0
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3708      	adds	r7, #8
 80076d8:	46bd      	mov	sp, r7
 80076da:	bd80      	pop	{r7, pc}
 80076dc:	58024400 	.word	0x58024400
 80076e0:	08011110 	.word	0x08011110
 80076e4:	24000008 	.word	0x24000008
 80076e8:	24000004 	.word	0x24000004

080076ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <HAL_InitTick+0x60>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d101      	bne.n	8007700 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80076fc:	2301      	movs	r3, #1
 80076fe:	e021      	b.n	8007744 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007700:	4b13      	ldr	r3, [pc, #76]	; (8007750 <HAL_InitTick+0x64>)
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	4b11      	ldr	r3, [pc, #68]	; (800774c <HAL_InitTick+0x60>)
 8007706:	781b      	ldrb	r3, [r3, #0]
 8007708:	4619      	mov	r1, r3
 800770a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800770e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007712:	fbb2 f3f3 	udiv	r3, r2, r3
 8007716:	4618      	mov	r0, r3
 8007718:	f000 f985 	bl	8007a26 <HAL_SYSTICK_Config>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e00e      	b.n	8007744 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2b0f      	cmp	r3, #15
 800772a:	d80a      	bhi.n	8007742 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800772c:	2200      	movs	r2, #0
 800772e:	6879      	ldr	r1, [r7, #4]
 8007730:	f04f 30ff 	mov.w	r0, #4294967295
 8007734:	f000 f94f 	bl	80079d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007738:	4a06      	ldr	r2, [pc, #24]	; (8007754 <HAL_InitTick+0x68>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800773e:	2300      	movs	r3, #0
 8007740:	e000      	b.n	8007744 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007742:	2301      	movs	r3, #1
}
 8007744:	4618      	mov	r0, r3
 8007746:	3708      	adds	r7, #8
 8007748:	46bd      	mov	sp, r7
 800774a:	bd80      	pop	{r7, pc}
 800774c:	24000020 	.word	0x24000020
 8007750:	24000004 	.word	0x24000004
 8007754:	2400001c 	.word	0x2400001c

08007758 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007758:	b480      	push	{r7}
 800775a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800775c:	4b06      	ldr	r3, [pc, #24]	; (8007778 <HAL_IncTick+0x20>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	461a      	mov	r2, r3
 8007762:	4b06      	ldr	r3, [pc, #24]	; (800777c <HAL_IncTick+0x24>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	4413      	add	r3, r2
 8007768:	4a04      	ldr	r2, [pc, #16]	; (800777c <HAL_IncTick+0x24>)
 800776a:	6013      	str	r3, [r2, #0]
}
 800776c:	bf00      	nop
 800776e:	46bd      	mov	sp, r7
 8007770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007774:	4770      	bx	lr
 8007776:	bf00      	nop
 8007778:	24000020 	.word	0x24000020
 800777c:	24000eb4 	.word	0x24000eb4

08007780 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007780:	b480      	push	{r7}
 8007782:	af00      	add	r7, sp, #0
  return uwTick;
 8007784:	4b03      	ldr	r3, [pc, #12]	; (8007794 <HAL_GetTick+0x14>)
 8007786:	681b      	ldr	r3, [r3, #0]
}
 8007788:	4618      	mov	r0, r3
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	24000eb4 	.word	0x24000eb4

08007798 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077a0:	f7ff ffee 	bl	8007780 <HAL_GetTick>
 80077a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077b0:	d005      	beq.n	80077be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077b2:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <HAL_Delay+0x44>)
 80077b4:	781b      	ldrb	r3, [r3, #0]
 80077b6:	461a      	mov	r2, r3
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	4413      	add	r3, r2
 80077bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80077be:	bf00      	nop
 80077c0:	f7ff ffde 	bl	8007780 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	68bb      	ldr	r3, [r7, #8]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	68fa      	ldr	r2, [r7, #12]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d8f7      	bhi.n	80077c0 <HAL_Delay+0x28>
  {
  }
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	3710      	adds	r7, #16
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	24000020 	.word	0x24000020

080077e0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80077e0:	b480      	push	{r7}
 80077e2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80077e4:	4b03      	ldr	r3, [pc, #12]	; (80077f4 <HAL_GetREVID+0x14>)
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	0c1b      	lsrs	r3, r3, #16
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	46bd      	mov	sp, r7
 80077ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f2:	4770      	bx	lr
 80077f4:	5c001000 	.word	0x5c001000

080077f8 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80077f8:	b480      	push	{r7}
 80077fa:	b083      	sub	sp, #12
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8007800:	4b06      	ldr	r3, [pc, #24]	; (800781c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007808:	4904      	ldr	r1, [pc, #16]	; (800781c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	4313      	orrs	r3, r2
 800780e:	604b      	str	r3, [r1, #4]
}
 8007810:	bf00      	nop
 8007812:	370c      	adds	r7, #12
 8007814:	46bd      	mov	sp, r7
 8007816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800781a:	4770      	bx	lr
 800781c:	58000400 	.word	0x58000400

08007820 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007820:	b480      	push	{r7}
 8007822:	b085      	sub	sp, #20
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	f003 0307 	and.w	r3, r3, #7
 800782e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007830:	4b0b      	ldr	r3, [pc, #44]	; (8007860 <__NVIC_SetPriorityGrouping+0x40>)
 8007832:	68db      	ldr	r3, [r3, #12]
 8007834:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800783c:	4013      	ands	r3, r2
 800783e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007848:	4b06      	ldr	r3, [pc, #24]	; (8007864 <__NVIC_SetPriorityGrouping+0x44>)
 800784a:	4313      	orrs	r3, r2
 800784c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800784e:	4a04      	ldr	r2, [pc, #16]	; (8007860 <__NVIC_SetPriorityGrouping+0x40>)
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	60d3      	str	r3, [r2, #12]
}
 8007854:	bf00      	nop
 8007856:	3714      	adds	r7, #20
 8007858:	46bd      	mov	sp, r7
 800785a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785e:	4770      	bx	lr
 8007860:	e000ed00 	.word	0xe000ed00
 8007864:	05fa0000 	.word	0x05fa0000

08007868 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007868:	b480      	push	{r7}
 800786a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800786c:	4b04      	ldr	r3, [pc, #16]	; (8007880 <__NVIC_GetPriorityGrouping+0x18>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	0a1b      	lsrs	r3, r3, #8
 8007872:	f003 0307 	and.w	r3, r3, #7
}
 8007876:	4618      	mov	r0, r3
 8007878:	46bd      	mov	sp, r7
 800787a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787e:	4770      	bx	lr
 8007880:	e000ed00 	.word	0xe000ed00

08007884 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007884:	b480      	push	{r7}
 8007886:	b083      	sub	sp, #12
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800788e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007892:	2b00      	cmp	r3, #0
 8007894:	db0b      	blt.n	80078ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007896:	88fb      	ldrh	r3, [r7, #6]
 8007898:	f003 021f 	and.w	r2, r3, #31
 800789c:	4907      	ldr	r1, [pc, #28]	; (80078bc <__NVIC_EnableIRQ+0x38>)
 800789e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078a2:	095b      	lsrs	r3, r3, #5
 80078a4:	2001      	movs	r0, #1
 80078a6:	fa00 f202 	lsl.w	r2, r0, r2
 80078aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80078ae:	bf00      	nop
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr
 80078ba:	bf00      	nop
 80078bc:	e000e100 	.word	0xe000e100

080078c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b083      	sub	sp, #12
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	4603      	mov	r3, r0
 80078c8:	6039      	str	r1, [r7, #0]
 80078ca:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80078cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	db0a      	blt.n	80078ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078d4:	683b      	ldr	r3, [r7, #0]
 80078d6:	b2da      	uxtb	r2, r3
 80078d8:	490c      	ldr	r1, [pc, #48]	; (800790c <__NVIC_SetPriority+0x4c>)
 80078da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80078de:	0112      	lsls	r2, r2, #4
 80078e0:	b2d2      	uxtb	r2, r2
 80078e2:	440b      	add	r3, r1
 80078e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078e8:	e00a      	b.n	8007900 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	b2da      	uxtb	r2, r3
 80078ee:	4908      	ldr	r1, [pc, #32]	; (8007910 <__NVIC_SetPriority+0x50>)
 80078f0:	88fb      	ldrh	r3, [r7, #6]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	3b04      	subs	r3, #4
 80078f8:	0112      	lsls	r2, r2, #4
 80078fa:	b2d2      	uxtb	r2, r2
 80078fc:	440b      	add	r3, r1
 80078fe:	761a      	strb	r2, [r3, #24]
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr
 800790c:	e000e100 	.word	0xe000e100
 8007910:	e000ed00 	.word	0xe000ed00

08007914 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007914:	b480      	push	{r7}
 8007916:	b089      	sub	sp, #36	; 0x24
 8007918:	af00      	add	r7, sp, #0
 800791a:	60f8      	str	r0, [r7, #12]
 800791c:	60b9      	str	r1, [r7, #8]
 800791e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f003 0307 	and.w	r3, r3, #7
 8007926:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007928:	69fb      	ldr	r3, [r7, #28]
 800792a:	f1c3 0307 	rsb	r3, r3, #7
 800792e:	2b04      	cmp	r3, #4
 8007930:	bf28      	it	cs
 8007932:	2304      	movcs	r3, #4
 8007934:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007936:	69fb      	ldr	r3, [r7, #28]
 8007938:	3304      	adds	r3, #4
 800793a:	2b06      	cmp	r3, #6
 800793c:	d902      	bls.n	8007944 <NVIC_EncodePriority+0x30>
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	3b03      	subs	r3, #3
 8007942:	e000      	b.n	8007946 <NVIC_EncodePriority+0x32>
 8007944:	2300      	movs	r3, #0
 8007946:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007948:	f04f 32ff 	mov.w	r2, #4294967295
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	fa02 f303 	lsl.w	r3, r2, r3
 8007952:	43da      	mvns	r2, r3
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	401a      	ands	r2, r3
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800795c:	f04f 31ff 	mov.w	r1, #4294967295
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	fa01 f303 	lsl.w	r3, r1, r3
 8007966:	43d9      	mvns	r1, r3
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800796c:	4313      	orrs	r3, r2
         );
}
 800796e:	4618      	mov	r0, r3
 8007970:	3724      	adds	r7, #36	; 0x24
 8007972:	46bd      	mov	sp, r7
 8007974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007978:	4770      	bx	lr
	...

0800797c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3b01      	subs	r3, #1
 8007988:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800798c:	d301      	bcc.n	8007992 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800798e:	2301      	movs	r3, #1
 8007990:	e00f      	b.n	80079b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007992:	4a0a      	ldr	r2, [pc, #40]	; (80079bc <SysTick_Config+0x40>)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3b01      	subs	r3, #1
 8007998:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800799a:	210f      	movs	r1, #15
 800799c:	f04f 30ff 	mov.w	r0, #4294967295
 80079a0:	f7ff ff8e 	bl	80078c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079a4:	4b05      	ldr	r3, [pc, #20]	; (80079bc <SysTick_Config+0x40>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079aa:	4b04      	ldr	r3, [pc, #16]	; (80079bc <SysTick_Config+0x40>)
 80079ac:	2207      	movs	r2, #7
 80079ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079b0:	2300      	movs	r3, #0
}
 80079b2:	4618      	mov	r0, r3
 80079b4:	3708      	adds	r7, #8
 80079b6:	46bd      	mov	sp, r7
 80079b8:	bd80      	pop	{r7, pc}
 80079ba:	bf00      	nop
 80079bc:	e000e010 	.word	0xe000e010

080079c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079c8:	6878      	ldr	r0, [r7, #4]
 80079ca:	f7ff ff29 	bl	8007820 <__NVIC_SetPriorityGrouping>
}
 80079ce:	bf00      	nop
 80079d0:	3708      	adds	r7, #8
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b086      	sub	sp, #24
 80079da:	af00      	add	r7, sp, #0
 80079dc:	4603      	mov	r3, r0
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	607a      	str	r2, [r7, #4]
 80079e2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80079e4:	f7ff ff40 	bl	8007868 <__NVIC_GetPriorityGrouping>
 80079e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	68b9      	ldr	r1, [r7, #8]
 80079ee:	6978      	ldr	r0, [r7, #20]
 80079f0:	f7ff ff90 	bl	8007914 <NVIC_EncodePriority>
 80079f4:	4602      	mov	r2, r0
 80079f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff ff5f 	bl	80078c0 <__NVIC_SetPriority>
}
 8007a02:	bf00      	nop
 8007a04:	3718      	adds	r7, #24
 8007a06:	46bd      	mov	sp, r7
 8007a08:	bd80      	pop	{r7, pc}

08007a0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a0a:	b580      	push	{r7, lr}
 8007a0c:	b082      	sub	sp, #8
 8007a0e:	af00      	add	r7, sp, #0
 8007a10:	4603      	mov	r3, r0
 8007a12:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f7ff ff33 	bl	8007884 <__NVIC_EnableIRQ>
}
 8007a1e:	bf00      	nop
 8007a20:	3708      	adds	r7, #8
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b082      	sub	sp, #8
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a2e:	6878      	ldr	r0, [r7, #4]
 8007a30:	f7ff ffa4 	bl	800797c <SysTick_Config>
 8007a34:	4603      	mov	r3, r0
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3708      	adds	r7, #8
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b086      	sub	sp, #24
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8007a48:	f7ff fe9a 	bl	8007780 <HAL_GetTick>
 8007a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d101      	bne.n	8007a58 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e316      	b.n	8008086 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	4a66      	ldr	r2, [pc, #408]	; (8007bf8 <HAL_DMA_Init+0x1b8>)
 8007a5e:	4293      	cmp	r3, r2
 8007a60:	d04a      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	4a65      	ldr	r2, [pc, #404]	; (8007bfc <HAL_DMA_Init+0x1bc>)
 8007a68:	4293      	cmp	r3, r2
 8007a6a:	d045      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	4a63      	ldr	r2, [pc, #396]	; (8007c00 <HAL_DMA_Init+0x1c0>)
 8007a72:	4293      	cmp	r3, r2
 8007a74:	d040      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a62      	ldr	r2, [pc, #392]	; (8007c04 <HAL_DMA_Init+0x1c4>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d03b      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a60      	ldr	r2, [pc, #384]	; (8007c08 <HAL_DMA_Init+0x1c8>)
 8007a86:	4293      	cmp	r3, r2
 8007a88:	d036      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	4a5f      	ldr	r2, [pc, #380]	; (8007c0c <HAL_DMA_Init+0x1cc>)
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d031      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	4a5d      	ldr	r2, [pc, #372]	; (8007c10 <HAL_DMA_Init+0x1d0>)
 8007a9a:	4293      	cmp	r3, r2
 8007a9c:	d02c      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	4a5c      	ldr	r2, [pc, #368]	; (8007c14 <HAL_DMA_Init+0x1d4>)
 8007aa4:	4293      	cmp	r3, r2
 8007aa6:	d027      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a5a      	ldr	r2, [pc, #360]	; (8007c18 <HAL_DMA_Init+0x1d8>)
 8007aae:	4293      	cmp	r3, r2
 8007ab0:	d022      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a59      	ldr	r2, [pc, #356]	; (8007c1c <HAL_DMA_Init+0x1dc>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	d01d      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	4a57      	ldr	r2, [pc, #348]	; (8007c20 <HAL_DMA_Init+0x1e0>)
 8007ac2:	4293      	cmp	r3, r2
 8007ac4:	d018      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	4a56      	ldr	r2, [pc, #344]	; (8007c24 <HAL_DMA_Init+0x1e4>)
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d013      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	4a54      	ldr	r2, [pc, #336]	; (8007c28 <HAL_DMA_Init+0x1e8>)
 8007ad6:	4293      	cmp	r3, r2
 8007ad8:	d00e      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	4a53      	ldr	r2, [pc, #332]	; (8007c2c <HAL_DMA_Init+0x1ec>)
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d009      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	4a51      	ldr	r2, [pc, #324]	; (8007c30 <HAL_DMA_Init+0x1f0>)
 8007aea:	4293      	cmp	r3, r2
 8007aec:	d004      	beq.n	8007af8 <HAL_DMA_Init+0xb8>
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a50      	ldr	r2, [pc, #320]	; (8007c34 <HAL_DMA_Init+0x1f4>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d101      	bne.n	8007afc <HAL_DMA_Init+0xbc>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e000      	b.n	8007afe <HAL_DMA_Init+0xbe>
 8007afc:	2300      	movs	r3, #0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 813b 	beq.w	8007d7a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2202      	movs	r2, #2
 8007b08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a37      	ldr	r2, [pc, #220]	; (8007bf8 <HAL_DMA_Init+0x1b8>)
 8007b1a:	4293      	cmp	r3, r2
 8007b1c:	d04a      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4a36      	ldr	r2, [pc, #216]	; (8007bfc <HAL_DMA_Init+0x1bc>)
 8007b24:	4293      	cmp	r3, r2
 8007b26:	d045      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4a34      	ldr	r2, [pc, #208]	; (8007c00 <HAL_DMA_Init+0x1c0>)
 8007b2e:	4293      	cmp	r3, r2
 8007b30:	d040      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	4a33      	ldr	r2, [pc, #204]	; (8007c04 <HAL_DMA_Init+0x1c4>)
 8007b38:	4293      	cmp	r3, r2
 8007b3a:	d03b      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	4a31      	ldr	r2, [pc, #196]	; (8007c08 <HAL_DMA_Init+0x1c8>)
 8007b42:	4293      	cmp	r3, r2
 8007b44:	d036      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a30      	ldr	r2, [pc, #192]	; (8007c0c <HAL_DMA_Init+0x1cc>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d031      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a2e      	ldr	r2, [pc, #184]	; (8007c10 <HAL_DMA_Init+0x1d0>)
 8007b56:	4293      	cmp	r3, r2
 8007b58:	d02c      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	4a2d      	ldr	r2, [pc, #180]	; (8007c14 <HAL_DMA_Init+0x1d4>)
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d027      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a2b      	ldr	r2, [pc, #172]	; (8007c18 <HAL_DMA_Init+0x1d8>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d022      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a2a      	ldr	r2, [pc, #168]	; (8007c1c <HAL_DMA_Init+0x1dc>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d01d      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a28      	ldr	r2, [pc, #160]	; (8007c20 <HAL_DMA_Init+0x1e0>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d018      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <HAL_DMA_Init+0x1e4>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d013      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	4a25      	ldr	r2, [pc, #148]	; (8007c28 <HAL_DMA_Init+0x1e8>)
 8007b92:	4293      	cmp	r3, r2
 8007b94:	d00e      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	4a24      	ldr	r2, [pc, #144]	; (8007c2c <HAL_DMA_Init+0x1ec>)
 8007b9c:	4293      	cmp	r3, r2
 8007b9e:	d009      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	4a22      	ldr	r2, [pc, #136]	; (8007c30 <HAL_DMA_Init+0x1f0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d004      	beq.n	8007bb4 <HAL_DMA_Init+0x174>
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a21      	ldr	r2, [pc, #132]	; (8007c34 <HAL_DMA_Init+0x1f4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d108      	bne.n	8007bc6 <HAL_DMA_Init+0x186>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f022 0201 	bic.w	r2, r2, #1
 8007bc2:	601a      	str	r2, [r3, #0]
 8007bc4:	e007      	b.n	8007bd6 <HAL_DMA_Init+0x196>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	681a      	ldr	r2, [r3, #0]
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	f022 0201 	bic.w	r2, r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007bd6:	e02f      	b.n	8007c38 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bd8:	f7ff fdd2 	bl	8007780 <HAL_GetTick>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	1ad3      	subs	r3, r2, r3
 8007be2:	2b05      	cmp	r3, #5
 8007be4:	d928      	bls.n	8007c38 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2220      	movs	r2, #32
 8007bea:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	2203      	movs	r2, #3
 8007bf0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	e246      	b.n	8008086 <HAL_DMA_Init+0x646>
 8007bf8:	40020010 	.word	0x40020010
 8007bfc:	40020028 	.word	0x40020028
 8007c00:	40020040 	.word	0x40020040
 8007c04:	40020058 	.word	0x40020058
 8007c08:	40020070 	.word	0x40020070
 8007c0c:	40020088 	.word	0x40020088
 8007c10:	400200a0 	.word	0x400200a0
 8007c14:	400200b8 	.word	0x400200b8
 8007c18:	40020410 	.word	0x40020410
 8007c1c:	40020428 	.word	0x40020428
 8007c20:	40020440 	.word	0x40020440
 8007c24:	40020458 	.word	0x40020458
 8007c28:	40020470 	.word	0x40020470
 8007c2c:	40020488 	.word	0x40020488
 8007c30:	400204a0 	.word	0x400204a0
 8007c34:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f003 0301 	and.w	r3, r3, #1
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1c8      	bne.n	8007bd8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007c4e:	697a      	ldr	r2, [r7, #20]
 8007c50:	4b83      	ldr	r3, [pc, #524]	; (8007e60 <HAL_DMA_Init+0x420>)
 8007c52:	4013      	ands	r3, r2
 8007c54:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8007c5e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	691b      	ldr	r3, [r3, #16]
 8007c64:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007c6a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	699b      	ldr	r3, [r3, #24]
 8007c70:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007c76:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a1b      	ldr	r3, [r3, #32]
 8007c7c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8007c7e:	697a      	ldr	r2, [r7, #20]
 8007c80:	4313      	orrs	r3, r2
 8007c82:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c88:	2b04      	cmp	r3, #4
 8007c8a:	d107      	bne.n	8007c9c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c94:	4313      	orrs	r3, r2
 8007c96:	697a      	ldr	r2, [r7, #20]
 8007c98:	4313      	orrs	r3, r2
 8007c9a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8007c9c:	4b71      	ldr	r3, [pc, #452]	; (8007e64 <HAL_DMA_Init+0x424>)
 8007c9e:	681a      	ldr	r2, [r3, #0]
 8007ca0:	4b71      	ldr	r3, [pc, #452]	; (8007e68 <HAL_DMA_Init+0x428>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007ca8:	d328      	bcc.n	8007cfc <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	685b      	ldr	r3, [r3, #4]
 8007cae:	2b28      	cmp	r3, #40	; 0x28
 8007cb0:	d903      	bls.n	8007cba <HAL_DMA_Init+0x27a>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	685b      	ldr	r3, [r3, #4]
 8007cb6:	2b2e      	cmp	r3, #46	; 0x2e
 8007cb8:	d917      	bls.n	8007cea <HAL_DMA_Init+0x2aa>
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	2b3e      	cmp	r3, #62	; 0x3e
 8007cc0:	d903      	bls.n	8007cca <HAL_DMA_Init+0x28a>
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	2b42      	cmp	r3, #66	; 0x42
 8007cc8:	d90f      	bls.n	8007cea <HAL_DMA_Init+0x2aa>
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2b46      	cmp	r3, #70	; 0x46
 8007cd0:	d903      	bls.n	8007cda <HAL_DMA_Init+0x29a>
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	685b      	ldr	r3, [r3, #4]
 8007cd6:	2b48      	cmp	r3, #72	; 0x48
 8007cd8:	d907      	bls.n	8007cea <HAL_DMA_Init+0x2aa>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	2b4e      	cmp	r3, #78	; 0x4e
 8007ce0:	d905      	bls.n	8007cee <HAL_DMA_Init+0x2ae>
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	2b52      	cmp	r3, #82	; 0x52
 8007ce8:	d801      	bhi.n	8007cee <HAL_DMA_Init+0x2ae>
 8007cea:	2301      	movs	r3, #1
 8007cec:	e000      	b.n	8007cf0 <HAL_DMA_Init+0x2b0>
 8007cee:	2300      	movs	r3, #0
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d003      	beq.n	8007cfc <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007cfa:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	697a      	ldr	r2, [r7, #20]
 8007d02:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	695b      	ldr	r3, [r3, #20]
 8007d0a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007d0c:	697b      	ldr	r3, [r7, #20]
 8007d0e:	f023 0307 	bic.w	r3, r3, #7
 8007d12:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d18:	697a      	ldr	r2, [r7, #20]
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d22:	2b04      	cmp	r3, #4
 8007d24:	d117      	bne.n	8007d56 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d2a:	697a      	ldr	r2, [r7, #20]
 8007d2c:	4313      	orrs	r3, r2
 8007d2e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d00e      	beq.n	8007d56 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007d38:	6878      	ldr	r0, [r7, #4]
 8007d3a:	f001 ff1d 	bl	8009b78 <DMA_CheckFifoParam>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d008      	beq.n	8007d56 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2240      	movs	r2, #64	; 0x40
 8007d48:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8007d52:	2301      	movs	r3, #1
 8007d54:	e197      	b.n	8008086 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	697a      	ldr	r2, [r7, #20]
 8007d5c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f001 fe58 	bl	8009a14 <DMA_CalcBaseAndBitshift>
 8007d64:	4603      	mov	r3, r0
 8007d66:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d6c:	f003 031f 	and.w	r3, r3, #31
 8007d70:	223f      	movs	r2, #63	; 0x3f
 8007d72:	409a      	lsls	r2, r3
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	609a      	str	r2, [r3, #8]
 8007d78:	e0cd      	b.n	8007f16 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	4a3b      	ldr	r2, [pc, #236]	; (8007e6c <HAL_DMA_Init+0x42c>)
 8007d80:	4293      	cmp	r3, r2
 8007d82:	d022      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a39      	ldr	r2, [pc, #228]	; (8007e70 <HAL_DMA_Init+0x430>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d01d      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	4a38      	ldr	r2, [pc, #224]	; (8007e74 <HAL_DMA_Init+0x434>)
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d018      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	4a36      	ldr	r2, [pc, #216]	; (8007e78 <HAL_DMA_Init+0x438>)
 8007d9e:	4293      	cmp	r3, r2
 8007da0:	d013      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4a35      	ldr	r2, [pc, #212]	; (8007e7c <HAL_DMA_Init+0x43c>)
 8007da8:	4293      	cmp	r3, r2
 8007daa:	d00e      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a33      	ldr	r2, [pc, #204]	; (8007e80 <HAL_DMA_Init+0x440>)
 8007db2:	4293      	cmp	r3, r2
 8007db4:	d009      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	4a32      	ldr	r2, [pc, #200]	; (8007e84 <HAL_DMA_Init+0x444>)
 8007dbc:	4293      	cmp	r3, r2
 8007dbe:	d004      	beq.n	8007dca <HAL_DMA_Init+0x38a>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	4a30      	ldr	r2, [pc, #192]	; (8007e88 <HAL_DMA_Init+0x448>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d101      	bne.n	8007dce <HAL_DMA_Init+0x38e>
 8007dca:	2301      	movs	r3, #1
 8007dcc:	e000      	b.n	8007dd0 <HAL_DMA_Init+0x390>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	f000 8097 	beq.w	8007f04 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a24      	ldr	r2, [pc, #144]	; (8007e6c <HAL_DMA_Init+0x42c>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d021      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a22      	ldr	r2, [pc, #136]	; (8007e70 <HAL_DMA_Init+0x430>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d01c      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	4a21      	ldr	r2, [pc, #132]	; (8007e74 <HAL_DMA_Init+0x434>)
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d017      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4a1f      	ldr	r2, [pc, #124]	; (8007e78 <HAL_DMA_Init+0x438>)
 8007dfa:	4293      	cmp	r3, r2
 8007dfc:	d012      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	4a1e      	ldr	r2, [pc, #120]	; (8007e7c <HAL_DMA_Init+0x43c>)
 8007e04:	4293      	cmp	r3, r2
 8007e06:	d00d      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	4a1c      	ldr	r2, [pc, #112]	; (8007e80 <HAL_DMA_Init+0x440>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d008      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	4a1b      	ldr	r2, [pc, #108]	; (8007e84 <HAL_DMA_Init+0x444>)
 8007e18:	4293      	cmp	r3, r2
 8007e1a:	d003      	beq.n	8007e24 <HAL_DMA_Init+0x3e4>
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a19      	ldr	r2, [pc, #100]	; (8007e88 <HAL_DMA_Init+0x448>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2202      	movs	r2, #2
 8007e2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2200      	movs	r2, #0
 8007e32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8007e3e:	697a      	ldr	r2, [r7, #20]
 8007e40:	4b12      	ldr	r3, [pc, #72]	; (8007e8c <HAL_DMA_Init+0x44c>)
 8007e42:	4013      	ands	r3, r2
 8007e44:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	689b      	ldr	r3, [r3, #8]
 8007e4a:	2b40      	cmp	r3, #64	; 0x40
 8007e4c:	d020      	beq.n	8007e90 <HAL_DMA_Init+0x450>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	689b      	ldr	r3, [r3, #8]
 8007e52:	2b80      	cmp	r3, #128	; 0x80
 8007e54:	d102      	bne.n	8007e5c <HAL_DMA_Init+0x41c>
 8007e56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007e5a:	e01a      	b.n	8007e92 <HAL_DMA_Init+0x452>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e018      	b.n	8007e92 <HAL_DMA_Init+0x452>
 8007e60:	fe10803f 	.word	0xfe10803f
 8007e64:	5c001000 	.word	0x5c001000
 8007e68:	ffff0000 	.word	0xffff0000
 8007e6c:	58025408 	.word	0x58025408
 8007e70:	5802541c 	.word	0x5802541c
 8007e74:	58025430 	.word	0x58025430
 8007e78:	58025444 	.word	0x58025444
 8007e7c:	58025458 	.word	0x58025458
 8007e80:	5802546c 	.word	0x5802546c
 8007e84:	58025480 	.word	0x58025480
 8007e88:	58025494 	.word	0x58025494
 8007e8c:	fffe000f 	.word	0xfffe000f
 8007e90:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007e92:	687a      	ldr	r2, [r7, #4]
 8007e94:	68d2      	ldr	r2, [r2, #12]
 8007e96:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007e98:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	691b      	ldr	r3, [r3, #16]
 8007e9e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8007ea0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007ea8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	699b      	ldr	r3, [r3, #24]
 8007eae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8007eb0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	69db      	ldr	r3, [r3, #28]
 8007eb6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007eb8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	6a1b      	ldr	r3, [r3, #32]
 8007ebe:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8007ec0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8007ec2:	697a      	ldr	r2, [r7, #20]
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	697a      	ldr	r2, [r7, #20]
 8007ece:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	461a      	mov	r2, r3
 8007ed6:	4b6e      	ldr	r3, [pc, #440]	; (8008090 <HAL_DMA_Init+0x650>)
 8007ed8:	4413      	add	r3, r2
 8007eda:	4a6e      	ldr	r2, [pc, #440]	; (8008094 <HAL_DMA_Init+0x654>)
 8007edc:	fba2 2303 	umull	r2, r3, r2, r3
 8007ee0:	091b      	lsrs	r3, r3, #4
 8007ee2:	009a      	lsls	r2, r3, #2
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	f001 fd93 	bl	8009a14 <DMA_CalcBaseAndBitshift>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ef6:	f003 031f 	and.w	r3, r3, #31
 8007efa:	2201      	movs	r2, #1
 8007efc:	409a      	lsls	r2, r3
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	605a      	str	r2, [r3, #4]
 8007f02:	e008      	b.n	8007f16 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	2240      	movs	r2, #64	; 0x40
 8007f08:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2203      	movs	r2, #3
 8007f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8007f12:	2301      	movs	r3, #1
 8007f14:	e0b7      	b.n	8008086 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a5f      	ldr	r2, [pc, #380]	; (8008098 <HAL_DMA_Init+0x658>)
 8007f1c:	4293      	cmp	r3, r2
 8007f1e:	d072      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	4a5d      	ldr	r2, [pc, #372]	; (800809c <HAL_DMA_Init+0x65c>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d06d      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	4a5c      	ldr	r2, [pc, #368]	; (80080a0 <HAL_DMA_Init+0x660>)
 8007f30:	4293      	cmp	r3, r2
 8007f32:	d068      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	4a5a      	ldr	r2, [pc, #360]	; (80080a4 <HAL_DMA_Init+0x664>)
 8007f3a:	4293      	cmp	r3, r2
 8007f3c:	d063      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	4a59      	ldr	r2, [pc, #356]	; (80080a8 <HAL_DMA_Init+0x668>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d05e      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a57      	ldr	r2, [pc, #348]	; (80080ac <HAL_DMA_Init+0x66c>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d059      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	4a56      	ldr	r2, [pc, #344]	; (80080b0 <HAL_DMA_Init+0x670>)
 8007f58:	4293      	cmp	r3, r2
 8007f5a:	d054      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	4a54      	ldr	r2, [pc, #336]	; (80080b4 <HAL_DMA_Init+0x674>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d04f      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a53      	ldr	r2, [pc, #332]	; (80080b8 <HAL_DMA_Init+0x678>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d04a      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4a51      	ldr	r2, [pc, #324]	; (80080bc <HAL_DMA_Init+0x67c>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d045      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	4a50      	ldr	r2, [pc, #320]	; (80080c0 <HAL_DMA_Init+0x680>)
 8007f80:	4293      	cmp	r3, r2
 8007f82:	d040      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	4a4e      	ldr	r2, [pc, #312]	; (80080c4 <HAL_DMA_Init+0x684>)
 8007f8a:	4293      	cmp	r3, r2
 8007f8c:	d03b      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a4d      	ldr	r2, [pc, #308]	; (80080c8 <HAL_DMA_Init+0x688>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d036      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	4a4b      	ldr	r2, [pc, #300]	; (80080cc <HAL_DMA_Init+0x68c>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d031      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	4a4a      	ldr	r2, [pc, #296]	; (80080d0 <HAL_DMA_Init+0x690>)
 8007fa8:	4293      	cmp	r3, r2
 8007faa:	d02c      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	4a48      	ldr	r2, [pc, #288]	; (80080d4 <HAL_DMA_Init+0x694>)
 8007fb2:	4293      	cmp	r3, r2
 8007fb4:	d027      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4a47      	ldr	r2, [pc, #284]	; (80080d8 <HAL_DMA_Init+0x698>)
 8007fbc:	4293      	cmp	r3, r2
 8007fbe:	d022      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	4a45      	ldr	r2, [pc, #276]	; (80080dc <HAL_DMA_Init+0x69c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01d      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	4a44      	ldr	r2, [pc, #272]	; (80080e0 <HAL_DMA_Init+0x6a0>)
 8007fd0:	4293      	cmp	r3, r2
 8007fd2:	d018      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	4a42      	ldr	r2, [pc, #264]	; (80080e4 <HAL_DMA_Init+0x6a4>)
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	d013      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	4a41      	ldr	r2, [pc, #260]	; (80080e8 <HAL_DMA_Init+0x6a8>)
 8007fe4:	4293      	cmp	r3, r2
 8007fe6:	d00e      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4a3f      	ldr	r2, [pc, #252]	; (80080ec <HAL_DMA_Init+0x6ac>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d009      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	4a3e      	ldr	r2, [pc, #248]	; (80080f0 <HAL_DMA_Init+0x6b0>)
 8007ff8:	4293      	cmp	r3, r2
 8007ffa:	d004      	beq.n	8008006 <HAL_DMA_Init+0x5c6>
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	4a3c      	ldr	r2, [pc, #240]	; (80080f4 <HAL_DMA_Init+0x6b4>)
 8008002:	4293      	cmp	r3, r2
 8008004:	d101      	bne.n	800800a <HAL_DMA_Init+0x5ca>
 8008006:	2301      	movs	r3, #1
 8008008:	e000      	b.n	800800c <HAL_DMA_Init+0x5cc>
 800800a:	2300      	movs	r3, #0
 800800c:	2b00      	cmp	r3, #0
 800800e:	d032      	beq.n	8008076 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008010:	6878      	ldr	r0, [r7, #4]
 8008012:	f001 fe2d 	bl	8009c70 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	689b      	ldr	r3, [r3, #8]
 800801a:	2b80      	cmp	r3, #128	; 0x80
 800801c:	d102      	bne.n	8008024 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	2200      	movs	r2, #0
 8008022:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800802c:	b2d2      	uxtb	r2, r2
 800802e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008038:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d010      	beq.n	8008064 <HAL_DMA_Init+0x624>
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	2b08      	cmp	r3, #8
 8008048:	d80c      	bhi.n	8008064 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f001 feaa 	bl	8009da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008054:	2200      	movs	r2, #0
 8008056:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800805c:	687a      	ldr	r2, [r7, #4]
 800805e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008060:	605a      	str	r2, [r3, #4]
 8008062:	e008      	b.n	8008076 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2200      	movs	r2, #0
 8008068:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2200      	movs	r2, #0
 800806e:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	2200      	movs	r2, #0
 8008074:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008084:	2300      	movs	r3, #0
}
 8008086:	4618      	mov	r0, r3
 8008088:	3718      	adds	r7, #24
 800808a:	46bd      	mov	sp, r7
 800808c:	bd80      	pop	{r7, pc}
 800808e:	bf00      	nop
 8008090:	a7fdabf8 	.word	0xa7fdabf8
 8008094:	cccccccd 	.word	0xcccccccd
 8008098:	40020010 	.word	0x40020010
 800809c:	40020028 	.word	0x40020028
 80080a0:	40020040 	.word	0x40020040
 80080a4:	40020058 	.word	0x40020058
 80080a8:	40020070 	.word	0x40020070
 80080ac:	40020088 	.word	0x40020088
 80080b0:	400200a0 	.word	0x400200a0
 80080b4:	400200b8 	.word	0x400200b8
 80080b8:	40020410 	.word	0x40020410
 80080bc:	40020428 	.word	0x40020428
 80080c0:	40020440 	.word	0x40020440
 80080c4:	40020458 	.word	0x40020458
 80080c8:	40020470 	.word	0x40020470
 80080cc:	40020488 	.word	0x40020488
 80080d0:	400204a0 	.word	0x400204a0
 80080d4:	400204b8 	.word	0x400204b8
 80080d8:	58025408 	.word	0x58025408
 80080dc:	5802541c 	.word	0x5802541c
 80080e0:	58025430 	.word	0x58025430
 80080e4:	58025444 	.word	0x58025444
 80080e8:	58025458 	.word	0x58025458
 80080ec:	5802546c 	.word	0x5802546c
 80080f0:	58025480 	.word	0x58025480
 80080f4:	58025494 	.word	0x58025494

080080f8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b086      	sub	sp, #24
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8008100:	f7ff fb3e 	bl	8007780 <HAL_GetTick>
 8008104:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d101      	bne.n	8008110 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800810c:	2301      	movs	r3, #1
 800810e:	e2dc      	b.n	80086ca <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008116:	b2db      	uxtb	r3, r3
 8008118:	2b02      	cmp	r3, #2
 800811a:	d008      	beq.n	800812e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2280      	movs	r2, #128	; 0x80
 8008120:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	e2cd      	b.n	80086ca <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a76      	ldr	r2, [pc, #472]	; (800830c <HAL_DMA_Abort+0x214>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d04a      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	4a74      	ldr	r2, [pc, #464]	; (8008310 <HAL_DMA_Abort+0x218>)
 800813e:	4293      	cmp	r3, r2
 8008140:	d045      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	4a73      	ldr	r2, [pc, #460]	; (8008314 <HAL_DMA_Abort+0x21c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d040      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	4a71      	ldr	r2, [pc, #452]	; (8008318 <HAL_DMA_Abort+0x220>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d03b      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a70      	ldr	r2, [pc, #448]	; (800831c <HAL_DMA_Abort+0x224>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d036      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a6e      	ldr	r2, [pc, #440]	; (8008320 <HAL_DMA_Abort+0x228>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d031      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	4a6d      	ldr	r2, [pc, #436]	; (8008324 <HAL_DMA_Abort+0x22c>)
 8008170:	4293      	cmp	r3, r2
 8008172:	d02c      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	4a6b      	ldr	r2, [pc, #428]	; (8008328 <HAL_DMA_Abort+0x230>)
 800817a:	4293      	cmp	r3, r2
 800817c:	d027      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	4a6a      	ldr	r2, [pc, #424]	; (800832c <HAL_DMA_Abort+0x234>)
 8008184:	4293      	cmp	r3, r2
 8008186:	d022      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a68      	ldr	r2, [pc, #416]	; (8008330 <HAL_DMA_Abort+0x238>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d01d      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	681b      	ldr	r3, [r3, #0]
 8008196:	4a67      	ldr	r2, [pc, #412]	; (8008334 <HAL_DMA_Abort+0x23c>)
 8008198:	4293      	cmp	r3, r2
 800819a:	d018      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4a65      	ldr	r2, [pc, #404]	; (8008338 <HAL_DMA_Abort+0x240>)
 80081a2:	4293      	cmp	r3, r2
 80081a4:	d013      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	4a64      	ldr	r2, [pc, #400]	; (800833c <HAL_DMA_Abort+0x244>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d00e      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	4a62      	ldr	r2, [pc, #392]	; (8008340 <HAL_DMA_Abort+0x248>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d009      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	4a61      	ldr	r2, [pc, #388]	; (8008344 <HAL_DMA_Abort+0x24c>)
 80081c0:	4293      	cmp	r3, r2
 80081c2:	d004      	beq.n	80081ce <HAL_DMA_Abort+0xd6>
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4a5f      	ldr	r2, [pc, #380]	; (8008348 <HAL_DMA_Abort+0x250>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d101      	bne.n	80081d2 <HAL_DMA_Abort+0xda>
 80081ce:	2301      	movs	r3, #1
 80081d0:	e000      	b.n	80081d4 <HAL_DMA_Abort+0xdc>
 80081d2:	2300      	movs	r3, #0
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d013      	beq.n	8008200 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f022 021e 	bic.w	r2, r2, #30
 80081e6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	695a      	ldr	r2, [r3, #20]
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80081f6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	617b      	str	r3, [r7, #20]
 80081fe:	e00a      	b.n	8008216 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	681a      	ldr	r2, [r3, #0]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f022 020e 	bic.w	r2, r2, #14
 800820e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a3c      	ldr	r2, [pc, #240]	; (800830c <HAL_DMA_Abort+0x214>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d072      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a3a      	ldr	r2, [pc, #232]	; (8008310 <HAL_DMA_Abort+0x218>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d06d      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a39      	ldr	r2, [pc, #228]	; (8008314 <HAL_DMA_Abort+0x21c>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d068      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a37      	ldr	r2, [pc, #220]	; (8008318 <HAL_DMA_Abort+0x220>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d063      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a36      	ldr	r2, [pc, #216]	; (800831c <HAL_DMA_Abort+0x224>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d05e      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a34      	ldr	r2, [pc, #208]	; (8008320 <HAL_DMA_Abort+0x228>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d059      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	4a33      	ldr	r2, [pc, #204]	; (8008324 <HAL_DMA_Abort+0x22c>)
 8008258:	4293      	cmp	r3, r2
 800825a:	d054      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	4a31      	ldr	r2, [pc, #196]	; (8008328 <HAL_DMA_Abort+0x230>)
 8008262:	4293      	cmp	r3, r2
 8008264:	d04f      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	4a30      	ldr	r2, [pc, #192]	; (800832c <HAL_DMA_Abort+0x234>)
 800826c:	4293      	cmp	r3, r2
 800826e:	d04a      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a2e      	ldr	r2, [pc, #184]	; (8008330 <HAL_DMA_Abort+0x238>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d045      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	4a2d      	ldr	r2, [pc, #180]	; (8008334 <HAL_DMA_Abort+0x23c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d040      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a2b      	ldr	r2, [pc, #172]	; (8008338 <HAL_DMA_Abort+0x240>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d03b      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	4a2a      	ldr	r2, [pc, #168]	; (800833c <HAL_DMA_Abort+0x244>)
 8008294:	4293      	cmp	r3, r2
 8008296:	d036      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	4a28      	ldr	r2, [pc, #160]	; (8008340 <HAL_DMA_Abort+0x248>)
 800829e:	4293      	cmp	r3, r2
 80082a0:	d031      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	4a27      	ldr	r2, [pc, #156]	; (8008344 <HAL_DMA_Abort+0x24c>)
 80082a8:	4293      	cmp	r3, r2
 80082aa:	d02c      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4a25      	ldr	r2, [pc, #148]	; (8008348 <HAL_DMA_Abort+0x250>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d027      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	4a24      	ldr	r2, [pc, #144]	; (800834c <HAL_DMA_Abort+0x254>)
 80082bc:	4293      	cmp	r3, r2
 80082be:	d022      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	4a22      	ldr	r2, [pc, #136]	; (8008350 <HAL_DMA_Abort+0x258>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d01d      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	4a21      	ldr	r2, [pc, #132]	; (8008354 <HAL_DMA_Abort+0x25c>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d018      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	4a1f      	ldr	r2, [pc, #124]	; (8008358 <HAL_DMA_Abort+0x260>)
 80082da:	4293      	cmp	r3, r2
 80082dc:	d013      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a1e      	ldr	r2, [pc, #120]	; (800835c <HAL_DMA_Abort+0x264>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d00e      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_DMA_Abort+0x268>)
 80082ee:	4293      	cmp	r3, r2
 80082f0:	d009      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	4a1b      	ldr	r2, [pc, #108]	; (8008364 <HAL_DMA_Abort+0x26c>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d004      	beq.n	8008306 <HAL_DMA_Abort+0x20e>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	4a19      	ldr	r2, [pc, #100]	; (8008368 <HAL_DMA_Abort+0x270>)
 8008302:	4293      	cmp	r3, r2
 8008304:	d132      	bne.n	800836c <HAL_DMA_Abort+0x274>
 8008306:	2301      	movs	r3, #1
 8008308:	e031      	b.n	800836e <HAL_DMA_Abort+0x276>
 800830a:	bf00      	nop
 800830c:	40020010 	.word	0x40020010
 8008310:	40020028 	.word	0x40020028
 8008314:	40020040 	.word	0x40020040
 8008318:	40020058 	.word	0x40020058
 800831c:	40020070 	.word	0x40020070
 8008320:	40020088 	.word	0x40020088
 8008324:	400200a0 	.word	0x400200a0
 8008328:	400200b8 	.word	0x400200b8
 800832c:	40020410 	.word	0x40020410
 8008330:	40020428 	.word	0x40020428
 8008334:	40020440 	.word	0x40020440
 8008338:	40020458 	.word	0x40020458
 800833c:	40020470 	.word	0x40020470
 8008340:	40020488 	.word	0x40020488
 8008344:	400204a0 	.word	0x400204a0
 8008348:	400204b8 	.word	0x400204b8
 800834c:	58025408 	.word	0x58025408
 8008350:	5802541c 	.word	0x5802541c
 8008354:	58025430 	.word	0x58025430
 8008358:	58025444 	.word	0x58025444
 800835c:	58025458 	.word	0x58025458
 8008360:	5802546c 	.word	0x5802546c
 8008364:	58025480 	.word	0x58025480
 8008368:	58025494 	.word	0x58025494
 800836c:	2300      	movs	r3, #0
 800836e:	2b00      	cmp	r3, #0
 8008370:	d007      	beq.n	8008382 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008376:	681a      	ldr	r2, [r3, #0]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800837c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008380:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a6d      	ldr	r2, [pc, #436]	; (800853c <HAL_DMA_Abort+0x444>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d04a      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a6b      	ldr	r2, [pc, #428]	; (8008540 <HAL_DMA_Abort+0x448>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d045      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a6a      	ldr	r2, [pc, #424]	; (8008544 <HAL_DMA_Abort+0x44c>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d040      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a68      	ldr	r2, [pc, #416]	; (8008548 <HAL_DMA_Abort+0x450>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d03b      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a67      	ldr	r2, [pc, #412]	; (800854c <HAL_DMA_Abort+0x454>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d036      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a65      	ldr	r2, [pc, #404]	; (8008550 <HAL_DMA_Abort+0x458>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d031      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	4a64      	ldr	r2, [pc, #400]	; (8008554 <HAL_DMA_Abort+0x45c>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d02c      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a62      	ldr	r2, [pc, #392]	; (8008558 <HAL_DMA_Abort+0x460>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d027      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	4a61      	ldr	r2, [pc, #388]	; (800855c <HAL_DMA_Abort+0x464>)
 80083d8:	4293      	cmp	r3, r2
 80083da:	d022      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a5f      	ldr	r2, [pc, #380]	; (8008560 <HAL_DMA_Abort+0x468>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d01d      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	4a5e      	ldr	r2, [pc, #376]	; (8008564 <HAL_DMA_Abort+0x46c>)
 80083ec:	4293      	cmp	r3, r2
 80083ee:	d018      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a5c      	ldr	r2, [pc, #368]	; (8008568 <HAL_DMA_Abort+0x470>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d013      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	4a5b      	ldr	r2, [pc, #364]	; (800856c <HAL_DMA_Abort+0x474>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d00e      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	4a59      	ldr	r2, [pc, #356]	; (8008570 <HAL_DMA_Abort+0x478>)
 800840a:	4293      	cmp	r3, r2
 800840c:	d009      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	4a58      	ldr	r2, [pc, #352]	; (8008574 <HAL_DMA_Abort+0x47c>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d004      	beq.n	8008422 <HAL_DMA_Abort+0x32a>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	4a56      	ldr	r2, [pc, #344]	; (8008578 <HAL_DMA_Abort+0x480>)
 800841e:	4293      	cmp	r3, r2
 8008420:	d108      	bne.n	8008434 <HAL_DMA_Abort+0x33c>
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f022 0201 	bic.w	r2, r2, #1
 8008430:	601a      	str	r2, [r3, #0]
 8008432:	e007      	b.n	8008444 <HAL_DMA_Abort+0x34c>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008444:	e013      	b.n	800846e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008446:	f7ff f99b 	bl	8007780 <HAL_GetTick>
 800844a:	4602      	mov	r2, r0
 800844c:	693b      	ldr	r3, [r7, #16]
 800844e:	1ad3      	subs	r3, r2, r3
 8008450:	2b05      	cmp	r3, #5
 8008452:	d90c      	bls.n	800846e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2220      	movs	r2, #32
 8008458:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2203      	movs	r2, #3
 800845e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800846a:	2301      	movs	r3, #1
 800846c:	e12d      	b.n	80086ca <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800846e:	697b      	ldr	r3, [r7, #20]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0301 	and.w	r3, r3, #1
 8008476:	2b00      	cmp	r3, #0
 8008478:	d1e5      	bne.n	8008446 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	4a2f      	ldr	r2, [pc, #188]	; (800853c <HAL_DMA_Abort+0x444>)
 8008480:	4293      	cmp	r3, r2
 8008482:	d04a      	beq.n	800851a <HAL_DMA_Abort+0x422>
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	4a2d      	ldr	r2, [pc, #180]	; (8008540 <HAL_DMA_Abort+0x448>)
 800848a:	4293      	cmp	r3, r2
 800848c:	d045      	beq.n	800851a <HAL_DMA_Abort+0x422>
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a2c      	ldr	r2, [pc, #176]	; (8008544 <HAL_DMA_Abort+0x44c>)
 8008494:	4293      	cmp	r3, r2
 8008496:	d040      	beq.n	800851a <HAL_DMA_Abort+0x422>
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	4a2a      	ldr	r2, [pc, #168]	; (8008548 <HAL_DMA_Abort+0x450>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d03b      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	4a29      	ldr	r2, [pc, #164]	; (800854c <HAL_DMA_Abort+0x454>)
 80084a8:	4293      	cmp	r3, r2
 80084aa:	d036      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4a27      	ldr	r2, [pc, #156]	; (8008550 <HAL_DMA_Abort+0x458>)
 80084b2:	4293      	cmp	r3, r2
 80084b4:	d031      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a26      	ldr	r2, [pc, #152]	; (8008554 <HAL_DMA_Abort+0x45c>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d02c      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	4a24      	ldr	r2, [pc, #144]	; (8008558 <HAL_DMA_Abort+0x460>)
 80084c6:	4293      	cmp	r3, r2
 80084c8:	d027      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	4a23      	ldr	r2, [pc, #140]	; (800855c <HAL_DMA_Abort+0x464>)
 80084d0:	4293      	cmp	r3, r2
 80084d2:	d022      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	4a21      	ldr	r2, [pc, #132]	; (8008560 <HAL_DMA_Abort+0x468>)
 80084da:	4293      	cmp	r3, r2
 80084dc:	d01d      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	4a20      	ldr	r2, [pc, #128]	; (8008564 <HAL_DMA_Abort+0x46c>)
 80084e4:	4293      	cmp	r3, r2
 80084e6:	d018      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a1e      	ldr	r2, [pc, #120]	; (8008568 <HAL_DMA_Abort+0x470>)
 80084ee:	4293      	cmp	r3, r2
 80084f0:	d013      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4a1d      	ldr	r2, [pc, #116]	; (800856c <HAL_DMA_Abort+0x474>)
 80084f8:	4293      	cmp	r3, r2
 80084fa:	d00e      	beq.n	800851a <HAL_DMA_Abort+0x422>
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a1b      	ldr	r2, [pc, #108]	; (8008570 <HAL_DMA_Abort+0x478>)
 8008502:	4293      	cmp	r3, r2
 8008504:	d009      	beq.n	800851a <HAL_DMA_Abort+0x422>
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	4a1a      	ldr	r2, [pc, #104]	; (8008574 <HAL_DMA_Abort+0x47c>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d004      	beq.n	800851a <HAL_DMA_Abort+0x422>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	4a18      	ldr	r2, [pc, #96]	; (8008578 <HAL_DMA_Abort+0x480>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d101      	bne.n	800851e <HAL_DMA_Abort+0x426>
 800851a:	2301      	movs	r3, #1
 800851c:	e000      	b.n	8008520 <HAL_DMA_Abort+0x428>
 800851e:	2300      	movs	r3, #0
 8008520:	2b00      	cmp	r3, #0
 8008522:	d02b      	beq.n	800857c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008528:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800852e:	f003 031f 	and.w	r3, r3, #31
 8008532:	223f      	movs	r2, #63	; 0x3f
 8008534:	409a      	lsls	r2, r3
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	609a      	str	r2, [r3, #8]
 800853a:	e02a      	b.n	8008592 <HAL_DMA_Abort+0x49a>
 800853c:	40020010 	.word	0x40020010
 8008540:	40020028 	.word	0x40020028
 8008544:	40020040 	.word	0x40020040
 8008548:	40020058 	.word	0x40020058
 800854c:	40020070 	.word	0x40020070
 8008550:	40020088 	.word	0x40020088
 8008554:	400200a0 	.word	0x400200a0
 8008558:	400200b8 	.word	0x400200b8
 800855c:	40020410 	.word	0x40020410
 8008560:	40020428 	.word	0x40020428
 8008564:	40020440 	.word	0x40020440
 8008568:	40020458 	.word	0x40020458
 800856c:	40020470 	.word	0x40020470
 8008570:	40020488 	.word	0x40020488
 8008574:	400204a0 	.word	0x400204a0
 8008578:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008580:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008586:	f003 031f 	and.w	r3, r3, #31
 800858a:	2201      	movs	r2, #1
 800858c:	409a      	lsls	r2, r3
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a4f      	ldr	r2, [pc, #316]	; (80086d4 <HAL_DMA_Abort+0x5dc>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d072      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a4d      	ldr	r2, [pc, #308]	; (80086d8 <HAL_DMA_Abort+0x5e0>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d06d      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a4c      	ldr	r2, [pc, #304]	; (80086dc <HAL_DMA_Abort+0x5e4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d068      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a4a      	ldr	r2, [pc, #296]	; (80086e0 <HAL_DMA_Abort+0x5e8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d063      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a49      	ldr	r2, [pc, #292]	; (80086e4 <HAL_DMA_Abort+0x5ec>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d05e      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a47      	ldr	r2, [pc, #284]	; (80086e8 <HAL_DMA_Abort+0x5f0>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d059      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a46      	ldr	r2, [pc, #280]	; (80086ec <HAL_DMA_Abort+0x5f4>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d054      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a44      	ldr	r2, [pc, #272]	; (80086f0 <HAL_DMA_Abort+0x5f8>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d04f      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a43      	ldr	r2, [pc, #268]	; (80086f4 <HAL_DMA_Abort+0x5fc>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d04a      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a41      	ldr	r2, [pc, #260]	; (80086f8 <HAL_DMA_Abort+0x600>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d045      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a40      	ldr	r2, [pc, #256]	; (80086fc <HAL_DMA_Abort+0x604>)
 80085fc:	4293      	cmp	r3, r2
 80085fe:	d040      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a3e      	ldr	r2, [pc, #248]	; (8008700 <HAL_DMA_Abort+0x608>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d03b      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	4a3d      	ldr	r2, [pc, #244]	; (8008704 <HAL_DMA_Abort+0x60c>)
 8008610:	4293      	cmp	r3, r2
 8008612:	d036      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4a3b      	ldr	r2, [pc, #236]	; (8008708 <HAL_DMA_Abort+0x610>)
 800861a:	4293      	cmp	r3, r2
 800861c:	d031      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4a3a      	ldr	r2, [pc, #232]	; (800870c <HAL_DMA_Abort+0x614>)
 8008624:	4293      	cmp	r3, r2
 8008626:	d02c      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	4a38      	ldr	r2, [pc, #224]	; (8008710 <HAL_DMA_Abort+0x618>)
 800862e:	4293      	cmp	r3, r2
 8008630:	d027      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	4a37      	ldr	r2, [pc, #220]	; (8008714 <HAL_DMA_Abort+0x61c>)
 8008638:	4293      	cmp	r3, r2
 800863a:	d022      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	4a35      	ldr	r2, [pc, #212]	; (8008718 <HAL_DMA_Abort+0x620>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01d      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4a34      	ldr	r2, [pc, #208]	; (800871c <HAL_DMA_Abort+0x624>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d018      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	4a32      	ldr	r2, [pc, #200]	; (8008720 <HAL_DMA_Abort+0x628>)
 8008656:	4293      	cmp	r3, r2
 8008658:	d013      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4a31      	ldr	r2, [pc, #196]	; (8008724 <HAL_DMA_Abort+0x62c>)
 8008660:	4293      	cmp	r3, r2
 8008662:	d00e      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4a2f      	ldr	r2, [pc, #188]	; (8008728 <HAL_DMA_Abort+0x630>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d009      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	4a2e      	ldr	r2, [pc, #184]	; (800872c <HAL_DMA_Abort+0x634>)
 8008674:	4293      	cmp	r3, r2
 8008676:	d004      	beq.n	8008682 <HAL_DMA_Abort+0x58a>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a2c      	ldr	r2, [pc, #176]	; (8008730 <HAL_DMA_Abort+0x638>)
 800867e:	4293      	cmp	r3, r2
 8008680:	d101      	bne.n	8008686 <HAL_DMA_Abort+0x58e>
 8008682:	2301      	movs	r3, #1
 8008684:	e000      	b.n	8008688 <HAL_DMA_Abort+0x590>
 8008686:	2300      	movs	r3, #0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d015      	beq.n	80086b8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008690:	687a      	ldr	r2, [r7, #4]
 8008692:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008694:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00c      	beq.n	80086b8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a2:	681a      	ldr	r2, [r3, #0]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80086a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80086ac:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80086b6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2201      	movs	r2, #1
 80086bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3718      	adds	r7, #24
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}
 80086d2:	bf00      	nop
 80086d4:	40020010 	.word	0x40020010
 80086d8:	40020028 	.word	0x40020028
 80086dc:	40020040 	.word	0x40020040
 80086e0:	40020058 	.word	0x40020058
 80086e4:	40020070 	.word	0x40020070
 80086e8:	40020088 	.word	0x40020088
 80086ec:	400200a0 	.word	0x400200a0
 80086f0:	400200b8 	.word	0x400200b8
 80086f4:	40020410 	.word	0x40020410
 80086f8:	40020428 	.word	0x40020428
 80086fc:	40020440 	.word	0x40020440
 8008700:	40020458 	.word	0x40020458
 8008704:	40020470 	.word	0x40020470
 8008708:	40020488 	.word	0x40020488
 800870c:	400204a0 	.word	0x400204a0
 8008710:	400204b8 	.word	0x400204b8
 8008714:	58025408 	.word	0x58025408
 8008718:	5802541c 	.word	0x5802541c
 800871c:	58025430 	.word	0x58025430
 8008720:	58025444 	.word	0x58025444
 8008724:	58025458 	.word	0x58025458
 8008728:	5802546c 	.word	0x5802546c
 800872c:	58025480 	.word	0x58025480
 8008730:	58025494 	.word	0x58025494

08008734 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b084      	sub	sp, #16
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e237      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b02      	cmp	r3, #2
 8008750:	d004      	beq.n	800875c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2280      	movs	r2, #128	; 0x80
 8008756:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e22c      	b.n	8008bb6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a5c      	ldr	r2, [pc, #368]	; (80088d4 <HAL_DMA_Abort_IT+0x1a0>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d04a      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a5b      	ldr	r2, [pc, #364]	; (80088d8 <HAL_DMA_Abort_IT+0x1a4>)
 800876c:	4293      	cmp	r3, r2
 800876e:	d045      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a59      	ldr	r2, [pc, #356]	; (80088dc <HAL_DMA_Abort_IT+0x1a8>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d040      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a58      	ldr	r2, [pc, #352]	; (80088e0 <HAL_DMA_Abort_IT+0x1ac>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d03b      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	4a56      	ldr	r2, [pc, #344]	; (80088e4 <HAL_DMA_Abort_IT+0x1b0>)
 800878a:	4293      	cmp	r3, r2
 800878c:	d036      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a55      	ldr	r2, [pc, #340]	; (80088e8 <HAL_DMA_Abort_IT+0x1b4>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d031      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a53      	ldr	r2, [pc, #332]	; (80088ec <HAL_DMA_Abort_IT+0x1b8>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d02c      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4a52      	ldr	r2, [pc, #328]	; (80088f0 <HAL_DMA_Abort_IT+0x1bc>)
 80087a8:	4293      	cmp	r3, r2
 80087aa:	d027      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	4a50      	ldr	r2, [pc, #320]	; (80088f4 <HAL_DMA_Abort_IT+0x1c0>)
 80087b2:	4293      	cmp	r3, r2
 80087b4:	d022      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4a4f      	ldr	r2, [pc, #316]	; (80088f8 <HAL_DMA_Abort_IT+0x1c4>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d01d      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a4d      	ldr	r2, [pc, #308]	; (80088fc <HAL_DMA_Abort_IT+0x1c8>)
 80087c6:	4293      	cmp	r3, r2
 80087c8:	d018      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	4a4c      	ldr	r2, [pc, #304]	; (8008900 <HAL_DMA_Abort_IT+0x1cc>)
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d013      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a4a      	ldr	r2, [pc, #296]	; (8008904 <HAL_DMA_Abort_IT+0x1d0>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d00e      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a49      	ldr	r2, [pc, #292]	; (8008908 <HAL_DMA_Abort_IT+0x1d4>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d009      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4a47      	ldr	r2, [pc, #284]	; (800890c <HAL_DMA_Abort_IT+0x1d8>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d004      	beq.n	80087fc <HAL_DMA_Abort_IT+0xc8>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	4a46      	ldr	r2, [pc, #280]	; (8008910 <HAL_DMA_Abort_IT+0x1dc>)
 80087f8:	4293      	cmp	r3, r2
 80087fa:	d101      	bne.n	8008800 <HAL_DMA_Abort_IT+0xcc>
 80087fc:	2301      	movs	r3, #1
 80087fe:	e000      	b.n	8008802 <HAL_DMA_Abort_IT+0xce>
 8008800:	2300      	movs	r3, #0
 8008802:	2b00      	cmp	r3, #0
 8008804:	f000 8086 	beq.w	8008914 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2204      	movs	r2, #4
 800880c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a2f      	ldr	r2, [pc, #188]	; (80088d4 <HAL_DMA_Abort_IT+0x1a0>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d04a      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	4a2e      	ldr	r2, [pc, #184]	; (80088d8 <HAL_DMA_Abort_IT+0x1a4>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d045      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	4a2c      	ldr	r2, [pc, #176]	; (80088dc <HAL_DMA_Abort_IT+0x1a8>)
 800882a:	4293      	cmp	r3, r2
 800882c:	d040      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a2b      	ldr	r2, [pc, #172]	; (80088e0 <HAL_DMA_Abort_IT+0x1ac>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d03b      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a29      	ldr	r2, [pc, #164]	; (80088e4 <HAL_DMA_Abort_IT+0x1b0>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d036      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	4a28      	ldr	r2, [pc, #160]	; (80088e8 <HAL_DMA_Abort_IT+0x1b4>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d031      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	4a26      	ldr	r2, [pc, #152]	; (80088ec <HAL_DMA_Abort_IT+0x1b8>)
 8008852:	4293      	cmp	r3, r2
 8008854:	d02c      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4a25      	ldr	r2, [pc, #148]	; (80088f0 <HAL_DMA_Abort_IT+0x1bc>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d027      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	4a23      	ldr	r2, [pc, #140]	; (80088f4 <HAL_DMA_Abort_IT+0x1c0>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d022      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	4a22      	ldr	r2, [pc, #136]	; (80088f8 <HAL_DMA_Abort_IT+0x1c4>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d01d      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	4a20      	ldr	r2, [pc, #128]	; (80088fc <HAL_DMA_Abort_IT+0x1c8>)
 800887a:	4293      	cmp	r3, r2
 800887c:	d018      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	4a1f      	ldr	r2, [pc, #124]	; (8008900 <HAL_DMA_Abort_IT+0x1cc>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d013      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	4a1d      	ldr	r2, [pc, #116]	; (8008904 <HAL_DMA_Abort_IT+0x1d0>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d00e      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a1c      	ldr	r2, [pc, #112]	; (8008908 <HAL_DMA_Abort_IT+0x1d4>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d009      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	4a1a      	ldr	r2, [pc, #104]	; (800890c <HAL_DMA_Abort_IT+0x1d8>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d004      	beq.n	80088b0 <HAL_DMA_Abort_IT+0x17c>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a19      	ldr	r2, [pc, #100]	; (8008910 <HAL_DMA_Abort_IT+0x1dc>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d108      	bne.n	80088c2 <HAL_DMA_Abort_IT+0x18e>
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	681a      	ldr	r2, [r3, #0]
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0201 	bic.w	r2, r2, #1
 80088be:	601a      	str	r2, [r3, #0]
 80088c0:	e178      	b.n	8008bb4 <HAL_DMA_Abort_IT+0x480>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681a      	ldr	r2, [r3, #0]
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f022 0201 	bic.w	r2, r2, #1
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	e16f      	b.n	8008bb4 <HAL_DMA_Abort_IT+0x480>
 80088d4:	40020010 	.word	0x40020010
 80088d8:	40020028 	.word	0x40020028
 80088dc:	40020040 	.word	0x40020040
 80088e0:	40020058 	.word	0x40020058
 80088e4:	40020070 	.word	0x40020070
 80088e8:	40020088 	.word	0x40020088
 80088ec:	400200a0 	.word	0x400200a0
 80088f0:	400200b8 	.word	0x400200b8
 80088f4:	40020410 	.word	0x40020410
 80088f8:	40020428 	.word	0x40020428
 80088fc:	40020440 	.word	0x40020440
 8008900:	40020458 	.word	0x40020458
 8008904:	40020470 	.word	0x40020470
 8008908:	40020488 	.word	0x40020488
 800890c:	400204a0 	.word	0x400204a0
 8008910:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	681a      	ldr	r2, [r3, #0]
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	f022 020e 	bic.w	r2, r2, #14
 8008922:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	4a6c      	ldr	r2, [pc, #432]	; (8008adc <HAL_DMA_Abort_IT+0x3a8>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d04a      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4a6b      	ldr	r2, [pc, #428]	; (8008ae0 <HAL_DMA_Abort_IT+0x3ac>)
 8008934:	4293      	cmp	r3, r2
 8008936:	d045      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	4a69      	ldr	r2, [pc, #420]	; (8008ae4 <HAL_DMA_Abort_IT+0x3b0>)
 800893e:	4293      	cmp	r3, r2
 8008940:	d040      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a68      	ldr	r2, [pc, #416]	; (8008ae8 <HAL_DMA_Abort_IT+0x3b4>)
 8008948:	4293      	cmp	r3, r2
 800894a:	d03b      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a66      	ldr	r2, [pc, #408]	; (8008aec <HAL_DMA_Abort_IT+0x3b8>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d036      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	4a65      	ldr	r2, [pc, #404]	; (8008af0 <HAL_DMA_Abort_IT+0x3bc>)
 800895c:	4293      	cmp	r3, r2
 800895e:	d031      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4a63      	ldr	r2, [pc, #396]	; (8008af4 <HAL_DMA_Abort_IT+0x3c0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d02c      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	4a62      	ldr	r2, [pc, #392]	; (8008af8 <HAL_DMA_Abort_IT+0x3c4>)
 8008970:	4293      	cmp	r3, r2
 8008972:	d027      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	4a60      	ldr	r2, [pc, #384]	; (8008afc <HAL_DMA_Abort_IT+0x3c8>)
 800897a:	4293      	cmp	r3, r2
 800897c:	d022      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	4a5f      	ldr	r2, [pc, #380]	; (8008b00 <HAL_DMA_Abort_IT+0x3cc>)
 8008984:	4293      	cmp	r3, r2
 8008986:	d01d      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	4a5d      	ldr	r2, [pc, #372]	; (8008b04 <HAL_DMA_Abort_IT+0x3d0>)
 800898e:	4293      	cmp	r3, r2
 8008990:	d018      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	4a5c      	ldr	r2, [pc, #368]	; (8008b08 <HAL_DMA_Abort_IT+0x3d4>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d013      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	4a5a      	ldr	r2, [pc, #360]	; (8008b0c <HAL_DMA_Abort_IT+0x3d8>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d00e      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	4a59      	ldr	r2, [pc, #356]	; (8008b10 <HAL_DMA_Abort_IT+0x3dc>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d009      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	4a57      	ldr	r2, [pc, #348]	; (8008b14 <HAL_DMA_Abort_IT+0x3e0>)
 80089b6:	4293      	cmp	r3, r2
 80089b8:	d004      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x290>
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	681b      	ldr	r3, [r3, #0]
 80089be:	4a56      	ldr	r2, [pc, #344]	; (8008b18 <HAL_DMA_Abort_IT+0x3e4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d108      	bne.n	80089d6 <HAL_DMA_Abort_IT+0x2a2>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f022 0201 	bic.w	r2, r2, #1
 80089d2:	601a      	str	r2, [r3, #0]
 80089d4:	e007      	b.n	80089e6 <HAL_DMA_Abort_IT+0x2b2>
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	681a      	ldr	r2, [r3, #0]
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f022 0201 	bic.w	r2, r2, #1
 80089e4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a3c      	ldr	r2, [pc, #240]	; (8008adc <HAL_DMA_Abort_IT+0x3a8>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d072      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a3a      	ldr	r2, [pc, #232]	; (8008ae0 <HAL_DMA_Abort_IT+0x3ac>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d06d      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a39      	ldr	r2, [pc, #228]	; (8008ae4 <HAL_DMA_Abort_IT+0x3b0>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d068      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a37      	ldr	r2, [pc, #220]	; (8008ae8 <HAL_DMA_Abort_IT+0x3b4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d063      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	4a36      	ldr	r2, [pc, #216]	; (8008aec <HAL_DMA_Abort_IT+0x3b8>)
 8008a14:	4293      	cmp	r3, r2
 8008a16:	d05e      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a34      	ldr	r2, [pc, #208]	; (8008af0 <HAL_DMA_Abort_IT+0x3bc>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d059      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a33      	ldr	r2, [pc, #204]	; (8008af4 <HAL_DMA_Abort_IT+0x3c0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d054      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a31      	ldr	r2, [pc, #196]	; (8008af8 <HAL_DMA_Abort_IT+0x3c4>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d04f      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a30      	ldr	r2, [pc, #192]	; (8008afc <HAL_DMA_Abort_IT+0x3c8>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d04a      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a2e      	ldr	r2, [pc, #184]	; (8008b00 <HAL_DMA_Abort_IT+0x3cc>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d045      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a2d      	ldr	r2, [pc, #180]	; (8008b04 <HAL_DMA_Abort_IT+0x3d0>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d040      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a2b      	ldr	r2, [pc, #172]	; (8008b08 <HAL_DMA_Abort_IT+0x3d4>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d03b      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a2a      	ldr	r2, [pc, #168]	; (8008b0c <HAL_DMA_Abort_IT+0x3d8>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d036      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a28      	ldr	r2, [pc, #160]	; (8008b10 <HAL_DMA_Abort_IT+0x3dc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d031      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a27      	ldr	r2, [pc, #156]	; (8008b14 <HAL_DMA_Abort_IT+0x3e0>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d02c      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a25      	ldr	r2, [pc, #148]	; (8008b18 <HAL_DMA_Abort_IT+0x3e4>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d027      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a24      	ldr	r2, [pc, #144]	; (8008b1c <HAL_DMA_Abort_IT+0x3e8>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d022      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a22      	ldr	r2, [pc, #136]	; (8008b20 <HAL_DMA_Abort_IT+0x3ec>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d01d      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a21      	ldr	r2, [pc, #132]	; (8008b24 <HAL_DMA_Abort_IT+0x3f0>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d018      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a1f      	ldr	r2, [pc, #124]	; (8008b28 <HAL_DMA_Abort_IT+0x3f4>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d013      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a1e      	ldr	r2, [pc, #120]	; (8008b2c <HAL_DMA_Abort_IT+0x3f8>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d00e      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a1c      	ldr	r2, [pc, #112]	; (8008b30 <HAL_DMA_Abort_IT+0x3fc>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d009      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	4a1b      	ldr	r2, [pc, #108]	; (8008b34 <HAL_DMA_Abort_IT+0x400>)
 8008ac8:	4293      	cmp	r3, r2
 8008aca:	d004      	beq.n	8008ad6 <HAL_DMA_Abort_IT+0x3a2>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4a19      	ldr	r2, [pc, #100]	; (8008b38 <HAL_DMA_Abort_IT+0x404>)
 8008ad2:	4293      	cmp	r3, r2
 8008ad4:	d132      	bne.n	8008b3c <HAL_DMA_Abort_IT+0x408>
 8008ad6:	2301      	movs	r3, #1
 8008ad8:	e031      	b.n	8008b3e <HAL_DMA_Abort_IT+0x40a>
 8008ada:	bf00      	nop
 8008adc:	40020010 	.word	0x40020010
 8008ae0:	40020028 	.word	0x40020028
 8008ae4:	40020040 	.word	0x40020040
 8008ae8:	40020058 	.word	0x40020058
 8008aec:	40020070 	.word	0x40020070
 8008af0:	40020088 	.word	0x40020088
 8008af4:	400200a0 	.word	0x400200a0
 8008af8:	400200b8 	.word	0x400200b8
 8008afc:	40020410 	.word	0x40020410
 8008b00:	40020428 	.word	0x40020428
 8008b04:	40020440 	.word	0x40020440
 8008b08:	40020458 	.word	0x40020458
 8008b0c:	40020470 	.word	0x40020470
 8008b10:	40020488 	.word	0x40020488
 8008b14:	400204a0 	.word	0x400204a0
 8008b18:	400204b8 	.word	0x400204b8
 8008b1c:	58025408 	.word	0x58025408
 8008b20:	5802541c 	.word	0x5802541c
 8008b24:	58025430 	.word	0x58025430
 8008b28:	58025444 	.word	0x58025444
 8008b2c:	58025458 	.word	0x58025458
 8008b30:	5802546c 	.word	0x5802546c
 8008b34:	58025480 	.word	0x58025480
 8008b38:	58025494 	.word	0x58025494
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d028      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b46:	681a      	ldr	r2, [r3, #0]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b50:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b56:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b5c:	f003 031f 	and.w	r3, r3, #31
 8008b60:	2201      	movs	r2, #1
 8008b62:	409a      	lsls	r2, r3
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008b6c:	687a      	ldr	r2, [r7, #4]
 8008b6e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8008b70:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00c      	beq.n	8008b94 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b7e:	681a      	ldr	r2, [r3, #0]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008b84:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008b88:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b8e:	687a      	ldr	r2, [r7, #4]
 8008b90:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8008b92:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2201      	movs	r2, #1
 8008b98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d003      	beq.n	8008bb4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008bb0:	6878      	ldr	r0, [r7, #4]
 8008bb2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop

08008bc0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b08a      	sub	sp, #40	; 0x28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8008bc8:	2300      	movs	r3, #0
 8008bca:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8008bcc:	4b67      	ldr	r3, [pc, #412]	; (8008d6c <HAL_DMA_IRQHandler+0x1ac>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	4a67      	ldr	r2, [pc, #412]	; (8008d70 <HAL_DMA_IRQHandler+0x1b0>)
 8008bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8008bd6:	0a9b      	lsrs	r3, r3, #10
 8008bd8:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bde:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008be4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008be6:	6a3b      	ldr	r3, [r7, #32]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a5f      	ldr	r2, [pc, #380]	; (8008d74 <HAL_DMA_IRQHandler+0x1b4>)
 8008bf8:	4293      	cmp	r3, r2
 8008bfa:	d04a      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	4a5d      	ldr	r2, [pc, #372]	; (8008d78 <HAL_DMA_IRQHandler+0x1b8>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d045      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a5c      	ldr	r2, [pc, #368]	; (8008d7c <HAL_DMA_IRQHandler+0x1bc>)
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d040      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4a5a      	ldr	r2, [pc, #360]	; (8008d80 <HAL_DMA_IRQHandler+0x1c0>)
 8008c16:	4293      	cmp	r3, r2
 8008c18:	d03b      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4a59      	ldr	r2, [pc, #356]	; (8008d84 <HAL_DMA_IRQHandler+0x1c4>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d036      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a57      	ldr	r2, [pc, #348]	; (8008d88 <HAL_DMA_IRQHandler+0x1c8>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d031      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a56      	ldr	r2, [pc, #344]	; (8008d8c <HAL_DMA_IRQHandler+0x1cc>)
 8008c34:	4293      	cmp	r3, r2
 8008c36:	d02c      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	4a54      	ldr	r2, [pc, #336]	; (8008d90 <HAL_DMA_IRQHandler+0x1d0>)
 8008c3e:	4293      	cmp	r3, r2
 8008c40:	d027      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4a53      	ldr	r2, [pc, #332]	; (8008d94 <HAL_DMA_IRQHandler+0x1d4>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	d022      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	4a51      	ldr	r2, [pc, #324]	; (8008d98 <HAL_DMA_IRQHandler+0x1d8>)
 8008c52:	4293      	cmp	r3, r2
 8008c54:	d01d      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	4a50      	ldr	r2, [pc, #320]	; (8008d9c <HAL_DMA_IRQHandler+0x1dc>)
 8008c5c:	4293      	cmp	r3, r2
 8008c5e:	d018      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	4a4e      	ldr	r2, [pc, #312]	; (8008da0 <HAL_DMA_IRQHandler+0x1e0>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	4a4d      	ldr	r2, [pc, #308]	; (8008da4 <HAL_DMA_IRQHandler+0x1e4>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d00e      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a4b      	ldr	r2, [pc, #300]	; (8008da8 <HAL_DMA_IRQHandler+0x1e8>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d009      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a4a      	ldr	r2, [pc, #296]	; (8008dac <HAL_DMA_IRQHandler+0x1ec>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d004      	beq.n	8008c92 <HAL_DMA_IRQHandler+0xd2>
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	4a48      	ldr	r2, [pc, #288]	; (8008db0 <HAL_DMA_IRQHandler+0x1f0>)
 8008c8e:	4293      	cmp	r3, r2
 8008c90:	d101      	bne.n	8008c96 <HAL_DMA_IRQHandler+0xd6>
 8008c92:	2301      	movs	r3, #1
 8008c94:	e000      	b.n	8008c98 <HAL_DMA_IRQHandler+0xd8>
 8008c96:	2300      	movs	r3, #0
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	f000 842b 	beq.w	80094f4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ca2:	f003 031f 	and.w	r3, r3, #31
 8008ca6:	2208      	movs	r2, #8
 8008ca8:	409a      	lsls	r2, r3
 8008caa:	69bb      	ldr	r3, [r7, #24]
 8008cac:	4013      	ands	r3, r2
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	f000 80a2 	beq.w	8008df8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a2e      	ldr	r2, [pc, #184]	; (8008d74 <HAL_DMA_IRQHandler+0x1b4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d04a      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a2d      	ldr	r2, [pc, #180]	; (8008d78 <HAL_DMA_IRQHandler+0x1b8>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d045      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	4a2b      	ldr	r2, [pc, #172]	; (8008d7c <HAL_DMA_IRQHandler+0x1bc>)
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d040      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	4a2a      	ldr	r2, [pc, #168]	; (8008d80 <HAL_DMA_IRQHandler+0x1c0>)
 8008cd8:	4293      	cmp	r3, r2
 8008cda:	d03b      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	4a28      	ldr	r2, [pc, #160]	; (8008d84 <HAL_DMA_IRQHandler+0x1c4>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d036      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	4a27      	ldr	r2, [pc, #156]	; (8008d88 <HAL_DMA_IRQHandler+0x1c8>)
 8008cec:	4293      	cmp	r3, r2
 8008cee:	d031      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	4a25      	ldr	r2, [pc, #148]	; (8008d8c <HAL_DMA_IRQHandler+0x1cc>)
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d02c      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a24      	ldr	r2, [pc, #144]	; (8008d90 <HAL_DMA_IRQHandler+0x1d0>)
 8008d00:	4293      	cmp	r3, r2
 8008d02:	d027      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	4a22      	ldr	r2, [pc, #136]	; (8008d94 <HAL_DMA_IRQHandler+0x1d4>)
 8008d0a:	4293      	cmp	r3, r2
 8008d0c:	d022      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a21      	ldr	r2, [pc, #132]	; (8008d98 <HAL_DMA_IRQHandler+0x1d8>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d01d      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a1f      	ldr	r2, [pc, #124]	; (8008d9c <HAL_DMA_IRQHandler+0x1dc>)
 8008d1e:	4293      	cmp	r3, r2
 8008d20:	d018      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	4a1e      	ldr	r2, [pc, #120]	; (8008da0 <HAL_DMA_IRQHandler+0x1e0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d013      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	4a1c      	ldr	r2, [pc, #112]	; (8008da4 <HAL_DMA_IRQHandler+0x1e4>)
 8008d32:	4293      	cmp	r3, r2
 8008d34:	d00e      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	4a1b      	ldr	r2, [pc, #108]	; (8008da8 <HAL_DMA_IRQHandler+0x1e8>)
 8008d3c:	4293      	cmp	r3, r2
 8008d3e:	d009      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	4a19      	ldr	r2, [pc, #100]	; (8008dac <HAL_DMA_IRQHandler+0x1ec>)
 8008d46:	4293      	cmp	r3, r2
 8008d48:	d004      	beq.n	8008d54 <HAL_DMA_IRQHandler+0x194>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	4a18      	ldr	r2, [pc, #96]	; (8008db0 <HAL_DMA_IRQHandler+0x1f0>)
 8008d50:	4293      	cmp	r3, r2
 8008d52:	d12f      	bne.n	8008db4 <HAL_DMA_IRQHandler+0x1f4>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0304 	and.w	r3, r3, #4
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	bf14      	ite	ne
 8008d62:	2301      	movne	r3, #1
 8008d64:	2300      	moveq	r3, #0
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	e02e      	b.n	8008dc8 <HAL_DMA_IRQHandler+0x208>
 8008d6a:	bf00      	nop
 8008d6c:	24000004 	.word	0x24000004
 8008d70:	1b4e81b5 	.word	0x1b4e81b5
 8008d74:	40020010 	.word	0x40020010
 8008d78:	40020028 	.word	0x40020028
 8008d7c:	40020040 	.word	0x40020040
 8008d80:	40020058 	.word	0x40020058
 8008d84:	40020070 	.word	0x40020070
 8008d88:	40020088 	.word	0x40020088
 8008d8c:	400200a0 	.word	0x400200a0
 8008d90:	400200b8 	.word	0x400200b8
 8008d94:	40020410 	.word	0x40020410
 8008d98:	40020428 	.word	0x40020428
 8008d9c:	40020440 	.word	0x40020440
 8008da0:	40020458 	.word	0x40020458
 8008da4:	40020470 	.word	0x40020470
 8008da8:	40020488 	.word	0x40020488
 8008dac:	400204a0 	.word	0x400204a0
 8008db0:	400204b8 	.word	0x400204b8
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	f003 0308 	and.w	r3, r3, #8
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	bf14      	ite	ne
 8008dc2:	2301      	movne	r3, #1
 8008dc4:	2300      	moveq	r3, #0
 8008dc6:	b2db      	uxtb	r3, r3
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d015      	beq.n	8008df8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f022 0204 	bic.w	r2, r2, #4
 8008dda:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008de0:	f003 031f 	and.w	r3, r3, #31
 8008de4:	2208      	movs	r2, #8
 8008de6:	409a      	lsls	r2, r3
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008df0:	f043 0201 	orr.w	r2, r3, #1
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008dfc:	f003 031f 	and.w	r3, r3, #31
 8008e00:	69ba      	ldr	r2, [r7, #24]
 8008e02:	fa22 f303 	lsr.w	r3, r2, r3
 8008e06:	f003 0301 	and.w	r3, r3, #1
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d06e      	beq.n	8008eec <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	4a69      	ldr	r2, [pc, #420]	; (8008fb8 <HAL_DMA_IRQHandler+0x3f8>)
 8008e14:	4293      	cmp	r3, r2
 8008e16:	d04a      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	4a67      	ldr	r2, [pc, #412]	; (8008fbc <HAL_DMA_IRQHandler+0x3fc>)
 8008e1e:	4293      	cmp	r3, r2
 8008e20:	d045      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	4a66      	ldr	r2, [pc, #408]	; (8008fc0 <HAL_DMA_IRQHandler+0x400>)
 8008e28:	4293      	cmp	r3, r2
 8008e2a:	d040      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	4a64      	ldr	r2, [pc, #400]	; (8008fc4 <HAL_DMA_IRQHandler+0x404>)
 8008e32:	4293      	cmp	r3, r2
 8008e34:	d03b      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a63      	ldr	r2, [pc, #396]	; (8008fc8 <HAL_DMA_IRQHandler+0x408>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d036      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	4a61      	ldr	r2, [pc, #388]	; (8008fcc <HAL_DMA_IRQHandler+0x40c>)
 8008e46:	4293      	cmp	r3, r2
 8008e48:	d031      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a60      	ldr	r2, [pc, #384]	; (8008fd0 <HAL_DMA_IRQHandler+0x410>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d02c      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a5e      	ldr	r2, [pc, #376]	; (8008fd4 <HAL_DMA_IRQHandler+0x414>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d027      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a5d      	ldr	r2, [pc, #372]	; (8008fd8 <HAL_DMA_IRQHandler+0x418>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d022      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a5b      	ldr	r2, [pc, #364]	; (8008fdc <HAL_DMA_IRQHandler+0x41c>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d01d      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	4a5a      	ldr	r2, [pc, #360]	; (8008fe0 <HAL_DMA_IRQHandler+0x420>)
 8008e78:	4293      	cmp	r3, r2
 8008e7a:	d018      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a58      	ldr	r2, [pc, #352]	; (8008fe4 <HAL_DMA_IRQHandler+0x424>)
 8008e82:	4293      	cmp	r3, r2
 8008e84:	d013      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	4a57      	ldr	r2, [pc, #348]	; (8008fe8 <HAL_DMA_IRQHandler+0x428>)
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	d00e      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	4a55      	ldr	r2, [pc, #340]	; (8008fec <HAL_DMA_IRQHandler+0x42c>)
 8008e96:	4293      	cmp	r3, r2
 8008e98:	d009      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	4a54      	ldr	r2, [pc, #336]	; (8008ff0 <HAL_DMA_IRQHandler+0x430>)
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d004      	beq.n	8008eae <HAL_DMA_IRQHandler+0x2ee>
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	4a52      	ldr	r2, [pc, #328]	; (8008ff4 <HAL_DMA_IRQHandler+0x434>)
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d10a      	bne.n	8008ec4 <HAL_DMA_IRQHandler+0x304>
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	695b      	ldr	r3, [r3, #20]
 8008eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	bf14      	ite	ne
 8008ebc:	2301      	movne	r3, #1
 8008ebe:	2300      	moveq	r3, #0
 8008ec0:	b2db      	uxtb	r3, r3
 8008ec2:	e003      	b.n	8008ecc <HAL_DMA_IRQHandler+0x30c>
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2300      	movs	r3, #0
 8008ecc:	2b00      	cmp	r3, #0
 8008ece:	d00d      	beq.n	8008eec <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ed4:	f003 031f 	and.w	r3, r3, #31
 8008ed8:	2201      	movs	r2, #1
 8008eda:	409a      	lsls	r2, r3
 8008edc:	6a3b      	ldr	r3, [r7, #32]
 8008ede:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ee4:	f043 0202 	orr.w	r2, r3, #2
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ef0:	f003 031f 	and.w	r3, r3, #31
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	409a      	lsls	r2, r3
 8008ef8:	69bb      	ldr	r3, [r7, #24]
 8008efa:	4013      	ands	r3, r2
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	f000 808f 	beq.w	8009020 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a2c      	ldr	r2, [pc, #176]	; (8008fb8 <HAL_DMA_IRQHandler+0x3f8>)
 8008f08:	4293      	cmp	r3, r2
 8008f0a:	d04a      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	4a2a      	ldr	r2, [pc, #168]	; (8008fbc <HAL_DMA_IRQHandler+0x3fc>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d045      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	4a29      	ldr	r2, [pc, #164]	; (8008fc0 <HAL_DMA_IRQHandler+0x400>)
 8008f1c:	4293      	cmp	r3, r2
 8008f1e:	d040      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	4a27      	ldr	r2, [pc, #156]	; (8008fc4 <HAL_DMA_IRQHandler+0x404>)
 8008f26:	4293      	cmp	r3, r2
 8008f28:	d03b      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	4a26      	ldr	r2, [pc, #152]	; (8008fc8 <HAL_DMA_IRQHandler+0x408>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d036      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a24      	ldr	r2, [pc, #144]	; (8008fcc <HAL_DMA_IRQHandler+0x40c>)
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d031      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	4a23      	ldr	r2, [pc, #140]	; (8008fd0 <HAL_DMA_IRQHandler+0x410>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d02c      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	4a21      	ldr	r2, [pc, #132]	; (8008fd4 <HAL_DMA_IRQHandler+0x414>)
 8008f4e:	4293      	cmp	r3, r2
 8008f50:	d027      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	4a20      	ldr	r2, [pc, #128]	; (8008fd8 <HAL_DMA_IRQHandler+0x418>)
 8008f58:	4293      	cmp	r3, r2
 8008f5a:	d022      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4a1e      	ldr	r2, [pc, #120]	; (8008fdc <HAL_DMA_IRQHandler+0x41c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d01d      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	4a1d      	ldr	r2, [pc, #116]	; (8008fe0 <HAL_DMA_IRQHandler+0x420>)
 8008f6c:	4293      	cmp	r3, r2
 8008f6e:	d018      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	4a1b      	ldr	r2, [pc, #108]	; (8008fe4 <HAL_DMA_IRQHandler+0x424>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d013      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	4a1a      	ldr	r2, [pc, #104]	; (8008fe8 <HAL_DMA_IRQHandler+0x428>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d00e      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	4a18      	ldr	r2, [pc, #96]	; (8008fec <HAL_DMA_IRQHandler+0x42c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d009      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	4a17      	ldr	r2, [pc, #92]	; (8008ff0 <HAL_DMA_IRQHandler+0x430>)
 8008f94:	4293      	cmp	r3, r2
 8008f96:	d004      	beq.n	8008fa2 <HAL_DMA_IRQHandler+0x3e2>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a15      	ldr	r2, [pc, #84]	; (8008ff4 <HAL_DMA_IRQHandler+0x434>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d12a      	bne.n	8008ff8 <HAL_DMA_IRQHandler+0x438>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0302 	and.w	r3, r3, #2
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	bf14      	ite	ne
 8008fb0:	2301      	movne	r3, #1
 8008fb2:	2300      	moveq	r3, #0
 8008fb4:	b2db      	uxtb	r3, r3
 8008fb6:	e023      	b.n	8009000 <HAL_DMA_IRQHandler+0x440>
 8008fb8:	40020010 	.word	0x40020010
 8008fbc:	40020028 	.word	0x40020028
 8008fc0:	40020040 	.word	0x40020040
 8008fc4:	40020058 	.word	0x40020058
 8008fc8:	40020070 	.word	0x40020070
 8008fcc:	40020088 	.word	0x40020088
 8008fd0:	400200a0 	.word	0x400200a0
 8008fd4:	400200b8 	.word	0x400200b8
 8008fd8:	40020410 	.word	0x40020410
 8008fdc:	40020428 	.word	0x40020428
 8008fe0:	40020440 	.word	0x40020440
 8008fe4:	40020458 	.word	0x40020458
 8008fe8:	40020470 	.word	0x40020470
 8008fec:	40020488 	.word	0x40020488
 8008ff0:	400204a0 	.word	0x400204a0
 8008ff4:	400204b8 	.word	0x400204b8
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	2300      	movs	r3, #0
 8009000:	2b00      	cmp	r3, #0
 8009002:	d00d      	beq.n	8009020 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	2204      	movs	r2, #4
 800900e:	409a      	lsls	r2, r3
 8009010:	6a3b      	ldr	r3, [r7, #32]
 8009012:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009018:	f043 0204 	orr.w	r2, r3, #4
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009024:	f003 031f 	and.w	r3, r3, #31
 8009028:	2210      	movs	r2, #16
 800902a:	409a      	lsls	r2, r3
 800902c:	69bb      	ldr	r3, [r7, #24]
 800902e:	4013      	ands	r3, r2
 8009030:	2b00      	cmp	r3, #0
 8009032:	f000 80a6 	beq.w	8009182 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a85      	ldr	r2, [pc, #532]	; (8009250 <HAL_DMA_IRQHandler+0x690>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d04a      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a83      	ldr	r2, [pc, #524]	; (8009254 <HAL_DMA_IRQHandler+0x694>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d045      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a82      	ldr	r2, [pc, #520]	; (8009258 <HAL_DMA_IRQHandler+0x698>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d040      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a80      	ldr	r2, [pc, #512]	; (800925c <HAL_DMA_IRQHandler+0x69c>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d03b      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a7f      	ldr	r2, [pc, #508]	; (8009260 <HAL_DMA_IRQHandler+0x6a0>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d036      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a7d      	ldr	r2, [pc, #500]	; (8009264 <HAL_DMA_IRQHandler+0x6a4>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d031      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a7c      	ldr	r2, [pc, #496]	; (8009268 <HAL_DMA_IRQHandler+0x6a8>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d02c      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a7a      	ldr	r2, [pc, #488]	; (800926c <HAL_DMA_IRQHandler+0x6ac>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d027      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a79      	ldr	r2, [pc, #484]	; (8009270 <HAL_DMA_IRQHandler+0x6b0>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d022      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a77      	ldr	r2, [pc, #476]	; (8009274 <HAL_DMA_IRQHandler+0x6b4>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d01d      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a76      	ldr	r2, [pc, #472]	; (8009278 <HAL_DMA_IRQHandler+0x6b8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d018      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a74      	ldr	r2, [pc, #464]	; (800927c <HAL_DMA_IRQHandler+0x6bc>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d013      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a73      	ldr	r2, [pc, #460]	; (8009280 <HAL_DMA_IRQHandler+0x6c0>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00e      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4a71      	ldr	r2, [pc, #452]	; (8009284 <HAL_DMA_IRQHandler+0x6c4>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d009      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	4a70      	ldr	r2, [pc, #448]	; (8009288 <HAL_DMA_IRQHandler+0x6c8>)
 80090c8:	4293      	cmp	r3, r2
 80090ca:	d004      	beq.n	80090d6 <HAL_DMA_IRQHandler+0x516>
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a6e      	ldr	r2, [pc, #440]	; (800928c <HAL_DMA_IRQHandler+0x6cc>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d10a      	bne.n	80090ec <HAL_DMA_IRQHandler+0x52c>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	bf14      	ite	ne
 80090e4:	2301      	movne	r3, #1
 80090e6:	2300      	moveq	r3, #0
 80090e8:	b2db      	uxtb	r3, r3
 80090ea:	e009      	b.n	8009100 <HAL_DMA_IRQHandler+0x540>
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bf14      	ite	ne
 80090fa:	2301      	movne	r3, #1
 80090fc:	2300      	moveq	r3, #0
 80090fe:	b2db      	uxtb	r3, r3
 8009100:	2b00      	cmp	r3, #0
 8009102:	d03e      	beq.n	8009182 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009108:	f003 031f 	and.w	r3, r3, #31
 800910c:	2210      	movs	r2, #16
 800910e:	409a      	lsls	r2, r3
 8009110:	6a3b      	ldr	r3, [r7, #32]
 8009112:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d018      	beq.n	8009154 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800912c:	2b00      	cmp	r3, #0
 800912e:	d108      	bne.n	8009142 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009134:	2b00      	cmp	r3, #0
 8009136:	d024      	beq.n	8009182 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800913c:	6878      	ldr	r0, [r7, #4]
 800913e:	4798      	blx	r3
 8009140:	e01f      	b.n	8009182 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009146:	2b00      	cmp	r3, #0
 8009148:	d01b      	beq.n	8009182 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	4798      	blx	r3
 8009152:	e016      	b.n	8009182 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800915e:	2b00      	cmp	r3, #0
 8009160:	d107      	bne.n	8009172 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	681a      	ldr	r2, [r3, #0]
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	f022 0208 	bic.w	r2, r2, #8
 8009170:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009176:	2b00      	cmp	r3, #0
 8009178:	d003      	beq.n	8009182 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800917e:	6878      	ldr	r0, [r7, #4]
 8009180:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009186:	f003 031f 	and.w	r3, r3, #31
 800918a:	2220      	movs	r2, #32
 800918c:	409a      	lsls	r2, r3
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	4013      	ands	r3, r2
 8009192:	2b00      	cmp	r3, #0
 8009194:	f000 8110 	beq.w	80093b8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	4a2c      	ldr	r2, [pc, #176]	; (8009250 <HAL_DMA_IRQHandler+0x690>)
 800919e:	4293      	cmp	r3, r2
 80091a0:	d04a      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	4a2b      	ldr	r2, [pc, #172]	; (8009254 <HAL_DMA_IRQHandler+0x694>)
 80091a8:	4293      	cmp	r3, r2
 80091aa:	d045      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	4a29      	ldr	r2, [pc, #164]	; (8009258 <HAL_DMA_IRQHandler+0x698>)
 80091b2:	4293      	cmp	r3, r2
 80091b4:	d040      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	4a28      	ldr	r2, [pc, #160]	; (800925c <HAL_DMA_IRQHandler+0x69c>)
 80091bc:	4293      	cmp	r3, r2
 80091be:	d03b      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a26      	ldr	r2, [pc, #152]	; (8009260 <HAL_DMA_IRQHandler+0x6a0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d036      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	4a25      	ldr	r2, [pc, #148]	; (8009264 <HAL_DMA_IRQHandler+0x6a4>)
 80091d0:	4293      	cmp	r3, r2
 80091d2:	d031      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a23      	ldr	r2, [pc, #140]	; (8009268 <HAL_DMA_IRQHandler+0x6a8>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d02c      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	4a22      	ldr	r2, [pc, #136]	; (800926c <HAL_DMA_IRQHandler+0x6ac>)
 80091e4:	4293      	cmp	r3, r2
 80091e6:	d027      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	4a20      	ldr	r2, [pc, #128]	; (8009270 <HAL_DMA_IRQHandler+0x6b0>)
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d022      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	4a1f      	ldr	r2, [pc, #124]	; (8009274 <HAL_DMA_IRQHandler+0x6b4>)
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d01d      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	4a1d      	ldr	r2, [pc, #116]	; (8009278 <HAL_DMA_IRQHandler+0x6b8>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d018      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a1c      	ldr	r2, [pc, #112]	; (800927c <HAL_DMA_IRQHandler+0x6bc>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d013      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	4a1a      	ldr	r2, [pc, #104]	; (8009280 <HAL_DMA_IRQHandler+0x6c0>)
 8009216:	4293      	cmp	r3, r2
 8009218:	d00e      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4a19      	ldr	r2, [pc, #100]	; (8009284 <HAL_DMA_IRQHandler+0x6c4>)
 8009220:	4293      	cmp	r3, r2
 8009222:	d009      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	4a17      	ldr	r2, [pc, #92]	; (8009288 <HAL_DMA_IRQHandler+0x6c8>)
 800922a:	4293      	cmp	r3, r2
 800922c:	d004      	beq.n	8009238 <HAL_DMA_IRQHandler+0x678>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a16      	ldr	r2, [pc, #88]	; (800928c <HAL_DMA_IRQHandler+0x6cc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d12b      	bne.n	8009290 <HAL_DMA_IRQHandler+0x6d0>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f003 0310 	and.w	r3, r3, #16
 8009242:	2b00      	cmp	r3, #0
 8009244:	bf14      	ite	ne
 8009246:	2301      	movne	r3, #1
 8009248:	2300      	moveq	r3, #0
 800924a:	b2db      	uxtb	r3, r3
 800924c:	e02a      	b.n	80092a4 <HAL_DMA_IRQHandler+0x6e4>
 800924e:	bf00      	nop
 8009250:	40020010 	.word	0x40020010
 8009254:	40020028 	.word	0x40020028
 8009258:	40020040 	.word	0x40020040
 800925c:	40020058 	.word	0x40020058
 8009260:	40020070 	.word	0x40020070
 8009264:	40020088 	.word	0x40020088
 8009268:	400200a0 	.word	0x400200a0
 800926c:	400200b8 	.word	0x400200b8
 8009270:	40020410 	.word	0x40020410
 8009274:	40020428 	.word	0x40020428
 8009278:	40020440 	.word	0x40020440
 800927c:	40020458 	.word	0x40020458
 8009280:	40020470 	.word	0x40020470
 8009284:	40020488 	.word	0x40020488
 8009288:	400204a0 	.word	0x400204a0
 800928c:	400204b8 	.word	0x400204b8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	bf14      	ite	ne
 800929e:	2301      	movne	r3, #1
 80092a0:	2300      	moveq	r3, #0
 80092a2:	b2db      	uxtb	r3, r3
 80092a4:	2b00      	cmp	r3, #0
 80092a6:	f000 8087 	beq.w	80093b8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80092ae:	f003 031f 	and.w	r3, r3, #31
 80092b2:	2220      	movs	r2, #32
 80092b4:	409a      	lsls	r2, r3
 80092b6:	6a3b      	ldr	r3, [r7, #32]
 80092b8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80092c0:	b2db      	uxtb	r3, r3
 80092c2:	2b04      	cmp	r3, #4
 80092c4:	d139      	bne.n	800933a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	681a      	ldr	r2, [r3, #0]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	f022 0216 	bic.w	r2, r2, #22
 80092d4:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	695a      	ldr	r2, [r3, #20]
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80092e4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d103      	bne.n	80092f6 <HAL_DMA_IRQHandler+0x736>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d007      	beq.n	8009306 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f022 0208 	bic.w	r2, r2, #8
 8009304:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800930a:	f003 031f 	and.w	r3, r3, #31
 800930e:	223f      	movs	r2, #63	; 0x3f
 8009310:	409a      	lsls	r2, r3
 8009312:	6a3b      	ldr	r3, [r7, #32]
 8009314:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	2201      	movs	r2, #1
 800931a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800932a:	2b00      	cmp	r3, #0
 800932c:	f000 834a 	beq.w	80099c4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009334:	6878      	ldr	r0, [r7, #4]
 8009336:	4798      	blx	r3
          }
          return;
 8009338:	e344      	b.n	80099c4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009344:	2b00      	cmp	r3, #0
 8009346:	d018      	beq.n	800937a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d108      	bne.n	8009368 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800935a:	2b00      	cmp	r3, #0
 800935c:	d02c      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	4798      	blx	r3
 8009366:	e027      	b.n	80093b8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800936c:	2b00      	cmp	r3, #0
 800936e:	d023      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	4798      	blx	r3
 8009378:	e01e      	b.n	80093b8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10f      	bne.n	80093a8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	681a      	ldr	r2, [r3, #0]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	f022 0210 	bic.w	r2, r2, #16
 8009396:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2200      	movs	r2, #0
 80093a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d003      	beq.n	80093b8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093bc:	2b00      	cmp	r3, #0
 80093be:	f000 8306 	beq.w	80099ce <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093c6:	f003 0301 	and.w	r3, r3, #1
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	f000 8088 	beq.w	80094e0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2204      	movs	r2, #4
 80093d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	4a7a      	ldr	r2, [pc, #488]	; (80095c8 <HAL_DMA_IRQHandler+0xa08>)
 80093de:	4293      	cmp	r3, r2
 80093e0:	d04a      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4a79      	ldr	r2, [pc, #484]	; (80095cc <HAL_DMA_IRQHandler+0xa0c>)
 80093e8:	4293      	cmp	r3, r2
 80093ea:	d045      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a77      	ldr	r2, [pc, #476]	; (80095d0 <HAL_DMA_IRQHandler+0xa10>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d040      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	4a76      	ldr	r2, [pc, #472]	; (80095d4 <HAL_DMA_IRQHandler+0xa14>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d03b      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a74      	ldr	r2, [pc, #464]	; (80095d8 <HAL_DMA_IRQHandler+0xa18>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d036      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a73      	ldr	r2, [pc, #460]	; (80095dc <HAL_DMA_IRQHandler+0xa1c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d031      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a71      	ldr	r2, [pc, #452]	; (80095e0 <HAL_DMA_IRQHandler+0xa20>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d02c      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a70      	ldr	r2, [pc, #448]	; (80095e4 <HAL_DMA_IRQHandler+0xa24>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d027      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a6e      	ldr	r2, [pc, #440]	; (80095e8 <HAL_DMA_IRQHandler+0xa28>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d022      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a6d      	ldr	r2, [pc, #436]	; (80095ec <HAL_DMA_IRQHandler+0xa2c>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d01d      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4a6b      	ldr	r2, [pc, #428]	; (80095f0 <HAL_DMA_IRQHandler+0xa30>)
 8009442:	4293      	cmp	r3, r2
 8009444:	d018      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	4a6a      	ldr	r2, [pc, #424]	; (80095f4 <HAL_DMA_IRQHandler+0xa34>)
 800944c:	4293      	cmp	r3, r2
 800944e:	d013      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	4a68      	ldr	r2, [pc, #416]	; (80095f8 <HAL_DMA_IRQHandler+0xa38>)
 8009456:	4293      	cmp	r3, r2
 8009458:	d00e      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	4a67      	ldr	r2, [pc, #412]	; (80095fc <HAL_DMA_IRQHandler+0xa3c>)
 8009460:	4293      	cmp	r3, r2
 8009462:	d009      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	4a65      	ldr	r2, [pc, #404]	; (8009600 <HAL_DMA_IRQHandler+0xa40>)
 800946a:	4293      	cmp	r3, r2
 800946c:	d004      	beq.n	8009478 <HAL_DMA_IRQHandler+0x8b8>
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	4a64      	ldr	r2, [pc, #400]	; (8009604 <HAL_DMA_IRQHandler+0xa44>)
 8009474:	4293      	cmp	r3, r2
 8009476:	d108      	bne.n	800948a <HAL_DMA_IRQHandler+0x8ca>
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f022 0201 	bic.w	r2, r2, #1
 8009486:	601a      	str	r2, [r3, #0]
 8009488:	e007      	b.n	800949a <HAL_DMA_IRQHandler+0x8da>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	681a      	ldr	r2, [r3, #0]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f022 0201 	bic.w	r2, r2, #1
 8009498:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	3301      	adds	r3, #1
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d307      	bcc.n	80094b6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f003 0301 	and.w	r3, r3, #1
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d1f2      	bne.n	800949a <HAL_DMA_IRQHandler+0x8da>
 80094b4:	e000      	b.n	80094b8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80094b6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	681b      	ldr	r3, [r3, #0]
 80094be:	f003 0301 	and.w	r3, r3, #1
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d004      	beq.n	80094d0 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2203      	movs	r2, #3
 80094ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80094ce:	e003      	b.n	80094d8 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2201      	movs	r2, #1
 80094d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	2200      	movs	r2, #0
 80094dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	f000 8272 	beq.w	80099ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	4798      	blx	r3
 80094f2:	e26c      	b.n	80099ce <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	4a43      	ldr	r2, [pc, #268]	; (8009608 <HAL_DMA_IRQHandler+0xa48>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d022      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a42      	ldr	r2, [pc, #264]	; (800960c <HAL_DMA_IRQHandler+0xa4c>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d01d      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	4a40      	ldr	r2, [pc, #256]	; (8009610 <HAL_DMA_IRQHandler+0xa50>)
 800950e:	4293      	cmp	r3, r2
 8009510:	d018      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	4a3f      	ldr	r2, [pc, #252]	; (8009614 <HAL_DMA_IRQHandler+0xa54>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d013      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	4a3d      	ldr	r2, [pc, #244]	; (8009618 <HAL_DMA_IRQHandler+0xa58>)
 8009522:	4293      	cmp	r3, r2
 8009524:	d00e      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4a3c      	ldr	r2, [pc, #240]	; (800961c <HAL_DMA_IRQHandler+0xa5c>)
 800952c:	4293      	cmp	r3, r2
 800952e:	d009      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	4a3a      	ldr	r2, [pc, #232]	; (8009620 <HAL_DMA_IRQHandler+0xa60>)
 8009536:	4293      	cmp	r3, r2
 8009538:	d004      	beq.n	8009544 <HAL_DMA_IRQHandler+0x984>
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a39      	ldr	r2, [pc, #228]	; (8009624 <HAL_DMA_IRQHandler+0xa64>)
 8009540:	4293      	cmp	r3, r2
 8009542:	d101      	bne.n	8009548 <HAL_DMA_IRQHandler+0x988>
 8009544:	2301      	movs	r3, #1
 8009546:	e000      	b.n	800954a <HAL_DMA_IRQHandler+0x98a>
 8009548:	2300      	movs	r3, #0
 800954a:	2b00      	cmp	r3, #0
 800954c:	f000 823f 	beq.w	80099ce <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955c:	f003 031f 	and.w	r3, r3, #31
 8009560:	2204      	movs	r2, #4
 8009562:	409a      	lsls	r2, r3
 8009564:	697b      	ldr	r3, [r7, #20]
 8009566:	4013      	ands	r3, r2
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 80cd 	beq.w	8009708 <HAL_DMA_IRQHandler+0xb48>
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f003 0304 	and.w	r3, r3, #4
 8009574:	2b00      	cmp	r3, #0
 8009576:	f000 80c7 	beq.w	8009708 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800957e:	f003 031f 	and.w	r3, r3, #31
 8009582:	2204      	movs	r2, #4
 8009584:	409a      	lsls	r2, r3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009590:	2b00      	cmp	r3, #0
 8009592:	d049      	beq.n	8009628 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d109      	bne.n	80095b2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	f000 8210 	beq.w	80099c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095b0:	e20a      	b.n	80099c8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	f000 8206 	beq.w	80099c8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095c0:	6878      	ldr	r0, [r7, #4]
 80095c2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095c4:	e200      	b.n	80099c8 <HAL_DMA_IRQHandler+0xe08>
 80095c6:	bf00      	nop
 80095c8:	40020010 	.word	0x40020010
 80095cc:	40020028 	.word	0x40020028
 80095d0:	40020040 	.word	0x40020040
 80095d4:	40020058 	.word	0x40020058
 80095d8:	40020070 	.word	0x40020070
 80095dc:	40020088 	.word	0x40020088
 80095e0:	400200a0 	.word	0x400200a0
 80095e4:	400200b8 	.word	0x400200b8
 80095e8:	40020410 	.word	0x40020410
 80095ec:	40020428 	.word	0x40020428
 80095f0:	40020440 	.word	0x40020440
 80095f4:	40020458 	.word	0x40020458
 80095f8:	40020470 	.word	0x40020470
 80095fc:	40020488 	.word	0x40020488
 8009600:	400204a0 	.word	0x400204a0
 8009604:	400204b8 	.word	0x400204b8
 8009608:	58025408 	.word	0x58025408
 800960c:	5802541c 	.word	0x5802541c
 8009610:	58025430 	.word	0x58025430
 8009614:	58025444 	.word	0x58025444
 8009618:	58025458 	.word	0x58025458
 800961c:	5802546c 	.word	0x5802546c
 8009620:	58025480 	.word	0x58025480
 8009624:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	f003 0320 	and.w	r3, r3, #32
 800962e:	2b00      	cmp	r3, #0
 8009630:	d160      	bne.n	80096f4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	4a7f      	ldr	r2, [pc, #508]	; (8009834 <HAL_DMA_IRQHandler+0xc74>)
 8009638:	4293      	cmp	r3, r2
 800963a:	d04a      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	4a7d      	ldr	r2, [pc, #500]	; (8009838 <HAL_DMA_IRQHandler+0xc78>)
 8009642:	4293      	cmp	r3, r2
 8009644:	d045      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	4a7c      	ldr	r2, [pc, #496]	; (800983c <HAL_DMA_IRQHandler+0xc7c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d040      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a7a      	ldr	r2, [pc, #488]	; (8009840 <HAL_DMA_IRQHandler+0xc80>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d03b      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a79      	ldr	r2, [pc, #484]	; (8009844 <HAL_DMA_IRQHandler+0xc84>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d036      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	4a77      	ldr	r2, [pc, #476]	; (8009848 <HAL_DMA_IRQHandler+0xc88>)
 800966a:	4293      	cmp	r3, r2
 800966c:	d031      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	4a76      	ldr	r2, [pc, #472]	; (800984c <HAL_DMA_IRQHandler+0xc8c>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d02c      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	4a74      	ldr	r2, [pc, #464]	; (8009850 <HAL_DMA_IRQHandler+0xc90>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d027      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	4a73      	ldr	r2, [pc, #460]	; (8009854 <HAL_DMA_IRQHandler+0xc94>)
 8009688:	4293      	cmp	r3, r2
 800968a:	d022      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a71      	ldr	r2, [pc, #452]	; (8009858 <HAL_DMA_IRQHandler+0xc98>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d01d      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	4a70      	ldr	r2, [pc, #448]	; (800985c <HAL_DMA_IRQHandler+0xc9c>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d018      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a6e      	ldr	r2, [pc, #440]	; (8009860 <HAL_DMA_IRQHandler+0xca0>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d013      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a6d      	ldr	r2, [pc, #436]	; (8009864 <HAL_DMA_IRQHandler+0xca4>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d00e      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a6b      	ldr	r2, [pc, #428]	; (8009868 <HAL_DMA_IRQHandler+0xca8>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d009      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a6a      	ldr	r2, [pc, #424]	; (800986c <HAL_DMA_IRQHandler+0xcac>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d004      	beq.n	80096d2 <HAL_DMA_IRQHandler+0xb12>
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4a68      	ldr	r2, [pc, #416]	; (8009870 <HAL_DMA_IRQHandler+0xcb0>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d108      	bne.n	80096e4 <HAL_DMA_IRQHandler+0xb24>
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	681a      	ldr	r2, [r3, #0]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f022 0208 	bic.w	r2, r2, #8
 80096e0:	601a      	str	r2, [r3, #0]
 80096e2:	e007      	b.n	80096f4 <HAL_DMA_IRQHandler+0xb34>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681a      	ldr	r2, [r3, #0]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	f022 0204 	bic.w	r2, r2, #4
 80096f2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	f000 8165 	beq.w	80099c8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009706:	e15f      	b.n	80099c8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800970c:	f003 031f 	and.w	r3, r3, #31
 8009710:	2202      	movs	r2, #2
 8009712:	409a      	lsls	r2, r3
 8009714:	697b      	ldr	r3, [r7, #20]
 8009716:	4013      	ands	r3, r2
 8009718:	2b00      	cmp	r3, #0
 800971a:	f000 80c5 	beq.w	80098a8 <HAL_DMA_IRQHandler+0xce8>
 800971e:	693b      	ldr	r3, [r7, #16]
 8009720:	f003 0302 	and.w	r3, r3, #2
 8009724:	2b00      	cmp	r3, #0
 8009726:	f000 80bf 	beq.w	80098a8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800972e:	f003 031f 	and.w	r3, r3, #31
 8009732:	2202      	movs	r2, #2
 8009734:	409a      	lsls	r2, r3
 8009736:	69fb      	ldr	r3, [r7, #28]
 8009738:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d018      	beq.n	8009776 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009744:	693b      	ldr	r3, [r7, #16]
 8009746:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800974a:	2b00      	cmp	r3, #0
 800974c:	d109      	bne.n	8009762 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009752:	2b00      	cmp	r3, #0
 8009754:	f000 813a 	beq.w	80099cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800975c:	6878      	ldr	r0, [r7, #4]
 800975e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009760:	e134      	b.n	80099cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8130 	beq.w	80099cc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009774:	e12a      	b.n	80099cc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009776:	693b      	ldr	r3, [r7, #16]
 8009778:	f003 0320 	and.w	r3, r3, #32
 800977c:	2b00      	cmp	r3, #0
 800977e:	f040 8089 	bne.w	8009894 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	4a2b      	ldr	r2, [pc, #172]	; (8009834 <HAL_DMA_IRQHandler+0xc74>)
 8009788:	4293      	cmp	r3, r2
 800978a:	d04a      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	4a29      	ldr	r2, [pc, #164]	; (8009838 <HAL_DMA_IRQHandler+0xc78>)
 8009792:	4293      	cmp	r3, r2
 8009794:	d045      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4a28      	ldr	r2, [pc, #160]	; (800983c <HAL_DMA_IRQHandler+0xc7c>)
 800979c:	4293      	cmp	r3, r2
 800979e:	d040      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	4a26      	ldr	r2, [pc, #152]	; (8009840 <HAL_DMA_IRQHandler+0xc80>)
 80097a6:	4293      	cmp	r3, r2
 80097a8:	d03b      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	4a25      	ldr	r2, [pc, #148]	; (8009844 <HAL_DMA_IRQHandler+0xc84>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d036      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	4a23      	ldr	r2, [pc, #140]	; (8009848 <HAL_DMA_IRQHandler+0xc88>)
 80097ba:	4293      	cmp	r3, r2
 80097bc:	d031      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	4a22      	ldr	r2, [pc, #136]	; (800984c <HAL_DMA_IRQHandler+0xc8c>)
 80097c4:	4293      	cmp	r3, r2
 80097c6:	d02c      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	4a20      	ldr	r2, [pc, #128]	; (8009850 <HAL_DMA_IRQHandler+0xc90>)
 80097ce:	4293      	cmp	r3, r2
 80097d0:	d027      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	4a1f      	ldr	r2, [pc, #124]	; (8009854 <HAL_DMA_IRQHandler+0xc94>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d022      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	4a1d      	ldr	r2, [pc, #116]	; (8009858 <HAL_DMA_IRQHandler+0xc98>)
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d01d      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	4a1c      	ldr	r2, [pc, #112]	; (800985c <HAL_DMA_IRQHandler+0xc9c>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d018      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a1a      	ldr	r2, [pc, #104]	; (8009860 <HAL_DMA_IRQHandler+0xca0>)
 80097f6:	4293      	cmp	r3, r2
 80097f8:	d013      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4a19      	ldr	r2, [pc, #100]	; (8009864 <HAL_DMA_IRQHandler+0xca4>)
 8009800:	4293      	cmp	r3, r2
 8009802:	d00e      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a17      	ldr	r2, [pc, #92]	; (8009868 <HAL_DMA_IRQHandler+0xca8>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d009      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	4a16      	ldr	r2, [pc, #88]	; (800986c <HAL_DMA_IRQHandler+0xcac>)
 8009814:	4293      	cmp	r3, r2
 8009816:	d004      	beq.n	8009822 <HAL_DMA_IRQHandler+0xc62>
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4a14      	ldr	r2, [pc, #80]	; (8009870 <HAL_DMA_IRQHandler+0xcb0>)
 800981e:	4293      	cmp	r3, r2
 8009820:	d128      	bne.n	8009874 <HAL_DMA_IRQHandler+0xcb4>
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	681b      	ldr	r3, [r3, #0]
 8009826:	681a      	ldr	r2, [r3, #0]
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	f022 0214 	bic.w	r2, r2, #20
 8009830:	601a      	str	r2, [r3, #0]
 8009832:	e027      	b.n	8009884 <HAL_DMA_IRQHandler+0xcc4>
 8009834:	40020010 	.word	0x40020010
 8009838:	40020028 	.word	0x40020028
 800983c:	40020040 	.word	0x40020040
 8009840:	40020058 	.word	0x40020058
 8009844:	40020070 	.word	0x40020070
 8009848:	40020088 	.word	0x40020088
 800984c:	400200a0 	.word	0x400200a0
 8009850:	400200b8 	.word	0x400200b8
 8009854:	40020410 	.word	0x40020410
 8009858:	40020428 	.word	0x40020428
 800985c:	40020440 	.word	0x40020440
 8009860:	40020458 	.word	0x40020458
 8009864:	40020470 	.word	0x40020470
 8009868:	40020488 	.word	0x40020488
 800986c:	400204a0 	.word	0x400204a0
 8009870:	400204b8 	.word	0x400204b8
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	681a      	ldr	r2, [r3, #0]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f022 020a 	bic.w	r2, r2, #10
 8009882:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2201      	movs	r2, #1
 8009888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009898:	2b00      	cmp	r3, #0
 800989a:	f000 8097 	beq.w	80099cc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098a2:	6878      	ldr	r0, [r7, #4]
 80098a4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80098a6:	e091      	b.n	80099cc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ac:	f003 031f 	and.w	r3, r3, #31
 80098b0:	2208      	movs	r2, #8
 80098b2:	409a      	lsls	r2, r3
 80098b4:	697b      	ldr	r3, [r7, #20]
 80098b6:	4013      	ands	r3, r2
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	f000 8088 	beq.w	80099ce <HAL_DMA_IRQHandler+0xe0e>
 80098be:	693b      	ldr	r3, [r7, #16]
 80098c0:	f003 0308 	and.w	r3, r3, #8
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8082 	beq.w	80099ce <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	4a41      	ldr	r2, [pc, #260]	; (80099d4 <HAL_DMA_IRQHandler+0xe14>)
 80098d0:	4293      	cmp	r3, r2
 80098d2:	d04a      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a3f      	ldr	r2, [pc, #252]	; (80099d8 <HAL_DMA_IRQHandler+0xe18>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d045      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a3e      	ldr	r2, [pc, #248]	; (80099dc <HAL_DMA_IRQHandler+0xe1c>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d040      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a3c      	ldr	r2, [pc, #240]	; (80099e0 <HAL_DMA_IRQHandler+0xe20>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d03b      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a3b      	ldr	r2, [pc, #236]	; (80099e4 <HAL_DMA_IRQHandler+0xe24>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d036      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a39      	ldr	r2, [pc, #228]	; (80099e8 <HAL_DMA_IRQHandler+0xe28>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d031      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a38      	ldr	r2, [pc, #224]	; (80099ec <HAL_DMA_IRQHandler+0xe2c>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d02c      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	4a36      	ldr	r2, [pc, #216]	; (80099f0 <HAL_DMA_IRQHandler+0xe30>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d027      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	4a35      	ldr	r2, [pc, #212]	; (80099f4 <HAL_DMA_IRQHandler+0xe34>)
 8009920:	4293      	cmp	r3, r2
 8009922:	d022      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4a33      	ldr	r2, [pc, #204]	; (80099f8 <HAL_DMA_IRQHandler+0xe38>)
 800992a:	4293      	cmp	r3, r2
 800992c:	d01d      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	4a32      	ldr	r2, [pc, #200]	; (80099fc <HAL_DMA_IRQHandler+0xe3c>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d018      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	4a30      	ldr	r2, [pc, #192]	; (8009a00 <HAL_DMA_IRQHandler+0xe40>)
 800993e:	4293      	cmp	r3, r2
 8009940:	d013      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	4a2f      	ldr	r2, [pc, #188]	; (8009a04 <HAL_DMA_IRQHandler+0xe44>)
 8009948:	4293      	cmp	r3, r2
 800994a:	d00e      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	4a2d      	ldr	r2, [pc, #180]	; (8009a08 <HAL_DMA_IRQHandler+0xe48>)
 8009952:	4293      	cmp	r3, r2
 8009954:	d009      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4a2c      	ldr	r2, [pc, #176]	; (8009a0c <HAL_DMA_IRQHandler+0xe4c>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d004      	beq.n	800996a <HAL_DMA_IRQHandler+0xdaa>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	4a2a      	ldr	r2, [pc, #168]	; (8009a10 <HAL_DMA_IRQHandler+0xe50>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d108      	bne.n	800997c <HAL_DMA_IRQHandler+0xdbc>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681a      	ldr	r2, [r3, #0]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	f022 021c 	bic.w	r2, r2, #28
 8009978:	601a      	str	r2, [r3, #0]
 800997a:	e007      	b.n	800998c <HAL_DMA_IRQHandler+0xdcc>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 020e 	bic.w	r2, r2, #14
 800998a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009990:	f003 031f 	and.w	r3, r3, #31
 8009994:	2201      	movs	r2, #1
 8009996:	409a      	lsls	r2, r3
 8009998:	69fb      	ldr	r3, [r7, #28]
 800999a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2200      	movs	r2, #0
 80099ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099be:	6878      	ldr	r0, [r7, #4]
 80099c0:	4798      	blx	r3
 80099c2:	e004      	b.n	80099ce <HAL_DMA_IRQHandler+0xe0e>
          return;
 80099c4:	bf00      	nop
 80099c6:	e002      	b.n	80099ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099c8:	bf00      	nop
 80099ca:	e000      	b.n	80099ce <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80099cc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80099ce:	3728      	adds	r7, #40	; 0x28
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}
 80099d4:	40020010 	.word	0x40020010
 80099d8:	40020028 	.word	0x40020028
 80099dc:	40020040 	.word	0x40020040
 80099e0:	40020058 	.word	0x40020058
 80099e4:	40020070 	.word	0x40020070
 80099e8:	40020088 	.word	0x40020088
 80099ec:	400200a0 	.word	0x400200a0
 80099f0:	400200b8 	.word	0x400200b8
 80099f4:	40020410 	.word	0x40020410
 80099f8:	40020428 	.word	0x40020428
 80099fc:	40020440 	.word	0x40020440
 8009a00:	40020458 	.word	0x40020458
 8009a04:	40020470 	.word	0x40020470
 8009a08:	40020488 	.word	0x40020488
 8009a0c:	400204a0 	.word	0x400204a0
 8009a10:	400204b8 	.word	0x400204b8

08009a14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009a14:	b480      	push	{r7}
 8009a16:	b085      	sub	sp, #20
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	4a42      	ldr	r2, [pc, #264]	; (8009b2c <DMA_CalcBaseAndBitshift+0x118>)
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d04a      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	4a41      	ldr	r2, [pc, #260]	; (8009b30 <DMA_CalcBaseAndBitshift+0x11c>)
 8009a2c:	4293      	cmp	r3, r2
 8009a2e:	d045      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	4a3f      	ldr	r2, [pc, #252]	; (8009b34 <DMA_CalcBaseAndBitshift+0x120>)
 8009a36:	4293      	cmp	r3, r2
 8009a38:	d040      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	4a3e      	ldr	r2, [pc, #248]	; (8009b38 <DMA_CalcBaseAndBitshift+0x124>)
 8009a40:	4293      	cmp	r3, r2
 8009a42:	d03b      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	4a3c      	ldr	r2, [pc, #240]	; (8009b3c <DMA_CalcBaseAndBitshift+0x128>)
 8009a4a:	4293      	cmp	r3, r2
 8009a4c:	d036      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	4a3b      	ldr	r2, [pc, #236]	; (8009b40 <DMA_CalcBaseAndBitshift+0x12c>)
 8009a54:	4293      	cmp	r3, r2
 8009a56:	d031      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	4a39      	ldr	r2, [pc, #228]	; (8009b44 <DMA_CalcBaseAndBitshift+0x130>)
 8009a5e:	4293      	cmp	r3, r2
 8009a60:	d02c      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	4a38      	ldr	r2, [pc, #224]	; (8009b48 <DMA_CalcBaseAndBitshift+0x134>)
 8009a68:	4293      	cmp	r3, r2
 8009a6a:	d027      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	4a36      	ldr	r2, [pc, #216]	; (8009b4c <DMA_CalcBaseAndBitshift+0x138>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d022      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	4a35      	ldr	r2, [pc, #212]	; (8009b50 <DMA_CalcBaseAndBitshift+0x13c>)
 8009a7c:	4293      	cmp	r3, r2
 8009a7e:	d01d      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	4a33      	ldr	r2, [pc, #204]	; (8009b54 <DMA_CalcBaseAndBitshift+0x140>)
 8009a86:	4293      	cmp	r3, r2
 8009a88:	d018      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	4a32      	ldr	r2, [pc, #200]	; (8009b58 <DMA_CalcBaseAndBitshift+0x144>)
 8009a90:	4293      	cmp	r3, r2
 8009a92:	d013      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a30      	ldr	r2, [pc, #192]	; (8009b5c <DMA_CalcBaseAndBitshift+0x148>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d00e      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	4a2f      	ldr	r2, [pc, #188]	; (8009b60 <DMA_CalcBaseAndBitshift+0x14c>)
 8009aa4:	4293      	cmp	r3, r2
 8009aa6:	d009      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a2d      	ldr	r2, [pc, #180]	; (8009b64 <DMA_CalcBaseAndBitshift+0x150>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d004      	beq.n	8009abc <DMA_CalcBaseAndBitshift+0xa8>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a2c      	ldr	r2, [pc, #176]	; (8009b68 <DMA_CalcBaseAndBitshift+0x154>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d101      	bne.n	8009ac0 <DMA_CalcBaseAndBitshift+0xac>
 8009abc:	2301      	movs	r3, #1
 8009abe:	e000      	b.n	8009ac2 <DMA_CalcBaseAndBitshift+0xae>
 8009ac0:	2300      	movs	r3, #0
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d024      	beq.n	8009b10 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	b2db      	uxtb	r3, r3
 8009acc:	3b10      	subs	r3, #16
 8009ace:	4a27      	ldr	r2, [pc, #156]	; (8009b6c <DMA_CalcBaseAndBitshift+0x158>)
 8009ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ad4:	091b      	lsrs	r3, r3, #4
 8009ad6:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	f003 0307 	and.w	r3, r3, #7
 8009ade:	4a24      	ldr	r2, [pc, #144]	; (8009b70 <DMA_CalcBaseAndBitshift+0x15c>)
 8009ae0:	5cd3      	ldrb	r3, [r2, r3]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	2b03      	cmp	r3, #3
 8009aec:	d908      	bls.n	8009b00 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	461a      	mov	r2, r3
 8009af4:	4b1f      	ldr	r3, [pc, #124]	; (8009b74 <DMA_CalcBaseAndBitshift+0x160>)
 8009af6:	4013      	ands	r3, r2
 8009af8:	1d1a      	adds	r2, r3, #4
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	659a      	str	r2, [r3, #88]	; 0x58
 8009afe:	e00d      	b.n	8009b1c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	4b1b      	ldr	r3, [pc, #108]	; (8009b74 <DMA_CalcBaseAndBitshift+0x160>)
 8009b08:	4013      	ands	r3, r2
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	6593      	str	r3, [r2, #88]	; 0x58
 8009b0e:	e005      	b.n	8009b1c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3714      	adds	r7, #20
 8009b24:	46bd      	mov	sp, r7
 8009b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2a:	4770      	bx	lr
 8009b2c:	40020010 	.word	0x40020010
 8009b30:	40020028 	.word	0x40020028
 8009b34:	40020040 	.word	0x40020040
 8009b38:	40020058 	.word	0x40020058
 8009b3c:	40020070 	.word	0x40020070
 8009b40:	40020088 	.word	0x40020088
 8009b44:	400200a0 	.word	0x400200a0
 8009b48:	400200b8 	.word	0x400200b8
 8009b4c:	40020410 	.word	0x40020410
 8009b50:	40020428 	.word	0x40020428
 8009b54:	40020440 	.word	0x40020440
 8009b58:	40020458 	.word	0x40020458
 8009b5c:	40020470 	.word	0x40020470
 8009b60:	40020488 	.word	0x40020488
 8009b64:	400204a0 	.word	0x400204a0
 8009b68:	400204b8 	.word	0x400204b8
 8009b6c:	aaaaaaab 	.word	0xaaaaaaab
 8009b70:	08012660 	.word	0x08012660
 8009b74:	fffffc00 	.word	0xfffffc00

08009b78 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009b80:	2300      	movs	r3, #0
 8009b82:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	699b      	ldr	r3, [r3, #24]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d120      	bne.n	8009bce <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b90:	2b03      	cmp	r3, #3
 8009b92:	d858      	bhi.n	8009c46 <DMA_CheckFifoParam+0xce>
 8009b94:	a201      	add	r2, pc, #4	; (adr r2, 8009b9c <DMA_CheckFifoParam+0x24>)
 8009b96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b9a:	bf00      	nop
 8009b9c:	08009bad 	.word	0x08009bad
 8009ba0:	08009bbf 	.word	0x08009bbf
 8009ba4:	08009bad 	.word	0x08009bad
 8009ba8:	08009c47 	.word	0x08009c47
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d048      	beq.n	8009c4a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bbc:	e045      	b.n	8009c4a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009bc2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009bc6:	d142      	bne.n	8009c4e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009bcc:	e03f      	b.n	8009c4e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	699b      	ldr	r3, [r3, #24]
 8009bd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bd6:	d123      	bne.n	8009c20 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bdc:	2b03      	cmp	r3, #3
 8009bde:	d838      	bhi.n	8009c52 <DMA_CheckFifoParam+0xda>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <DMA_CheckFifoParam+0x70>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009bf9 	.word	0x08009bf9
 8009bec:	08009bff 	.word	0x08009bff
 8009bf0:	08009bf9 	.word	0x08009bf9
 8009bf4:	08009c11 	.word	0x08009c11
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	73fb      	strb	r3, [r7, #15]
        break;
 8009bfc:	e030      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d025      	beq.n	8009c56 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c0e:	e022      	b.n	8009c56 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c18:	d11f      	bne.n	8009c5a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009c1e:	e01c      	b.n	8009c5a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d902      	bls.n	8009c2e <DMA_CheckFifoParam+0xb6>
 8009c28:	2b03      	cmp	r3, #3
 8009c2a:	d003      	beq.n	8009c34 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009c2c:	e018      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	73fb      	strb	r3, [r7, #15]
        break;
 8009c32:	e015      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d00e      	beq.n	8009c5e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
    break;
 8009c44:	e00b      	b.n	8009c5e <DMA_CheckFifoParam+0xe6>
        break;
 8009c46:	bf00      	nop
 8009c48:	e00a      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        break;
 8009c4a:	bf00      	nop
 8009c4c:	e008      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        break;
 8009c4e:	bf00      	nop
 8009c50:	e006      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        break;
 8009c52:	bf00      	nop
 8009c54:	e004      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        break;
 8009c56:	bf00      	nop
 8009c58:	e002      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
        break;
 8009c5a:	bf00      	nop
 8009c5c:	e000      	b.n	8009c60 <DMA_CheckFifoParam+0xe8>
    break;
 8009c5e:	bf00      	nop
    }
  }

  return status;
 8009c60:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c62:	4618      	mov	r0, r3
 8009c64:	3714      	adds	r7, #20
 8009c66:	46bd      	mov	sp, r7
 8009c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6c:	4770      	bx	lr
 8009c6e:	bf00      	nop

08009c70 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b085      	sub	sp, #20
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	4a38      	ldr	r2, [pc, #224]	; (8009d64 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009c84:	4293      	cmp	r3, r2
 8009c86:	d022      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	4a36      	ldr	r2, [pc, #216]	; (8009d68 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009c8e:	4293      	cmp	r3, r2
 8009c90:	d01d      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	4a35      	ldr	r2, [pc, #212]	; (8009d6c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d018      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	4a33      	ldr	r2, [pc, #204]	; (8009d70 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d013      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	4a32      	ldr	r2, [pc, #200]	; (8009d74 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009cac:	4293      	cmp	r3, r2
 8009cae:	d00e      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a30      	ldr	r2, [pc, #192]	; (8009d78 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009cb6:	4293      	cmp	r3, r2
 8009cb8:	d009      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	4a2f      	ldr	r2, [pc, #188]	; (8009d7c <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	d004      	beq.n	8009cce <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	4a2d      	ldr	r2, [pc, #180]	; (8009d80 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009cca:	4293      	cmp	r3, r2
 8009ccc:	d101      	bne.n	8009cd2 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009cce:	2301      	movs	r3, #1
 8009cd0:	e000      	b.n	8009cd4 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d01a      	beq.n	8009d0e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	3b08      	subs	r3, #8
 8009ce0:	4a28      	ldr	r2, [pc, #160]	; (8009d84 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ce6:	091b      	lsrs	r3, r3, #4
 8009ce8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009cea:	68fa      	ldr	r2, [r7, #12]
 8009cec:	4b26      	ldr	r3, [pc, #152]	; (8009d88 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009cee:	4413      	add	r3, r2
 8009cf0:	009b      	lsls	r3, r3, #2
 8009cf2:	461a      	mov	r2, r3
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	4a24      	ldr	r2, [pc, #144]	; (8009d8c <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009cfc:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	f003 031f 	and.w	r3, r3, #31
 8009d04:	2201      	movs	r2, #1
 8009d06:	409a      	lsls	r2, r3
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009d0c:	e024      	b.n	8009d58 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	b2db      	uxtb	r3, r3
 8009d14:	3b10      	subs	r3, #16
 8009d16:	4a1e      	ldr	r2, [pc, #120]	; (8009d90 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009d18:	fba2 2303 	umull	r2, r3, r2, r3
 8009d1c:	091b      	lsrs	r3, r3, #4
 8009d1e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	4a1c      	ldr	r2, [pc, #112]	; (8009d94 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009d24:	4293      	cmp	r3, r2
 8009d26:	d806      	bhi.n	8009d36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009d28:	68bb      	ldr	r3, [r7, #8]
 8009d2a:	4a1b      	ldr	r2, [pc, #108]	; (8009d98 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d902      	bls.n	8009d36 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	3308      	adds	r3, #8
 8009d34:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009d36:	68fa      	ldr	r2, [r7, #12]
 8009d38:	4b18      	ldr	r3, [pc, #96]	; (8009d9c <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009d3a:	4413      	add	r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	461a      	mov	r2, r3
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a16      	ldr	r2, [pc, #88]	; (8009da0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009d48:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	f003 031f 	and.w	r3, r3, #31
 8009d50:	2201      	movs	r2, #1
 8009d52:	409a      	lsls	r2, r3
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009d58:	bf00      	nop
 8009d5a:	3714      	adds	r7, #20
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d62:	4770      	bx	lr
 8009d64:	58025408 	.word	0x58025408
 8009d68:	5802541c 	.word	0x5802541c
 8009d6c:	58025430 	.word	0x58025430
 8009d70:	58025444 	.word	0x58025444
 8009d74:	58025458 	.word	0x58025458
 8009d78:	5802546c 	.word	0x5802546c
 8009d7c:	58025480 	.word	0x58025480
 8009d80:	58025494 	.word	0x58025494
 8009d84:	cccccccd 	.word	0xcccccccd
 8009d88:	16009600 	.word	0x16009600
 8009d8c:	58025880 	.word	0x58025880
 8009d90:	aaaaaaab 	.word	0xaaaaaaab
 8009d94:	400204b8 	.word	0x400204b8
 8009d98:	4002040f 	.word	0x4002040f
 8009d9c:	10008200 	.word	0x10008200
 8009da0:	40020880 	.word	0x40020880

08009da4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	b2db      	uxtb	r3, r3
 8009db2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d04a      	beq.n	8009e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2b08      	cmp	r3, #8
 8009dbe:	d847      	bhi.n	8009e50 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a25      	ldr	r2, [pc, #148]	; (8009e5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d022      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a24      	ldr	r2, [pc, #144]	; (8009e60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d01d      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a22      	ldr	r2, [pc, #136]	; (8009e64 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d018      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a21      	ldr	r2, [pc, #132]	; (8009e68 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d013      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1f      	ldr	r2, [pc, #124]	; (8009e6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d00e      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a1e      	ldr	r2, [pc, #120]	; (8009e70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d009      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a1c      	ldr	r2, [pc, #112]	; (8009e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d004      	beq.n	8009e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a1b      	ldr	r2, [pc, #108]	; (8009e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d101      	bne.n	8009e14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009e10:	2301      	movs	r3, #1
 8009e12:	e000      	b.n	8009e16 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009e14:	2300      	movs	r3, #0
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e1a:	68fa      	ldr	r2, [r7, #12]
 8009e1c:	4b17      	ldr	r3, [pc, #92]	; (8009e7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009e1e:	4413      	add	r3, r2
 8009e20:	009b      	lsls	r3, r3, #2
 8009e22:	461a      	mov	r2, r3
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	4a15      	ldr	r2, [pc, #84]	; (8009e80 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009e2c:	671a      	str	r2, [r3, #112]	; 0x70
 8009e2e:	e009      	b.n	8009e44 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009e30:	68fa      	ldr	r2, [r7, #12]
 8009e32:	4b14      	ldr	r3, [pc, #80]	; (8009e84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009e34:	4413      	add	r3, r2
 8009e36:	009b      	lsls	r3, r3, #2
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	4a11      	ldr	r2, [pc, #68]	; (8009e88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009e42:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	3b01      	subs	r3, #1
 8009e48:	2201      	movs	r2, #1
 8009e4a:	409a      	lsls	r2, r3
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009e50:	bf00      	nop
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr
 8009e5c:	58025408 	.word	0x58025408
 8009e60:	5802541c 	.word	0x5802541c
 8009e64:	58025430 	.word	0x58025430
 8009e68:	58025444 	.word	0x58025444
 8009e6c:	58025458 	.word	0x58025458
 8009e70:	5802546c 	.word	0x5802546c
 8009e74:	58025480 	.word	0x58025480
 8009e78:	58025494 	.word	0x58025494
 8009e7c:	1600963f 	.word	0x1600963f
 8009e80:	58025940 	.word	0x58025940
 8009e84:	1000823f 	.word	0x1000823f
 8009e88:	40020940 	.word	0x40020940

08009e8c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b084      	sub	sp, #16
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d101      	bne.n	8009e9e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8009e9a:	2301      	movs	r3, #1
 8009e9c:	e0cf      	b.n	800a03e <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d106      	bne.n	8009eb6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	2223      	movs	r2, #35	; 0x23
 8009eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8009eb0:	6878      	ldr	r0, [r7, #4]
 8009eb2:	f7fd f89f 	bl	8006ff4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009eb6:	4b64      	ldr	r3, [pc, #400]	; (800a048 <HAL_ETH_Init+0x1bc>)
 8009eb8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ebc:	4a62      	ldr	r2, [pc, #392]	; (800a048 <HAL_ETH_Init+0x1bc>)
 8009ebe:	f043 0302 	orr.w	r3, r3, #2
 8009ec2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009ec6:	4b60      	ldr	r3, [pc, #384]	; (800a048 <HAL_ETH_Init+0x1bc>)
 8009ec8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ecc:	f003 0302 	and.w	r3, r3, #2
 8009ed0:	60bb      	str	r3, [r7, #8]
 8009ed2:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	7a1b      	ldrb	r3, [r3, #8]
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d103      	bne.n	8009ee4 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8009edc:	2000      	movs	r0, #0
 8009ede:	f7fd fc8b 	bl	80077f8 <HAL_SYSCFG_ETHInterfaceSelect>
 8009ee2:	e003      	b.n	8009eec <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8009ee4:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8009ee8:	f7fd fc86 	bl	80077f8 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8009eec:	4b57      	ldr	r3, [pc, #348]	; (800a04c <HAL_ETH_Init+0x1c0>)
 8009eee:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	687a      	ldr	r2, [r7, #4]
 8009efc:	6812      	ldr	r2, [r2, #0]
 8009efe:	f043 0301 	orr.w	r3, r3, #1
 8009f02:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f06:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009f08:	f7fd fc3a 	bl	8007780 <HAL_GetTick>
 8009f0c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009f0e:	e011      	b.n	8009f34 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8009f10:	f7fd fc36 	bl	8007780 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8009f1e:	d909      	bls.n	8009f34 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2204      	movs	r2, #4
 8009f24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	22e0      	movs	r2, #224	; 0xe0
 8009f2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e084      	b.n	800a03e <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f003 0301 	and.w	r3, r3, #1
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d1e4      	bne.n	8009f10 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8009f46:	6878      	ldr	r0, [r7, #4]
 8009f48:	f000 f886 	bl	800a058 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8009f4c:	f001 fefc 	bl	800bd48 <HAL_RCC_GetHCLKFreq>
 8009f50:	4603      	mov	r3, r0
 8009f52:	4a3f      	ldr	r2, [pc, #252]	; (800a050 <HAL_ETH_Init+0x1c4>)
 8009f54:	fba2 2303 	umull	r2, r3, r2, r3
 8009f58:	0c9a      	lsrs	r2, r3, #18
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	3a01      	subs	r2, #1
 8009f60:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fa71 	bl	800a44c <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009f72:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8009f76:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	6812      	ldr	r2, [r2, #0]
 8009f7e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009f82:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009f86:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	695b      	ldr	r3, [r3, #20]
 8009f8e:	f003 0303 	and.w	r3, r3, #3
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d009      	beq.n	8009faa <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2201      	movs	r2, #1
 8009f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	22e0      	movs	r2, #224	; 0xe0
 8009fa2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8009fa6:	2301      	movs	r3, #1
 8009fa8:	e049      	b.n	800a03e <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009fb2:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8009fb6:	4b27      	ldr	r3, [pc, #156]	; (800a054 <HAL_ETH_Init+0x1c8>)
 8009fb8:	4013      	ands	r3, r2
 8009fba:	687a      	ldr	r2, [r7, #4]
 8009fbc:	6952      	ldr	r2, [r2, #20]
 8009fbe:	0051      	lsls	r1, r2, #1
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	6812      	ldr	r2, [r2, #0]
 8009fc4:	430b      	orrs	r3, r1
 8009fc6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8009fca:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f000 fad9 	bl	800a586 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8009fd4:	6878      	ldr	r0, [r7, #4]
 8009fd6:	f000 fb1f 	bl	800a618 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	3305      	adds	r3, #5
 8009fe0:	781b      	ldrb	r3, [r3, #0]
 8009fe2:	021a      	lsls	r2, r3, #8
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	685b      	ldr	r3, [r3, #4]
 8009fe8:	3304      	adds	r3, #4
 8009fea:	781b      	ldrb	r3, [r3, #0]
 8009fec:	4619      	mov	r1, r3
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	685b      	ldr	r3, [r3, #4]
 8009ffc:	3303      	adds	r3, #3
 8009ffe:	781b      	ldrb	r3, [r3, #0]
 800a000:	061a      	lsls	r2, r3, #24
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	685b      	ldr	r3, [r3, #4]
 800a006:	3302      	adds	r3, #2
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	041b      	lsls	r3, r3, #16
 800a00c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	3301      	adds	r3, #1
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a018:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	781b      	ldrb	r3, [r3, #0]
 800a020:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a026:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a028:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2200      	movs	r2, #0
 800a030:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2210      	movs	r2, #16
 800a038:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a03c:	2300      	movs	r3, #0
}
 800a03e:	4618      	mov	r0, r3
 800a040:	3710      	adds	r7, #16
 800a042:	46bd      	mov	sp, r7
 800a044:	bd80      	pop	{r7, pc}
 800a046:	bf00      	nop
 800a048:	58024400 	.word	0x58024400
 800a04c:	58000400 	.word	0x58000400
 800a050:	431bde83 	.word	0x431bde83
 800a054:	ffff8001 	.word	0xffff8001

0800a058 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b084      	sub	sp, #16
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a068:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a06a:	68fb      	ldr	r3, [r7, #12]
 800a06c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a070:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a072:	f001 fe69 	bl	800bd48 <HAL_RCC_GetHCLKFreq>
 800a076:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	4a1e      	ldr	r2, [pc, #120]	; (800a0f4 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	d908      	bls.n	800a092 <HAL_ETH_SetMDIOClockRange+0x3a>
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	4a1d      	ldr	r2, [pc, #116]	; (800a0f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a084:	4293      	cmp	r3, r2
 800a086:	d804      	bhi.n	800a092 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e027      	b.n	800a0e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	4a18      	ldr	r2, [pc, #96]	; (800a0f8 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d908      	bls.n	800a0ac <HAL_ETH_SetMDIOClockRange+0x54>
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	4a17      	ldr	r2, [pc, #92]	; (800a0fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d204      	bcs.n	800a0ac <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a0a8:	60fb      	str	r3, [r7, #12]
 800a0aa:	e01a      	b.n	800a0e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	4a13      	ldr	r2, [pc, #76]	; (800a0fc <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a0b0:	4293      	cmp	r3, r2
 800a0b2:	d303      	bcc.n	800a0bc <HAL_ETH_SetMDIOClockRange+0x64>
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	4a12      	ldr	r2, [pc, #72]	; (800a100 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d911      	bls.n	800a0e0 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a0bc:	68bb      	ldr	r3, [r7, #8]
 800a0be:	4a10      	ldr	r2, [pc, #64]	; (800a100 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a0c0:	4293      	cmp	r3, r2
 800a0c2:	d908      	bls.n	800a0d6 <HAL_ETH_SetMDIOClockRange+0x7e>
 800a0c4:	68bb      	ldr	r3, [r7, #8]
 800a0c6:	4a0f      	ldr	r2, [pc, #60]	; (800a104 <HAL_ETH_SetMDIOClockRange+0xac>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d804      	bhi.n	800a0d6 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a0d2:	60fb      	str	r3, [r7, #12]
 800a0d4:	e005      	b.n	800a0e2 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a0dc:	60fb      	str	r3, [r7, #12]
 800a0de:	e000      	b.n	800a0e2 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a0e0:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a0ec:	bf00      	nop
 800a0ee:	3710      	adds	r7, #16
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}
 800a0f4:	01312cff 	.word	0x01312cff
 800a0f8:	02160ebf 	.word	0x02160ebf
 800a0fc:	03938700 	.word	0x03938700
 800a100:	05f5e0ff 	.word	0x05f5e0ff
 800a104:	08f0d17f 	.word	0x08f0d17f

0800a108 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a108:	b480      	push	{r7}
 800a10a:	b085      	sub	sp, #20
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
 800a110:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a116:	683b      	ldr	r3, [r7, #0]
 800a118:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a11a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a11c:	683b      	ldr	r3, [r7, #0]
 800a11e:	791b      	ldrb	r3, [r3, #4]
 800a120:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a122:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	7b1b      	ldrb	r3, [r3, #12]
 800a128:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a12a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	7b5b      	ldrb	r3, [r3, #13]
 800a130:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a132:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	7b9b      	ldrb	r3, [r3, #14]
 800a138:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a13a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	7bdb      	ldrb	r3, [r3, #15]
 800a140:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a142:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a144:	683a      	ldr	r2, [r7, #0]
 800a146:	7c12      	ldrb	r2, [r2, #16]
 800a148:	2a00      	cmp	r2, #0
 800a14a:	d102      	bne.n	800a152 <ETH_SetMACConfig+0x4a>
 800a14c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a150:	e000      	b.n	800a154 <ETH_SetMACConfig+0x4c>
 800a152:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a154:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a156:	683a      	ldr	r2, [r7, #0]
 800a158:	7c52      	ldrb	r2, [r2, #17]
 800a15a:	2a00      	cmp	r2, #0
 800a15c:	d102      	bne.n	800a164 <ETH_SetMACConfig+0x5c>
 800a15e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a162:	e000      	b.n	800a166 <ETH_SetMACConfig+0x5e>
 800a164:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a166:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	7c9b      	ldrb	r3, [r3, #18]
 800a16c:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a16e:	431a      	orrs	r2, r3
               macconf->Speed |
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a174:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a176:	683b      	ldr	r3, [r7, #0]
 800a178:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a17a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a17c:	683b      	ldr	r3, [r7, #0]
 800a17e:	7f1b      	ldrb	r3, [r3, #28]
 800a180:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a182:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	7f5b      	ldrb	r3, [r3, #29]
 800a188:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a18a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a18c:	683a      	ldr	r2, [r7, #0]
 800a18e:	7f92      	ldrb	r2, [r2, #30]
 800a190:	2a00      	cmp	r2, #0
 800a192:	d102      	bne.n	800a19a <ETH_SetMACConfig+0x92>
 800a194:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a198:	e000      	b.n	800a19c <ETH_SetMACConfig+0x94>
 800a19a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a19c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a19e:	683b      	ldr	r3, [r7, #0]
 800a1a0:	7fdb      	ldrb	r3, [r3, #31]
 800a1a2:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a1a4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a1a6:	683a      	ldr	r2, [r7, #0]
 800a1a8:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a1ac:	2a00      	cmp	r2, #0
 800a1ae:	d102      	bne.n	800a1b6 <ETH_SetMACConfig+0xae>
 800a1b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a1b4:	e000      	b.n	800a1b8 <ETH_SetMACConfig+0xb0>
 800a1b6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a1b8:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a1be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a1c0:	683b      	ldr	r3, [r7, #0]
 800a1c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a1c6:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a1c8:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a1ca:	683b      	ldr	r3, [r7, #0]
 800a1cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a1ce:	4313      	orrs	r3, r2
 800a1d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	4b56      	ldr	r3, [pc, #344]	; (800a334 <ETH_SetMACConfig+0x22c>)
 800a1da:	4013      	ands	r3, r2
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	6812      	ldr	r2, [r2, #0]
 800a1e0:	68f9      	ldr	r1, [r7, #12]
 800a1e2:	430b      	orrs	r3, r1
 800a1e4:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1ea:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a1f2:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a1f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a1fc:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a1fe:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a206:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a208:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a20a:	683a      	ldr	r2, [r7, #0]
 800a20c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a210:	2a00      	cmp	r2, #0
 800a212:	d102      	bne.n	800a21a <ETH_SetMACConfig+0x112>
 800a214:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a218:	e000      	b.n	800a21c <ETH_SetMACConfig+0x114>
 800a21a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a21c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a21e:	683b      	ldr	r3, [r7, #0]
 800a220:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a222:	4313      	orrs	r3, r2
 800a224:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	685a      	ldr	r2, [r3, #4]
 800a22c:	4b42      	ldr	r3, [pc, #264]	; (800a338 <ETH_SetMACConfig+0x230>)
 800a22e:	4013      	ands	r3, r2
 800a230:	687a      	ldr	r2, [r7, #4]
 800a232:	6812      	ldr	r2, [r2, #0]
 800a234:	68f9      	ldr	r1, [r7, #12]
 800a236:	430b      	orrs	r3, r1
 800a238:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a240:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a242:	683b      	ldr	r3, [r7, #0]
 800a244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a246:	4313      	orrs	r3, r2
 800a248:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a24a:	687b      	ldr	r3, [r7, #4]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	68da      	ldr	r2, [r3, #12]
 800a250:	4b3a      	ldr	r3, [pc, #232]	; (800a33c <ETH_SetMACConfig+0x234>)
 800a252:	4013      	ands	r3, r2
 800a254:	687a      	ldr	r2, [r7, #4]
 800a256:	6812      	ldr	r2, [r2, #0]
 800a258:	68f9      	ldr	r1, [r7, #12]
 800a25a:	430b      	orrs	r3, r1
 800a25c:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a25e:	683b      	ldr	r3, [r7, #0]
 800a260:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a264:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a266:	683b      	ldr	r3, [r7, #0]
 800a268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a26a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a26c:	683a      	ldr	r2, [r7, #0]
 800a26e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a272:	2a00      	cmp	r2, #0
 800a274:	d101      	bne.n	800a27a <ETH_SetMACConfig+0x172>
 800a276:	2280      	movs	r2, #128	; 0x80
 800a278:	e000      	b.n	800a27c <ETH_SetMACConfig+0x174>
 800a27a:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a27c:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a27e:	683b      	ldr	r3, [r7, #0]
 800a280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a282:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a284:	4313      	orrs	r3, r2
 800a286:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a28e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a292:	4013      	ands	r3, r2
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	6812      	ldr	r2, [r2, #0]
 800a298:	68f9      	ldr	r1, [r7, #12]
 800a29a:	430b      	orrs	r3, r1
 800a29c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a2a4:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a2ac:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a2ae:	4313      	orrs	r3, r2
 800a2b0:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2ba:	f023 0103 	bic.w	r1, r3, #3
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	68fa      	ldr	r2, [r7, #12]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a2d2:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a2d6:	683b      	ldr	r3, [r7, #0]
 800a2d8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	430a      	orrs	r2, r1
 800a2e0:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a2e8:	683a      	ldr	r2, [r7, #0]
 800a2ea:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a2ee:	2a00      	cmp	r2, #0
 800a2f0:	d101      	bne.n	800a2f6 <ETH_SetMACConfig+0x1ee>
 800a2f2:	2240      	movs	r2, #64	; 0x40
 800a2f4:	e000      	b.n	800a2f8 <ETH_SetMACConfig+0x1f0>
 800a2f6:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a2f8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a300:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a30a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a30c:	4313      	orrs	r3, r2
 800a30e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a318:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68fa      	ldr	r2, [r7, #12]
 800a322:	430a      	orrs	r2, r1
 800a324:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a328:	bf00      	nop
 800a32a:	3714      	adds	r7, #20
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr
 800a334:	00048083 	.word	0x00048083
 800a338:	c0f88000 	.word	0xc0f88000
 800a33c:	fffffef0 	.word	0xfffffef0

0800a340 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a340:	b480      	push	{r7}
 800a342:	b085      	sub	sp, #20
 800a344:	af00      	add	r7, sp, #0
 800a346:	6078      	str	r0, [r7, #4]
 800a348:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a352:	681a      	ldr	r2, [r3, #0]
 800a354:	4b38      	ldr	r3, [pc, #224]	; (800a438 <ETH_SetDMAConfig+0xf8>)
 800a356:	4013      	ands	r3, r2
 800a358:	683a      	ldr	r2, [r7, #0]
 800a35a:	6811      	ldr	r1, [r2, #0]
 800a35c:	687a      	ldr	r2, [r7, #4]
 800a35e:	6812      	ldr	r2, [r2, #0]
 800a360:	430b      	orrs	r3, r1
 800a362:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a366:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a368:	683b      	ldr	r3, [r7, #0]
 800a36a:	791b      	ldrb	r3, [r3, #4]
 800a36c:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a372:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	7b1b      	ldrb	r3, [r3, #12]
 800a378:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a37a:	4313      	orrs	r3, r2
 800a37c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	4b2c      	ldr	r3, [pc, #176]	; (800a43c <ETH_SetDMAConfig+0xfc>)
 800a38a:	4013      	ands	r3, r2
 800a38c:	687a      	ldr	r2, [r7, #4]
 800a38e:	6812      	ldr	r2, [r2, #0]
 800a390:	68f9      	ldr	r1, [r7, #12]
 800a392:	430b      	orrs	r3, r1
 800a394:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a398:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a39a:	683b      	ldr	r3, [r7, #0]
 800a39c:	7b5b      	ldrb	r3, [r3, #13]
 800a39e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a3a0:	683b      	ldr	r3, [r7, #0]
 800a3a2:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3b0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a3b4:	4b22      	ldr	r3, [pc, #136]	; (800a440 <ETH_SetDMAConfig+0x100>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	430b      	orrs	r3, r1
 800a3c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3c4:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a3cc:	683b      	ldr	r3, [r7, #0]
 800a3ce:	7d1b      	ldrb	r3, [r3, #20]
 800a3d0:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3d2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	7f5b      	ldrb	r3, [r3, #29]
 800a3d8:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a3da:	4313      	orrs	r3, r2
 800a3dc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a3e6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a3ea:	4b16      	ldr	r3, [pc, #88]	; (800a444 <ETH_SetDMAConfig+0x104>)
 800a3ec:	4013      	ands	r3, r2
 800a3ee:	687a      	ldr	r2, [r7, #4]
 800a3f0:	6812      	ldr	r2, [r2, #0]
 800a3f2:	68f9      	ldr	r1, [r7, #12]
 800a3f4:	430b      	orrs	r3, r1
 800a3f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a3fa:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	7f1b      	ldrb	r3, [r3, #28]
 800a402:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a404:	683b      	ldr	r3, [r7, #0]
 800a406:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a408:	4313      	orrs	r3, r2
 800a40a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a414:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a418:	4b0b      	ldr	r3, [pc, #44]	; (800a448 <ETH_SetDMAConfig+0x108>)
 800a41a:	4013      	ands	r3, r2
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	68f9      	ldr	r1, [r7, #12]
 800a422:	430b      	orrs	r3, r1
 800a424:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a428:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a42c:	bf00      	nop
 800a42e:	3714      	adds	r7, #20
 800a430:	46bd      	mov	sp, r7
 800a432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a436:	4770      	bx	lr
 800a438:	ffff87fd 	.word	0xffff87fd
 800a43c:	ffff2ffe 	.word	0xffff2ffe
 800a440:	fffec000 	.word	0xfffec000
 800a444:	ffc0efef 	.word	0xffc0efef
 800a448:	7fc0ffff 	.word	0x7fc0ffff

0800a44c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b0a4      	sub	sp, #144	; 0x90
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a454:	2301      	movs	r3, #1
 800a456:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a45a:	2300      	movs	r3, #0
 800a45c:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a45e:	2300      	movs	r3, #0
 800a460:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a464:	2300      	movs	r3, #0
 800a466:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a470:	2301      	movs	r3, #1
 800a472:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a476:	2301      	movs	r3, #1
 800a478:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a47c:	2300      	movs	r3, #0
 800a47e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a482:	2301      	movs	r3, #1
 800a484:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a488:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a48c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a48e:	2300      	movs	r3, #0
 800a490:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a494:	2300      	movs	r3, #0
 800a496:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a498:	2300      	movs	r3, #0
 800a49a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a4a4:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a4a8:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a4ca:	2300      	movs	r3, #0
 800a4cc:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a4de:	2301      	movs	r3, #1
 800a4e0:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a4e4:	2320      	movs	r3, #32
 800a4e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a4ea:	2301      	movs	r3, #1
 800a4ec:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a4f0:	2300      	movs	r3, #0
 800a4f2:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a4f6:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a4fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a4fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a500:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a502:	2300      	movs	r3, #0
 800a504:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a508:	2302      	movs	r3, #2
 800a50a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a50e:	2300      	movs	r3, #0
 800a510:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a514:	2300      	movs	r3, #0
 800a516:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a51a:	2300      	movs	r3, #0
 800a51c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a520:	2301      	movs	r3, #1
 800a522:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a526:	2300      	movs	r3, #0
 800a528:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a52a:	2301      	movs	r3, #1
 800a52c:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a530:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a534:	4619      	mov	r1, r3
 800a536:	6878      	ldr	r0, [r7, #4]
 800a538:	f7ff fde6 	bl	800a108 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a53c:	2301      	movs	r3, #1
 800a53e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a540:	2301      	movs	r3, #1
 800a542:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a544:	2300      	movs	r3, #0
 800a546:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a548:	2300      	movs	r3, #0
 800a54a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a54e:	2300      	movs	r3, #0
 800a550:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a552:	2300      	movs	r3, #0
 800a554:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a556:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a55a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a55c:	2300      	movs	r3, #0
 800a55e:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a560:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a564:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a566:	2300      	movs	r3, #0
 800a568:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a56c:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a570:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a572:	f107 0308 	add.w	r3, r7, #8
 800a576:	4619      	mov	r1, r3
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f7ff fee1 	bl	800a340 <ETH_SetDMAConfig>
}
 800a57e:	bf00      	nop
 800a580:	3790      	adds	r7, #144	; 0x90
 800a582:	46bd      	mov	sp, r7
 800a584:	bd80      	pop	{r7, pc}

0800a586 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a586:	b480      	push	{r7}
 800a588:	b085      	sub	sp, #20
 800a58a:	af00      	add	r7, sp, #0
 800a58c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a58e:	2300      	movs	r3, #0
 800a590:	60fb      	str	r3, [r7, #12]
 800a592:	e01d      	b.n	800a5d0 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	68d9      	ldr	r1, [r3, #12]
 800a598:	68fa      	ldr	r2, [r7, #12]
 800a59a:	4613      	mov	r3, r2
 800a59c:	005b      	lsls	r3, r3, #1
 800a59e:	4413      	add	r3, r2
 800a5a0:	00db      	lsls	r3, r3, #3
 800a5a2:	440b      	add	r3, r1
 800a5a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a5a6:	68bb      	ldr	r3, [r7, #8]
 800a5a8:	2200      	movs	r2, #0
 800a5aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2200      	movs	r2, #0
 800a5b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a5b8:	68bb      	ldr	r3, [r7, #8]
 800a5ba:	2200      	movs	r2, #0
 800a5bc:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a5be:	68b9      	ldr	r1, [r7, #8]
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	3206      	adds	r2, #6
 800a5c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	3301      	adds	r3, #1
 800a5ce:	60fb      	str	r3, [r7, #12]
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	2b03      	cmp	r3, #3
 800a5d4:	d9de      	bls.n	800a594 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	2200      	movs	r2, #0
 800a5da:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e4:	461a      	mov	r2, r3
 800a5e6:	2303      	movs	r3, #3
 800a5e8:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	68da      	ldr	r2, [r3, #12]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5f8:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a608:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a60c:	bf00      	nop
 800a60e:	3714      	adds	r7, #20
 800a610:	46bd      	mov	sp, r7
 800a612:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a616:	4770      	bx	lr

0800a618 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a618:	b480      	push	{r7}
 800a61a:	b085      	sub	sp, #20
 800a61c:	af00      	add	r7, sp, #0
 800a61e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a620:	2300      	movs	r3, #0
 800a622:	60fb      	str	r3, [r7, #12]
 800a624:	e023      	b.n	800a66e <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6919      	ldr	r1, [r3, #16]
 800a62a:	68fa      	ldr	r2, [r7, #12]
 800a62c:	4613      	mov	r3, r2
 800a62e:	005b      	lsls	r3, r3, #1
 800a630:	4413      	add	r3, r2
 800a632:	00db      	lsls	r3, r3, #3
 800a634:	440b      	add	r3, r1
 800a636:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a638:	68bb      	ldr	r3, [r7, #8]
 800a63a:	2200      	movs	r2, #0
 800a63c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	2200      	movs	r2, #0
 800a642:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a644:	68bb      	ldr	r3, [r7, #8]
 800a646:	2200      	movs	r2, #0
 800a648:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a64a:	68bb      	ldr	r3, [r7, #8]
 800a64c:	2200      	movs	r2, #0
 800a64e:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a650:	68bb      	ldr	r3, [r7, #8]
 800a652:	2200      	movs	r2, #0
 800a654:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a656:	68bb      	ldr	r3, [r7, #8]
 800a658:	2200      	movs	r2, #0
 800a65a:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a65c:	68b9      	ldr	r1, [r7, #8]
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	68fa      	ldr	r2, [r7, #12]
 800a662:	3212      	adds	r2, #18
 800a664:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	3301      	adds	r3, #1
 800a66c:	60fb      	str	r3, [r7, #12]
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	2b03      	cmp	r3, #3
 800a672:	d9d8      	bls.n	800a626 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2200      	movs	r2, #0
 800a678:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	2200      	movs	r2, #0
 800a67e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2200      	movs	r2, #0
 800a684:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	2200      	movs	r2, #0
 800a68a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	2200      	movs	r2, #0
 800a690:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a69a:	461a      	mov	r2, r3
 800a69c:	2303      	movs	r3, #3
 800a69e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	691a      	ldr	r2, [r3, #16]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	681b      	ldr	r3, [r3, #0]
 800a6aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6ae:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6c2:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a6c6:	bf00      	nop
 800a6c8:	3714      	adds	r7, #20
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
	...

0800a6d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b089      	sub	sp, #36	; 0x24
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
 800a6dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a6de:	2300      	movs	r3, #0
 800a6e0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a6e2:	4b89      	ldr	r3, [pc, #548]	; (800a908 <HAL_GPIO_Init+0x234>)
 800a6e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a6e6:	e194      	b.n	800aa12 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	2101      	movs	r1, #1
 800a6ee:	69fb      	ldr	r3, [r7, #28]
 800a6f0:	fa01 f303 	lsl.w	r3, r1, r3
 800a6f4:	4013      	ands	r3, r2
 800a6f6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a6f8:	693b      	ldr	r3, [r7, #16]
 800a6fa:	2b00      	cmp	r3, #0
 800a6fc:	f000 8186 	beq.w	800aa0c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a700:	683b      	ldr	r3, [r7, #0]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	f003 0303 	and.w	r3, r3, #3
 800a708:	2b01      	cmp	r3, #1
 800a70a:	d005      	beq.n	800a718 <HAL_GPIO_Init+0x44>
 800a70c:	683b      	ldr	r3, [r7, #0]
 800a70e:	685b      	ldr	r3, [r3, #4]
 800a710:	f003 0303 	and.w	r3, r3, #3
 800a714:	2b02      	cmp	r3, #2
 800a716:	d130      	bne.n	800a77a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	689b      	ldr	r3, [r3, #8]
 800a71c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a71e:	69fb      	ldr	r3, [r7, #28]
 800a720:	005b      	lsls	r3, r3, #1
 800a722:	2203      	movs	r2, #3
 800a724:	fa02 f303 	lsl.w	r3, r2, r3
 800a728:	43db      	mvns	r3, r3
 800a72a:	69ba      	ldr	r2, [r7, #24]
 800a72c:	4013      	ands	r3, r2
 800a72e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	68da      	ldr	r2, [r3, #12]
 800a734:	69fb      	ldr	r3, [r7, #28]
 800a736:	005b      	lsls	r3, r3, #1
 800a738:	fa02 f303 	lsl.w	r3, r2, r3
 800a73c:	69ba      	ldr	r2, [r7, #24]
 800a73e:	4313      	orrs	r3, r2
 800a740:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	69ba      	ldr	r2, [r7, #24]
 800a746:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	685b      	ldr	r3, [r3, #4]
 800a74c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a74e:	2201      	movs	r2, #1
 800a750:	69fb      	ldr	r3, [r7, #28]
 800a752:	fa02 f303 	lsl.w	r3, r2, r3
 800a756:	43db      	mvns	r3, r3
 800a758:	69ba      	ldr	r2, [r7, #24]
 800a75a:	4013      	ands	r3, r2
 800a75c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a75e:	683b      	ldr	r3, [r7, #0]
 800a760:	685b      	ldr	r3, [r3, #4]
 800a762:	091b      	lsrs	r3, r3, #4
 800a764:	f003 0201 	and.w	r2, r3, #1
 800a768:	69fb      	ldr	r3, [r7, #28]
 800a76a:	fa02 f303 	lsl.w	r3, r2, r3
 800a76e:	69ba      	ldr	r2, [r7, #24]
 800a770:	4313      	orrs	r3, r2
 800a772:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	69ba      	ldr	r2, [r7, #24]
 800a778:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a77a:	683b      	ldr	r3, [r7, #0]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	f003 0303 	and.w	r3, r3, #3
 800a782:	2b03      	cmp	r3, #3
 800a784:	d017      	beq.n	800a7b6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68db      	ldr	r3, [r3, #12]
 800a78a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a78c:	69fb      	ldr	r3, [r7, #28]
 800a78e:	005b      	lsls	r3, r3, #1
 800a790:	2203      	movs	r2, #3
 800a792:	fa02 f303 	lsl.w	r3, r2, r3
 800a796:	43db      	mvns	r3, r3
 800a798:	69ba      	ldr	r2, [r7, #24]
 800a79a:	4013      	ands	r3, r2
 800a79c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	689a      	ldr	r2, [r3, #8]
 800a7a2:	69fb      	ldr	r3, [r7, #28]
 800a7a4:	005b      	lsls	r3, r3, #1
 800a7a6:	fa02 f303 	lsl.w	r3, r2, r3
 800a7aa:	69ba      	ldr	r2, [r7, #24]
 800a7ac:	4313      	orrs	r3, r2
 800a7ae:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	69ba      	ldr	r2, [r7, #24]
 800a7b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a7b6:	683b      	ldr	r3, [r7, #0]
 800a7b8:	685b      	ldr	r3, [r3, #4]
 800a7ba:	f003 0303 	and.w	r3, r3, #3
 800a7be:	2b02      	cmp	r3, #2
 800a7c0:	d123      	bne.n	800a80a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a7c2:	69fb      	ldr	r3, [r7, #28]
 800a7c4:	08da      	lsrs	r2, r3, #3
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	3208      	adds	r2, #8
 800a7ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a7d0:	69fb      	ldr	r3, [r7, #28]
 800a7d2:	f003 0307 	and.w	r3, r3, #7
 800a7d6:	009b      	lsls	r3, r3, #2
 800a7d8:	220f      	movs	r2, #15
 800a7da:	fa02 f303 	lsl.w	r3, r2, r3
 800a7de:	43db      	mvns	r3, r3
 800a7e0:	69ba      	ldr	r2, [r7, #24]
 800a7e2:	4013      	ands	r3, r2
 800a7e4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	691a      	ldr	r2, [r3, #16]
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	f003 0307 	and.w	r3, r3, #7
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a7f6:	69ba      	ldr	r2, [r7, #24]
 800a7f8:	4313      	orrs	r3, r2
 800a7fa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a7fc:	69fb      	ldr	r3, [r7, #28]
 800a7fe:	08da      	lsrs	r2, r3, #3
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	3208      	adds	r2, #8
 800a804:	69b9      	ldr	r1, [r7, #24]
 800a806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a810:	69fb      	ldr	r3, [r7, #28]
 800a812:	005b      	lsls	r3, r3, #1
 800a814:	2203      	movs	r2, #3
 800a816:	fa02 f303 	lsl.w	r3, r2, r3
 800a81a:	43db      	mvns	r3, r3
 800a81c:	69ba      	ldr	r2, [r7, #24]
 800a81e:	4013      	ands	r3, r2
 800a820:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	f003 0203 	and.w	r2, r3, #3
 800a82a:	69fb      	ldr	r3, [r7, #28]
 800a82c:	005b      	lsls	r3, r3, #1
 800a82e:	fa02 f303 	lsl.w	r3, r2, r3
 800a832:	69ba      	ldr	r2, [r7, #24]
 800a834:	4313      	orrs	r3, r2
 800a836:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	69ba      	ldr	r2, [r7, #24]
 800a83c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	685b      	ldr	r3, [r3, #4]
 800a842:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a846:	2b00      	cmp	r3, #0
 800a848:	f000 80e0 	beq.w	800aa0c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a84c:	4b2f      	ldr	r3, [pc, #188]	; (800a90c <HAL_GPIO_Init+0x238>)
 800a84e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a852:	4a2e      	ldr	r2, [pc, #184]	; (800a90c <HAL_GPIO_Init+0x238>)
 800a854:	f043 0302 	orr.w	r3, r3, #2
 800a858:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a85c:	4b2b      	ldr	r3, [pc, #172]	; (800a90c <HAL_GPIO_Init+0x238>)
 800a85e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a862:	f003 0302 	and.w	r3, r3, #2
 800a866:	60fb      	str	r3, [r7, #12]
 800a868:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a86a:	4a29      	ldr	r2, [pc, #164]	; (800a910 <HAL_GPIO_Init+0x23c>)
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	089b      	lsrs	r3, r3, #2
 800a870:	3302      	adds	r3, #2
 800a872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a876:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	009b      	lsls	r3, r3, #2
 800a880:	220f      	movs	r2, #15
 800a882:	fa02 f303 	lsl.w	r3, r2, r3
 800a886:	43db      	mvns	r3, r3
 800a888:	69ba      	ldr	r2, [r7, #24]
 800a88a:	4013      	ands	r3, r2
 800a88c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	4a20      	ldr	r2, [pc, #128]	; (800a914 <HAL_GPIO_Init+0x240>)
 800a892:	4293      	cmp	r3, r2
 800a894:	d052      	beq.n	800a93c <HAL_GPIO_Init+0x268>
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4a1f      	ldr	r2, [pc, #124]	; (800a918 <HAL_GPIO_Init+0x244>)
 800a89a:	4293      	cmp	r3, r2
 800a89c:	d031      	beq.n	800a902 <HAL_GPIO_Init+0x22e>
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	4a1e      	ldr	r2, [pc, #120]	; (800a91c <HAL_GPIO_Init+0x248>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d02b      	beq.n	800a8fe <HAL_GPIO_Init+0x22a>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	4a1d      	ldr	r2, [pc, #116]	; (800a920 <HAL_GPIO_Init+0x24c>)
 800a8aa:	4293      	cmp	r3, r2
 800a8ac:	d025      	beq.n	800a8fa <HAL_GPIO_Init+0x226>
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	4a1c      	ldr	r2, [pc, #112]	; (800a924 <HAL_GPIO_Init+0x250>)
 800a8b2:	4293      	cmp	r3, r2
 800a8b4:	d01f      	beq.n	800a8f6 <HAL_GPIO_Init+0x222>
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a1b      	ldr	r2, [pc, #108]	; (800a928 <HAL_GPIO_Init+0x254>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d019      	beq.n	800a8f2 <HAL_GPIO_Init+0x21e>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a1a      	ldr	r2, [pc, #104]	; (800a92c <HAL_GPIO_Init+0x258>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d013      	beq.n	800a8ee <HAL_GPIO_Init+0x21a>
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	4a19      	ldr	r2, [pc, #100]	; (800a930 <HAL_GPIO_Init+0x25c>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d00d      	beq.n	800a8ea <HAL_GPIO_Init+0x216>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4a18      	ldr	r2, [pc, #96]	; (800a934 <HAL_GPIO_Init+0x260>)
 800a8d2:	4293      	cmp	r3, r2
 800a8d4:	d007      	beq.n	800a8e6 <HAL_GPIO_Init+0x212>
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	4a17      	ldr	r2, [pc, #92]	; (800a938 <HAL_GPIO_Init+0x264>)
 800a8da:	4293      	cmp	r3, r2
 800a8dc:	d101      	bne.n	800a8e2 <HAL_GPIO_Init+0x20e>
 800a8de:	2309      	movs	r3, #9
 800a8e0:	e02d      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8e2:	230a      	movs	r3, #10
 800a8e4:	e02b      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8e6:	2308      	movs	r3, #8
 800a8e8:	e029      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8ea:	2307      	movs	r3, #7
 800a8ec:	e027      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8ee:	2306      	movs	r3, #6
 800a8f0:	e025      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8f2:	2305      	movs	r3, #5
 800a8f4:	e023      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8f6:	2304      	movs	r3, #4
 800a8f8:	e021      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8fa:	2303      	movs	r3, #3
 800a8fc:	e01f      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a8fe:	2302      	movs	r3, #2
 800a900:	e01d      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a902:	2301      	movs	r3, #1
 800a904:	e01b      	b.n	800a93e <HAL_GPIO_Init+0x26a>
 800a906:	bf00      	nop
 800a908:	58000080 	.word	0x58000080
 800a90c:	58024400 	.word	0x58024400
 800a910:	58000400 	.word	0x58000400
 800a914:	58020000 	.word	0x58020000
 800a918:	58020400 	.word	0x58020400
 800a91c:	58020800 	.word	0x58020800
 800a920:	58020c00 	.word	0x58020c00
 800a924:	58021000 	.word	0x58021000
 800a928:	58021400 	.word	0x58021400
 800a92c:	58021800 	.word	0x58021800
 800a930:	58021c00 	.word	0x58021c00
 800a934:	58022000 	.word	0x58022000
 800a938:	58022400 	.word	0x58022400
 800a93c:	2300      	movs	r3, #0
 800a93e:	69fa      	ldr	r2, [r7, #28]
 800a940:	f002 0203 	and.w	r2, r2, #3
 800a944:	0092      	lsls	r2, r2, #2
 800a946:	4093      	lsls	r3, r2
 800a948:	69ba      	ldr	r2, [r7, #24]
 800a94a:	4313      	orrs	r3, r2
 800a94c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a94e:	4938      	ldr	r1, [pc, #224]	; (800aa30 <HAL_GPIO_Init+0x35c>)
 800a950:	69fb      	ldr	r3, [r7, #28]
 800a952:	089b      	lsrs	r3, r3, #2
 800a954:	3302      	adds	r3, #2
 800a956:	69ba      	ldr	r2, [r7, #24]
 800a958:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a95c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	43db      	mvns	r3, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4013      	ands	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	685b      	ldr	r3, [r3, #4]
 800a972:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a976:	2b00      	cmp	r3, #0
 800a978:	d003      	beq.n	800a982 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800a97a:	69ba      	ldr	r2, [r7, #24]
 800a97c:	693b      	ldr	r3, [r7, #16]
 800a97e:	4313      	orrs	r3, r2
 800a980:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800a982:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a986:	69bb      	ldr	r3, [r7, #24]
 800a988:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800a98a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800a98e:	685b      	ldr	r3, [r3, #4]
 800a990:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	43db      	mvns	r3, r3
 800a996:	69ba      	ldr	r2, [r7, #24]
 800a998:	4013      	ands	r3, r2
 800a99a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d003      	beq.n	800a9b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800a9a8:	69ba      	ldr	r2, [r7, #24]
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	4313      	orrs	r3, r2
 800a9ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800a9b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800a9b4:	69bb      	ldr	r3, [r7, #24]
 800a9b6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800a9b8:	697b      	ldr	r3, [r7, #20]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	43db      	mvns	r3, r3
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	4013      	ands	r3, r2
 800a9c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800a9d4:	69ba      	ldr	r2, [r7, #24]
 800a9d6:	693b      	ldr	r3, [r7, #16]
 800a9d8:	4313      	orrs	r3, r2
 800a9da:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	69ba      	ldr	r2, [r7, #24]
 800a9e0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	43db      	mvns	r3, r3
 800a9ec:	69ba      	ldr	r2, [r7, #24]
 800a9ee:	4013      	ands	r3, r2
 800a9f0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	685b      	ldr	r3, [r3, #4]
 800a9f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d003      	beq.n	800aa06 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800a9fe:	69ba      	ldr	r2, [r7, #24]
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	4313      	orrs	r3, r2
 800aa04:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aa06:	697b      	ldr	r3, [r7, #20]
 800aa08:	69ba      	ldr	r2, [r7, #24]
 800aa0a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aa0c:	69fb      	ldr	r3, [r7, #28]
 800aa0e:	3301      	adds	r3, #1
 800aa10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	69fb      	ldr	r3, [r7, #28]
 800aa18:	fa22 f303 	lsr.w	r3, r2, r3
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	f47f ae63 	bne.w	800a6e8 <HAL_GPIO_Init+0x14>
  }
}
 800aa22:	bf00      	nop
 800aa24:	bf00      	nop
 800aa26:	3724      	adds	r7, #36	; 0x24
 800aa28:	46bd      	mov	sp, r7
 800aa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2e:	4770      	bx	lr
 800aa30:	58000400 	.word	0x58000400

0800aa34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b085      	sub	sp, #20
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	460b      	mov	r3, r1
 800aa3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	691a      	ldr	r2, [r3, #16]
 800aa44:	887b      	ldrh	r3, [r7, #2]
 800aa46:	4013      	ands	r3, r2
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	d002      	beq.n	800aa52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	73fb      	strb	r3, [r7, #15]
 800aa50:	e001      	b.n	800aa56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800aa52:	2300      	movs	r3, #0
 800aa54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800aa56:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa58:	4618      	mov	r0, r3
 800aa5a:	3714      	adds	r7, #20
 800aa5c:	46bd      	mov	sp, r7
 800aa5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa62:	4770      	bx	lr

0800aa64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
 800aa6c:	460b      	mov	r3, r1
 800aa6e:	807b      	strh	r3, [r7, #2]
 800aa70:	4613      	mov	r3, r2
 800aa72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800aa74:	787b      	ldrb	r3, [r7, #1]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d003      	beq.n	800aa82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800aa7a:	887a      	ldrh	r2, [r7, #2]
 800aa7c:	687b      	ldr	r3, [r7, #4]
 800aa7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800aa80:	e003      	b.n	800aa8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800aa82:	887b      	ldrh	r3, [r7, #2]
 800aa84:	041a      	lsls	r2, r3, #16
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	619a      	str	r2, [r3, #24]
}
 800aa8a:	bf00      	nop
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr

0800aa96 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800aa96:	b480      	push	{r7}
 800aa98:	b085      	sub	sp, #20
 800aa9a:	af00      	add	r7, sp, #0
 800aa9c:	6078      	str	r0, [r7, #4]
 800aa9e:	460b      	mov	r3, r1
 800aaa0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	695b      	ldr	r3, [r3, #20]
 800aaa6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800aaa8:	887a      	ldrh	r2, [r7, #2]
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	4013      	ands	r3, r2
 800aaae:	041a      	lsls	r2, r3, #16
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	43d9      	mvns	r1, r3
 800aab4:	887b      	ldrh	r3, [r7, #2]
 800aab6:	400b      	ands	r3, r1
 800aab8:	431a      	orrs	r2, r3
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	619a      	str	r2, [r3, #24]
}
 800aabe:	bf00      	nop
 800aac0:	3714      	adds	r7, #20
 800aac2:	46bd      	mov	sp, r7
 800aac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aac8:	4770      	bx	lr
	...

0800aacc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800aacc:	b480      	push	{r7}
 800aace:	b083      	sub	sp, #12
 800aad0:	af00      	add	r7, sp, #0
 800aad2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800aad4:	4a08      	ldr	r2, [pc, #32]	; (800aaf8 <HAL_HSEM_FastTake+0x2c>)
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	3320      	adds	r3, #32
 800aada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800aade:	4a07      	ldr	r2, [pc, #28]	; (800aafc <HAL_HSEM_FastTake+0x30>)
 800aae0:	4293      	cmp	r3, r2
 800aae2:	d101      	bne.n	800aae8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800aae4:	2300      	movs	r3, #0
 800aae6:	e000      	b.n	800aaea <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800aae8:	2301      	movs	r3, #1
}
 800aaea:	4618      	mov	r0, r3
 800aaec:	370c      	adds	r7, #12
 800aaee:	46bd      	mov	sp, r7
 800aaf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf4:	4770      	bx	lr
 800aaf6:	bf00      	nop
 800aaf8:	58026400 	.word	0x58026400
 800aafc:	80000300 	.word	0x80000300

0800ab00 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800ab00:	b480      	push	{r7}
 800ab02:	b083      	sub	sp, #12
 800ab04:	af00      	add	r7, sp, #0
 800ab06:	6078      	str	r0, [r7, #4]
 800ab08:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800ab0a:	4906      	ldr	r1, [pc, #24]	; (800ab24 <HAL_HSEM_Release+0x24>)
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800ab18:	bf00      	nop
 800ab1a:	370c      	adds	r7, #12
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	58026400 	.word	0x58026400

0800ab28 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab2a:	b08f      	sub	sp, #60	; 0x3c
 800ab2c:	af0a      	add	r7, sp, #40	; 0x28
 800ab2e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d101      	bne.n	800ab3a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab36:	2301      	movs	r3, #1
 800ab38:	e116      	b.n	800ad68 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ab46:	b2db      	uxtb	r3, r3
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d106      	bne.n	800ab5a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f7fc fc81 	bl	800745c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2203      	movs	r2, #3
 800ab5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d102      	bne.n	800ab74 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2200      	movs	r2, #0
 800ab72:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	4618      	mov	r0, r3
 800ab7a:	f005 f977 	bl	800fe6c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	603b      	str	r3, [r7, #0]
 800ab84:	687e      	ldr	r6, [r7, #4]
 800ab86:	466d      	mov	r5, sp
 800ab88:	f106 0410 	add.w	r4, r6, #16
 800ab8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab90:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ab92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ab94:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ab98:	e885 0003 	stmia.w	r5, {r0, r1}
 800ab9c:	1d33      	adds	r3, r6, #4
 800ab9e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800aba0:	6838      	ldr	r0, [r7, #0]
 800aba2:	f005 f8f5 	bl	800fd90 <USB_CoreInit>
 800aba6:	4603      	mov	r3, r0
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d005      	beq.n	800abb8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2202      	movs	r2, #2
 800abb0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800abb4:	2301      	movs	r3, #1
 800abb6:	e0d7      	b.n	800ad68 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	2100      	movs	r1, #0
 800abbe:	4618      	mov	r0, r3
 800abc0:	f005 f965 	bl	800fe8e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abc4:	2300      	movs	r3, #0
 800abc6:	73fb      	strb	r3, [r7, #15]
 800abc8:	e04a      	b.n	800ac60 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abca:	7bfa      	ldrb	r2, [r7, #15]
 800abcc:	6879      	ldr	r1, [r7, #4]
 800abce:	4613      	mov	r3, r2
 800abd0:	00db      	lsls	r3, r3, #3
 800abd2:	4413      	add	r3, r2
 800abd4:	009b      	lsls	r3, r3, #2
 800abd6:	440b      	add	r3, r1
 800abd8:	333d      	adds	r3, #61	; 0x3d
 800abda:	2201      	movs	r2, #1
 800abdc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800abde:	7bfa      	ldrb	r2, [r7, #15]
 800abe0:	6879      	ldr	r1, [r7, #4]
 800abe2:	4613      	mov	r3, r2
 800abe4:	00db      	lsls	r3, r3, #3
 800abe6:	4413      	add	r3, r2
 800abe8:	009b      	lsls	r3, r3, #2
 800abea:	440b      	add	r3, r1
 800abec:	333c      	adds	r3, #60	; 0x3c
 800abee:	7bfa      	ldrb	r2, [r7, #15]
 800abf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800abf2:	7bfa      	ldrb	r2, [r7, #15]
 800abf4:	7bfb      	ldrb	r3, [r7, #15]
 800abf6:	b298      	uxth	r0, r3
 800abf8:	6879      	ldr	r1, [r7, #4]
 800abfa:	4613      	mov	r3, r2
 800abfc:	00db      	lsls	r3, r3, #3
 800abfe:	4413      	add	r3, r2
 800ac00:	009b      	lsls	r3, r3, #2
 800ac02:	440b      	add	r3, r1
 800ac04:	3344      	adds	r3, #68	; 0x44
 800ac06:	4602      	mov	r2, r0
 800ac08:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac0a:	7bfa      	ldrb	r2, [r7, #15]
 800ac0c:	6879      	ldr	r1, [r7, #4]
 800ac0e:	4613      	mov	r3, r2
 800ac10:	00db      	lsls	r3, r3, #3
 800ac12:	4413      	add	r3, r2
 800ac14:	009b      	lsls	r3, r3, #2
 800ac16:	440b      	add	r3, r1
 800ac18:	3340      	adds	r3, #64	; 0x40
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac1e:	7bfa      	ldrb	r2, [r7, #15]
 800ac20:	6879      	ldr	r1, [r7, #4]
 800ac22:	4613      	mov	r3, r2
 800ac24:	00db      	lsls	r3, r3, #3
 800ac26:	4413      	add	r3, r2
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	3348      	adds	r3, #72	; 0x48
 800ac2e:	2200      	movs	r2, #0
 800ac30:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac32:	7bfa      	ldrb	r2, [r7, #15]
 800ac34:	6879      	ldr	r1, [r7, #4]
 800ac36:	4613      	mov	r3, r2
 800ac38:	00db      	lsls	r3, r3, #3
 800ac3a:	4413      	add	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	440b      	add	r3, r1
 800ac40:	334c      	adds	r3, #76	; 0x4c
 800ac42:	2200      	movs	r2, #0
 800ac44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac46:	7bfa      	ldrb	r2, [r7, #15]
 800ac48:	6879      	ldr	r1, [r7, #4]
 800ac4a:	4613      	mov	r3, r2
 800ac4c:	00db      	lsls	r3, r3, #3
 800ac4e:	4413      	add	r3, r2
 800ac50:	009b      	lsls	r3, r3, #2
 800ac52:	440b      	add	r3, r1
 800ac54:	3354      	adds	r3, #84	; 0x54
 800ac56:	2200      	movs	r2, #0
 800ac58:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac5a:	7bfb      	ldrb	r3, [r7, #15]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	73fb      	strb	r3, [r7, #15]
 800ac60:	7bfa      	ldrb	r2, [r7, #15]
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	685b      	ldr	r3, [r3, #4]
 800ac66:	429a      	cmp	r2, r3
 800ac68:	d3af      	bcc.n	800abca <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	73fb      	strb	r3, [r7, #15]
 800ac6e:	e044      	b.n	800acfa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac70:	7bfa      	ldrb	r2, [r7, #15]
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	4613      	mov	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800ac82:	2200      	movs	r2, #0
 800ac84:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800ac86:	7bfa      	ldrb	r2, [r7, #15]
 800ac88:	6879      	ldr	r1, [r7, #4]
 800ac8a:	4613      	mov	r3, r2
 800ac8c:	00db      	lsls	r3, r3, #3
 800ac8e:	4413      	add	r3, r2
 800ac90:	009b      	lsls	r3, r3, #2
 800ac92:	440b      	add	r3, r1
 800ac94:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800ac98:	7bfa      	ldrb	r2, [r7, #15]
 800ac9a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800ac9c:	7bfa      	ldrb	r2, [r7, #15]
 800ac9e:	6879      	ldr	r1, [r7, #4]
 800aca0:	4613      	mov	r3, r2
 800aca2:	00db      	lsls	r3, r3, #3
 800aca4:	4413      	add	r3, r2
 800aca6:	009b      	lsls	r3, r3, #2
 800aca8:	440b      	add	r3, r1
 800acaa:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800acae:	2200      	movs	r2, #0
 800acb0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acb2:	7bfa      	ldrb	r2, [r7, #15]
 800acb4:	6879      	ldr	r1, [r7, #4]
 800acb6:	4613      	mov	r3, r2
 800acb8:	00db      	lsls	r3, r3, #3
 800acba:	4413      	add	r3, r2
 800acbc:	009b      	lsls	r3, r3, #2
 800acbe:	440b      	add	r3, r1
 800acc0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800acc4:	2200      	movs	r2, #0
 800acc6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acc8:	7bfa      	ldrb	r2, [r7, #15]
 800acca:	6879      	ldr	r1, [r7, #4]
 800accc:	4613      	mov	r3, r2
 800acce:	00db      	lsls	r3, r3, #3
 800acd0:	4413      	add	r3, r2
 800acd2:	009b      	lsls	r3, r3, #2
 800acd4:	440b      	add	r3, r1
 800acd6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800acda:	2200      	movs	r2, #0
 800acdc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800acde:	7bfa      	ldrb	r2, [r7, #15]
 800ace0:	6879      	ldr	r1, [r7, #4]
 800ace2:	4613      	mov	r3, r2
 800ace4:	00db      	lsls	r3, r3, #3
 800ace6:	4413      	add	r3, r2
 800ace8:	009b      	lsls	r3, r3, #2
 800acea:	440b      	add	r3, r1
 800acec:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800acf0:	2200      	movs	r2, #0
 800acf2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
 800acf6:	3301      	adds	r3, #1
 800acf8:	73fb      	strb	r3, [r7, #15]
 800acfa:	7bfa      	ldrb	r2, [r7, #15]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	685b      	ldr	r3, [r3, #4]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d3b5      	bcc.n	800ac70 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	603b      	str	r3, [r7, #0]
 800ad0a:	687e      	ldr	r6, [r7, #4]
 800ad0c:	466d      	mov	r5, sp
 800ad0e:	f106 0410 	add.w	r4, r6, #16
 800ad12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad18:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad1a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad1e:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad22:	1d33      	adds	r3, r6, #4
 800ad24:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad26:	6838      	ldr	r0, [r7, #0]
 800ad28:	f005 f8fe 	bl	800ff28 <USB_DevInit>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d005      	beq.n	800ad3e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	2202      	movs	r2, #2
 800ad36:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ad3a:	2301      	movs	r3, #1
 800ad3c:	e014      	b.n	800ad68 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	2200      	movs	r2, #0
 800ad42:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2201      	movs	r2, #1
 800ad4a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad52:	2b01      	cmp	r3, #1
 800ad54:	d102      	bne.n	800ad5c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f80a 	bl	800ad70 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4618      	mov	r0, r3
 800ad62:	f005 fabc 	bl	80102de <USB_DevDisconnect>

  return HAL_OK;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3714      	adds	r7, #20
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad70 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	2201      	movs	r2, #1
 800ad82:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2200      	movs	r2, #0
 800ad8a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800ad9e:	4b05      	ldr	r3, [pc, #20]	; (800adb4 <HAL_PCDEx_ActivateLPM+0x44>)
 800ada0:	4313      	orrs	r3, r2
 800ada2:	68fa      	ldr	r2, [r7, #12]
 800ada4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800ada6:	2300      	movs	r3, #0
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	3714      	adds	r7, #20
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr
 800adb4:	10000003 	.word	0x10000003

0800adb8 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800adb8:	b580      	push	{r7, lr}
 800adba:	b084      	sub	sp, #16
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800adc0:	4b29      	ldr	r3, [pc, #164]	; (800ae68 <HAL_PWREx_ConfigSupply+0xb0>)
 800adc2:	68db      	ldr	r3, [r3, #12]
 800adc4:	f003 0307 	and.w	r3, r3, #7
 800adc8:	2b06      	cmp	r3, #6
 800adca:	d00a      	beq.n	800ade2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800adcc:	4b26      	ldr	r3, [pc, #152]	; (800ae68 <HAL_PWREx_ConfigSupply+0xb0>)
 800adce:	68db      	ldr	r3, [r3, #12]
 800add0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800add4:	687a      	ldr	r2, [r7, #4]
 800add6:	429a      	cmp	r2, r3
 800add8:	d001      	beq.n	800adde <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800adda:	2301      	movs	r3, #1
 800addc:	e040      	b.n	800ae60 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800adde:	2300      	movs	r3, #0
 800ade0:	e03e      	b.n	800ae60 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ade2:	4b21      	ldr	r3, [pc, #132]	; (800ae68 <HAL_PWREx_ConfigSupply+0xb0>)
 800ade4:	68db      	ldr	r3, [r3, #12]
 800ade6:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800adea:	491f      	ldr	r1, [pc, #124]	; (800ae68 <HAL_PWREx_ConfigSupply+0xb0>)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	4313      	orrs	r3, r2
 800adf0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800adf2:	f7fc fcc5 	bl	8007780 <HAL_GetTick>
 800adf6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800adf8:	e009      	b.n	800ae0e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800adfa:	f7fc fcc1 	bl	8007780 <HAL_GetTick>
 800adfe:	4602      	mov	r2, r0
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	1ad3      	subs	r3, r2, r3
 800ae04:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae08:	d901      	bls.n	800ae0e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e028      	b.n	800ae60 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ae0e:	4b16      	ldr	r3, [pc, #88]	; (800ae68 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae10:	685b      	ldr	r3, [r3, #4]
 800ae12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ae16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae1a:	d1ee      	bne.n	800adfa <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2b1e      	cmp	r3, #30
 800ae20:	d008      	beq.n	800ae34 <HAL_PWREx_ConfigSupply+0x7c>
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	2b2e      	cmp	r3, #46	; 0x2e
 800ae26:	d005      	beq.n	800ae34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2b1d      	cmp	r3, #29
 800ae2c:	d002      	beq.n	800ae34 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	2b2d      	cmp	r3, #45	; 0x2d
 800ae32:	d114      	bne.n	800ae5e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ae34:	f7fc fca4 	bl	8007780 <HAL_GetTick>
 800ae38:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ae3a:	e009      	b.n	800ae50 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ae3c:	f7fc fca0 	bl	8007780 <HAL_GetTick>
 800ae40:	4602      	mov	r2, r0
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	1ad3      	subs	r3, r2, r3
 800ae46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ae4a:	d901      	bls.n	800ae50 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ae4c:	2301      	movs	r3, #1
 800ae4e:	e007      	b.n	800ae60 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ae50:	4b05      	ldr	r3, [pc, #20]	; (800ae68 <HAL_PWREx_ConfigSupply+0xb0>)
 800ae52:	68db      	ldr	r3, [r3, #12]
 800ae54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ae58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ae5c:	d1ee      	bne.n	800ae3c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ae5e:	2300      	movs	r3, #0
}
 800ae60:	4618      	mov	r0, r3
 800ae62:	3710      	adds	r7, #16
 800ae64:	46bd      	mov	sp, r7
 800ae66:	bd80      	pop	{r7, pc}
 800ae68:	58024800 	.word	0x58024800

0800ae6c <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800ae70:	4b05      	ldr	r3, [pc, #20]	; (800ae88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	4a04      	ldr	r2, [pc, #16]	; (800ae88 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800ae76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800ae7a:	60d3      	str	r3, [r2, #12]
}
 800ae7c:	bf00      	nop
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae84:	4770      	bx	lr
 800ae86:	bf00      	nop
 800ae88:	58024800 	.word	0x58024800

0800ae8c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b08c      	sub	sp, #48	; 0x30
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2b00      	cmp	r3, #0
 800ae98:	d102      	bne.n	800aea0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	f000 bc1d 	b.w	800b6da <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	f000 8087 	beq.w	800afbc <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800aeae:	4b99      	ldr	r3, [pc, #612]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800aeb0:	691b      	ldr	r3, [r3, #16]
 800aeb2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800aeb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800aeb8:	4b96      	ldr	r3, [pc, #600]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800aeba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aebc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800aebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec0:	2b10      	cmp	r3, #16
 800aec2:	d007      	beq.n	800aed4 <HAL_RCC_OscConfig+0x48>
 800aec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec6:	2b18      	cmp	r3, #24
 800aec8:	d110      	bne.n	800aeec <HAL_RCC_OscConfig+0x60>
 800aeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aecc:	f003 0303 	and.w	r3, r3, #3
 800aed0:	2b02      	cmp	r3, #2
 800aed2:	d10b      	bne.n	800aeec <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aed4:	4b8f      	ldr	r3, [pc, #572]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d06c      	beq.n	800afba <HAL_RCC_OscConfig+0x12e>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d168      	bne.n	800afba <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800aee8:	2301      	movs	r3, #1
 800aeea:	e3f6      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aef4:	d106      	bne.n	800af04 <HAL_RCC_OscConfig+0x78>
 800aef6:	4b87      	ldr	r3, [pc, #540]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a86      	ldr	r2, [pc, #536]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800aefc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af00:	6013      	str	r3, [r2, #0]
 800af02:	e02e      	b.n	800af62 <HAL_RCC_OscConfig+0xd6>
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	685b      	ldr	r3, [r3, #4]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d10c      	bne.n	800af26 <HAL_RCC_OscConfig+0x9a>
 800af0c:	4b81      	ldr	r3, [pc, #516]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	4a80      	ldr	r2, [pc, #512]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	4b7e      	ldr	r3, [pc, #504]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	4a7d      	ldr	r2, [pc, #500]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af22:	6013      	str	r3, [r2, #0]
 800af24:	e01d      	b.n	800af62 <HAL_RCC_OscConfig+0xd6>
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af2e:	d10c      	bne.n	800af4a <HAL_RCC_OscConfig+0xbe>
 800af30:	4b78      	ldr	r3, [pc, #480]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	4a77      	ldr	r2, [pc, #476]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af3a:	6013      	str	r3, [r2, #0]
 800af3c:	4b75      	ldr	r3, [pc, #468]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a74      	ldr	r2, [pc, #464]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af46:	6013      	str	r3, [r2, #0]
 800af48:	e00b      	b.n	800af62 <HAL_RCC_OscConfig+0xd6>
 800af4a:	4b72      	ldr	r3, [pc, #456]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a71      	ldr	r2, [pc, #452]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4b6f      	ldr	r3, [pc, #444]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a6e      	ldr	r2, [pc, #440]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af5c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d013      	beq.n	800af92 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af6a:	f7fc fc09 	bl	8007780 <HAL_GetTick>
 800af6e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af70:	e008      	b.n	800af84 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af72:	f7fc fc05 	bl	8007780 <HAL_GetTick>
 800af76:	4602      	mov	r2, r0
 800af78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af7a:	1ad3      	subs	r3, r2, r3
 800af7c:	2b64      	cmp	r3, #100	; 0x64
 800af7e:	d901      	bls.n	800af84 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800af80:	2303      	movs	r3, #3
 800af82:	e3aa      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af84:	4b63      	ldr	r3, [pc, #396]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	d0f0      	beq.n	800af72 <HAL_RCC_OscConfig+0xe6>
 800af90:	e014      	b.n	800afbc <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af92:	f7fc fbf5 	bl	8007780 <HAL_GetTick>
 800af96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800af98:	e008      	b.n	800afac <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800af9a:	f7fc fbf1 	bl	8007780 <HAL_GetTick>
 800af9e:	4602      	mov	r2, r0
 800afa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afa2:	1ad3      	subs	r3, r2, r3
 800afa4:	2b64      	cmp	r3, #100	; 0x64
 800afa6:	d901      	bls.n	800afac <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800afa8:	2303      	movs	r3, #3
 800afaa:	e396      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afac:	4b59      	ldr	r3, [pc, #356]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	d1f0      	bne.n	800af9a <HAL_RCC_OscConfig+0x10e>
 800afb8:	e000      	b.n	800afbc <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	681b      	ldr	r3, [r3, #0]
 800afc0:	f003 0302 	and.w	r3, r3, #2
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	f000 80cb 	beq.w	800b160 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afca:	4b52      	ldr	r3, [pc, #328]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800afcc:	691b      	ldr	r3, [r3, #16]
 800afce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800afd2:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800afd4:	4b4f      	ldr	r3, [pc, #316]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800afd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800afd8:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	2b00      	cmp	r3, #0
 800afde:	d007      	beq.n	800aff0 <HAL_RCC_OscConfig+0x164>
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	2b18      	cmp	r3, #24
 800afe4:	d156      	bne.n	800b094 <HAL_RCC_OscConfig+0x208>
 800afe6:	69fb      	ldr	r3, [r7, #28]
 800afe8:	f003 0303 	and.w	r3, r3, #3
 800afec:	2b00      	cmp	r3, #0
 800afee:	d151      	bne.n	800b094 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800aff0:	4b48      	ldr	r3, [pc, #288]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	f003 0304 	and.w	r3, r3, #4
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d005      	beq.n	800b008 <HAL_RCC_OscConfig+0x17c>
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	68db      	ldr	r3, [r3, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800b004:	2301      	movs	r3, #1
 800b006:	e368      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b008:	4b42      	ldr	r3, [pc, #264]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	f023 0219 	bic.w	r2, r3, #25
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	68db      	ldr	r3, [r3, #12]
 800b014:	493f      	ldr	r1, [pc, #252]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b016:	4313      	orrs	r3, r2
 800b018:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800b01a:	f7fc fbb1 	bl	8007780 <HAL_GetTick>
 800b01e:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b020:	e008      	b.n	800b034 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b022:	f7fc fbad 	bl	8007780 <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b02a:	1ad3      	subs	r3, r2, r3
 800b02c:	2b02      	cmp	r3, #2
 800b02e:	d901      	bls.n	800b034 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800b030:	2303      	movs	r3, #3
 800b032:	e352      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b034:	4b37      	ldr	r3, [pc, #220]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	f003 0304 	and.w	r3, r3, #4
 800b03c:	2b00      	cmp	r3, #0
 800b03e:	d0f0      	beq.n	800b022 <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b040:	f7fc fbce 	bl	80077e0 <HAL_GetREVID>
 800b044:	4603      	mov	r3, r0
 800b046:	f241 0203 	movw	r2, #4099	; 0x1003
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d817      	bhi.n	800b07e <HAL_RCC_OscConfig+0x1f2>
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	691b      	ldr	r3, [r3, #16]
 800b052:	2b40      	cmp	r3, #64	; 0x40
 800b054:	d108      	bne.n	800b068 <HAL_RCC_OscConfig+0x1dc>
 800b056:	4b2f      	ldr	r3, [pc, #188]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b05e:	4a2d      	ldr	r2, [pc, #180]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b064:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b066:	e07b      	b.n	800b160 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b068:	4b2a      	ldr	r3, [pc, #168]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b06a:	685b      	ldr	r3, [r3, #4]
 800b06c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	691b      	ldr	r3, [r3, #16]
 800b074:	031b      	lsls	r3, r3, #12
 800b076:	4927      	ldr	r1, [pc, #156]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b07c:	e070      	b.n	800b160 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b07e:	4b25      	ldr	r3, [pc, #148]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b080:	685b      	ldr	r3, [r3, #4]
 800b082:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	691b      	ldr	r3, [r3, #16]
 800b08a:	061b      	lsls	r3, r3, #24
 800b08c:	4921      	ldr	r1, [pc, #132]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b08e:	4313      	orrs	r3, r2
 800b090:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b092:	e065      	b.n	800b160 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	68db      	ldr	r3, [r3, #12]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d048      	beq.n	800b12e <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b09c:	4b1d      	ldr	r3, [pc, #116]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	f023 0219 	bic.w	r2, r3, #25
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	68db      	ldr	r3, [r3, #12]
 800b0a8:	491a      	ldr	r1, [pc, #104]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0ae:	f7fc fb67 	bl	8007780 <HAL_GetTick>
 800b0b2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0b4:	e008      	b.n	800b0c8 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b0b6:	f7fc fb63 	bl	8007780 <HAL_GetTick>
 800b0ba:	4602      	mov	r2, r0
 800b0bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0be:	1ad3      	subs	r3, r2, r3
 800b0c0:	2b02      	cmp	r3, #2
 800b0c2:	d901      	bls.n	800b0c8 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800b0c4:	2303      	movs	r3, #3
 800b0c6:	e308      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b0c8:	4b12      	ldr	r3, [pc, #72]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	f003 0304 	and.w	r3, r3, #4
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d0f0      	beq.n	800b0b6 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0d4:	f7fc fb84 	bl	80077e0 <HAL_GetREVID>
 800b0d8:	4603      	mov	r3, r0
 800b0da:	f241 0203 	movw	r2, #4099	; 0x1003
 800b0de:	4293      	cmp	r3, r2
 800b0e0:	d81a      	bhi.n	800b118 <HAL_RCC_OscConfig+0x28c>
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	2b40      	cmp	r3, #64	; 0x40
 800b0e8:	d108      	bne.n	800b0fc <HAL_RCC_OscConfig+0x270>
 800b0ea:	4b0a      	ldr	r3, [pc, #40]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b0ec:	685b      	ldr	r3, [r3, #4]
 800b0ee:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800b0f2:	4a08      	ldr	r2, [pc, #32]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b0f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0f8:	6053      	str	r3, [r2, #4]
 800b0fa:	e031      	b.n	800b160 <HAL_RCC_OscConfig+0x2d4>
 800b0fc:	4b05      	ldr	r3, [pc, #20]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b0fe:	685b      	ldr	r3, [r3, #4]
 800b100:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	691b      	ldr	r3, [r3, #16]
 800b108:	031b      	lsls	r3, r3, #12
 800b10a:	4902      	ldr	r1, [pc, #8]	; (800b114 <HAL_RCC_OscConfig+0x288>)
 800b10c:	4313      	orrs	r3, r2
 800b10e:	604b      	str	r3, [r1, #4]
 800b110:	e026      	b.n	800b160 <HAL_RCC_OscConfig+0x2d4>
 800b112:	bf00      	nop
 800b114:	58024400 	.word	0x58024400
 800b118:	4b9a      	ldr	r3, [pc, #616]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b11a:	685b      	ldr	r3, [r3, #4]
 800b11c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	691b      	ldr	r3, [r3, #16]
 800b124:	061b      	lsls	r3, r3, #24
 800b126:	4997      	ldr	r1, [pc, #604]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b128:	4313      	orrs	r3, r2
 800b12a:	604b      	str	r3, [r1, #4]
 800b12c:	e018      	b.n	800b160 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b12e:	4b95      	ldr	r3, [pc, #596]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	4a94      	ldr	r2, [pc, #592]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b134:	f023 0301 	bic.w	r3, r3, #1
 800b138:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b13a:	f7fc fb21 	bl	8007780 <HAL_GetTick>
 800b13e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b140:	e008      	b.n	800b154 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800b142:	f7fc fb1d 	bl	8007780 <HAL_GetTick>
 800b146:	4602      	mov	r2, r0
 800b148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b14a:	1ad3      	subs	r3, r2, r3
 800b14c:	2b02      	cmp	r3, #2
 800b14e:	d901      	bls.n	800b154 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800b150:	2303      	movs	r3, #3
 800b152:	e2c2      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b154:	4b8b      	ldr	r3, [pc, #556]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f003 0304 	and.w	r3, r3, #4
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d1f0      	bne.n	800b142 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	f003 0310 	and.w	r3, r3, #16
 800b168:	2b00      	cmp	r3, #0
 800b16a:	f000 80a9 	beq.w	800b2c0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b16e:	4b85      	ldr	r3, [pc, #532]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b170:	691b      	ldr	r3, [r3, #16]
 800b172:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b176:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800b178:	4b82      	ldr	r3, [pc, #520]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b17a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b17c:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800b17e:	69bb      	ldr	r3, [r7, #24]
 800b180:	2b08      	cmp	r3, #8
 800b182:	d007      	beq.n	800b194 <HAL_RCC_OscConfig+0x308>
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	2b18      	cmp	r3, #24
 800b188:	d13a      	bne.n	800b200 <HAL_RCC_OscConfig+0x374>
 800b18a:	697b      	ldr	r3, [r7, #20]
 800b18c:	f003 0303 	and.w	r3, r3, #3
 800b190:	2b01      	cmp	r3, #1
 800b192:	d135      	bne.n	800b200 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b194:	4b7b      	ldr	r3, [pc, #492]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d005      	beq.n	800b1ac <HAL_RCC_OscConfig+0x320>
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	2b80      	cmp	r3, #128	; 0x80
 800b1a6:	d001      	beq.n	800b1ac <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800b1a8:	2301      	movs	r3, #1
 800b1aa:	e296      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b1ac:	f7fc fb18 	bl	80077e0 <HAL_GetREVID>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	f241 0203 	movw	r2, #4099	; 0x1003
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d817      	bhi.n	800b1ea <HAL_RCC_OscConfig+0x35e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6a1b      	ldr	r3, [r3, #32]
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	d108      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x348>
 800b1c2:	4b70      	ldr	r3, [pc, #448]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b1ca:	4a6e      	ldr	r2, [pc, #440]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b1cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b1d0:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b1d2:	e075      	b.n	800b2c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b1d4:	4b6b      	ldr	r3, [pc, #428]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	6a1b      	ldr	r3, [r3, #32]
 800b1e0:	069b      	lsls	r3, r3, #26
 800b1e2:	4968      	ldr	r1, [pc, #416]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b1e8:	e06a      	b.n	800b2c0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b1ea:	4b66      	ldr	r3, [pc, #408]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b1ec:	68db      	ldr	r3, [r3, #12]
 800b1ee:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	061b      	lsls	r3, r3, #24
 800b1f8:	4962      	ldr	r1, [pc, #392]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b1fa:	4313      	orrs	r3, r2
 800b1fc:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800b1fe:	e05f      	b.n	800b2c0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	69db      	ldr	r3, [r3, #28]
 800b204:	2b00      	cmp	r3, #0
 800b206:	d042      	beq.n	800b28e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800b208:	4b5e      	ldr	r3, [pc, #376]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	4a5d      	ldr	r2, [pc, #372]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b20e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b212:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b214:	f7fc fab4 	bl	8007780 <HAL_GetTick>
 800b218:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b21a:	e008      	b.n	800b22e <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b21c:	f7fc fab0 	bl	8007780 <HAL_GetTick>
 800b220:	4602      	mov	r2, r0
 800b222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b224:	1ad3      	subs	r3, r2, r3
 800b226:	2b02      	cmp	r3, #2
 800b228:	d901      	bls.n	800b22e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800b22a:	2303      	movs	r3, #3
 800b22c:	e255      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b22e:	4b55      	ldr	r3, [pc, #340]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b230:	681b      	ldr	r3, [r3, #0]
 800b232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b236:	2b00      	cmp	r3, #0
 800b238:	d0f0      	beq.n	800b21c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b23a:	f7fc fad1 	bl	80077e0 <HAL_GetREVID>
 800b23e:	4603      	mov	r3, r0
 800b240:	f241 0203 	movw	r2, #4099	; 0x1003
 800b244:	4293      	cmp	r3, r2
 800b246:	d817      	bhi.n	800b278 <HAL_RCC_OscConfig+0x3ec>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6a1b      	ldr	r3, [r3, #32]
 800b24c:	2b20      	cmp	r3, #32
 800b24e:	d108      	bne.n	800b262 <HAL_RCC_OscConfig+0x3d6>
 800b250:	4b4c      	ldr	r3, [pc, #304]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800b258:	4a4a      	ldr	r2, [pc, #296]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b25a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b25e:	6053      	str	r3, [r2, #4]
 800b260:	e02e      	b.n	800b2c0 <HAL_RCC_OscConfig+0x434>
 800b262:	4b48      	ldr	r3, [pc, #288]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	6a1b      	ldr	r3, [r3, #32]
 800b26e:	069b      	lsls	r3, r3, #26
 800b270:	4944      	ldr	r1, [pc, #272]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b272:	4313      	orrs	r3, r2
 800b274:	604b      	str	r3, [r1, #4]
 800b276:	e023      	b.n	800b2c0 <HAL_RCC_OscConfig+0x434>
 800b278:	4b42      	ldr	r3, [pc, #264]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b27a:	68db      	ldr	r3, [r3, #12]
 800b27c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	6a1b      	ldr	r3, [r3, #32]
 800b284:	061b      	lsls	r3, r3, #24
 800b286:	493f      	ldr	r1, [pc, #252]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b288:	4313      	orrs	r3, r2
 800b28a:	60cb      	str	r3, [r1, #12]
 800b28c:	e018      	b.n	800b2c0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800b28e:	4b3d      	ldr	r3, [pc, #244]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	4a3c      	ldr	r2, [pc, #240]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b29a:	f7fc fa71 	bl	8007780 <HAL_GetTick>
 800b29e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b2a0:	e008      	b.n	800b2b4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800b2a2:	f7fc fa6d 	bl	8007780 <HAL_GetTick>
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	1ad3      	subs	r3, r2, r3
 800b2ac:	2b02      	cmp	r3, #2
 800b2ae:	d901      	bls.n	800b2b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b2b0:	2303      	movs	r3, #3
 800b2b2:	e212      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b2b4:	4b33      	ldr	r3, [pc, #204]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b2b6:	681b      	ldr	r3, [r3, #0]
 800b2b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d1f0      	bne.n	800b2a2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	f003 0308 	and.w	r3, r3, #8
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d036      	beq.n	800b33a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	695b      	ldr	r3, [r3, #20]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d019      	beq.n	800b308 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b2d4:	4b2b      	ldr	r3, [pc, #172]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b2d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2d8:	4a2a      	ldr	r2, [pc, #168]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b2da:	f043 0301 	orr.w	r3, r3, #1
 800b2de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b2e0:	f7fc fa4e 	bl	8007780 <HAL_GetTick>
 800b2e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b2e6:	e008      	b.n	800b2fa <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b2e8:	f7fc fa4a 	bl	8007780 <HAL_GetTick>
 800b2ec:	4602      	mov	r2, r0
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	1ad3      	subs	r3, r2, r3
 800b2f2:	2b02      	cmp	r3, #2
 800b2f4:	d901      	bls.n	800b2fa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800b2f6:	2303      	movs	r3, #3
 800b2f8:	e1ef      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b2fa:	4b22      	ldr	r3, [pc, #136]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b2fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b2fe:	f003 0302 	and.w	r3, r3, #2
 800b302:	2b00      	cmp	r3, #0
 800b304:	d0f0      	beq.n	800b2e8 <HAL_RCC_OscConfig+0x45c>
 800b306:	e018      	b.n	800b33a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b308:	4b1e      	ldr	r3, [pc, #120]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b30c:	4a1d      	ldr	r2, [pc, #116]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b30e:	f023 0301 	bic.w	r3, r3, #1
 800b312:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b314:	f7fc fa34 	bl	8007780 <HAL_GetTick>
 800b318:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b31a:	e008      	b.n	800b32e <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800b31c:	f7fc fa30 	bl	8007780 <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	2b02      	cmp	r3, #2
 800b328:	d901      	bls.n	800b32e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800b32a:	2303      	movs	r3, #3
 800b32c:	e1d5      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b32e:	4b15      	ldr	r3, [pc, #84]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b332:	f003 0302 	and.w	r3, r3, #2
 800b336:	2b00      	cmp	r3, #0
 800b338:	d1f0      	bne.n	800b31c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f003 0320 	and.w	r3, r3, #32
 800b342:	2b00      	cmp	r3, #0
 800b344:	d039      	beq.n	800b3ba <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	699b      	ldr	r3, [r3, #24]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d01c      	beq.n	800b388 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b34e:	4b0d      	ldr	r3, [pc, #52]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	4a0c      	ldr	r2, [pc, #48]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b354:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800b358:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b35a:	f7fc fa11 	bl	8007780 <HAL_GetTick>
 800b35e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b360:	e008      	b.n	800b374 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b362:	f7fc fa0d 	bl	8007780 <HAL_GetTick>
 800b366:	4602      	mov	r2, r0
 800b368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36a:	1ad3      	subs	r3, r2, r3
 800b36c:	2b02      	cmp	r3, #2
 800b36e:	d901      	bls.n	800b374 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e1b2      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b374:	4b03      	ldr	r3, [pc, #12]	; (800b384 <HAL_RCC_OscConfig+0x4f8>)
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d0f0      	beq.n	800b362 <HAL_RCC_OscConfig+0x4d6>
 800b380:	e01b      	b.n	800b3ba <HAL_RCC_OscConfig+0x52e>
 800b382:	bf00      	nop
 800b384:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b388:	4b9b      	ldr	r3, [pc, #620]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	4a9a      	ldr	r2, [pc, #616]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b38e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b392:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800b394:	f7fc f9f4 	bl	8007780 <HAL_GetTick>
 800b398:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b39a:	e008      	b.n	800b3ae <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800b39c:	f7fc f9f0 	bl	8007780 <HAL_GetTick>
 800b3a0:	4602      	mov	r2, r0
 800b3a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a4:	1ad3      	subs	r3, r2, r3
 800b3a6:	2b02      	cmp	r3, #2
 800b3a8:	d901      	bls.n	800b3ae <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800b3aa:	2303      	movs	r3, #3
 800b3ac:	e195      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b3ae:	4b92      	ldr	r3, [pc, #584]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1f0      	bne.n	800b39c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f003 0304 	and.w	r3, r3, #4
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 8081 	beq.w	800b4ca <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800b3c8:	4b8c      	ldr	r3, [pc, #560]	; (800b5fc <HAL_RCC_OscConfig+0x770>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a8b      	ldr	r2, [pc, #556]	; (800b5fc <HAL_RCC_OscConfig+0x770>)
 800b3ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b3d2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b3d4:	f7fc f9d4 	bl	8007780 <HAL_GetTick>
 800b3d8:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3da:	e008      	b.n	800b3ee <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800b3dc:	f7fc f9d0 	bl	8007780 <HAL_GetTick>
 800b3e0:	4602      	mov	r2, r0
 800b3e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3e4:	1ad3      	subs	r3, r2, r3
 800b3e6:	2b64      	cmp	r3, #100	; 0x64
 800b3e8:	d901      	bls.n	800b3ee <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800b3ea:	2303      	movs	r3, #3
 800b3ec:	e175      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b3ee:	4b83      	ldr	r3, [pc, #524]	; (800b5fc <HAL_RCC_OscConfig+0x770>)
 800b3f0:	681b      	ldr	r3, [r3, #0]
 800b3f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d0f0      	beq.n	800b3dc <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	689b      	ldr	r3, [r3, #8]
 800b3fe:	2b01      	cmp	r3, #1
 800b400:	d106      	bne.n	800b410 <HAL_RCC_OscConfig+0x584>
 800b402:	4b7d      	ldr	r3, [pc, #500]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b406:	4a7c      	ldr	r2, [pc, #496]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b408:	f043 0301 	orr.w	r3, r3, #1
 800b40c:	6713      	str	r3, [r2, #112]	; 0x70
 800b40e:	e02d      	b.n	800b46c <HAL_RCC_OscConfig+0x5e0>
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	689b      	ldr	r3, [r3, #8]
 800b414:	2b00      	cmp	r3, #0
 800b416:	d10c      	bne.n	800b432 <HAL_RCC_OscConfig+0x5a6>
 800b418:	4b77      	ldr	r3, [pc, #476]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b41a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b41c:	4a76      	ldr	r2, [pc, #472]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b41e:	f023 0301 	bic.w	r3, r3, #1
 800b422:	6713      	str	r3, [r2, #112]	; 0x70
 800b424:	4b74      	ldr	r3, [pc, #464]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b428:	4a73      	ldr	r2, [pc, #460]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b42a:	f023 0304 	bic.w	r3, r3, #4
 800b42e:	6713      	str	r3, [r2, #112]	; 0x70
 800b430:	e01c      	b.n	800b46c <HAL_RCC_OscConfig+0x5e0>
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	689b      	ldr	r3, [r3, #8]
 800b436:	2b05      	cmp	r3, #5
 800b438:	d10c      	bne.n	800b454 <HAL_RCC_OscConfig+0x5c8>
 800b43a:	4b6f      	ldr	r3, [pc, #444]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b43c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b43e:	4a6e      	ldr	r2, [pc, #440]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b440:	f043 0304 	orr.w	r3, r3, #4
 800b444:	6713      	str	r3, [r2, #112]	; 0x70
 800b446:	4b6c      	ldr	r3, [pc, #432]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b44a:	4a6b      	ldr	r2, [pc, #428]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b44c:	f043 0301 	orr.w	r3, r3, #1
 800b450:	6713      	str	r3, [r2, #112]	; 0x70
 800b452:	e00b      	b.n	800b46c <HAL_RCC_OscConfig+0x5e0>
 800b454:	4b68      	ldr	r3, [pc, #416]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b458:	4a67      	ldr	r2, [pc, #412]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b45a:	f023 0301 	bic.w	r3, r3, #1
 800b45e:	6713      	str	r3, [r2, #112]	; 0x70
 800b460:	4b65      	ldr	r3, [pc, #404]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b462:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b464:	4a64      	ldr	r2, [pc, #400]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b466:	f023 0304 	bic.w	r3, r3, #4
 800b46a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	689b      	ldr	r3, [r3, #8]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d015      	beq.n	800b4a0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b474:	f7fc f984 	bl	8007780 <HAL_GetTick>
 800b478:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b47a:	e00a      	b.n	800b492 <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b47c:	f7fc f980 	bl	8007780 <HAL_GetTick>
 800b480:	4602      	mov	r2, r0
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	1ad3      	subs	r3, r2, r3
 800b486:	f241 3288 	movw	r2, #5000	; 0x1388
 800b48a:	4293      	cmp	r3, r2
 800b48c:	d901      	bls.n	800b492 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800b48e:	2303      	movs	r3, #3
 800b490:	e123      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b492:	4b59      	ldr	r3, [pc, #356]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b496:	f003 0302 	and.w	r3, r3, #2
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d0ee      	beq.n	800b47c <HAL_RCC_OscConfig+0x5f0>
 800b49e:	e014      	b.n	800b4ca <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b4a0:	f7fc f96e 	bl	8007780 <HAL_GetTick>
 800b4a4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b4a6:	e00a      	b.n	800b4be <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800b4a8:	f7fc f96a 	bl	8007780 <HAL_GetTick>
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4b0:	1ad3      	subs	r3, r2, r3
 800b4b2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b6:	4293      	cmp	r3, r2
 800b4b8:	d901      	bls.n	800b4be <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e10d      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b4be:	4b4e      	ldr	r3, [pc, #312]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b4c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4c2:	f003 0302 	and.w	r3, r3, #2
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1ee      	bne.n	800b4a8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	f000 8102 	beq.w	800b6d8 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b4d4:	4b48      	ldr	r3, [pc, #288]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b4d6:	691b      	ldr	r3, [r3, #16]
 800b4d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800b4dc:	2b18      	cmp	r3, #24
 800b4de:	f000 80bd 	beq.w	800b65c <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4e6:	2b02      	cmp	r3, #2
 800b4e8:	f040 809e 	bne.w	800b628 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b4ec:	4b42      	ldr	r3, [pc, #264]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	4a41      	ldr	r2, [pc, #260]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b4f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b4f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b4f8:	f7fc f942 	bl	8007780 <HAL_GetTick>
 800b4fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b4fe:	e008      	b.n	800b512 <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b500:	f7fc f93e 	bl	8007780 <HAL_GetTick>
 800b504:	4602      	mov	r2, r0
 800b506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b508:	1ad3      	subs	r3, r2, r3
 800b50a:	2b02      	cmp	r3, #2
 800b50c:	d901      	bls.n	800b512 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e0e3      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b512:	4b39      	ldr	r3, [pc, #228]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d1f0      	bne.n	800b500 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b51e:	4b36      	ldr	r3, [pc, #216]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b520:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b522:	4b37      	ldr	r3, [pc, #220]	; (800b600 <HAL_RCC_OscConfig+0x774>)
 800b524:	4013      	ands	r3, r2
 800b526:	687a      	ldr	r2, [r7, #4]
 800b528:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800b52a:	687a      	ldr	r2, [r7, #4]
 800b52c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b52e:	0112      	lsls	r2, r2, #4
 800b530:	430a      	orrs	r2, r1
 800b532:	4931      	ldr	r1, [pc, #196]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b534:	4313      	orrs	r3, r2
 800b536:	628b      	str	r3, [r1, #40]	; 0x28
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b53c:	3b01      	subs	r3, #1
 800b53e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b546:	3b01      	subs	r3, #1
 800b548:	025b      	lsls	r3, r3, #9
 800b54a:	b29b      	uxth	r3, r3
 800b54c:	431a      	orrs	r2, r3
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b552:	3b01      	subs	r3, #1
 800b554:	041b      	lsls	r3, r3, #16
 800b556:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800b55a:	431a      	orrs	r2, r3
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b560:	3b01      	subs	r3, #1
 800b562:	061b      	lsls	r3, r3, #24
 800b564:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800b568:	4923      	ldr	r1, [pc, #140]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b56a:	4313      	orrs	r3, r2
 800b56c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800b56e:	4b22      	ldr	r3, [pc, #136]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b572:	4a21      	ldr	r2, [pc, #132]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b574:	f023 0301 	bic.w	r3, r3, #1
 800b578:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b57a:	4b1f      	ldr	r3, [pc, #124]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b57c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b57e:	4b21      	ldr	r3, [pc, #132]	; (800b604 <HAL_RCC_OscConfig+0x778>)
 800b580:	4013      	ands	r3, r2
 800b582:	687a      	ldr	r2, [r7, #4]
 800b584:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800b586:	00d2      	lsls	r2, r2, #3
 800b588:	491b      	ldr	r1, [pc, #108]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b58a:	4313      	orrs	r3, r2
 800b58c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b58e:	4b1a      	ldr	r3, [pc, #104]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b592:	f023 020c 	bic.w	r2, r3, #12
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b59a:	4917      	ldr	r1, [pc, #92]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b59c:	4313      	orrs	r3, r2
 800b59e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b5a0:	4b15      	ldr	r3, [pc, #84]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a4:	f023 0202 	bic.w	r2, r3, #2
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b5ac:	4912      	ldr	r1, [pc, #72]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5ae:	4313      	orrs	r3, r2
 800b5b0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b5b2:	4b11      	ldr	r3, [pc, #68]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5b6:	4a10      	ldr	r2, [pc, #64]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b5be:	4b0e      	ldr	r3, [pc, #56]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5c2:	4a0d      	ldr	r2, [pc, #52]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b5c8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b5ca:	4b0b      	ldr	r3, [pc, #44]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ce:	4a0a      	ldr	r2, [pc, #40]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5d4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800b5d6:	4b08      	ldr	r3, [pc, #32]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5da:	4a07      	ldr	r2, [pc, #28]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5dc:	f043 0301 	orr.w	r3, r3, #1
 800b5e0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b5e2:	4b05      	ldr	r3, [pc, #20]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a04      	ldr	r2, [pc, #16]	; (800b5f8 <HAL_RCC_OscConfig+0x76c>)
 800b5e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b5ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b5ee:	f7fc f8c7 	bl	8007780 <HAL_GetTick>
 800b5f2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b5f4:	e011      	b.n	800b61a <HAL_RCC_OscConfig+0x78e>
 800b5f6:	bf00      	nop
 800b5f8:	58024400 	.word	0x58024400
 800b5fc:	58024800 	.word	0x58024800
 800b600:	fffffc0c 	.word	0xfffffc0c
 800b604:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b608:	f7fc f8ba 	bl	8007780 <HAL_GetTick>
 800b60c:	4602      	mov	r2, r0
 800b60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	2b02      	cmp	r3, #2
 800b614:	d901      	bls.n	800b61a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800b616:	2303      	movs	r3, #3
 800b618:	e05f      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b61a:	4b32      	ldr	r3, [pc, #200]	; (800b6e4 <HAL_RCC_OscConfig+0x858>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b622:	2b00      	cmp	r3, #0
 800b624:	d0f0      	beq.n	800b608 <HAL_RCC_OscConfig+0x77c>
 800b626:	e057      	b.n	800b6d8 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b628:	4b2e      	ldr	r3, [pc, #184]	; (800b6e4 <HAL_RCC_OscConfig+0x858>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a2d      	ldr	r2, [pc, #180]	; (800b6e4 <HAL_RCC_OscConfig+0x858>)
 800b62e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b634:	f7fc f8a4 	bl	8007780 <HAL_GetTick>
 800b638:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b63a:	e008      	b.n	800b64e <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800b63c:	f7fc f8a0 	bl	8007780 <HAL_GetTick>
 800b640:	4602      	mov	r2, r0
 800b642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b644:	1ad3      	subs	r3, r2, r3
 800b646:	2b02      	cmp	r3, #2
 800b648:	d901      	bls.n	800b64e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800b64a:	2303      	movs	r3, #3
 800b64c:	e045      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b64e:	4b25      	ldr	r3, [pc, #148]	; (800b6e4 <HAL_RCC_OscConfig+0x858>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b656:	2b00      	cmp	r3, #0
 800b658:	d1f0      	bne.n	800b63c <HAL_RCC_OscConfig+0x7b0>
 800b65a:	e03d      	b.n	800b6d8 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b65c:	4b21      	ldr	r3, [pc, #132]	; (800b6e4 <HAL_RCC_OscConfig+0x858>)
 800b65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b660:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b662:	4b20      	ldr	r3, [pc, #128]	; (800b6e4 <HAL_RCC_OscConfig+0x858>)
 800b664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b666:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d031      	beq.n	800b6d4 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f003 0203 	and.w	r2, r3, #3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b67a:	429a      	cmp	r2, r3
 800b67c:	d12a      	bne.n	800b6d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b67e:	693b      	ldr	r3, [r7, #16]
 800b680:	091b      	lsrs	r3, r3, #4
 800b682:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b68a:	429a      	cmp	r2, r3
 800b68c:	d122      	bne.n	800b6d4 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b698:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d11a      	bne.n	800b6d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	0a5b      	lsrs	r3, r3, #9
 800b6a2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b6aa:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b6ac:	429a      	cmp	r2, r3
 800b6ae:	d111      	bne.n	800b6d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	0c1b      	lsrs	r3, r3, #16
 800b6b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6bc:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b6be:	429a      	cmp	r2, r3
 800b6c0:	d108      	bne.n	800b6d4 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	0e1b      	lsrs	r3, r3, #24
 800b6c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b6ce:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d001      	beq.n	800b6d8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e000      	b.n	800b6da <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800b6d8:	2300      	movs	r3, #0
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3730      	adds	r7, #48	; 0x30
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	58024400 	.word	0x58024400

0800b6e8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b086      	sub	sp, #24
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	6078      	str	r0, [r7, #4]
 800b6f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d101      	bne.n	800b6fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b6f8:	2301      	movs	r3, #1
 800b6fa:	e19c      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800b6fc:	4b8a      	ldr	r3, [pc, #552]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b6fe:	681b      	ldr	r3, [r3, #0]
 800b700:	f003 030f 	and.w	r3, r3, #15
 800b704:	683a      	ldr	r2, [r7, #0]
 800b706:	429a      	cmp	r2, r3
 800b708:	d910      	bls.n	800b72c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b70a:	4b87      	ldr	r3, [pc, #540]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	f023 020f 	bic.w	r2, r3, #15
 800b712:	4985      	ldr	r1, [pc, #532]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	4313      	orrs	r3, r2
 800b718:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b71a:	4b83      	ldr	r3, [pc, #524]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	f003 030f 	and.w	r3, r3, #15
 800b722:	683a      	ldr	r2, [r7, #0]
 800b724:	429a      	cmp	r2, r3
 800b726:	d001      	beq.n	800b72c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	e184      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 0304 	and.w	r3, r3, #4
 800b734:	2b00      	cmp	r3, #0
 800b736:	d010      	beq.n	800b75a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	691a      	ldr	r2, [r3, #16]
 800b73c:	4b7b      	ldr	r3, [pc, #492]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b73e:	699b      	ldr	r3, [r3, #24]
 800b740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b744:	429a      	cmp	r2, r3
 800b746:	d908      	bls.n	800b75a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b748:	4b78      	ldr	r3, [pc, #480]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b74a:	699b      	ldr	r3, [r3, #24]
 800b74c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	691b      	ldr	r3, [r3, #16]
 800b754:	4975      	ldr	r1, [pc, #468]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b756:	4313      	orrs	r3, r2
 800b758:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f003 0308 	and.w	r3, r3, #8
 800b762:	2b00      	cmp	r3, #0
 800b764:	d010      	beq.n	800b788 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	695a      	ldr	r2, [r3, #20]
 800b76a:	4b70      	ldr	r3, [pc, #448]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b76c:	69db      	ldr	r3, [r3, #28]
 800b76e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b772:	429a      	cmp	r2, r3
 800b774:	d908      	bls.n	800b788 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b776:	4b6d      	ldr	r3, [pc, #436]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b778:	69db      	ldr	r3, [r3, #28]
 800b77a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	695b      	ldr	r3, [r3, #20]
 800b782:	496a      	ldr	r1, [pc, #424]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b784:	4313      	orrs	r3, r2
 800b786:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f003 0310 	and.w	r3, r3, #16
 800b790:	2b00      	cmp	r3, #0
 800b792:	d010      	beq.n	800b7b6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	699a      	ldr	r2, [r3, #24]
 800b798:	4b64      	ldr	r3, [pc, #400]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b79a:	69db      	ldr	r3, [r3, #28]
 800b79c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d908      	bls.n	800b7b6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b7a4:	4b61      	ldr	r3, [pc, #388]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b7a6:	69db      	ldr	r3, [r3, #28]
 800b7a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	699b      	ldr	r3, [r3, #24]
 800b7b0:	495e      	ldr	r1, [pc, #376]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b7b2:	4313      	orrs	r3, r2
 800b7b4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f003 0320 	and.w	r3, r3, #32
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d010      	beq.n	800b7e4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	69da      	ldr	r2, [r3, #28]
 800b7c6:	4b59      	ldr	r3, [pc, #356]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b7c8:	6a1b      	ldr	r3, [r3, #32]
 800b7ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	d908      	bls.n	800b7e4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b7d2:	4b56      	ldr	r3, [pc, #344]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b7d4:	6a1b      	ldr	r3, [r3, #32]
 800b7d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	69db      	ldr	r3, [r3, #28]
 800b7de:	4953      	ldr	r1, [pc, #332]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b7e0:	4313      	orrs	r3, r2
 800b7e2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f003 0302 	and.w	r3, r3, #2
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d010      	beq.n	800b812 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	68da      	ldr	r2, [r3, #12]
 800b7f4:	4b4d      	ldr	r3, [pc, #308]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b7f6:	699b      	ldr	r3, [r3, #24]
 800b7f8:	f003 030f 	and.w	r3, r3, #15
 800b7fc:	429a      	cmp	r2, r3
 800b7fe:	d908      	bls.n	800b812 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b800:	4b4a      	ldr	r3, [pc, #296]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b802:	699b      	ldr	r3, [r3, #24]
 800b804:	f023 020f 	bic.w	r2, r3, #15
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	68db      	ldr	r3, [r3, #12]
 800b80c:	4947      	ldr	r1, [pc, #284]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b80e:	4313      	orrs	r3, r2
 800b810:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	681b      	ldr	r3, [r3, #0]
 800b816:	f003 0301 	and.w	r3, r3, #1
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d055      	beq.n	800b8ca <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b81e:	4b43      	ldr	r3, [pc, #268]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b820:	699b      	ldr	r3, [r3, #24]
 800b822:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	4940      	ldr	r1, [pc, #256]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b82c:	4313      	orrs	r3, r2
 800b82e:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	685b      	ldr	r3, [r3, #4]
 800b834:	2b02      	cmp	r3, #2
 800b836:	d107      	bne.n	800b848 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b838:	4b3c      	ldr	r3, [pc, #240]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b840:	2b00      	cmp	r3, #0
 800b842:	d121      	bne.n	800b888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e0f6      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	685b      	ldr	r3, [r3, #4]
 800b84c:	2b03      	cmp	r3, #3
 800b84e:	d107      	bne.n	800b860 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b850:	4b36      	ldr	r3, [pc, #216]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d115      	bne.n	800b888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e0ea      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	2b01      	cmp	r3, #1
 800b866:	d107      	bne.n	800b878 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b868:	4b30      	ldr	r3, [pc, #192]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b870:	2b00      	cmp	r3, #0
 800b872:	d109      	bne.n	800b888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b874:	2301      	movs	r3, #1
 800b876:	e0de      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b878:	4b2c      	ldr	r3, [pc, #176]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	f003 0304 	and.w	r3, r3, #4
 800b880:	2b00      	cmp	r3, #0
 800b882:	d101      	bne.n	800b888 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800b884:	2301      	movs	r3, #1
 800b886:	e0d6      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b888:	4b28      	ldr	r3, [pc, #160]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b88a:	691b      	ldr	r3, [r3, #16]
 800b88c:	f023 0207 	bic.w	r2, r3, #7
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	4925      	ldr	r1, [pc, #148]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b896:	4313      	orrs	r3, r2
 800b898:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b89a:	f7fb ff71 	bl	8007780 <HAL_GetTick>
 800b89e:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8a0:	e00a      	b.n	800b8b8 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8a2:	f7fb ff6d 	bl	8007780 <HAL_GetTick>
 800b8a6:	4602      	mov	r2, r0
 800b8a8:	697b      	ldr	r3, [r7, #20]
 800b8aa:	1ad3      	subs	r3, r2, r3
 800b8ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d901      	bls.n	800b8b8 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800b8b4:	2303      	movs	r3, #3
 800b8b6:	e0be      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8b8:	4b1c      	ldr	r3, [pc, #112]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b8ba:	691b      	ldr	r3, [r3, #16]
 800b8bc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	685b      	ldr	r3, [r3, #4]
 800b8c4:	00db      	lsls	r3, r3, #3
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d1eb      	bne.n	800b8a2 <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f003 0302 	and.w	r3, r3, #2
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d010      	beq.n	800b8f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	68da      	ldr	r2, [r3, #12]
 800b8da:	4b14      	ldr	r3, [pc, #80]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b8dc:	699b      	ldr	r3, [r3, #24]
 800b8de:	f003 030f 	and.w	r3, r3, #15
 800b8e2:	429a      	cmp	r2, r3
 800b8e4:	d208      	bcs.n	800b8f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b8e6:	4b11      	ldr	r3, [pc, #68]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b8e8:	699b      	ldr	r3, [r3, #24]
 800b8ea:	f023 020f 	bic.w	r2, r3, #15
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	490e      	ldr	r1, [pc, #56]	; (800b92c <HAL_RCC_ClockConfig+0x244>)
 800b8f4:	4313      	orrs	r3, r2
 800b8f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800b8f8:	4b0b      	ldr	r3, [pc, #44]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f003 030f 	and.w	r3, r3, #15
 800b900:	683a      	ldr	r2, [r7, #0]
 800b902:	429a      	cmp	r2, r3
 800b904:	d214      	bcs.n	800b930 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b906:	4b08      	ldr	r3, [pc, #32]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	f023 020f 	bic.w	r2, r3, #15
 800b90e:	4906      	ldr	r1, [pc, #24]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b910:	683b      	ldr	r3, [r7, #0]
 800b912:	4313      	orrs	r3, r2
 800b914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800b916:	4b04      	ldr	r3, [pc, #16]	; (800b928 <HAL_RCC_ClockConfig+0x240>)
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	f003 030f 	and.w	r3, r3, #15
 800b91e:	683a      	ldr	r2, [r7, #0]
 800b920:	429a      	cmp	r2, r3
 800b922:	d005      	beq.n	800b930 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800b924:	2301      	movs	r3, #1
 800b926:	e086      	b.n	800ba36 <HAL_RCC_ClockConfig+0x34e>
 800b928:	52002000 	.word	0x52002000
 800b92c:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f003 0304 	and.w	r3, r3, #4
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d010      	beq.n	800b95e <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	691a      	ldr	r2, [r3, #16]
 800b940:	4b3f      	ldr	r3, [pc, #252]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b942:	699b      	ldr	r3, [r3, #24]
 800b944:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b948:	429a      	cmp	r2, r3
 800b94a:	d208      	bcs.n	800b95e <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b94c:	4b3c      	ldr	r3, [pc, #240]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b94e:	699b      	ldr	r3, [r3, #24]
 800b950:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	691b      	ldr	r3, [r3, #16]
 800b958:	4939      	ldr	r1, [pc, #228]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b95a:	4313      	orrs	r3, r2
 800b95c:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	681b      	ldr	r3, [r3, #0]
 800b962:	f003 0308 	and.w	r3, r3, #8
 800b966:	2b00      	cmp	r3, #0
 800b968:	d010      	beq.n	800b98c <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	695a      	ldr	r2, [r3, #20]
 800b96e:	4b34      	ldr	r3, [pc, #208]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b970:	69db      	ldr	r3, [r3, #28]
 800b972:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b976:	429a      	cmp	r2, r3
 800b978:	d208      	bcs.n	800b98c <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b97a:	4b31      	ldr	r3, [pc, #196]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b97c:	69db      	ldr	r3, [r3, #28]
 800b97e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	492e      	ldr	r1, [pc, #184]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b988:	4313      	orrs	r3, r2
 800b98a:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f003 0310 	and.w	r3, r3, #16
 800b994:	2b00      	cmp	r3, #0
 800b996:	d010      	beq.n	800b9ba <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	699a      	ldr	r2, [r3, #24]
 800b99c:	4b28      	ldr	r3, [pc, #160]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b99e:	69db      	ldr	r3, [r3, #28]
 800b9a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800b9a4:	429a      	cmp	r2, r3
 800b9a6:	d208      	bcs.n	800b9ba <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b9a8:	4b25      	ldr	r3, [pc, #148]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b9aa:	69db      	ldr	r3, [r3, #28]
 800b9ac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	699b      	ldr	r3, [r3, #24]
 800b9b4:	4922      	ldr	r1, [pc, #136]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b9b6:	4313      	orrs	r3, r2
 800b9b8:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	f003 0320 	and.w	r3, r3, #32
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d010      	beq.n	800b9e8 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	69da      	ldr	r2, [r3, #28]
 800b9ca:	4b1d      	ldr	r3, [pc, #116]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b9cc:	6a1b      	ldr	r3, [r3, #32]
 800b9ce:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800b9d2:	429a      	cmp	r2, r3
 800b9d4:	d208      	bcs.n	800b9e8 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800b9d6:	4b1a      	ldr	r3, [pc, #104]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b9d8:	6a1b      	ldr	r3, [r3, #32]
 800b9da:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	69db      	ldr	r3, [r3, #28]
 800b9e2:	4917      	ldr	r1, [pc, #92]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b9e4:	4313      	orrs	r3, r2
 800b9e6:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b9e8:	f000 f834 	bl	800ba54 <HAL_RCC_GetSysClockFreq>
 800b9ec:	4602      	mov	r2, r0
 800b9ee:	4b14      	ldr	r3, [pc, #80]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800b9f0:	699b      	ldr	r3, [r3, #24]
 800b9f2:	0a1b      	lsrs	r3, r3, #8
 800b9f4:	f003 030f 	and.w	r3, r3, #15
 800b9f8:	4912      	ldr	r1, [pc, #72]	; (800ba44 <HAL_RCC_ClockConfig+0x35c>)
 800b9fa:	5ccb      	ldrb	r3, [r1, r3]
 800b9fc:	f003 031f 	and.w	r3, r3, #31
 800ba00:	fa22 f303 	lsr.w	r3, r2, r3
 800ba04:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ba06:	4b0e      	ldr	r3, [pc, #56]	; (800ba40 <HAL_RCC_ClockConfig+0x358>)
 800ba08:	699b      	ldr	r3, [r3, #24]
 800ba0a:	f003 030f 	and.w	r3, r3, #15
 800ba0e:	4a0d      	ldr	r2, [pc, #52]	; (800ba44 <HAL_RCC_ClockConfig+0x35c>)
 800ba10:	5cd3      	ldrb	r3, [r2, r3]
 800ba12:	f003 031f 	and.w	r3, r3, #31
 800ba16:	693a      	ldr	r2, [r7, #16]
 800ba18:	fa22 f303 	lsr.w	r3, r2, r3
 800ba1c:	4a0a      	ldr	r2, [pc, #40]	; (800ba48 <HAL_RCC_ClockConfig+0x360>)
 800ba1e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ba20:	4a0a      	ldr	r2, [pc, #40]	; (800ba4c <HAL_RCC_ClockConfig+0x364>)
 800ba22:	693b      	ldr	r3, [r7, #16]
 800ba24:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800ba26:	4b0a      	ldr	r3, [pc, #40]	; (800ba50 <HAL_RCC_ClockConfig+0x368>)
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	4618      	mov	r0, r3
 800ba2c:	f7fb fe5e 	bl	80076ec <HAL_InitTick>
 800ba30:	4603      	mov	r3, r0
 800ba32:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ba34:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba36:	4618      	mov	r0, r3
 800ba38:	3718      	adds	r7, #24
 800ba3a:	46bd      	mov	sp, r7
 800ba3c:	bd80      	pop	{r7, pc}
 800ba3e:	bf00      	nop
 800ba40:	58024400 	.word	0x58024400
 800ba44:	08011110 	.word	0x08011110
 800ba48:	24000008 	.word	0x24000008
 800ba4c:	24000004 	.word	0x24000004
 800ba50:	2400001c 	.word	0x2400001c

0800ba54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ba54:	b480      	push	{r7}
 800ba56:	b089      	sub	sp, #36	; 0x24
 800ba58:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ba5a:	4bb3      	ldr	r3, [pc, #716]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ba62:	2b18      	cmp	r3, #24
 800ba64:	f200 8155 	bhi.w	800bd12 <HAL_RCC_GetSysClockFreq+0x2be>
 800ba68:	a201      	add	r2, pc, #4	; (adr r2, 800ba70 <HAL_RCC_GetSysClockFreq+0x1c>)
 800ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba6e:	bf00      	nop
 800ba70:	0800bad5 	.word	0x0800bad5
 800ba74:	0800bd13 	.word	0x0800bd13
 800ba78:	0800bd13 	.word	0x0800bd13
 800ba7c:	0800bd13 	.word	0x0800bd13
 800ba80:	0800bd13 	.word	0x0800bd13
 800ba84:	0800bd13 	.word	0x0800bd13
 800ba88:	0800bd13 	.word	0x0800bd13
 800ba8c:	0800bd13 	.word	0x0800bd13
 800ba90:	0800bafb 	.word	0x0800bafb
 800ba94:	0800bd13 	.word	0x0800bd13
 800ba98:	0800bd13 	.word	0x0800bd13
 800ba9c:	0800bd13 	.word	0x0800bd13
 800baa0:	0800bd13 	.word	0x0800bd13
 800baa4:	0800bd13 	.word	0x0800bd13
 800baa8:	0800bd13 	.word	0x0800bd13
 800baac:	0800bd13 	.word	0x0800bd13
 800bab0:	0800bb01 	.word	0x0800bb01
 800bab4:	0800bd13 	.word	0x0800bd13
 800bab8:	0800bd13 	.word	0x0800bd13
 800babc:	0800bd13 	.word	0x0800bd13
 800bac0:	0800bd13 	.word	0x0800bd13
 800bac4:	0800bd13 	.word	0x0800bd13
 800bac8:	0800bd13 	.word	0x0800bd13
 800bacc:	0800bd13 	.word	0x0800bd13
 800bad0:	0800bb07 	.word	0x0800bb07
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bad4:	4b94      	ldr	r3, [pc, #592]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bad6:	681b      	ldr	r3, [r3, #0]
 800bad8:	f003 0320 	and.w	r3, r3, #32
 800badc:	2b00      	cmp	r3, #0
 800bade:	d009      	beq.n	800baf4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bae0:	4b91      	ldr	r3, [pc, #580]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	08db      	lsrs	r3, r3, #3
 800bae6:	f003 0303 	and.w	r3, r3, #3
 800baea:	4a90      	ldr	r2, [pc, #576]	; (800bd2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800baec:	fa22 f303 	lsr.w	r3, r2, r3
 800baf0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800baf2:	e111      	b.n	800bd18 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800baf4:	4b8d      	ldr	r3, [pc, #564]	; (800bd2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800baf6:	61bb      	str	r3, [r7, #24]
    break;
 800baf8:	e10e      	b.n	800bd18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800bafa:	4b8d      	ldr	r3, [pc, #564]	; (800bd30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bafc:	61bb      	str	r3, [r7, #24]
    break;
 800bafe:	e10b      	b.n	800bd18 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800bb00:	4b8c      	ldr	r3, [pc, #560]	; (800bd34 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800bb02:	61bb      	str	r3, [r7, #24]
    break;
 800bb04:	e108      	b.n	800bd18 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bb06:	4b88      	ldr	r3, [pc, #544]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb0a:	f003 0303 	and.w	r3, r3, #3
 800bb0e:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800bb10:	4b85      	ldr	r3, [pc, #532]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb14:	091b      	lsrs	r3, r3, #4
 800bb16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bb1a:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800bb1c:	4b82      	ldr	r3, [pc, #520]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb20:	f003 0301 	and.w	r3, r3, #1
 800bb24:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800bb26:	4b80      	ldr	r3, [pc, #512]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bb2a:	08db      	lsrs	r3, r3, #3
 800bb2c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bb30:	68fa      	ldr	r2, [r7, #12]
 800bb32:	fb02 f303 	mul.w	r3, r2, r3
 800bb36:	ee07 3a90 	vmov	s15, r3
 800bb3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb3e:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800bb42:	693b      	ldr	r3, [r7, #16]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f000 80e1 	beq.w	800bd0c <HAL_RCC_GetSysClockFreq+0x2b8>
 800bb4a:	697b      	ldr	r3, [r7, #20]
 800bb4c:	2b02      	cmp	r3, #2
 800bb4e:	f000 8083 	beq.w	800bc58 <HAL_RCC_GetSysClockFreq+0x204>
 800bb52:	697b      	ldr	r3, [r7, #20]
 800bb54:	2b02      	cmp	r3, #2
 800bb56:	f200 80a1 	bhi.w	800bc9c <HAL_RCC_GetSysClockFreq+0x248>
 800bb5a:	697b      	ldr	r3, [r7, #20]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d003      	beq.n	800bb68 <HAL_RCC_GetSysClockFreq+0x114>
 800bb60:	697b      	ldr	r3, [r7, #20]
 800bb62:	2b01      	cmp	r3, #1
 800bb64:	d056      	beq.n	800bc14 <HAL_RCC_GetSysClockFreq+0x1c0>
 800bb66:	e099      	b.n	800bc9c <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bb68:	4b6f      	ldr	r3, [pc, #444]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f003 0320 	and.w	r3, r3, #32
 800bb70:	2b00      	cmp	r3, #0
 800bb72:	d02d      	beq.n	800bbd0 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800bb74:	4b6c      	ldr	r3, [pc, #432]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	08db      	lsrs	r3, r3, #3
 800bb7a:	f003 0303 	and.w	r3, r3, #3
 800bb7e:	4a6b      	ldr	r2, [pc, #428]	; (800bd2c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800bb80:	fa22 f303 	lsr.w	r3, r2, r3
 800bb84:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	ee07 3a90 	vmov	s15, r3
 800bb8c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb90:	693b      	ldr	r3, [r7, #16]
 800bb92:	ee07 3a90 	vmov	s15, r3
 800bb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb9e:	4b62      	ldr	r3, [pc, #392]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bba6:	ee07 3a90 	vmov	s15, r3
 800bbaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbae:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbb2:	eddf 5a61 	vldr	s11, [pc, #388]	; 800bd38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbca:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800bbce:	e087      	b.n	800bce0 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bbd0:	693b      	ldr	r3, [r7, #16]
 800bbd2:	ee07 3a90 	vmov	s15, r3
 800bbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbda:	eddf 6a58 	vldr	s13, [pc, #352]	; 800bd3c <HAL_RCC_GetSysClockFreq+0x2e8>
 800bbde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbe2:	4b51      	ldr	r3, [pc, #324]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bbe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bbe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbea:	ee07 3a90 	vmov	s15, r3
 800bbee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbf2:	ed97 6a02 	vldr	s12, [r7, #8]
 800bbf6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800bd38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bbfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc0e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc12:	e065      	b.n	800bce0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc14:	693b      	ldr	r3, [r7, #16]
 800bc16:	ee07 3a90 	vmov	s15, r3
 800bc1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc1e:	eddf 6a48 	vldr	s13, [pc, #288]	; 800bd40 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bc22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc26:	4b40      	ldr	r3, [pc, #256]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc2e:	ee07 3a90 	vmov	s15, r3
 800bc32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc36:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc3a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800bd38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc56:	e043      	b.n	800bce0 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc58:	693b      	ldr	r3, [r7, #16]
 800bc5a:	ee07 3a90 	vmov	s15, r3
 800bc5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc62:	eddf 6a38 	vldr	s13, [pc, #224]	; 800bd44 <HAL_RCC_GetSysClockFreq+0x2f0>
 800bc66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bc6a:	4b2f      	ldr	r3, [pc, #188]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bc6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc72:	ee07 3a90 	vmov	s15, r3
 800bc76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bc7a:	ed97 6a02 	vldr	s12, [r7, #8]
 800bc7e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800bd38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bc82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bc86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bc8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bc8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bc92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bc96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bc9a:	e021      	b.n	800bce0 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800bc9c:	693b      	ldr	r3, [r7, #16]
 800bc9e:	ee07 3a90 	vmov	s15, r3
 800bca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bca6:	eddf 6a26 	vldr	s13, [pc, #152]	; 800bd40 <HAL_RCC_GetSysClockFreq+0x2ec>
 800bcaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bcae:	4b1e      	ldr	r3, [pc, #120]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bcb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bcb6:	ee07 3a90 	vmov	s15, r3
 800bcba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bcbe:	ed97 6a02 	vldr	s12, [r7, #8]
 800bcc2:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800bd38 <HAL_RCC_GetSysClockFreq+0x2e4>
 800bcc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bcca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bcce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bcd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bcd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bcde:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800bce0:	4b11      	ldr	r3, [pc, #68]	; (800bd28 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800bce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bce4:	0a5b      	lsrs	r3, r3, #9
 800bce6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bcea:	3301      	adds	r3, #1
 800bcec:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	ee07 3a90 	vmov	s15, r3
 800bcf4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800bcf8:	edd7 6a07 	vldr	s13, [r7, #28]
 800bcfc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bd00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bd04:	ee17 3a90 	vmov	r3, s15
 800bd08:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800bd0a:	e005      	b.n	800bd18 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	61bb      	str	r3, [r7, #24]
    break;
 800bd10:	e002      	b.n	800bd18 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800bd12:	4b07      	ldr	r3, [pc, #28]	; (800bd30 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800bd14:	61bb      	str	r3, [r7, #24]
    break;
 800bd16:	bf00      	nop
  }

  return sysclockfreq;
 800bd18:	69bb      	ldr	r3, [r7, #24]
}
 800bd1a:	4618      	mov	r0, r3
 800bd1c:	3724      	adds	r7, #36	; 0x24
 800bd1e:	46bd      	mov	sp, r7
 800bd20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd24:	4770      	bx	lr
 800bd26:	bf00      	nop
 800bd28:	58024400 	.word	0x58024400
 800bd2c:	03d09000 	.word	0x03d09000
 800bd30:	003d0900 	.word	0x003d0900
 800bd34:	007a1200 	.word	0x007a1200
 800bd38:	46000000 	.word	0x46000000
 800bd3c:	4c742400 	.word	0x4c742400
 800bd40:	4a742400 	.word	0x4a742400
 800bd44:	4af42400 	.word	0x4af42400

0800bd48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b082      	sub	sp, #8
 800bd4c:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800bd4e:	f7ff fe81 	bl	800ba54 <HAL_RCC_GetSysClockFreq>
 800bd52:	4602      	mov	r2, r0
 800bd54:	4b10      	ldr	r3, [pc, #64]	; (800bd98 <HAL_RCC_GetHCLKFreq+0x50>)
 800bd56:	699b      	ldr	r3, [r3, #24]
 800bd58:	0a1b      	lsrs	r3, r3, #8
 800bd5a:	f003 030f 	and.w	r3, r3, #15
 800bd5e:	490f      	ldr	r1, [pc, #60]	; (800bd9c <HAL_RCC_GetHCLKFreq+0x54>)
 800bd60:	5ccb      	ldrb	r3, [r1, r3]
 800bd62:	f003 031f 	and.w	r3, r3, #31
 800bd66:	fa22 f303 	lsr.w	r3, r2, r3
 800bd6a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800bd6c:	4b0a      	ldr	r3, [pc, #40]	; (800bd98 <HAL_RCC_GetHCLKFreq+0x50>)
 800bd6e:	699b      	ldr	r3, [r3, #24]
 800bd70:	f003 030f 	and.w	r3, r3, #15
 800bd74:	4a09      	ldr	r2, [pc, #36]	; (800bd9c <HAL_RCC_GetHCLKFreq+0x54>)
 800bd76:	5cd3      	ldrb	r3, [r2, r3]
 800bd78:	f003 031f 	and.w	r3, r3, #31
 800bd7c:	687a      	ldr	r2, [r7, #4]
 800bd7e:	fa22 f303 	lsr.w	r3, r2, r3
 800bd82:	4a07      	ldr	r2, [pc, #28]	; (800bda0 <HAL_RCC_GetHCLKFreq+0x58>)
 800bd84:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800bd86:	4a07      	ldr	r2, [pc, #28]	; (800bda4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800bd8c:	4b04      	ldr	r3, [pc, #16]	; (800bda0 <HAL_RCC_GetHCLKFreq+0x58>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	3708      	adds	r7, #8
 800bd94:	46bd      	mov	sp, r7
 800bd96:	bd80      	pop	{r7, pc}
 800bd98:	58024400 	.word	0x58024400
 800bd9c:	08011110 	.word	0x08011110
 800bda0:	24000008 	.word	0x24000008
 800bda4:	24000004 	.word	0x24000004

0800bda8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800bdac:	f7ff ffcc 	bl	800bd48 <HAL_RCC_GetHCLKFreq>
 800bdb0:	4602      	mov	r2, r0
 800bdb2:	4b06      	ldr	r3, [pc, #24]	; (800bdcc <HAL_RCC_GetPCLK1Freq+0x24>)
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	091b      	lsrs	r3, r3, #4
 800bdb8:	f003 0307 	and.w	r3, r3, #7
 800bdbc:	4904      	ldr	r1, [pc, #16]	; (800bdd0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bdbe:	5ccb      	ldrb	r3, [r1, r3]
 800bdc0:	f003 031f 	and.w	r3, r3, #31
 800bdc4:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	bd80      	pop	{r7, pc}
 800bdcc:	58024400 	.word	0x58024400
 800bdd0:	08011110 	.word	0x08011110

0800bdd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800bdd8:	f7ff ffb6 	bl	800bd48 <HAL_RCC_GetHCLKFreq>
 800bddc:	4602      	mov	r2, r0
 800bdde:	4b06      	ldr	r3, [pc, #24]	; (800bdf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bde0:	69db      	ldr	r3, [r3, #28]
 800bde2:	0a1b      	lsrs	r3, r3, #8
 800bde4:	f003 0307 	and.w	r3, r3, #7
 800bde8:	4904      	ldr	r1, [pc, #16]	; (800bdfc <HAL_RCC_GetPCLK2Freq+0x28>)
 800bdea:	5ccb      	ldrb	r3, [r1, r3]
 800bdec:	f003 031f 	and.w	r3, r3, #31
 800bdf0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	bd80      	pop	{r7, pc}
 800bdf8:	58024400 	.word	0x58024400
 800bdfc:	08011110 	.word	0x08011110

0800be00 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b086      	sub	sp, #24
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800be08:	2300      	movs	r3, #0
 800be0a:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800be0c:	2300      	movs	r3, #0
 800be0e:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d03f      	beq.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be20:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be24:	d02a      	beq.n	800be7c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800be26:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800be2a:	d824      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800be2c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be30:	d018      	beq.n	800be64 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800be32:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be36:	d81e      	bhi.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d003      	beq.n	800be44 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800be3c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800be40:	d007      	beq.n	800be52 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800be42:	e018      	b.n	800be76 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be44:	4ba3      	ldr	r3, [pc, #652]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be48:	4aa2      	ldr	r2, [pc, #648]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be4e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800be50:	e015      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	3304      	adds	r3, #4
 800be56:	2102      	movs	r1, #2
 800be58:	4618      	mov	r0, r3
 800be5a:	f001 f9d5 	bl	800d208 <RCCEx_PLL2_Config>
 800be5e:	4603      	mov	r3, r0
 800be60:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800be62:	e00c      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	3324      	adds	r3, #36	; 0x24
 800be68:	2102      	movs	r1, #2
 800be6a:	4618      	mov	r0, r3
 800be6c:	f001 fa7e 	bl	800d36c <RCCEx_PLL3_Config>
 800be70:	4603      	mov	r3, r0
 800be72:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800be74:	e003      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800be76:	2301      	movs	r3, #1
 800be78:	75fb      	strb	r3, [r7, #23]
      break;
 800be7a:	e000      	b.n	800be7e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800be7c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800be7e:	7dfb      	ldrb	r3, [r7, #23]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d109      	bne.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800be84:	4b93      	ldr	r3, [pc, #588]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800be90:	4990      	ldr	r1, [pc, #576]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800be92:	4313      	orrs	r3, r2
 800be94:	650b      	str	r3, [r1, #80]	; 0x50
 800be96:	e001      	b.n	800be9c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be98:	7dfb      	ldrb	r3, [r7, #23]
 800be9a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bea4:	2b00      	cmp	r3, #0
 800bea6:	d03d      	beq.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800beac:	2b04      	cmp	r3, #4
 800beae:	d826      	bhi.n	800befe <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800beb0:	a201      	add	r2, pc, #4	; (adr r2, 800beb8 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800beb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb6:	bf00      	nop
 800beb8:	0800becd 	.word	0x0800becd
 800bebc:	0800bedb 	.word	0x0800bedb
 800bec0:	0800beed 	.word	0x0800beed
 800bec4:	0800bf05 	.word	0x0800bf05
 800bec8:	0800bf05 	.word	0x0800bf05
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800becc:	4b81      	ldr	r3, [pc, #516]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bed0:	4a80      	ldr	r2, [pc, #512]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bed2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bed6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800bed8:	e015      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	3304      	adds	r3, #4
 800bede:	2100      	movs	r1, #0
 800bee0:	4618      	mov	r0, r3
 800bee2:	f001 f991 	bl	800d208 <RCCEx_PLL2_Config>
 800bee6:	4603      	mov	r3, r0
 800bee8:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800beea:	e00c      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	3324      	adds	r3, #36	; 0x24
 800bef0:	2100      	movs	r1, #0
 800bef2:	4618      	mov	r0, r3
 800bef4:	f001 fa3a 	bl	800d36c <RCCEx_PLL3_Config>
 800bef8:	4603      	mov	r3, r0
 800befa:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800befc:	e003      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800befe:	2301      	movs	r3, #1
 800bf00:	75fb      	strb	r3, [r7, #23]
      break;
 800bf02:	e000      	b.n	800bf06 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800bf04:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d109      	bne.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bf0c:	4b71      	ldr	r3, [pc, #452]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bf10:	f023 0207 	bic.w	r2, r3, #7
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf18:	496e      	ldr	r1, [pc, #440]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	650b      	str	r3, [r1, #80]	; 0x50
 800bf1e:	e001      	b.n	800bf24 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
 800bf22:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d042      	beq.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bf34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf38:	d02b      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0x192>
 800bf3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bf3e:	d825      	bhi.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bf40:	2bc0      	cmp	r3, #192	; 0xc0
 800bf42:	d028      	beq.n	800bf96 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800bf44:	2bc0      	cmp	r3, #192	; 0xc0
 800bf46:	d821      	bhi.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bf48:	2b80      	cmp	r3, #128	; 0x80
 800bf4a:	d016      	beq.n	800bf7a <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800bf4c:	2b80      	cmp	r3, #128	; 0x80
 800bf4e:	d81d      	bhi.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bf50:	2b00      	cmp	r3, #0
 800bf52:	d002      	beq.n	800bf5a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800bf54:	2b40      	cmp	r3, #64	; 0x40
 800bf56:	d007      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800bf58:	e018      	b.n	800bf8c <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf5a:	4b5e      	ldr	r3, [pc, #376]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf5e:	4a5d      	ldr	r2, [pc, #372]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bf60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bf66:	e017      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	3304      	adds	r3, #4
 800bf6c:	2100      	movs	r1, #0
 800bf6e:	4618      	mov	r0, r3
 800bf70:	f001 f94a 	bl	800d208 <RCCEx_PLL2_Config>
 800bf74:	4603      	mov	r3, r0
 800bf76:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bf78:	e00e      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	3324      	adds	r3, #36	; 0x24
 800bf7e:	2100      	movs	r1, #0
 800bf80:	4618      	mov	r0, r3
 800bf82:	f001 f9f3 	bl	800d36c <RCCEx_PLL3_Config>
 800bf86:	4603      	mov	r3, r0
 800bf88:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800bf8a:	e005      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	75fb      	strb	r3, [r7, #23]
      break;
 800bf90:	e002      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bf92:	bf00      	nop
 800bf94:	e000      	b.n	800bf98 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800bf96:	bf00      	nop
    }

    if(ret == HAL_OK)
 800bf98:	7dfb      	ldrb	r3, [r7, #23]
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	d109      	bne.n	800bfb2 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bf9e:	4b4d      	ldr	r3, [pc, #308]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfa2:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bfaa:	494a      	ldr	r1, [pc, #296]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	650b      	str	r3, [r1, #80]	; 0x50
 800bfb0:	e001      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb2:	7dfb      	ldrb	r3, [r7, #23]
 800bfb4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d049      	beq.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bfc8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfcc:	d030      	beq.n	800c030 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800bfce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800bfd2:	d82a      	bhi.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bfd4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfd8:	d02c      	beq.n	800c034 <HAL_RCCEx_PeriphCLKConfig+0x234>
 800bfda:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800bfde:	d824      	bhi.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bfe0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfe4:	d018      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800bfe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bfea:	d81e      	bhi.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d003      	beq.n	800bff8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800bff0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bff4:	d007      	beq.n	800c006 <HAL_RCCEx_PeriphCLKConfig+0x206>
 800bff6:	e018      	b.n	800c02a <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bff8:	4b36      	ldr	r3, [pc, #216]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bffc:	4a35      	ldr	r2, [pc, #212]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800bffe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c002:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c004:	e017      	b.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	3304      	adds	r3, #4
 800c00a:	2100      	movs	r1, #0
 800c00c:	4618      	mov	r0, r3
 800c00e:	f001 f8fb 	bl	800d208 <RCCEx_PLL2_Config>
 800c012:	4603      	mov	r3, r0
 800c014:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c016:	e00e      	b.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	3324      	adds	r3, #36	; 0x24
 800c01c:	2100      	movs	r1, #0
 800c01e:	4618      	mov	r0, r3
 800c020:	f001 f9a4 	bl	800d36c <RCCEx_PLL3_Config>
 800c024:	4603      	mov	r3, r0
 800c026:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c028:	e005      	b.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c02a:	2301      	movs	r3, #1
 800c02c:	75fb      	strb	r3, [r7, #23]
      break;
 800c02e:	e002      	b.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c030:	bf00      	nop
 800c032:	e000      	b.n	800c036 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800c034:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c036:	7dfb      	ldrb	r3, [r7, #23]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d10a      	bne.n	800c052 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800c03c:	4b25      	ldr	r3, [pc, #148]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c03e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c040:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800c04a:	4922      	ldr	r1, [pc, #136]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c04c:	4313      	orrs	r3, r2
 800c04e:	658b      	str	r3, [r1, #88]	; 0x58
 800c050:	e001      	b.n	800c056 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c052:	7dfb      	ldrb	r3, [r7, #23]
 800c054:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d04b      	beq.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c068:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c06c:	d030      	beq.n	800c0d0 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800c06e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c072:	d82a      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c074:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c078:	d02e      	beq.n	800c0d8 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800c07a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c07e:	d824      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c080:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c084:	d018      	beq.n	800c0b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800c086:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c08a:	d81e      	bhi.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d003      	beq.n	800c098 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800c090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c094:	d007      	beq.n	800c0a6 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800c096:	e018      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c098:	4b0e      	ldr	r3, [pc, #56]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c09a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c09c:	4a0d      	ldr	r2, [pc, #52]	; (800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800c09e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c0a2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c0a4:	e019      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	3304      	adds	r3, #4
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	4618      	mov	r0, r3
 800c0ae:	f001 f8ab 	bl	800d208 <RCCEx_PLL2_Config>
 800c0b2:	4603      	mov	r3, r0
 800c0b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800c0b6:	e010      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	3324      	adds	r3, #36	; 0x24
 800c0bc:	2100      	movs	r1, #0
 800c0be:	4618      	mov	r0, r3
 800c0c0:	f001 f954 	bl	800d36c <RCCEx_PLL3_Config>
 800c0c4:	4603      	mov	r3, r0
 800c0c6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800c0c8:	e007      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	75fb      	strb	r3, [r7, #23]
      break;
 800c0ce:	e004      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800c0d0:	bf00      	nop
 800c0d2:	e002      	b.n	800c0da <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800c0d4:	58024400 	.word	0x58024400
      break;
 800c0d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c0da:	7dfb      	ldrb	r3, [r7, #23]
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d10a      	bne.n	800c0f6 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800c0e0:	4b99      	ldr	r3, [pc, #612]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c0e4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800c0ee:	4996      	ldr	r1, [pc, #600]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c0f0:	4313      	orrs	r3, r2
 800c0f2:	658b      	str	r3, [r1, #88]	; 0x58
 800c0f4:	e001      	b.n	800c0fa <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f6:	7dfb      	ldrb	r3, [r7, #23]
 800c0f8:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	681b      	ldr	r3, [r3, #0]
 800c0fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c102:	2b00      	cmp	r3, #0
 800c104:	d032      	beq.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c10a:	2b30      	cmp	r3, #48	; 0x30
 800c10c:	d01c      	beq.n	800c148 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800c10e:	2b30      	cmp	r3, #48	; 0x30
 800c110:	d817      	bhi.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c112:	2b20      	cmp	r3, #32
 800c114:	d00c      	beq.n	800c130 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800c116:	2b20      	cmp	r3, #32
 800c118:	d813      	bhi.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d016      	beq.n	800c14c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800c11e:	2b10      	cmp	r3, #16
 800c120:	d10f      	bne.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c122:	4b89      	ldr	r3, [pc, #548]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c126:	4a88      	ldr	r2, [pc, #544]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c12c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c12e:	e00e      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	3304      	adds	r3, #4
 800c134:	2102      	movs	r1, #2
 800c136:	4618      	mov	r0, r3
 800c138:	f001 f866 	bl	800d208 <RCCEx_PLL2_Config>
 800c13c:	4603      	mov	r3, r0
 800c13e:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800c140:	e005      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c142:	2301      	movs	r3, #1
 800c144:	75fb      	strb	r3, [r7, #23]
      break;
 800c146:	e002      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c148:	bf00      	nop
 800c14a:	e000      	b.n	800c14e <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800c14c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c14e:	7dfb      	ldrb	r3, [r7, #23]
 800c150:	2b00      	cmp	r3, #0
 800c152:	d109      	bne.n	800c168 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800c154:	4b7c      	ldr	r3, [pc, #496]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c156:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c158:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c160:	4979      	ldr	r1, [pc, #484]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c162:	4313      	orrs	r3, r2
 800c164:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c166:	e001      	b.n	800c16c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c168:	7dfb      	ldrb	r3, [r7, #23]
 800c16a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c174:	2b00      	cmp	r3, #0
 800c176:	d047      	beq.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c17c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c180:	d030      	beq.n	800c1e4 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800c182:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c186:	d82a      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c188:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c18c:	d02c      	beq.n	800c1e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800c18e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c192:	d824      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c194:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c198:	d018      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800c19a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c19e:	d81e      	bhi.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d003      	beq.n	800c1ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800c1a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c1a8:	d007      	beq.n	800c1ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800c1aa:	e018      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1ac:	4b66      	ldr	r3, [pc, #408]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1b0:	4a65      	ldr	r2, [pc, #404]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c1b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c1b8:	e017      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	3304      	adds	r3, #4
 800c1be:	2100      	movs	r1, #0
 800c1c0:	4618      	mov	r0, r3
 800c1c2:	f001 f821 	bl	800d208 <RCCEx_PLL2_Config>
 800c1c6:	4603      	mov	r3, r0
 800c1c8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c1ca:	e00e      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	3324      	adds	r3, #36	; 0x24
 800c1d0:	2100      	movs	r1, #0
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	f001 f8ca 	bl	800d36c <RCCEx_PLL3_Config>
 800c1d8:	4603      	mov	r3, r0
 800c1da:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800c1dc:	e005      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c1de:	2301      	movs	r3, #1
 800c1e0:	75fb      	strb	r3, [r7, #23]
      break;
 800c1e2:	e002      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c1e4:	bf00      	nop
 800c1e6:	e000      	b.n	800c1ea <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800c1e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c1ea:	7dfb      	ldrb	r3, [r7, #23]
 800c1ec:	2b00      	cmp	r3, #0
 800c1ee:	d109      	bne.n	800c204 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800c1f0:	4b55      	ldr	r3, [pc, #340]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c1f4:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1fc:	4952      	ldr	r1, [pc, #328]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	650b      	str	r3, [r1, #80]	; 0x50
 800c202:	e001      	b.n	800c208 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c204:	7dfb      	ldrb	r3, [r7, #23]
 800c206:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c210:	2b00      	cmp	r3, #0
 800c212:	d049      	beq.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c218:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c21c:	d02e      	beq.n	800c27c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800c21e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c222:	d828      	bhi.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c224:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c228:	d02a      	beq.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800c22a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c22e:	d822      	bhi.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c230:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c234:	d026      	beq.n	800c284 <HAL_RCCEx_PeriphCLKConfig+0x484>
 800c236:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c23a:	d81c      	bhi.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c23c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c240:	d010      	beq.n	800c264 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800c242:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c246:	d816      	bhi.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d01d      	beq.n	800c288 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800c24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c250:	d111      	bne.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	3304      	adds	r3, #4
 800c256:	2101      	movs	r1, #1
 800c258:	4618      	mov	r0, r3
 800c25a:	f000 ffd5 	bl	800d208 <RCCEx_PLL2_Config>
 800c25e:	4603      	mov	r3, r0
 800c260:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c262:	e012      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	3324      	adds	r3, #36	; 0x24
 800c268:	2101      	movs	r1, #1
 800c26a:	4618      	mov	r0, r3
 800c26c:	f001 f87e 	bl	800d36c <RCCEx_PLL3_Config>
 800c270:	4603      	mov	r3, r0
 800c272:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800c274:	e009      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	75fb      	strb	r3, [r7, #23]
      break;
 800c27a:	e006      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c27c:	bf00      	nop
 800c27e:	e004      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c280:	bf00      	nop
 800c282:	e002      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c284:	bf00      	nop
 800c286:	e000      	b.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800c288:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c28a:	7dfb      	ldrb	r3, [r7, #23]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d109      	bne.n	800c2a4 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800c290:	4b2d      	ldr	r3, [pc, #180]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c294:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c29c:	492a      	ldr	r1, [pc, #168]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c29e:	4313      	orrs	r3, r2
 800c2a0:	650b      	str	r3, [r1, #80]	; 0x50
 800c2a2:	e001      	b.n	800c2a8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2a4:	7dfb      	ldrb	r3, [r7, #23]
 800c2a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d04d      	beq.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c2ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2be:	d02e      	beq.n	800c31e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800c2c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c2c4:	d828      	bhi.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c2c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2ca:	d02a      	beq.n	800c322 <HAL_RCCEx_PeriphCLKConfig+0x522>
 800c2cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2d0:	d822      	bhi.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c2d2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2d6:	d026      	beq.n	800c326 <HAL_RCCEx_PeriphCLKConfig+0x526>
 800c2d8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c2dc:	d81c      	bhi.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c2de:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e2:	d010      	beq.n	800c306 <HAL_RCCEx_PeriphCLKConfig+0x506>
 800c2e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c2e8:	d816      	bhi.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d01d      	beq.n	800c32a <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800c2ee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c2f2:	d111      	bne.n	800c318 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	2101      	movs	r1, #1
 800c2fa:	4618      	mov	r0, r3
 800c2fc:	f000 ff84 	bl	800d208 <RCCEx_PLL2_Config>
 800c300:	4603      	mov	r3, r0
 800c302:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c304:	e012      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	3324      	adds	r3, #36	; 0x24
 800c30a:	2101      	movs	r1, #1
 800c30c:	4618      	mov	r0, r3
 800c30e:	f001 f82d 	bl	800d36c <RCCEx_PLL3_Config>
 800c312:	4603      	mov	r3, r0
 800c314:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800c316:	e009      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800c318:	2301      	movs	r3, #1
 800c31a:	75fb      	strb	r3, [r7, #23]
      break;
 800c31c:	e006      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c31e:	bf00      	nop
 800c320:	e004      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c322:	bf00      	nop
 800c324:	e002      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c326:	bf00      	nop
 800c328:	e000      	b.n	800c32c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800c32a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c32c:	7dfb      	ldrb	r3, [r7, #23]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10c      	bne.n	800c34c <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800c332:	4b05      	ldr	r3, [pc, #20]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c336:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c340:	4901      	ldr	r1, [pc, #4]	; (800c348 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800c342:	4313      	orrs	r3, r2
 800c344:	658b      	str	r3, [r1, #88]	; 0x58
 800c346:	e003      	b.n	800c350 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800c348:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c34c:	7dfb      	ldrb	r3, [r7, #23]
 800c34e:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d02f      	beq.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c360:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c364:	d00e      	beq.n	800c384 <HAL_RCCEx_PeriphCLKConfig+0x584>
 800c366:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c36a:	d814      	bhi.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x596>
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d015      	beq.n	800c39c <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800c370:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c374:	d10f      	bne.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c376:	4baf      	ldr	r3, [pc, #700]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c37a:	4aae      	ldr	r2, [pc, #696]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c37c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c380:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c382:	e00c      	b.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	3304      	adds	r3, #4
 800c388:	2101      	movs	r1, #1
 800c38a:	4618      	mov	r0, r3
 800c38c:	f000 ff3c 	bl	800d208 <RCCEx_PLL2_Config>
 800c390:	4603      	mov	r3, r0
 800c392:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800c394:	e003      	b.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c396:	2301      	movs	r3, #1
 800c398:	75fb      	strb	r3, [r7, #23]
      break;
 800c39a:	e000      	b.n	800c39e <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800c39c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d109      	bne.n	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c3a4:	4ba3      	ldr	r3, [pc, #652]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3a8:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c3b0:	49a0      	ldr	r1, [pc, #640]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	650b      	str	r3, [r1, #80]	; 0x50
 800c3b6:	e001      	b.n	800c3bc <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c3b8:	7dfb      	ldrb	r3, [r7, #23]
 800c3ba:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d032      	beq.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3cc:	2b03      	cmp	r3, #3
 800c3ce:	d81b      	bhi.n	800c408 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800c3d0:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800c3d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d6:	bf00      	nop
 800c3d8:	0800c40f 	.word	0x0800c40f
 800c3dc:	0800c3e9 	.word	0x0800c3e9
 800c3e0:	0800c3f7 	.word	0x0800c3f7
 800c3e4:	0800c40f 	.word	0x0800c40f
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c3e8:	4b92      	ldr	r3, [pc, #584]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3ec:	4a91      	ldr	r2, [pc, #580]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c3ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3f2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c3f4:	e00c      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	3304      	adds	r3, #4
 800c3fa:	2102      	movs	r1, #2
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 ff03 	bl	800d208 <RCCEx_PLL2_Config>
 800c402:	4603      	mov	r3, r0
 800c404:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800c406:	e003      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800c408:	2301      	movs	r3, #1
 800c40a:	75fb      	strb	r3, [r7, #23]
      break;
 800c40c:	e000      	b.n	800c410 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800c40e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c410:	7dfb      	ldrb	r3, [r7, #23]
 800c412:	2b00      	cmp	r3, #0
 800c414:	d109      	bne.n	800c42a <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800c416:	4b87      	ldr	r3, [pc, #540]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c41a:	f023 0203 	bic.w	r2, r3, #3
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c422:	4984      	ldr	r1, [pc, #528]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c424:	4313      	orrs	r3, r2
 800c426:	64cb      	str	r3, [r1, #76]	; 0x4c
 800c428:	e001      	b.n	800c42e <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c42a:	7dfb      	ldrb	r3, [r7, #23]
 800c42c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c436:	2b00      	cmp	r3, #0
 800c438:	f000 8086 	beq.w	800c548 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c43c:	4b7e      	ldr	r3, [pc, #504]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a7d      	ldr	r2, [pc, #500]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c442:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c446:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c448:	f7fb f99a 	bl	8007780 <HAL_GetTick>
 800c44c:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c44e:	e009      	b.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c450:	f7fb f996 	bl	8007780 <HAL_GetTick>
 800c454:	4602      	mov	r2, r0
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	1ad3      	subs	r3, r2, r3
 800c45a:	2b64      	cmp	r3, #100	; 0x64
 800c45c:	d902      	bls.n	800c464 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800c45e:	2303      	movs	r3, #3
 800c460:	75fb      	strb	r3, [r7, #23]
        break;
 800c462:	e005      	b.n	800c470 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c464:	4b74      	ldr	r3, [pc, #464]	; (800c638 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800c466:	681b      	ldr	r3, [r3, #0]
 800c468:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d0ef      	beq.n	800c450 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800c470:	7dfb      	ldrb	r3, [r7, #23]
 800c472:	2b00      	cmp	r3, #0
 800c474:	d166      	bne.n	800c544 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800c476:	4b6f      	ldr	r3, [pc, #444]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c478:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c480:	4053      	eors	r3, r2
 800c482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c486:	2b00      	cmp	r3, #0
 800c488:	d013      	beq.n	800c4b2 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800c48a:	4b6a      	ldr	r3, [pc, #424]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c48c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c48e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c492:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c494:	4b67      	ldr	r3, [pc, #412]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c498:	4a66      	ldr	r2, [pc, #408]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c49a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c49e:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c4a0:	4b64      	ldr	r3, [pc, #400]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4a4:	4a63      	ldr	r2, [pc, #396]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c4aa:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800c4ac:	4a61      	ldr	r2, [pc, #388]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c4b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4bc:	d115      	bne.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4be:	f7fb f95f 	bl	8007780 <HAL_GetTick>
 800c4c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c4c4:	e00b      	b.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c4c6:	f7fb f95b 	bl	8007780 <HAL_GetTick>
 800c4ca:	4602      	mov	r2, r0
 800c4cc:	693b      	ldr	r3, [r7, #16]
 800c4ce:	1ad3      	subs	r3, r2, r3
 800c4d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d902      	bls.n	800c4de <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800c4d8:	2303      	movs	r3, #3
 800c4da:	75fb      	strb	r3, [r7, #23]
            break;
 800c4dc:	e005      	b.n	800c4ea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c4de:	4b55      	ldr	r3, [pc, #340]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c4e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c4e2:	f003 0302 	and.w	r3, r3, #2
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d0ed      	beq.n	800c4c6 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800c4ea:	7dfb      	ldrb	r3, [r7, #23]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d126      	bne.n	800c53e <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c4f0:	687b      	ldr	r3, [r7, #4]
 800c4f2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c4f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c4fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c4fe:	d10d      	bne.n	800c51c <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800c500:	4b4c      	ldr	r3, [pc, #304]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c502:	691b      	ldr	r3, [r3, #16]
 800c504:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c50e:	0919      	lsrs	r1, r3, #4
 800c510:	4b4a      	ldr	r3, [pc, #296]	; (800c63c <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800c512:	400b      	ands	r3, r1
 800c514:	4947      	ldr	r1, [pc, #284]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c516:	4313      	orrs	r3, r2
 800c518:	610b      	str	r3, [r1, #16]
 800c51a:	e005      	b.n	800c528 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800c51c:	4b45      	ldr	r3, [pc, #276]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c51e:	691b      	ldr	r3, [r3, #16]
 800c520:	4a44      	ldr	r2, [pc, #272]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c522:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800c526:	6113      	str	r3, [r2, #16]
 800c528:	4b42      	ldr	r3, [pc, #264]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c52a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800c532:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800c536:	493f      	ldr	r1, [pc, #252]	; (800c634 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800c538:	4313      	orrs	r3, r2
 800c53a:	670b      	str	r3, [r1, #112]	; 0x70
 800c53c:	e004      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c53e:	7dfb      	ldrb	r3, [r7, #23]
 800c540:	75bb      	strb	r3, [r7, #22]
 800c542:	e001      	b.n	800c548 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c544:	7dfb      	ldrb	r3, [r7, #23]
 800c546:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	f003 0301 	and.w	r3, r3, #1
 800c550:	2b00      	cmp	r3, #0
 800c552:	f000 8085 	beq.w	800c660 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c55a:	2b28      	cmp	r3, #40	; 0x28
 800c55c:	d866      	bhi.n	800c62c <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800c55e:	a201      	add	r2, pc, #4	; (adr r2, 800c564 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800c560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c564:	0800c641 	.word	0x0800c641
 800c568:	0800c62d 	.word	0x0800c62d
 800c56c:	0800c62d 	.word	0x0800c62d
 800c570:	0800c62d 	.word	0x0800c62d
 800c574:	0800c62d 	.word	0x0800c62d
 800c578:	0800c62d 	.word	0x0800c62d
 800c57c:	0800c62d 	.word	0x0800c62d
 800c580:	0800c62d 	.word	0x0800c62d
 800c584:	0800c609 	.word	0x0800c609
 800c588:	0800c62d 	.word	0x0800c62d
 800c58c:	0800c62d 	.word	0x0800c62d
 800c590:	0800c62d 	.word	0x0800c62d
 800c594:	0800c62d 	.word	0x0800c62d
 800c598:	0800c62d 	.word	0x0800c62d
 800c59c:	0800c62d 	.word	0x0800c62d
 800c5a0:	0800c62d 	.word	0x0800c62d
 800c5a4:	0800c61b 	.word	0x0800c61b
 800c5a8:	0800c62d 	.word	0x0800c62d
 800c5ac:	0800c62d 	.word	0x0800c62d
 800c5b0:	0800c62d 	.word	0x0800c62d
 800c5b4:	0800c62d 	.word	0x0800c62d
 800c5b8:	0800c62d 	.word	0x0800c62d
 800c5bc:	0800c62d 	.word	0x0800c62d
 800c5c0:	0800c62d 	.word	0x0800c62d
 800c5c4:	0800c641 	.word	0x0800c641
 800c5c8:	0800c62d 	.word	0x0800c62d
 800c5cc:	0800c62d 	.word	0x0800c62d
 800c5d0:	0800c62d 	.word	0x0800c62d
 800c5d4:	0800c62d 	.word	0x0800c62d
 800c5d8:	0800c62d 	.word	0x0800c62d
 800c5dc:	0800c62d 	.word	0x0800c62d
 800c5e0:	0800c62d 	.word	0x0800c62d
 800c5e4:	0800c641 	.word	0x0800c641
 800c5e8:	0800c62d 	.word	0x0800c62d
 800c5ec:	0800c62d 	.word	0x0800c62d
 800c5f0:	0800c62d 	.word	0x0800c62d
 800c5f4:	0800c62d 	.word	0x0800c62d
 800c5f8:	0800c62d 	.word	0x0800c62d
 800c5fc:	0800c62d 	.word	0x0800c62d
 800c600:	0800c62d 	.word	0x0800c62d
 800c604:	0800c641 	.word	0x0800c641
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	3304      	adds	r3, #4
 800c60c:	2101      	movs	r1, #1
 800c60e:	4618      	mov	r0, r3
 800c610:	f000 fdfa 	bl	800d208 <RCCEx_PLL2_Config>
 800c614:	4603      	mov	r3, r0
 800c616:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c618:	e013      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	3324      	adds	r3, #36	; 0x24
 800c61e:	2101      	movs	r1, #1
 800c620:	4618      	mov	r0, r3
 800c622:	f000 fea3 	bl	800d36c <RCCEx_PLL3_Config>
 800c626:	4603      	mov	r3, r0
 800c628:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800c62a:	e00a      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c62c:	2301      	movs	r3, #1
 800c62e:	75fb      	strb	r3, [r7, #23]
      break;
 800c630:	e007      	b.n	800c642 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800c632:	bf00      	nop
 800c634:	58024400 	.word	0x58024400
 800c638:	58024800 	.word	0x58024800
 800c63c:	00ffffcf 	.word	0x00ffffcf
      break;
 800c640:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c642:	7dfb      	ldrb	r3, [r7, #23]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d109      	bne.n	800c65c <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800c648:	4b96      	ldr	r3, [pc, #600]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c64a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c64c:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c654:	4993      	ldr	r1, [pc, #588]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c656:	4313      	orrs	r3, r2
 800c658:	654b      	str	r3, [r1, #84]	; 0x54
 800c65a:	e001      	b.n	800c660 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c65c:	7dfb      	ldrb	r3, [r7, #23]
 800c65e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	f003 0302 	and.w	r3, r3, #2
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d038      	beq.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c670:	2b05      	cmp	r3, #5
 800c672:	d821      	bhi.n	800c6b8 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800c674:	a201      	add	r2, pc, #4	; (adr r2, 800c67c <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800c676:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c67a:	bf00      	nop
 800c67c:	0800c6bf 	.word	0x0800c6bf
 800c680:	0800c695 	.word	0x0800c695
 800c684:	0800c6a7 	.word	0x0800c6a7
 800c688:	0800c6bf 	.word	0x0800c6bf
 800c68c:	0800c6bf 	.word	0x0800c6bf
 800c690:	0800c6bf 	.word	0x0800c6bf
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	3304      	adds	r3, #4
 800c698:	2101      	movs	r1, #1
 800c69a:	4618      	mov	r0, r3
 800c69c:	f000 fdb4 	bl	800d208 <RCCEx_PLL2_Config>
 800c6a0:	4603      	mov	r3, r0
 800c6a2:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c6a4:	e00c      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	3324      	adds	r3, #36	; 0x24
 800c6aa:	2101      	movs	r1, #1
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f000 fe5d 	bl	800d36c <RCCEx_PLL3_Config>
 800c6b2:	4603      	mov	r3, r0
 800c6b4:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800c6b6:	e003      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c6b8:	2301      	movs	r3, #1
 800c6ba:	75fb      	strb	r3, [r7, #23]
      break;
 800c6bc:	e000      	b.n	800c6c0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800c6be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c6c0:	7dfb      	ldrb	r3, [r7, #23]
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d109      	bne.n	800c6da <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c6c6:	4b77      	ldr	r3, [pc, #476]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6ca:	f023 0207 	bic.w	r2, r3, #7
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c6d2:	4974      	ldr	r1, [pc, #464]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c6d4:	4313      	orrs	r3, r2
 800c6d6:	654b      	str	r3, [r1, #84]	; 0x54
 800c6d8:	e001      	b.n	800c6de <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c6da:	7dfb      	ldrb	r3, [r7, #23]
 800c6dc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	f003 0304 	and.w	r3, r3, #4
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d03a      	beq.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c6f0:	2b05      	cmp	r3, #5
 800c6f2:	d821      	bhi.n	800c738 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800c6f4:	a201      	add	r2, pc, #4	; (adr r2, 800c6fc <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800c6f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6fa:	bf00      	nop
 800c6fc:	0800c73f 	.word	0x0800c73f
 800c700:	0800c715 	.word	0x0800c715
 800c704:	0800c727 	.word	0x0800c727
 800c708:	0800c73f 	.word	0x0800c73f
 800c70c:	0800c73f 	.word	0x0800c73f
 800c710:	0800c73f 	.word	0x0800c73f
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	3304      	adds	r3, #4
 800c718:	2101      	movs	r1, #1
 800c71a:	4618      	mov	r0, r3
 800c71c:	f000 fd74 	bl	800d208 <RCCEx_PLL2_Config>
 800c720:	4603      	mov	r3, r0
 800c722:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c724:	e00c      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	3324      	adds	r3, #36	; 0x24
 800c72a:	2101      	movs	r1, #1
 800c72c:	4618      	mov	r0, r3
 800c72e:	f000 fe1d 	bl	800d36c <RCCEx_PLL3_Config>
 800c732:	4603      	mov	r3, r0
 800c734:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800c736:	e003      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	75fb      	strb	r3, [r7, #23]
      break;
 800c73c:	e000      	b.n	800c740 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800c73e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c740:	7dfb      	ldrb	r3, [r7, #23]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d10a      	bne.n	800c75c <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c746:	4b57      	ldr	r3, [pc, #348]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c74a:	f023 0207 	bic.w	r2, r3, #7
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c754:	4953      	ldr	r1, [pc, #332]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c756:	4313      	orrs	r3, r2
 800c758:	658b      	str	r3, [r1, #88]	; 0x58
 800c75a:	e001      	b.n	800c760 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c75c:	7dfb      	ldrb	r3, [r7, #23]
 800c75e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f003 0320 	and.w	r3, r3, #32
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d04b      	beq.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c772:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c776:	d02e      	beq.n	800c7d6 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800c778:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c77c:	d828      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c77e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c782:	d02a      	beq.n	800c7da <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800c784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c788:	d822      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c78a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c78e:	d026      	beq.n	800c7de <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800c790:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800c794:	d81c      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c796:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c79a:	d010      	beq.n	800c7be <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800c79c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c7a0:	d816      	bhi.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d01d      	beq.n	800c7e2 <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800c7a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c7aa:	d111      	bne.n	800c7d0 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	3304      	adds	r3, #4
 800c7b0:	2100      	movs	r1, #0
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f000 fd28 	bl	800d208 <RCCEx_PLL2_Config>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c7bc:	e012      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	3324      	adds	r3, #36	; 0x24
 800c7c2:	2102      	movs	r1, #2
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	f000 fdd1 	bl	800d36c <RCCEx_PLL3_Config>
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800c7ce:	e009      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	75fb      	strb	r3, [r7, #23]
      break;
 800c7d4:	e006      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c7d6:	bf00      	nop
 800c7d8:	e004      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c7da:	bf00      	nop
 800c7dc:	e002      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c7de:	bf00      	nop
 800c7e0:	e000      	b.n	800c7e4 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800c7e2:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c7e4:	7dfb      	ldrb	r3, [r7, #23]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d10a      	bne.n	800c800 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c7ea:	4b2e      	ldr	r3, [pc, #184]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c7ee:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c7f8:	492a      	ldr	r1, [pc, #168]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c7fa:	4313      	orrs	r3, r2
 800c7fc:	654b      	str	r3, [r1, #84]	; 0x54
 800c7fe:	e001      	b.n	800c804 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c800:	7dfb      	ldrb	r3, [r7, #23]
 800c802:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d04d      	beq.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c816:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c81a:	d02e      	beq.n	800c87a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800c81c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800c820:	d828      	bhi.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c822:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c826:	d02a      	beq.n	800c87e <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800c828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c82c:	d822      	bhi.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c82e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c832:	d026      	beq.n	800c882 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800c834:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c838:	d81c      	bhi.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c83a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c83e:	d010      	beq.n	800c862 <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800c840:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c844:	d816      	bhi.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800c846:	2b00      	cmp	r3, #0
 800c848:	d01d      	beq.n	800c886 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800c84a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c84e:	d111      	bne.n	800c874 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	3304      	adds	r3, #4
 800c854:	2100      	movs	r1, #0
 800c856:	4618      	mov	r0, r3
 800c858:	f000 fcd6 	bl	800d208 <RCCEx_PLL2_Config>
 800c85c:	4603      	mov	r3, r0
 800c85e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c860:	e012      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	3324      	adds	r3, #36	; 0x24
 800c866:	2102      	movs	r1, #2
 800c868:	4618      	mov	r0, r3
 800c86a:	f000 fd7f 	bl	800d36c <RCCEx_PLL3_Config>
 800c86e:	4603      	mov	r3, r0
 800c870:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800c872:	e009      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c874:	2301      	movs	r3, #1
 800c876:	75fb      	strb	r3, [r7, #23]
      break;
 800c878:	e006      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c87a:	bf00      	nop
 800c87c:	e004      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c87e:	bf00      	nop
 800c880:	e002      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c882:	bf00      	nop
 800c884:	e000      	b.n	800c888 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800c886:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c888:	7dfb      	ldrb	r3, [r7, #23]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d10c      	bne.n	800c8a8 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c88e:	4b05      	ldr	r3, [pc, #20]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c892:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c89c:	4901      	ldr	r1, [pc, #4]	; (800c8a4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	658b      	str	r3, [r1, #88]	; 0x58
 800c8a2:	e003      	b.n	800c8ac <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800c8a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c8a8:	7dfb      	ldrb	r3, [r7, #23]
 800c8aa:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d04b      	beq.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c8be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c8c2:	d02e      	beq.n	800c922 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800c8c4:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800c8c8:	d828      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8ce:	d02a      	beq.n	800c926 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800c8d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c8d4:	d822      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c8d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c8da:	d026      	beq.n	800c92a <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800c8dc:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800c8e0:	d81c      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c8e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8e6:	d010      	beq.n	800c90a <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800c8e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c8ec:	d816      	bhi.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d01d      	beq.n	800c92e <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800c8f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c8f6:	d111      	bne.n	800c91c <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	3304      	adds	r3, #4
 800c8fc:	2100      	movs	r1, #0
 800c8fe:	4618      	mov	r0, r3
 800c900:	f000 fc82 	bl	800d208 <RCCEx_PLL2_Config>
 800c904:	4603      	mov	r3, r0
 800c906:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c908:	e012      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	3324      	adds	r3, #36	; 0x24
 800c90e:	2102      	movs	r1, #2
 800c910:	4618      	mov	r0, r3
 800c912:	f000 fd2b 	bl	800d36c <RCCEx_PLL3_Config>
 800c916:	4603      	mov	r3, r0
 800c918:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800c91a:	e009      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800c91c:	2301      	movs	r3, #1
 800c91e:	75fb      	strb	r3, [r7, #23]
      break;
 800c920:	e006      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c922:	bf00      	nop
 800c924:	e004      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c926:	bf00      	nop
 800c928:	e002      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c92a:	bf00      	nop
 800c92c:	e000      	b.n	800c930 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800c92e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800c930:	7dfb      	ldrb	r3, [r7, #23]
 800c932:	2b00      	cmp	r3, #0
 800c934:	d10a      	bne.n	800c94c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c936:	4b9d      	ldr	r3, [pc, #628]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c938:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c93a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800c944:	4999      	ldr	r1, [pc, #612]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c946:	4313      	orrs	r3, r2
 800c948:	658b      	str	r3, [r1, #88]	; 0x58
 800c94a:	e001      	b.n	800c950 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c94c:	7dfb      	ldrb	r3, [r7, #23]
 800c94e:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 0308 	and.w	r3, r3, #8
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d01a      	beq.n	800c992 <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c962:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c966:	d10a      	bne.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3324      	adds	r3, #36	; 0x24
 800c96c:	2102      	movs	r1, #2
 800c96e:	4618      	mov	r0, r3
 800c970:	f000 fcfc 	bl	800d36c <RCCEx_PLL3_Config>
 800c974:	4603      	mov	r3, r0
 800c976:	2b00      	cmp	r3, #0
 800c978:	d001      	beq.n	800c97e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800c97a:	2301      	movs	r3, #1
 800c97c:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c97e:	4b8b      	ldr	r3, [pc, #556]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c982:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c98c:	4987      	ldr	r1, [pc, #540]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c98e:	4313      	orrs	r3, r2
 800c990:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c992:	687b      	ldr	r3, [r7, #4]
 800c994:	681b      	ldr	r3, [r3, #0]
 800c996:	f003 0310 	and.w	r3, r3, #16
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d01a      	beq.n	800c9d4 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9a8:	d10a      	bne.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	3324      	adds	r3, #36	; 0x24
 800c9ae:	2102      	movs	r1, #2
 800c9b0:	4618      	mov	r0, r3
 800c9b2:	f000 fcdb 	bl	800d36c <RCCEx_PLL3_Config>
 800c9b6:	4603      	mov	r3, r0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d001      	beq.n	800c9c0 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800c9bc:	2301      	movs	r3, #1
 800c9be:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c9c0:	4b7a      	ldr	r3, [pc, #488]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c9ce:	4977      	ldr	r1, [pc, #476]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800c9d0:	4313      	orrs	r3, r2
 800c9d2:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800c9dc:	2b00      	cmp	r3, #0
 800c9de:	d034      	beq.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800c9e6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ea:	d01d      	beq.n	800ca28 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800c9ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9f0:	d817      	bhi.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d003      	beq.n	800c9fe <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800c9f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9fa:	d009      	beq.n	800ca10 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800c9fc:	e011      	b.n	800ca22 <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	3304      	adds	r3, #4
 800ca02:	2100      	movs	r1, #0
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 fbff 	bl	800d208 <RCCEx_PLL2_Config>
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ca0e:	e00c      	b.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	3324      	adds	r3, #36	; 0x24
 800ca14:	2102      	movs	r1, #2
 800ca16:	4618      	mov	r0, r3
 800ca18:	f000 fca8 	bl	800d36c <RCCEx_PLL3_Config>
 800ca1c:	4603      	mov	r3, r0
 800ca1e:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800ca20:	e003      	b.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca22:	2301      	movs	r3, #1
 800ca24:	75fb      	strb	r3, [r7, #23]
      break;
 800ca26:	e000      	b.n	800ca2a <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800ca28:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca2a:	7dfb      	ldrb	r3, [r7, #23]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d10a      	bne.n	800ca46 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ca30:	4b5e      	ldr	r3, [pc, #376]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca34:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ca3e:	495b      	ldr	r1, [pc, #364]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca40:	4313      	orrs	r3, r2
 800ca42:	658b      	str	r3, [r1, #88]	; 0x58
 800ca44:	e001      	b.n	800ca4a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ca46:	7dfb      	ldrb	r3, [r7, #23]
 800ca48:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	681b      	ldr	r3, [r3, #0]
 800ca4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d033      	beq.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca60:	d01c      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800ca62:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca66:	d816      	bhi.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800ca68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca6c:	d003      	beq.n	800ca76 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800ca6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca72:	d007      	beq.n	800ca84 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800ca74:	e00f      	b.n	800ca96 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca76:	4b4d      	ldr	r3, [pc, #308]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca7a:	4a4c      	ldr	r2, [pc, #304]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800ca7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca80:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800ca82:	e00c      	b.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	3324      	adds	r3, #36	; 0x24
 800ca88:	2101      	movs	r1, #1
 800ca8a:	4618      	mov	r0, r3
 800ca8c:	f000 fc6e 	bl	800d36c <RCCEx_PLL3_Config>
 800ca90:	4603      	mov	r3, r0
 800ca92:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800ca94:	e003      	b.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ca96:	2301      	movs	r3, #1
 800ca98:	75fb      	strb	r3, [r7, #23]
      break;
 800ca9a:	e000      	b.n	800ca9e <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800ca9c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ca9e:	7dfb      	ldrb	r3, [r7, #23]
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d10a      	bne.n	800caba <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800caa4:	4b41      	ldr	r3, [pc, #260]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800caa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800caa8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cab2:	493e      	ldr	r1, [pc, #248]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cab4:	4313      	orrs	r3, r2
 800cab6:	654b      	str	r3, [r1, #84]	; 0x54
 800cab8:	e001      	b.n	800cabe <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800caba:	7dfb      	ldrb	r3, [r7, #23]
 800cabc:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cac6:	2b00      	cmp	r3, #0
 800cac8:	d029      	beq.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cace:	2b00      	cmp	r3, #0
 800cad0:	d003      	beq.n	800cada <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800cad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cad6:	d007      	beq.n	800cae8 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800cad8:	e00f      	b.n	800cafa <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cada:	4b34      	ldr	r3, [pc, #208]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cadc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cade:	4a33      	ldr	r2, [pc, #204]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cae0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cae4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800cae6:	e00b      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	3304      	adds	r3, #4
 800caec:	2102      	movs	r1, #2
 800caee:	4618      	mov	r0, r3
 800caf0:	f000 fb8a 	bl	800d208 <RCCEx_PLL2_Config>
 800caf4:	4603      	mov	r3, r0
 800caf6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800caf8:	e002      	b.n	800cb00 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800cafa:	2301      	movs	r3, #1
 800cafc:	75fb      	strb	r3, [r7, #23]
      break;
 800cafe:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb00:	7dfb      	ldrb	r3, [r7, #23]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d109      	bne.n	800cb1a <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800cb06:	4b29      	ldr	r3, [pc, #164]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cb12:	4926      	ldr	r1, [pc, #152]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb14:	4313      	orrs	r3, r2
 800cb16:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cb18:	e001      	b.n	800cb1e <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb1a:	7dfb      	ldrb	r3, [r7, #23]
 800cb1c:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d00a      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	3324      	adds	r3, #36	; 0x24
 800cb2e:	2102      	movs	r1, #2
 800cb30:	4618      	mov	r0, r3
 800cb32:	f000 fc1b 	bl	800d36c <RCCEx_PLL3_Config>
 800cb36:	4603      	mov	r3, r0
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d033      	beq.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb50:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb54:	d017      	beq.n	800cb86 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800cb56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800cb5a:	d811      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cb5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb60:	d013      	beq.n	800cb8a <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800cb62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb66:	d80b      	bhi.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d010      	beq.n	800cb8e <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800cb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb70:	d106      	bne.n	800cb80 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb72:	4b0e      	ldr	r3, [pc, #56]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb76:	4a0d      	ldr	r2, [pc, #52]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb7c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800cb7e:	e007      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	75fb      	strb	r3, [r7, #23]
      break;
 800cb84:	e004      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cb86:	bf00      	nop
 800cb88:	e002      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cb8a:	bf00      	nop
 800cb8c:	e000      	b.n	800cb90 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800cb8e:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb90:	7dfb      	ldrb	r3, [r7, #23]
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d10c      	bne.n	800cbb0 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800cb96:	4b05      	ldr	r3, [pc, #20]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cb98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb9a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cba2:	4902      	ldr	r1, [pc, #8]	; (800cbac <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800cba4:	4313      	orrs	r3, r2
 800cba6:	654b      	str	r3, [r1, #84]	; 0x54
 800cba8:	e004      	b.n	800cbb4 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800cbaa:	bf00      	nop
 800cbac:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbb0:	7dfb      	ldrb	r3, [r7, #23]
 800cbb2:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d008      	beq.n	800cbd2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800cbc0:	4b31      	ldr	r3, [pc, #196]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbc4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cbcc:	492e      	ldr	r1, [pc, #184]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbce:	4313      	orrs	r3, r2
 800cbd0:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d009      	beq.n	800cbf2 <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800cbde:	4b2a      	ldr	r3, [pc, #168]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbe0:	691b      	ldr	r3, [r3, #16]
 800cbe2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800cbec:	4926      	ldr	r1, [pc, #152]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cbee:	4313      	orrs	r3, r2
 800cbf0:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d008      	beq.n	800cc10 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800cbfe:	4b22      	ldr	r3, [pc, #136]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc00:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc02:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cc0a:	491f      	ldr	r1, [pc, #124]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc0c:	4313      	orrs	r3, r2
 800cc0e:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	681b      	ldr	r3, [r3, #0]
 800cc14:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00d      	beq.n	800cc38 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800cc1c:	4b1a      	ldr	r3, [pc, #104]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc1e:	691b      	ldr	r3, [r3, #16]
 800cc20:	4a19      	ldr	r2, [pc, #100]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc22:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cc26:	6113      	str	r3, [r2, #16]
 800cc28:	4b17      	ldr	r3, [pc, #92]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc2a:	691a      	ldr	r2, [r3, #16]
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800cc32:	4915      	ldr	r1, [pc, #84]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc34:	4313      	orrs	r3, r2
 800cc36:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	da08      	bge.n	800cc52 <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800cc40:	4b11      	ldr	r3, [pc, #68]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc44:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc4c:	490e      	ldr	r1, [pc, #56]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d009      	beq.n	800cc72 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800cc5e:	4b0a      	ldr	r3, [pc, #40]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cc6c:	4906      	ldr	r1, [pc, #24]	; (800cc88 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800cc6e:	4313      	orrs	r3, r2
 800cc70:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800cc72:	7dbb      	ldrb	r3, [r7, #22]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d101      	bne.n	800cc7c <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800cc78:	2300      	movs	r3, #0
 800cc7a:	e000      	b.n	800cc7e <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
}
 800cc7e:	4618      	mov	r0, r3
 800cc80:	3718      	adds	r7, #24
 800cc82:	46bd      	mov	sp, r7
 800cc84:	bd80      	pop	{r7, pc}
 800cc86:	bf00      	nop
 800cc88:	58024400 	.word	0x58024400

0800cc8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cc90:	f7ff f85a 	bl	800bd48 <HAL_RCC_GetHCLKFreq>
 800cc94:	4602      	mov	r2, r0
 800cc96:	4b06      	ldr	r3, [pc, #24]	; (800ccb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	091b      	lsrs	r3, r3, #4
 800cc9c:	f003 0307 	and.w	r3, r3, #7
 800cca0:	4904      	ldr	r1, [pc, #16]	; (800ccb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cca2:	5ccb      	ldrb	r3, [r1, r3]
 800cca4:	f003 031f 	and.w	r3, r3, #31
 800cca8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ccac:	4618      	mov	r0, r3
 800ccae:	bd80      	pop	{r7, pc}
 800ccb0:	58024400 	.word	0x58024400
 800ccb4:	08011110 	.word	0x08011110

0800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b089      	sub	sp, #36	; 0x24
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ccc0:	4ba1      	ldr	r3, [pc, #644]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccc4:	f003 0303 	and.w	r3, r3, #3
 800ccc8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800ccca:	4b9f      	ldr	r3, [pc, #636]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccce:	0b1b      	lsrs	r3, r3, #12
 800ccd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ccd4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ccd6:	4b9c      	ldr	r3, [pc, #624]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccda:	091b      	lsrs	r3, r3, #4
 800ccdc:	f003 0301 	and.w	r3, r3, #1
 800cce0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800cce2:	4b99      	ldr	r3, [pc, #612]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cce6:	08db      	lsrs	r3, r3, #3
 800cce8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ccec:	693a      	ldr	r2, [r7, #16]
 800ccee:	fb02 f303 	mul.w	r3, r2, r3
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ccfa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ccfe:	697b      	ldr	r3, [r7, #20]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	f000 8111 	beq.w	800cf28 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cd06:	69bb      	ldr	r3, [r7, #24]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	f000 8083 	beq.w	800ce14 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cd0e:	69bb      	ldr	r3, [r7, #24]
 800cd10:	2b02      	cmp	r3, #2
 800cd12:	f200 80a1 	bhi.w	800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cd16:	69bb      	ldr	r3, [r7, #24]
 800cd18:	2b00      	cmp	r3, #0
 800cd1a:	d003      	beq.n	800cd24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cd1c:	69bb      	ldr	r3, [r7, #24]
 800cd1e:	2b01      	cmp	r3, #1
 800cd20:	d056      	beq.n	800cdd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cd22:	e099      	b.n	800ce58 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cd24:	4b88      	ldr	r3, [pc, #544]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	f003 0320 	and.w	r3, r3, #32
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d02d      	beq.n	800cd8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cd30:	4b85      	ldr	r3, [pc, #532]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	08db      	lsrs	r3, r3, #3
 800cd36:	f003 0303 	and.w	r3, r3, #3
 800cd3a:	4a84      	ldr	r2, [pc, #528]	; (800cf4c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cd3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd40:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	ee07 3a90 	vmov	s15, r3
 800cd48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd4c:	697b      	ldr	r3, [r7, #20]
 800cd4e:	ee07 3a90 	vmov	s15, r3
 800cd52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd5a:	4b7b      	ldr	r3, [pc, #492]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd6a:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd86:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800cd8a:	e087      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	ee07 3a90 	vmov	s15, r3
 800cd92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cf54 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cd9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd9e:	4b6a      	ldr	r3, [pc, #424]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cda0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cda2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdae:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cdca:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800cdce:	e065      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800cdd0:	697b      	ldr	r3, [r7, #20]
 800cdd2:	ee07 3a90 	vmov	s15, r3
 800cdd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cf58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cde2:	4b59      	ldr	r3, [pc, #356]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cde4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cde6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdf2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdf6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce02:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce0e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce12:	e043      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce14:	697b      	ldr	r3, [r7, #20]
 800ce16:	ee07 3a90 	vmov	s15, r3
 800ce1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce1e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800cf5c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800ce22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce26:	4b48      	ldr	r3, [pc, #288]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce2e:	ee07 3a90 	vmov	s15, r3
 800ce32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce36:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce3a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce46:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce52:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce56:	e021      	b.n	800ce9c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800ce58:	697b      	ldr	r3, [r7, #20]
 800ce5a:	ee07 3a90 	vmov	s15, r3
 800ce5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce62:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cf58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800ce66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ce6a:	4b37      	ldr	r3, [pc, #220]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce72:	ee07 3a90 	vmov	s15, r3
 800ce76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce7a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce7e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cf50 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce96:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ce9a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800ce9c:	4b2a      	ldr	r3, [pc, #168]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cea0:	0a5b      	lsrs	r3, r3, #9
 800cea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cea6:	ee07 3a90 	vmov	s15, r3
 800ceaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ceae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ceb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ceb6:	edd7 6a07 	vldr	s13, [r7, #28]
 800ceba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cec2:	ee17 2a90 	vmov	r2, s15
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800ceca:	4b1f      	ldr	r3, [pc, #124]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cece:	0c1b      	lsrs	r3, r3, #16
 800ced0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ced4:	ee07 3a90 	vmov	s15, r3
 800ced8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cedc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cee0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cee4:	edd7 6a07 	vldr	s13, [r7, #28]
 800cee8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cef0:	ee17 2a90 	vmov	r2, s15
 800cef4:	687b      	ldr	r3, [r7, #4]
 800cef6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800cef8:	4b13      	ldr	r3, [pc, #76]	; (800cf48 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cefa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cefc:	0e1b      	lsrs	r3, r3, #24
 800cefe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cf02:	ee07 3a90 	vmov	s15, r3
 800cf06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800cf0e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cf12:	edd7 6a07 	vldr	s13, [r7, #28]
 800cf16:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cf1a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cf1e:	ee17 2a90 	vmov	r2, s15
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800cf26:	e008      	b.n	800cf3a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	2200      	movs	r2, #0
 800cf32:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	2200      	movs	r2, #0
 800cf38:	609a      	str	r2, [r3, #8]
}
 800cf3a:	bf00      	nop
 800cf3c:	3724      	adds	r7, #36	; 0x24
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	58024400 	.word	0x58024400
 800cf4c:	03d09000 	.word	0x03d09000
 800cf50:	46000000 	.word	0x46000000
 800cf54:	4c742400 	.word	0x4c742400
 800cf58:	4a742400 	.word	0x4a742400
 800cf5c:	4af42400 	.word	0x4af42400

0800cf60 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800cf60:	b480      	push	{r7}
 800cf62:	b089      	sub	sp, #36	; 0x24
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cf68:	4ba1      	ldr	r3, [pc, #644]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf6c:	f003 0303 	and.w	r3, r3, #3
 800cf70:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800cf72:	4b9f      	ldr	r3, [pc, #636]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf76:	0d1b      	lsrs	r3, r3, #20
 800cf78:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf7c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf7e:	4b9c      	ldr	r3, [pc, #624]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf82:	0a1b      	lsrs	r3, r3, #8
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800cf8a:	4b99      	ldr	r3, [pc, #612]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf8e:	08db      	lsrs	r3, r3, #3
 800cf90:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf94:	693a      	ldr	r2, [r7, #16]
 800cf96:	fb02 f303 	mul.w	r3, r2, r3
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfa2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cfa6:	697b      	ldr	r3, [r7, #20]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	f000 8111 	beq.w	800d1d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cfae:	69bb      	ldr	r3, [r7, #24]
 800cfb0:	2b02      	cmp	r3, #2
 800cfb2:	f000 8083 	beq.w	800d0bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cfb6:	69bb      	ldr	r3, [r7, #24]
 800cfb8:	2b02      	cmp	r3, #2
 800cfba:	f200 80a1 	bhi.w	800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cfbe:	69bb      	ldr	r3, [r7, #24]
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d003      	beq.n	800cfcc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cfc4:	69bb      	ldr	r3, [r7, #24]
 800cfc6:	2b01      	cmp	r3, #1
 800cfc8:	d056      	beq.n	800d078 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cfca:	e099      	b.n	800d100 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cfcc:	4b88      	ldr	r3, [pc, #544]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f003 0320 	and.w	r3, r3, #32
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d02d      	beq.n	800d034 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800cfd8:	4b85      	ldr	r3, [pc, #532]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfda:	681b      	ldr	r3, [r3, #0]
 800cfdc:	08db      	lsrs	r3, r3, #3
 800cfde:	f003 0303 	and.w	r3, r3, #3
 800cfe2:	4a84      	ldr	r2, [pc, #528]	; (800d1f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cfe4:	fa22 f303 	lsr.w	r3, r2, r3
 800cfe8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800cfea:	68bb      	ldr	r3, [r7, #8]
 800cfec:	ee07 3a90 	vmov	s15, r3
 800cff0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cff4:	697b      	ldr	r3, [r7, #20]
 800cff6:	ee07 3a90 	vmov	s15, r3
 800cffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cffe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d002:	4b7b      	ldr	r3, [pc, #492]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d006:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d00a:	ee07 3a90 	vmov	s15, r3
 800d00e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d012:	ed97 6a03 	vldr	s12, [r7, #12]
 800d016:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d01a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d01e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d022:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d026:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d02a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d02e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d032:	e087      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d034:	697b      	ldr	r3, [r7, #20]
 800d036:	ee07 3a90 	vmov	s15, r3
 800d03a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d1fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d042:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d046:	4b6a      	ldr	r3, [pc, #424]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d04a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d04e:	ee07 3a90 	vmov	s15, r3
 800d052:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d056:	ed97 6a03 	vldr	s12, [r7, #12]
 800d05a:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d05e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d062:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d066:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d06a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d072:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d076:	e065      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d078:	697b      	ldr	r3, [r7, #20]
 800d07a:	ee07 3a90 	vmov	s15, r3
 800d07e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d082:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d086:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d08a:	4b59      	ldr	r3, [pc, #356]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d08c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d08e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d09a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d09e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0ba:	e043      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	ee07 3a90 	vmov	s15, r3
 800d0c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d204 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d0ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0ce:	4b48      	ldr	r3, [pc, #288]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0d6:	ee07 3a90 	vmov	s15, r3
 800d0da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0de:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0fa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d0fe:	e021      	b.n	800d144 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800d100:	697b      	ldr	r3, [r7, #20]
 800d102:	ee07 3a90 	vmov	s15, r3
 800d106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d10a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d200 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d10e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d112:	4b37      	ldr	r3, [pc, #220]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d116:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d11a:	ee07 3a90 	vmov	s15, r3
 800d11e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d122:	ed97 6a03 	vldr	s12, [r7, #12]
 800d126:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d1f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d12a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d12e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d136:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d13a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d13e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800d142:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800d144:	4b2a      	ldr	r3, [pc, #168]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d148:	0a5b      	lsrs	r3, r3, #9
 800d14a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d14e:	ee07 3a90 	vmov	s15, r3
 800d152:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d156:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d15a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d15e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d162:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d166:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d16a:	ee17 2a90 	vmov	r2, s15
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800d172:	4b1f      	ldr	r3, [pc, #124]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d176:	0c1b      	lsrs	r3, r3, #16
 800d178:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d17c:	ee07 3a90 	vmov	s15, r3
 800d180:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d184:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d188:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d18c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d190:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d194:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d198:	ee17 2a90 	vmov	r2, s15
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800d1a0:	4b13      	ldr	r3, [pc, #76]	; (800d1f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1a4:	0e1b      	lsrs	r3, r3, #24
 800d1a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d1aa:	ee07 3a90 	vmov	s15, r3
 800d1ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d1b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d1ba:	edd7 6a07 	vldr	s13, [r7, #28]
 800d1be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d1c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d1c6:	ee17 2a90 	vmov	r2, s15
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d1ce:	e008      	b.n	800d1e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2200      	movs	r2, #0
 800d1da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	2200      	movs	r2, #0
 800d1e0:	609a      	str	r2, [r3, #8]
}
 800d1e2:	bf00      	nop
 800d1e4:	3724      	adds	r7, #36	; 0x24
 800d1e6:	46bd      	mov	sp, r7
 800d1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ec:	4770      	bx	lr
 800d1ee:	bf00      	nop
 800d1f0:	58024400 	.word	0x58024400
 800d1f4:	03d09000 	.word	0x03d09000
 800d1f8:	46000000 	.word	0x46000000
 800d1fc:	4c742400 	.word	0x4c742400
 800d200:	4a742400 	.word	0x4a742400
 800d204:	4af42400 	.word	0x4af42400

0800d208 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b084      	sub	sp, #16
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d212:	2300      	movs	r3, #0
 800d214:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d216:	4b53      	ldr	r3, [pc, #332]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d21a:	f003 0303 	and.w	r3, r3, #3
 800d21e:	2b03      	cmp	r3, #3
 800d220:	d101      	bne.n	800d226 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d222:	2301      	movs	r3, #1
 800d224:	e099      	b.n	800d35a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d226:	4b4f      	ldr	r3, [pc, #316]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	4a4e      	ldr	r2, [pc, #312]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d22c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d230:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d232:	f7fa faa5 	bl	8007780 <HAL_GetTick>
 800d236:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d238:	e008      	b.n	800d24c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d23a:	f7fa faa1 	bl	8007780 <HAL_GetTick>
 800d23e:	4602      	mov	r2, r0
 800d240:	68bb      	ldr	r3, [r7, #8]
 800d242:	1ad3      	subs	r3, r2, r3
 800d244:	2b02      	cmp	r3, #2
 800d246:	d901      	bls.n	800d24c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d248:	2303      	movs	r3, #3
 800d24a:	e086      	b.n	800d35a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d24c:	4b45      	ldr	r3, [pc, #276]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d24e:	681b      	ldr	r3, [r3, #0]
 800d250:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d1f0      	bne.n	800d23a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d258:	4b42      	ldr	r3, [pc, #264]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d25a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d25c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	031b      	lsls	r3, r3, #12
 800d266:	493f      	ldr	r1, [pc, #252]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d268:	4313      	orrs	r3, r2
 800d26a:	628b      	str	r3, [r1, #40]	; 0x28
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	685b      	ldr	r3, [r3, #4]
 800d270:	3b01      	subs	r3, #1
 800d272:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	3b01      	subs	r3, #1
 800d27c:	025b      	lsls	r3, r3, #9
 800d27e:	b29b      	uxth	r3, r3
 800d280:	431a      	orrs	r2, r3
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	68db      	ldr	r3, [r3, #12]
 800d286:	3b01      	subs	r3, #1
 800d288:	041b      	lsls	r3, r3, #16
 800d28a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d28e:	431a      	orrs	r2, r3
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	691b      	ldr	r3, [r3, #16]
 800d294:	3b01      	subs	r3, #1
 800d296:	061b      	lsls	r3, r3, #24
 800d298:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d29c:	4931      	ldr	r1, [pc, #196]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d29e:	4313      	orrs	r3, r2
 800d2a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d2a2:	4b30      	ldr	r3, [pc, #192]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	695b      	ldr	r3, [r3, #20]
 800d2ae:	492d      	ldr	r1, [pc, #180]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d2b4:	4b2b      	ldr	r3, [pc, #172]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b8:	f023 0220 	bic.w	r2, r3, #32
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	699b      	ldr	r3, [r3, #24]
 800d2c0:	4928      	ldr	r1, [pc, #160]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2c2:	4313      	orrs	r3, r2
 800d2c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d2c6:	4b27      	ldr	r3, [pc, #156]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	4a26      	ldr	r2, [pc, #152]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2cc:	f023 0310 	bic.w	r3, r3, #16
 800d2d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d2d2:	4b24      	ldr	r3, [pc, #144]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d2d6:	4b24      	ldr	r3, [pc, #144]	; (800d368 <RCCEx_PLL2_Config+0x160>)
 800d2d8:	4013      	ands	r3, r2
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	69d2      	ldr	r2, [r2, #28]
 800d2de:	00d2      	lsls	r2, r2, #3
 800d2e0:	4920      	ldr	r1, [pc, #128]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2e2:	4313      	orrs	r3, r2
 800d2e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d2e6:	4b1f      	ldr	r3, [pc, #124]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ea:	4a1e      	ldr	r2, [pc, #120]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2ec:	f043 0310 	orr.w	r3, r3, #16
 800d2f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d2f2:	683b      	ldr	r3, [r7, #0]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	d106      	bne.n	800d306 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d2f8:	4b1a      	ldr	r3, [pc, #104]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2fc:	4a19      	ldr	r2, [pc, #100]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d2fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d302:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d304:	e00f      	b.n	800d326 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d306:	683b      	ldr	r3, [r7, #0]
 800d308:	2b01      	cmp	r3, #1
 800d30a:	d106      	bne.n	800d31a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d30c:	4b15      	ldr	r3, [pc, #84]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d30e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d310:	4a14      	ldr	r2, [pc, #80]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d312:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d316:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d318:	e005      	b.n	800d326 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d31a:	4b12      	ldr	r3, [pc, #72]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d31c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d31e:	4a11      	ldr	r2, [pc, #68]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d320:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d324:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d326:	4b0f      	ldr	r3, [pc, #60]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	4a0e      	ldr	r2, [pc, #56]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d32c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d330:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d332:	f7fa fa25 	bl	8007780 <HAL_GetTick>
 800d336:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d338:	e008      	b.n	800d34c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800d33a:	f7fa fa21 	bl	8007780 <HAL_GetTick>
 800d33e:	4602      	mov	r2, r0
 800d340:	68bb      	ldr	r3, [r7, #8]
 800d342:	1ad3      	subs	r3, r2, r3
 800d344:	2b02      	cmp	r3, #2
 800d346:	d901      	bls.n	800d34c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d348:	2303      	movs	r3, #3
 800d34a:	e006      	b.n	800d35a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d34c:	4b05      	ldr	r3, [pc, #20]	; (800d364 <RCCEx_PLL2_Config+0x15c>)
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d354:	2b00      	cmp	r3, #0
 800d356:	d0f0      	beq.n	800d33a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d358:	7bfb      	ldrb	r3, [r7, #15]
}
 800d35a:	4618      	mov	r0, r3
 800d35c:	3710      	adds	r7, #16
 800d35e:	46bd      	mov	sp, r7
 800d360:	bd80      	pop	{r7, pc}
 800d362:	bf00      	nop
 800d364:	58024400 	.word	0x58024400
 800d368:	ffff0007 	.word	0xffff0007

0800d36c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d36c:	b580      	push	{r7, lr}
 800d36e:	b084      	sub	sp, #16
 800d370:	af00      	add	r7, sp, #0
 800d372:	6078      	str	r0, [r7, #4]
 800d374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d376:	2300      	movs	r3, #0
 800d378:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d37a:	4b53      	ldr	r3, [pc, #332]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d37c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d37e:	f003 0303 	and.w	r3, r3, #3
 800d382:	2b03      	cmp	r3, #3
 800d384:	d101      	bne.n	800d38a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	e099      	b.n	800d4be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d38a:	4b4f      	ldr	r3, [pc, #316]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	4a4e      	ldr	r2, [pc, #312]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d390:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d394:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d396:	f7fa f9f3 	bl	8007780 <HAL_GetTick>
 800d39a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d39c:	e008      	b.n	800d3b0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d39e:	f7fa f9ef 	bl	8007780 <HAL_GetTick>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	1ad3      	subs	r3, r2, r3
 800d3a8:	2b02      	cmp	r3, #2
 800d3aa:	d901      	bls.n	800d3b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d3ac:	2303      	movs	r3, #3
 800d3ae:	e086      	b.n	800d4be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d3b0:	4b45      	ldr	r3, [pc, #276]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d3b2:	681b      	ldr	r3, [r3, #0]
 800d3b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d1f0      	bne.n	800d39e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d3bc:	4b42      	ldr	r3, [pc, #264]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d3be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d3c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	051b      	lsls	r3, r3, #20
 800d3ca:	493f      	ldr	r1, [pc, #252]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d3cc:	4313      	orrs	r3, r2
 800d3ce:	628b      	str	r3, [r1, #40]	; 0x28
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	685b      	ldr	r3, [r3, #4]
 800d3d4:	3b01      	subs	r3, #1
 800d3d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	689b      	ldr	r3, [r3, #8]
 800d3de:	3b01      	subs	r3, #1
 800d3e0:	025b      	lsls	r3, r3, #9
 800d3e2:	b29b      	uxth	r3, r3
 800d3e4:	431a      	orrs	r2, r3
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	68db      	ldr	r3, [r3, #12]
 800d3ea:	3b01      	subs	r3, #1
 800d3ec:	041b      	lsls	r3, r3, #16
 800d3ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d3f2:	431a      	orrs	r2, r3
 800d3f4:	687b      	ldr	r3, [r7, #4]
 800d3f6:	691b      	ldr	r3, [r3, #16]
 800d3f8:	3b01      	subs	r3, #1
 800d3fa:	061b      	lsls	r3, r3, #24
 800d3fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d400:	4931      	ldr	r1, [pc, #196]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d402:	4313      	orrs	r3, r2
 800d404:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d406:	4b30      	ldr	r3, [pc, #192]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	492d      	ldr	r1, [pc, #180]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d414:	4313      	orrs	r3, r2
 800d416:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d418:	4b2b      	ldr	r3, [pc, #172]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d41a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	699b      	ldr	r3, [r3, #24]
 800d424:	4928      	ldr	r1, [pc, #160]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d426:	4313      	orrs	r3, r2
 800d428:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d42a:	4b27      	ldr	r3, [pc, #156]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d42c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d42e:	4a26      	ldr	r2, [pc, #152]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d430:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d434:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d436:	4b24      	ldr	r3, [pc, #144]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d438:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d43a:	4b24      	ldr	r3, [pc, #144]	; (800d4cc <RCCEx_PLL3_Config+0x160>)
 800d43c:	4013      	ands	r3, r2
 800d43e:	687a      	ldr	r2, [r7, #4]
 800d440:	69d2      	ldr	r2, [r2, #28]
 800d442:	00d2      	lsls	r2, r2, #3
 800d444:	4920      	ldr	r1, [pc, #128]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d446:	4313      	orrs	r3, r2
 800d448:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d44a:	4b1f      	ldr	r3, [pc, #124]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d44c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44e:	4a1e      	ldr	r2, [pc, #120]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d450:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d454:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800d456:	683b      	ldr	r3, [r7, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d106      	bne.n	800d46a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d45c:	4b1a      	ldr	r3, [pc, #104]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d45e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d460:	4a19      	ldr	r2, [pc, #100]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d462:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d466:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d468:	e00f      	b.n	800d48a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	2b01      	cmp	r3, #1
 800d46e:	d106      	bne.n	800d47e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d470:	4b15      	ldr	r3, [pc, #84]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d474:	4a14      	ldr	r2, [pc, #80]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d476:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d47a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d47c:	e005      	b.n	800d48a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d47e:	4b12      	ldr	r3, [pc, #72]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d482:	4a11      	ldr	r2, [pc, #68]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d484:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d488:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d48a:	4b0f      	ldr	r3, [pc, #60]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	4a0e      	ldr	r2, [pc, #56]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d490:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d494:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d496:	f7fa f973 	bl	8007780 <HAL_GetTick>
 800d49a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d49c:	e008      	b.n	800d4b0 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800d49e:	f7fa f96f 	bl	8007780 <HAL_GetTick>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	68bb      	ldr	r3, [r7, #8]
 800d4a6:	1ad3      	subs	r3, r2, r3
 800d4a8:	2b02      	cmp	r3, #2
 800d4aa:	d901      	bls.n	800d4b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d4ac:	2303      	movs	r3, #3
 800d4ae:	e006      	b.n	800d4be <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d4b0:	4b05      	ldr	r3, [pc, #20]	; (800d4c8 <RCCEx_PLL3_Config+0x15c>)
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d0f0      	beq.n	800d49e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d4bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4be:	4618      	mov	r0, r3
 800d4c0:	3710      	adds	r7, #16
 800d4c2:	46bd      	mov	sp, r7
 800d4c4:	bd80      	pop	{r7, pc}
 800d4c6:	bf00      	nop
 800d4c8:	58024400 	.word	0x58024400
 800d4cc:	ffff0007 	.word	0xffff0007

0800d4d0 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b084      	sub	sp, #16
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d101      	bne.n	800d4e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d4de:	2301      	movs	r3, #1
 800d4e0:	e0f1      	b.n	800d6c6 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	681b      	ldr	r3, [r3, #0]
 800d4ec:	4a78      	ldr	r2, [pc, #480]	; (800d6d0 <HAL_SPI_Init+0x200>)
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	d00f      	beq.n	800d512 <HAL_SPI_Init+0x42>
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	4a77      	ldr	r2, [pc, #476]	; (800d6d4 <HAL_SPI_Init+0x204>)
 800d4f8:	4293      	cmp	r3, r2
 800d4fa:	d00a      	beq.n	800d512 <HAL_SPI_Init+0x42>
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	4a75      	ldr	r2, [pc, #468]	; (800d6d8 <HAL_SPI_Init+0x208>)
 800d502:	4293      	cmp	r3, r2
 800d504:	d005      	beq.n	800d512 <HAL_SPI_Init+0x42>
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	2b0f      	cmp	r3, #15
 800d50c:	d901      	bls.n	800d512 <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800d50e:	2301      	movs	r3, #1
 800d510:	e0d9      	b.n	800d6c6 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800d512:	6878      	ldr	r0, [r7, #4]
 800d514:	f000 fba2 	bl	800dc5c <SPI_GetPacketSize>
 800d518:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	4a6c      	ldr	r2, [pc, #432]	; (800d6d0 <HAL_SPI_Init+0x200>)
 800d520:	4293      	cmp	r3, r2
 800d522:	d00c      	beq.n	800d53e <HAL_SPI_Init+0x6e>
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	4a6a      	ldr	r2, [pc, #424]	; (800d6d4 <HAL_SPI_Init+0x204>)
 800d52a:	4293      	cmp	r3, r2
 800d52c:	d007      	beq.n	800d53e <HAL_SPI_Init+0x6e>
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	4a69      	ldr	r2, [pc, #420]	; (800d6d8 <HAL_SPI_Init+0x208>)
 800d534:	4293      	cmp	r3, r2
 800d536:	d002      	beq.n	800d53e <HAL_SPI_Init+0x6e>
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	2b08      	cmp	r3, #8
 800d53c:	d811      	bhi.n	800d562 <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d53e:	687b      	ldr	r3, [r7, #4]
 800d540:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800d542:	4a63      	ldr	r2, [pc, #396]	; (800d6d0 <HAL_SPI_Init+0x200>)
 800d544:	4293      	cmp	r3, r2
 800d546:	d009      	beq.n	800d55c <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	4a61      	ldr	r2, [pc, #388]	; (800d6d4 <HAL_SPI_Init+0x204>)
 800d54e:	4293      	cmp	r3, r2
 800d550:	d004      	beq.n	800d55c <HAL_SPI_Init+0x8c>
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	4a60      	ldr	r2, [pc, #384]	; (800d6d8 <HAL_SPI_Init+0x208>)
 800d558:	4293      	cmp	r3, r2
 800d55a:	d104      	bne.n	800d566 <HAL_SPI_Init+0x96>
 800d55c:	68fb      	ldr	r3, [r7, #12]
 800d55e:	2b10      	cmp	r3, #16
 800d560:	d901      	bls.n	800d566 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800d562:	2301      	movs	r3, #1
 800d564:	e0af      	b.n	800d6c6 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	2b00      	cmp	r3, #0
 800d570:	d106      	bne.n	800d580 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	2200      	movs	r2, #0
 800d576:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d57a:	6878      	ldr	r0, [r7, #4]
 800d57c:	f7f9 fe08 	bl	8007190 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2202      	movs	r2, #2
 800d584:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	f022 0201 	bic.w	r2, r2, #1
 800d596:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	689b      	ldr	r3, [r3, #8]
 800d59e:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800d5a2:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	699b      	ldr	r3, [r3, #24]
 800d5a8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d5ac:	d119      	bne.n	800d5e2 <HAL_SPI_Init+0x112>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	685b      	ldr	r3, [r3, #4]
 800d5b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d5b6:	d103      	bne.n	800d5c0 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800d5bc:	2b00      	cmp	r3, #0
 800d5be:	d008      	beq.n	800d5d2 <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d10c      	bne.n	800d5e2 <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800d5cc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d5d0:	d107      	bne.n	800d5e2 <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800d5d2:	687b      	ldr	r3, [r7, #4]
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	681a      	ldr	r2, [r3, #0]
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	681b      	ldr	r3, [r3, #0]
 800d5dc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800d5e0:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	69da      	ldr	r2, [r3, #28]
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5ea:	431a      	orrs	r2, r3
 800d5ec:	68bb      	ldr	r3, [r7, #8]
 800d5ee:	431a      	orrs	r2, r3
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5f4:	ea42 0103 	orr.w	r1, r2, r3
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	68da      	ldr	r2, [r3, #12]
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	430a      	orrs	r2, r1
 800d602:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d60c:	431a      	orrs	r2, r3
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d612:	431a      	orrs	r2, r3
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	699b      	ldr	r3, [r3, #24]
 800d618:	431a      	orrs	r2, r3
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	691b      	ldr	r3, [r3, #16]
 800d61e:	431a      	orrs	r2, r3
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	695b      	ldr	r3, [r3, #20]
 800d624:	431a      	orrs	r2, r3
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	6a1b      	ldr	r3, [r3, #32]
 800d62a:	431a      	orrs	r2, r3
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	685b      	ldr	r3, [r3, #4]
 800d630:	431a      	orrs	r2, r3
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d636:	431a      	orrs	r2, r3
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	689b      	ldr	r3, [r3, #8]
 800d63c:	431a      	orrs	r2, r3
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d642:	ea42 0103 	orr.w	r1, r2, r3
 800d646:	687b      	ldr	r3, [r7, #4]
 800d648:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	681b      	ldr	r3, [r3, #0]
 800d64e:	430a      	orrs	r2, r1
 800d650:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800d652:	687b      	ldr	r3, [r7, #4]
 800d654:	685b      	ldr	r3, [r3, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d113      	bne.n	800d682 <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	689b      	ldr	r3, [r3, #8]
 800d660:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d66c:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	689b      	ldr	r3, [r3, #8]
 800d674:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	681b      	ldr	r3, [r3, #0]
 800d67c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800d680:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	f022 0201 	bic.w	r2, r2, #1
 800d690:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	685b      	ldr	r3, [r3, #4]
 800d696:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d00a      	beq.n	800d6b4 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	68db      	ldr	r3, [r3, #12]
 800d6a4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	430a      	orrs	r2, r1
 800d6b2:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2201      	movs	r2, #1
 800d6c0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800d6c4:	2300      	movs	r3, #0
}
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	3710      	adds	r7, #16
 800d6ca:	46bd      	mov	sp, r7
 800d6cc:	bd80      	pop	{r7, pc}
 800d6ce:	bf00      	nop
 800d6d0:	40013000 	.word	0x40013000
 800d6d4:	40003800 	.word	0x40003800
 800d6d8:	40003c00 	.word	0x40003c00

0800d6dc <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d6dc:	b580      	push	{r7, lr}
 800d6de:	b08a      	sub	sp, #40	; 0x28
 800d6e0:	af02      	add	r7, sp, #8
 800d6e2:	60f8      	str	r0, [r7, #12]
 800d6e4:	60b9      	str	r1, [r7, #8]
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	4613      	mov	r3, r2
 800d6ea:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800d6ec:	68fb      	ldr	r3, [r7, #12]
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	3320      	adds	r3, #32
 800d6f2:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800d6fe:	2b01      	cmp	r3, #1
 800d700:	d101      	bne.n	800d706 <HAL_SPI_Transmit+0x2a>
 800d702:	2302      	movs	r3, #2
 800d704:	e1d7      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
 800d706:	68fb      	ldr	r3, [r7, #12]
 800d708:	2201      	movs	r2, #1
 800d70a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800d70e:	f7fa f837 	bl	8007780 <HAL_GetTick>
 800d712:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800d71a:	b2db      	uxtb	r3, r3
 800d71c:	2b01      	cmp	r3, #1
 800d71e:	d007      	beq.n	800d730 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800d720:	2302      	movs	r3, #2
 800d722:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2200      	movs	r2, #0
 800d728:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d72c:	7efb      	ldrb	r3, [r7, #27]
 800d72e:	e1c2      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800d730:	68bb      	ldr	r3, [r7, #8]
 800d732:	2b00      	cmp	r3, #0
 800d734:	d002      	beq.n	800d73c <HAL_SPI_Transmit+0x60>
 800d736:	88fb      	ldrh	r3, [r7, #6]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d107      	bne.n	800d74c <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800d73c:	2301      	movs	r3, #1
 800d73e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800d748:	7efb      	ldrb	r3, [r7, #27]
 800d74a:	e1b4      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800d74c:	68fb      	ldr	r3, [r7, #12]
 800d74e:	2203      	movs	r2, #3
 800d750:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800d754:	68fb      	ldr	r3, [r7, #12]
 800d756:	2200      	movs	r2, #0
 800d758:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800d75c:	68fb      	ldr	r3, [r7, #12]
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	88fa      	ldrh	r2, [r7, #6]
 800d766:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	88fa      	ldrh	r2, [r7, #6]
 800d76e:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800d772:	68fb      	ldr	r3, [r7, #12]
 800d774:	2200      	movs	r2, #0
 800d776:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	2200      	movs	r2, #0
 800d77c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	2200      	movs	r2, #0
 800d784:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800d78e:	68fb      	ldr	r3, [r7, #12]
 800d790:	2200      	movs	r2, #0
 800d792:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	689b      	ldr	r3, [r3, #8]
 800d798:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800d79c:	d107      	bne.n	800d7ae <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800d79e:	68fb      	ldr	r3, [r7, #12]
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	681a      	ldr	r2, [r3, #0]
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d7ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	681b      	ldr	r3, [r3, #0]
 800d7b2:	685a      	ldr	r2, [r3, #4]
 800d7b4:	4b96      	ldr	r3, [pc, #600]	; (800da10 <HAL_SPI_Transmit+0x334>)
 800d7b6:	4013      	ands	r3, r2
 800d7b8:	88f9      	ldrh	r1, [r7, #6]
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	6812      	ldr	r2, [r2, #0]
 800d7be:	430b      	orrs	r3, r1
 800d7c0:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	681a      	ldr	r2, [r3, #0]
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	f042 0201 	orr.w	r2, r2, #1
 800d7d0:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800d7d2:	68fb      	ldr	r3, [r7, #12]
 800d7d4:	685b      	ldr	r3, [r3, #4]
 800d7d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d7da:	d107      	bne.n	800d7ec <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	681b      	ldr	r3, [r3, #0]
 800d7e0:	681a      	ldr	r2, [r3, #0]
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d7ea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	68db      	ldr	r3, [r3, #12]
 800d7f0:	2b0f      	cmp	r3, #15
 800d7f2:	d947      	bls.n	800d884 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d7f4:	e03f      	b.n	800d876 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	f003 0302 	and.w	r3, r3, #2
 800d800:	2b02      	cmp	r3, #2
 800d802:	d114      	bne.n	800d82e <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d804:	68fb      	ldr	r3, [r7, #12]
 800d806:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	6812      	ldr	r2, [r2, #0]
 800d80e:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d814:	1d1a      	adds	r2, r3, #4
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800d81a:	68fb      	ldr	r3, [r7, #12]
 800d81c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d820:	b29b      	uxth	r3, r3
 800d822:	3b01      	subs	r3, #1
 800d824:	b29a      	uxth	r2, r3
 800d826:	68fb      	ldr	r3, [r7, #12]
 800d828:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d82c:	e023      	b.n	800d876 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d82e:	f7f9 ffa7 	bl	8007780 <HAL_GetTick>
 800d832:	4602      	mov	r2, r0
 800d834:	697b      	ldr	r3, [r7, #20]
 800d836:	1ad3      	subs	r3, r2, r3
 800d838:	683a      	ldr	r2, [r7, #0]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d803      	bhi.n	800d846 <HAL_SPI_Transmit+0x16a>
 800d83e:	683b      	ldr	r3, [r7, #0]
 800d840:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d844:	d102      	bne.n	800d84c <HAL_SPI_Transmit+0x170>
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d114      	bne.n	800d876 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d84c:	68f8      	ldr	r0, [r7, #12]
 800d84e:	f000 f937 	bl	800dac0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d852:	68fb      	ldr	r3, [r7, #12]
 800d854:	2200      	movs	r2, #0
 800d856:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d860:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d864:	68fb      	ldr	r3, [r7, #12]
 800d866:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d86a:	68fb      	ldr	r3, [r7, #12]
 800d86c:	2201      	movs	r2, #1
 800d86e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d872:	2303      	movs	r3, #3
 800d874:	e11f      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d876:	68fb      	ldr	r3, [r7, #12]
 800d878:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d87c:	b29b      	uxth	r3, r3
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d1b9      	bne.n	800d7f6 <HAL_SPI_Transmit+0x11a>
 800d882:	e0f2      	b.n	800da6a <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	68db      	ldr	r3, [r3, #12]
 800d888:	2b07      	cmp	r3, #7
 800d88a:	f240 80e7 	bls.w	800da5c <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800d88e:	e05d      	b.n	800d94c <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	695b      	ldr	r3, [r3, #20]
 800d896:	f003 0302 	and.w	r3, r3, #2
 800d89a:	2b02      	cmp	r3, #2
 800d89c:	d132      	bne.n	800d904 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8a4:	b29b      	uxth	r3, r3
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	d918      	bls.n	800d8dc <HAL_SPI_Transmit+0x200>
 800d8aa:	68fb      	ldr	r3, [r7, #12]
 800d8ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d014      	beq.n	800d8dc <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d8b2:	68fb      	ldr	r3, [r7, #12]
 800d8b4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	681b      	ldr	r3, [r3, #0]
 800d8ba:	6812      	ldr	r2, [r2, #0]
 800d8bc:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d8be:	68fb      	ldr	r3, [r7, #12]
 800d8c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8c2:	1d1a      	adds	r2, r3, #4
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d8c8:	68fb      	ldr	r3, [r7, #12]
 800d8ca:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8ce:	b29b      	uxth	r3, r3
 800d8d0:	3b02      	subs	r3, #2
 800d8d2:	b29a      	uxth	r2, r3
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d8da:	e037      	b.n	800d94c <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8e0:	881a      	ldrh	r2, [r3, #0]
 800d8e2:	69fb      	ldr	r3, [r7, #28]
 800d8e4:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d8e6:	68fb      	ldr	r3, [r7, #12]
 800d8e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d8ea:	1c9a      	adds	r2, r3, #2
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d8f6:	b29b      	uxth	r3, r3
 800d8f8:	3b01      	subs	r3, #1
 800d8fa:	b29a      	uxth	r2, r3
 800d8fc:	68fb      	ldr	r3, [r7, #12]
 800d8fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d902:	e023      	b.n	800d94c <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800d904:	f7f9 ff3c 	bl	8007780 <HAL_GetTick>
 800d908:	4602      	mov	r2, r0
 800d90a:	697b      	ldr	r3, [r7, #20]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	683a      	ldr	r2, [r7, #0]
 800d910:	429a      	cmp	r2, r3
 800d912:	d803      	bhi.n	800d91c <HAL_SPI_Transmit+0x240>
 800d914:	683b      	ldr	r3, [r7, #0]
 800d916:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d91a:	d102      	bne.n	800d922 <HAL_SPI_Transmit+0x246>
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d114      	bne.n	800d94c <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800d922:	68f8      	ldr	r0, [r7, #12]
 800d924:	f000 f8cc 	bl	800dac0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800d928:	68fb      	ldr	r3, [r7, #12]
 800d92a:	2200      	movs	r2, #0
 800d92c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800d930:	68fb      	ldr	r3, [r7, #12]
 800d932:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d936:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d93a:	68fb      	ldr	r3, [r7, #12]
 800d93c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800d940:	68fb      	ldr	r3, [r7, #12]
 800d942:	2201      	movs	r2, #1
 800d944:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800d948:	2303      	movs	r3, #3
 800d94a:	e0b4      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d952:	b29b      	uxth	r3, r3
 800d954:	2b00      	cmp	r3, #0
 800d956:	d19b      	bne.n	800d890 <HAL_SPI_Transmit+0x1b4>
 800d958:	e087      	b.n	800da6a <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	695b      	ldr	r3, [r3, #20]
 800d960:	f003 0302 	and.w	r3, r3, #2
 800d964:	2b02      	cmp	r3, #2
 800d966:	d155      	bne.n	800da14 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d96e:	b29b      	uxth	r3, r3
 800d970:	2b03      	cmp	r3, #3
 800d972:	d918      	bls.n	800d9a6 <HAL_SPI_Transmit+0x2ca>
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d978:	2b40      	cmp	r3, #64	; 0x40
 800d97a:	d914      	bls.n	800d9a6 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	6812      	ldr	r2, [r2, #0]
 800d986:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d98c:	1d1a      	adds	r2, r3, #4
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d998:	b29b      	uxth	r3, r3
 800d99a:	3b04      	subs	r3, #4
 800d99c:	b29a      	uxth	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d9a4:	e05a      	b.n	800da5c <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9ac:	b29b      	uxth	r3, r3
 800d9ae:	2b01      	cmp	r3, #1
 800d9b0:	d917      	bls.n	800d9e2 <HAL_SPI_Transmit+0x306>
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d013      	beq.n	800d9e2 <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800d9ba:	68fb      	ldr	r3, [r7, #12]
 800d9bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9be:	881a      	ldrh	r2, [r3, #0]
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800d9c4:	68fb      	ldr	r3, [r7, #12]
 800d9c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9c8:	1c9a      	adds	r2, r3, #2
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800d9d4:	b29b      	uxth	r3, r3
 800d9d6:	3b02      	subs	r3, #2
 800d9d8:	b29a      	uxth	r2, r3
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800d9e0:	e03c      	b.n	800da5c <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800d9e6:	68fb      	ldr	r3, [r7, #12]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	3320      	adds	r3, #32
 800d9ec:	7812      	ldrb	r2, [r2, #0]
 800d9ee:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d9f4:	1c5a      	adds	r2, r3, #1
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800d9fa:	68fb      	ldr	r3, [r7, #12]
 800d9fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da00:	b29b      	uxth	r3, r3
 800da02:	3b01      	subs	r3, #1
 800da04:	b29a      	uxth	r2, r3
 800da06:	68fb      	ldr	r3, [r7, #12]
 800da08:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800da0c:	e026      	b.n	800da5c <HAL_SPI_Transmit+0x380>
 800da0e:	bf00      	nop
 800da10:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800da14:	f7f9 feb4 	bl	8007780 <HAL_GetTick>
 800da18:	4602      	mov	r2, r0
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	1ad3      	subs	r3, r2, r3
 800da1e:	683a      	ldr	r2, [r7, #0]
 800da20:	429a      	cmp	r2, r3
 800da22:	d803      	bhi.n	800da2c <HAL_SPI_Transmit+0x350>
 800da24:	683b      	ldr	r3, [r7, #0]
 800da26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800da2a:	d102      	bne.n	800da32 <HAL_SPI_Transmit+0x356>
 800da2c:	683b      	ldr	r3, [r7, #0]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d114      	bne.n	800da5c <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800da32:	68f8      	ldr	r0, [r7, #12]
 800da34:	f000 f844 	bl	800dac0 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2200      	movs	r2, #0
 800da3c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da46:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800da4a:	68fb      	ldr	r3, [r7, #12]
 800da4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	2201      	movs	r2, #1
 800da54:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800da58:	2303      	movs	r3, #3
 800da5a:	e02c      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800da5c:	68fb      	ldr	r3, [r7, #12]
 800da5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800da62:	b29b      	uxth	r3, r3
 800da64:	2b00      	cmp	r3, #0
 800da66:	f47f af78 	bne.w	800d95a <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800da6a:	683b      	ldr	r3, [r7, #0]
 800da6c:	9300      	str	r3, [sp, #0]
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	2200      	movs	r2, #0
 800da72:	2108      	movs	r1, #8
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f000 f8c3 	bl	800dc00 <SPI_WaitOnFlagUntilTimeout>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d007      	beq.n	800da90 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800da86:	f043 0220 	orr.w	r2, r3, #32
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800da90:	68f8      	ldr	r0, [r7, #12]
 800da92:	f000 f815 	bl	800dac0 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	2200      	movs	r2, #0
 800da9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800da9e:	68fb      	ldr	r3, [r7, #12]
 800daa0:	2201      	movs	r2, #1
 800daa2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800daac:	2b00      	cmp	r3, #0
 800daae:	d001      	beq.n	800dab4 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800dab0:	2301      	movs	r3, #1
 800dab2:	e000      	b.n	800dab6 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800dab4:	7efb      	ldrb	r3, [r7, #27]
}
 800dab6:	4618      	mov	r0, r3
 800dab8:	3720      	adds	r7, #32
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}
 800dabe:	bf00      	nop

0800dac0 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800dac0:	b480      	push	{r7}
 800dac2:	b085      	sub	sp, #20
 800dac4:	af00      	add	r7, sp, #0
 800dac6:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	681b      	ldr	r3, [r3, #0]
 800dacc:	695b      	ldr	r3, [r3, #20]
 800dace:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	699a      	ldr	r2, [r3, #24]
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	f042 0208 	orr.w	r2, r2, #8
 800dade:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	681b      	ldr	r3, [r3, #0]
 800dae4:	699a      	ldr	r2, [r3, #24]
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	f042 0210 	orr.w	r2, r2, #16
 800daee:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	681a      	ldr	r2, [r3, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f022 0201 	bic.w	r2, r2, #1
 800dafe:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	6919      	ldr	r1, [r3, #16]
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	681a      	ldr	r2, [r3, #0]
 800db0a:	4b3c      	ldr	r3, [pc, #240]	; (800dbfc <SPI_CloseTransfer+0x13c>)
 800db0c:	400b      	ands	r3, r1
 800db0e:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	689a      	ldr	r2, [r3, #8]
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800db1e:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db26:	b2db      	uxtb	r3, r3
 800db28:	2b04      	cmp	r3, #4
 800db2a:	d014      	beq.n	800db56 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	f003 0320 	and.w	r3, r3, #32
 800db32:	2b00      	cmp	r3, #0
 800db34:	d00f      	beq.n	800db56 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db3c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	681b      	ldr	r3, [r3, #0]
 800db4a:	699a      	ldr	r2, [r3, #24]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	f042 0220 	orr.w	r2, r2, #32
 800db54:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800db5c:	b2db      	uxtb	r3, r3
 800db5e:	2b03      	cmp	r3, #3
 800db60:	d014      	beq.n	800db8c <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00f      	beq.n	800db8c <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db72:	f043 0204 	orr.w	r2, r3, #4
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	699a      	ldr	r2, [r3, #24]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800db8a:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800db92:	2b00      	cmp	r3, #0
 800db94:	d00f      	beq.n	800dbb6 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800db9c:	f043 0201 	orr.w	r2, r3, #1
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	699a      	ldr	r2, [r3, #24]
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800dbb4:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800dbb6:	68fb      	ldr	r3, [r7, #12]
 800dbb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d00f      	beq.n	800dbe0 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dbc6:	f043 0208 	orr.w	r2, r3, #8
 800dbca:	687b      	ldr	r3, [r7, #4]
 800dbcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	681b      	ldr	r3, [r3, #0]
 800dbd4:	699a      	ldr	r2, [r3, #24]
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dbde:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	2200      	movs	r2, #0
 800dbe4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	2200      	movs	r2, #0
 800dbec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800dbf0:	bf00      	nop
 800dbf2:	3714      	adds	r7, #20
 800dbf4:	46bd      	mov	sp, r7
 800dbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbfa:	4770      	bx	lr
 800dbfc:	fffffc90 	.word	0xfffffc90

0800dc00 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b084      	sub	sp, #16
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	60f8      	str	r0, [r7, #12]
 800dc08:	60b9      	str	r1, [r7, #8]
 800dc0a:	603b      	str	r3, [r7, #0]
 800dc0c:	4613      	mov	r3, r2
 800dc0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dc10:	e010      	b.n	800dc34 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800dc12:	f7f9 fdb5 	bl	8007780 <HAL_GetTick>
 800dc16:	4602      	mov	r2, r0
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	1ad3      	subs	r3, r2, r3
 800dc1c:	69ba      	ldr	r2, [r7, #24]
 800dc1e:	429a      	cmp	r2, r3
 800dc20:	d803      	bhi.n	800dc2a <SPI_WaitOnFlagUntilTimeout+0x2a>
 800dc22:	69bb      	ldr	r3, [r7, #24]
 800dc24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc28:	d102      	bne.n	800dc30 <SPI_WaitOnFlagUntilTimeout+0x30>
 800dc2a:	69bb      	ldr	r3, [r7, #24]
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d101      	bne.n	800dc34 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800dc30:	2303      	movs	r3, #3
 800dc32:	e00f      	b.n	800dc54 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	695a      	ldr	r2, [r3, #20]
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	4013      	ands	r3, r2
 800dc3e:	68ba      	ldr	r2, [r7, #8]
 800dc40:	429a      	cmp	r2, r3
 800dc42:	bf0c      	ite	eq
 800dc44:	2301      	moveq	r3, #1
 800dc46:	2300      	movne	r3, #0
 800dc48:	b2db      	uxtb	r3, r3
 800dc4a:	461a      	mov	r2, r3
 800dc4c:	79fb      	ldrb	r3, [r7, #7]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d0df      	beq.n	800dc12 <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800dc52:	2300      	movs	r3, #0
}
 800dc54:	4618      	mov	r0, r3
 800dc56:	3710      	adds	r7, #16
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	bd80      	pop	{r7, pc}

0800dc5c <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800dc5c:	b480      	push	{r7}
 800dc5e:	b085      	sub	sp, #20
 800dc60:	af00      	add	r7, sp, #0
 800dc62:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dc68:	095b      	lsrs	r3, r3, #5
 800dc6a:	3301      	adds	r3, #1
 800dc6c:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	68db      	ldr	r3, [r3, #12]
 800dc72:	3301      	adds	r3, #1
 800dc74:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800dc76:	68bb      	ldr	r3, [r7, #8]
 800dc78:	3307      	adds	r3, #7
 800dc7a:	08db      	lsrs	r3, r3, #3
 800dc7c:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800dc7e:	68bb      	ldr	r3, [r7, #8]
 800dc80:	68fa      	ldr	r2, [r7, #12]
 800dc82:	fb02 f303 	mul.w	r3, r2, r3
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3714      	adds	r7, #20
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc90:	4770      	bx	lr

0800dc92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800dc92:	b580      	push	{r7, lr}
 800dc94:	b082      	sub	sp, #8
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	2b00      	cmp	r3, #0
 800dc9e:	d101      	bne.n	800dca4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800dca0:	2301      	movs	r3, #1
 800dca2:	e049      	b.n	800dd38 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d106      	bne.n	800dcbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f7f9 fad5 	bl	8007268 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	2202      	movs	r2, #2
 800dcc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	681a      	ldr	r2, [r3, #0]
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	3304      	adds	r3, #4
 800dcce:	4619      	mov	r1, r3
 800dcd0:	4610      	mov	r0, r2
 800dcd2:	f000 fa23 	bl	800e11c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2201      	movs	r2, #1
 800dce2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2201      	movs	r2, #1
 800dcea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	2201      	movs	r2, #1
 800dcf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dcf6:	687b      	ldr	r3, [r7, #4]
 800dcf8:	2201      	movs	r2, #1
 800dcfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dcfe:	687b      	ldr	r3, [r7, #4]
 800dd00:	2201      	movs	r2, #1
 800dd02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2201      	movs	r2, #1
 800dd0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2201      	movs	r2, #1
 800dd12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	2201      	movs	r2, #1
 800dd1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dd1e:	687b      	ldr	r3, [r7, #4]
 800dd20:	2201      	movs	r2, #1
 800dd22:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	2201      	movs	r2, #1
 800dd2a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	2201      	movs	r2, #1
 800dd32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dd36:	2300      	movs	r3, #0
}
 800dd38:	4618      	mov	r0, r3
 800dd3a:	3708      	adds	r7, #8
 800dd3c:	46bd      	mov	sp, r7
 800dd3e:	bd80      	pop	{r7, pc}

0800dd40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800dd40:	b480      	push	{r7}
 800dd42:	b085      	sub	sp, #20
 800dd44:	af00      	add	r7, sp, #0
 800dd46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800dd48:	687b      	ldr	r3, [r7, #4]
 800dd4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800dd4e:	b2db      	uxtb	r3, r3
 800dd50:	2b01      	cmp	r3, #1
 800dd52:	d001      	beq.n	800dd58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800dd54:	2301      	movs	r3, #1
 800dd56:	e054      	b.n	800de02 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dd58:	687b      	ldr	r3, [r7, #4]
 800dd5a:	2202      	movs	r2, #2
 800dd5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	68da      	ldr	r2, [r3, #12]
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	f042 0201 	orr.w	r2, r2, #1
 800dd6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd70:	687b      	ldr	r3, [r7, #4]
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	4a26      	ldr	r2, [pc, #152]	; (800de10 <HAL_TIM_Base_Start_IT+0xd0>)
 800dd76:	4293      	cmp	r3, r2
 800dd78:	d022      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd82:	d01d      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800dd84:	687b      	ldr	r3, [r7, #4]
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	4a22      	ldr	r2, [pc, #136]	; (800de14 <HAL_TIM_Base_Start_IT+0xd4>)
 800dd8a:	4293      	cmp	r3, r2
 800dd8c:	d018      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	681b      	ldr	r3, [r3, #0]
 800dd92:	4a21      	ldr	r2, [pc, #132]	; (800de18 <HAL_TIM_Base_Start_IT+0xd8>)
 800dd94:	4293      	cmp	r3, r2
 800dd96:	d013      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800dd98:	687b      	ldr	r3, [r7, #4]
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	4a1f      	ldr	r2, [pc, #124]	; (800de1c <HAL_TIM_Base_Start_IT+0xdc>)
 800dd9e:	4293      	cmp	r3, r2
 800dda0:	d00e      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	4a1e      	ldr	r2, [pc, #120]	; (800de20 <HAL_TIM_Base_Start_IT+0xe0>)
 800dda8:	4293      	cmp	r3, r2
 800ddaa:	d009      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	4a1c      	ldr	r2, [pc, #112]	; (800de24 <HAL_TIM_Base_Start_IT+0xe4>)
 800ddb2:	4293      	cmp	r3, r2
 800ddb4:	d004      	beq.n	800ddc0 <HAL_TIM_Base_Start_IT+0x80>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	4a1b      	ldr	r2, [pc, #108]	; (800de28 <HAL_TIM_Base_Start_IT+0xe8>)
 800ddbc:	4293      	cmp	r3, r2
 800ddbe:	d115      	bne.n	800ddec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	681b      	ldr	r3, [r3, #0]
 800ddc4:	689a      	ldr	r2, [r3, #8]
 800ddc6:	4b19      	ldr	r3, [pc, #100]	; (800de2c <HAL_TIM_Base_Start_IT+0xec>)
 800ddc8:	4013      	ands	r3, r2
 800ddca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	2b06      	cmp	r3, #6
 800ddd0:	d015      	beq.n	800ddfe <HAL_TIM_Base_Start_IT+0xbe>
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ddd8:	d011      	beq.n	800ddfe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	681a      	ldr	r2, [r3, #0]
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	f042 0201 	orr.w	r2, r2, #1
 800dde8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddea:	e008      	b.n	800ddfe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ddec:	687b      	ldr	r3, [r7, #4]
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	681a      	ldr	r2, [r3, #0]
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	681b      	ldr	r3, [r3, #0]
 800ddf6:	f042 0201 	orr.w	r2, r2, #1
 800ddfa:	601a      	str	r2, [r3, #0]
 800ddfc:	e000      	b.n	800de00 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ddfe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800de00:	2300      	movs	r3, #0
}
 800de02:	4618      	mov	r0, r3
 800de04:	3714      	adds	r7, #20
 800de06:	46bd      	mov	sp, r7
 800de08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0c:	4770      	bx	lr
 800de0e:	bf00      	nop
 800de10:	40010000 	.word	0x40010000
 800de14:	40000400 	.word	0x40000400
 800de18:	40000800 	.word	0x40000800
 800de1c:	40000c00 	.word	0x40000c00
 800de20:	40010400 	.word	0x40010400
 800de24:	40001800 	.word	0x40001800
 800de28:	40014000 	.word	0x40014000
 800de2c:	00010007 	.word	0x00010007

0800de30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800de30:	b480      	push	{r7}
 800de32:	b083      	sub	sp, #12
 800de34:	af00      	add	r7, sp, #0
 800de36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	68da      	ldr	r2, [r3, #12]
 800de3e:	687b      	ldr	r3, [r7, #4]
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	f022 0201 	bic.w	r2, r2, #1
 800de46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	681b      	ldr	r3, [r3, #0]
 800de4c:	6a1a      	ldr	r2, [r3, #32]
 800de4e:	f241 1311 	movw	r3, #4369	; 0x1111
 800de52:	4013      	ands	r3, r2
 800de54:	2b00      	cmp	r3, #0
 800de56:	d10f      	bne.n	800de78 <HAL_TIM_Base_Stop_IT+0x48>
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	681b      	ldr	r3, [r3, #0]
 800de5c:	6a1a      	ldr	r2, [r3, #32]
 800de5e:	f240 4344 	movw	r3, #1092	; 0x444
 800de62:	4013      	ands	r3, r2
 800de64:	2b00      	cmp	r3, #0
 800de66:	d107      	bne.n	800de78 <HAL_TIM_Base_Stop_IT+0x48>
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	681a      	ldr	r2, [r3, #0]
 800de6e:	687b      	ldr	r3, [r7, #4]
 800de70:	681b      	ldr	r3, [r3, #0]
 800de72:	f022 0201 	bic.w	r2, r2, #1
 800de76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2201      	movs	r2, #1
 800de7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800de80:	2300      	movs	r3, #0
}
 800de82:	4618      	mov	r0, r3
 800de84:	370c      	adds	r7, #12
 800de86:	46bd      	mov	sp, r7
 800de88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de8c:	4770      	bx	lr

0800de8e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800de8e:	b580      	push	{r7, lr}
 800de90:	b082      	sub	sp, #8
 800de92:	af00      	add	r7, sp, #0
 800de94:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	691b      	ldr	r3, [r3, #16]
 800de9c:	f003 0302 	and.w	r3, r3, #2
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d122      	bne.n	800deea <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	681b      	ldr	r3, [r3, #0]
 800dea8:	68db      	ldr	r3, [r3, #12]
 800deaa:	f003 0302 	and.w	r3, r3, #2
 800deae:	2b02      	cmp	r3, #2
 800deb0:	d11b      	bne.n	800deea <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	f06f 0202 	mvn.w	r2, #2
 800deba:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	2201      	movs	r2, #1
 800dec0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	699b      	ldr	r3, [r3, #24]
 800dec8:	f003 0303 	and.w	r3, r3, #3
 800decc:	2b00      	cmp	r3, #0
 800dece:	d003      	beq.n	800ded8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f905 	bl	800e0e0 <HAL_TIM_IC_CaptureCallback>
 800ded6:	e005      	b.n	800dee4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 f8f7 	bl	800e0cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dede:	6878      	ldr	r0, [r7, #4]
 800dee0:	f000 f908 	bl	800e0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	2200      	movs	r2, #0
 800dee8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	691b      	ldr	r3, [r3, #16]
 800def0:	f003 0304 	and.w	r3, r3, #4
 800def4:	2b04      	cmp	r3, #4
 800def6:	d122      	bne.n	800df3e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	f003 0304 	and.w	r3, r3, #4
 800df02:	2b04      	cmp	r3, #4
 800df04:	d11b      	bne.n	800df3e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	f06f 0204 	mvn.w	r2, #4
 800df0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2202      	movs	r2, #2
 800df14:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	699b      	ldr	r3, [r3, #24]
 800df1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800df20:	2b00      	cmp	r3, #0
 800df22:	d003      	beq.n	800df2c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df24:	6878      	ldr	r0, [r7, #4]
 800df26:	f000 f8db 	bl	800e0e0 <HAL_TIM_IC_CaptureCallback>
 800df2a:	e005      	b.n	800df38 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 f8cd 	bl	800e0cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df32:	6878      	ldr	r0, [r7, #4]
 800df34:	f000 f8de 	bl	800e0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	2200      	movs	r2, #0
 800df3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	691b      	ldr	r3, [r3, #16]
 800df44:	f003 0308 	and.w	r3, r3, #8
 800df48:	2b08      	cmp	r3, #8
 800df4a:	d122      	bne.n	800df92 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	68db      	ldr	r3, [r3, #12]
 800df52:	f003 0308 	and.w	r3, r3, #8
 800df56:	2b08      	cmp	r3, #8
 800df58:	d11b      	bne.n	800df92 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	f06f 0208 	mvn.w	r2, #8
 800df62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2204      	movs	r2, #4
 800df68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	69db      	ldr	r3, [r3, #28]
 800df70:	f003 0303 	and.w	r3, r3, #3
 800df74:	2b00      	cmp	r3, #0
 800df76:	d003      	beq.n	800df80 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800df78:	6878      	ldr	r0, [r7, #4]
 800df7a:	f000 f8b1 	bl	800e0e0 <HAL_TIM_IC_CaptureCallback>
 800df7e:	e005      	b.n	800df8c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 f8a3 	bl	800e0cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800df86:	6878      	ldr	r0, [r7, #4]
 800df88:	f000 f8b4 	bl	800e0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2200      	movs	r2, #0
 800df90:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	691b      	ldr	r3, [r3, #16]
 800df98:	f003 0310 	and.w	r3, r3, #16
 800df9c:	2b10      	cmp	r3, #16
 800df9e:	d122      	bne.n	800dfe6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	681b      	ldr	r3, [r3, #0]
 800dfa4:	68db      	ldr	r3, [r3, #12]
 800dfa6:	f003 0310 	and.w	r3, r3, #16
 800dfaa:	2b10      	cmp	r3, #16
 800dfac:	d11b      	bne.n	800dfe6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f06f 0210 	mvn.w	r2, #16
 800dfb6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	2208      	movs	r2, #8
 800dfbc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	69db      	ldr	r3, [r3, #28]
 800dfc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d003      	beq.n	800dfd4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800dfcc:	6878      	ldr	r0, [r7, #4]
 800dfce:	f000 f887 	bl	800e0e0 <HAL_TIM_IC_CaptureCallback>
 800dfd2:	e005      	b.n	800dfe0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 f879 	bl	800e0cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800dfda:	6878      	ldr	r0, [r7, #4]
 800dfdc:	f000 f88a 	bl	800e0f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	2200      	movs	r2, #0
 800dfe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	691b      	ldr	r3, [r3, #16]
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b01      	cmp	r3, #1
 800dff2:	d10e      	bne.n	800e012 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	68db      	ldr	r3, [r3, #12]
 800dffa:	f003 0301 	and.w	r3, r3, #1
 800dffe:	2b01      	cmp	r3, #1
 800e000:	d107      	bne.n	800e012 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	f06f 0201 	mvn.w	r2, #1
 800e00a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	f7f8 fb95 	bl	800673c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	691b      	ldr	r3, [r3, #16]
 800e018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e01c:	2b80      	cmp	r3, #128	; 0x80
 800e01e:	d10e      	bne.n	800e03e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	68db      	ldr	r3, [r3, #12]
 800e026:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e02a:	2b80      	cmp	r3, #128	; 0x80
 800e02c:	d107      	bne.n	800e03e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e036:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e038:	6878      	ldr	r0, [r7, #4]
 800e03a:	f000 f9a1 	bl	800e380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	681b      	ldr	r3, [r3, #0]
 800e042:	691b      	ldr	r3, [r3, #16]
 800e044:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e048:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e04c:	d10e      	bne.n	800e06c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	68db      	ldr	r3, [r3, #12]
 800e054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e058:	2b80      	cmp	r3, #128	; 0x80
 800e05a:	d107      	bne.n	800e06c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e05c:	687b      	ldr	r3, [r7, #4]
 800e05e:	681b      	ldr	r3, [r3, #0]
 800e060:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e064:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e066:	6878      	ldr	r0, [r7, #4]
 800e068:	f000 f994 	bl	800e394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	691b      	ldr	r3, [r3, #16]
 800e072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e076:	2b40      	cmp	r3, #64	; 0x40
 800e078:	d10e      	bne.n	800e098 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	68db      	ldr	r3, [r3, #12]
 800e080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e084:	2b40      	cmp	r3, #64	; 0x40
 800e086:	d107      	bne.n	800e098 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e092:	6878      	ldr	r0, [r7, #4]
 800e094:	f000 f838 	bl	800e108 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	691b      	ldr	r3, [r3, #16]
 800e09e:	f003 0320 	and.w	r3, r3, #32
 800e0a2:	2b20      	cmp	r3, #32
 800e0a4:	d10e      	bne.n	800e0c4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	68db      	ldr	r3, [r3, #12]
 800e0ac:	f003 0320 	and.w	r3, r3, #32
 800e0b0:	2b20      	cmp	r3, #32
 800e0b2:	d107      	bne.n	800e0c4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	f06f 0220 	mvn.w	r2, #32
 800e0bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f954 	bl	800e36c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e0c4:	bf00      	nop
 800e0c6:	3708      	adds	r7, #8
 800e0c8:	46bd      	mov	sp, r7
 800e0ca:	bd80      	pop	{r7, pc}

0800e0cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e0cc:	b480      	push	{r7}
 800e0ce:	b083      	sub	sp, #12
 800e0d0:	af00      	add	r7, sp, #0
 800e0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e0d4:	bf00      	nop
 800e0d6:	370c      	adds	r7, #12
 800e0d8:	46bd      	mov	sp, r7
 800e0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0de:	4770      	bx	lr

0800e0e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e0e0:	b480      	push	{r7}
 800e0e2:	b083      	sub	sp, #12
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e0e8:	bf00      	nop
 800e0ea:	370c      	adds	r7, #12
 800e0ec:	46bd      	mov	sp, r7
 800e0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0f2:	4770      	bx	lr

0800e0f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e0f4:	b480      	push	{r7}
 800e0f6:	b083      	sub	sp, #12
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e0fc:	bf00      	nop
 800e0fe:	370c      	adds	r7, #12
 800e100:	46bd      	mov	sp, r7
 800e102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e106:	4770      	bx	lr

0800e108 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e108:	b480      	push	{r7}
 800e10a:	b083      	sub	sp, #12
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e110:	bf00      	nop
 800e112:	370c      	adds	r7, #12
 800e114:	46bd      	mov	sp, r7
 800e116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e11a:	4770      	bx	lr

0800e11c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
 800e124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	4a40      	ldr	r2, [pc, #256]	; (800e230 <TIM_Base_SetConfig+0x114>)
 800e130:	4293      	cmp	r3, r2
 800e132:	d013      	beq.n	800e15c <TIM_Base_SetConfig+0x40>
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e13a:	d00f      	beq.n	800e15c <TIM_Base_SetConfig+0x40>
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a3d      	ldr	r2, [pc, #244]	; (800e234 <TIM_Base_SetConfig+0x118>)
 800e140:	4293      	cmp	r3, r2
 800e142:	d00b      	beq.n	800e15c <TIM_Base_SetConfig+0x40>
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	4a3c      	ldr	r2, [pc, #240]	; (800e238 <TIM_Base_SetConfig+0x11c>)
 800e148:	4293      	cmp	r3, r2
 800e14a:	d007      	beq.n	800e15c <TIM_Base_SetConfig+0x40>
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	4a3b      	ldr	r2, [pc, #236]	; (800e23c <TIM_Base_SetConfig+0x120>)
 800e150:	4293      	cmp	r3, r2
 800e152:	d003      	beq.n	800e15c <TIM_Base_SetConfig+0x40>
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	4a3a      	ldr	r2, [pc, #232]	; (800e240 <TIM_Base_SetConfig+0x124>)
 800e158:	4293      	cmp	r3, r2
 800e15a:	d108      	bne.n	800e16e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e15c:	68fb      	ldr	r3, [r7, #12]
 800e15e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	685b      	ldr	r3, [r3, #4]
 800e168:	68fa      	ldr	r2, [r7, #12]
 800e16a:	4313      	orrs	r3, r2
 800e16c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	4a2f      	ldr	r2, [pc, #188]	; (800e230 <TIM_Base_SetConfig+0x114>)
 800e172:	4293      	cmp	r3, r2
 800e174:	d01f      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e17c:	d01b      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	4a2c      	ldr	r2, [pc, #176]	; (800e234 <TIM_Base_SetConfig+0x118>)
 800e182:	4293      	cmp	r3, r2
 800e184:	d017      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e186:	687b      	ldr	r3, [r7, #4]
 800e188:	4a2b      	ldr	r2, [pc, #172]	; (800e238 <TIM_Base_SetConfig+0x11c>)
 800e18a:	4293      	cmp	r3, r2
 800e18c:	d013      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	4a2a      	ldr	r2, [pc, #168]	; (800e23c <TIM_Base_SetConfig+0x120>)
 800e192:	4293      	cmp	r3, r2
 800e194:	d00f      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	4a29      	ldr	r2, [pc, #164]	; (800e240 <TIM_Base_SetConfig+0x124>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d00b      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	4a28      	ldr	r2, [pc, #160]	; (800e244 <TIM_Base_SetConfig+0x128>)
 800e1a2:	4293      	cmp	r3, r2
 800e1a4:	d007      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	4a27      	ldr	r2, [pc, #156]	; (800e248 <TIM_Base_SetConfig+0x12c>)
 800e1aa:	4293      	cmp	r3, r2
 800e1ac:	d003      	beq.n	800e1b6 <TIM_Base_SetConfig+0x9a>
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	4a26      	ldr	r2, [pc, #152]	; (800e24c <TIM_Base_SetConfig+0x130>)
 800e1b2:	4293      	cmp	r3, r2
 800e1b4:	d108      	bne.n	800e1c8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e1b6:	68fb      	ldr	r3, [r7, #12]
 800e1b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e1bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e1be:	683b      	ldr	r3, [r7, #0]
 800e1c0:	68db      	ldr	r3, [r3, #12]
 800e1c2:	68fa      	ldr	r2, [r7, #12]
 800e1c4:	4313      	orrs	r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e1ce:	683b      	ldr	r3, [r7, #0]
 800e1d0:	695b      	ldr	r3, [r3, #20]
 800e1d2:	4313      	orrs	r3, r2
 800e1d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	68fa      	ldr	r2, [r7, #12]
 800e1da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	689a      	ldr	r2, [r3, #8]
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e1e4:	683b      	ldr	r3, [r7, #0]
 800e1e6:	681a      	ldr	r2, [r3, #0]
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e1ec:	687b      	ldr	r3, [r7, #4]
 800e1ee:	4a10      	ldr	r2, [pc, #64]	; (800e230 <TIM_Base_SetConfig+0x114>)
 800e1f0:	4293      	cmp	r3, r2
 800e1f2:	d00f      	beq.n	800e214 <TIM_Base_SetConfig+0xf8>
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	4a12      	ldr	r2, [pc, #72]	; (800e240 <TIM_Base_SetConfig+0x124>)
 800e1f8:	4293      	cmp	r3, r2
 800e1fa:	d00b      	beq.n	800e214 <TIM_Base_SetConfig+0xf8>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	4a11      	ldr	r2, [pc, #68]	; (800e244 <TIM_Base_SetConfig+0x128>)
 800e200:	4293      	cmp	r3, r2
 800e202:	d007      	beq.n	800e214 <TIM_Base_SetConfig+0xf8>
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	4a10      	ldr	r2, [pc, #64]	; (800e248 <TIM_Base_SetConfig+0x12c>)
 800e208:	4293      	cmp	r3, r2
 800e20a:	d003      	beq.n	800e214 <TIM_Base_SetConfig+0xf8>
 800e20c:	687b      	ldr	r3, [r7, #4]
 800e20e:	4a0f      	ldr	r2, [pc, #60]	; (800e24c <TIM_Base_SetConfig+0x130>)
 800e210:	4293      	cmp	r3, r2
 800e212:	d103      	bne.n	800e21c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	691a      	ldr	r2, [r3, #16]
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	2201      	movs	r2, #1
 800e220:	615a      	str	r2, [r3, #20]
}
 800e222:	bf00      	nop
 800e224:	3714      	adds	r7, #20
 800e226:	46bd      	mov	sp, r7
 800e228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e22c:	4770      	bx	lr
 800e22e:	bf00      	nop
 800e230:	40010000 	.word	0x40010000
 800e234:	40000400 	.word	0x40000400
 800e238:	40000800 	.word	0x40000800
 800e23c:	40000c00 	.word	0x40000c00
 800e240:	40010400 	.word	0x40010400
 800e244:	40014000 	.word	0x40014000
 800e248:	40014400 	.word	0x40014400
 800e24c:	40014800 	.word	0x40014800

0800e250 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e250:	b480      	push	{r7}
 800e252:	b085      	sub	sp, #20
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
 800e258:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e260:	2b01      	cmp	r3, #1
 800e262:	d101      	bne.n	800e268 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e264:	2302      	movs	r3, #2
 800e266:	e06d      	b.n	800e344 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	2201      	movs	r2, #1
 800e26c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	2202      	movs	r2, #2
 800e274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e278:	687b      	ldr	r3, [r7, #4]
 800e27a:	681b      	ldr	r3, [r3, #0]
 800e27c:	685b      	ldr	r3, [r3, #4]
 800e27e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	4a30      	ldr	r2, [pc, #192]	; (800e350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e28e:	4293      	cmp	r3, r2
 800e290:	d004      	beq.n	800e29c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e292:	687b      	ldr	r3, [r7, #4]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4a2f      	ldr	r2, [pc, #188]	; (800e354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e298:	4293      	cmp	r3, r2
 800e29a:	d108      	bne.n	800e2ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e2a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e2a4:	683b      	ldr	r3, [r7, #0]
 800e2a6:	685b      	ldr	r3, [r3, #4]
 800e2a8:	68fa      	ldr	r2, [r7, #12]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e2b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e2b6:	683b      	ldr	r3, [r7, #0]
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	68fa      	ldr	r2, [r7, #12]
 800e2bc:	4313      	orrs	r3, r2
 800e2be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	68fa      	ldr	r2, [r7, #12]
 800e2c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e2c8:	687b      	ldr	r3, [r7, #4]
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	4a20      	ldr	r2, [pc, #128]	; (800e350 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e2ce:	4293      	cmp	r3, r2
 800e2d0:	d022      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	681b      	ldr	r3, [r3, #0]
 800e2d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e2da:	d01d      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	4a1d      	ldr	r2, [pc, #116]	; (800e358 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800e2e2:	4293      	cmp	r3, r2
 800e2e4:	d018      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	4a1c      	ldr	r2, [pc, #112]	; (800e35c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800e2ec:	4293      	cmp	r3, r2
 800e2ee:	d013      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	4a1a      	ldr	r2, [pc, #104]	; (800e360 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800e2f6:	4293      	cmp	r3, r2
 800e2f8:	d00e      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	681b      	ldr	r3, [r3, #0]
 800e2fe:	4a15      	ldr	r2, [pc, #84]	; (800e354 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e300:	4293      	cmp	r3, r2
 800e302:	d009      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	4a16      	ldr	r2, [pc, #88]	; (800e364 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e30a:	4293      	cmp	r3, r2
 800e30c:	d004      	beq.n	800e318 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e30e:	687b      	ldr	r3, [r7, #4]
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	4a15      	ldr	r2, [pc, #84]	; (800e368 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e314:	4293      	cmp	r3, r2
 800e316:	d10c      	bne.n	800e332 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e318:	68bb      	ldr	r3, [r7, #8]
 800e31a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e31e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e320:	683b      	ldr	r3, [r7, #0]
 800e322:	689b      	ldr	r3, [r3, #8]
 800e324:	68ba      	ldr	r2, [r7, #8]
 800e326:	4313      	orrs	r3, r2
 800e328:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	68ba      	ldr	r2, [r7, #8]
 800e330:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2201      	movs	r2, #1
 800e336:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	2200      	movs	r2, #0
 800e33e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e342:	2300      	movs	r3, #0
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr
 800e350:	40010000 	.word	0x40010000
 800e354:	40010400 	.word	0x40010400
 800e358:	40000400 	.word	0x40000400
 800e35c:	40000800 	.word	0x40000800
 800e360:	40000c00 	.word	0x40000c00
 800e364:	40001800 	.word	0x40001800
 800e368:	40014000 	.word	0x40014000

0800e36c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800e36c:	b480      	push	{r7}
 800e36e:	b083      	sub	sp, #12
 800e370:	af00      	add	r7, sp, #0
 800e372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800e374:	bf00      	nop
 800e376:	370c      	adds	r7, #12
 800e378:	46bd      	mov	sp, r7
 800e37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e37e:	4770      	bx	lr

0800e380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800e380:	b480      	push	{r7}
 800e382:	b083      	sub	sp, #12
 800e384:	af00      	add	r7, sp, #0
 800e386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800e388:	bf00      	nop
 800e38a:	370c      	adds	r7, #12
 800e38c:	46bd      	mov	sp, r7
 800e38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e392:	4770      	bx	lr

0800e394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800e394:	b480      	push	{r7}
 800e396:	b083      	sub	sp, #12
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800e39c:	bf00      	nop
 800e39e:	370c      	adds	r7, #12
 800e3a0:	46bd      	mov	sp, r7
 800e3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3a6:	4770      	bx	lr

0800e3a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e3a8:	b580      	push	{r7, lr}
 800e3aa:	b082      	sub	sp, #8
 800e3ac:	af00      	add	r7, sp, #0
 800e3ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	2b00      	cmp	r3, #0
 800e3b4:	d101      	bne.n	800e3ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e3b6:	2301      	movs	r3, #1
 800e3b8:	e042      	b.n	800e440 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d106      	bne.n	800e3d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	2200      	movs	r2, #0
 800e3c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e3cc:	6878      	ldr	r0, [r7, #4]
 800e3ce:	f7f8 ff73 	bl	80072b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2224      	movs	r2, #36	; 0x24
 800e3d6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800e3da:	687b      	ldr	r3, [r7, #4]
 800e3dc:	681b      	ldr	r3, [r3, #0]
 800e3de:	681a      	ldr	r2, [r3, #0]
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	681b      	ldr	r3, [r3, #0]
 800e3e4:	f022 0201 	bic.w	r2, r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e3ea:	6878      	ldr	r0, [r7, #4]
 800e3ec:	f000 fbea 	bl	800ebc4 <UART_SetConfig>
 800e3f0:	4603      	mov	r3, r0
 800e3f2:	2b01      	cmp	r3, #1
 800e3f4:	d101      	bne.n	800e3fa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e3f6:	2301      	movs	r3, #1
 800e3f8:	e022      	b.n	800e440 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d002      	beq.n	800e408 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f001 f946 	bl	800f694 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	685a      	ldr	r2, [r3, #4]
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e416:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e418:	687b      	ldr	r3, [r7, #4]
 800e41a:	681b      	ldr	r3, [r3, #0]
 800e41c:	689a      	ldr	r2, [r3, #8]
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e426:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	681a      	ldr	r2, [r3, #0]
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	f042 0201 	orr.w	r2, r2, #1
 800e436:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e438:	6878      	ldr	r0, [r7, #4]
 800e43a:	f001 f9cd 	bl	800f7d8 <UART_CheckIdleState>
 800e43e:	4603      	mov	r3, r0
}
 800e440:	4618      	mov	r0, r3
 800e442:	3708      	adds	r7, #8
 800e444:	46bd      	mov	sp, r7
 800e446:	bd80      	pop	{r7, pc}

0800e448 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b0ba      	sub	sp, #232	; 0xe8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	69db      	ldr	r3, [r3, #28]
 800e456:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	681b      	ldr	r3, [r3, #0]
 800e460:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	681b      	ldr	r3, [r3, #0]
 800e468:	689b      	ldr	r3, [r3, #8]
 800e46a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800e46e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800e472:	f640 030f 	movw	r3, #2063	; 0x80f
 800e476:	4013      	ands	r3, r2
 800e478:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800e47c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e480:	2b00      	cmp	r3, #0
 800e482:	d11b      	bne.n	800e4bc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e488:	f003 0320 	and.w	r3, r3, #32
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d015      	beq.n	800e4bc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e490:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e494:	f003 0320 	and.w	r3, r3, #32
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d105      	bne.n	800e4a8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e49c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e4a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d009      	beq.n	800e4bc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800e4a8:	687b      	ldr	r3, [r7, #4]
 800e4aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	f000 835a 	beq.w	800eb66 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	4798      	blx	r3
      }
      return;
 800e4ba:	e354      	b.n	800eb66 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800e4bc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	f000 811f 	beq.w	800e704 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800e4c6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e4ca:	4b8b      	ldr	r3, [pc, #556]	; (800e6f8 <HAL_UART_IRQHandler+0x2b0>)
 800e4cc:	4013      	ands	r3, r2
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d106      	bne.n	800e4e0 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800e4d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800e4d6:	4b89      	ldr	r3, [pc, #548]	; (800e6fc <HAL_UART_IRQHandler+0x2b4>)
 800e4d8:	4013      	ands	r3, r2
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	f000 8112 	beq.w	800e704 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800e4e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e4e4:	f003 0301 	and.w	r3, r3, #1
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d011      	beq.n	800e510 <HAL_UART_IRQHandler+0xc8>
 800e4ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e4f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d00b      	beq.n	800e510 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	2201      	movs	r2, #1
 800e4fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e506:	f043 0201 	orr.w	r2, r3, #1
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e514:	f003 0302 	and.w	r3, r3, #2
 800e518:	2b00      	cmp	r3, #0
 800e51a:	d011      	beq.n	800e540 <HAL_UART_IRQHandler+0xf8>
 800e51c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e520:	f003 0301 	and.w	r3, r3, #1
 800e524:	2b00      	cmp	r3, #0
 800e526:	d00b      	beq.n	800e540 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	681b      	ldr	r3, [r3, #0]
 800e52c:	2202      	movs	r2, #2
 800e52e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e536:	f043 0204 	orr.w	r2, r3, #4
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800e540:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e544:	f003 0304 	and.w	r3, r3, #4
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d011      	beq.n	800e570 <HAL_UART_IRQHandler+0x128>
 800e54c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e550:	f003 0301 	and.w	r3, r3, #1
 800e554:	2b00      	cmp	r3, #0
 800e556:	d00b      	beq.n	800e570 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	2204      	movs	r2, #4
 800e55e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e566:	f043 0202 	orr.w	r2, r3, #2
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800e570:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e574:	f003 0308 	and.w	r3, r3, #8
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d017      	beq.n	800e5ac <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e57c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e580:	f003 0320 	and.w	r3, r3, #32
 800e584:	2b00      	cmp	r3, #0
 800e586:	d105      	bne.n	800e594 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800e588:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800e58c:	4b5a      	ldr	r3, [pc, #360]	; (800e6f8 <HAL_UART_IRQHandler+0x2b0>)
 800e58e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800e590:	2b00      	cmp	r3, #0
 800e592:	d00b      	beq.n	800e5ac <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e594:	687b      	ldr	r3, [r7, #4]
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2208      	movs	r2, #8
 800e59a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5a2:	f043 0208 	orr.w	r2, r3, #8
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800e5ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d012      	beq.n	800e5de <HAL_UART_IRQHandler+0x196>
 800e5b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00c      	beq.n	800e5de <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	681b      	ldr	r3, [r3, #0]
 800e5c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e5cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5d4:	f043 0220 	orr.w	r2, r3, #32
 800e5d8:	687b      	ldr	r3, [r7, #4]
 800e5da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	f000 82c0 	beq.w	800eb6a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800e5ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e5ee:	f003 0320 	and.w	r3, r3, #32
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d013      	beq.n	800e61e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800e5f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e5fa:	f003 0320 	and.w	r3, r3, #32
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d105      	bne.n	800e60e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800e602:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800e606:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e60a:	2b00      	cmp	r3, #0
 800e60c:	d007      	beq.n	800e61e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e612:	2b00      	cmp	r3, #0
 800e614:	d003      	beq.n	800e61e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e624:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e628:	687b      	ldr	r3, [r7, #4]
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e632:	2b40      	cmp	r3, #64	; 0x40
 800e634:	d005      	beq.n	800e642 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800e636:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800e63a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d04f      	beq.n	800e6e2 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800e642:	6878      	ldr	r0, [r7, #4]
 800e644:	f001 f9dc 	bl	800fa00 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	689b      	ldr	r3, [r3, #8]
 800e64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e652:	2b40      	cmp	r3, #64	; 0x40
 800e654:	d141      	bne.n	800e6da <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	3308      	adds	r3, #8
 800e65c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800e664:	e853 3f00 	ldrex	r3, [r3]
 800e668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800e66c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800e670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e678:	687b      	ldr	r3, [r7, #4]
 800e67a:	681b      	ldr	r3, [r3, #0]
 800e67c:	3308      	adds	r3, #8
 800e67e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800e682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800e686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e68a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800e68e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800e692:	e841 2300 	strex	r3, r2, [r1]
 800e696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800e69a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d1d9      	bne.n	800e656 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d013      	beq.n	800e6d2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6ae:	4a14      	ldr	r2, [pc, #80]	; (800e700 <HAL_UART_IRQHandler+0x2b8>)
 800e6b0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fa f83c 	bl	8008734 <HAL_DMA_Abort_IT>
 800e6bc:	4603      	mov	r3, r0
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d017      	beq.n	800e6f2 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e6c8:	687a      	ldr	r2, [r7, #4]
 800e6ca:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800e6cc:	4610      	mov	r0, r2
 800e6ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6d0:	e00f      	b.n	800e6f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800e6d2:	6878      	ldr	r0, [r7, #4]
 800e6d4:	f000 fa60 	bl	800eb98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6d8:	e00b      	b.n	800e6f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800e6da:	6878      	ldr	r0, [r7, #4]
 800e6dc:	f000 fa5c 	bl	800eb98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6e0:	e007      	b.n	800e6f2 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800e6e2:	6878      	ldr	r0, [r7, #4]
 800e6e4:	f000 fa58 	bl	800eb98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800e6f0:	e23b      	b.n	800eb6a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e6f2:	bf00      	nop
    return;
 800e6f4:	e239      	b.n	800eb6a <HAL_UART_IRQHandler+0x722>
 800e6f6:	bf00      	nop
 800e6f8:	10000001 	.word	0x10000001
 800e6fc:	04000120 	.word	0x04000120
 800e700:	0800facd 	.word	0x0800facd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e704:	687b      	ldr	r3, [r7, #4]
 800e706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e708:	2b01      	cmp	r3, #1
 800e70a:	f040 81ce 	bne.w	800eaaa <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800e70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800e712:	f003 0310 	and.w	r3, r3, #16
 800e716:	2b00      	cmp	r3, #0
 800e718:	f000 81c7 	beq.w	800eaaa <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800e71c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800e720:	f003 0310 	and.w	r3, r3, #16
 800e724:	2b00      	cmp	r3, #0
 800e726:	f000 81c0 	beq.w	800eaaa <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	2210      	movs	r2, #16
 800e730:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	689b      	ldr	r3, [r3, #8]
 800e738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e73c:	2b40      	cmp	r3, #64	; 0x40
 800e73e:	f040 813b 	bne.w	800e9b8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4a8b      	ldr	r2, [pc, #556]	; (800e978 <HAL_UART_IRQHandler+0x530>)
 800e74a:	4293      	cmp	r3, r2
 800e74c:	d059      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	4a89      	ldr	r2, [pc, #548]	; (800e97c <HAL_UART_IRQHandler+0x534>)
 800e756:	4293      	cmp	r3, r2
 800e758:	d053      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	4a87      	ldr	r2, [pc, #540]	; (800e980 <HAL_UART_IRQHandler+0x538>)
 800e762:	4293      	cmp	r3, r2
 800e764:	d04d      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	4a85      	ldr	r2, [pc, #532]	; (800e984 <HAL_UART_IRQHandler+0x53c>)
 800e76e:	4293      	cmp	r3, r2
 800e770:	d047      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	4a83      	ldr	r2, [pc, #524]	; (800e988 <HAL_UART_IRQHandler+0x540>)
 800e77a:	4293      	cmp	r3, r2
 800e77c:	d041      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	4a81      	ldr	r2, [pc, #516]	; (800e98c <HAL_UART_IRQHandler+0x544>)
 800e786:	4293      	cmp	r3, r2
 800e788:	d03b      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	4a7f      	ldr	r2, [pc, #508]	; (800e990 <HAL_UART_IRQHandler+0x548>)
 800e792:	4293      	cmp	r3, r2
 800e794:	d035      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	4a7d      	ldr	r2, [pc, #500]	; (800e994 <HAL_UART_IRQHandler+0x54c>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d02f      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	4a7b      	ldr	r2, [pc, #492]	; (800e998 <HAL_UART_IRQHandler+0x550>)
 800e7aa:	4293      	cmp	r3, r2
 800e7ac:	d029      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7b2:	681b      	ldr	r3, [r3, #0]
 800e7b4:	4a79      	ldr	r2, [pc, #484]	; (800e99c <HAL_UART_IRQHandler+0x554>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d023      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	4a77      	ldr	r2, [pc, #476]	; (800e9a0 <HAL_UART_IRQHandler+0x558>)
 800e7c2:	4293      	cmp	r3, r2
 800e7c4:	d01d      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ca:	681b      	ldr	r3, [r3, #0]
 800e7cc:	4a75      	ldr	r2, [pc, #468]	; (800e9a4 <HAL_UART_IRQHandler+0x55c>)
 800e7ce:	4293      	cmp	r3, r2
 800e7d0:	d017      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	4a73      	ldr	r2, [pc, #460]	; (800e9a8 <HAL_UART_IRQHandler+0x560>)
 800e7da:	4293      	cmp	r3, r2
 800e7dc:	d011      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	4a71      	ldr	r2, [pc, #452]	; (800e9ac <HAL_UART_IRQHandler+0x564>)
 800e7e6:	4293      	cmp	r3, r2
 800e7e8:	d00b      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7ee:	681b      	ldr	r3, [r3, #0]
 800e7f0:	4a6f      	ldr	r2, [pc, #444]	; (800e9b0 <HAL_UART_IRQHandler+0x568>)
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d005      	beq.n	800e802 <HAL_UART_IRQHandler+0x3ba>
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e7fa:	681b      	ldr	r3, [r3, #0]
 800e7fc:	4a6d      	ldr	r2, [pc, #436]	; (800e9b4 <HAL_UART_IRQHandler+0x56c>)
 800e7fe:	4293      	cmp	r3, r2
 800e800:	d105      	bne.n	800e80e <HAL_UART_IRQHandler+0x3c6>
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	685b      	ldr	r3, [r3, #4]
 800e80a:	b29b      	uxth	r3, r3
 800e80c:	e004      	b.n	800e818 <HAL_UART_IRQHandler+0x3d0>
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	b29b      	uxth	r3, r3
 800e818:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800e81c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800e820:	2b00      	cmp	r3, #0
 800e822:	f000 81a4 	beq.w	800eb6e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e82c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e830:	429a      	cmp	r2, r3
 800e832:	f080 819c 	bcs.w	800eb6e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800e83c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e844:	69db      	ldr	r3, [r3, #28]
 800e846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e84a:	f000 8086 	beq.w	800e95a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e856:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800e85a:	e853 3f00 	ldrex	r3, [r3]
 800e85e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800e862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800e866:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e86a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	461a      	mov	r2, r3
 800e874:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800e878:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800e87c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e880:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800e884:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800e888:	e841 2300 	strex	r3, r2, [r1]
 800e88c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800e890:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800e894:	2b00      	cmp	r3, #0
 800e896:	d1da      	bne.n	800e84e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	681b      	ldr	r3, [r3, #0]
 800e89c:	3308      	adds	r3, #8
 800e89e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e8a2:	e853 3f00 	ldrex	r3, [r3]
 800e8a6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800e8a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e8aa:	f023 0301 	bic.w	r3, r3, #1
 800e8ae:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	3308      	adds	r3, #8
 800e8b8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800e8bc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800e8c0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800e8c4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800e8c8:	e841 2300 	strex	r3, r2, [r1]
 800e8cc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800e8ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e8d0:	2b00      	cmp	r3, #0
 800e8d2:	d1e1      	bne.n	800e898 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	3308      	adds	r3, #8
 800e8da:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e8dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e8de:	e853 3f00 	ldrex	r3, [r3]
 800e8e2:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800e8e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e8e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e8ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	3308      	adds	r3, #8
 800e8f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800e8f8:	66fa      	str	r2, [r7, #108]	; 0x6c
 800e8fa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e8fc:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800e8fe:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800e900:	e841 2300 	strex	r3, r2, [r1]
 800e904:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800e906:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d1e3      	bne.n	800e8d4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	2220      	movs	r2, #32
 800e910:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2200      	movs	r2, #0
 800e918:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e920:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e922:	e853 3f00 	ldrex	r3, [r3]
 800e926:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e928:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e92a:	f023 0310 	bic.w	r3, r3, #16
 800e92e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	461a      	mov	r2, r3
 800e938:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800e93c:	65bb      	str	r3, [r7, #88]	; 0x58
 800e93e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e940:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e942:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e944:	e841 2300 	strex	r3, r2, [r1]
 800e948:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e94a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e94c:	2b00      	cmp	r3, #0
 800e94e:	d1e4      	bne.n	800e91a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e954:	4618      	mov	r0, r3
 800e956:	f7f9 fbcf 	bl	80080f8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e966:	b29b      	uxth	r3, r3
 800e968:	1ad3      	subs	r3, r2, r3
 800e96a:	b29b      	uxth	r3, r3
 800e96c:	4619      	mov	r1, r3
 800e96e:	6878      	ldr	r0, [r7, #4]
 800e970:	f000 f91c 	bl	800ebac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e974:	e0fb      	b.n	800eb6e <HAL_UART_IRQHandler+0x726>
 800e976:	bf00      	nop
 800e978:	40020010 	.word	0x40020010
 800e97c:	40020028 	.word	0x40020028
 800e980:	40020040 	.word	0x40020040
 800e984:	40020058 	.word	0x40020058
 800e988:	40020070 	.word	0x40020070
 800e98c:	40020088 	.word	0x40020088
 800e990:	400200a0 	.word	0x400200a0
 800e994:	400200b8 	.word	0x400200b8
 800e998:	40020410 	.word	0x40020410
 800e99c:	40020428 	.word	0x40020428
 800e9a0:	40020440 	.word	0x40020440
 800e9a4:	40020458 	.word	0x40020458
 800e9a8:	40020470 	.word	0x40020470
 800e9ac:	40020488 	.word	0x40020488
 800e9b0:	400204a0 	.word	0x400204a0
 800e9b4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9c4:	b29b      	uxth	r3, r3
 800e9c6:	1ad3      	subs	r3, r2, r3
 800e9c8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800e9d2:	b29b      	uxth	r3, r3
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	f000 80cc 	beq.w	800eb72 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800e9da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	f000 80c7 	beq.w	800eb72 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e9ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ec:	e853 3f00 	ldrex	r3, [r3]
 800e9f0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e9f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e9f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	461a      	mov	r2, r3
 800ea02:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ea06:	647b      	str	r3, [r7, #68]	; 0x44
 800ea08:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea0a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ea0c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea0e:	e841 2300 	strex	r3, r2, [r1]
 800ea12:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ea14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d1e4      	bne.n	800e9e4 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	3308      	adds	r3, #8
 800ea20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea24:	e853 3f00 	ldrex	r3, [r3]
 800ea28:	623b      	str	r3, [r7, #32]
   return(result);
 800ea2a:	6a3a      	ldr	r2, [r7, #32]
 800ea2c:	4b54      	ldr	r3, [pc, #336]	; (800eb80 <HAL_UART_IRQHandler+0x738>)
 800ea2e:	4013      	ands	r3, r2
 800ea30:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	3308      	adds	r3, #8
 800ea3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ea3e:	633a      	str	r2, [r7, #48]	; 0x30
 800ea40:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ea44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ea46:	e841 2300 	strex	r3, r2, [r1]
 800ea4a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ea4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d1e3      	bne.n	800ea1a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	2220      	movs	r2, #32
 800ea56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ea5a:	687b      	ldr	r3, [r7, #4]
 800ea5c:	2200      	movs	r2, #0
 800ea5e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ea6c:	693b      	ldr	r3, [r7, #16]
 800ea6e:	e853 3f00 	ldrex	r3, [r3]
 800ea72:	60fb      	str	r3, [r7, #12]
   return(result);
 800ea74:	68fb      	ldr	r3, [r7, #12]
 800ea76:	f023 0310 	bic.w	r3, r3, #16
 800ea7a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	461a      	mov	r2, r3
 800ea84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800ea88:	61fb      	str	r3, [r7, #28]
 800ea8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ea8c:	69b9      	ldr	r1, [r7, #24]
 800ea8e:	69fa      	ldr	r2, [r7, #28]
 800ea90:	e841 2300 	strex	r3, r2, [r1]
 800ea94:	617b      	str	r3, [r7, #20]
   return(result);
 800ea96:	697b      	ldr	r3, [r7, #20]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d1e4      	bne.n	800ea66 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ea9c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800eaa0:	4619      	mov	r1, r3
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 f882 	bl	800ebac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800eaa8:	e063      	b.n	800eb72 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800eaaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eaae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800eab2:	2b00      	cmp	r3, #0
 800eab4:	d00e      	beq.n	800ead4 <HAL_UART_IRQHandler+0x68c>
 800eab6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d008      	beq.n	800ead4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800eaca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800eacc:	6878      	ldr	r0, [r7, #4]
 800eace:	f001 f83e 	bl	800fb4e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800ead2:	e051      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800ead4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ead8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eadc:	2b00      	cmp	r3, #0
 800eade:	d014      	beq.n	800eb0a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800eae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eae4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	d105      	bne.n	800eaf8 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800eaec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800eaf0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d008      	beq.n	800eb0a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eafc:	2b00      	cmp	r3, #0
 800eafe:	d03a      	beq.n	800eb76 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	4798      	blx	r3
    }
    return;
 800eb08:	e035      	b.n	800eb76 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800eb0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d009      	beq.n	800eb2a <HAL_UART_IRQHandler+0x6e2>
 800eb16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d003      	beq.n	800eb2a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800eb22:	6878      	ldr	r0, [r7, #4]
 800eb24:	f000 ffe8 	bl	800faf8 <UART_EndTransmit_IT>
    return;
 800eb28:	e026      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800eb2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb2e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d009      	beq.n	800eb4a <HAL_UART_IRQHandler+0x702>
 800eb36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb3a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d003      	beq.n	800eb4a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800eb42:	6878      	ldr	r0, [r7, #4]
 800eb44:	f001 f817 	bl	800fb76 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb48:	e016      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800eb4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eb4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb52:	2b00      	cmp	r3, #0
 800eb54:	d010      	beq.n	800eb78 <HAL_UART_IRQHandler+0x730>
 800eb56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	da0c      	bge.n	800eb78 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 ffff 	bl	800fb62 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800eb64:	e008      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
      return;
 800eb66:	bf00      	nop
 800eb68:	e006      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
    return;
 800eb6a:	bf00      	nop
 800eb6c:	e004      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
      return;
 800eb6e:	bf00      	nop
 800eb70:	e002      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
      return;
 800eb72:	bf00      	nop
 800eb74:	e000      	b.n	800eb78 <HAL_UART_IRQHandler+0x730>
    return;
 800eb76:	bf00      	nop
  }
}
 800eb78:	37e8      	adds	r7, #232	; 0xe8
 800eb7a:	46bd      	mov	sp, r7
 800eb7c:	bd80      	pop	{r7, pc}
 800eb7e:	bf00      	nop
 800eb80:	effffffe 	.word	0xeffffffe

0800eb84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800eb84:	b480      	push	{r7}
 800eb86:	b083      	sub	sp, #12
 800eb88:	af00      	add	r7, sp, #0
 800eb8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800eb8c:	bf00      	nop
 800eb8e:	370c      	adds	r7, #12
 800eb90:	46bd      	mov	sp, r7
 800eb92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb96:	4770      	bx	lr

0800eb98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800eb98:	b480      	push	{r7}
 800eb9a:	b083      	sub	sp, #12
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ebac:	b480      	push	{r7}
 800ebae:	b083      	sub	sp, #12
 800ebb0:	af00      	add	r7, sp, #0
 800ebb2:	6078      	str	r0, [r7, #4]
 800ebb4:	460b      	mov	r3, r1
 800ebb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ebb8:	bf00      	nop
 800ebba:	370c      	adds	r7, #12
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc2:	4770      	bx	lr

0800ebc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ebc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ebc8:	b092      	sub	sp, #72	; 0x48
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ebce:	2300      	movs	r3, #0
 800ebd0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	689a      	ldr	r2, [r3, #8]
 800ebd8:	697b      	ldr	r3, [r7, #20]
 800ebda:	691b      	ldr	r3, [r3, #16]
 800ebdc:	431a      	orrs	r2, r3
 800ebde:	697b      	ldr	r3, [r7, #20]
 800ebe0:	695b      	ldr	r3, [r3, #20]
 800ebe2:	431a      	orrs	r2, r3
 800ebe4:	697b      	ldr	r3, [r7, #20]
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	4313      	orrs	r3, r2
 800ebea:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	681b      	ldr	r3, [r3, #0]
 800ebf0:	681a      	ldr	r2, [r3, #0]
 800ebf2:	4bbe      	ldr	r3, [pc, #760]	; (800eeec <UART_SetConfig+0x328>)
 800ebf4:	4013      	ands	r3, r2
 800ebf6:	697a      	ldr	r2, [r7, #20]
 800ebf8:	6812      	ldr	r2, [r2, #0]
 800ebfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ebfc:	430b      	orrs	r3, r1
 800ebfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ec00:	697b      	ldr	r3, [r7, #20]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	685b      	ldr	r3, [r3, #4]
 800ec06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ec0a:	697b      	ldr	r3, [r7, #20]
 800ec0c:	68da      	ldr	r2, [r3, #12]
 800ec0e:	697b      	ldr	r3, [r7, #20]
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	430a      	orrs	r2, r1
 800ec14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ec16:	697b      	ldr	r3, [r7, #20]
 800ec18:	699b      	ldr	r3, [r3, #24]
 800ec1a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ec1c:	697b      	ldr	r3, [r7, #20]
 800ec1e:	681b      	ldr	r3, [r3, #0]
 800ec20:	4ab3      	ldr	r2, [pc, #716]	; (800eef0 <UART_SetConfig+0x32c>)
 800ec22:	4293      	cmp	r3, r2
 800ec24:	d004      	beq.n	800ec30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ec26:	697b      	ldr	r3, [r7, #20]
 800ec28:	6a1b      	ldr	r3, [r3, #32]
 800ec2a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec2c:	4313      	orrs	r3, r2
 800ec2e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ec30:	697b      	ldr	r3, [r7, #20]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	689a      	ldr	r2, [r3, #8]
 800ec36:	4baf      	ldr	r3, [pc, #700]	; (800eef4 <UART_SetConfig+0x330>)
 800ec38:	4013      	ands	r3, r2
 800ec3a:	697a      	ldr	r2, [r7, #20]
 800ec3c:	6812      	ldr	r2, [r2, #0]
 800ec3e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ec40:	430b      	orrs	r3, r1
 800ec42:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ec44:	697b      	ldr	r3, [r7, #20]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec4a:	f023 010f 	bic.w	r1, r3, #15
 800ec4e:	697b      	ldr	r3, [r7, #20]
 800ec50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec52:	697b      	ldr	r3, [r7, #20]
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	430a      	orrs	r2, r1
 800ec58:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	4aa6      	ldr	r2, [pc, #664]	; (800eef8 <UART_SetConfig+0x334>)
 800ec60:	4293      	cmp	r3, r2
 800ec62:	d177      	bne.n	800ed54 <UART_SetConfig+0x190>
 800ec64:	4ba5      	ldr	r3, [pc, #660]	; (800eefc <UART_SetConfig+0x338>)
 800ec66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ec68:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ec6c:	2b28      	cmp	r3, #40	; 0x28
 800ec6e:	d86d      	bhi.n	800ed4c <UART_SetConfig+0x188>
 800ec70:	a201      	add	r2, pc, #4	; (adr r2, 800ec78 <UART_SetConfig+0xb4>)
 800ec72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec76:	bf00      	nop
 800ec78:	0800ed1d 	.word	0x0800ed1d
 800ec7c:	0800ed4d 	.word	0x0800ed4d
 800ec80:	0800ed4d 	.word	0x0800ed4d
 800ec84:	0800ed4d 	.word	0x0800ed4d
 800ec88:	0800ed4d 	.word	0x0800ed4d
 800ec8c:	0800ed4d 	.word	0x0800ed4d
 800ec90:	0800ed4d 	.word	0x0800ed4d
 800ec94:	0800ed4d 	.word	0x0800ed4d
 800ec98:	0800ed25 	.word	0x0800ed25
 800ec9c:	0800ed4d 	.word	0x0800ed4d
 800eca0:	0800ed4d 	.word	0x0800ed4d
 800eca4:	0800ed4d 	.word	0x0800ed4d
 800eca8:	0800ed4d 	.word	0x0800ed4d
 800ecac:	0800ed4d 	.word	0x0800ed4d
 800ecb0:	0800ed4d 	.word	0x0800ed4d
 800ecb4:	0800ed4d 	.word	0x0800ed4d
 800ecb8:	0800ed2d 	.word	0x0800ed2d
 800ecbc:	0800ed4d 	.word	0x0800ed4d
 800ecc0:	0800ed4d 	.word	0x0800ed4d
 800ecc4:	0800ed4d 	.word	0x0800ed4d
 800ecc8:	0800ed4d 	.word	0x0800ed4d
 800eccc:	0800ed4d 	.word	0x0800ed4d
 800ecd0:	0800ed4d 	.word	0x0800ed4d
 800ecd4:	0800ed4d 	.word	0x0800ed4d
 800ecd8:	0800ed35 	.word	0x0800ed35
 800ecdc:	0800ed4d 	.word	0x0800ed4d
 800ece0:	0800ed4d 	.word	0x0800ed4d
 800ece4:	0800ed4d 	.word	0x0800ed4d
 800ece8:	0800ed4d 	.word	0x0800ed4d
 800ecec:	0800ed4d 	.word	0x0800ed4d
 800ecf0:	0800ed4d 	.word	0x0800ed4d
 800ecf4:	0800ed4d 	.word	0x0800ed4d
 800ecf8:	0800ed3d 	.word	0x0800ed3d
 800ecfc:	0800ed4d 	.word	0x0800ed4d
 800ed00:	0800ed4d 	.word	0x0800ed4d
 800ed04:	0800ed4d 	.word	0x0800ed4d
 800ed08:	0800ed4d 	.word	0x0800ed4d
 800ed0c:	0800ed4d 	.word	0x0800ed4d
 800ed10:	0800ed4d 	.word	0x0800ed4d
 800ed14:	0800ed4d 	.word	0x0800ed4d
 800ed18:	0800ed45 	.word	0x0800ed45
 800ed1c:	2301      	movs	r3, #1
 800ed1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed22:	e222      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed24:	2304      	movs	r3, #4
 800ed26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed2a:	e21e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed2c:	2308      	movs	r3, #8
 800ed2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed32:	e21a      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed34:	2310      	movs	r3, #16
 800ed36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed3a:	e216      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed3c:	2320      	movs	r3, #32
 800ed3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed42:	e212      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed44:	2340      	movs	r3, #64	; 0x40
 800ed46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed4a:	e20e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed4c:	2380      	movs	r3, #128	; 0x80
 800ed4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed52:	e20a      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed54:	697b      	ldr	r3, [r7, #20]
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	4a69      	ldr	r2, [pc, #420]	; (800ef00 <UART_SetConfig+0x33c>)
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d130      	bne.n	800edc0 <UART_SetConfig+0x1fc>
 800ed5e:	4b67      	ldr	r3, [pc, #412]	; (800eefc <UART_SetConfig+0x338>)
 800ed60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ed62:	f003 0307 	and.w	r3, r3, #7
 800ed66:	2b05      	cmp	r3, #5
 800ed68:	d826      	bhi.n	800edb8 <UART_SetConfig+0x1f4>
 800ed6a:	a201      	add	r2, pc, #4	; (adr r2, 800ed70 <UART_SetConfig+0x1ac>)
 800ed6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed70:	0800ed89 	.word	0x0800ed89
 800ed74:	0800ed91 	.word	0x0800ed91
 800ed78:	0800ed99 	.word	0x0800ed99
 800ed7c:	0800eda1 	.word	0x0800eda1
 800ed80:	0800eda9 	.word	0x0800eda9
 800ed84:	0800edb1 	.word	0x0800edb1
 800ed88:	2300      	movs	r3, #0
 800ed8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed8e:	e1ec      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed90:	2304      	movs	r3, #4
 800ed92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed96:	e1e8      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ed98:	2308      	movs	r3, #8
 800ed9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ed9e:	e1e4      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eda0:	2310      	movs	r3, #16
 800eda2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eda6:	e1e0      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eda8:	2320      	movs	r3, #32
 800edaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edae:	e1dc      	b.n	800f16a <UART_SetConfig+0x5a6>
 800edb0:	2340      	movs	r3, #64	; 0x40
 800edb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edb6:	e1d8      	b.n	800f16a <UART_SetConfig+0x5a6>
 800edb8:	2380      	movs	r3, #128	; 0x80
 800edba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edbe:	e1d4      	b.n	800f16a <UART_SetConfig+0x5a6>
 800edc0:	697b      	ldr	r3, [r7, #20]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	4a4f      	ldr	r2, [pc, #316]	; (800ef04 <UART_SetConfig+0x340>)
 800edc6:	4293      	cmp	r3, r2
 800edc8:	d130      	bne.n	800ee2c <UART_SetConfig+0x268>
 800edca:	4b4c      	ldr	r3, [pc, #304]	; (800eefc <UART_SetConfig+0x338>)
 800edcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edce:	f003 0307 	and.w	r3, r3, #7
 800edd2:	2b05      	cmp	r3, #5
 800edd4:	d826      	bhi.n	800ee24 <UART_SetConfig+0x260>
 800edd6:	a201      	add	r2, pc, #4	; (adr r2, 800eddc <UART_SetConfig+0x218>)
 800edd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eddc:	0800edf5 	.word	0x0800edf5
 800ede0:	0800edfd 	.word	0x0800edfd
 800ede4:	0800ee05 	.word	0x0800ee05
 800ede8:	0800ee0d 	.word	0x0800ee0d
 800edec:	0800ee15 	.word	0x0800ee15
 800edf0:	0800ee1d 	.word	0x0800ee1d
 800edf4:	2300      	movs	r3, #0
 800edf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800edfa:	e1b6      	b.n	800f16a <UART_SetConfig+0x5a6>
 800edfc:	2304      	movs	r3, #4
 800edfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee02:	e1b2      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee04:	2308      	movs	r3, #8
 800ee06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee0a:	e1ae      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee0c:	2310      	movs	r3, #16
 800ee0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee12:	e1aa      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee14:	2320      	movs	r3, #32
 800ee16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee1a:	e1a6      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee1c:	2340      	movs	r3, #64	; 0x40
 800ee1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee22:	e1a2      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee24:	2380      	movs	r3, #128	; 0x80
 800ee26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee2a:	e19e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee2c:	697b      	ldr	r3, [r7, #20]
 800ee2e:	681b      	ldr	r3, [r3, #0]
 800ee30:	4a35      	ldr	r2, [pc, #212]	; (800ef08 <UART_SetConfig+0x344>)
 800ee32:	4293      	cmp	r3, r2
 800ee34:	d130      	bne.n	800ee98 <UART_SetConfig+0x2d4>
 800ee36:	4b31      	ldr	r3, [pc, #196]	; (800eefc <UART_SetConfig+0x338>)
 800ee38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ee3a:	f003 0307 	and.w	r3, r3, #7
 800ee3e:	2b05      	cmp	r3, #5
 800ee40:	d826      	bhi.n	800ee90 <UART_SetConfig+0x2cc>
 800ee42:	a201      	add	r2, pc, #4	; (adr r2, 800ee48 <UART_SetConfig+0x284>)
 800ee44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ee48:	0800ee61 	.word	0x0800ee61
 800ee4c:	0800ee69 	.word	0x0800ee69
 800ee50:	0800ee71 	.word	0x0800ee71
 800ee54:	0800ee79 	.word	0x0800ee79
 800ee58:	0800ee81 	.word	0x0800ee81
 800ee5c:	0800ee89 	.word	0x0800ee89
 800ee60:	2300      	movs	r3, #0
 800ee62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee66:	e180      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee68:	2304      	movs	r3, #4
 800ee6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee6e:	e17c      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee70:	2308      	movs	r3, #8
 800ee72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee76:	e178      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee78:	2310      	movs	r3, #16
 800ee7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee7e:	e174      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee80:	2320      	movs	r3, #32
 800ee82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee86:	e170      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee88:	2340      	movs	r3, #64	; 0x40
 800ee8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee8e:	e16c      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee90:	2380      	movs	r3, #128	; 0x80
 800ee92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ee96:	e168      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	681b      	ldr	r3, [r3, #0]
 800ee9c:	4a1b      	ldr	r2, [pc, #108]	; (800ef0c <UART_SetConfig+0x348>)
 800ee9e:	4293      	cmp	r3, r2
 800eea0:	d142      	bne.n	800ef28 <UART_SetConfig+0x364>
 800eea2:	4b16      	ldr	r3, [pc, #88]	; (800eefc <UART_SetConfig+0x338>)
 800eea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eea6:	f003 0307 	and.w	r3, r3, #7
 800eeaa:	2b05      	cmp	r3, #5
 800eeac:	d838      	bhi.n	800ef20 <UART_SetConfig+0x35c>
 800eeae:	a201      	add	r2, pc, #4	; (adr r2, 800eeb4 <UART_SetConfig+0x2f0>)
 800eeb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eeb4:	0800eecd 	.word	0x0800eecd
 800eeb8:	0800eed5 	.word	0x0800eed5
 800eebc:	0800eedd 	.word	0x0800eedd
 800eec0:	0800eee5 	.word	0x0800eee5
 800eec4:	0800ef11 	.word	0x0800ef11
 800eec8:	0800ef19 	.word	0x0800ef19
 800eecc:	2300      	movs	r3, #0
 800eece:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eed2:	e14a      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eed4:	2304      	movs	r3, #4
 800eed6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeda:	e146      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eedc:	2308      	movs	r3, #8
 800eede:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eee2:	e142      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eee4:	2310      	movs	r3, #16
 800eee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eeea:	e13e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eeec:	cfff69f3 	.word	0xcfff69f3
 800eef0:	58000c00 	.word	0x58000c00
 800eef4:	11fff4ff 	.word	0x11fff4ff
 800eef8:	40011000 	.word	0x40011000
 800eefc:	58024400 	.word	0x58024400
 800ef00:	40004400 	.word	0x40004400
 800ef04:	40004800 	.word	0x40004800
 800ef08:	40004c00 	.word	0x40004c00
 800ef0c:	40005000 	.word	0x40005000
 800ef10:	2320      	movs	r3, #32
 800ef12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef16:	e128      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ef18:	2340      	movs	r3, #64	; 0x40
 800ef1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef1e:	e124      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ef20:	2380      	movs	r3, #128	; 0x80
 800ef22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ef26:	e120      	b.n	800f16a <UART_SetConfig+0x5a6>
 800ef28:	697b      	ldr	r3, [r7, #20]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4acb      	ldr	r2, [pc, #812]	; (800f25c <UART_SetConfig+0x698>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d176      	bne.n	800f020 <UART_SetConfig+0x45c>
 800ef32:	4bcb      	ldr	r3, [pc, #812]	; (800f260 <UART_SetConfig+0x69c>)
 800ef34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ef36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ef3a:	2b28      	cmp	r3, #40	; 0x28
 800ef3c:	d86c      	bhi.n	800f018 <UART_SetConfig+0x454>
 800ef3e:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <UART_SetConfig+0x380>)
 800ef40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef44:	0800efe9 	.word	0x0800efe9
 800ef48:	0800f019 	.word	0x0800f019
 800ef4c:	0800f019 	.word	0x0800f019
 800ef50:	0800f019 	.word	0x0800f019
 800ef54:	0800f019 	.word	0x0800f019
 800ef58:	0800f019 	.word	0x0800f019
 800ef5c:	0800f019 	.word	0x0800f019
 800ef60:	0800f019 	.word	0x0800f019
 800ef64:	0800eff1 	.word	0x0800eff1
 800ef68:	0800f019 	.word	0x0800f019
 800ef6c:	0800f019 	.word	0x0800f019
 800ef70:	0800f019 	.word	0x0800f019
 800ef74:	0800f019 	.word	0x0800f019
 800ef78:	0800f019 	.word	0x0800f019
 800ef7c:	0800f019 	.word	0x0800f019
 800ef80:	0800f019 	.word	0x0800f019
 800ef84:	0800eff9 	.word	0x0800eff9
 800ef88:	0800f019 	.word	0x0800f019
 800ef8c:	0800f019 	.word	0x0800f019
 800ef90:	0800f019 	.word	0x0800f019
 800ef94:	0800f019 	.word	0x0800f019
 800ef98:	0800f019 	.word	0x0800f019
 800ef9c:	0800f019 	.word	0x0800f019
 800efa0:	0800f019 	.word	0x0800f019
 800efa4:	0800f001 	.word	0x0800f001
 800efa8:	0800f019 	.word	0x0800f019
 800efac:	0800f019 	.word	0x0800f019
 800efb0:	0800f019 	.word	0x0800f019
 800efb4:	0800f019 	.word	0x0800f019
 800efb8:	0800f019 	.word	0x0800f019
 800efbc:	0800f019 	.word	0x0800f019
 800efc0:	0800f019 	.word	0x0800f019
 800efc4:	0800f009 	.word	0x0800f009
 800efc8:	0800f019 	.word	0x0800f019
 800efcc:	0800f019 	.word	0x0800f019
 800efd0:	0800f019 	.word	0x0800f019
 800efd4:	0800f019 	.word	0x0800f019
 800efd8:	0800f019 	.word	0x0800f019
 800efdc:	0800f019 	.word	0x0800f019
 800efe0:	0800f019 	.word	0x0800f019
 800efe4:	0800f011 	.word	0x0800f011
 800efe8:	2301      	movs	r3, #1
 800efea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800efee:	e0bc      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eff0:	2304      	movs	r3, #4
 800eff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800eff6:	e0b8      	b.n	800f16a <UART_SetConfig+0x5a6>
 800eff8:	2308      	movs	r3, #8
 800effa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800effe:	e0b4      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f000:	2310      	movs	r3, #16
 800f002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f006:	e0b0      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f008:	2320      	movs	r3, #32
 800f00a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f00e:	e0ac      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f010:	2340      	movs	r3, #64	; 0x40
 800f012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f016:	e0a8      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f018:	2380      	movs	r3, #128	; 0x80
 800f01a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f01e:	e0a4      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f020:	697b      	ldr	r3, [r7, #20]
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	4a8f      	ldr	r2, [pc, #572]	; (800f264 <UART_SetConfig+0x6a0>)
 800f026:	4293      	cmp	r3, r2
 800f028:	d130      	bne.n	800f08c <UART_SetConfig+0x4c8>
 800f02a:	4b8d      	ldr	r3, [pc, #564]	; (800f260 <UART_SetConfig+0x69c>)
 800f02c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f02e:	f003 0307 	and.w	r3, r3, #7
 800f032:	2b05      	cmp	r3, #5
 800f034:	d826      	bhi.n	800f084 <UART_SetConfig+0x4c0>
 800f036:	a201      	add	r2, pc, #4	; (adr r2, 800f03c <UART_SetConfig+0x478>)
 800f038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f03c:	0800f055 	.word	0x0800f055
 800f040:	0800f05d 	.word	0x0800f05d
 800f044:	0800f065 	.word	0x0800f065
 800f048:	0800f06d 	.word	0x0800f06d
 800f04c:	0800f075 	.word	0x0800f075
 800f050:	0800f07d 	.word	0x0800f07d
 800f054:	2300      	movs	r3, #0
 800f056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f05a:	e086      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f05c:	2304      	movs	r3, #4
 800f05e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f062:	e082      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f064:	2308      	movs	r3, #8
 800f066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f06a:	e07e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f06c:	2310      	movs	r3, #16
 800f06e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f072:	e07a      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f074:	2320      	movs	r3, #32
 800f076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f07a:	e076      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f07c:	2340      	movs	r3, #64	; 0x40
 800f07e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f082:	e072      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f084:	2380      	movs	r3, #128	; 0x80
 800f086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f08a:	e06e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	681b      	ldr	r3, [r3, #0]
 800f090:	4a75      	ldr	r2, [pc, #468]	; (800f268 <UART_SetConfig+0x6a4>)
 800f092:	4293      	cmp	r3, r2
 800f094:	d130      	bne.n	800f0f8 <UART_SetConfig+0x534>
 800f096:	4b72      	ldr	r3, [pc, #456]	; (800f260 <UART_SetConfig+0x69c>)
 800f098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f09a:	f003 0307 	and.w	r3, r3, #7
 800f09e:	2b05      	cmp	r3, #5
 800f0a0:	d826      	bhi.n	800f0f0 <UART_SetConfig+0x52c>
 800f0a2:	a201      	add	r2, pc, #4	; (adr r2, 800f0a8 <UART_SetConfig+0x4e4>)
 800f0a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0a8:	0800f0c1 	.word	0x0800f0c1
 800f0ac:	0800f0c9 	.word	0x0800f0c9
 800f0b0:	0800f0d1 	.word	0x0800f0d1
 800f0b4:	0800f0d9 	.word	0x0800f0d9
 800f0b8:	0800f0e1 	.word	0x0800f0e1
 800f0bc:	0800f0e9 	.word	0x0800f0e9
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0c6:	e050      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0c8:	2304      	movs	r3, #4
 800f0ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ce:	e04c      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0d0:	2308      	movs	r3, #8
 800f0d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0d6:	e048      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0d8:	2310      	movs	r3, #16
 800f0da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0de:	e044      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0e0:	2320      	movs	r3, #32
 800f0e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0e6:	e040      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0e8:	2340      	movs	r3, #64	; 0x40
 800f0ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0ee:	e03c      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0f0:	2380      	movs	r3, #128	; 0x80
 800f0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f0f6:	e038      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f0f8:	697b      	ldr	r3, [r7, #20]
 800f0fa:	681b      	ldr	r3, [r3, #0]
 800f0fc:	4a5b      	ldr	r2, [pc, #364]	; (800f26c <UART_SetConfig+0x6a8>)
 800f0fe:	4293      	cmp	r3, r2
 800f100:	d130      	bne.n	800f164 <UART_SetConfig+0x5a0>
 800f102:	4b57      	ldr	r3, [pc, #348]	; (800f260 <UART_SetConfig+0x69c>)
 800f104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800f106:	f003 0307 	and.w	r3, r3, #7
 800f10a:	2b05      	cmp	r3, #5
 800f10c:	d826      	bhi.n	800f15c <UART_SetConfig+0x598>
 800f10e:	a201      	add	r2, pc, #4	; (adr r2, 800f114 <UART_SetConfig+0x550>)
 800f110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f114:	0800f12d 	.word	0x0800f12d
 800f118:	0800f135 	.word	0x0800f135
 800f11c:	0800f13d 	.word	0x0800f13d
 800f120:	0800f145 	.word	0x0800f145
 800f124:	0800f14d 	.word	0x0800f14d
 800f128:	0800f155 	.word	0x0800f155
 800f12c:	2302      	movs	r3, #2
 800f12e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f132:	e01a      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f134:	2304      	movs	r3, #4
 800f136:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f13a:	e016      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f13c:	2308      	movs	r3, #8
 800f13e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f142:	e012      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f144:	2310      	movs	r3, #16
 800f146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f14a:	e00e      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f14c:	2320      	movs	r3, #32
 800f14e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f152:	e00a      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f154:	2340      	movs	r3, #64	; 0x40
 800f156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f15a:	e006      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f15c:	2380      	movs	r3, #128	; 0x80
 800f15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f162:	e002      	b.n	800f16a <UART_SetConfig+0x5a6>
 800f164:	2380      	movs	r3, #128	; 0x80
 800f166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800f16a:	697b      	ldr	r3, [r7, #20]
 800f16c:	681b      	ldr	r3, [r3, #0]
 800f16e:	4a3f      	ldr	r2, [pc, #252]	; (800f26c <UART_SetConfig+0x6a8>)
 800f170:	4293      	cmp	r3, r2
 800f172:	f040 80f8 	bne.w	800f366 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800f176:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f17a:	2b20      	cmp	r3, #32
 800f17c:	dc46      	bgt.n	800f20c <UART_SetConfig+0x648>
 800f17e:	2b02      	cmp	r3, #2
 800f180:	f2c0 8082 	blt.w	800f288 <UART_SetConfig+0x6c4>
 800f184:	3b02      	subs	r3, #2
 800f186:	2b1e      	cmp	r3, #30
 800f188:	d87e      	bhi.n	800f288 <UART_SetConfig+0x6c4>
 800f18a:	a201      	add	r2, pc, #4	; (adr r2, 800f190 <UART_SetConfig+0x5cc>)
 800f18c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f190:	0800f213 	.word	0x0800f213
 800f194:	0800f289 	.word	0x0800f289
 800f198:	0800f21b 	.word	0x0800f21b
 800f19c:	0800f289 	.word	0x0800f289
 800f1a0:	0800f289 	.word	0x0800f289
 800f1a4:	0800f289 	.word	0x0800f289
 800f1a8:	0800f22b 	.word	0x0800f22b
 800f1ac:	0800f289 	.word	0x0800f289
 800f1b0:	0800f289 	.word	0x0800f289
 800f1b4:	0800f289 	.word	0x0800f289
 800f1b8:	0800f289 	.word	0x0800f289
 800f1bc:	0800f289 	.word	0x0800f289
 800f1c0:	0800f289 	.word	0x0800f289
 800f1c4:	0800f289 	.word	0x0800f289
 800f1c8:	0800f23b 	.word	0x0800f23b
 800f1cc:	0800f289 	.word	0x0800f289
 800f1d0:	0800f289 	.word	0x0800f289
 800f1d4:	0800f289 	.word	0x0800f289
 800f1d8:	0800f289 	.word	0x0800f289
 800f1dc:	0800f289 	.word	0x0800f289
 800f1e0:	0800f289 	.word	0x0800f289
 800f1e4:	0800f289 	.word	0x0800f289
 800f1e8:	0800f289 	.word	0x0800f289
 800f1ec:	0800f289 	.word	0x0800f289
 800f1f0:	0800f289 	.word	0x0800f289
 800f1f4:	0800f289 	.word	0x0800f289
 800f1f8:	0800f289 	.word	0x0800f289
 800f1fc:	0800f289 	.word	0x0800f289
 800f200:	0800f289 	.word	0x0800f289
 800f204:	0800f289 	.word	0x0800f289
 800f208:	0800f27b 	.word	0x0800f27b
 800f20c:	2b40      	cmp	r3, #64	; 0x40
 800f20e:	d037      	beq.n	800f280 <UART_SetConfig+0x6bc>
 800f210:	e03a      	b.n	800f288 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800f212:	f7fd fd3b 	bl	800cc8c <HAL_RCCEx_GetD3PCLK1Freq>
 800f216:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f218:	e03c      	b.n	800f294 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f21a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f21e:	4618      	mov	r0, r3
 800f220:	f7fd fd4a 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f226:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f228:	e034      	b.n	800f294 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f22a:	f107 0318 	add.w	r3, r7, #24
 800f22e:	4618      	mov	r0, r3
 800f230:	f7fd fe96 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f234:	69fb      	ldr	r3, [r7, #28]
 800f236:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f238:	e02c      	b.n	800f294 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f23a:	4b09      	ldr	r3, [pc, #36]	; (800f260 <UART_SetConfig+0x69c>)
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	f003 0320 	and.w	r3, r3, #32
 800f242:	2b00      	cmp	r3, #0
 800f244:	d016      	beq.n	800f274 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f246:	4b06      	ldr	r3, [pc, #24]	; (800f260 <UART_SetConfig+0x69c>)
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	08db      	lsrs	r3, r3, #3
 800f24c:	f003 0303 	and.w	r3, r3, #3
 800f250:	4a07      	ldr	r2, [pc, #28]	; (800f270 <UART_SetConfig+0x6ac>)
 800f252:	fa22 f303 	lsr.w	r3, r2, r3
 800f256:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f258:	e01c      	b.n	800f294 <UART_SetConfig+0x6d0>
 800f25a:	bf00      	nop
 800f25c:	40011400 	.word	0x40011400
 800f260:	58024400 	.word	0x58024400
 800f264:	40007800 	.word	0x40007800
 800f268:	40007c00 	.word	0x40007c00
 800f26c:	58000c00 	.word	0x58000c00
 800f270:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800f274:	4b9d      	ldr	r3, [pc, #628]	; (800f4ec <UART_SetConfig+0x928>)
 800f276:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f278:	e00c      	b.n	800f294 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f27a:	4b9d      	ldr	r3, [pc, #628]	; (800f4f0 <UART_SetConfig+0x92c>)
 800f27c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f27e:	e009      	b.n	800f294 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f280:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f284:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f286:	e005      	b.n	800f294 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800f288:	2300      	movs	r3, #0
 800f28a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f28c:	2301      	movs	r3, #1
 800f28e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f292:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800f294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f296:	2b00      	cmp	r3, #0
 800f298:	f000 81de 	beq.w	800f658 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800f29c:	697b      	ldr	r3, [r7, #20]
 800f29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2a0:	4a94      	ldr	r2, [pc, #592]	; (800f4f4 <UART_SetConfig+0x930>)
 800f2a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2aa:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2ae:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2b0:	697b      	ldr	r3, [r7, #20]
 800f2b2:	685a      	ldr	r2, [r3, #4]
 800f2b4:	4613      	mov	r3, r2
 800f2b6:	005b      	lsls	r3, r3, #1
 800f2b8:	4413      	add	r3, r2
 800f2ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2bc:	429a      	cmp	r2, r3
 800f2be:	d305      	bcc.n	800f2cc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800f2c0:	697b      	ldr	r3, [r7, #20]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800f2c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f2c8:	429a      	cmp	r2, r3
 800f2ca:	d903      	bls.n	800f2d4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800f2cc:	2301      	movs	r3, #1
 800f2ce:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f2d2:	e1c1      	b.n	800f658 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f2d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f2d6:	2200      	movs	r2, #0
 800f2d8:	60bb      	str	r3, [r7, #8]
 800f2da:	60fa      	str	r2, [r7, #12]
 800f2dc:	697b      	ldr	r3, [r7, #20]
 800f2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e0:	4a84      	ldr	r2, [pc, #528]	; (800f4f4 <UART_SetConfig+0x930>)
 800f2e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f2e6:	b29b      	uxth	r3, r3
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	607a      	str	r2, [r7, #4]
 800f2ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f2f2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800f2f6:	f7f1 f843 	bl	8000380 <__aeabi_uldivmod>
 800f2fa:	4602      	mov	r2, r0
 800f2fc:	460b      	mov	r3, r1
 800f2fe:	4610      	mov	r0, r2
 800f300:	4619      	mov	r1, r3
 800f302:	f04f 0200 	mov.w	r2, #0
 800f306:	f04f 0300 	mov.w	r3, #0
 800f30a:	020b      	lsls	r3, r1, #8
 800f30c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800f310:	0202      	lsls	r2, r0, #8
 800f312:	6979      	ldr	r1, [r7, #20]
 800f314:	6849      	ldr	r1, [r1, #4]
 800f316:	0849      	lsrs	r1, r1, #1
 800f318:	2000      	movs	r0, #0
 800f31a:	460c      	mov	r4, r1
 800f31c:	4605      	mov	r5, r0
 800f31e:	eb12 0804 	adds.w	r8, r2, r4
 800f322:	eb43 0905 	adc.w	r9, r3, r5
 800f326:	697b      	ldr	r3, [r7, #20]
 800f328:	685b      	ldr	r3, [r3, #4]
 800f32a:	2200      	movs	r2, #0
 800f32c:	469a      	mov	sl, r3
 800f32e:	4693      	mov	fp, r2
 800f330:	4652      	mov	r2, sl
 800f332:	465b      	mov	r3, fp
 800f334:	4640      	mov	r0, r8
 800f336:	4649      	mov	r1, r9
 800f338:	f7f1 f822 	bl	8000380 <__aeabi_uldivmod>
 800f33c:	4602      	mov	r2, r0
 800f33e:	460b      	mov	r3, r1
 800f340:	4613      	mov	r3, r2
 800f342:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800f344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800f34a:	d308      	bcc.n	800f35e <UART_SetConfig+0x79a>
 800f34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f34e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f352:	d204      	bcs.n	800f35e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800f354:	697b      	ldr	r3, [r7, #20]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800f35a:	60da      	str	r2, [r3, #12]
 800f35c:	e17c      	b.n	800f658 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800f35e:	2301      	movs	r3, #1
 800f360:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f364:	e178      	b.n	800f658 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800f366:	697b      	ldr	r3, [r7, #20]
 800f368:	69db      	ldr	r3, [r3, #28]
 800f36a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800f36e:	f040 80c5 	bne.w	800f4fc <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800f372:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f376:	2b20      	cmp	r3, #32
 800f378:	dc48      	bgt.n	800f40c <UART_SetConfig+0x848>
 800f37a:	2b00      	cmp	r3, #0
 800f37c:	db7b      	blt.n	800f476 <UART_SetConfig+0x8b2>
 800f37e:	2b20      	cmp	r3, #32
 800f380:	d879      	bhi.n	800f476 <UART_SetConfig+0x8b2>
 800f382:	a201      	add	r2, pc, #4	; (adr r2, 800f388 <UART_SetConfig+0x7c4>)
 800f384:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f388:	0800f413 	.word	0x0800f413
 800f38c:	0800f41b 	.word	0x0800f41b
 800f390:	0800f477 	.word	0x0800f477
 800f394:	0800f477 	.word	0x0800f477
 800f398:	0800f423 	.word	0x0800f423
 800f39c:	0800f477 	.word	0x0800f477
 800f3a0:	0800f477 	.word	0x0800f477
 800f3a4:	0800f477 	.word	0x0800f477
 800f3a8:	0800f433 	.word	0x0800f433
 800f3ac:	0800f477 	.word	0x0800f477
 800f3b0:	0800f477 	.word	0x0800f477
 800f3b4:	0800f477 	.word	0x0800f477
 800f3b8:	0800f477 	.word	0x0800f477
 800f3bc:	0800f477 	.word	0x0800f477
 800f3c0:	0800f477 	.word	0x0800f477
 800f3c4:	0800f477 	.word	0x0800f477
 800f3c8:	0800f443 	.word	0x0800f443
 800f3cc:	0800f477 	.word	0x0800f477
 800f3d0:	0800f477 	.word	0x0800f477
 800f3d4:	0800f477 	.word	0x0800f477
 800f3d8:	0800f477 	.word	0x0800f477
 800f3dc:	0800f477 	.word	0x0800f477
 800f3e0:	0800f477 	.word	0x0800f477
 800f3e4:	0800f477 	.word	0x0800f477
 800f3e8:	0800f477 	.word	0x0800f477
 800f3ec:	0800f477 	.word	0x0800f477
 800f3f0:	0800f477 	.word	0x0800f477
 800f3f4:	0800f477 	.word	0x0800f477
 800f3f8:	0800f477 	.word	0x0800f477
 800f3fc:	0800f477 	.word	0x0800f477
 800f400:	0800f477 	.word	0x0800f477
 800f404:	0800f477 	.word	0x0800f477
 800f408:	0800f469 	.word	0x0800f469
 800f40c:	2b40      	cmp	r3, #64	; 0x40
 800f40e:	d02e      	beq.n	800f46e <UART_SetConfig+0x8aa>
 800f410:	e031      	b.n	800f476 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f412:	f7fc fcc9 	bl	800bda8 <HAL_RCC_GetPCLK1Freq>
 800f416:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f418:	e033      	b.n	800f482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f41a:	f7fc fcdb 	bl	800bdd4 <HAL_RCC_GetPCLK2Freq>
 800f41e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f420:	e02f      	b.n	800f482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f426:	4618      	mov	r0, r3
 800f428:	f7fd fc46 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f42c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f430:	e027      	b.n	800f482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f432:	f107 0318 	add.w	r3, r7, #24
 800f436:	4618      	mov	r0, r3
 800f438:	f7fd fd92 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f440:	e01f      	b.n	800f482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f442:	4b2d      	ldr	r3, [pc, #180]	; (800f4f8 <UART_SetConfig+0x934>)
 800f444:	681b      	ldr	r3, [r3, #0]
 800f446:	f003 0320 	and.w	r3, r3, #32
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	d009      	beq.n	800f462 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f44e:	4b2a      	ldr	r3, [pc, #168]	; (800f4f8 <UART_SetConfig+0x934>)
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	08db      	lsrs	r3, r3, #3
 800f454:	f003 0303 	and.w	r3, r3, #3
 800f458:	4a24      	ldr	r2, [pc, #144]	; (800f4ec <UART_SetConfig+0x928>)
 800f45a:	fa22 f303 	lsr.w	r3, r2, r3
 800f45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f460:	e00f      	b.n	800f482 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800f462:	4b22      	ldr	r3, [pc, #136]	; (800f4ec <UART_SetConfig+0x928>)
 800f464:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f466:	e00c      	b.n	800f482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f468:	4b21      	ldr	r3, [pc, #132]	; (800f4f0 <UART_SetConfig+0x92c>)
 800f46a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f46c:	e009      	b.n	800f482 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f46e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f472:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f474:	e005      	b.n	800f482 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800f476:	2300      	movs	r3, #0
 800f478:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f47a:	2301      	movs	r3, #1
 800f47c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f480:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800f482:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f484:	2b00      	cmp	r3, #0
 800f486:	f000 80e7 	beq.w	800f658 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f48a:	697b      	ldr	r3, [r7, #20]
 800f48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f48e:	4a19      	ldr	r2, [pc, #100]	; (800f4f4 <UART_SetConfig+0x930>)
 800f490:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f494:	461a      	mov	r2, r3
 800f496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f498:	fbb3 f3f2 	udiv	r3, r3, r2
 800f49c:	005a      	lsls	r2, r3, #1
 800f49e:	697b      	ldr	r3, [r7, #20]
 800f4a0:	685b      	ldr	r3, [r3, #4]
 800f4a2:	085b      	lsrs	r3, r3, #1
 800f4a4:	441a      	add	r2, r3
 800f4a6:	697b      	ldr	r3, [r7, #20]
 800f4a8:	685b      	ldr	r3, [r3, #4]
 800f4aa:	fbb2 f3f3 	udiv	r3, r2, r3
 800f4ae:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b2:	2b0f      	cmp	r3, #15
 800f4b4:	d916      	bls.n	800f4e4 <UART_SetConfig+0x920>
 800f4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f4bc:	d212      	bcs.n	800f4e4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800f4be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	f023 030f 	bic.w	r3, r3, #15
 800f4c6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800f4c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f4ca:	085b      	lsrs	r3, r3, #1
 800f4cc:	b29b      	uxth	r3, r3
 800f4ce:	f003 0307 	and.w	r3, r3, #7
 800f4d2:	b29a      	uxth	r2, r3
 800f4d4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800f4da:	697b      	ldr	r3, [r7, #20]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800f4e0:	60da      	str	r2, [r3, #12]
 800f4e2:	e0b9      	b.n	800f658 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f4e4:	2301      	movs	r3, #1
 800f4e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800f4ea:	e0b5      	b.n	800f658 <UART_SetConfig+0xa94>
 800f4ec:	03d09000 	.word	0x03d09000
 800f4f0:	003d0900 	.word	0x003d0900
 800f4f4:	08012668 	.word	0x08012668
 800f4f8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800f4fc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800f500:	2b20      	cmp	r3, #32
 800f502:	dc49      	bgt.n	800f598 <UART_SetConfig+0x9d4>
 800f504:	2b00      	cmp	r3, #0
 800f506:	db7c      	blt.n	800f602 <UART_SetConfig+0xa3e>
 800f508:	2b20      	cmp	r3, #32
 800f50a:	d87a      	bhi.n	800f602 <UART_SetConfig+0xa3e>
 800f50c:	a201      	add	r2, pc, #4	; (adr r2, 800f514 <UART_SetConfig+0x950>)
 800f50e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f512:	bf00      	nop
 800f514:	0800f59f 	.word	0x0800f59f
 800f518:	0800f5a7 	.word	0x0800f5a7
 800f51c:	0800f603 	.word	0x0800f603
 800f520:	0800f603 	.word	0x0800f603
 800f524:	0800f5af 	.word	0x0800f5af
 800f528:	0800f603 	.word	0x0800f603
 800f52c:	0800f603 	.word	0x0800f603
 800f530:	0800f603 	.word	0x0800f603
 800f534:	0800f5bf 	.word	0x0800f5bf
 800f538:	0800f603 	.word	0x0800f603
 800f53c:	0800f603 	.word	0x0800f603
 800f540:	0800f603 	.word	0x0800f603
 800f544:	0800f603 	.word	0x0800f603
 800f548:	0800f603 	.word	0x0800f603
 800f54c:	0800f603 	.word	0x0800f603
 800f550:	0800f603 	.word	0x0800f603
 800f554:	0800f5cf 	.word	0x0800f5cf
 800f558:	0800f603 	.word	0x0800f603
 800f55c:	0800f603 	.word	0x0800f603
 800f560:	0800f603 	.word	0x0800f603
 800f564:	0800f603 	.word	0x0800f603
 800f568:	0800f603 	.word	0x0800f603
 800f56c:	0800f603 	.word	0x0800f603
 800f570:	0800f603 	.word	0x0800f603
 800f574:	0800f603 	.word	0x0800f603
 800f578:	0800f603 	.word	0x0800f603
 800f57c:	0800f603 	.word	0x0800f603
 800f580:	0800f603 	.word	0x0800f603
 800f584:	0800f603 	.word	0x0800f603
 800f588:	0800f603 	.word	0x0800f603
 800f58c:	0800f603 	.word	0x0800f603
 800f590:	0800f603 	.word	0x0800f603
 800f594:	0800f5f5 	.word	0x0800f5f5
 800f598:	2b40      	cmp	r3, #64	; 0x40
 800f59a:	d02e      	beq.n	800f5fa <UART_SetConfig+0xa36>
 800f59c:	e031      	b.n	800f602 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800f59e:	f7fc fc03 	bl	800bda8 <HAL_RCC_GetPCLK1Freq>
 800f5a2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5a4:	e033      	b.n	800f60e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800f5a6:	f7fc fc15 	bl	800bdd4 <HAL_RCC_GetPCLK2Freq>
 800f5aa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800f5ac:	e02f      	b.n	800f60e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800f5ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	f7fd fb80 	bl	800ccb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800f5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5bc:	e027      	b.n	800f60e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800f5be:	f107 0318 	add.w	r3, r7, #24
 800f5c2:	4618      	mov	r0, r3
 800f5c4:	f7fd fccc 	bl	800cf60 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800f5c8:	69fb      	ldr	r3, [r7, #28]
 800f5ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5cc:	e01f      	b.n	800f60e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f5ce:	4b2d      	ldr	r3, [pc, #180]	; (800f684 <UART_SetConfig+0xac0>)
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	f003 0320 	and.w	r3, r3, #32
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d009      	beq.n	800f5ee <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800f5da:	4b2a      	ldr	r3, [pc, #168]	; (800f684 <UART_SetConfig+0xac0>)
 800f5dc:	681b      	ldr	r3, [r3, #0]
 800f5de:	08db      	lsrs	r3, r3, #3
 800f5e0:	f003 0303 	and.w	r3, r3, #3
 800f5e4:	4a28      	ldr	r2, [pc, #160]	; (800f688 <UART_SetConfig+0xac4>)
 800f5e6:	fa22 f303 	lsr.w	r3, r2, r3
 800f5ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800f5ec:	e00f      	b.n	800f60e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800f5ee:	4b26      	ldr	r3, [pc, #152]	; (800f688 <UART_SetConfig+0xac4>)
 800f5f0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5f2:	e00c      	b.n	800f60e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800f5f4:	4b25      	ldr	r3, [pc, #148]	; (800f68c <UART_SetConfig+0xac8>)
 800f5f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f5f8:	e009      	b.n	800f60e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800f5fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800f5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800f600:	e005      	b.n	800f60e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800f602:	2300      	movs	r3, #0
 800f604:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800f606:	2301      	movs	r3, #1
 800f608:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800f60c:	bf00      	nop
    }

    if (pclk != 0U)
 800f60e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f610:	2b00      	cmp	r3, #0
 800f612:	d021      	beq.n	800f658 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800f614:	697b      	ldr	r3, [r7, #20]
 800f616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f618:	4a1d      	ldr	r2, [pc, #116]	; (800f690 <UART_SetConfig+0xacc>)
 800f61a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800f61e:	461a      	mov	r2, r3
 800f620:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f622:	fbb3 f2f2 	udiv	r2, r3, r2
 800f626:	697b      	ldr	r3, [r7, #20]
 800f628:	685b      	ldr	r3, [r3, #4]
 800f62a:	085b      	lsrs	r3, r3, #1
 800f62c:	441a      	add	r2, r3
 800f62e:	697b      	ldr	r3, [r7, #20]
 800f630:	685b      	ldr	r3, [r3, #4]
 800f632:	fbb2 f3f3 	udiv	r3, r2, r3
 800f636:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800f638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f63a:	2b0f      	cmp	r3, #15
 800f63c:	d909      	bls.n	800f652 <UART_SetConfig+0xa8e>
 800f63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800f644:	d205      	bcs.n	800f652 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800f646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f648:	b29a      	uxth	r2, r3
 800f64a:	697b      	ldr	r3, [r7, #20]
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	60da      	str	r2, [r3, #12]
 800f650:	e002      	b.n	800f658 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800f652:	2301      	movs	r3, #1
 800f654:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800f658:	697b      	ldr	r3, [r7, #20]
 800f65a:	2201      	movs	r2, #1
 800f65c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	2201      	movs	r2, #1
 800f664:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800f668:	697b      	ldr	r3, [r7, #20]
 800f66a:	2200      	movs	r2, #0
 800f66c:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800f66e:	697b      	ldr	r3, [r7, #20]
 800f670:	2200      	movs	r2, #0
 800f672:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800f674:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800f678:	4618      	mov	r0, r3
 800f67a:	3748      	adds	r7, #72	; 0x48
 800f67c:	46bd      	mov	sp, r7
 800f67e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800f682:	bf00      	nop
 800f684:	58024400 	.word	0x58024400
 800f688:	03d09000 	.word	0x03d09000
 800f68c:	003d0900 	.word	0x003d0900
 800f690:	08012668 	.word	0x08012668

0800f694 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800f694:	b480      	push	{r7}
 800f696:	b083      	sub	sp, #12
 800f698:	af00      	add	r7, sp, #0
 800f69a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6a0:	f003 0301 	and.w	r3, r3, #1
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00a      	beq.n	800f6be <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	685b      	ldr	r3, [r3, #4]
 800f6ae:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800f6b2:	687b      	ldr	r3, [r7, #4]
 800f6b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	430a      	orrs	r2, r1
 800f6bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6c2:	f003 0302 	and.w	r3, r3, #2
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d00a      	beq.n	800f6e0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800f6ca:	687b      	ldr	r3, [r7, #4]
 800f6cc:	681b      	ldr	r3, [r3, #0]
 800f6ce:	685b      	ldr	r3, [r3, #4]
 800f6d0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800f6d4:	687b      	ldr	r3, [r7, #4]
 800f6d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	681b      	ldr	r3, [r3, #0]
 800f6dc:	430a      	orrs	r2, r1
 800f6de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f6e4:	f003 0304 	and.w	r3, r3, #4
 800f6e8:	2b00      	cmp	r3, #0
 800f6ea:	d00a      	beq.n	800f702 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	685b      	ldr	r3, [r3, #4]
 800f6f2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	430a      	orrs	r2, r1
 800f700:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f706:	f003 0308 	and.w	r3, r3, #8
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00a      	beq.n	800f724 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	685b      	ldr	r3, [r3, #4]
 800f714:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800f718:	687b      	ldr	r3, [r7, #4]
 800f71a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	430a      	orrs	r2, r1
 800f722:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f728:	f003 0310 	and.w	r3, r3, #16
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	d00a      	beq.n	800f746 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800f730:	687b      	ldr	r3, [r7, #4]
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	689b      	ldr	r3, [r3, #8]
 800f736:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	430a      	orrs	r2, r1
 800f744:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800f746:	687b      	ldr	r3, [r7, #4]
 800f748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f74a:	f003 0320 	and.w	r3, r3, #32
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d00a      	beq.n	800f768 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	681b      	ldr	r3, [r3, #0]
 800f756:	689b      	ldr	r3, [r3, #8]
 800f758:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	681b      	ldr	r3, [r3, #0]
 800f764:	430a      	orrs	r2, r1
 800f766:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f76c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f770:	2b00      	cmp	r3, #0
 800f772:	d01a      	beq.n	800f7aa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800f774:	687b      	ldr	r3, [r7, #4]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	685b      	ldr	r3, [r3, #4]
 800f77a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	430a      	orrs	r2, r1
 800f788:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f78e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f792:	d10a      	bne.n	800f7aa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800f794:	687b      	ldr	r3, [r7, #4]
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	685b      	ldr	r3, [r3, #4]
 800f79a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	681b      	ldr	r3, [r3, #0]
 800f7a6:	430a      	orrs	r2, r1
 800f7a8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d00a      	beq.n	800f7cc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	685b      	ldr	r3, [r3, #4]
 800f7bc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800f7c0:	687b      	ldr	r3, [r7, #4]
 800f7c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	430a      	orrs	r2, r1
 800f7ca:	605a      	str	r2, [r3, #4]
  }
}
 800f7cc:	bf00      	nop
 800f7ce:	370c      	adds	r7, #12
 800f7d0:	46bd      	mov	sp, r7
 800f7d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d6:	4770      	bx	lr

0800f7d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b086      	sub	sp, #24
 800f7dc:	af02      	add	r7, sp, #8
 800f7de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	2200      	movs	r2, #0
 800f7e4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800f7e8:	f7f7 ffca 	bl	8007780 <HAL_GetTick>
 800f7ec:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	f003 0308 	and.w	r3, r3, #8
 800f7f8:	2b08      	cmp	r3, #8
 800f7fa:	d10e      	bne.n	800f81a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f7fc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f800:	9300      	str	r3, [sp, #0]
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	2200      	movs	r2, #0
 800f806:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800f80a:	6878      	ldr	r0, [r7, #4]
 800f80c:	f000 f82f 	bl	800f86e <UART_WaitOnFlagUntilTimeout>
 800f810:	4603      	mov	r3, r0
 800f812:	2b00      	cmp	r3, #0
 800f814:	d001      	beq.n	800f81a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f816:	2303      	movs	r3, #3
 800f818:	e025      	b.n	800f866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	681b      	ldr	r3, [r3, #0]
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	f003 0304 	and.w	r3, r3, #4
 800f824:	2b04      	cmp	r3, #4
 800f826:	d10e      	bne.n	800f846 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800f828:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	68fb      	ldr	r3, [r7, #12]
 800f830:	2200      	movs	r2, #0
 800f832:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800f836:	6878      	ldr	r0, [r7, #4]
 800f838:	f000 f819 	bl	800f86e <UART_WaitOnFlagUntilTimeout>
 800f83c:	4603      	mov	r3, r0
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d001      	beq.n	800f846 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800f842:	2303      	movs	r3, #3
 800f844:	e00f      	b.n	800f866 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	2220      	movs	r2, #32
 800f84a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800f84e:	687b      	ldr	r3, [r7, #4]
 800f850:	2220      	movs	r2, #32
 800f852:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	2200      	movs	r2, #0
 800f85a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800f85c:	687b      	ldr	r3, [r7, #4]
 800f85e:	2200      	movs	r2, #0
 800f860:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800f864:	2300      	movs	r3, #0
}
 800f866:	4618      	mov	r0, r3
 800f868:	3710      	adds	r7, #16
 800f86a:	46bd      	mov	sp, r7
 800f86c:	bd80      	pop	{r7, pc}

0800f86e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800f86e:	b580      	push	{r7, lr}
 800f870:	b09c      	sub	sp, #112	; 0x70
 800f872:	af00      	add	r7, sp, #0
 800f874:	60f8      	str	r0, [r7, #12]
 800f876:	60b9      	str	r1, [r7, #8]
 800f878:	603b      	str	r3, [r7, #0]
 800f87a:	4613      	mov	r3, r2
 800f87c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f87e:	e0a9      	b.n	800f9d4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800f880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f882:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f886:	f000 80a5 	beq.w	800f9d4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800f88a:	f7f7 ff79 	bl	8007780 <HAL_GetTick>
 800f88e:	4602      	mov	r2, r0
 800f890:	683b      	ldr	r3, [r7, #0]
 800f892:	1ad3      	subs	r3, r2, r3
 800f894:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800f896:	429a      	cmp	r2, r3
 800f898:	d302      	bcc.n	800f8a0 <UART_WaitOnFlagUntilTimeout+0x32>
 800f89a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d140      	bne.n	800f922 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	681b      	ldr	r3, [r3, #0]
 800f8a4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f8a8:	e853 3f00 	ldrex	r3, [r3]
 800f8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800f8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f8b0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f8b4:	667b      	str	r3, [r7, #100]	; 0x64
 800f8b6:	68fb      	ldr	r3, [r7, #12]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	461a      	mov	r2, r3
 800f8bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f8be:	65fb      	str	r3, [r7, #92]	; 0x5c
 800f8c0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800f8c4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800f8c6:	e841 2300 	strex	r3, r2, [r1]
 800f8ca:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800f8cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d1e6      	bne.n	800f8a0 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	681b      	ldr	r3, [r3, #0]
 800f8d6:	3308      	adds	r3, #8
 800f8d8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f8dc:	e853 3f00 	ldrex	r3, [r3]
 800f8e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f8e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f8e4:	f023 0301 	bic.w	r3, r3, #1
 800f8e8:	663b      	str	r3, [r7, #96]	; 0x60
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	3308      	adds	r3, #8
 800f8f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800f8f2:	64ba      	str	r2, [r7, #72]	; 0x48
 800f8f4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f8f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f8f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f8fa:	e841 2300 	strex	r3, r2, [r1]
 800f8fe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800f900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f902:	2b00      	cmp	r3, #0
 800f904:	d1e5      	bne.n	800f8d2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	2220      	movs	r2, #32
 800f90a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	2220      	movs	r2, #32
 800f912:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800f916:	68fb      	ldr	r3, [r7, #12]
 800f918:	2200      	movs	r2, #0
 800f91a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800f91e:	2303      	movs	r3, #3
 800f920:	e069      	b.n	800f9f6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800f922:	68fb      	ldr	r3, [r7, #12]
 800f924:	681b      	ldr	r3, [r3, #0]
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	f003 0304 	and.w	r3, r3, #4
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	d051      	beq.n	800f9d4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800f930:	68fb      	ldr	r3, [r7, #12]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	69db      	ldr	r3, [r3, #28]
 800f936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f93a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f93e:	d149      	bne.n	800f9d4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f940:	68fb      	ldr	r3, [r7, #12]
 800f942:	681b      	ldr	r3, [r3, #0]
 800f944:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f948:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800f94a:	68fb      	ldr	r3, [r7, #12]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f952:	e853 3f00 	ldrex	r3, [r3]
 800f956:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f95a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800f95e:	66fb      	str	r3, [r7, #108]	; 0x6c
 800f960:	68fb      	ldr	r3, [r7, #12]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	461a      	mov	r2, r3
 800f966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800f968:	637b      	str	r3, [r7, #52]	; 0x34
 800f96a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f96c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800f96e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f970:	e841 2300 	strex	r3, r2, [r1]
 800f974:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800f976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f978:	2b00      	cmp	r3, #0
 800f97a:	d1e6      	bne.n	800f94a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f97c:	68fb      	ldr	r3, [r7, #12]
 800f97e:	681b      	ldr	r3, [r3, #0]
 800f980:	3308      	adds	r3, #8
 800f982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f984:	697b      	ldr	r3, [r7, #20]
 800f986:	e853 3f00 	ldrex	r3, [r3]
 800f98a:	613b      	str	r3, [r7, #16]
   return(result);
 800f98c:	693b      	ldr	r3, [r7, #16]
 800f98e:	f023 0301 	bic.w	r3, r3, #1
 800f992:	66bb      	str	r3, [r7, #104]	; 0x68
 800f994:	68fb      	ldr	r3, [r7, #12]
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	3308      	adds	r3, #8
 800f99a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800f99c:	623a      	str	r2, [r7, #32]
 800f99e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f9a0:	69f9      	ldr	r1, [r7, #28]
 800f9a2:	6a3a      	ldr	r2, [r7, #32]
 800f9a4:	e841 2300 	strex	r3, r2, [r1]
 800f9a8:	61bb      	str	r3, [r7, #24]
   return(result);
 800f9aa:	69bb      	ldr	r3, [r7, #24]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d1e5      	bne.n	800f97c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800f9b0:	68fb      	ldr	r3, [r7, #12]
 800f9b2:	2220      	movs	r2, #32
 800f9b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800f9b8:	68fb      	ldr	r3, [r7, #12]
 800f9ba:	2220      	movs	r2, #32
 800f9bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	2220      	movs	r2, #32
 800f9c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	2200      	movs	r2, #0
 800f9cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800f9d0:	2303      	movs	r3, #3
 800f9d2:	e010      	b.n	800f9f6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	69da      	ldr	r2, [r3, #28]
 800f9da:	68bb      	ldr	r3, [r7, #8]
 800f9dc:	4013      	ands	r3, r2
 800f9de:	68ba      	ldr	r2, [r7, #8]
 800f9e0:	429a      	cmp	r2, r3
 800f9e2:	bf0c      	ite	eq
 800f9e4:	2301      	moveq	r3, #1
 800f9e6:	2300      	movne	r3, #0
 800f9e8:	b2db      	uxtb	r3, r3
 800f9ea:	461a      	mov	r2, r3
 800f9ec:	79fb      	ldrb	r3, [r7, #7]
 800f9ee:	429a      	cmp	r2, r3
 800f9f0:	f43f af46 	beq.w	800f880 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f9f4:	2300      	movs	r3, #0
}
 800f9f6:	4618      	mov	r0, r3
 800f9f8:	3770      	adds	r7, #112	; 0x70
 800f9fa:	46bd      	mov	sp, r7
 800f9fc:	bd80      	pop	{r7, pc}
	...

0800fa00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800fa00:	b480      	push	{r7}
 800fa02:	b095      	sub	sp, #84	; 0x54
 800fa04:	af00      	add	r7, sp, #0
 800fa06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fa10:	e853 3f00 	ldrex	r3, [r3]
 800fa14:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800fa16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fa18:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fa1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	461a      	mov	r2, r3
 800fa24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fa26:	643b      	str	r3, [r7, #64]	; 0x40
 800fa28:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa2a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800fa2c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800fa2e:	e841 2300 	strex	r3, r2, [r1]
 800fa32:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800fa34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d1e6      	bne.n	800fa08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	3308      	adds	r3, #8
 800fa40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa42:	6a3b      	ldr	r3, [r7, #32]
 800fa44:	e853 3f00 	ldrex	r3, [r3]
 800fa48:	61fb      	str	r3, [r7, #28]
   return(result);
 800fa4a:	69fa      	ldr	r2, [r7, #28]
 800fa4c:	4b1e      	ldr	r3, [pc, #120]	; (800fac8 <UART_EndRxTransfer+0xc8>)
 800fa4e:	4013      	ands	r3, r2
 800fa50:	64bb      	str	r3, [r7, #72]	; 0x48
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	3308      	adds	r3, #8
 800fa58:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fa5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800fa5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800fa60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fa62:	e841 2300 	strex	r3, r2, [r1]
 800fa66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800fa68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa6a:	2b00      	cmp	r3, #0
 800fa6c:	d1e5      	bne.n	800fa3a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa72:	2b01      	cmp	r3, #1
 800fa74:	d118      	bne.n	800faa8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fa7c:	68fb      	ldr	r3, [r7, #12]
 800fa7e:	e853 3f00 	ldrex	r3, [r3]
 800fa82:	60bb      	str	r3, [r7, #8]
   return(result);
 800fa84:	68bb      	ldr	r3, [r7, #8]
 800fa86:	f023 0310 	bic.w	r3, r3, #16
 800fa8a:	647b      	str	r3, [r7, #68]	; 0x44
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	681b      	ldr	r3, [r3, #0]
 800fa90:	461a      	mov	r2, r3
 800fa92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800fa94:	61bb      	str	r3, [r7, #24]
 800fa96:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fa98:	6979      	ldr	r1, [r7, #20]
 800fa9a:	69ba      	ldr	r2, [r7, #24]
 800fa9c:	e841 2300 	strex	r3, r2, [r1]
 800faa0:	613b      	str	r3, [r7, #16]
   return(result);
 800faa2:	693b      	ldr	r3, [r7, #16]
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d1e6      	bne.n	800fa76 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2220      	movs	r2, #32
 800faac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fab0:	687b      	ldr	r3, [r7, #4]
 800fab2:	2200      	movs	r2, #0
 800fab4:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800fab6:	687b      	ldr	r3, [r7, #4]
 800fab8:	2200      	movs	r2, #0
 800faba:	671a      	str	r2, [r3, #112]	; 0x70
}
 800fabc:	bf00      	nop
 800fabe:	3754      	adds	r7, #84	; 0x54
 800fac0:	46bd      	mov	sp, r7
 800fac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fac6:	4770      	bx	lr
 800fac8:	effffffe 	.word	0xeffffffe

0800facc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800facc:	b580      	push	{r7, lr}
 800face:	b084      	sub	sp, #16
 800fad0:	af00      	add	r7, sp, #0
 800fad2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fad8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800fada:	68fb      	ldr	r3, [r7, #12]
 800fadc:	2200      	movs	r2, #0
 800fade:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800fae2:	68fb      	ldr	r3, [r7, #12]
 800fae4:	2200      	movs	r2, #0
 800fae6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800faea:	68f8      	ldr	r0, [r7, #12]
 800faec:	f7ff f854 	bl	800eb98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800faf0:	bf00      	nop
 800faf2:	3710      	adds	r7, #16
 800faf4:	46bd      	mov	sp, r7
 800faf6:	bd80      	pop	{r7, pc}

0800faf8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800faf8:	b580      	push	{r7, lr}
 800fafa:	b088      	sub	sp, #32
 800fafc:	af00      	add	r7, sp, #0
 800fafe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	681b      	ldr	r3, [r3, #0]
 800fb04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	e853 3f00 	ldrex	r3, [r3]
 800fb0c:	60bb      	str	r3, [r7, #8]
   return(result);
 800fb0e:	68bb      	ldr	r3, [r7, #8]
 800fb10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb14:	61fb      	str	r3, [r7, #28]
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	461a      	mov	r2, r3
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	61bb      	str	r3, [r7, #24]
 800fb20:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb22:	6979      	ldr	r1, [r7, #20]
 800fb24:	69ba      	ldr	r2, [r7, #24]
 800fb26:	e841 2300 	strex	r3, r2, [r1]
 800fb2a:	613b      	str	r3, [r7, #16]
   return(result);
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1e6      	bne.n	800fb00 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800fb32:	687b      	ldr	r3, [r7, #4]
 800fb34:	2220      	movs	r2, #32
 800fb36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	2200      	movs	r2, #0
 800fb3e:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800fb40:	6878      	ldr	r0, [r7, #4]
 800fb42:	f7ff f81f 	bl	800eb84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800fb46:	bf00      	nop
 800fb48:	3720      	adds	r7, #32
 800fb4a:	46bd      	mov	sp, r7
 800fb4c:	bd80      	pop	{r7, pc}

0800fb4e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800fb4e:	b480      	push	{r7}
 800fb50:	b083      	sub	sp, #12
 800fb52:	af00      	add	r7, sp, #0
 800fb54:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800fb56:	bf00      	nop
 800fb58:	370c      	adds	r7, #12
 800fb5a:	46bd      	mov	sp, r7
 800fb5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb60:	4770      	bx	lr

0800fb62 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800fb62:	b480      	push	{r7}
 800fb64:	b083      	sub	sp, #12
 800fb66:	af00      	add	r7, sp, #0
 800fb68:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800fb6a:	bf00      	nop
 800fb6c:	370c      	adds	r7, #12
 800fb6e:	46bd      	mov	sp, r7
 800fb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb74:	4770      	bx	lr

0800fb76 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800fb76:	b480      	push	{r7}
 800fb78:	b083      	sub	sp, #12
 800fb7a:	af00      	add	r7, sp, #0
 800fb7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800fb7e:	bf00      	nop
 800fb80:	370c      	adds	r7, #12
 800fb82:	46bd      	mov	sp, r7
 800fb84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb88:	4770      	bx	lr

0800fb8a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800fb8a:	b480      	push	{r7}
 800fb8c:	b085      	sub	sp, #20
 800fb8e:	af00      	add	r7, sp, #0
 800fb90:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fb92:	687b      	ldr	r3, [r7, #4]
 800fb94:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fb98:	2b01      	cmp	r3, #1
 800fb9a:	d101      	bne.n	800fba0 <HAL_UARTEx_DisableFifoMode+0x16>
 800fb9c:	2302      	movs	r3, #2
 800fb9e:	e027      	b.n	800fbf0 <HAL_UARTEx_DisableFifoMode+0x66>
 800fba0:	687b      	ldr	r3, [r7, #4]
 800fba2:	2201      	movs	r2, #1
 800fba4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2224      	movs	r2, #36	; 0x24
 800fbac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	681a      	ldr	r2, [r3, #0]
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	681b      	ldr	r3, [r3, #0]
 800fbc2:	f022 0201 	bic.w	r2, r2, #1
 800fbc6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800fbc8:	68fb      	ldr	r3, [r7, #12]
 800fbca:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800fbce:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	2200      	movs	r2, #0
 800fbd4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	681b      	ldr	r3, [r3, #0]
 800fbda:	68fa      	ldr	r2, [r7, #12]
 800fbdc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	2220      	movs	r2, #32
 800fbe2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fbee:	2300      	movs	r3, #0
}
 800fbf0:	4618      	mov	r0, r3
 800fbf2:	3714      	adds	r7, #20
 800fbf4:	46bd      	mov	sp, r7
 800fbf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbfa:	4770      	bx	lr

0800fbfc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fbfc:	b580      	push	{r7, lr}
 800fbfe:	b084      	sub	sp, #16
 800fc00:	af00      	add	r7, sp, #0
 800fc02:	6078      	str	r0, [r7, #4]
 800fc04:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc06:	687b      	ldr	r3, [r7, #4]
 800fc08:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc0c:	2b01      	cmp	r3, #1
 800fc0e:	d101      	bne.n	800fc14 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800fc10:	2302      	movs	r3, #2
 800fc12:	e02d      	b.n	800fc70 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	2201      	movs	r2, #1
 800fc18:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	2224      	movs	r2, #36	; 0x24
 800fc20:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	681b      	ldr	r3, [r3, #0]
 800fc2a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	681a      	ldr	r2, [r3, #0]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f022 0201 	bic.w	r2, r2, #1
 800fc3a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	689b      	ldr	r3, [r3, #8]
 800fc42:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	683a      	ldr	r2, [r7, #0]
 800fc4c:	430a      	orrs	r2, r1
 800fc4e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fc50:	6878      	ldr	r0, [r7, #4]
 800fc52:	f000 f84f 	bl	800fcf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	681b      	ldr	r3, [r3, #0]
 800fc5a:	68fa      	ldr	r2, [r7, #12]
 800fc5c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	2220      	movs	r2, #32
 800fc62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fc6e:	2300      	movs	r3, #0
}
 800fc70:	4618      	mov	r0, r3
 800fc72:	3710      	adds	r7, #16
 800fc74:	46bd      	mov	sp, r7
 800fc76:	bd80      	pop	{r7, pc}

0800fc78 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800fc78:	b580      	push	{r7, lr}
 800fc7a:	b084      	sub	sp, #16
 800fc7c:	af00      	add	r7, sp, #0
 800fc7e:	6078      	str	r0, [r7, #4]
 800fc80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800fc88:	2b01      	cmp	r3, #1
 800fc8a:	d101      	bne.n	800fc90 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800fc8c:	2302      	movs	r3, #2
 800fc8e:	e02d      	b.n	800fcec <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2201      	movs	r2, #1
 800fc94:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	2224      	movs	r2, #36	; 0x24
 800fc9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	681b      	ldr	r3, [r3, #0]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	681b      	ldr	r3, [r3, #0]
 800fcac:	681a      	ldr	r2, [r3, #0]
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	f022 0201 	bic.w	r2, r2, #1
 800fcb6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	689b      	ldr	r3, [r3, #8]
 800fcbe:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800fcc2:	687b      	ldr	r3, [r7, #4]
 800fcc4:	681b      	ldr	r3, [r3, #0]
 800fcc6:	683a      	ldr	r2, [r7, #0]
 800fcc8:	430a      	orrs	r2, r1
 800fcca:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800fccc:	6878      	ldr	r0, [r7, #4]
 800fcce:	f000 f811 	bl	800fcf4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	68fa      	ldr	r2, [r7, #12]
 800fcd8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2220      	movs	r2, #32
 800fcde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	2200      	movs	r2, #0
 800fce6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800fcea:	2300      	movs	r3, #0
}
 800fcec:	4618      	mov	r0, r3
 800fcee:	3710      	adds	r7, #16
 800fcf0:	46bd      	mov	sp, r7
 800fcf2:	bd80      	pop	{r7, pc}

0800fcf4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b085      	sub	sp, #20
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800fd00:	2b00      	cmp	r3, #0
 800fd02:	d108      	bne.n	800fd16 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2201      	movs	r2, #1
 800fd08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800fd0c:	687b      	ldr	r3, [r7, #4]
 800fd0e:	2201      	movs	r2, #1
 800fd10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800fd14:	e031      	b.n	800fd7a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800fd16:	2310      	movs	r3, #16
 800fd18:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800fd1a:	2310      	movs	r3, #16
 800fd1c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	689b      	ldr	r3, [r3, #8]
 800fd24:	0e5b      	lsrs	r3, r3, #25
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	f003 0307 	and.w	r3, r3, #7
 800fd2c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	689b      	ldr	r3, [r3, #8]
 800fd34:	0f5b      	lsrs	r3, r3, #29
 800fd36:	b2db      	uxtb	r3, r3
 800fd38:	f003 0307 	and.w	r3, r3, #7
 800fd3c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd3e:	7bbb      	ldrb	r3, [r7, #14]
 800fd40:	7b3a      	ldrb	r2, [r7, #12]
 800fd42:	4911      	ldr	r1, [pc, #68]	; (800fd88 <UARTEx_SetNbDataToProcess+0x94>)
 800fd44:	5c8a      	ldrb	r2, [r1, r2]
 800fd46:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800fd4a:	7b3a      	ldrb	r2, [r7, #12]
 800fd4c:	490f      	ldr	r1, [pc, #60]	; (800fd8c <UARTEx_SetNbDataToProcess+0x98>)
 800fd4e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800fd50:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd54:	b29a      	uxth	r2, r3
 800fd56:	687b      	ldr	r3, [r7, #4]
 800fd58:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd5c:	7bfb      	ldrb	r3, [r7, #15]
 800fd5e:	7b7a      	ldrb	r2, [r7, #13]
 800fd60:	4909      	ldr	r1, [pc, #36]	; (800fd88 <UARTEx_SetNbDataToProcess+0x94>)
 800fd62:	5c8a      	ldrb	r2, [r1, r2]
 800fd64:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800fd68:	7b7a      	ldrb	r2, [r7, #13]
 800fd6a:	4908      	ldr	r1, [pc, #32]	; (800fd8c <UARTEx_SetNbDataToProcess+0x98>)
 800fd6c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800fd6e:	fb93 f3f2 	sdiv	r3, r3, r2
 800fd72:	b29a      	uxth	r2, r3
 800fd74:	687b      	ldr	r3, [r7, #4]
 800fd76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800fd7a:	bf00      	nop
 800fd7c:	3714      	adds	r7, #20
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd84:	4770      	bx	lr
 800fd86:	bf00      	nop
 800fd88:	08012680 	.word	0x08012680
 800fd8c:	08012688 	.word	0x08012688

0800fd90 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800fd90:	b084      	sub	sp, #16
 800fd92:	b580      	push	{r7, lr}
 800fd94:	b084      	sub	sp, #16
 800fd96:	af00      	add	r7, sp, #0
 800fd98:	6078      	str	r0, [r7, #4]
 800fd9a:	f107 001c 	add.w	r0, r7, #28
 800fd9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800fda2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fda4:	2b01      	cmp	r3, #1
 800fda6:	d120      	bne.n	800fdea <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fda8:	687b      	ldr	r3, [r7, #4]
 800fdaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fdac:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	68da      	ldr	r2, [r3, #12]
 800fdb8:	4b2a      	ldr	r3, [pc, #168]	; (800fe64 <USB_CoreInit+0xd4>)
 800fdba:	4013      	ands	r3, r2
 800fdbc:	687a      	ldr	r2, [r7, #4]
 800fdbe:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	68db      	ldr	r3, [r3, #12]
 800fdc4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800fdcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fdce:	2b01      	cmp	r3, #1
 800fdd0:	d105      	bne.n	800fdde <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	68db      	ldr	r3, [r3, #12]
 800fdd6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800fdda:	687b      	ldr	r3, [r7, #4]
 800fddc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fdde:	6878      	ldr	r0, [r7, #4]
 800fde0:	f000 faac 	bl	801033c <USB_CoreReset>
 800fde4:	4603      	mov	r3, r0
 800fde6:	73fb      	strb	r3, [r7, #15]
 800fde8:	e01a      	b.n	800fe20 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	68db      	ldr	r3, [r3, #12]
 800fdee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800fdf6:	6878      	ldr	r0, [r7, #4]
 800fdf8:	f000 faa0 	bl	801033c <USB_CoreReset>
 800fdfc:	4603      	mov	r3, r0
 800fdfe:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800fe00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe0a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	639a      	str	r2, [r3, #56]	; 0x38
 800fe12:	e005      	b.n	800fe20 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fe18:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800fe20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe22:	2b01      	cmp	r3, #1
 800fe24:	d116      	bne.n	800fe54 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800fe2a:	b29a      	uxth	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800fe34:	4b0c      	ldr	r3, [pc, #48]	; (800fe68 <USB_CoreInit+0xd8>)
 800fe36:	4313      	orrs	r3, r2
 800fe38:	687a      	ldr	r2, [r7, #4]
 800fe3a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	689b      	ldr	r3, [r3, #8]
 800fe40:	f043 0206 	orr.w	r2, r3, #6
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	689b      	ldr	r3, [r3, #8]
 800fe4c:	f043 0220 	orr.w	r2, r3, #32
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800fe54:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe56:	4618      	mov	r0, r3
 800fe58:	3710      	adds	r7, #16
 800fe5a:	46bd      	mov	sp, r7
 800fe5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800fe60:	b004      	add	sp, #16
 800fe62:	4770      	bx	lr
 800fe64:	ffbdffbf 	.word	0xffbdffbf
 800fe68:	03ee0000 	.word	0x03ee0000

0800fe6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800fe6c:	b480      	push	{r7}
 800fe6e:	b083      	sub	sp, #12
 800fe70:	af00      	add	r7, sp, #0
 800fe72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800fe74:	687b      	ldr	r3, [r7, #4]
 800fe76:	689b      	ldr	r3, [r3, #8]
 800fe78:	f023 0201 	bic.w	r2, r3, #1
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800fe80:	2300      	movs	r3, #0
}
 800fe82:	4618      	mov	r0, r3
 800fe84:	370c      	adds	r7, #12
 800fe86:	46bd      	mov	sp, r7
 800fe88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe8c:	4770      	bx	lr

0800fe8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800fe8e:	b580      	push	{r7, lr}
 800fe90:	b084      	sub	sp, #16
 800fe92:	af00      	add	r7, sp, #0
 800fe94:	6078      	str	r0, [r7, #4]
 800fe96:	460b      	mov	r3, r1
 800fe98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800fe9a:	2300      	movs	r3, #0
 800fe9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	68db      	ldr	r3, [r3, #12]
 800fea2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800feaa:	78fb      	ldrb	r3, [r7, #3]
 800feac:	2b01      	cmp	r3, #1
 800feae:	d115      	bne.n	800fedc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	68db      	ldr	r3, [r3, #12]
 800feb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800febc:	2001      	movs	r0, #1
 800febe:	f7f7 fc6b 	bl	8007798 <HAL_Delay>
      ms++;
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	3301      	adds	r3, #1
 800fec6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fa29 	bl	8010320 <USB_GetMode>
 800fece:	4603      	mov	r3, r0
 800fed0:	2b01      	cmp	r3, #1
 800fed2:	d01e      	beq.n	800ff12 <USB_SetCurrentMode+0x84>
 800fed4:	68fb      	ldr	r3, [r7, #12]
 800fed6:	2b31      	cmp	r3, #49	; 0x31
 800fed8:	d9f0      	bls.n	800febc <USB_SetCurrentMode+0x2e>
 800feda:	e01a      	b.n	800ff12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800fedc:	78fb      	ldrb	r3, [r7, #3]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d115      	bne.n	800ff0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	68db      	ldr	r3, [r3, #12]
 800fee6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800feea:	687b      	ldr	r3, [r7, #4]
 800feec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800feee:	2001      	movs	r0, #1
 800fef0:	f7f7 fc52 	bl	8007798 <HAL_Delay>
      ms++;
 800fef4:	68fb      	ldr	r3, [r7, #12]
 800fef6:	3301      	adds	r3, #1
 800fef8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800fefa:	6878      	ldr	r0, [r7, #4]
 800fefc:	f000 fa10 	bl	8010320 <USB_GetMode>
 800ff00:	4603      	mov	r3, r0
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d005      	beq.n	800ff12 <USB_SetCurrentMode+0x84>
 800ff06:	68fb      	ldr	r3, [r7, #12]
 800ff08:	2b31      	cmp	r3, #49	; 0x31
 800ff0a:	d9f0      	bls.n	800feee <USB_SetCurrentMode+0x60>
 800ff0c:	e001      	b.n	800ff12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ff0e:	2301      	movs	r3, #1
 800ff10:	e005      	b.n	800ff1e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	2b32      	cmp	r3, #50	; 0x32
 800ff16:	d101      	bne.n	800ff1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ff18:	2301      	movs	r3, #1
 800ff1a:	e000      	b.n	800ff1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ff1c:	2300      	movs	r3, #0
}
 800ff1e:	4618      	mov	r0, r3
 800ff20:	3710      	adds	r7, #16
 800ff22:	46bd      	mov	sp, r7
 800ff24:	bd80      	pop	{r7, pc}
	...

0800ff28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ff28:	b084      	sub	sp, #16
 800ff2a:	b580      	push	{r7, lr}
 800ff2c:	b086      	sub	sp, #24
 800ff2e:	af00      	add	r7, sp, #0
 800ff30:	6078      	str	r0, [r7, #4]
 800ff32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ff36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800ff3a:	2300      	movs	r3, #0
 800ff3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800ff42:	2300      	movs	r3, #0
 800ff44:	613b      	str	r3, [r7, #16]
 800ff46:	e009      	b.n	800ff5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800ff48:	687a      	ldr	r2, [r7, #4]
 800ff4a:	693b      	ldr	r3, [r7, #16]
 800ff4c:	3340      	adds	r3, #64	; 0x40
 800ff4e:	009b      	lsls	r3, r3, #2
 800ff50:	4413      	add	r3, r2
 800ff52:	2200      	movs	r2, #0
 800ff54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800ff56:	693b      	ldr	r3, [r7, #16]
 800ff58:	3301      	adds	r3, #1
 800ff5a:	613b      	str	r3, [r7, #16]
 800ff5c:	693b      	ldr	r3, [r7, #16]
 800ff5e:	2b0e      	cmp	r3, #14
 800ff60:	d9f2      	bls.n	800ff48 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800ff62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d11c      	bne.n	800ffa2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ff6e:	685b      	ldr	r3, [r3, #4]
 800ff70:	68fa      	ldr	r2, [r7, #12]
 800ff72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ff76:	f043 0302 	orr.w	r3, r3, #2
 800ff7a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff80:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800ff84:	687b      	ldr	r3, [r7, #4]
 800ff86:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800ff88:	687b      	ldr	r3, [r7, #4]
 800ff8a:	681b      	ldr	r3, [r3, #0]
 800ff8c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ff9c:	687b      	ldr	r3, [r7, #4]
 800ff9e:	601a      	str	r2, [r3, #0]
 800ffa0:	e005      	b.n	800ffae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ffa2:	687b      	ldr	r3, [r7, #4]
 800ffa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ffa6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	2300      	movs	r3, #0
 800ffb8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ffba:	68fb      	ldr	r3, [r7, #12]
 800ffbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ffc8:	461a      	mov	r2, r3
 800ffca:	680b      	ldr	r3, [r1, #0]
 800ffcc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ffce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d10c      	bne.n	800ffee <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ffd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffd6:	2b00      	cmp	r3, #0
 800ffd8:	d104      	bne.n	800ffe4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ffda:	2100      	movs	r1, #0
 800ffdc:	6878      	ldr	r0, [r7, #4]
 800ffde:	f000 f965 	bl	80102ac <USB_SetDevSpeed>
 800ffe2:	e008      	b.n	800fff6 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ffe4:	2101      	movs	r1, #1
 800ffe6:	6878      	ldr	r0, [r7, #4]
 800ffe8:	f000 f960 	bl	80102ac <USB_SetDevSpeed>
 800ffec:	e003      	b.n	800fff6 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ffee:	2103      	movs	r1, #3
 800fff0:	6878      	ldr	r0, [r7, #4]
 800fff2:	f000 f95b 	bl	80102ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800fff6:	2110      	movs	r1, #16
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f000 f8f3 	bl	80101e4 <USB_FlushTxFifo>
 800fffe:	4603      	mov	r3, r0
 8010000:	2b00      	cmp	r3, #0
 8010002:	d001      	beq.n	8010008 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010004:	2301      	movs	r3, #1
 8010006:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f000 f91f 	bl	801024c <USB_FlushRxFifo>
 801000e:	4603      	mov	r3, r0
 8010010:	2b00      	cmp	r3, #0
 8010012:	d001      	beq.n	8010018 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010014:	2301      	movs	r3, #1
 8010016:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801001e:	461a      	mov	r2, r3
 8010020:	2300      	movs	r3, #0
 8010022:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010024:	68fb      	ldr	r3, [r7, #12]
 8010026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801002a:	461a      	mov	r2, r3
 801002c:	2300      	movs	r3, #0
 801002e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010030:	68fb      	ldr	r3, [r7, #12]
 8010032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010036:	461a      	mov	r2, r3
 8010038:	2300      	movs	r3, #0
 801003a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 801003c:	2300      	movs	r3, #0
 801003e:	613b      	str	r3, [r7, #16]
 8010040:	e043      	b.n	80100ca <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010042:	693b      	ldr	r3, [r7, #16]
 8010044:	015a      	lsls	r2, r3, #5
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4413      	add	r3, r2
 801004a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010054:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010058:	d118      	bne.n	801008c <USB_DevInit+0x164>
    {
      if (i == 0U)
 801005a:	693b      	ldr	r3, [r7, #16]
 801005c:	2b00      	cmp	r3, #0
 801005e:	d10a      	bne.n	8010076 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010060:	693b      	ldr	r3, [r7, #16]
 8010062:	015a      	lsls	r2, r3, #5
 8010064:	68fb      	ldr	r3, [r7, #12]
 8010066:	4413      	add	r3, r2
 8010068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801006c:	461a      	mov	r2, r3
 801006e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010072:	6013      	str	r3, [r2, #0]
 8010074:	e013      	b.n	801009e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010076:	693b      	ldr	r3, [r7, #16]
 8010078:	015a      	lsls	r2, r3, #5
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	4413      	add	r3, r2
 801007e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010082:	461a      	mov	r2, r3
 8010084:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010088:	6013      	str	r3, [r2, #0]
 801008a:	e008      	b.n	801009e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 801008c:	693b      	ldr	r3, [r7, #16]
 801008e:	015a      	lsls	r2, r3, #5
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	4413      	add	r3, r2
 8010094:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010098:	461a      	mov	r2, r3
 801009a:	2300      	movs	r3, #0
 801009c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 801009e:	693b      	ldr	r3, [r7, #16]
 80100a0:	015a      	lsls	r2, r3, #5
 80100a2:	68fb      	ldr	r3, [r7, #12]
 80100a4:	4413      	add	r3, r2
 80100a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100aa:	461a      	mov	r2, r3
 80100ac:	2300      	movs	r3, #0
 80100ae:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80100b0:	693b      	ldr	r3, [r7, #16]
 80100b2:	015a      	lsls	r2, r3, #5
 80100b4:	68fb      	ldr	r3, [r7, #12]
 80100b6:	4413      	add	r3, r2
 80100b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100bc:	461a      	mov	r2, r3
 80100be:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80100c2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100c4:	693b      	ldr	r3, [r7, #16]
 80100c6:	3301      	adds	r3, #1
 80100c8:	613b      	str	r3, [r7, #16]
 80100ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100cc:	693a      	ldr	r2, [r7, #16]
 80100ce:	429a      	cmp	r2, r3
 80100d0:	d3b7      	bcc.n	8010042 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80100d2:	2300      	movs	r3, #0
 80100d4:	613b      	str	r3, [r7, #16]
 80100d6:	e043      	b.n	8010160 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80100d8:	693b      	ldr	r3, [r7, #16]
 80100da:	015a      	lsls	r2, r3, #5
 80100dc:	68fb      	ldr	r3, [r7, #12]
 80100de:	4413      	add	r3, r2
 80100e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80100ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80100ee:	d118      	bne.n	8010122 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 80100f0:	693b      	ldr	r3, [r7, #16]
 80100f2:	2b00      	cmp	r3, #0
 80100f4:	d10a      	bne.n	801010c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80100f6:	693b      	ldr	r3, [r7, #16]
 80100f8:	015a      	lsls	r2, r3, #5
 80100fa:	68fb      	ldr	r3, [r7, #12]
 80100fc:	4413      	add	r3, r2
 80100fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010102:	461a      	mov	r2, r3
 8010104:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010108:	6013      	str	r3, [r2, #0]
 801010a:	e013      	b.n	8010134 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 801010c:	693b      	ldr	r3, [r7, #16]
 801010e:	015a      	lsls	r2, r3, #5
 8010110:	68fb      	ldr	r3, [r7, #12]
 8010112:	4413      	add	r3, r2
 8010114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010118:	461a      	mov	r2, r3
 801011a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801011e:	6013      	str	r3, [r2, #0]
 8010120:	e008      	b.n	8010134 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010122:	693b      	ldr	r3, [r7, #16]
 8010124:	015a      	lsls	r2, r3, #5
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	4413      	add	r3, r2
 801012a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801012e:	461a      	mov	r2, r3
 8010130:	2300      	movs	r3, #0
 8010132:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010134:	693b      	ldr	r3, [r7, #16]
 8010136:	015a      	lsls	r2, r3, #5
 8010138:	68fb      	ldr	r3, [r7, #12]
 801013a:	4413      	add	r3, r2
 801013c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010140:	461a      	mov	r2, r3
 8010142:	2300      	movs	r3, #0
 8010144:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010146:	693b      	ldr	r3, [r7, #16]
 8010148:	015a      	lsls	r2, r3, #5
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	4413      	add	r3, r2
 801014e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010152:	461a      	mov	r2, r3
 8010154:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010158:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 801015a:	693b      	ldr	r3, [r7, #16]
 801015c:	3301      	adds	r3, #1
 801015e:	613b      	str	r3, [r7, #16]
 8010160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010162:	693a      	ldr	r2, [r7, #16]
 8010164:	429a      	cmp	r2, r3
 8010166:	d3b7      	bcc.n	80100d8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010168:	68fb      	ldr	r3, [r7, #12]
 801016a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801016e:	691b      	ldr	r3, [r3, #16]
 8010170:	68fa      	ldr	r2, [r7, #12]
 8010172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010176:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801017a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	2200      	movs	r2, #0
 8010180:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010188:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 801018a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018c:	2b00      	cmp	r3, #0
 801018e:	d105      	bne.n	801019c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	699b      	ldr	r3, [r3, #24]
 8010194:	f043 0210 	orr.w	r2, r3, #16
 8010198:	687b      	ldr	r3, [r7, #4]
 801019a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	699a      	ldr	r2, [r3, #24]
 80101a0:	4b0e      	ldr	r3, [pc, #56]	; (80101dc <USB_DevInit+0x2b4>)
 80101a2:	4313      	orrs	r3, r2
 80101a4:	687a      	ldr	r2, [r7, #4]
 80101a6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80101a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d005      	beq.n	80101ba <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	699b      	ldr	r3, [r3, #24]
 80101b2:	f043 0208 	orr.w	r2, r3, #8
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80101ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101bc:	2b01      	cmp	r3, #1
 80101be:	d105      	bne.n	80101cc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80101c0:	687b      	ldr	r3, [r7, #4]
 80101c2:	699a      	ldr	r2, [r3, #24]
 80101c4:	4b06      	ldr	r3, [pc, #24]	; (80101e0 <USB_DevInit+0x2b8>)
 80101c6:	4313      	orrs	r3, r2
 80101c8:	687a      	ldr	r2, [r7, #4]
 80101ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80101cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80101ce:	4618      	mov	r0, r3
 80101d0:	3718      	adds	r7, #24
 80101d2:	46bd      	mov	sp, r7
 80101d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80101d8:	b004      	add	sp, #16
 80101da:	4770      	bx	lr
 80101dc:	803c3800 	.word	0x803c3800
 80101e0:	40000004 	.word	0x40000004

080101e4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80101e4:	b480      	push	{r7}
 80101e6:	b085      	sub	sp, #20
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
 80101ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80101ee:	2300      	movs	r3, #0
 80101f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80101f2:	68fb      	ldr	r3, [r7, #12]
 80101f4:	3301      	adds	r3, #1
 80101f6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80101f8:	68fb      	ldr	r3, [r7, #12]
 80101fa:	4a13      	ldr	r2, [pc, #76]	; (8010248 <USB_FlushTxFifo+0x64>)
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d901      	bls.n	8010204 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010200:	2303      	movs	r3, #3
 8010202:	e01b      	b.n	801023c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	691b      	ldr	r3, [r3, #16]
 8010208:	2b00      	cmp	r3, #0
 801020a:	daf2      	bge.n	80101f2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 801020c:	2300      	movs	r3, #0
 801020e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010210:	683b      	ldr	r3, [r7, #0]
 8010212:	019b      	lsls	r3, r3, #6
 8010214:	f043 0220 	orr.w	r2, r3, #32
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801021c:	68fb      	ldr	r3, [r7, #12]
 801021e:	3301      	adds	r3, #1
 8010220:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010222:	68fb      	ldr	r3, [r7, #12]
 8010224:	4a08      	ldr	r2, [pc, #32]	; (8010248 <USB_FlushTxFifo+0x64>)
 8010226:	4293      	cmp	r3, r2
 8010228:	d901      	bls.n	801022e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 801022a:	2303      	movs	r3, #3
 801022c:	e006      	b.n	801023c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	691b      	ldr	r3, [r3, #16]
 8010232:	f003 0320 	and.w	r3, r3, #32
 8010236:	2b20      	cmp	r3, #32
 8010238:	d0f0      	beq.n	801021c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 801023a:	2300      	movs	r3, #0
}
 801023c:	4618      	mov	r0, r3
 801023e:	3714      	adds	r7, #20
 8010240:	46bd      	mov	sp, r7
 8010242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010246:	4770      	bx	lr
 8010248:	00030d40 	.word	0x00030d40

0801024c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 801024c:	b480      	push	{r7}
 801024e:	b085      	sub	sp, #20
 8010250:	af00      	add	r7, sp, #0
 8010252:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010254:	2300      	movs	r3, #0
 8010256:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	3301      	adds	r3, #1
 801025c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	4a11      	ldr	r2, [pc, #68]	; (80102a8 <USB_FlushRxFifo+0x5c>)
 8010262:	4293      	cmp	r3, r2
 8010264:	d901      	bls.n	801026a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010266:	2303      	movs	r3, #3
 8010268:	e018      	b.n	801029c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801026a:	687b      	ldr	r3, [r7, #4]
 801026c:	691b      	ldr	r3, [r3, #16]
 801026e:	2b00      	cmp	r3, #0
 8010270:	daf2      	bge.n	8010258 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010272:	2300      	movs	r3, #0
 8010274:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010276:	687b      	ldr	r3, [r7, #4]
 8010278:	2210      	movs	r2, #16
 801027a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	3301      	adds	r3, #1
 8010280:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010282:	68fb      	ldr	r3, [r7, #12]
 8010284:	4a08      	ldr	r2, [pc, #32]	; (80102a8 <USB_FlushRxFifo+0x5c>)
 8010286:	4293      	cmp	r3, r2
 8010288:	d901      	bls.n	801028e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 801028a:	2303      	movs	r3, #3
 801028c:	e006      	b.n	801029c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	691b      	ldr	r3, [r3, #16]
 8010292:	f003 0310 	and.w	r3, r3, #16
 8010296:	2b10      	cmp	r3, #16
 8010298:	d0f0      	beq.n	801027c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 801029a:	2300      	movs	r3, #0
}
 801029c:	4618      	mov	r0, r3
 801029e:	3714      	adds	r7, #20
 80102a0:	46bd      	mov	sp, r7
 80102a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a6:	4770      	bx	lr
 80102a8:	00030d40 	.word	0x00030d40

080102ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80102ac:	b480      	push	{r7}
 80102ae:	b085      	sub	sp, #20
 80102b0:	af00      	add	r7, sp, #0
 80102b2:	6078      	str	r0, [r7, #4]
 80102b4:	460b      	mov	r3, r1
 80102b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80102bc:	68fb      	ldr	r3, [r7, #12]
 80102be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102c2:	681a      	ldr	r2, [r3, #0]
 80102c4:	78fb      	ldrb	r3, [r7, #3]
 80102c6:	68f9      	ldr	r1, [r7, #12]
 80102c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80102cc:	4313      	orrs	r3, r2
 80102ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80102d0:	2300      	movs	r3, #0
}
 80102d2:	4618      	mov	r0, r3
 80102d4:	3714      	adds	r7, #20
 80102d6:	46bd      	mov	sp, r7
 80102d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102dc:	4770      	bx	lr

080102de <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80102de:	b480      	push	{r7}
 80102e0:	b085      	sub	sp, #20
 80102e2:	af00      	add	r7, sp, #0
 80102e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	68fa      	ldr	r2, [r7, #12]
 80102f4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80102f8:	f023 0303 	bic.w	r3, r3, #3
 80102fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010304:	685b      	ldr	r3, [r3, #4]
 8010306:	68fa      	ldr	r2, [r7, #12]
 8010308:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801030c:	f043 0302 	orr.w	r3, r3, #2
 8010310:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8010312:	2300      	movs	r3, #0
}
 8010314:	4618      	mov	r0, r3
 8010316:	3714      	adds	r7, #20
 8010318:	46bd      	mov	sp, r7
 801031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801031e:	4770      	bx	lr

08010320 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010320:	b480      	push	{r7}
 8010322:	b083      	sub	sp, #12
 8010324:	af00      	add	r7, sp, #0
 8010326:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	695b      	ldr	r3, [r3, #20]
 801032c:	f003 0301 	and.w	r3, r3, #1
}
 8010330:	4618      	mov	r0, r3
 8010332:	370c      	adds	r7, #12
 8010334:	46bd      	mov	sp, r7
 8010336:	f85d 7b04 	ldr.w	r7, [sp], #4
 801033a:	4770      	bx	lr

0801033c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 801033c:	b480      	push	{r7}
 801033e:	b085      	sub	sp, #20
 8010340:	af00      	add	r7, sp, #0
 8010342:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010344:	2300      	movs	r3, #0
 8010346:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	3301      	adds	r3, #1
 801034c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	4a13      	ldr	r2, [pc, #76]	; (80103a0 <USB_CoreReset+0x64>)
 8010352:	4293      	cmp	r3, r2
 8010354:	d901      	bls.n	801035a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8010356:	2303      	movs	r3, #3
 8010358:	e01b      	b.n	8010392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	691b      	ldr	r3, [r3, #16]
 801035e:	2b00      	cmp	r3, #0
 8010360:	daf2      	bge.n	8010348 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8010362:	2300      	movs	r3, #0
 8010364:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	691b      	ldr	r3, [r3, #16]
 801036a:	f043 0201 	orr.w	r2, r3, #1
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	3301      	adds	r3, #1
 8010376:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010378:	68fb      	ldr	r3, [r7, #12]
 801037a:	4a09      	ldr	r2, [pc, #36]	; (80103a0 <USB_CoreReset+0x64>)
 801037c:	4293      	cmp	r3, r2
 801037e:	d901      	bls.n	8010384 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8010380:	2303      	movs	r3, #3
 8010382:	e006      	b.n	8010392 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	691b      	ldr	r3, [r3, #16]
 8010388:	f003 0301 	and.w	r3, r3, #1
 801038c:	2b01      	cmp	r3, #1
 801038e:	d0f0      	beq.n	8010372 <USB_CoreReset+0x36>

  return HAL_OK;
 8010390:	2300      	movs	r3, #0
}
 8010392:	4618      	mov	r0, r3
 8010394:	3714      	adds	r7, #20
 8010396:	46bd      	mov	sp, r7
 8010398:	f85d 7b04 	ldr.w	r7, [sp], #4
 801039c:	4770      	bx	lr
 801039e:	bf00      	nop
 80103a0:	00030d40 	.word	0x00030d40

080103a4 <__errno>:
 80103a4:	4b01      	ldr	r3, [pc, #4]	; (80103ac <__errno+0x8>)
 80103a6:	6818      	ldr	r0, [r3, #0]
 80103a8:	4770      	bx	lr
 80103aa:	bf00      	nop
 80103ac:	24000024 	.word	0x24000024

080103b0 <__libc_init_array>:
 80103b0:	b570      	push	{r4, r5, r6, lr}
 80103b2:	4d0d      	ldr	r5, [pc, #52]	; (80103e8 <__libc_init_array+0x38>)
 80103b4:	4c0d      	ldr	r4, [pc, #52]	; (80103ec <__libc_init_array+0x3c>)
 80103b6:	1b64      	subs	r4, r4, r5
 80103b8:	10a4      	asrs	r4, r4, #2
 80103ba:	2600      	movs	r6, #0
 80103bc:	42a6      	cmp	r6, r4
 80103be:	d109      	bne.n	80103d4 <__libc_init_array+0x24>
 80103c0:	4d0b      	ldr	r5, [pc, #44]	; (80103f0 <__libc_init_array+0x40>)
 80103c2:	4c0c      	ldr	r4, [pc, #48]	; (80103f4 <__libc_init_array+0x44>)
 80103c4:	f000 fc8e 	bl	8010ce4 <_init>
 80103c8:	1b64      	subs	r4, r4, r5
 80103ca:	10a4      	asrs	r4, r4, #2
 80103cc:	2600      	movs	r6, #0
 80103ce:	42a6      	cmp	r6, r4
 80103d0:	d105      	bne.n	80103de <__libc_init_array+0x2e>
 80103d2:	bd70      	pop	{r4, r5, r6, pc}
 80103d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80103d8:	4798      	blx	r3
 80103da:	3601      	adds	r6, #1
 80103dc:	e7ee      	b.n	80103bc <__libc_init_array+0xc>
 80103de:	f855 3b04 	ldr.w	r3, [r5], #4
 80103e2:	4798      	blx	r3
 80103e4:	3601      	adds	r6, #1
 80103e6:	e7f2      	b.n	80103ce <__libc_init_array+0x1e>
 80103e8:	080126cc 	.word	0x080126cc
 80103ec:	080126cc 	.word	0x080126cc
 80103f0:	080126cc 	.word	0x080126cc
 80103f4:	080126d0 	.word	0x080126d0

080103f8 <memset>:
 80103f8:	4402      	add	r2, r0
 80103fa:	4603      	mov	r3, r0
 80103fc:	4293      	cmp	r3, r2
 80103fe:	d100      	bne.n	8010402 <memset+0xa>
 8010400:	4770      	bx	lr
 8010402:	f803 1b01 	strb.w	r1, [r3], #1
 8010406:	e7f9      	b.n	80103fc <memset+0x4>

08010408 <_free_r>:
 8010408:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801040a:	2900      	cmp	r1, #0
 801040c:	d044      	beq.n	8010498 <_free_r+0x90>
 801040e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010412:	9001      	str	r0, [sp, #4]
 8010414:	2b00      	cmp	r3, #0
 8010416:	f1a1 0404 	sub.w	r4, r1, #4
 801041a:	bfb8      	it	lt
 801041c:	18e4      	addlt	r4, r4, r3
 801041e:	f000 f903 	bl	8010628 <__malloc_lock>
 8010422:	4a1e      	ldr	r2, [pc, #120]	; (801049c <_free_r+0x94>)
 8010424:	9801      	ldr	r0, [sp, #4]
 8010426:	6813      	ldr	r3, [r2, #0]
 8010428:	b933      	cbnz	r3, 8010438 <_free_r+0x30>
 801042a:	6063      	str	r3, [r4, #4]
 801042c:	6014      	str	r4, [r2, #0]
 801042e:	b003      	add	sp, #12
 8010430:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010434:	f000 b8fe 	b.w	8010634 <__malloc_unlock>
 8010438:	42a3      	cmp	r3, r4
 801043a:	d908      	bls.n	801044e <_free_r+0x46>
 801043c:	6825      	ldr	r5, [r4, #0]
 801043e:	1961      	adds	r1, r4, r5
 8010440:	428b      	cmp	r3, r1
 8010442:	bf01      	itttt	eq
 8010444:	6819      	ldreq	r1, [r3, #0]
 8010446:	685b      	ldreq	r3, [r3, #4]
 8010448:	1949      	addeq	r1, r1, r5
 801044a:	6021      	streq	r1, [r4, #0]
 801044c:	e7ed      	b.n	801042a <_free_r+0x22>
 801044e:	461a      	mov	r2, r3
 8010450:	685b      	ldr	r3, [r3, #4]
 8010452:	b10b      	cbz	r3, 8010458 <_free_r+0x50>
 8010454:	42a3      	cmp	r3, r4
 8010456:	d9fa      	bls.n	801044e <_free_r+0x46>
 8010458:	6811      	ldr	r1, [r2, #0]
 801045a:	1855      	adds	r5, r2, r1
 801045c:	42a5      	cmp	r5, r4
 801045e:	d10b      	bne.n	8010478 <_free_r+0x70>
 8010460:	6824      	ldr	r4, [r4, #0]
 8010462:	4421      	add	r1, r4
 8010464:	1854      	adds	r4, r2, r1
 8010466:	42a3      	cmp	r3, r4
 8010468:	6011      	str	r1, [r2, #0]
 801046a:	d1e0      	bne.n	801042e <_free_r+0x26>
 801046c:	681c      	ldr	r4, [r3, #0]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	6053      	str	r3, [r2, #4]
 8010472:	4421      	add	r1, r4
 8010474:	6011      	str	r1, [r2, #0]
 8010476:	e7da      	b.n	801042e <_free_r+0x26>
 8010478:	d902      	bls.n	8010480 <_free_r+0x78>
 801047a:	230c      	movs	r3, #12
 801047c:	6003      	str	r3, [r0, #0]
 801047e:	e7d6      	b.n	801042e <_free_r+0x26>
 8010480:	6825      	ldr	r5, [r4, #0]
 8010482:	1961      	adds	r1, r4, r5
 8010484:	428b      	cmp	r3, r1
 8010486:	bf04      	itt	eq
 8010488:	6819      	ldreq	r1, [r3, #0]
 801048a:	685b      	ldreq	r3, [r3, #4]
 801048c:	6063      	str	r3, [r4, #4]
 801048e:	bf04      	itt	eq
 8010490:	1949      	addeq	r1, r1, r5
 8010492:	6021      	streq	r1, [r4, #0]
 8010494:	6054      	str	r4, [r2, #4]
 8010496:	e7ca      	b.n	801042e <_free_r+0x26>
 8010498:	b003      	add	sp, #12
 801049a:	bd30      	pop	{r4, r5, pc}
 801049c:	24000eb8 	.word	0x24000eb8

080104a0 <sbrk_aligned>:
 80104a0:	b570      	push	{r4, r5, r6, lr}
 80104a2:	4e0e      	ldr	r6, [pc, #56]	; (80104dc <sbrk_aligned+0x3c>)
 80104a4:	460c      	mov	r4, r1
 80104a6:	6831      	ldr	r1, [r6, #0]
 80104a8:	4605      	mov	r5, r0
 80104aa:	b911      	cbnz	r1, 80104b2 <sbrk_aligned+0x12>
 80104ac:	f000 f88c 	bl	80105c8 <_sbrk_r>
 80104b0:	6030      	str	r0, [r6, #0]
 80104b2:	4621      	mov	r1, r4
 80104b4:	4628      	mov	r0, r5
 80104b6:	f000 f887 	bl	80105c8 <_sbrk_r>
 80104ba:	1c43      	adds	r3, r0, #1
 80104bc:	d00a      	beq.n	80104d4 <sbrk_aligned+0x34>
 80104be:	1cc4      	adds	r4, r0, #3
 80104c0:	f024 0403 	bic.w	r4, r4, #3
 80104c4:	42a0      	cmp	r0, r4
 80104c6:	d007      	beq.n	80104d8 <sbrk_aligned+0x38>
 80104c8:	1a21      	subs	r1, r4, r0
 80104ca:	4628      	mov	r0, r5
 80104cc:	f000 f87c 	bl	80105c8 <_sbrk_r>
 80104d0:	3001      	adds	r0, #1
 80104d2:	d101      	bne.n	80104d8 <sbrk_aligned+0x38>
 80104d4:	f04f 34ff 	mov.w	r4, #4294967295
 80104d8:	4620      	mov	r0, r4
 80104da:	bd70      	pop	{r4, r5, r6, pc}
 80104dc:	24000ebc 	.word	0x24000ebc

080104e0 <_malloc_r>:
 80104e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80104e4:	1ccd      	adds	r5, r1, #3
 80104e6:	f025 0503 	bic.w	r5, r5, #3
 80104ea:	3508      	adds	r5, #8
 80104ec:	2d0c      	cmp	r5, #12
 80104ee:	bf38      	it	cc
 80104f0:	250c      	movcc	r5, #12
 80104f2:	2d00      	cmp	r5, #0
 80104f4:	4607      	mov	r7, r0
 80104f6:	db01      	blt.n	80104fc <_malloc_r+0x1c>
 80104f8:	42a9      	cmp	r1, r5
 80104fa:	d905      	bls.n	8010508 <_malloc_r+0x28>
 80104fc:	230c      	movs	r3, #12
 80104fe:	603b      	str	r3, [r7, #0]
 8010500:	2600      	movs	r6, #0
 8010502:	4630      	mov	r0, r6
 8010504:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010508:	4e2e      	ldr	r6, [pc, #184]	; (80105c4 <_malloc_r+0xe4>)
 801050a:	f000 f88d 	bl	8010628 <__malloc_lock>
 801050e:	6833      	ldr	r3, [r6, #0]
 8010510:	461c      	mov	r4, r3
 8010512:	bb34      	cbnz	r4, 8010562 <_malloc_r+0x82>
 8010514:	4629      	mov	r1, r5
 8010516:	4638      	mov	r0, r7
 8010518:	f7ff ffc2 	bl	80104a0 <sbrk_aligned>
 801051c:	1c43      	adds	r3, r0, #1
 801051e:	4604      	mov	r4, r0
 8010520:	d14d      	bne.n	80105be <_malloc_r+0xde>
 8010522:	6834      	ldr	r4, [r6, #0]
 8010524:	4626      	mov	r6, r4
 8010526:	2e00      	cmp	r6, #0
 8010528:	d140      	bne.n	80105ac <_malloc_r+0xcc>
 801052a:	6823      	ldr	r3, [r4, #0]
 801052c:	4631      	mov	r1, r6
 801052e:	4638      	mov	r0, r7
 8010530:	eb04 0803 	add.w	r8, r4, r3
 8010534:	f000 f848 	bl	80105c8 <_sbrk_r>
 8010538:	4580      	cmp	r8, r0
 801053a:	d13a      	bne.n	80105b2 <_malloc_r+0xd2>
 801053c:	6821      	ldr	r1, [r4, #0]
 801053e:	3503      	adds	r5, #3
 8010540:	1a6d      	subs	r5, r5, r1
 8010542:	f025 0503 	bic.w	r5, r5, #3
 8010546:	3508      	adds	r5, #8
 8010548:	2d0c      	cmp	r5, #12
 801054a:	bf38      	it	cc
 801054c:	250c      	movcc	r5, #12
 801054e:	4629      	mov	r1, r5
 8010550:	4638      	mov	r0, r7
 8010552:	f7ff ffa5 	bl	80104a0 <sbrk_aligned>
 8010556:	3001      	adds	r0, #1
 8010558:	d02b      	beq.n	80105b2 <_malloc_r+0xd2>
 801055a:	6823      	ldr	r3, [r4, #0]
 801055c:	442b      	add	r3, r5
 801055e:	6023      	str	r3, [r4, #0]
 8010560:	e00e      	b.n	8010580 <_malloc_r+0xa0>
 8010562:	6822      	ldr	r2, [r4, #0]
 8010564:	1b52      	subs	r2, r2, r5
 8010566:	d41e      	bmi.n	80105a6 <_malloc_r+0xc6>
 8010568:	2a0b      	cmp	r2, #11
 801056a:	d916      	bls.n	801059a <_malloc_r+0xba>
 801056c:	1961      	adds	r1, r4, r5
 801056e:	42a3      	cmp	r3, r4
 8010570:	6025      	str	r5, [r4, #0]
 8010572:	bf18      	it	ne
 8010574:	6059      	strne	r1, [r3, #4]
 8010576:	6863      	ldr	r3, [r4, #4]
 8010578:	bf08      	it	eq
 801057a:	6031      	streq	r1, [r6, #0]
 801057c:	5162      	str	r2, [r4, r5]
 801057e:	604b      	str	r3, [r1, #4]
 8010580:	4638      	mov	r0, r7
 8010582:	f104 060b 	add.w	r6, r4, #11
 8010586:	f000 f855 	bl	8010634 <__malloc_unlock>
 801058a:	f026 0607 	bic.w	r6, r6, #7
 801058e:	1d23      	adds	r3, r4, #4
 8010590:	1af2      	subs	r2, r6, r3
 8010592:	d0b6      	beq.n	8010502 <_malloc_r+0x22>
 8010594:	1b9b      	subs	r3, r3, r6
 8010596:	50a3      	str	r3, [r4, r2]
 8010598:	e7b3      	b.n	8010502 <_malloc_r+0x22>
 801059a:	6862      	ldr	r2, [r4, #4]
 801059c:	42a3      	cmp	r3, r4
 801059e:	bf0c      	ite	eq
 80105a0:	6032      	streq	r2, [r6, #0]
 80105a2:	605a      	strne	r2, [r3, #4]
 80105a4:	e7ec      	b.n	8010580 <_malloc_r+0xa0>
 80105a6:	4623      	mov	r3, r4
 80105a8:	6864      	ldr	r4, [r4, #4]
 80105aa:	e7b2      	b.n	8010512 <_malloc_r+0x32>
 80105ac:	4634      	mov	r4, r6
 80105ae:	6876      	ldr	r6, [r6, #4]
 80105b0:	e7b9      	b.n	8010526 <_malloc_r+0x46>
 80105b2:	230c      	movs	r3, #12
 80105b4:	603b      	str	r3, [r7, #0]
 80105b6:	4638      	mov	r0, r7
 80105b8:	f000 f83c 	bl	8010634 <__malloc_unlock>
 80105bc:	e7a1      	b.n	8010502 <_malloc_r+0x22>
 80105be:	6025      	str	r5, [r4, #0]
 80105c0:	e7de      	b.n	8010580 <_malloc_r+0xa0>
 80105c2:	bf00      	nop
 80105c4:	24000eb8 	.word	0x24000eb8

080105c8 <_sbrk_r>:
 80105c8:	b538      	push	{r3, r4, r5, lr}
 80105ca:	4d06      	ldr	r5, [pc, #24]	; (80105e4 <_sbrk_r+0x1c>)
 80105cc:	2300      	movs	r3, #0
 80105ce:	4604      	mov	r4, r0
 80105d0:	4608      	mov	r0, r1
 80105d2:	602b      	str	r3, [r5, #0]
 80105d4:	f7f6 ffee 	bl	80075b4 <_sbrk>
 80105d8:	1c43      	adds	r3, r0, #1
 80105da:	d102      	bne.n	80105e2 <_sbrk_r+0x1a>
 80105dc:	682b      	ldr	r3, [r5, #0]
 80105de:	b103      	cbz	r3, 80105e2 <_sbrk_r+0x1a>
 80105e0:	6023      	str	r3, [r4, #0]
 80105e2:	bd38      	pop	{r3, r4, r5, pc}
 80105e4:	24000ec0 	.word	0x24000ec0

080105e8 <siprintf>:
 80105e8:	b40e      	push	{r1, r2, r3}
 80105ea:	b500      	push	{lr}
 80105ec:	b09c      	sub	sp, #112	; 0x70
 80105ee:	ab1d      	add	r3, sp, #116	; 0x74
 80105f0:	9002      	str	r0, [sp, #8]
 80105f2:	9006      	str	r0, [sp, #24]
 80105f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80105f8:	4809      	ldr	r0, [pc, #36]	; (8010620 <siprintf+0x38>)
 80105fa:	9107      	str	r1, [sp, #28]
 80105fc:	9104      	str	r1, [sp, #16]
 80105fe:	4909      	ldr	r1, [pc, #36]	; (8010624 <siprintf+0x3c>)
 8010600:	f853 2b04 	ldr.w	r2, [r3], #4
 8010604:	9105      	str	r1, [sp, #20]
 8010606:	6800      	ldr	r0, [r0, #0]
 8010608:	9301      	str	r3, [sp, #4]
 801060a:	a902      	add	r1, sp, #8
 801060c:	f000 f874 	bl	80106f8 <_svfiprintf_r>
 8010610:	9b02      	ldr	r3, [sp, #8]
 8010612:	2200      	movs	r2, #0
 8010614:	701a      	strb	r2, [r3, #0]
 8010616:	b01c      	add	sp, #112	; 0x70
 8010618:	f85d eb04 	ldr.w	lr, [sp], #4
 801061c:	b003      	add	sp, #12
 801061e:	4770      	bx	lr
 8010620:	24000024 	.word	0x24000024
 8010624:	ffff0208 	.word	0xffff0208

08010628 <__malloc_lock>:
 8010628:	4801      	ldr	r0, [pc, #4]	; (8010630 <__malloc_lock+0x8>)
 801062a:	f000 baf9 	b.w	8010c20 <__retarget_lock_acquire_recursive>
 801062e:	bf00      	nop
 8010630:	24000ec4 	.word	0x24000ec4

08010634 <__malloc_unlock>:
 8010634:	4801      	ldr	r0, [pc, #4]	; (801063c <__malloc_unlock+0x8>)
 8010636:	f000 baf4 	b.w	8010c22 <__retarget_lock_release_recursive>
 801063a:	bf00      	nop
 801063c:	24000ec4 	.word	0x24000ec4

08010640 <__ssputs_r>:
 8010640:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010644:	688e      	ldr	r6, [r1, #8]
 8010646:	429e      	cmp	r6, r3
 8010648:	4682      	mov	sl, r0
 801064a:	460c      	mov	r4, r1
 801064c:	4690      	mov	r8, r2
 801064e:	461f      	mov	r7, r3
 8010650:	d838      	bhi.n	80106c4 <__ssputs_r+0x84>
 8010652:	898a      	ldrh	r2, [r1, #12]
 8010654:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010658:	d032      	beq.n	80106c0 <__ssputs_r+0x80>
 801065a:	6825      	ldr	r5, [r4, #0]
 801065c:	6909      	ldr	r1, [r1, #16]
 801065e:	eba5 0901 	sub.w	r9, r5, r1
 8010662:	6965      	ldr	r5, [r4, #20]
 8010664:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010668:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801066c:	3301      	adds	r3, #1
 801066e:	444b      	add	r3, r9
 8010670:	106d      	asrs	r5, r5, #1
 8010672:	429d      	cmp	r5, r3
 8010674:	bf38      	it	cc
 8010676:	461d      	movcc	r5, r3
 8010678:	0553      	lsls	r3, r2, #21
 801067a:	d531      	bpl.n	80106e0 <__ssputs_r+0xa0>
 801067c:	4629      	mov	r1, r5
 801067e:	f7ff ff2f 	bl	80104e0 <_malloc_r>
 8010682:	4606      	mov	r6, r0
 8010684:	b950      	cbnz	r0, 801069c <__ssputs_r+0x5c>
 8010686:	230c      	movs	r3, #12
 8010688:	f8ca 3000 	str.w	r3, [sl]
 801068c:	89a3      	ldrh	r3, [r4, #12]
 801068e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010692:	81a3      	strh	r3, [r4, #12]
 8010694:	f04f 30ff 	mov.w	r0, #4294967295
 8010698:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801069c:	6921      	ldr	r1, [r4, #16]
 801069e:	464a      	mov	r2, r9
 80106a0:	f000 fac0 	bl	8010c24 <memcpy>
 80106a4:	89a3      	ldrh	r3, [r4, #12]
 80106a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80106aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80106ae:	81a3      	strh	r3, [r4, #12]
 80106b0:	6126      	str	r6, [r4, #16]
 80106b2:	6165      	str	r5, [r4, #20]
 80106b4:	444e      	add	r6, r9
 80106b6:	eba5 0509 	sub.w	r5, r5, r9
 80106ba:	6026      	str	r6, [r4, #0]
 80106bc:	60a5      	str	r5, [r4, #8]
 80106be:	463e      	mov	r6, r7
 80106c0:	42be      	cmp	r6, r7
 80106c2:	d900      	bls.n	80106c6 <__ssputs_r+0x86>
 80106c4:	463e      	mov	r6, r7
 80106c6:	6820      	ldr	r0, [r4, #0]
 80106c8:	4632      	mov	r2, r6
 80106ca:	4641      	mov	r1, r8
 80106cc:	f000 fab8 	bl	8010c40 <memmove>
 80106d0:	68a3      	ldr	r3, [r4, #8]
 80106d2:	1b9b      	subs	r3, r3, r6
 80106d4:	60a3      	str	r3, [r4, #8]
 80106d6:	6823      	ldr	r3, [r4, #0]
 80106d8:	4433      	add	r3, r6
 80106da:	6023      	str	r3, [r4, #0]
 80106dc:	2000      	movs	r0, #0
 80106de:	e7db      	b.n	8010698 <__ssputs_r+0x58>
 80106e0:	462a      	mov	r2, r5
 80106e2:	f000 fac7 	bl	8010c74 <_realloc_r>
 80106e6:	4606      	mov	r6, r0
 80106e8:	2800      	cmp	r0, #0
 80106ea:	d1e1      	bne.n	80106b0 <__ssputs_r+0x70>
 80106ec:	6921      	ldr	r1, [r4, #16]
 80106ee:	4650      	mov	r0, sl
 80106f0:	f7ff fe8a 	bl	8010408 <_free_r>
 80106f4:	e7c7      	b.n	8010686 <__ssputs_r+0x46>
	...

080106f8 <_svfiprintf_r>:
 80106f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106fc:	4698      	mov	r8, r3
 80106fe:	898b      	ldrh	r3, [r1, #12]
 8010700:	061b      	lsls	r3, r3, #24
 8010702:	b09d      	sub	sp, #116	; 0x74
 8010704:	4607      	mov	r7, r0
 8010706:	460d      	mov	r5, r1
 8010708:	4614      	mov	r4, r2
 801070a:	d50e      	bpl.n	801072a <_svfiprintf_r+0x32>
 801070c:	690b      	ldr	r3, [r1, #16]
 801070e:	b963      	cbnz	r3, 801072a <_svfiprintf_r+0x32>
 8010710:	2140      	movs	r1, #64	; 0x40
 8010712:	f7ff fee5 	bl	80104e0 <_malloc_r>
 8010716:	6028      	str	r0, [r5, #0]
 8010718:	6128      	str	r0, [r5, #16]
 801071a:	b920      	cbnz	r0, 8010726 <_svfiprintf_r+0x2e>
 801071c:	230c      	movs	r3, #12
 801071e:	603b      	str	r3, [r7, #0]
 8010720:	f04f 30ff 	mov.w	r0, #4294967295
 8010724:	e0d1      	b.n	80108ca <_svfiprintf_r+0x1d2>
 8010726:	2340      	movs	r3, #64	; 0x40
 8010728:	616b      	str	r3, [r5, #20]
 801072a:	2300      	movs	r3, #0
 801072c:	9309      	str	r3, [sp, #36]	; 0x24
 801072e:	2320      	movs	r3, #32
 8010730:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010734:	f8cd 800c 	str.w	r8, [sp, #12]
 8010738:	2330      	movs	r3, #48	; 0x30
 801073a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80108e4 <_svfiprintf_r+0x1ec>
 801073e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010742:	f04f 0901 	mov.w	r9, #1
 8010746:	4623      	mov	r3, r4
 8010748:	469a      	mov	sl, r3
 801074a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801074e:	b10a      	cbz	r2, 8010754 <_svfiprintf_r+0x5c>
 8010750:	2a25      	cmp	r2, #37	; 0x25
 8010752:	d1f9      	bne.n	8010748 <_svfiprintf_r+0x50>
 8010754:	ebba 0b04 	subs.w	fp, sl, r4
 8010758:	d00b      	beq.n	8010772 <_svfiprintf_r+0x7a>
 801075a:	465b      	mov	r3, fp
 801075c:	4622      	mov	r2, r4
 801075e:	4629      	mov	r1, r5
 8010760:	4638      	mov	r0, r7
 8010762:	f7ff ff6d 	bl	8010640 <__ssputs_r>
 8010766:	3001      	adds	r0, #1
 8010768:	f000 80aa 	beq.w	80108c0 <_svfiprintf_r+0x1c8>
 801076c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801076e:	445a      	add	r2, fp
 8010770:	9209      	str	r2, [sp, #36]	; 0x24
 8010772:	f89a 3000 	ldrb.w	r3, [sl]
 8010776:	2b00      	cmp	r3, #0
 8010778:	f000 80a2 	beq.w	80108c0 <_svfiprintf_r+0x1c8>
 801077c:	2300      	movs	r3, #0
 801077e:	f04f 32ff 	mov.w	r2, #4294967295
 8010782:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010786:	f10a 0a01 	add.w	sl, sl, #1
 801078a:	9304      	str	r3, [sp, #16]
 801078c:	9307      	str	r3, [sp, #28]
 801078e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010792:	931a      	str	r3, [sp, #104]	; 0x68
 8010794:	4654      	mov	r4, sl
 8010796:	2205      	movs	r2, #5
 8010798:	f814 1b01 	ldrb.w	r1, [r4], #1
 801079c:	4851      	ldr	r0, [pc, #324]	; (80108e4 <_svfiprintf_r+0x1ec>)
 801079e:	f7ef fd9f 	bl	80002e0 <memchr>
 80107a2:	9a04      	ldr	r2, [sp, #16]
 80107a4:	b9d8      	cbnz	r0, 80107de <_svfiprintf_r+0xe6>
 80107a6:	06d0      	lsls	r0, r2, #27
 80107a8:	bf44      	itt	mi
 80107aa:	2320      	movmi	r3, #32
 80107ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107b0:	0711      	lsls	r1, r2, #28
 80107b2:	bf44      	itt	mi
 80107b4:	232b      	movmi	r3, #43	; 0x2b
 80107b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80107ba:	f89a 3000 	ldrb.w	r3, [sl]
 80107be:	2b2a      	cmp	r3, #42	; 0x2a
 80107c0:	d015      	beq.n	80107ee <_svfiprintf_r+0xf6>
 80107c2:	9a07      	ldr	r2, [sp, #28]
 80107c4:	4654      	mov	r4, sl
 80107c6:	2000      	movs	r0, #0
 80107c8:	f04f 0c0a 	mov.w	ip, #10
 80107cc:	4621      	mov	r1, r4
 80107ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 80107d2:	3b30      	subs	r3, #48	; 0x30
 80107d4:	2b09      	cmp	r3, #9
 80107d6:	d94e      	bls.n	8010876 <_svfiprintf_r+0x17e>
 80107d8:	b1b0      	cbz	r0, 8010808 <_svfiprintf_r+0x110>
 80107da:	9207      	str	r2, [sp, #28]
 80107dc:	e014      	b.n	8010808 <_svfiprintf_r+0x110>
 80107de:	eba0 0308 	sub.w	r3, r0, r8
 80107e2:	fa09 f303 	lsl.w	r3, r9, r3
 80107e6:	4313      	orrs	r3, r2
 80107e8:	9304      	str	r3, [sp, #16]
 80107ea:	46a2      	mov	sl, r4
 80107ec:	e7d2      	b.n	8010794 <_svfiprintf_r+0x9c>
 80107ee:	9b03      	ldr	r3, [sp, #12]
 80107f0:	1d19      	adds	r1, r3, #4
 80107f2:	681b      	ldr	r3, [r3, #0]
 80107f4:	9103      	str	r1, [sp, #12]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	bfbb      	ittet	lt
 80107fa:	425b      	neglt	r3, r3
 80107fc:	f042 0202 	orrlt.w	r2, r2, #2
 8010800:	9307      	strge	r3, [sp, #28]
 8010802:	9307      	strlt	r3, [sp, #28]
 8010804:	bfb8      	it	lt
 8010806:	9204      	strlt	r2, [sp, #16]
 8010808:	7823      	ldrb	r3, [r4, #0]
 801080a:	2b2e      	cmp	r3, #46	; 0x2e
 801080c:	d10c      	bne.n	8010828 <_svfiprintf_r+0x130>
 801080e:	7863      	ldrb	r3, [r4, #1]
 8010810:	2b2a      	cmp	r3, #42	; 0x2a
 8010812:	d135      	bne.n	8010880 <_svfiprintf_r+0x188>
 8010814:	9b03      	ldr	r3, [sp, #12]
 8010816:	1d1a      	adds	r2, r3, #4
 8010818:	681b      	ldr	r3, [r3, #0]
 801081a:	9203      	str	r2, [sp, #12]
 801081c:	2b00      	cmp	r3, #0
 801081e:	bfb8      	it	lt
 8010820:	f04f 33ff 	movlt.w	r3, #4294967295
 8010824:	3402      	adds	r4, #2
 8010826:	9305      	str	r3, [sp, #20]
 8010828:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80108f4 <_svfiprintf_r+0x1fc>
 801082c:	7821      	ldrb	r1, [r4, #0]
 801082e:	2203      	movs	r2, #3
 8010830:	4650      	mov	r0, sl
 8010832:	f7ef fd55 	bl	80002e0 <memchr>
 8010836:	b140      	cbz	r0, 801084a <_svfiprintf_r+0x152>
 8010838:	2340      	movs	r3, #64	; 0x40
 801083a:	eba0 000a 	sub.w	r0, r0, sl
 801083e:	fa03 f000 	lsl.w	r0, r3, r0
 8010842:	9b04      	ldr	r3, [sp, #16]
 8010844:	4303      	orrs	r3, r0
 8010846:	3401      	adds	r4, #1
 8010848:	9304      	str	r3, [sp, #16]
 801084a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801084e:	4826      	ldr	r0, [pc, #152]	; (80108e8 <_svfiprintf_r+0x1f0>)
 8010850:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010854:	2206      	movs	r2, #6
 8010856:	f7ef fd43 	bl	80002e0 <memchr>
 801085a:	2800      	cmp	r0, #0
 801085c:	d038      	beq.n	80108d0 <_svfiprintf_r+0x1d8>
 801085e:	4b23      	ldr	r3, [pc, #140]	; (80108ec <_svfiprintf_r+0x1f4>)
 8010860:	bb1b      	cbnz	r3, 80108aa <_svfiprintf_r+0x1b2>
 8010862:	9b03      	ldr	r3, [sp, #12]
 8010864:	3307      	adds	r3, #7
 8010866:	f023 0307 	bic.w	r3, r3, #7
 801086a:	3308      	adds	r3, #8
 801086c:	9303      	str	r3, [sp, #12]
 801086e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010870:	4433      	add	r3, r6
 8010872:	9309      	str	r3, [sp, #36]	; 0x24
 8010874:	e767      	b.n	8010746 <_svfiprintf_r+0x4e>
 8010876:	fb0c 3202 	mla	r2, ip, r2, r3
 801087a:	460c      	mov	r4, r1
 801087c:	2001      	movs	r0, #1
 801087e:	e7a5      	b.n	80107cc <_svfiprintf_r+0xd4>
 8010880:	2300      	movs	r3, #0
 8010882:	3401      	adds	r4, #1
 8010884:	9305      	str	r3, [sp, #20]
 8010886:	4619      	mov	r1, r3
 8010888:	f04f 0c0a 	mov.w	ip, #10
 801088c:	4620      	mov	r0, r4
 801088e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010892:	3a30      	subs	r2, #48	; 0x30
 8010894:	2a09      	cmp	r2, #9
 8010896:	d903      	bls.n	80108a0 <_svfiprintf_r+0x1a8>
 8010898:	2b00      	cmp	r3, #0
 801089a:	d0c5      	beq.n	8010828 <_svfiprintf_r+0x130>
 801089c:	9105      	str	r1, [sp, #20]
 801089e:	e7c3      	b.n	8010828 <_svfiprintf_r+0x130>
 80108a0:	fb0c 2101 	mla	r1, ip, r1, r2
 80108a4:	4604      	mov	r4, r0
 80108a6:	2301      	movs	r3, #1
 80108a8:	e7f0      	b.n	801088c <_svfiprintf_r+0x194>
 80108aa:	ab03      	add	r3, sp, #12
 80108ac:	9300      	str	r3, [sp, #0]
 80108ae:	462a      	mov	r2, r5
 80108b0:	4b0f      	ldr	r3, [pc, #60]	; (80108f0 <_svfiprintf_r+0x1f8>)
 80108b2:	a904      	add	r1, sp, #16
 80108b4:	4638      	mov	r0, r7
 80108b6:	f3af 8000 	nop.w
 80108ba:	1c42      	adds	r2, r0, #1
 80108bc:	4606      	mov	r6, r0
 80108be:	d1d6      	bne.n	801086e <_svfiprintf_r+0x176>
 80108c0:	89ab      	ldrh	r3, [r5, #12]
 80108c2:	065b      	lsls	r3, r3, #25
 80108c4:	f53f af2c 	bmi.w	8010720 <_svfiprintf_r+0x28>
 80108c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80108ca:	b01d      	add	sp, #116	; 0x74
 80108cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108d0:	ab03      	add	r3, sp, #12
 80108d2:	9300      	str	r3, [sp, #0]
 80108d4:	462a      	mov	r2, r5
 80108d6:	4b06      	ldr	r3, [pc, #24]	; (80108f0 <_svfiprintf_r+0x1f8>)
 80108d8:	a904      	add	r1, sp, #16
 80108da:	4638      	mov	r0, r7
 80108dc:	f000 f87a 	bl	80109d4 <_printf_i>
 80108e0:	e7eb      	b.n	80108ba <_svfiprintf_r+0x1c2>
 80108e2:	bf00      	nop
 80108e4:	08012690 	.word	0x08012690
 80108e8:	0801269a 	.word	0x0801269a
 80108ec:	00000000 	.word	0x00000000
 80108f0:	08010641 	.word	0x08010641
 80108f4:	08012696 	.word	0x08012696

080108f8 <_printf_common>:
 80108f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108fc:	4616      	mov	r6, r2
 80108fe:	4699      	mov	r9, r3
 8010900:	688a      	ldr	r2, [r1, #8]
 8010902:	690b      	ldr	r3, [r1, #16]
 8010904:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010908:	4293      	cmp	r3, r2
 801090a:	bfb8      	it	lt
 801090c:	4613      	movlt	r3, r2
 801090e:	6033      	str	r3, [r6, #0]
 8010910:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010914:	4607      	mov	r7, r0
 8010916:	460c      	mov	r4, r1
 8010918:	b10a      	cbz	r2, 801091e <_printf_common+0x26>
 801091a:	3301      	adds	r3, #1
 801091c:	6033      	str	r3, [r6, #0]
 801091e:	6823      	ldr	r3, [r4, #0]
 8010920:	0699      	lsls	r1, r3, #26
 8010922:	bf42      	ittt	mi
 8010924:	6833      	ldrmi	r3, [r6, #0]
 8010926:	3302      	addmi	r3, #2
 8010928:	6033      	strmi	r3, [r6, #0]
 801092a:	6825      	ldr	r5, [r4, #0]
 801092c:	f015 0506 	ands.w	r5, r5, #6
 8010930:	d106      	bne.n	8010940 <_printf_common+0x48>
 8010932:	f104 0a19 	add.w	sl, r4, #25
 8010936:	68e3      	ldr	r3, [r4, #12]
 8010938:	6832      	ldr	r2, [r6, #0]
 801093a:	1a9b      	subs	r3, r3, r2
 801093c:	42ab      	cmp	r3, r5
 801093e:	dc26      	bgt.n	801098e <_printf_common+0x96>
 8010940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8010944:	1e13      	subs	r3, r2, #0
 8010946:	6822      	ldr	r2, [r4, #0]
 8010948:	bf18      	it	ne
 801094a:	2301      	movne	r3, #1
 801094c:	0692      	lsls	r2, r2, #26
 801094e:	d42b      	bmi.n	80109a8 <_printf_common+0xb0>
 8010950:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8010954:	4649      	mov	r1, r9
 8010956:	4638      	mov	r0, r7
 8010958:	47c0      	blx	r8
 801095a:	3001      	adds	r0, #1
 801095c:	d01e      	beq.n	801099c <_printf_common+0xa4>
 801095e:	6823      	ldr	r3, [r4, #0]
 8010960:	68e5      	ldr	r5, [r4, #12]
 8010962:	6832      	ldr	r2, [r6, #0]
 8010964:	f003 0306 	and.w	r3, r3, #6
 8010968:	2b04      	cmp	r3, #4
 801096a:	bf08      	it	eq
 801096c:	1aad      	subeq	r5, r5, r2
 801096e:	68a3      	ldr	r3, [r4, #8]
 8010970:	6922      	ldr	r2, [r4, #16]
 8010972:	bf0c      	ite	eq
 8010974:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010978:	2500      	movne	r5, #0
 801097a:	4293      	cmp	r3, r2
 801097c:	bfc4      	itt	gt
 801097e:	1a9b      	subgt	r3, r3, r2
 8010980:	18ed      	addgt	r5, r5, r3
 8010982:	2600      	movs	r6, #0
 8010984:	341a      	adds	r4, #26
 8010986:	42b5      	cmp	r5, r6
 8010988:	d11a      	bne.n	80109c0 <_printf_common+0xc8>
 801098a:	2000      	movs	r0, #0
 801098c:	e008      	b.n	80109a0 <_printf_common+0xa8>
 801098e:	2301      	movs	r3, #1
 8010990:	4652      	mov	r2, sl
 8010992:	4649      	mov	r1, r9
 8010994:	4638      	mov	r0, r7
 8010996:	47c0      	blx	r8
 8010998:	3001      	adds	r0, #1
 801099a:	d103      	bne.n	80109a4 <_printf_common+0xac>
 801099c:	f04f 30ff 	mov.w	r0, #4294967295
 80109a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80109a4:	3501      	adds	r5, #1
 80109a6:	e7c6      	b.n	8010936 <_printf_common+0x3e>
 80109a8:	18e1      	adds	r1, r4, r3
 80109aa:	1c5a      	adds	r2, r3, #1
 80109ac:	2030      	movs	r0, #48	; 0x30
 80109ae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80109b2:	4422      	add	r2, r4
 80109b4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80109b8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80109bc:	3302      	adds	r3, #2
 80109be:	e7c7      	b.n	8010950 <_printf_common+0x58>
 80109c0:	2301      	movs	r3, #1
 80109c2:	4622      	mov	r2, r4
 80109c4:	4649      	mov	r1, r9
 80109c6:	4638      	mov	r0, r7
 80109c8:	47c0      	blx	r8
 80109ca:	3001      	adds	r0, #1
 80109cc:	d0e6      	beq.n	801099c <_printf_common+0xa4>
 80109ce:	3601      	adds	r6, #1
 80109d0:	e7d9      	b.n	8010986 <_printf_common+0x8e>
	...

080109d4 <_printf_i>:
 80109d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80109d8:	7e0f      	ldrb	r7, [r1, #24]
 80109da:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80109dc:	2f78      	cmp	r7, #120	; 0x78
 80109de:	4691      	mov	r9, r2
 80109e0:	4680      	mov	r8, r0
 80109e2:	460c      	mov	r4, r1
 80109e4:	469a      	mov	sl, r3
 80109e6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80109ea:	d807      	bhi.n	80109fc <_printf_i+0x28>
 80109ec:	2f62      	cmp	r7, #98	; 0x62
 80109ee:	d80a      	bhi.n	8010a06 <_printf_i+0x32>
 80109f0:	2f00      	cmp	r7, #0
 80109f2:	f000 80d8 	beq.w	8010ba6 <_printf_i+0x1d2>
 80109f6:	2f58      	cmp	r7, #88	; 0x58
 80109f8:	f000 80a3 	beq.w	8010b42 <_printf_i+0x16e>
 80109fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010a04:	e03a      	b.n	8010a7c <_printf_i+0xa8>
 8010a06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010a0a:	2b15      	cmp	r3, #21
 8010a0c:	d8f6      	bhi.n	80109fc <_printf_i+0x28>
 8010a0e:	a101      	add	r1, pc, #4	; (adr r1, 8010a14 <_printf_i+0x40>)
 8010a10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010a14:	08010a6d 	.word	0x08010a6d
 8010a18:	08010a81 	.word	0x08010a81
 8010a1c:	080109fd 	.word	0x080109fd
 8010a20:	080109fd 	.word	0x080109fd
 8010a24:	080109fd 	.word	0x080109fd
 8010a28:	080109fd 	.word	0x080109fd
 8010a2c:	08010a81 	.word	0x08010a81
 8010a30:	080109fd 	.word	0x080109fd
 8010a34:	080109fd 	.word	0x080109fd
 8010a38:	080109fd 	.word	0x080109fd
 8010a3c:	080109fd 	.word	0x080109fd
 8010a40:	08010b8d 	.word	0x08010b8d
 8010a44:	08010ab1 	.word	0x08010ab1
 8010a48:	08010b6f 	.word	0x08010b6f
 8010a4c:	080109fd 	.word	0x080109fd
 8010a50:	080109fd 	.word	0x080109fd
 8010a54:	08010baf 	.word	0x08010baf
 8010a58:	080109fd 	.word	0x080109fd
 8010a5c:	08010ab1 	.word	0x08010ab1
 8010a60:	080109fd 	.word	0x080109fd
 8010a64:	080109fd 	.word	0x080109fd
 8010a68:	08010b77 	.word	0x08010b77
 8010a6c:	682b      	ldr	r3, [r5, #0]
 8010a6e:	1d1a      	adds	r2, r3, #4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	602a      	str	r2, [r5, #0]
 8010a74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8010a78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8010a7c:	2301      	movs	r3, #1
 8010a7e:	e0a3      	b.n	8010bc8 <_printf_i+0x1f4>
 8010a80:	6820      	ldr	r0, [r4, #0]
 8010a82:	6829      	ldr	r1, [r5, #0]
 8010a84:	0606      	lsls	r6, r0, #24
 8010a86:	f101 0304 	add.w	r3, r1, #4
 8010a8a:	d50a      	bpl.n	8010aa2 <_printf_i+0xce>
 8010a8c:	680e      	ldr	r6, [r1, #0]
 8010a8e:	602b      	str	r3, [r5, #0]
 8010a90:	2e00      	cmp	r6, #0
 8010a92:	da03      	bge.n	8010a9c <_printf_i+0xc8>
 8010a94:	232d      	movs	r3, #45	; 0x2d
 8010a96:	4276      	negs	r6, r6
 8010a98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010a9c:	485e      	ldr	r0, [pc, #376]	; (8010c18 <_printf_i+0x244>)
 8010a9e:	230a      	movs	r3, #10
 8010aa0:	e019      	b.n	8010ad6 <_printf_i+0x102>
 8010aa2:	680e      	ldr	r6, [r1, #0]
 8010aa4:	602b      	str	r3, [r5, #0]
 8010aa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010aaa:	bf18      	it	ne
 8010aac:	b236      	sxthne	r6, r6
 8010aae:	e7ef      	b.n	8010a90 <_printf_i+0xbc>
 8010ab0:	682b      	ldr	r3, [r5, #0]
 8010ab2:	6820      	ldr	r0, [r4, #0]
 8010ab4:	1d19      	adds	r1, r3, #4
 8010ab6:	6029      	str	r1, [r5, #0]
 8010ab8:	0601      	lsls	r1, r0, #24
 8010aba:	d501      	bpl.n	8010ac0 <_printf_i+0xec>
 8010abc:	681e      	ldr	r6, [r3, #0]
 8010abe:	e002      	b.n	8010ac6 <_printf_i+0xf2>
 8010ac0:	0646      	lsls	r6, r0, #25
 8010ac2:	d5fb      	bpl.n	8010abc <_printf_i+0xe8>
 8010ac4:	881e      	ldrh	r6, [r3, #0]
 8010ac6:	4854      	ldr	r0, [pc, #336]	; (8010c18 <_printf_i+0x244>)
 8010ac8:	2f6f      	cmp	r7, #111	; 0x6f
 8010aca:	bf0c      	ite	eq
 8010acc:	2308      	moveq	r3, #8
 8010ace:	230a      	movne	r3, #10
 8010ad0:	2100      	movs	r1, #0
 8010ad2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010ad6:	6865      	ldr	r5, [r4, #4]
 8010ad8:	60a5      	str	r5, [r4, #8]
 8010ada:	2d00      	cmp	r5, #0
 8010adc:	bfa2      	ittt	ge
 8010ade:	6821      	ldrge	r1, [r4, #0]
 8010ae0:	f021 0104 	bicge.w	r1, r1, #4
 8010ae4:	6021      	strge	r1, [r4, #0]
 8010ae6:	b90e      	cbnz	r6, 8010aec <_printf_i+0x118>
 8010ae8:	2d00      	cmp	r5, #0
 8010aea:	d04d      	beq.n	8010b88 <_printf_i+0x1b4>
 8010aec:	4615      	mov	r5, r2
 8010aee:	fbb6 f1f3 	udiv	r1, r6, r3
 8010af2:	fb03 6711 	mls	r7, r3, r1, r6
 8010af6:	5dc7      	ldrb	r7, [r0, r7]
 8010af8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010afc:	4637      	mov	r7, r6
 8010afe:	42bb      	cmp	r3, r7
 8010b00:	460e      	mov	r6, r1
 8010b02:	d9f4      	bls.n	8010aee <_printf_i+0x11a>
 8010b04:	2b08      	cmp	r3, #8
 8010b06:	d10b      	bne.n	8010b20 <_printf_i+0x14c>
 8010b08:	6823      	ldr	r3, [r4, #0]
 8010b0a:	07de      	lsls	r6, r3, #31
 8010b0c:	d508      	bpl.n	8010b20 <_printf_i+0x14c>
 8010b0e:	6923      	ldr	r3, [r4, #16]
 8010b10:	6861      	ldr	r1, [r4, #4]
 8010b12:	4299      	cmp	r1, r3
 8010b14:	bfde      	ittt	le
 8010b16:	2330      	movle	r3, #48	; 0x30
 8010b18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010b1c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8010b20:	1b52      	subs	r2, r2, r5
 8010b22:	6122      	str	r2, [r4, #16]
 8010b24:	f8cd a000 	str.w	sl, [sp]
 8010b28:	464b      	mov	r3, r9
 8010b2a:	aa03      	add	r2, sp, #12
 8010b2c:	4621      	mov	r1, r4
 8010b2e:	4640      	mov	r0, r8
 8010b30:	f7ff fee2 	bl	80108f8 <_printf_common>
 8010b34:	3001      	adds	r0, #1
 8010b36:	d14c      	bne.n	8010bd2 <_printf_i+0x1fe>
 8010b38:	f04f 30ff 	mov.w	r0, #4294967295
 8010b3c:	b004      	add	sp, #16
 8010b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010b42:	4835      	ldr	r0, [pc, #212]	; (8010c18 <_printf_i+0x244>)
 8010b44:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8010b48:	6829      	ldr	r1, [r5, #0]
 8010b4a:	6823      	ldr	r3, [r4, #0]
 8010b4c:	f851 6b04 	ldr.w	r6, [r1], #4
 8010b50:	6029      	str	r1, [r5, #0]
 8010b52:	061d      	lsls	r5, r3, #24
 8010b54:	d514      	bpl.n	8010b80 <_printf_i+0x1ac>
 8010b56:	07df      	lsls	r7, r3, #31
 8010b58:	bf44      	itt	mi
 8010b5a:	f043 0320 	orrmi.w	r3, r3, #32
 8010b5e:	6023      	strmi	r3, [r4, #0]
 8010b60:	b91e      	cbnz	r6, 8010b6a <_printf_i+0x196>
 8010b62:	6823      	ldr	r3, [r4, #0]
 8010b64:	f023 0320 	bic.w	r3, r3, #32
 8010b68:	6023      	str	r3, [r4, #0]
 8010b6a:	2310      	movs	r3, #16
 8010b6c:	e7b0      	b.n	8010ad0 <_printf_i+0xfc>
 8010b6e:	6823      	ldr	r3, [r4, #0]
 8010b70:	f043 0320 	orr.w	r3, r3, #32
 8010b74:	6023      	str	r3, [r4, #0]
 8010b76:	2378      	movs	r3, #120	; 0x78
 8010b78:	4828      	ldr	r0, [pc, #160]	; (8010c1c <_printf_i+0x248>)
 8010b7a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8010b7e:	e7e3      	b.n	8010b48 <_printf_i+0x174>
 8010b80:	0659      	lsls	r1, r3, #25
 8010b82:	bf48      	it	mi
 8010b84:	b2b6      	uxthmi	r6, r6
 8010b86:	e7e6      	b.n	8010b56 <_printf_i+0x182>
 8010b88:	4615      	mov	r5, r2
 8010b8a:	e7bb      	b.n	8010b04 <_printf_i+0x130>
 8010b8c:	682b      	ldr	r3, [r5, #0]
 8010b8e:	6826      	ldr	r6, [r4, #0]
 8010b90:	6961      	ldr	r1, [r4, #20]
 8010b92:	1d18      	adds	r0, r3, #4
 8010b94:	6028      	str	r0, [r5, #0]
 8010b96:	0635      	lsls	r5, r6, #24
 8010b98:	681b      	ldr	r3, [r3, #0]
 8010b9a:	d501      	bpl.n	8010ba0 <_printf_i+0x1cc>
 8010b9c:	6019      	str	r1, [r3, #0]
 8010b9e:	e002      	b.n	8010ba6 <_printf_i+0x1d2>
 8010ba0:	0670      	lsls	r0, r6, #25
 8010ba2:	d5fb      	bpl.n	8010b9c <_printf_i+0x1c8>
 8010ba4:	8019      	strh	r1, [r3, #0]
 8010ba6:	2300      	movs	r3, #0
 8010ba8:	6123      	str	r3, [r4, #16]
 8010baa:	4615      	mov	r5, r2
 8010bac:	e7ba      	b.n	8010b24 <_printf_i+0x150>
 8010bae:	682b      	ldr	r3, [r5, #0]
 8010bb0:	1d1a      	adds	r2, r3, #4
 8010bb2:	602a      	str	r2, [r5, #0]
 8010bb4:	681d      	ldr	r5, [r3, #0]
 8010bb6:	6862      	ldr	r2, [r4, #4]
 8010bb8:	2100      	movs	r1, #0
 8010bba:	4628      	mov	r0, r5
 8010bbc:	f7ef fb90 	bl	80002e0 <memchr>
 8010bc0:	b108      	cbz	r0, 8010bc6 <_printf_i+0x1f2>
 8010bc2:	1b40      	subs	r0, r0, r5
 8010bc4:	6060      	str	r0, [r4, #4]
 8010bc6:	6863      	ldr	r3, [r4, #4]
 8010bc8:	6123      	str	r3, [r4, #16]
 8010bca:	2300      	movs	r3, #0
 8010bcc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8010bd0:	e7a8      	b.n	8010b24 <_printf_i+0x150>
 8010bd2:	6923      	ldr	r3, [r4, #16]
 8010bd4:	462a      	mov	r2, r5
 8010bd6:	4649      	mov	r1, r9
 8010bd8:	4640      	mov	r0, r8
 8010bda:	47d0      	blx	sl
 8010bdc:	3001      	adds	r0, #1
 8010bde:	d0ab      	beq.n	8010b38 <_printf_i+0x164>
 8010be0:	6823      	ldr	r3, [r4, #0]
 8010be2:	079b      	lsls	r3, r3, #30
 8010be4:	d413      	bmi.n	8010c0e <_printf_i+0x23a>
 8010be6:	68e0      	ldr	r0, [r4, #12]
 8010be8:	9b03      	ldr	r3, [sp, #12]
 8010bea:	4298      	cmp	r0, r3
 8010bec:	bfb8      	it	lt
 8010bee:	4618      	movlt	r0, r3
 8010bf0:	e7a4      	b.n	8010b3c <_printf_i+0x168>
 8010bf2:	2301      	movs	r3, #1
 8010bf4:	4632      	mov	r2, r6
 8010bf6:	4649      	mov	r1, r9
 8010bf8:	4640      	mov	r0, r8
 8010bfa:	47d0      	blx	sl
 8010bfc:	3001      	adds	r0, #1
 8010bfe:	d09b      	beq.n	8010b38 <_printf_i+0x164>
 8010c00:	3501      	adds	r5, #1
 8010c02:	68e3      	ldr	r3, [r4, #12]
 8010c04:	9903      	ldr	r1, [sp, #12]
 8010c06:	1a5b      	subs	r3, r3, r1
 8010c08:	42ab      	cmp	r3, r5
 8010c0a:	dcf2      	bgt.n	8010bf2 <_printf_i+0x21e>
 8010c0c:	e7eb      	b.n	8010be6 <_printf_i+0x212>
 8010c0e:	2500      	movs	r5, #0
 8010c10:	f104 0619 	add.w	r6, r4, #25
 8010c14:	e7f5      	b.n	8010c02 <_printf_i+0x22e>
 8010c16:	bf00      	nop
 8010c18:	080126a1 	.word	0x080126a1
 8010c1c:	080126b2 	.word	0x080126b2

08010c20 <__retarget_lock_acquire_recursive>:
 8010c20:	4770      	bx	lr

08010c22 <__retarget_lock_release_recursive>:
 8010c22:	4770      	bx	lr

08010c24 <memcpy>:
 8010c24:	440a      	add	r2, r1
 8010c26:	4291      	cmp	r1, r2
 8010c28:	f100 33ff 	add.w	r3, r0, #4294967295
 8010c2c:	d100      	bne.n	8010c30 <memcpy+0xc>
 8010c2e:	4770      	bx	lr
 8010c30:	b510      	push	{r4, lr}
 8010c32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010c36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010c3a:	4291      	cmp	r1, r2
 8010c3c:	d1f9      	bne.n	8010c32 <memcpy+0xe>
 8010c3e:	bd10      	pop	{r4, pc}

08010c40 <memmove>:
 8010c40:	4288      	cmp	r0, r1
 8010c42:	b510      	push	{r4, lr}
 8010c44:	eb01 0402 	add.w	r4, r1, r2
 8010c48:	d902      	bls.n	8010c50 <memmove+0x10>
 8010c4a:	4284      	cmp	r4, r0
 8010c4c:	4623      	mov	r3, r4
 8010c4e:	d807      	bhi.n	8010c60 <memmove+0x20>
 8010c50:	1e43      	subs	r3, r0, #1
 8010c52:	42a1      	cmp	r1, r4
 8010c54:	d008      	beq.n	8010c68 <memmove+0x28>
 8010c56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010c5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010c5e:	e7f8      	b.n	8010c52 <memmove+0x12>
 8010c60:	4402      	add	r2, r0
 8010c62:	4601      	mov	r1, r0
 8010c64:	428a      	cmp	r2, r1
 8010c66:	d100      	bne.n	8010c6a <memmove+0x2a>
 8010c68:	bd10      	pop	{r4, pc}
 8010c6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010c6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010c72:	e7f7      	b.n	8010c64 <memmove+0x24>

08010c74 <_realloc_r>:
 8010c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c78:	4680      	mov	r8, r0
 8010c7a:	4614      	mov	r4, r2
 8010c7c:	460e      	mov	r6, r1
 8010c7e:	b921      	cbnz	r1, 8010c8a <_realloc_r+0x16>
 8010c80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c84:	4611      	mov	r1, r2
 8010c86:	f7ff bc2b 	b.w	80104e0 <_malloc_r>
 8010c8a:	b92a      	cbnz	r2, 8010c98 <_realloc_r+0x24>
 8010c8c:	f7ff fbbc 	bl	8010408 <_free_r>
 8010c90:	4625      	mov	r5, r4
 8010c92:	4628      	mov	r0, r5
 8010c94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c98:	f000 f81b 	bl	8010cd2 <_malloc_usable_size_r>
 8010c9c:	4284      	cmp	r4, r0
 8010c9e:	4607      	mov	r7, r0
 8010ca0:	d802      	bhi.n	8010ca8 <_realloc_r+0x34>
 8010ca2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010ca6:	d812      	bhi.n	8010cce <_realloc_r+0x5a>
 8010ca8:	4621      	mov	r1, r4
 8010caa:	4640      	mov	r0, r8
 8010cac:	f7ff fc18 	bl	80104e0 <_malloc_r>
 8010cb0:	4605      	mov	r5, r0
 8010cb2:	2800      	cmp	r0, #0
 8010cb4:	d0ed      	beq.n	8010c92 <_realloc_r+0x1e>
 8010cb6:	42bc      	cmp	r4, r7
 8010cb8:	4622      	mov	r2, r4
 8010cba:	4631      	mov	r1, r6
 8010cbc:	bf28      	it	cs
 8010cbe:	463a      	movcs	r2, r7
 8010cc0:	f7ff ffb0 	bl	8010c24 <memcpy>
 8010cc4:	4631      	mov	r1, r6
 8010cc6:	4640      	mov	r0, r8
 8010cc8:	f7ff fb9e 	bl	8010408 <_free_r>
 8010ccc:	e7e1      	b.n	8010c92 <_realloc_r+0x1e>
 8010cce:	4635      	mov	r5, r6
 8010cd0:	e7df      	b.n	8010c92 <_realloc_r+0x1e>

08010cd2 <_malloc_usable_size_r>:
 8010cd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cd6:	1f18      	subs	r0, r3, #4
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	bfbc      	itt	lt
 8010cdc:	580b      	ldrlt	r3, [r1, r0]
 8010cde:	18c0      	addlt	r0, r0, r3
 8010ce0:	4770      	bx	lr
	...

08010ce4 <_init>:
 8010ce4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ce6:	bf00      	nop
 8010ce8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cea:	bc08      	pop	{r3}
 8010cec:	469e      	mov	lr, r3
 8010cee:	4770      	bx	lr

08010cf0 <_fini>:
 8010cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cf2:	bf00      	nop
 8010cf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010cf6:	bc08      	pop	{r3}
 8010cf8:	469e      	mov	lr, r3
 8010cfa:	4770      	bx	lr
