
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f384  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000019c8  0800f624  0800f624  0001f624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fec  08010fec  00030148  2**0
                  CONTENTS
  4 .ARM          00000008  08010fec  08010fec  00020fec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ff4  08010ff4  00030148  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ff4  08010ff4  00020ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ff8  08010ff8  00020ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08010ffc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000088  08011084  00030088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e8  080110e4  000300e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000d80  24000148  08011144  00030148  2**3
                  ALLOC
 12 ._user_heap_stack 00000600  24000ec8  08011144  00030ec8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00030148  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002619f  00000000  00000000  00030176  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003bfa  00000000  00000000  00056315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001a78  00000000  00000000  00059f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000019d0  00000000  00000000  0005b988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003da33  00000000  00000000  0005d358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000237e5  00000000  00000000  0009ad8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0019374c  00000000  00000000  000be570  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00251cbc  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00007650  00000000  00000000  00251d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000148 	.word	0x24000148
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800f60c 	.word	0x0800f60c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400014c 	.word	0x2400014c
 80002dc:	0800f60c 	.word	0x0800f60c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	68da      	ldr	r2, [r3, #12]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	60da      	str	r2, [r3, #12]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
	dst->actionPoint_Atk = src->actionPoint_Atk;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	7a1a      	ldrb	r2, [r3, #8]
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	721a      	strb	r2, [r3, #8]
	dst->actionPoint_Eff = src->actionPoint_Eff;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	7a5a      	ldrb	r2, [r3, #9]
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	725a      	strb	r2, [r3, #9]
}
 80006e6:	bf00      	nop
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <YUGIOH_card_clear>:

void YUGIOH_card_clear(YUGIOH_Card *card)
{
 80006f2:	b580      	push	{r7, lr}
 80006f4:	b086      	sub	sp, #24
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buff = {0};
 80006fa:	f107 0308 	add.w	r3, r7, #8
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]
	YUGIOH_card_copy(&buff, card);
 8000708:	f107 0308 	add.w	r3, r7, #8
 800070c:	6879      	ldr	r1, [r7, #4]
 800070e:	4618      	mov	r0, r3
 8000710:	f7ff ffb8 	bl	8000684 <YUGIOH_card_copy>
}
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <RFID_Clear_Card_Bufffer>:

void RFID_Clear_Card_Bufffer(RFID *rfid) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b084      	sub	sp, #16
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	3318      	adds	r3, #24
 8000728:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800072a:	2300      	movs	r3, #0
 800072c:	72fb      	strb	r3, [r7, #11]
 800072e:	e008      	b.n	8000742 <RFID_Clear_Card_Bufffer+0x26>
		YUGIOH_card_clear(ptrYUGIOHCard);
 8000730:	68f8      	ldr	r0, [r7, #12]
 8000732:	f7ff ffde 	bl	80006f2 <YUGIOH_card_clear>
		ptrYUGIOHCard++;
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	3310      	adds	r3, #16
 800073a:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3301      	adds	r3, #1
 8000740:	72fb      	strb	r3, [r7, #11]
 8000742:	7afb      	ldrb	r3, [r7, #11]
 8000744:	2b03      	cmp	r3, #3
 8000746:	d9f3      	bls.n	8000730 <RFID_Clear_Card_Bufffer+0x14>
	}
}
 8000748:	bf00      	nop
 800074a:	bf00      	nop
 800074c:	3710      	adds	r7, #16
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
	...

08000754 <Player_Reading_Card>:
	card->standPosition = 255;
	card->targetPosition = 255;
}

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08e      	sub	sp, #56	; 0x38
 8000758:	af00      	add	r7, sp, #0
 800075a:	60f8      	str	r0, [r7, #12]
 800075c:	60b9      	str	r1, [r7, #8]
 800075e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	3328      	adds	r3, #40	; 0x28
 8000764:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	881b      	ldrh	r3, [r3, #0]
 800076a:	461a      	mov	r2, r3
 800076c:	2358      	movs	r3, #88	; 0x58
 800076e:	fb02 f303 	mul.w	r3, r2, r3
 8000772:	3328      	adds	r3, #40	; 0x28
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4413      	add	r3, r2
 8000778:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800077a:	6a3b      	ldr	r3, [r7, #32]
 800077c:	3318      	adds	r3, #24
 800077e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000786:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	3308      	adds	r3, #8
 800078c:	637b      	str	r3, [r7, #52]	; 0x34

	uint8_t flag_played = 0;
 800078e:	2300      	movs	r3, #0
 8000790:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	if (ptrRFID->action == 1) // Card Detected
 8000794:	6a3b      	ldr	r3, [r7, #32]
 8000796:	78db      	ldrb	r3, [r3, #3]
 8000798:	2b01      	cmp	r3, #1
 800079a:	f040 80dc 	bne.w	8000956 <Player_Reading_Card+0x202>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 800079e:	2300      	movs	r3, #0
 80007a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007a2:	e013      	b.n	80007cc <Player_Reading_Card+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 80007a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007a6:	68da      	ldr	r2, [r3, #12]
 80007a8:	69fb      	ldr	r3, [r7, #28]
 80007aa:	68db      	ldr	r3, [r3, #12]
 80007ac:	429a      	cmp	r2, r3
 80007ae:	d107      	bne.n	80007c0 <Player_Reading_Card+0x6c>
 80007b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007b2:	785b      	ldrb	r3, [r3, #1]
 80007b4:	2b01      	cmp	r3, #1
 80007b6:	d103      	bne.n	80007c0 <Player_Reading_Card+0x6c>
				flag_played = 1;
 80007b8:	2301      	movs	r3, #1
 80007ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 80007be:	e008      	b.n	80007d2 <Player_Reading_Card+0x7e>
			}
			ptrYugiohCard_played++;
 80007c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c2:	3310      	adds	r3, #16
 80007c4:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < 6; ++i) {
 80007c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007c8:	3301      	adds	r3, #1
 80007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80007cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007ce:	2b05      	cmp	r3, #5
 80007d0:	dde8      	ble.n	80007a4 <Player_Reading_Card+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80007d8:	637b      	str	r3, [r7, #52]	; 0x34
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007dc:	68da      	ldr	r2, [r3, #12]
 80007de:	69fb      	ldr	r3, [r7, #28]
 80007e0:	68db      	ldr	r3, [r3, #12]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d102      	bne.n	80007ec <Player_Reading_Card+0x98>
			flag_played = 1;
 80007e6:	2301      	movs	r3, #1
 80007e8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	3368      	adds	r3, #104	; 0x68
 80007f0:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 80007f2:	2300      	movs	r3, #0
 80007f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80007f6:	e00f      	b.n	8000818 <Player_Reading_Card+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 80007f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007fa:	68da      	ldr	r2, [r3, #12]
 80007fc:	69fb      	ldr	r3, [r7, #28]
 80007fe:	68db      	ldr	r3, [r3, #12]
 8000800:	429a      	cmp	r2, r3
 8000802:	d103      	bne.n	800080c <Player_Reading_Card+0xb8>
				flag_played = 1;
 8000804:	2301      	movs	r3, #1
 8000806:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800080a:	e008      	b.n	800081e <Player_Reading_Card+0xca>
			}
			ptrYugiohCard_played++;
 800080c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800080e:	3310      	adds	r3, #16
 8000810:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000814:	3301      	adds	r3, #1
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	2b13      	cmp	r3, #19
 800081c:	ddec      	ble.n	80007f8 <Player_Reading_Card+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000824:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000826:	2300      	movs	r3, #0
 8000828:	627b      	str	r3, [r7, #36]	; 0x24
 800082a:	e00f      	b.n	800084c <Player_Reading_Card+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 800082c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800082e:	68da      	ldr	r2, [r3, #12]
 8000830:	69fb      	ldr	r3, [r7, #28]
 8000832:	68db      	ldr	r3, [r3, #12]
 8000834:	429a      	cmp	r2, r3
 8000836:	d103      	bne.n	8000840 <Player_Reading_Card+0xec>
				flag_played = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				break;
 800083e:	e008      	b.n	8000852 <Player_Reading_Card+0xfe>
			}
			ptrYugiohCard_played++;
 8000840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000842:	3310      	adds	r3, #16
 8000844:	637b      	str	r3, [r7, #52]	; 0x34
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000848:	3301      	adds	r3, #1
 800084a:	627b      	str	r3, [r7, #36]	; 0x24
 800084c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800084e:	2b04      	cmp	r3, #4
 8000850:	ddec      	ble.n	800082c <Player_Reading_Card+0xd8>
		}

		uint8_t inpos = ptrYugiohCard_src->standPosition %6;
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	799a      	ldrb	r2, [r3, #6]
 8000856:	4b42      	ldr	r3, [pc, #264]	; (8000960 <Player_Reading_Card+0x20c>)
 8000858:	fba3 1302 	umull	r1, r3, r3, r2
 800085c:	0899      	lsrs	r1, r3, #2
 800085e:	460b      	mov	r3, r1
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	440b      	add	r3, r1
 8000864:	005b      	lsls	r3, r3, #1
 8000866:	1ad3      	subs	r3, r2, r3
 8000868:	75fb      	strb	r3, [r7, #23]
		if(ptrYugiohCard_src->cardType == 1)
 800086a:	69fb      	ldr	r3, [r7, #28]
 800086c:	785b      	ldrb	r3, [r3, #1]
 800086e:	2b01      	cmp	r3, #1
 8000870:	d106      	bne.n	8000880 <Player_Reading_Card+0x12c>
		{

			if(inpos <= 2)
 8000872:	7dfb      	ldrb	r3, [r7, #23]
 8000874:	2b02      	cmp	r3, #2
 8000876:	d809      	bhi.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000878:	2301      	movs	r3, #1
 800087a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800087e:	e005      	b.n	800088c <Player_Reading_Card+0x138>
			}

		}
		else
		{
			if(inpos > 2)
 8000880:	7dfb      	ldrb	r3, [r7, #23]
 8000882:	2b02      	cmp	r3, #2
 8000884:	d902      	bls.n	800088c <Player_Reading_Card+0x138>
			{
				flag_played = 1;
 8000886:	2301      	movs	r3, #1
 8000888:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			}
		}


		if (player->turn == first && flag_played == 0)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000892:	2b00      	cmp	r3, #0
 8000894:	d12b      	bne.n	80008ee <Player_Reading_Card+0x19a>
 8000896:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800089a:	2b00      	cmp	r3, #0
 800089c:	d127      	bne.n	80008ee <Player_Reading_Card+0x19a>
		{


			// Update buffer
			YUGIOH_card_Buffer_Update_Player(player);
 800089e:	6878      	ldr	r0, [r7, #4]
 80008a0:	f000 fc1f 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
			YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80008a4:	69b9      	ldr	r1, [r7, #24]
 80008a6:	69f8      	ldr	r0, [r7, #28]
 80008a8:	f7ff feec 	bl	8000684 <YUGIOH_card_copy>

			// Mod standPosition in case off 2 player
			ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 80008ac:	69bb      	ldr	r3, [r7, #24]
 80008ae:	799a      	ldrb	r2, [r3, #6]
 80008b0:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <Player_Reading_Card+0x20c>)
 80008b2:	fba3 1302 	umull	r1, r3, r3, r2
 80008b6:	0899      	lsrs	r1, r3, #2
 80008b8:	460b      	mov	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	440b      	add	r3, r1
 80008be:	005b      	lsls	r3, r3, #1
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b2da      	uxtb	r2, r3
 80008c4:	69bb      	ldr	r3, [r7, #24]
 80008c6:	719a      	strb	r2, [r3, #6]
			// Card Reading So it can't attack
			ptrYugiohCard_dst->actionPoint_Atk = 0;
 80008c8:	69bb      	ldr	r3, [r7, #24]
 80008ca:	2200      	movs	r2, #0
 80008cc:	721a      	strb	r2, [r3, #8]
			// Card Reading Then it can use it Effect
			ptrYugiohCard_dst->actionPoint_Eff = 1;
 80008ce:	69bb      	ldr	r3, [r7, #24]
 80008d0:	2201      	movs	r2, #1
 80008d2:	725a      	strb	r2, [r3, #9]
			RFID_Clear_Card_Bufffer(ptrRFID);
 80008d4:	6a38      	ldr	r0, [r7, #32]
 80008d6:	f7ff ff21 	bl	800071c <RFID_Clear_Card_Bufffer>
			ptrRFID->action = 0;
 80008da:	6a3b      	ldr	r3, [r7, #32]
 80008dc:	2200      	movs	r2, #0
 80008de:	70da      	strb	r2, [r3, #3]
			state_game->action += 1;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	3301      	adds	r3, #1
 80008e6:	b2da      	uxtb	r2, r3
 80008e8:	68bb      	ldr	r3, [r7, #8]
 80008ea:	701a      	strb	r2, [r3, #0]
				state_game->action += 1;
			}

		}
	}
}
 80008ec:	e033      	b.n	8000956 <Player_Reading_Card+0x202>
		else if (player->turn == second && flag_played == 0) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80008f4:	2b01      	cmp	r3, #1
 80008f6:	d12e      	bne.n	8000956 <Player_Reading_Card+0x202>
 80008f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d12a      	bne.n	8000956 <Player_Reading_Card+0x202>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	799b      	ldrb	r3, [r3, #6]
 8000904:	2b05      	cmp	r3, #5
 8000906:	d926      	bls.n	8000956 <Player_Reading_Card+0x202>
				YUGIOH_card_Buffer_Update_Player(player);
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f000 fbea 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800090e:	69b9      	ldr	r1, [r7, #24]
 8000910:	69f8      	ldr	r0, [r7, #28]
 8000912:	f7ff feb7 	bl	8000684 <YUGIOH_card_copy>
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000916:	69bb      	ldr	r3, [r7, #24]
 8000918:	799a      	ldrb	r2, [r3, #6]
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <Player_Reading_Card+0x20c>)
 800091c:	fba3 1302 	umull	r1, r3, r3, r2
 8000920:	0899      	lsrs	r1, r3, #2
 8000922:	460b      	mov	r3, r1
 8000924:	005b      	lsls	r3, r3, #1
 8000926:	440b      	add	r3, r1
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	1ad3      	subs	r3, r2, r3
 800092c:	b2da      	uxtb	r2, r3
 800092e:	69bb      	ldr	r3, [r7, #24]
 8000930:	719a      	strb	r2, [r3, #6]
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000932:	69bb      	ldr	r3, [r7, #24]
 8000934:	2200      	movs	r2, #0
 8000936:	721a      	strb	r2, [r3, #8]
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000938:	69bb      	ldr	r3, [r7, #24]
 800093a:	2201      	movs	r2, #1
 800093c:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 800093e:	6a38      	ldr	r0, [r7, #32]
 8000940:	f7ff feec 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000944:	6a3b      	ldr	r3, [r7, #32]
 8000946:	2200      	movs	r2, #0
 8000948:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	3301      	adds	r3, #1
 8000950:	b2da      	uxtb	r2, r3
 8000952:	68bb      	ldr	r3, [r7, #8]
 8000954:	701a      	strb	r2, [r3, #0]
}
 8000956:	bf00      	nop
 8000958:	3738      	adds	r7, #56	; 0x38
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	aaaaaaab 	.word	0xaaaaaaab

08000964 <Player_Reading_Card_Stopdef>:

void Player_Reading_Card_Stopdef(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3328      	adds	r3, #40	; 0x28
 8000974:	623b      	str	r3, [r7, #32]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	881b      	ldrh	r3, [r3, #0]
 800097a:	461a      	mov	r2, r3
 800097c:	2358      	movs	r3, #88	; 0x58
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	3328      	adds	r3, #40	; 0x28
 8000984:	68fa      	ldr	r2, [r7, #12]
 8000986:	4413      	add	r3, r2
 8000988:	623b      	str	r3, [r7, #32]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800098a:	6a3b      	ldr	r3, [r7, #32]
 800098c:	3318      	adds	r3, #24
 800098e:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000996:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3308      	adds	r3, #8
 800099c:	617b      	str	r3, [r7, #20]

	uint8_t flag_played = 1;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t targetPos = 255;
 80009a4:	23ff      	movs	r3, #255	; 0xff
 80009a6:	74fb      	strb	r3, [r7, #19]

	if (ptrRFID->action == 1) // Card Detected
 80009a8:	6a3b      	ldr	r3, [r7, #32]
 80009aa:	78db      	ldrb	r3, [r3, #3]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d17d      	bne.n	8000aac <Player_Reading_Card_Stopdef+0x148>
	{

		targetPos = ptrYugiohCard_src->standPosition;
 80009b0:	69fb      	ldr	r3, [r7, #28]
 80009b2:	799b      	ldrb	r3, [r3, #6]
 80009b4:	74fb      	strb	r3, [r7, #19]
		ptrYugiohCard_played = &player->cardOnBoard[targetPos];
 80009b6:	7cfb      	ldrb	r3, [r7, #19]
 80009b8:	011b      	lsls	r3, r3, #4
 80009ba:	3308      	adds	r3, #8
 80009bc:	687a      	ldr	r2, [r7, #4]
 80009be:	4413      	add	r3, r2
 80009c0:	617b      	str	r3, [r7, #20]

		if (ptrYugiohCard_played->cardData != 0 && ptrYugiohCard_played->cardState == 0)
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	68db      	ldr	r3, [r3, #12]
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d006      	beq.n	80009d8 <Player_Reading_Card_Stopdef+0x74>
 80009ca:	697b      	ldr	r3, [r7, #20]
 80009cc:	789b      	ldrb	r3, [r3, #2]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d102      	bne.n	80009d8 <Player_Reading_Card_Stopdef+0x74>
		{
			flag_played = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		}

		if (player->turn == first && flag_played == 0) {
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d12f      	bne.n	8000a42 <Player_Reading_Card_Stopdef+0xde>
 80009e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d12b      	bne.n	8000a42 <Player_Reading_Card_Stopdef+0xde>

			if (ptrYugiohCard_src->standPosition < 6)
 80009ea:	69fb      	ldr	r3, [r7, #28]
 80009ec:	799b      	ldrb	r3, [r3, #6]
 80009ee:	2b05      	cmp	r3, #5
 80009f0:	d85c      	bhi.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 80009f2:	6878      	ldr	r0, [r7, #4]
 80009f4:	f000 fb75 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80009f8:	69b9      	ldr	r1, [r7, #24]
 80009fa:	69f8      	ldr	r0, [r7, #28]
 80009fc:	f7ff fe42 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a00:	69bb      	ldr	r3, [r7, #24]
 8000a02:	799a      	ldrb	r2, [r3, #6]
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <Player_Reading_Card_Stopdef+0x150>)
 8000a06:	fba3 1302 	umull	r1, r3, r3, r2
 8000a0a:	0899      	lsrs	r1, r3, #2
 8000a0c:	460b      	mov	r3, r1
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	440b      	add	r3, r1
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	1ad3      	subs	r3, r2, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a1c:	69bb      	ldr	r3, [r7, #24]
 8000a1e:	2200      	movs	r2, #0
 8000a20:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000a22:	69bb      	ldr	r3, [r7, #24]
 8000a24:	2201      	movs	r2, #1
 8000a26:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a28:	6a38      	ldr	r0, [r7, #32]
 8000a2a:	f7ff fe77 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a2e:	6a3b      	ldr	r3, [r7, #32]
 8000a30:	2200      	movs	r2, #0
 8000a32:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	3301      	adds	r3, #1
 8000a3a:	b2da      	uxtb	r2, r3
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000a40:	e034      	b.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000a48:	2b01      	cmp	r3, #1
 8000a4a:	d12f      	bne.n	8000aac <Player_Reading_Card_Stopdef+0x148>
 8000a4c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d12b      	bne.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000a54:	69fb      	ldr	r3, [r7, #28]
 8000a56:	799b      	ldrb	r3, [r3, #6]
 8000a58:	2b05      	cmp	r3, #5
 8000a5a:	d927      	bls.n	8000aac <Player_Reading_Card_Stopdef+0x148>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f000 fb40 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a62:	69b9      	ldr	r1, [r7, #24]
 8000a64:	69f8      	ldr	r0, [r7, #28]
 8000a66:	f7ff fe0d 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000a6a:	69bb      	ldr	r3, [r7, #24]
 8000a6c:	799a      	ldrb	r2, [r3, #6]
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <Player_Reading_Card_Stopdef+0x150>)
 8000a70:	fba3 1302 	umull	r1, r3, r3, r2
 8000a74:	0899      	lsrs	r1, r3, #2
 8000a76:	460b      	mov	r3, r1
 8000a78:	005b      	lsls	r3, r3, #1
 8000a7a:	440b      	add	r3, r1
 8000a7c:	005b      	lsls	r3, r3, #1
 8000a7e:	1ad3      	subs	r3, r2, r3
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000a86:	69bb      	ldr	r3, [r7, #24]
 8000a88:	2200      	movs	r2, #0
 8000a8a:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000a8c:	69bb      	ldr	r3, [r7, #24]
 8000a8e:	2201      	movs	r2, #1
 8000a90:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000a92:	6a38      	ldr	r0, [r7, #32]
 8000a94:	f7ff fe42 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000a98:	6a3b      	ldr	r3, [r7, #32]
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000a9e:	68bb      	ldr	r3, [r7, #8]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	b2da      	uxtb	r2, r3
 8000aa6:	68bb      	ldr	r3, [r7, #8]
 8000aa8:	701a      	strb	r2, [r3, #0]

		}

	}

}
 8000aaa:	e7ff      	b.n	8000aac <Player_Reading_Card_Stopdef+0x148>
 8000aac:	bf00      	nop
 8000aae:	3728      	adds	r7, #40	; 0x28
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	aaaaaaab 	.word	0xaaaaaaab

08000ab8 <Player_Reading_Card_Reborn>:

void Player_Reading_Card_Reborn(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08a      	sub	sp, #40	; 0x28
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	3328      	adds	r3, #40	; 0x28
 8000ac8:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	461a      	mov	r2, r3
 8000ad0:	2358      	movs	r3, #88	; 0x58
 8000ad2:	fb02 f303 	mul.w	r3, r2, r3
 8000ad6:	3328      	adds	r3, #40	; 0x28
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000ade:	69bb      	ldr	r3, [r7, #24]
 8000ae0:	3318      	adds	r3, #24
 8000ae2:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000aea:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	3308      	adds	r3, #8
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24

	uint8_t flag_played = 1;
 8000af2:	2301      	movs	r3, #1
 8000af4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	if (ptrRFID->action == 1) // Card Detected
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	78db      	ldrb	r3, [r3, #3]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	f040 8083 	bne.w	8000c08 <Player_Reading_Card_Reborn+0x150>
	{
		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	3368      	adds	r3, #104	; 0x68
 8000b06:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000b08:	2300      	movs	r3, #0
 8000b0a:	61fb      	str	r3, [r7, #28]
 8000b0c:	e00f      	b.n	8000b2e <Player_Reading_Card_Reborn+0x76>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	68db      	ldr	r3, [r3, #12]
 8000b16:	429a      	cmp	r2, r3
 8000b18:	d103      	bne.n	8000b22 <Player_Reading_Card_Reborn+0x6a>
				flag_played = 0;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				break;
 8000b20:	e008      	b.n	8000b34 <Player_Reading_Card_Reborn+0x7c>
			}
			ptrYugiohCard_played++;
 8000b22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b24:	3310      	adds	r3, #16
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	61fb      	str	r3, [r7, #28]
 8000b2e:	69fb      	ldr	r3, [r7, #28]
 8000b30:	2b13      	cmp	r3, #19
 8000b32:	ddec      	ble.n	8000b0e <Player_Reading_Card_Reborn+0x56>
		}


		if (player->turn == first && flag_played == 0) {
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d12f      	bne.n	8000b9e <Player_Reading_Card_Reborn+0xe6>
 8000b3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d12b      	bne.n	8000b9e <Player_Reading_Card_Reborn+0xe6>

			if (ptrYugiohCard_src->standPosition < 6)
 8000b46:	697b      	ldr	r3, [r7, #20]
 8000b48:	799b      	ldrb	r3, [r3, #6]
 8000b4a:	2b05      	cmp	r3, #5
 8000b4c:	d85c      	bhi.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000b4e:	6878      	ldr	r0, [r7, #4]
 8000b50:	f000 fac7 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b54:	6939      	ldr	r1, [r7, #16]
 8000b56:	6978      	ldr	r0, [r7, #20]
 8000b58:	f7ff fd94 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000b5c:	693b      	ldr	r3, [r7, #16]
 8000b5e:	799a      	ldrb	r2, [r3, #6]
 8000b60:	4b2b      	ldr	r3, [pc, #172]	; (8000c10 <Player_Reading_Card_Reborn+0x158>)
 8000b62:	fba3 1302 	umull	r1, r3, r3, r2
 8000b66:	0899      	lsrs	r1, r3, #2
 8000b68:	460b      	mov	r3, r1
 8000b6a:	005b      	lsls	r3, r3, #1
 8000b6c:	440b      	add	r3, r1
 8000b6e:	005b      	lsls	r3, r3, #1
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	b2da      	uxtb	r2, r3
 8000b74:	693b      	ldr	r3, [r7, #16]
 8000b76:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	2201      	movs	r2, #1
 8000b82:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000b84:	69b8      	ldr	r0, [r7, #24]
 8000b86:	f7ff fdc9 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000b8a:	69bb      	ldr	r3, [r7, #24]
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	3301      	adds	r3, #1
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000b9c:	e034      	b.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d12f      	bne.n	8000c08 <Player_Reading_Card_Reborn+0x150>
 8000ba8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d12b      	bne.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	799b      	ldrb	r3, [r3, #6]
 8000bb4:	2b05      	cmp	r3, #5
 8000bb6:	d927      	bls.n	8000c08 <Player_Reading_Card_Reborn+0x150>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 fa92 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bbe:	6939      	ldr	r1, [r7, #16]
 8000bc0:	6978      	ldr	r0, [r7, #20]
 8000bc2:	f7ff fd5f 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000bc6:	693b      	ldr	r3, [r7, #16]
 8000bc8:	799a      	ldrb	r2, [r3, #6]
 8000bca:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <Player_Reading_Card_Reborn+0x158>)
 8000bcc:	fba3 1302 	umull	r1, r3, r3, r2
 8000bd0:	0899      	lsrs	r1, r3, #2
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	005b      	lsls	r3, r3, #1
 8000bd6:	440b      	add	r3, r1
 8000bd8:	005b      	lsls	r3, r3, #1
 8000bda:	1ad3      	subs	r3, r2, r3
 8000bdc:	b2da      	uxtb	r2, r3
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	2200      	movs	r2, #0
 8000be6:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000be8:	693b      	ldr	r3, [r7, #16]
 8000bea:	2201      	movs	r2, #1
 8000bec:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000bee:	69b8      	ldr	r0, [r7, #24]
 8000bf0:	f7ff fd94 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000bf4:	69bb      	ldr	r3, [r7, #24]
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000bfa:	68bb      	ldr	r3, [r7, #8]
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	3301      	adds	r3, #1
 8000c00:	b2da      	uxtb	r2, r3
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000c06:	e7ff      	b.n	8000c08 <Player_Reading_Card_Reborn+0x150>
 8000c08:	bf00      	nop
 8000c0a:	3728      	adds	r7, #40	; 0x28
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	aaaaaaab 	.word	0xaaaaaaab

08000c14 <Player_Reading_Card_Ancient_Rule>:


void Player_Reading_Card_Ancient_Rule(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b08c      	sub	sp, #48	; 0x30
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	3328      	adds	r3, #40	; 0x28
 8000c24:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	881b      	ldrh	r3, [r3, #0]
 8000c2a:	461a      	mov	r2, r3
 8000c2c:	2358      	movs	r3, #88	; 0x58
 8000c2e:	fb02 f303 	mul.w	r3, r2, r3
 8000c32:	3328      	adds	r3, #40	; 0x28
 8000c34:	68fa      	ldr	r2, [r7, #12]
 8000c36:	4413      	add	r3, r2
 8000c38:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	3318      	adds	r3, #24
 8000c3e:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000c46:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	3308      	adds	r3, #8
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	78db      	ldrb	r3, [r3, #3]
 8000c58:	2b01      	cmp	r3, #1
 8000c5a:	f040 80cb 	bne.w	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
	{

		// Check if in Board
		for (int i  = 0;  i < 6; ++i) {
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
 8000c62:	e013      	b.n	8000c8c <Player_Reading_Card_Ancient_Rule+0x78>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData && ptrYugiohCard_played->cardType == 1) {
 8000c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d107      	bne.n	8000c80 <Player_Reading_Card_Ancient_Rule+0x6c>
 8000c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c72:	785b      	ldrb	r3, [r3, #1]
 8000c74:	2b01      	cmp	r3, #1
 8000c76:	d103      	bne.n	8000c80 <Player_Reading_Card_Ancient_Rule+0x6c>
				flag_played = 1;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000c7e:	e008      	b.n	8000c92 <Player_Reading_Card_Ancient_Rule+0x7e>
			}
			ptrYugiohCard_played++;
 8000c80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c82:	3310      	adds	r3, #16
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c88:	3301      	adds	r3, #1
 8000c8a:	627b      	str	r3, [r7, #36]	; 0x24
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	2b05      	cmp	r3, #5
 8000c90:	dde8      	ble.n	8000c64 <Player_Reading_Card_Ancient_Rule+0x50>
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000c98:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c9c:	68da      	ldr	r2, [r3, #12]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	68db      	ldr	r3, [r3, #12]
 8000ca2:	429a      	cmp	r2, r3
 8000ca4:	d102      	bne.n	8000cac <Player_Reading_Card_Ancient_Rule+0x98>
			flag_played = 1;
 8000ca6:	2301      	movs	r3, #1
 8000ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	3368      	adds	r3, #104	; 0x68
 8000cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	623b      	str	r3, [r7, #32]
 8000cb6:	e00f      	b.n	8000cd8 <Player_Reading_Card_Ancient_Rule+0xc4>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cba:	68da      	ldr	r2, [r3, #12]
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d103      	bne.n	8000ccc <Player_Reading_Card_Ancient_Rule+0xb8>
				flag_played = 1;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000cca:	e008      	b.n	8000cde <Player_Reading_Card_Ancient_Rule+0xca>
			}
			ptrYugiohCard_played++;
 8000ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cce:	3310      	adds	r3, #16
 8000cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000cd2:	6a3b      	ldr	r3, [r7, #32]
 8000cd4:	3301      	adds	r3, #1
 8000cd6:	623b      	str	r3, [r7, #32]
 8000cd8:	6a3b      	ldr	r3, [r7, #32]
 8000cda:	2b13      	cmp	r3, #19
 8000cdc:	ddec      	ble.n	8000cb8 <Player_Reading_Card_Ancient_Rule+0xa4>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	61fb      	str	r3, [r7, #28]
 8000cea:	e00f      	b.n	8000d0c <Player_Reading_Card_Ancient_Rule+0xf8>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cee:	68da      	ldr	r2, [r3, #12]
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	68db      	ldr	r3, [r3, #12]
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d103      	bne.n	8000d00 <Player_Reading_Card_Ancient_Rule+0xec>
				flag_played = 1;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000cfe:	e008      	b.n	8000d12 <Player_Reading_Card_Ancient_Rule+0xfe>
			}
			ptrYugiohCard_played++;
 8000d00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d02:	3310      	adds	r3, #16
 8000d04:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3301      	adds	r3, #1
 8000d0a:	61fb      	str	r3, [r7, #28]
 8000d0c:	69fb      	ldr	r3, [r7, #28]
 8000d0e:	2b04      	cmp	r3, #4
 8000d10:	ddec      	ble.n	8000cec <Player_Reading_Card_Ancient_Rule+0xd8>
		}

		//

		if(ptrYugiohCard_src->cardLevel > 5){
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	78db      	ldrb	r3, [r3, #3]
 8000d16:	2b05      	cmp	r3, #5
 8000d18:	d902      	bls.n	8000d20 <Player_Reading_Card_Ancient_Rule+0x10c>
			flag_played = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		if (player->turn == first && flag_played == 0) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d12f      	bne.n	8000d8a <Player_Reading_Card_Ancient_Rule+0x176>
 8000d2a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d12b      	bne.n	8000d8a <Player_Reading_Card_Ancient_Rule+0x176>

			if (ptrYugiohCard_src->standPosition < 6)
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	799b      	ldrb	r3, [r3, #6]
 8000d36:	2b05      	cmp	r3, #5
 8000d38:	d85c      	bhi.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000d3a:	6878      	ldr	r0, [r7, #4]
 8000d3c:	f000 f9d1 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000d40:	6939      	ldr	r1, [r7, #16]
 8000d42:	6978      	ldr	r0, [r7, #20]
 8000d44:	f7ff fc9e 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	799a      	ldrb	r2, [r3, #6]
 8000d4c:	4b2b      	ldr	r3, [pc, #172]	; (8000dfc <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8000d52:	0899      	lsrs	r1, r3, #2
 8000d54:	460b      	mov	r3, r1
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	440b      	add	r3, r1
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	1ad3      	subs	r3, r2, r3
 8000d5e:	b2da      	uxtb	r2, r3
 8000d60:	693b      	ldr	r3, [r7, #16]
 8000d62:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	2200      	movs	r2, #0
 8000d68:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000d70:	69b8      	ldr	r0, [r7, #24]
 8000d72:	f7ff fcd3 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000d76:	69bb      	ldr	r3, [r7, #24]
 8000d78:	2200      	movs	r2, #0
 8000d7a:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000d7c:	68bb      	ldr	r3, [r7, #8]
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	3301      	adds	r3, #1
 8000d82:	b2da      	uxtb	r2, r3
 8000d84:	68bb      	ldr	r3, [r7, #8]
 8000d86:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000d88:	e034      	b.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	d12f      	bne.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000d94:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d12b      	bne.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	799b      	ldrb	r3, [r3, #6]
 8000da0:	2b05      	cmp	r3, #5
 8000da2:	d927      	bls.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000da4:	6878      	ldr	r0, [r7, #4]
 8000da6:	f000 f99c 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000daa:	6939      	ldr	r1, [r7, #16]
 8000dac:	6978      	ldr	r0, [r7, #20]
 8000dae:	f7ff fc69 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000db2:	693b      	ldr	r3, [r7, #16]
 8000db4:	799a      	ldrb	r2, [r3, #6]
 8000db6:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <Player_Reading_Card_Ancient_Rule+0x1e8>)
 8000db8:	fba3 1302 	umull	r1, r3, r3, r2
 8000dbc:	0899      	lsrs	r1, r3, #2
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	440b      	add	r3, r1
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	b2da      	uxtb	r2, r3
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000dda:	69b8      	ldr	r0, [r7, #24]
 8000ddc:	f7ff fc9e 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	2200      	movs	r2, #0
 8000de4:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000de6:	68bb      	ldr	r3, [r7, #8]
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	3301      	adds	r3, #1
 8000dec:	b2da      	uxtb	r2, r3
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000df2:	e7ff      	b.n	8000df4 <Player_Reading_Card_Ancient_Rule+0x1e0>
 8000df4:	bf00      	nop
 8000df6:	3730      	adds	r7, #48	; 0x30
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	aaaaaaab 	.word	0xaaaaaaab

08000e00 <Player_Reading_Card_Monster_Effect>:

void Player_Reading_Card_Monster_Effect(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08c      	sub	sp, #48	; 0x30
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3328      	adds	r3, #40	; 0x28
 8000e10:	61bb      	str	r3, [r7, #24]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	881b      	ldrh	r3, [r3, #0]
 8000e16:	461a      	mov	r2, r3
 8000e18:	2358      	movs	r3, #88	; 0x58
 8000e1a:	fb02 f303 	mul.w	r3, r2, r3
 8000e1e:	3328      	adds	r3, #40	; 0x28
 8000e20:	68fa      	ldr	r2, [r7, #12]
 8000e22:	4413      	add	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000e26:	69bb      	ldr	r3, [r7, #24]
 8000e28:	3318      	adds	r3, #24
 8000e2a:	617b      	str	r3, [r7, #20]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ActtionBuffer[0];
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000e32:	613b      	str	r3, [r7, #16]

	YUGIOH_Card *ptrYugiohCard_played;
	ptrYugiohCard_played = &player->cardOnBoard[0];
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	3308      	adds	r3, #8
 8000e38:	62fb      	str	r3, [r7, #44]	; 0x2c

	uint8_t flag_played = 1;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

	if (ptrRFID->action == 1) // Card Detected
 8000e40:	69bb      	ldr	r3, [r7, #24]
 8000e42:	78db      	ldrb	r3, [r3, #3]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 80c7 	bne.w	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
	{

		// Check if not in Board
		for (int i  = 0;  i < 6; ++i) {
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e4e:	e00f      	b.n	8000e70 <Player_Reading_Card_Monster_Effect+0x70>

			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e52:	68da      	ldr	r2, [r3, #12]
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d103      	bne.n	8000e64 <Player_Reading_Card_Monster_Effect+0x64>
				flag_played = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000e62:	e008      	b.n	8000e76 <Player_Reading_Card_Monster_Effect+0x76>
			}
			ptrYugiohCard_played++;
 8000e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e66:	3310      	adds	r3, #16
 8000e68:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < 6; ++i) {
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e72:	2b05      	cmp	r3, #5
 8000e74:	ddec      	ble.n	8000e50 <Player_Reading_Card_Monster_Effect+0x50>
		}

		if(ptrYugiohCard_src->cardSignature == 3){
 8000e76:	697b      	ldr	r3, [r7, #20]
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	2b03      	cmp	r3, #3
 8000e7c:	d102      	bne.n	8000e84 <Player_Reading_Card_Monster_Effect+0x84>
			flag_played = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in Played
		ptrYugiohCard_played = &player->CardInPlayed;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8000e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e8e:	68da      	ldr	r2, [r3, #12]
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	68db      	ldr	r3, [r3, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d102      	bne.n	8000e9e <Player_Reading_Card_Monster_Effect+0x9e>
			flag_played = 1;
 8000e98:	2301      	movs	r3, #1
 8000e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
		}

		// Check if in GY
		ptrYugiohCard_played = &player->GY[0];
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3368      	adds	r3, #104	; 0x68
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	623b      	str	r3, [r7, #32]
 8000ea8:	e00f      	b.n	8000eca <Player_Reading_Card_Monster_Effect+0xca>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	68db      	ldr	r3, [r3, #12]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d103      	bne.n	8000ebe <Player_Reading_Card_Monster_Effect+0xbe>
				flag_played = 1;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000ebc:	e008      	b.n	8000ed0 <Player_Reading_Card_Monster_Effect+0xd0>
			}
			ptrYugiohCard_played++;
 8000ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec0:	3310      	adds	r3, #16
 8000ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < GY_BUFF_LEN; ++i) {
 8000ec4:	6a3b      	ldr	r3, [r7, #32]
 8000ec6:	3301      	adds	r3, #1
 8000ec8:	623b      	str	r3, [r7, #32]
 8000eca:	6a3b      	ldr	r3, [r7, #32]
 8000ecc:	2b13      	cmp	r3, #19
 8000ece:	ddec      	ble.n	8000eaa <Player_Reading_Card_Monster_Effect+0xaa>
		}

		// Check if in Buffer
		ptrYugiohCard_played = &player->ActtionBuffer[0];
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8000ed6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000ed8:	2300      	movs	r3, #0
 8000eda:	61fb      	str	r3, [r7, #28]
 8000edc:	e00f      	b.n	8000efe <Player_Reading_Card_Monster_Effect+0xfe>
			if (ptrYugiohCard_played->cardData == ptrYugiohCard_src->cardData) {
 8000ede:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee0:	68da      	ldr	r2, [r3, #12]
 8000ee2:	697b      	ldr	r3, [r7, #20]
 8000ee4:	68db      	ldr	r3, [r3, #12]
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	d103      	bne.n	8000ef2 <Player_Reading_Card_Monster_Effect+0xf2>
				flag_played = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				break;
 8000ef0:	e008      	b.n	8000f04 <Player_Reading_Card_Monster_Effect+0x104>
			}
			ptrYugiohCard_played++;
 8000ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ef4:	3310      	adds	r3, #16
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i  = 0;  i < CHAIN_BUFF_LEN-1; ++i) {
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	3301      	adds	r3, #1
 8000efc:	61fb      	str	r3, [r7, #28]
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	2b04      	cmp	r3, #4
 8000f02:	ddec      	ble.n	8000ede <Player_Reading_Card_Monster_Effect+0xde>
		}

		//


		if (player->turn == first && flag_played == 0) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d12f      	bne.n	8000f6e <Player_Reading_Card_Monster_Effect+0x16e>
 8000f0e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d12b      	bne.n	8000f6e <Player_Reading_Card_Monster_Effect+0x16e>

			if (ptrYugiohCard_src->standPosition < 6)
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	799b      	ldrb	r3, [r3, #6]
 8000f1a:	2b05      	cmp	r3, #5
 8000f1c:	d85c      	bhi.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f000 f8df 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f24:	6939      	ldr	r1, [r7, #16]
 8000f26:	6978      	ldr	r0, [r7, #20]
 8000f28:	f7ff fbac 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000f2c:	693b      	ldr	r3, [r7, #16]
 8000f2e:	799a      	ldrb	r2, [r3, #6]
 8000f30:	4b2b      	ldr	r3, [pc, #172]	; (8000fe0 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8000f32:	fba3 1302 	umull	r1, r3, r3, r2
 8000f36:	0899      	lsrs	r1, r3, #2
 8000f38:	460b      	mov	r3, r1
 8000f3a:	005b      	lsls	r3, r3, #1
 8000f3c:	440b      	add	r3, r1
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	1ad3      	subs	r3, r2, r3
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	693b      	ldr	r3, [r7, #16]
 8000f46:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000f48:	693b      	ldr	r3, [r7, #16]
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	2201      	movs	r2, #1
 8000f52:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000f54:	69b8      	ldr	r0, [r7, #24]
 8000f56:	f7ff fbe1 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	3301      	adds	r3, #1
 8000f66:	b2da      	uxtb	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	701a      	strb	r2, [r3, #0]
			if (ptrYugiohCard_src->standPosition < 6)
 8000f6c:	e034      	b.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			}
		}
		else if (player->turn == second && flag_played == 0) {
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3218 	ldrb.w	r3, [r3, #536]	; 0x218
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d12f      	bne.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
 8000f78:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d12b      	bne.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			if (ptrYugiohCard_src->standPosition >= 6)
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	799b      	ldrb	r3, [r3, #6]
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d927      	bls.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
			{
				// Update buffer
				YUGIOH_card_Buffer_Update_Player(player);
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f000 f8aa 	bl	80010e2 <YUGIOH_card_Buffer_Update_Player>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f8e:	6939      	ldr	r1, [r7, #16]
 8000f90:	6978      	ldr	r0, [r7, #20]
 8000f92:	f7ff fb77 	bl	8000684 <YUGIOH_card_copy>

				// Mod standPosition in case off 2 player
				ptrYugiohCard_dst->standPosition= ptrYugiohCard_dst->standPosition % 6;
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	799a      	ldrb	r2, [r3, #6]
 8000f9a:	4b11      	ldr	r3, [pc, #68]	; (8000fe0 <Player_Reading_Card_Monster_Effect+0x1e0>)
 8000f9c:	fba3 1302 	umull	r1, r3, r3, r2
 8000fa0:	0899      	lsrs	r1, r3, #2
 8000fa2:	460b      	mov	r3, r1
 8000fa4:	005b      	lsls	r3, r3, #1
 8000fa6:	440b      	add	r3, r1
 8000fa8:	005b      	lsls	r3, r3, #1
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	b2da      	uxtb	r2, r3
 8000fae:	693b      	ldr	r3, [r7, #16]
 8000fb0:	719a      	strb	r2, [r3, #6]
				// Card Reading So it can't attack
				ptrYugiohCard_dst->actionPoint_Atk = 0;
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	721a      	strb	r2, [r3, #8]
				// Card Reading Then it can use it Effect
				ptrYugiohCard_dst->actionPoint_Eff = 1;
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	2201      	movs	r2, #1
 8000fbc:	725a      	strb	r2, [r3, #9]
				RFID_Clear_Card_Bufffer(ptrRFID);
 8000fbe:	69b8      	ldr	r0, [r7, #24]
 8000fc0:	f7ff fbac 	bl	800071c <RFID_Clear_Card_Bufffer>
				ptrRFID->action = 0;
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	70da      	strb	r2, [r3, #3]
				state_game->action += 1;
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	3301      	adds	r3, #1
 8000fd0:	b2da      	uxtb	r2, r3
 8000fd2:	68bb      	ldr	r3, [r7, #8]
 8000fd4:	701a      	strb	r2, [r3, #0]
			}

		}

	}
}
 8000fd6:	e7ff      	b.n	8000fd8 <Player_Reading_Card_Monster_Effect+0x1d8>
 8000fd8:	bf00      	nop
 8000fda:	3730      	adds	r7, #48	; 0x30
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}
 8000fe0:	aaaaaaab 	.word	0xaaaaaaab

08000fe4 <YUGIOH_Clear_Card_Bufffer_Player>:

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b088      	sub	sp, #32
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000fec:	f107 0308 	add.w	r3, r7, #8
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001000:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001002:	2300      	movs	r3, #0
 8001004:	76fb      	strb	r3, [r7, #27]
 8001006:	e00b      	b.n	8001020 <YUGIOH_Clear_Card_Bufffer_Player+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001008:	f107 0308 	add.w	r3, r7, #8
 800100c:	69f9      	ldr	r1, [r7, #28]
 800100e:	4618      	mov	r0, r3
 8001010:	f7ff fb38 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3310      	adds	r3, #16
 8001018:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800101a:	7efb      	ldrb	r3, [r7, #27]
 800101c:	3301      	adds	r3, #1
 800101e:	76fb      	strb	r3, [r7, #27]
 8001020:	7efb      	ldrb	r3, [r7, #27]
 8001022:	2b05      	cmp	r3, #5
 8001024:	d9f0      	bls.n	8001008 <YUGIOH_Clear_Card_Bufffer_Player+0x24>
	}
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	3720      	adds	r7, #32
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}

08001030 <YUGIOH_Clear_Card_All>:

void YUGIOH_Clear_Card_All(Player *player){
 8001030:	b580      	push	{r7, lr}
 8001032:	b088      	sub	sp, #32
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	2200      	movs	r2, #0
 800103e:	601a      	str	r2, [r3, #0]
 8001040:	605a      	str	r2, [r3, #4]
 8001042:	609a      	str	r2, [r3, #8]
 8001044:	60da      	str	r2, [r3, #12]
	YUGIOH_Card *ptrYUGIOHCard = player->ActtionBuffer;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800104c:	61fb      	str	r3, [r7, #28]

	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800104e:	2300      	movs	r3, #0
 8001050:	76fb      	strb	r3, [r7, #27]
 8001052:	e00b      	b.n	800106c <YUGIOH_Clear_Card_All+0x3c>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	69f9      	ldr	r1, [r7, #28]
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff fb12 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	3310      	adds	r3, #16
 8001064:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8001066:	7efb      	ldrb	r3, [r7, #27]
 8001068:	3301      	adds	r3, #1
 800106a:	76fb      	strb	r3, [r7, #27]
 800106c:	7efb      	ldrb	r3, [r7, #27]
 800106e:	2b05      	cmp	r3, #5
 8001070:	d9f0      	bls.n	8001054 <YUGIOH_Clear_Card_All+0x24>

	}
	ptrYUGIOHCard = player->GY;
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3368      	adds	r3, #104	; 0x68
 8001076:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8001078:	2300      	movs	r3, #0
 800107a:	76bb      	strb	r3, [r7, #26]
 800107c:	e00b      	b.n	8001096 <YUGIOH_Clear_Card_All+0x66>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800107e:	f107 0308 	add.w	r3, r7, #8
 8001082:	69f9      	ldr	r1, [r7, #28]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fafd 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3310      	adds	r3, #16
 800108e:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < GY_BUFF_LEN; ++i){
 8001090:	7ebb      	ldrb	r3, [r7, #26]
 8001092:	3301      	adds	r3, #1
 8001094:	76bb      	strb	r3, [r7, #26]
 8001096:	7ebb      	ldrb	r3, [r7, #26]
 8001098:	2b13      	cmp	r3, #19
 800109a:	d9f0      	bls.n	800107e <YUGIOH_Clear_Card_All+0x4e>
	}
	ptrYUGIOHCard = player->cardOnBoard;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3308      	adds	r3, #8
 80010a0:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80010a2:	2300      	movs	r3, #0
 80010a4:	767b      	strb	r3, [r7, #25]
 80010a6:	e00b      	b.n	80010c0 <YUGIOH_Clear_Card_All+0x90>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80010a8:	f107 0308 	add.w	r3, r7, #8
 80010ac:	69f9      	ldr	r1, [r7, #28]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff fae8 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	3310      	adds	r3, #16
 80010b8:	61fb      	str	r3, [r7, #28]
	for(uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i){
 80010ba:	7e7b      	ldrb	r3, [r7, #25]
 80010bc:	3301      	adds	r3, #1
 80010be:	767b      	strb	r3, [r7, #25]
 80010c0:	7e7b      	ldrb	r3, [r7, #25]
 80010c2:	2b05      	cmp	r3, #5
 80010c4:	d9f0      	bls.n	80010a8 <YUGIOH_Clear_Card_All+0x78>
	}

	ptrYUGIOHCard = &player->CardInPlayed;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80010cc:	61fb      	str	r3, [r7, #28]
	YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80010ce:	f107 0308 	add.w	r3, r7, #8
 80010d2:	69f9      	ldr	r1, [r7, #28]
 80010d4:	4618      	mov	r0, r3
 80010d6:	f7ff fad5 	bl	8000684 <YUGIOH_card_copy>
}
 80010da:	bf00      	nop
 80010dc:	3720      	adds	r7, #32
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}

080010e2 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80010e2:	b580      	push	{r7, lr}
 80010e4:	b086      	sub	sp, #24
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ActtionBuffer;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80010f0:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ActtionBuffer[CHAIN_BUFF_LEN - 2];
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80010f8:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ActtionBuffer;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001100:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ActtionBuffer[CHAIN_BUFF_LEN - 1];
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001108:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800110a:	2306      	movs	r3, #6
 800110c:	60fb      	str	r3, [r7, #12]
 800110e:	e00c      	b.n	800112a <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001110:	6939      	ldr	r1, [r7, #16]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff fab6 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3b10      	subs	r3, #16
 800111c:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 800111e:	693b      	ldr	r3, [r7, #16]
 8001120:	3b10      	subs	r3, #16
 8001122:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	3b01      	subs	r3, #1
 8001128:	60fb      	str	r3, [r7, #12]
 800112a:	68fb      	ldr	r3, [r7, #12]
 800112c:	2b00      	cmp	r3, #0
 800112e:	dcef      	bgt.n	8001110 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	3718      	adds	r7, #24
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}

0800113a <YUGIOH_card_Buffer_Update_Chain>:

void YUGIOH_card_Buffer_Update_Chain(State_game * state_game)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	b086      	sub	sp, #24
 800113e:	af00      	add	r7, sp, #0
 8001140:	6078      	str	r0, [r7, #4]

	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = state_game->ChainBuffer;
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001148:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = state_game->ChainBuffer;
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001150:	613b      	str	r3, [r7, #16]

	ptrYugiohCard_Buffer_src = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	f203 4384 	addw	r3, r3, #1156	; 0x484
 8001158:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &state_game->ChainBuffer[CHAIN_BUFF_LEN - 1];
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f203 4394 	addw	r3, r3, #1172	; 0x494
 8001160:	613b      	str	r3, [r7, #16]

	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8001162:	2306      	movs	r3, #6
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	e02c      	b.n	80011c2 <YUGIOH_card_Buffer_Update_Chain+0x88>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001168:	6939      	ldr	r1, [r7, #16]
 800116a:	6978      	ldr	r0, [r7, #20]
 800116c:	f7ff fa8a 	bl	8000684 <YUGIOH_card_copy>
		state_game->ptrChainUser[i-1] = state_game->ptrChainUser[i-2];
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3b02      	subs	r3, #2
 8001174:	68fa      	ldr	r2, [r7, #12]
 8001176:	1e50      	subs	r0, r2, #1
 8001178:	687a      	ldr	r2, [r7, #4]
 800117a:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	4413      	add	r3, r2
 8001182:	685a      	ldr	r2, [r3, #4]
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	f500 7394 	add.w	r3, r0, #296	; 0x128
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	605a      	str	r2, [r3, #4]
		state_game->ptrChainOpponent[i-1] = state_game->ptrChainOpponent[i-2];
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	3b02      	subs	r3, #2
 8001194:	68fa      	ldr	r2, [r7, #12]
 8001196:	1e50      	subs	r0, r2, #1
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	f500 7397 	add.w	r3, r0, #302	; 0x12e
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	605a      	str	r2, [r3, #4]
		ptrYugiohCard_Buffer_src--;
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	3b10      	subs	r3, #16
 80011b4:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	3b10      	subs	r3, #16
 80011ba:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	3b01      	subs	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	dccf      	bgt.n	8001168 <YUGIOH_card_Buffer_Update_Chain+0x2e>
	}
}
 80011c8:	bf00      	nop
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <YUGIOH_To_GY>:

void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b08a      	sub	sp, #40	; 0x28
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	6078      	str	r0, [r7, #4]
 80011da:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 80011dc:	f107 030c 	add.w	r3, r7, #12
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	3368      	adds	r3, #104	; 0x68
 80011ee:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3368      	adds	r3, #104	; 0x68
 80011fc:	623b      	str	r3, [r7, #32]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8001204:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001206:	2314      	movs	r3, #20
 8001208:	61fb      	str	r3, [r7, #28]
 800120a:	e00c      	b.n	8001226 <YUGIOH_To_GY+0x54>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 800120c:	6a39      	ldr	r1, [r7, #32]
 800120e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001210:	f7ff fa38 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 8001214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001216:	3b10      	subs	r3, #16
 8001218:	627b      	str	r3, [r7, #36]	; 0x24
		ptrYugiohCard_Buffer_dst--;
 800121a:	6a3b      	ldr	r3, [r7, #32]
 800121c:	3b10      	subs	r3, #16
 800121e:	623b      	str	r3, [r7, #32]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3b01      	subs	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	2b00      	cmp	r3, #0
 800122a:	dcef      	bgt.n	800120c <YUGIOH_To_GY+0x3a>
	}

	ptrYugiohCard_Buffer_src = card;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	627b      	str	r3, [r7, #36]	; 0x24
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	3368      	adds	r3, #104	; 0x68
 8001234:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8001236:	6a39      	ldr	r1, [r7, #32]
 8001238:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800123a:	f7ff fa23 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	623b      	str	r3, [r7, #32]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 8001244:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001246:	6a38      	ldr	r0, [r7, #32]
 8001248:	f7ff fa1c 	bl	8000684 <YUGIOH_card_copy>

}
 800124c:	bf00      	nop
 800124e:	3728      	adds	r7, #40	; 0x28
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08c      	sub	sp, #48	; 0x30
 8001258:	af04      	add	r7, sp, #16
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	3304      	adds	r3, #4
 8001262:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayer2 = state_game->player;
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	3304      	adds	r3, #4
 8001268:	61bb      	str	r3, [r7, #24]

	ptrPlayer1 = &state_game->player[0];
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	3304      	adds	r3, #4
 800126e:	61fb      	str	r3, [r7, #28]
	ptrPlayer2 = &state_game->player[1];
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001276:	61bb      	str	r3, [r7, #24]

	ptrPlayer1->turn = first;
 8001278:	69fb      	ldr	r3, [r7, #28]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
	ptrPlayer2->turn = second;
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	2201      	movs	r2, #1
 8001284:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218

	ptrPlayer1->displayNSS = 1;
 8001288:	69fb      	ldr	r3, [r7, #28]
 800128a:	2201      	movs	r2, #1
 800128c:	701a      	strb	r2, [r3, #0]
	ptrPlayer2->displayNSS = 0;
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	2200      	movs	r2, #0
 8001292:	701a      	strb	r2, [r3, #0]

	ptrPlayer1->yesBTN = HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN);
 8001294:	2108      	movs	r1, #8
 8001296:	48ad      	ldr	r0, [pc, #692]	; (800154c <GAME_PLAY_Management+0x2f8>)
 8001298:	f008 f860 	bl	800935c <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	461a      	mov	r2, r3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	705a      	strb	r2, [r3, #1]
	ptrPlayer1->noBTN = HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN);
 80012a4:	2102      	movs	r1, #2
 80012a6:	48aa      	ldr	r0, [pc, #680]	; (8001550 <GAME_PLAY_Management+0x2fc>)
 80012a8:	f008 f858 	bl	800935c <HAL_GPIO_ReadPin>
 80012ac:	4603      	mov	r3, r0
 80012ae:	461a      	mov	r2, r3
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	709a      	strb	r2, [r3, #2]

	ptrPlayer2->yesBTN = HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN);
 80012b4:	2104      	movs	r1, #4
 80012b6:	48a5      	ldr	r0, [pc, #660]	; (800154c <GAME_PLAY_Management+0x2f8>)
 80012b8:	f008 f850 	bl	800935c <HAL_GPIO_ReadPin>
 80012bc:	4603      	mov	r3, r0
 80012be:	461a      	mov	r2, r3
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	705a      	strb	r2, [r3, #1]
	ptrPlayer2->noBTN = HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN);
 80012c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012c8:	48a2      	ldr	r0, [pc, #648]	; (8001554 <GAME_PLAY_Management+0x300>)
 80012ca:	f008 f847 	bl	800935c <HAL_GPIO_ReadPin>
 80012ce:	4603      	mov	r3, r0
 80012d0:	461a      	mov	r2, r3
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	709a      	strb	r2, [r3, #2]

	enum _player_state {
		Game_not_start,Game_init, first_player, second_player,Game_Ended
	} MS;
	MS = state_game->MainGame_State;
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 80012dc:	75fb      	strb	r3, [r7, #23]


	// Player ATK and DEF
	Player *ptrPlayerAtk = state_game->player;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3304      	adds	r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
	Player *ptrPlayerDef = state_game->player;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	3304      	adds	r3, #4
 80012e8:	60fb      	str	r3, [r7, #12]

	switch (MS) {
 80012ea:	7dfb      	ldrb	r3, [r7, #23]
 80012ec:	2b04      	cmp	r3, #4
 80012ee:	f200 82c7 	bhi.w	8001880 <GAME_PLAY_Management+0x62c>
 80012f2:	a201      	add	r2, pc, #4	; (adr r2, 80012f8 <GAME_PLAY_Management+0xa4>)
 80012f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012f8:	0800130d 	.word	0x0800130d
 80012fc:	08001589 	.word	0x08001589
 8001300:	080016e7 	.word	0x080016e7
 8001304:	08001765 	.word	0x08001765
 8001308:	0800180d 	.word	0x0800180d
	case Game_not_start:
		// START display for ready state
		//player 2
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800130c:	4b92      	ldr	r3, [pc, #584]	; (8001558 <GAME_PLAY_Management+0x304>)
 800130e:	2200      	movs	r2, #0
 8001310:	9202      	str	r2, [sp, #8]
 8001312:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001316:	9201      	str	r2, [sp, #4]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	9200      	str	r2, [sp, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a8f      	ldr	r2, [pc, #572]	; (800155c <GAME_PLAY_Management+0x308>)
 8001320:	2105      	movs	r1, #5
 8001322:	2005      	movs	r0, #5
 8001324:	f004 f857 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001328:	4b8b      	ldr	r3, [pc, #556]	; (8001558 <GAME_PLAY_Management+0x304>)
 800132a:	2200      	movs	r2, #0
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001332:	9201      	str	r2, [sp, #4]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	9200      	str	r2, [sp, #0]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a89      	ldr	r2, [pc, #548]	; (8001560 <GAME_PLAY_Management+0x30c>)
 800133c:	210f      	movs	r1, #15
 800133e:	2000      	movs	r0, #0
 8001340:	f004 f849 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001344:	4b87      	ldr	r3, [pc, #540]	; (8001564 <GAME_PLAY_Management+0x310>)
 8001346:	2200      	movs	r2, #0
 8001348:	9202      	str	r2, [sp, #8]
 800134a:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800134e:	9201      	str	r2, [sp, #4]
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	9200      	str	r2, [sp, #0]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a84      	ldr	r2, [pc, #528]	; (8001568 <GAME_PLAY_Management+0x314>)
 8001358:	2123      	movs	r1, #35	; 0x23
 800135a:	2008      	movs	r0, #8
 800135c:	f004 f83b 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001360:	4b80      	ldr	r3, [pc, #512]	; (8001564 <GAME_PLAY_Management+0x310>)
 8001362:	2200      	movs	r2, #0
 8001364:	9202      	str	r2, [sp, #8]
 8001366:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800136a:	9201      	str	r2, [sp, #4]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	9200      	str	r2, [sp, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	4a7e      	ldr	r2, [pc, #504]	; (800156c <GAME_PLAY_Management+0x318>)
 8001374:	213c      	movs	r1, #60	; 0x3c
 8001376:	2019      	movs	r0, #25
 8001378:	f004 f82d 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800137c:	4b76      	ldr	r3, [pc, #472]	; (8001558 <GAME_PLAY_Management+0x304>)
 800137e:	2200      	movs	r2, #0
 8001380:	9202      	str	r2, [sp, #8]
 8001382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001386:	9201      	str	r2, [sp, #4]
 8001388:	685a      	ldr	r2, [r3, #4]
 800138a:	9200      	str	r2, [sp, #0]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	4a74      	ldr	r2, [pc, #464]	; (8001560 <GAME_PLAY_Management+0x30c>)
 8001390:	214b      	movs	r1, #75	; 0x4b
 8001392:	2000      	movs	r0, #0
 8001394:	f004 f81f 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001398:	4b6f      	ldr	r3, [pc, #444]	; (8001558 <GAME_PLAY_Management+0x304>)
 800139a:	2200      	movs	r2, #0
 800139c:	9202      	str	r2, [sp, #8]
 800139e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013a2:	9201      	str	r2, [sp, #4]
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	9200      	str	r2, [sp, #0]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4a71      	ldr	r2, [pc, #452]	; (8001570 <GAME_PLAY_Management+0x31c>)
 80013ac:	215a      	movs	r1, #90	; 0x5a
 80013ae:	2000      	movs	r0, #0
 80013b0:	f004 f811 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80013b4:	4b68      	ldr	r3, [pc, #416]	; (8001558 <GAME_PLAY_Management+0x304>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	9202      	str	r2, [sp, #8]
 80013ba:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80013be:	9201      	str	r2, [sp, #4]
 80013c0:	685a      	ldr	r2, [r3, #4]
 80013c2:	9200      	str	r2, [sp, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a6b      	ldr	r2, [pc, #428]	; (8001574 <GAME_PLAY_Management+0x320>)
 80013c8:	215a      	movs	r1, #90	; 0x5a
 80013ca:	205d      	movs	r0, #93	; 0x5d
 80013cc:	f004 f803 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80013d0:	4b61      	ldr	r3, [pc, #388]	; (8001558 <GAME_PLAY_Management+0x304>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	9202      	str	r2, [sp, #8]
 80013d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013da:	9201      	str	r2, [sp, #4]
 80013dc:	685a      	ldr	r2, [r3, #4]
 80013de:	9200      	str	r2, [sp, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a65      	ldr	r2, [pc, #404]	; (8001578 <GAME_PLAY_Management+0x324>)
 80013e4:	2169      	movs	r1, #105	; 0x69
 80013e6:	2000      	movs	r0, #0
 80013e8:	f003 fff5 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80013ec:	4b5a      	ldr	r3, [pc, #360]	; (8001558 <GAME_PLAY_Management+0x304>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	9202      	str	r2, [sp, #8]
 80013f2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80013f6:	9201      	str	r2, [sp, #4]
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	4a5f      	ldr	r2, [pc, #380]	; (800157c <GAME_PLAY_Management+0x328>)
 8001400:	2169      	movs	r1, #105	; 0x69
 8001402:	2064      	movs	r0, #100	; 0x64
 8001404:	f003 ffe7 	bl	80053d6 <ST7735_WriteString>
		//player 1
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001408:	4b53      	ldr	r3, [pc, #332]	; (8001558 <GAME_PLAY_Management+0x304>)
 800140a:	2200      	movs	r2, #0
 800140c:	9202      	str	r2, [sp, #8]
 800140e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001412:	9201      	str	r2, [sp, #4]
 8001414:	685a      	ldr	r2, [r3, #4]
 8001416:	9200      	str	r2, [sp, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a59      	ldr	r2, [pc, #356]	; (8001580 <GAME_PLAY_Management+0x32c>)
 800141c:	2105      	movs	r1, #5
 800141e:	2005      	movs	r0, #5
 8001420:	f004 f823 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001424:	4b4c      	ldr	r3, [pc, #304]	; (8001558 <GAME_PLAY_Management+0x304>)
 8001426:	2200      	movs	r2, #0
 8001428:	9202      	str	r2, [sp, #8]
 800142a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800142e:	9201      	str	r2, [sp, #4]
 8001430:	685a      	ldr	r2, [r3, #4]
 8001432:	9200      	str	r2, [sp, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a4a      	ldr	r2, [pc, #296]	; (8001560 <GAME_PLAY_Management+0x30c>)
 8001438:	210f      	movs	r1, #15
 800143a:	2000      	movs	r0, #0
 800143c:	f004 f815 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8001440:	4b48      	ldr	r3, [pc, #288]	; (8001564 <GAME_PLAY_Management+0x310>)
 8001442:	2200      	movs	r2, #0
 8001444:	9202      	str	r2, [sp, #8]
 8001446:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800144a:	9201      	str	r2, [sp, #4]
 800144c:	685a      	ldr	r2, [r3, #4]
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a45      	ldr	r2, [pc, #276]	; (8001568 <GAME_PLAY_Management+0x314>)
 8001454:	2123      	movs	r1, #35	; 0x23
 8001456:	2008      	movs	r0, #8
 8001458:	f004 f807 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 800145c:	4b41      	ldr	r3, [pc, #260]	; (8001564 <GAME_PLAY_Management+0x310>)
 800145e:	2200      	movs	r2, #0
 8001460:	9202      	str	r2, [sp, #8]
 8001462:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001466:	9201      	str	r2, [sp, #4]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	9200      	str	r2, [sp, #0]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a3f      	ldr	r2, [pc, #252]	; (800156c <GAME_PLAY_Management+0x318>)
 8001470:	213c      	movs	r1, #60	; 0x3c
 8001472:	2014      	movs	r0, #20
 8001474:	f003 fff9 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001478:	4b37      	ldr	r3, [pc, #220]	; (8001558 <GAME_PLAY_Management+0x304>)
 800147a:	2200      	movs	r2, #0
 800147c:	9202      	str	r2, [sp, #8]
 800147e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001482:	9201      	str	r2, [sp, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a35      	ldr	r2, [pc, #212]	; (8001560 <GAME_PLAY_Management+0x30c>)
 800148c:	214b      	movs	r1, #75	; 0x4b
 800148e:	2000      	movs	r0, #0
 8001490:	f003 ffeb 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001494:	4b30      	ldr	r3, [pc, #192]	; (8001558 <GAME_PLAY_Management+0x304>)
 8001496:	2200      	movs	r2, #0
 8001498:	9202      	str	r2, [sp, #8]
 800149a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800149e:	9201      	str	r2, [sp, #4]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	9200      	str	r2, [sp, #0]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a32      	ldr	r2, [pc, #200]	; (8001570 <GAME_PLAY_Management+0x31c>)
 80014a8:	215a      	movs	r1, #90	; 0x5a
 80014aa:	2000      	movs	r0, #0
 80014ac:	f003 ffdd 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80014b0:	4b29      	ldr	r3, [pc, #164]	; (8001558 <GAME_PLAY_Management+0x304>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	9202      	str	r2, [sp, #8]
 80014b6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014ba:	9201      	str	r2, [sp, #4]
 80014bc:	685a      	ldr	r2, [r3, #4]
 80014be:	9200      	str	r2, [sp, #0]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a2c      	ldr	r2, [pc, #176]	; (8001574 <GAME_PLAY_Management+0x320>)
 80014c4:	215a      	movs	r1, #90	; 0x5a
 80014c6:	205d      	movs	r0, #93	; 0x5d
 80014c8:	f003 ffcf 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80014cc:	4b22      	ldr	r3, [pc, #136]	; (8001558 <GAME_PLAY_Management+0x304>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	9202      	str	r2, [sp, #8]
 80014d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014d6:	9201      	str	r2, [sp, #4]
 80014d8:	685a      	ldr	r2, [r3, #4]
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a26      	ldr	r2, [pc, #152]	; (8001578 <GAME_PLAY_Management+0x324>)
 80014e0:	2169      	movs	r1, #105	; 0x69
 80014e2:	2000      	movs	r0, #0
 80014e4:	f003 ffc1 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <GAME_PLAY_Management+0x304>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	9202      	str	r2, [sp, #8]
 80014ee:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80014f2:	9201      	str	r2, [sp, #4]
 80014f4:	685a      	ldr	r2, [r3, #4]
 80014f6:	9200      	str	r2, [sp, #0]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a20      	ldr	r2, [pc, #128]	; (800157c <GAME_PLAY_Management+0x328>)
 80014fc:	2169      	movs	r1, #105	; 0x69
 80014fe:	2064      	movs	r0, #100	; 0x64
 8001500:	f003 ffb3 	bl	800546a <ST7735_WriteString1>
		//END display for ready state
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8001504:	2108      	movs	r1, #8
 8001506:	481f      	ldr	r0, [pc, #124]	; (8001584 <GAME_PLAY_Management+0x330>)
 8001508:	f007 ff28 	bl	800935c <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d10a      	bne.n	8001528 <GAME_PLAY_Management+0x2d4>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 8001512:	2000      	movs	r0, #0
 8001514:	f004 f9c6 	bl	80058a4 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001518:	2000      	movs	r0, #0
 800151a:	f004 f9d4 	bl	80058c6 <ST7735_FillScreen1>
			state_game->MainGame_State = Game_init;
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	2201      	movs	r2, #1
 8001522:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
			state_game->PlyerAction_State = PS_AFK;
			state_game->PlyerAction_Main_Substate = PMS_AFK;
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
		}
		break;
 8001526:	e1ab      	b.n	8001880 <GAME_PLAY_Management+0x62c>
			state_game->PlyerAction_State = PS_AFK;
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2200      	movs	r2, #0
 800152c:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
			state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	2200      	movs	r2, #0
 8001534:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->PlyerAction_Battle_Substate = PBS_AFK;
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	2200      	movs	r2, #0
 800153c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			state_game->PlyerAction_Chain_Substate = PCS_AFK;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	2200      	movs	r2, #0
 8001544:	f883 2440 	strb.w	r2, [r3, #1088]	; 0x440
		break;
 8001548:	e19a      	b.n	8001880 <GAME_PLAY_Management+0x62c>
 800154a:	bf00      	nop
 800154c:	58020800 	.word	0x58020800
 8001550:	58020400 	.word	0x58020400
 8001554:	58021400 	.word	0x58021400
 8001558:	2400000c 	.word	0x2400000c
 800155c:	0800f624 	.word	0x0800f624
 8001560:	0800f630 	.word	0x0800f630
 8001564:	24000014 	.word	0x24000014
 8001568:	0800f644 	.word	0x0800f644
 800156c:	0800f650 	.word	0x0800f650
 8001570:	0800f658 	.word	0x0800f658
 8001574:	0800f668 	.word	0x0800f668
 8001578:	0800f670 	.word	0x0800f670
 800157c:	0800f680 	.word	0x0800f680
 8001580:	0800f684 	.word	0x0800f684
 8001584:	58020000 	.word	0x58020000
	case Game_init:
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001588:	4b96      	ldr	r3, [pc, #600]	; (80017e4 <GAME_PLAY_Management+0x590>)
 800158a:	2200      	movs	r2, #0
 800158c:	9202      	str	r2, [sp, #8]
 800158e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	685a      	ldr	r2, [r3, #4]
 8001596:	9200      	str	r2, [sp, #0]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4a93      	ldr	r2, [pc, #588]	; (80017e8 <GAME_PLAY_Management+0x594>)
 800159c:	2105      	movs	r1, #5
 800159e:	2005      	movs	r0, #5
 80015a0:	f003 ff19 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015a4:	4b8f      	ldr	r3, [pc, #572]	; (80017e4 <GAME_PLAY_Management+0x590>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	9202      	str	r2, [sp, #8]
 80015aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ae:	9201      	str	r2, [sp, #4]
 80015b0:	685a      	ldr	r2, [r3, #4]
 80015b2:	9200      	str	r2, [sp, #0]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a8d      	ldr	r2, [pc, #564]	; (80017ec <GAME_PLAY_Management+0x598>)
 80015b8:	210f      	movs	r1, #15
 80015ba:	2000      	movs	r0, #0
 80015bc:	f003 ff0b 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 80015c0:	4b8b      	ldr	r3, [pc, #556]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 80015c2:	2200      	movs	r2, #0
 80015c4:	9202      	str	r2, [sp, #8]
 80015c6:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80015ca:	9201      	str	r2, [sp, #4]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	9200      	str	r2, [sp, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a88      	ldr	r2, [pc, #544]	; (80017f4 <GAME_PLAY_Management+0x5a0>)
 80015d4:	2123      	movs	r1, #35	; 0x23
 80015d6:	2019      	movs	r0, #25
 80015d8:	f003 fefd 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 80015dc:	4b84      	ldr	r3, [pc, #528]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 80015de:	2200      	movs	r2, #0
 80015e0:	9202      	str	r2, [sp, #8]
 80015e2:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80015e6:	9201      	str	r2, [sp, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
 80015ea:	9200      	str	r2, [sp, #0]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4a82      	ldr	r2, [pc, #520]	; (80017f8 <GAME_PLAY_Management+0x5a4>)
 80015f0:	213c      	movs	r1, #60	; 0x3c
 80015f2:	2021      	movs	r0, #33	; 0x21
 80015f4:	f003 feef 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80015f8:	4b7a      	ldr	r3, [pc, #488]	; (80017e4 <GAME_PLAY_Management+0x590>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	9202      	str	r2, [sp, #8]
 80015fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001602:	9201      	str	r2, [sp, #4]
 8001604:	685a      	ldr	r2, [r3, #4]
 8001606:	9200      	str	r2, [sp, #0]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a78      	ldr	r2, [pc, #480]	; (80017ec <GAME_PLAY_Management+0x598>)
 800160c:	214b      	movs	r1, #75	; 0x4b
 800160e:	2000      	movs	r0, #0
 8001610:	f003 fee1 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001614:	4b73      	ldr	r3, [pc, #460]	; (80017e4 <GAME_PLAY_Management+0x590>)
 8001616:	2200      	movs	r2, #0
 8001618:	9202      	str	r2, [sp, #8]
 800161a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800161e:	9201      	str	r2, [sp, #4]
 8001620:	685a      	ldr	r2, [r3, #4]
 8001622:	9200      	str	r2, [sp, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a75      	ldr	r2, [pc, #468]	; (80017fc <GAME_PLAY_Management+0x5a8>)
 8001628:	2105      	movs	r1, #5
 800162a:	2005      	movs	r0, #5
 800162c:	f003 ff1d 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001630:	4b6c      	ldr	r3, [pc, #432]	; (80017e4 <GAME_PLAY_Management+0x590>)
 8001632:	2200      	movs	r2, #0
 8001634:	9202      	str	r2, [sp, #8]
 8001636:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800163a:	9201      	str	r2, [sp, #4]
 800163c:	685a      	ldr	r2, [r3, #4]
 800163e:	9200      	str	r2, [sp, #0]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a6a      	ldr	r2, [pc, #424]	; (80017ec <GAME_PLAY_Management+0x598>)
 8001644:	210f      	movs	r1, #15
 8001646:	2000      	movs	r0, #0
 8001648:	f003 ff0f 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800164c:	4b68      	ldr	r3, [pc, #416]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 800164e:	2200      	movs	r2, #0
 8001650:	9202      	str	r2, [sp, #8]
 8001652:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001656:	9201      	str	r2, [sp, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	9200      	str	r2, [sp, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4a65      	ldr	r2, [pc, #404]	; (80017f4 <GAME_PLAY_Management+0x5a0>)
 8001660:	2123      	movs	r1, #35	; 0x23
 8001662:	2019      	movs	r0, #25
 8001664:	f003 ff01 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8001668:	4b61      	ldr	r3, [pc, #388]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 800166a:	2200      	movs	r2, #0
 800166c:	9202      	str	r2, [sp, #8]
 800166e:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001672:	9201      	str	r2, [sp, #4]
 8001674:	685a      	ldr	r2, [r3, #4]
 8001676:	9200      	str	r2, [sp, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a61      	ldr	r2, [pc, #388]	; (8001800 <GAME_PLAY_Management+0x5ac>)
 800167c:	213c      	movs	r1, #60	; 0x3c
 800167e:	2025      	movs	r0, #37	; 0x25
 8001680:	f003 fef3 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001684:	4b57      	ldr	r3, [pc, #348]	; (80017e4 <GAME_PLAY_Management+0x590>)
 8001686:	2200      	movs	r2, #0
 8001688:	9202      	str	r2, [sp, #8]
 800168a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800168e:	9201      	str	r2, [sp, #4]
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	9200      	str	r2, [sp, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4a55      	ldr	r2, [pc, #340]	; (80017ec <GAME_PLAY_Management+0x598>)
 8001698:	214b      	movs	r1, #75	; 0x4b
 800169a:	2000      	movs	r0, #0
 800169c:	f003 fee5 	bl	800546a <ST7735_WriteString1>
		HAL_Delay(3000);
 80016a0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80016a4:	f004 fd0c 	bl	80060c0 <HAL_Delay>
		ST7735_FillScreen(ST7735_BLACK);
 80016a8:	2000      	movs	r0, #0
 80016aa:	f004 f8fb 	bl	80058a4 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80016ae:	2000      	movs	r0, #0
 80016b0:	f004 f909 	bl	80058c6 <ST7735_FillScreen1>
		MainGUI();
 80016b4:	f002 fd70 	bl	8004198 <MainGUI>

		// Reset Player
		ptrPlayer1->life_point = 4000;
 80016b8:	69fb      	ldr	r3, [r7, #28]
 80016ba:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016be:	809a      	strh	r2, [r3, #4]
		ptrPlayer2->life_point = 4000;
 80016c0:	69bb      	ldr	r3, [r7, #24]
 80016c2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80016c6:	809a      	strh	r2, [r3, #4]
		YUGIOH_Clear_Card_All(ptrPlayer1);
 80016c8:	69f8      	ldr	r0, [r7, #28]
 80016ca:	f7ff fcb1 	bl	8001030 <YUGIOH_Clear_Card_All>
		YUGIOH_Clear_Card_All(ptrPlayer2);
 80016ce:	69b8      	ldr	r0, [r7, #24]
 80016d0:	f7ff fcae 	bl	8001030 <YUGIOH_Clear_Card_All>

		state_game->MainGame_State = first_player;
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	2202      	movs	r2, #2
 80016d8:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		state_game->PlyerAction_State = Drawn_Phase;
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 80016e4:	e0cc      	b.n	8001880 <GAME_PLAY_Management+0x62c>
	case first_player:
		if (state_game -> F_flag == 0){
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d12b      	bne.n	8001748 <GAME_PLAY_Management+0x4f4>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 80016f0:	4b3f      	ldr	r3, [pc, #252]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	9202      	str	r2, [sp, #8]
 80016f6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80016fa:	9201      	str	r2, [sp, #4]
 80016fc:	685a      	ldr	r2, [r3, #4]
 80016fe:	9200      	str	r2, [sp, #0]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4a40      	ldr	r2, [pc, #256]	; (8001804 <GAME_PLAY_Management+0x5b0>)
 8001704:	215a      	movs	r1, #90	; 0x5a
 8001706:	200f      	movs	r0, #15
 8001708:	f003 feaf 	bl	800546a <ST7735_WriteString1>
			HAL_Delay(2000);
 800170c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001710:	f004 fcd6 	bl	80060c0 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8001714:	2300      	movs	r3, #0
 8001716:	9300      	str	r3, [sp, #0]
 8001718:	2326      	movs	r3, #38	; 0x26
 800171a:	2280      	movs	r2, #128	; 0x80
 800171c:	215a      	movs	r1, #90	; 0x5a
 800171e:	2000      	movs	r0, #0
 8001720:	f003 ffc2 	bl	80056a8 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	f893 34d6 	ldrb.w	r3, [r3, #1238]	; 0x4d6
 800172a:	3301      	adds	r3, #1
 800172c:	b2da      	uxtb	r2, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			state_game->S_flag = 0;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			turn += 1;
 800173c:	4b32      	ldr	r3, [pc, #200]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	3301      	adds	r3, #1
 8001742:	b2da      	uxtb	r2, r3
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 8001746:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[0];
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	3304      	adds	r3, #4
 800174c:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[1];
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	f503 7308 	add.w	r3, r3, #544	; 0x220
 8001754:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	693a      	ldr	r2, [r7, #16]
 800175a:	6839      	ldr	r1, [r7, #0]
 800175c:	6878      	ldr	r0, [r7, #4]
 800175e:	f000 f899 	bl	8001894 <GAME_PLAY_Phase_Management>
		break;
 8001762:	e08d      	b.n	8001880 <GAME_PLAY_Management+0x62c>
	case second_player:
		if (state_game -> S_flag == 0){
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 800176a:	2b00      	cmp	r3, #0
 800176c:	d12b      	bne.n	80017c6 <GAME_PLAY_Management+0x572>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <GAME_PLAY_Management+0x59c>)
 8001770:	2200      	movs	r2, #0
 8001772:	9202      	str	r2, [sp, #8]
 8001774:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001778:	9201      	str	r2, [sp, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	9200      	str	r2, [sp, #0]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a20      	ldr	r2, [pc, #128]	; (8001804 <GAME_PLAY_Management+0x5b0>)
 8001782:	215a      	movs	r1, #90	; 0x5a
 8001784:	200f      	movs	r0, #15
 8001786:	f003 fe26 	bl	80053d6 <ST7735_WriteString>
			HAL_Delay(2000);
 800178a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800178e:	f004 fc97 	bl	80060c0 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8001792:	2300      	movs	r3, #0
 8001794:	9300      	str	r3, [sp, #0]
 8001796:	2326      	movs	r3, #38	; 0x26
 8001798:	2280      	movs	r2, #128	; 0x80
 800179a:	215a      	movs	r1, #90	; 0x5a
 800179c:	2000      	movs	r0, #0
 800179e:	f003 ff0f 	bl	80055c0 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	f893 34d7 	ldrb.w	r3, [r3, #1239]	; 0x4d7
 80017a8:	3301      	adds	r3, #1
 80017aa:	b2da      	uxtb	r2, r3
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	f883 24d7 	strb.w	r2, [r3, #1239]	; 0x4d7
			state_game->F_flag = 0;
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 24d6 	strb.w	r2, [r3, #1238]	; 0x4d6
			turn += 1;
 80017ba:	4b13      	ldr	r3, [pc, #76]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	3301      	adds	r3, #1
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b11      	ldr	r3, [pc, #68]	; (8001808 <GAME_PLAY_Management+0x5b4>)
 80017c4:	701a      	strb	r2, [r3, #0]
		}
		ptrPlayerAtk = &state_game->player[1];
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	f503 7308 	add.w	r3, r3, #544	; 0x220
 80017cc:	613b      	str	r3, [r7, #16]
		ptrPlayerDef = &state_game->player[0];
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	3304      	adds	r3, #4
 80017d2:	60fb      	str	r3, [r7, #12]
		GAME_PLAY_Phase_Management(RFIDmain,state_game,ptrPlayerAtk,ptrPlayerDef);
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	693a      	ldr	r2, [r7, #16]
 80017d8:	6839      	ldr	r1, [r7, #0]
 80017da:	6878      	ldr	r0, [r7, #4]
 80017dc:	f000 f85a 	bl	8001894 <GAME_PLAY_Phase_Management>
		break;
 80017e0:	e04e      	b.n	8001880 <GAME_PLAY_Management+0x62c>
 80017e2:	bf00      	nop
 80017e4:	2400000c 	.word	0x2400000c
 80017e8:	0800f624 	.word	0x0800f624
 80017ec:	0800f630 	.word	0x0800f630
 80017f0:	24000014 	.word	0x24000014
 80017f4:	0800f690 	.word	0x0800f690
 80017f8:	0800f698 	.word	0x0800f698
 80017fc:	0800f684 	.word	0x0800f684
 8001800:	0800f6a0 	.word	0x0800f6a0
 8001804:	0800f6a8 	.word	0x0800f6a8
 8001808:	24000176 	.word	0x24000176
	case Game_Ended:
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,1);
 800180c:	2301      	movs	r3, #1
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2300      	movs	r3, #0
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2326      	movs	r3, #38	; 0x26
 8001816:	2280      	movs	r2, #128	; 0x80
 8001818:	215a      	movs	r1, #90	; 0x5a
 800181a:	2000      	movs	r0, #0
 800181c:	f003 ffb8 	bl	8005790 <ST7735_FillRectangleNSS>
		ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,0);
 8001820:	2300      	movs	r3, #0
 8001822:	9301      	str	r3, [sp, #4]
 8001824:	2300      	movs	r3, #0
 8001826:	9300      	str	r3, [sp, #0]
 8001828:	2326      	movs	r3, #38	; 0x26
 800182a:	2280      	movs	r2, #128	; 0x80
 800182c:	215a      	movs	r1, #90	; 0x5a
 800182e:	2000      	movs	r0, #0
 8001830:	f003 ffae 	bl	8005790 <ST7735_FillRectangleNSS>
		HAL_Delay(200);
 8001834:	20c8      	movs	r0, #200	; 0xc8
 8001836:	f004 fc43 	bl	80060c0 <HAL_Delay>
		ST7735_WriteStringNSS(20, 90, "YOU WIN", Font_11x18, ST7735_MAGENTA, ST7735_BLACK,1);
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <GAME_PLAY_Management+0x634>)
 800183c:	2201      	movs	r2, #1
 800183e:	9203      	str	r2, [sp, #12]
 8001840:	2200      	movs	r2, #0
 8001842:	9202      	str	r2, [sp, #8]
 8001844:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001848:	9201      	str	r2, [sp, #4]
 800184a:	685a      	ldr	r2, [r3, #4]
 800184c:	9200      	str	r2, [sp, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a0e      	ldr	r2, [pc, #56]	; (800188c <GAME_PLAY_Management+0x638>)
 8001852:	215a      	movs	r1, #90	; 0x5a
 8001854:	2014      	movs	r0, #20
 8001856:	f003 fe52 	bl	80054fe <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(15, 90, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,0);
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <GAME_PLAY_Management+0x634>)
 800185c:	2200      	movs	r2, #0
 800185e:	9203      	str	r2, [sp, #12]
 8001860:	2200      	movs	r2, #0
 8001862:	9202      	str	r2, [sp, #8]
 8001864:	221f      	movs	r2, #31
 8001866:	9201      	str	r2, [sp, #4]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	9200      	str	r2, [sp, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <GAME_PLAY_Management+0x63c>)
 8001870:	215a      	movs	r1, #90	; 0x5a
 8001872:	200f      	movs	r0, #15
 8001874:	f003 fe43 	bl	80054fe <ST7735_WriteStringNSS>
		HAL_Delay(200);
 8001878:	20c8      	movs	r0, #200	; 0xc8
 800187a:	f004 fc21 	bl	80060c0 <HAL_Delay>
		break;
 800187e:	bf00      	nop
	}
}
 8001880:	bf00      	nop
 8001882:	3720      	adds	r7, #32
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	24000014 	.word	0x24000014
 800188c:	0800f6b4 	.word	0x0800f6b4
 8001890:	0800f6bc 	.word	0x0800f6bc

08001894 <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain,State_game *state_game,Player *playerAtk,Player *playerDef)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b092      	sub	sp, #72	; 0x48
 8001898:	af04      	add	r7, sp, #16
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
	enum _STATE {
		PS_AFK,Drawn_Phase, Main_Phase, Battle_Phase
	} PAS;
	PAS = state_game->PlyerAction_State;
 80018a2:	68bb      	ldr	r3, [r7, #8]
 80018a4:	f893 343d 	ldrb.w	r3, [r3, #1085]	; 0x43d
 80018a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

	enum _MAIN {
		PMS_AFK, PMS_ActionAwait, select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} PMS;
	PMS = state_game->PlyerAction_Main_Substate;
 80018ac:	68bb      	ldr	r3, [r7, #8]
 80018ae:	f893 343e 	ldrb.w	r3, [r3, #1086]	; 0x43e
 80018b2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

	enum _BATTLE {
		PBS_AFK, PBS_ActionAwait, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
	} PBS;
	PBS = state_game->PlyerAction_Battle_Substate;
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	f893 343f 	ldrb.w	r3, [r3, #1087]	; 0x43f
 80018bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
	YUGIOH_Card *ptrYugiohCard_dst;

	Player **ptrUser;
	Player **ptrOpponent;

	switch (PAS) {
 80018c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80018c4:	2b03      	cmp	r3, #3
 80018c6:	f202 8249 	bhi.w	8003d5c <GAME_PLAY_Phase_Management+0x24c8>
 80018ca:	a201      	add	r2, pc, #4	; (adr r2, 80018d0 <GAME_PLAY_Phase_Management+0x3c>)
 80018cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d0:	08003d4f 	.word	0x08003d4f
 80018d4:	080018e1 	.word	0x080018e1
 80018d8:	080019f1 	.word	0x080019f1
 80018dc:	08003073 	.word	0x08003073
	case PS_AFK:
		break;
	case Drawn_Phase:
		HAL_TIM_Base_Start_IT(&TIM7_PORT);
 80018e0:	48aa      	ldr	r0, [pc, #680]	; (8001b8c <GAME_PLAY_Phase_Management+0x2f8>)
 80018e2:	f00a fec1 	bl	800c668 <HAL_TIM_Base_Start_IT>
		LCDvalue(playerAtk,playerDef);
 80018e6:	6839      	ldr	r1, [r7, #0]
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f002 fd15 	bl	8004318 <LCDvalue>
		ST7735_WriteString(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 80018ee:	4ba8      	ldr	r3, [pc, #672]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 80018f0:	2200      	movs	r2, #0
 80018f2:	9202      	str	r2, [sp, #8]
 80018f4:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 80018f8:	9201      	str	r2, [sp, #4]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	9200      	str	r2, [sp, #0]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4aa4      	ldr	r2, [pc, #656]	; (8001b94 <GAME_PLAY_Phase_Management+0x300>)
 8001902:	2123      	movs	r1, #35	; 0x23
 8001904:	206e      	movs	r0, #110	; 0x6e
 8001906:	f003 fd66 	bl	80053d6 <ST7735_WriteString>
		ST7735_WriteString1(110, 35, "DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 800190a:	4ba1      	ldr	r3, [pc, #644]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 800190c:	2200      	movs	r2, #0
 800190e:	9202      	str	r2, [sp, #8]
 8001910:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8001914:	9201      	str	r2, [sp, #4]
 8001916:	685a      	ldr	r2, [r3, #4]
 8001918:	9200      	str	r2, [sp, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a9d      	ldr	r2, [pc, #628]	; (8001b94 <GAME_PLAY_Phase_Management+0x300>)
 800191e:	2123      	movs	r1, #35	; 0x23
 8001920:	206e      	movs	r0, #110	; 0x6e
 8001922:	f003 fda2 	bl	800546a <ST7735_WriteString1>
		ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	781a      	ldrb	r2, [r3, #0]
 800192a:	4b99      	ldr	r3, [pc, #612]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 800192c:	9203      	str	r2, [sp, #12]
 800192e:	2200      	movs	r2, #0
 8001930:	9202      	str	r2, [sp, #8]
 8001932:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001936:	9201      	str	r2, [sp, #4]
 8001938:	685a      	ldr	r2, [r3, #4]
 800193a:	9200      	str	r2, [sp, #0]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a96      	ldr	r2, [pc, #600]	; (8001b98 <GAME_PLAY_Phase_Management+0x304>)
 8001940:	215a      	movs	r1, #90	; 0x5a
 8001942:	2005      	movs	r0, #5
 8001944:	f003 fddb 	bl	80054fe <ST7735_WriteStringNSS>
		ST7735_WriteStringNSS(5, 90, "Draw a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	781a      	ldrb	r2, [r3, #0]
 800194c:	4b90      	ldr	r3, [pc, #576]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 800194e:	9203      	str	r2, [sp, #12]
 8001950:	2200      	movs	r2, #0
 8001952:	9202      	str	r2, [sp, #8]
 8001954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001958:	9201      	str	r2, [sp, #4]
 800195a:	685a      	ldr	r2, [r3, #4]
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a8e      	ldr	r2, [pc, #568]	; (8001b9c <GAME_PLAY_Phase_Management+0x308>)
 8001962:	215a      	movs	r1, #90	; 0x5a
 8001964:	2005      	movs	r0, #5
 8001966:	f003 fdca 	bl	80054fe <ST7735_WriteStringNSS>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 800196a:	2101      	movs	r1, #1
 800196c:	488c      	ldr	r0, [pc, #560]	; (8001ba0 <GAME_PLAY_Phase_Management+0x30c>)
 800196e:	f007 fcf5 	bl	800935c <HAL_GPIO_ReadPin>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	f042 81ec 	bne.w	8003d52 <GAME_PLAY_Phase_Management+0x24be>
				== GPIO_PIN_RESET) {
			ST7735_FillScreen(ST7735_BLACK);
 800197a:	2000      	movs	r0, #0
 800197c:	f003 ff92 	bl	80058a4 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8001980:	2000      	movs	r0, #0
 8001982:	f003 ffa0 	bl	80058c6 <ST7735_FillScreen1>
			MainGUI();
 8001986:	f002 fc07 	bl	8004198 <MainGUI>
			state_game->PlyerAction_State = Main_Phase;
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2202      	movs	r2, #2
 800198e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d

			// Wait for card to be read State = 0 Mean AFK
			state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	2201      	movs	r2, #1
 8001996:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			state_game->action = 0;
 800199a:	68bb      	ldr	r3, [r7, #8]
 800199c:	2200      	movs	r2, #0
 800199e:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1000);
 80019a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80019a4:	f004 fb8c 	bl	80060c0 <HAL_Delay>
			ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	781a      	ldrb	r2, [r3, #0]
 80019ac:	4b78      	ldr	r3, [pc, #480]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 80019ae:	9203      	str	r2, [sp, #12]
 80019b0:	2200      	movs	r2, #0
 80019b2:	9202      	str	r2, [sp, #8]
 80019b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019b8:	9201      	str	r2, [sp, #4]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	9200      	str	r2, [sp, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a75      	ldr	r2, [pc, #468]	; (8001b98 <GAME_PLAY_Phase_Management+0x304>)
 80019c2:	215a      	movs	r1, #90	; 0x5a
 80019c4:	2005      	movs	r0, #5
 80019c6:	f003 fd9a 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Time to PLAY", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	781a      	ldrb	r2, [r3, #0]
 80019ce:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 80019d0:	9203      	str	r2, [sp, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	9202      	str	r2, [sp, #8]
 80019d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80019da:	9201      	str	r2, [sp, #4]
 80019dc:	685a      	ldr	r2, [r3, #4]
 80019de:	9200      	str	r2, [sp, #0]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a70      	ldr	r2, [pc, #448]	; (8001ba4 <GAME_PLAY_Phase_Management+0x310>)
 80019e4:	215a      	movs	r1, #90	; 0x5a
 80019e6:	2005      	movs	r0, #5
 80019e8:	f003 fd89 	bl	80054fe <ST7735_WriteStringNSS>
		}
		break;
 80019ec:	f002 b9b1 	b.w	8003d52 <GAME_PLAY_Phase_Management+0x24be>
	case Main_Phase:
		LCDvalue(playerAtk,playerDef);
 80019f0:	6839      	ldr	r1, [r7, #0]
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f002 fc90 	bl	8004318 <LCDvalue>

		switch (PMS)
 80019f8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80019fc:	2b07      	cmp	r3, #7
 80019fe:	f202 81aa 	bhi.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
 8001a02:	a201      	add	r2, pc, #4	; (adr r2, 8001a08 <GAME_PLAY_Phase_Management+0x174>)
 8001a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a08:	08003049 	.word	0x08003049
 8001a0c:	08001a29 	.word	0x08001a29
 8001a10:	08001b39 	.word	0x08001b39
 8001a14:	08001c45 	.word	0x08001c45
 8001a18:	08001fe9 	.word	0x08001fe9
 8001a1c:	080023dd 	.word	0x080023dd
 8001a20:	080022ab 	.word	0x080022ab
 8001a24:	08002189 	.word	0x08002189
		{
		case PMS_AFK:
			break;
		case PMS_ActionAwait:

			if (state_game->action == 0)
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d169      	bne.n	8001b04 <GAME_PLAY_Phase_Management+0x270>
			{
				ST7735_WriteString(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001a30:	4b57      	ldr	r3, [pc, #348]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	9202      	str	r2, [sp, #8]
 8001a36:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a3a:	9201      	str	r2, [sp, #4]
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	9200      	str	r2, [sp, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a59      	ldr	r2, [pc, #356]	; (8001ba8 <GAME_PLAY_Phase_Management+0x314>)
 8001a44:	2123      	movs	r1, #35	; 0x23
 8001a46:	206e      	movs	r0, #110	; 0x6e
 8001a48:	f003 fcc5 	bl	80053d6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "MP", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8001a4c:	4b50      	ldr	r3, [pc, #320]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	9202      	str	r2, [sp, #8]
 8001a52:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8001a56:	9201      	str	r2, [sp, #4]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	9200      	str	r2, [sp, #0]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a52      	ldr	r2, [pc, #328]	; (8001ba8 <GAME_PLAY_Phase_Management+0x314>)
 8001a60:	2123      	movs	r1, #35	; 0x23
 8001a62:	206e      	movs	r0, #110	; 0x6e
 8001a64:	f003 fd01 	bl	800546a <ST7735_WriteString1>
				//    ST7735_WriteStringNSS(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
				//    ST7735_WriteStringNSS(5, 90, "Place a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8001a68:	2101      	movs	r1, #1
 8001a6a:	484d      	ldr	r0, [pc, #308]	; (8001ba0 <GAME_PLAY_Phase_Management+0x30c>)
 8001a6c:	f007 fc76 	bl	800935c <HAL_GPIO_ReadPin>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d13f      	bne.n	8001af6 <GAME_PLAY_Phase_Management+0x262>
						== GPIO_PIN_RESET){
					ST7735_FillScreen(ST7735_BLACK);
 8001a76:	2000      	movs	r0, #0
 8001a78:	f003 ff14 	bl	80058a4 <ST7735_FillScreen>
					ST7735_FillScreen1(ST7735_BLACK);
 8001a7c:	2000      	movs	r0, #0
 8001a7e:	f003 ff22 	bl	80058c6 <ST7735_FillScreen1>
					MainGUI();
 8001a82:	f002 fb89 	bl	8004198 <MainGUI>
					state_game->action = 50;
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2232      	movs	r2, #50	; 0x32
 8001a8a:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_AFK;
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					YUGIOH_Monster_Activated(playerAtk);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f002 fb5e 	bl	8004156 <YUGIOH_Monster_Activated>
					state_game->PlyerAction_State = Battle_Phase;
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	2203      	movs	r2, #3
 8001a9e:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
					HAL_Delay(1000);
 8001aaa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001aae:	f004 fb07 	bl	80060c0 <HAL_Delay>
					ST7735_WriteStringNSS(5, 90, "Time to defend", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerDef->displayNSS);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	781a      	ldrb	r2, [r3, #0]
 8001ab6:	4b36      	ldr	r3, [pc, #216]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 8001ab8:	9203      	str	r2, [sp, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	9202      	str	r2, [sp, #8]
 8001abe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ac2:	9201      	str	r2, [sp, #4]
 8001ac4:	685a      	ldr	r2, [r3, #4]
 8001ac6:	9200      	str	r2, [sp, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	4a38      	ldr	r2, [pc, #224]	; (8001bac <GAME_PLAY_Phase_Management+0x318>)
 8001acc:	215a      	movs	r1, #90	; 0x5a
 8001ace:	2005      	movs	r0, #5
 8001ad0:	f003 fd15 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Time to battle", Font_7x10, ST7735_WHITE, ST7735_BLACK, playerAtk->displayNSS);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	781a      	ldrb	r2, [r3, #0]
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 8001ada:	9203      	str	r2, [sp, #12]
 8001adc:	2200      	movs	r2, #0
 8001ade:	9202      	str	r2, [sp, #8]
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	9201      	str	r2, [sp, #4]
 8001ae6:	685a      	ldr	r2, [r3, #4]
 8001ae8:	9200      	str	r2, [sp, #0]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <GAME_PLAY_Phase_Management+0x31c>)
 8001aee:	215a      	movs	r1, #90	; 0x5a
 8001af0:	2005      	movs	r0, #5
 8001af2:	f003 fd04 	bl	80054fe <ST7735_WriteStringNSS>
				}
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68b9      	ldr	r1, [r7, #8]
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f7fe fe2a 	bl	8000754 <Player_Reading_Card>
				// Reset Chain count
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
				state_game->ChainCount = 0;
				state_game->PlyerAction_Main_Substate = select_position;
			}
			break;
 8001b00:	f001 baa5 	b.w	800304e <GAME_PLAY_Phase_Management+0x17ba>
			else if (state_game->action == 1)
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	f041 82a0 	bne.w	800304e <GAME_PLAY_Phase_Management+0x17ba>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	781b      	ldrb	r3, [r3, #0]
 8001b12:	9301      	str	r3, [sp, #4]
 8001b14:	2300      	movs	r3, #0
 8001b16:	9300      	str	r3, [sp, #0]
 8001b18:	2326      	movs	r3, #38	; 0x26
 8001b1a:	2280      	movs	r2, #128	; 0x80
 8001b1c:	215a      	movs	r1, #90	; 0x5a
 8001b1e:	2000      	movs	r0, #0
 8001b20:	f003 fe36 	bl	8005790 <ST7735_FillRectangleNSS>
				state_game->ChainCount = 0;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	2200      	movs	r2, #0
 8001b28:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
				state_game->PlyerAction_Main_Substate = select_position;
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2202      	movs	r2, #2
 8001b30:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001b34:	f001 ba8b 	b.w	800304e <GAME_PLAY_Phase_Management+0x17ba>
		case select_position:

			ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	781a      	ldrb	r2, [r3, #0]
 8001b3c:	4b14      	ldr	r3, [pc, #80]	; (8001b90 <GAME_PLAY_Phase_Management+0x2fc>)
 8001b3e:	9203      	str	r2, [sp, #12]
 8001b40:	2200      	movs	r2, #0
 8001b42:	9202      	str	r2, [sp, #8]
 8001b44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001b48:	9201      	str	r2, [sp, #4]
 8001b4a:	685a      	ldr	r2, [r3, #4]
 8001b4c:	9200      	str	r2, [sp, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a18      	ldr	r2, [pc, #96]	; (8001bb4 <GAME_PLAY_Phase_Management+0x320>)
 8001b52:	215a      	movs	r1, #90	; 0x5a
 8001b54:	2005      	movs	r0, #5
 8001b56:	f003 fcd2 	bl	80054fe <ST7735_WriteStringNSS>
			// Current state_game->action = 1
			ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001b60:	62bb      	str	r3, [r7, #40]	; 0x28
			ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001b68:	637b      	str	r3, [r7, #52]	; 0x34

			if (state_game->action == 1)
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d140      	bne.n	8001bf4 <GAME_PLAY_Phase_Management+0x360>
			{
				if (playerAtk->noBTN == GPIO_PIN_RESET) {
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	789b      	ldrb	r3, [r3, #2]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11e      	bne.n	8001bb8 <GAME_PLAY_Phase_Management+0x324>
					ptrYugiohCard_src->cardState = 0;
 8001b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	2202      	movs	r2, #2
 8001b84:	701a      	strb	r2, [r3, #0]
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->PlyerAction_Main_Substate = check_card_type;
			}
			break;
 8001b86:	f001 ba65 	b.w	8003054 <GAME_PLAY_Phase_Management+0x17c0>
 8001b8a:	bf00      	nop
 8001b8c:	240002e8 	.word	0x240002e8
 8001b90:	2400000c 	.word	0x2400000c
 8001b94:	0800f6c8 	.word	0x0800f6c8
 8001b98:	0800f6cc 	.word	0x0800f6cc
 8001b9c:	0800f6dc 	.word	0x0800f6dc
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	0800f6e8 	.word	0x0800f6e8
 8001ba8:	0800f6f8 	.word	0x0800f6f8
 8001bac:	0800f6fc 	.word	0x0800f6fc
 8001bb0:	0800f70c 	.word	0x0800f70c
 8001bb4:	0800f71c 	.word	0x0800f71c
				else if(playerAtk->yesBTN == GPIO_PIN_RESET) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	785b      	ldrb	r3, [r3, #1]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f041 8249 	bne.w	8003054 <GAME_PLAY_Phase_Management+0x17c0>
					uint8_t idxC = YUGIOH_Check_Spell_On_board(playerAtk, ptrYugiohCard_src);
 8001bc2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f002 fa79 	bl	80040bc <YUGIOH_Check_Spell_On_board>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	74bb      	strb	r3, [r7, #18]
					if (idxC != 255) {
 8001bce:	7cbb      	ldrb	r3, [r7, #18]
 8001bd0:	2bff      	cmp	r3, #255	; 0xff
 8001bd2:	d007      	beq.n	8001be4 <GAME_PLAY_Phase_Management+0x350>
						YUGIOH_card_clear(&playerAtk->cardOnBoard[idxC]);
 8001bd4:	7cbb      	ldrb	r3, [r7, #18]
 8001bd6:	011b      	lsls	r3, r3, #4
 8001bd8:	3308      	adds	r3, #8
 8001bda:	687a      	ldr	r2, [r7, #4]
 8001bdc:	4413      	add	r3, r2
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe fd87 	bl	80006f2 <YUGIOH_card_clear>
					ptrYugiohCard_src->cardState = 1;
 8001be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001be6:	2201      	movs	r2, #1
 8001be8:	709a      	strb	r2, [r3, #2]
					state_game->action = 2;
 8001bea:	68bb      	ldr	r3, [r7, #8]
 8001bec:	2202      	movs	r2, #2
 8001bee:	701a      	strb	r2, [r3, #0]
			break;
 8001bf0:	f001 ba30 	b.w	8003054 <GAME_PLAY_Phase_Management+0x17c0>
			else if (state_game->action == 2)
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	f041 822b 	bne.w	8003054 <GAME_PLAY_Phase_Management+0x17c0>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2300      	movs	r3, #0
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	2326      	movs	r3, #38	; 0x26
 8001c0a:	2280      	movs	r2, #128	; 0x80
 8001c0c:	215a      	movs	r1, #90	; 0x5a
 8001c0e:	2000      	movs	r0, #0
 8001c10:	f003 fdbe 	bl	8005790 <ST7735_FillRectangleNSS>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2326      	movs	r3, #38	; 0x26
 8001c20:	2280      	movs	r2, #128	; 0x80
 8001c22:	215a      	movs	r1, #90	; 0x5a
 8001c24:	2000      	movs	r0, #0
 8001c26:	f003 fdb3 	bl	8005790 <ST7735_FillRectangleNSS>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001c2a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001c2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001c2e:	f7fe fd29 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2203      	movs	r2, #3
 8001c36:	701a      	strb	r2, [r3, #0]
				state_game->PlyerAction_Main_Substate = check_card_type;
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2203      	movs	r2, #3
 8001c3c:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001c40:	f001 ba08 	b.w	8003054 <GAME_PLAY_Phase_Management+0x17c0>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001c4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 3)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b03      	cmp	r3, #3
 8001c52:	f041 8202 	bne.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8001c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c58:	785b      	ldrb	r3, [r3, #1]
 8001c5a:	2b03      	cmp	r3, #3
 8001c5c:	d15e      	bne.n	8001d1c <GAME_PLAY_Phase_Management+0x488>
				{
					ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	781a      	ldrb	r2, [r3, #0]
 8001c62:	4b95      	ldr	r3, [pc, #596]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001c64:	9203      	str	r2, [sp, #12]
 8001c66:	2200      	movs	r2, #0
 8001c68:	9202      	str	r2, [sp, #8]
 8001c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c6e:	9201      	str	r2, [sp, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	9200      	str	r2, [sp, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a91      	ldr	r2, [pc, #580]	; (8001ebc <GAME_PLAY_Phase_Management+0x628>)
 8001c78:	215a      	movs	r1, #90	; 0x5a
 8001c7a:	2005      	movs	r0, #5
 8001c7c:	f003 fc3f 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	781a      	ldrb	r2, [r3, #0]
 8001c84:	4b8c      	ldr	r3, [pc, #560]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001c86:	9203      	str	r2, [sp, #12]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	9202      	str	r2, [sp, #8]
 8001c8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c90:	9201      	str	r2, [sp, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	9200      	str	r2, [sp, #0]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a89      	ldr	r2, [pc, #548]	; (8001ec0 <GAME_PLAY_Phase_Management+0x62c>)
 8001c9a:	215a      	movs	r1, #90	; 0x5a
 8001c9c:	2005      	movs	r0, #5
 8001c9e:	f003 fc2e 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	781a      	ldrb	r2, [r3, #0]
 8001ca6:	4b84      	ldr	r3, [pc, #528]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001ca8:	9203      	str	r2, [sp, #12]
 8001caa:	2200      	movs	r2, #0
 8001cac:	9202      	str	r2, [sp, #8]
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	9201      	str	r2, [sp, #4]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	9200      	str	r2, [sp, #0]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4a82      	ldr	r2, [pc, #520]	; (8001ec4 <GAME_PLAY_Phase_Management+0x630>)
 8001cbc:	2169      	movs	r1, #105	; 0x69
 8001cbe:	2005      	movs	r0, #5
 8001cc0:	f003 fc1d 	bl	80054fe <ST7735_WriteStringNSS>

					ptrYugiohCard_src->cardState = 0;
 8001cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	709a      	strb	r2, [r3, #2]

					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001cca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ccc:	799a      	ldrb	r2, [r3, #6]
 8001cce:	4b7e      	ldr	r3, [pc, #504]	; (8001ec8 <GAME_PLAY_Phase_Management+0x634>)
 8001cd0:	fba3 1302 	umull	r1, r3, r3, r2
 8001cd4:	0899      	lsrs	r1, r3, #2
 8001cd6:	460b      	mov	r3, r1
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	440b      	add	r3, r1
 8001cdc:	005b      	lsls	r3, r3, #1
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	74fb      	strb	r3, [r7, #19]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001ce2:	7cfb      	ldrb	r3, [r7, #19]
 8001ce4:	011b      	lsls	r3, r3, #4
 8001ce6:	3308      	adds	r3, #8
 8001ce8:	687a      	ldr	r2, [r7, #4]
 8001cea:	4413      	add	r3, r2
 8001cec:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001cee:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001cf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001cf2:	f7fe fcc7 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7ff f974 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001d02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fcbd 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
						state_game->action = 4;
						state_game->PlyerAction_Main_Substate = advance_summon;
					}
				}
			}
			break;
 8001d18:	f001 b99f 	b.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
				else if (ptrYugiohCard_src->cardType == 2)
 8001d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d1e:	785b      	ldrb	r3, [r3, #1]
 8001d20:	2b02      	cmp	r3, #2
 8001d22:	f040 80d7 	bne.w	8001ed4 <GAME_PLAY_Phase_Management+0x640>
					state_game->count_chain = 1;
 8001d26:	68bb      	ldr	r3, [r7, #8]
 8001d28:	2201      	movs	r2, #1
 8001d2a:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->cardState == 1){
 8001d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d164      	bne.n	8001dfe <GAME_PLAY_Phase_Management+0x56a>
						ST7735_WriteStringNSS(5, 90, "Opponent chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	781a      	ldrb	r2, [r3, #0]
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001d3a:	9203      	str	r2, [sp, #12]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	9202      	str	r2, [sp, #8]
 8001d40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d44:	9201      	str	r2, [sp, #4]
 8001d46:	685a      	ldr	r2, [r3, #4]
 8001d48:	9200      	str	r2, [sp, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a5f      	ldr	r2, [pc, #380]	; (8001ecc <GAME_PLAY_Phase_Management+0x638>)
 8001d4e:	215a      	movs	r1, #90	; 0x5a
 8001d50:	2005      	movs	r0, #5
 8001d52:	f003 fbd4 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "You chain a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	781a      	ldrb	r2, [r3, #0]
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001d5c:	9203      	str	r2, [sp, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	9202      	str	r2, [sp, #8]
 8001d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d66:	9201      	str	r2, [sp, #4]
 8001d68:	685a      	ldr	r2, [r3, #4]
 8001d6a:	9200      	str	r2, [sp, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a58      	ldr	r2, [pc, #352]	; (8001ed0 <GAME_PLAY_Phase_Management+0x63c>)
 8001d70:	215a      	movs	r1, #90	; 0x5a
 8001d72:	2005      	movs	r0, #5
 8001d74:	f003 fbc3 	bl	80054fe <ST7735_WriteStringNSS>
						state_game->action = 4;
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	2204      	movs	r2, #4
 8001d7c:	701a      	strb	r2, [r3, #0]
						YUGIOH_card_Buffer_Update_Chain(state_game);
 8001d7e:	68b8      	ldr	r0, [r7, #8]
 8001d80:	f7ff f9db 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001d8e:	f7fe fc79 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	781b      	ldrb	r3, [r3, #0]
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	2300      	movs	r3, #0
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	2326      	movs	r3, #38	; 0x26
 8001dbe:	2280      	movs	r2, #128	; 0x80
 8001dc0:	215a      	movs	r1, #90	; 0x5a
 8001dc2:	2000      	movs	r0, #0
 8001dc4:	f003 fce4 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	9301      	str	r3, [sp, #4]
 8001dce:	2300      	movs	r3, #0
 8001dd0:	9300      	str	r3, [sp, #0]
 8001dd2:	2326      	movs	r3, #38	; 0x26
 8001dd4:	2280      	movs	r2, #128	; 0x80
 8001dd6:	215a      	movs	r1, #90	; 0x5a
 8001dd8:	2000      	movs	r0, #0
 8001dda:	f003 fcd9 	bl	8005790 <ST7735_FillRectangleNSS>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f7ff f900 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fc49 	bl	8000684 <YUGIOH_card_copy>
						state_game->PlyerAction_Main_Substate = chaining_main_DEF;
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	2207      	movs	r2, #7
 8001df6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001dfa:	f001 b92e 	b.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
						ST7735_WriteStringNSS(5, 90, "You set a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	781a      	ldrb	r2, [r3, #0]
 8001e02:	4b2d      	ldr	r3, [pc, #180]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001e04:	9203      	str	r2, [sp, #12]
 8001e06:	2200      	movs	r2, #0
 8001e08:	9202      	str	r2, [sp, #8]
 8001e0a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e0e:	9201      	str	r2, [sp, #4]
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	9200      	str	r2, [sp, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a29      	ldr	r2, [pc, #164]	; (8001ebc <GAME_PLAY_Phase_Management+0x628>)
 8001e18:	215a      	movs	r1, #90	; 0x5a
 8001e1a:	2005      	movs	r0, #5
 8001e1c:	f003 fb6f 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent set", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	781a      	ldrb	r2, [r3, #0]
 8001e24:	4b24      	ldr	r3, [pc, #144]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001e26:	9203      	str	r2, [sp, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	9202      	str	r2, [sp, #8]
 8001e2c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e30:	9201      	str	r2, [sp, #4]
 8001e32:	685a      	ldr	r2, [r3, #4]
 8001e34:	9200      	str	r2, [sp, #0]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a21      	ldr	r2, [pc, #132]	; (8001ec0 <GAME_PLAY_Phase_Management+0x62c>)
 8001e3a:	215a      	movs	r1, #90	; 0x5a
 8001e3c:	2005      	movs	r0, #5
 8001e3e:	f003 fb5e 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	781a      	ldrb	r2, [r3, #0]
 8001e46:	4b1c      	ldr	r3, [pc, #112]	; (8001eb8 <GAME_PLAY_Phase_Management+0x624>)
 8001e48:	9203      	str	r2, [sp, #12]
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	9202      	str	r2, [sp, #8]
 8001e4e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e52:	9201      	str	r2, [sp, #4]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	9200      	str	r2, [sp, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a1a      	ldr	r2, [pc, #104]	; (8001ec4 <GAME_PLAY_Phase_Management+0x630>)
 8001e5c:	2169      	movs	r1, #105	; 0x69
 8001e5e:	2005      	movs	r0, #5
 8001e60:	f003 fb4d 	bl	80054fe <ST7735_WriteStringNSS>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	799a      	ldrb	r2, [r3, #6]
 8001e68:	4b17      	ldr	r3, [pc, #92]	; (8001ec8 <GAME_PLAY_Phase_Management+0x634>)
 8001e6a:	fba3 1302 	umull	r1, r3, r3, r2
 8001e6e:	0899      	lsrs	r1, r3, #2
 8001e70:	460b      	mov	r3, r1
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	440b      	add	r3, r1
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	753b      	strb	r3, [r7, #20]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001e7c:	7d3b      	ldrb	r3, [r7, #20]
 8001e7e:	011b      	lsls	r3, r3, #4
 8001e80:	3308      	adds	r3, #8
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	4413      	add	r3, r2
 8001e86:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001e88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001e8a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001e8c:	f7fe fbfa 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff f8a7 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001e9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f7fe fbf0 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001ea4:	68bb      	ldr	r3, [r7, #8]
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001eaa:	68bb      	ldr	r3, [r7, #8]
 8001eac:	2201      	movs	r2, #1
 8001eae:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001eb2:	f001 b8d2 	b.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
 8001eb6:	bf00      	nop
 8001eb8:	2400000c 	.word	0x2400000c
 8001ebc:	0800f72c 	.word	0x0800f72c
 8001ec0:	0800f73c 	.word	0x0800f73c
 8001ec4:	0800f74c 	.word	0x0800f74c
 8001ec8:	aaaaaaab 	.word	0xaaaaaaab
 8001ecc:	0800f754 	.word	0x0800f754
 8001ed0:	0800f76c 	.word	0x0800f76c
				else if (ptrYugiohCard_src->cardType == 1)
 8001ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed6:	785b      	ldrb	r3, [r3, #1]
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	f041 80be 	bne.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
					state_game->test = 2;
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2202      	movs	r2, #2
 8001ee2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if (ptrYugiohCard_src->cardLevel < 7)
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	78db      	ldrb	r3, [r3, #3]
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d870      	bhi.n	8001fd0 <GAME_PLAY_Phase_Management+0x73c>
						ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	781a      	ldrb	r2, [r3, #0]
 8001ef2:	4ba0      	ldr	r3, [pc, #640]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 8001ef4:	9203      	str	r2, [sp, #12]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	9202      	str	r2, [sp, #8]
 8001efa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001efe:	9201      	str	r2, [sp, #4]
 8001f00:	685a      	ldr	r2, [r3, #4]
 8001f02:	9200      	str	r2, [sp, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a9c      	ldr	r2, [pc, #624]	; (8002178 <GAME_PLAY_Phase_Management+0x8e4>)
 8001f08:	215a      	movs	r1, #90	; 0x5a
 8001f0a:	2005      	movs	r0, #5
 8001f0c:	f003 faf7 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	781a      	ldrb	r2, [r3, #0]
 8001f14:	4b97      	ldr	r3, [pc, #604]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 8001f16:	9203      	str	r2, [sp, #12]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	9202      	str	r2, [sp, #8]
 8001f1c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f20:	9201      	str	r2, [sp, #4]
 8001f22:	685a      	ldr	r2, [r3, #4]
 8001f24:	9200      	str	r2, [sp, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a94      	ldr	r2, [pc, #592]	; (800217c <GAME_PLAY_Phase_Management+0x8e8>)
 8001f2a:	2169      	movs	r1, #105	; 0x69
 8001f2c:	2005      	movs	r0, #5
 8001f2e:	f003 fae6 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	781a      	ldrb	r2, [r3, #0]
 8001f36:	4b8f      	ldr	r3, [pc, #572]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 8001f38:	9203      	str	r2, [sp, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	9202      	str	r2, [sp, #8]
 8001f3e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f42:	9201      	str	r2, [sp, #4]
 8001f44:	685a      	ldr	r2, [r3, #4]
 8001f46:	9200      	str	r2, [sp, #0]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a8d      	ldr	r2, [pc, #564]	; (8002180 <GAME_PLAY_Phase_Management+0x8ec>)
 8001f4c:	215a      	movs	r1, #90	; 0x5a
 8001f4e:	2005      	movs	r0, #5
 8001f50:	f003 fad5 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	781a      	ldrb	r2, [r3, #0]
 8001f58:	4b86      	ldr	r3, [pc, #536]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 8001f5a:	9203      	str	r2, [sp, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	9202      	str	r2, [sp, #8]
 8001f60:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001f64:	9201      	str	r2, [sp, #4]
 8001f66:	685a      	ldr	r2, [r3, #4]
 8001f68:	9200      	str	r2, [sp, #0]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a83      	ldr	r2, [pc, #524]	; (800217c <GAME_PLAY_Phase_Management+0x8e8>)
 8001f6e:	2169      	movs	r1, #105	; 0x69
 8001f70:	2005      	movs	r0, #5
 8001f72:	f003 fac4 	bl	80054fe <ST7735_WriteStringNSS>
						state_game->test = 1;
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f80:	799a      	ldrb	r2, [r3, #6]
 8001f82:	4b80      	ldr	r3, [pc, #512]	; (8002184 <GAME_PLAY_Phase_Management+0x8f0>)
 8001f84:	fba3 1302 	umull	r1, r3, r3, r2
 8001f88:	0899      	lsrs	r1, r3, #2
 8001f8a:	460b      	mov	r3, r1
 8001f8c:	005b      	lsls	r3, r3, #1
 8001f8e:	440b      	add	r3, r1
 8001f90:	005b      	lsls	r3, r3, #1
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	757b      	strb	r3, [r7, #21]
						ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8001f96:	7d7b      	ldrb	r3, [r7, #21]
 8001f98:	011b      	lsls	r3, r3, #4
 8001f9a:	3308      	adds	r3, #8
 8001f9c:	687a      	ldr	r2, [r7, #4]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	637b      	str	r3, [r7, #52]	; 0x34
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001fa2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001fa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001fa6:	f7fe fb6d 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff f81a 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8001fb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fb63 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001fcc:	f001 b845 	b.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
						YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f7ff f807 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	2204      	movs	r2, #4
 8001fda:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Main_Substate = advance_summon;
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	2204      	movs	r2, #4
 8001fe0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8001fe4:	f001 b839 	b.w	800305a <GAME_PLAY_Phase_Management+0x17c6>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001fee:	62bb      	str	r3, [r7, #40]	; 0x28

			if (state_game->action == 4)
 8001ff0:	68bb      	ldr	r3, [r7, #8]
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d105      	bne.n	8002004 <GAME_PLAY_Phase_Management+0x770>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 8001ff8:	687a      	ldr	r2, [r7, #4]
 8001ffa:	68b9      	ldr	r1, [r7, #8]
 8001ffc:	68f8      	ldr	r0, [r7, #12]
 8001ffe:	f7fe fba9 	bl	8000754 <Player_Reading_Card>
 8002002:	e070      	b.n	80020e6 <GAME_PLAY_Phase_Management+0x852>
			}
			else if (state_game->action == 5)
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b05      	cmp	r3, #5
 800200a:	d105      	bne.n	8002018 <GAME_PLAY_Phase_Management+0x784>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 800200c:	687a      	ldr	r2, [r7, #4]
 800200e:	68b9      	ldr	r1, [r7, #8]
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f7fe fb9f 	bl	8000754 <Player_Reading_Card>
 8002016:	e066      	b.n	80020e6 <GAME_PLAY_Phase_Management+0x852>
			}
			else if (state_game->action == 6)
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b06      	cmp	r3, #6
 800201e:	d162      	bne.n	80020e6 <GAME_PLAY_Phase_Management+0x852>
			{
				uint8_t monsterflag = 0 ;
 8002020:	2300      	movs	r3, #0
 8002022:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				ptrYugiohCard_dst = &playerAtk->ActtionBuffer[0];
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 800202c:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 800202e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002030:	78db      	ldrb	r3, [r3, #3]
 8002032:	2b04      	cmp	r3, #4
 8002034:	d804      	bhi.n	8002040 <GAME_PLAY_Phase_Management+0x7ac>
				{
					monsterflag += 1;
 8002036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800203a:	3301      	adds	r3, #1
 800203c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				}
				ptrYugiohCard_dst++;
 8002040:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002042:	3310      	adds	r3, #16
 8002044:	637b      	str	r3, [r7, #52]	; 0x34
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8002046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002048:	78db      	ldrb	r3, [r3, #3]
 800204a:	2b04      	cmp	r3, #4
 800204c:	d804      	bhi.n	8002058 <GAME_PLAY_Phase_Management+0x7c4>
				{
					monsterflag += 1;
 800204e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002052:	3301      	adds	r3, #1
 8002054:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				}

				if (monsterflag == 2)
 8002058:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800205c:	2b02      	cmp	r3, #2
 800205e:	d135      	bne.n	80020cc <GAME_PLAY_Phase_Management+0x838>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8002060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002062:	799a      	ldrb	r2, [r3, #6]
 8002064:	4b47      	ldr	r3, [pc, #284]	; (8002184 <GAME_PLAY_Phase_Management+0x8f0>)
 8002066:	fba3 1302 	umull	r1, r3, r3, r2
 800206a:	0899      	lsrs	r1, r3, #2
 800206c:	460b      	mov	r3, r1
 800206e:	005b      	lsls	r3, r3, #1
 8002070:	440b      	add	r3, r1
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	1ad3      	subs	r3, r2, r3
 8002076:	75bb      	strb	r3, [r7, #22]
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002078:	7dbb      	ldrb	r3, [r7, #22]
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	3308      	adds	r3, #8
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	4413      	add	r3, r2
 8002082:	637b      	str	r3, [r7, #52]	; 0x34

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8002084:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8002086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002088:	f7fe fafc 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[0]);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002092:	4619      	mov	r1, r3
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	f7ff f89c 	bl	80011d2 <YUGIOH_To_GY>
					YUGIOH_To_GY(playerAtk,&playerAtk->ActtionBuffer[1]);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80020a0:	4619      	mov	r1, r3
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff f895 	bl	80011d2 <YUGIOH_To_GY>

					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80020a8:	6878      	ldr	r0, [r7, #4]
 80020aa:	f7fe ff9b 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], ptrYugiohCard_src);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80020b4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80020b6:	4618      	mov	r0, r3
 80020b8:	f7fe fae4 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
 80020ca:	e00c      	b.n	80020e6 <GAME_PLAY_Phase_Management+0x852>
				}
				else
				{
					YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f7fe ff89 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&playerAtk->ActtionBuffer[0], &playerAtk->CardInPlayed);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020de:	4619      	mov	r1, r3
 80020e0:	4610      	mov	r0, r2
 80020e2:	f7fe facf 	bl	8000684 <YUGIOH_card_copy>
				}
			}

			ST7735_WriteStringNSS(5, 90, "You summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	781a      	ldrb	r2, [r3, #0]
 80020ea:	4b22      	ldr	r3, [pc, #136]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 80020ec:	9203      	str	r2, [sp, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	9202      	str	r2, [sp, #8]
 80020f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f6:	9201      	str	r2, [sp, #4]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	9200      	str	r2, [sp, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1e      	ldr	r2, [pc, #120]	; (8002178 <GAME_PLAY_Phase_Management+0x8e4>)
 8002100:	215a      	movs	r1, #90	; 0x5a
 8002102:	2005      	movs	r0, #5
 8002104:	f003 f9fb 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	781a      	ldrb	r2, [r3, #0]
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 800210e:	9203      	str	r2, [sp, #12]
 8002110:	2200      	movs	r2, #0
 8002112:	9202      	str	r2, [sp, #8]
 8002114:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8002118:	9201      	str	r2, [sp, #4]
 800211a:	685a      	ldr	r2, [r3, #4]
 800211c:	9200      	str	r2, [sp, #0]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a16      	ldr	r2, [pc, #88]	; (800217c <GAME_PLAY_Phase_Management+0x8e8>)
 8002122:	2169      	movs	r1, #105	; 0x69
 8002124:	2005      	movs	r0, #5
 8002126:	f003 f9ea 	bl	80054fe <ST7735_WriteStringNSS>

			ST7735_WriteStringNSS(5, 90, "Opponent summon", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	781a      	ldrb	r2, [r3, #0]
 800212e:	4b11      	ldr	r3, [pc, #68]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 8002130:	9203      	str	r2, [sp, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	9202      	str	r2, [sp, #8]
 8002136:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800213a:	9201      	str	r2, [sp, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	9200      	str	r2, [sp, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <GAME_PLAY_Phase_Management+0x8ec>)
 8002144:	215a      	movs	r1, #90	; 0x5a
 8002146:	2005      	movs	r0, #5
 8002148:	f003 f9d9 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	781a      	ldrb	r2, [r3, #0]
 8002150:	4b08      	ldr	r3, [pc, #32]	; (8002174 <GAME_PLAY_Phase_Management+0x8e0>)
 8002152:	9203      	str	r2, [sp, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	9202      	str	r2, [sp, #8]
 8002158:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800215c:	9201      	str	r2, [sp, #4]
 800215e:	685a      	ldr	r2, [r3, #4]
 8002160:	9200      	str	r2, [sp, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a05      	ldr	r2, [pc, #20]	; (800217c <GAME_PLAY_Phase_Management+0x8e8>)
 8002166:	2169      	movs	r1, #105	; 0x69
 8002168:	2005      	movs	r0, #5
 800216a:	f003 f9c8 	bl	80054fe <ST7735_WriteStringNSS>
			break;
 800216e:	f000 bf7e 	b.w	800306e <GAME_PLAY_Phase_Management+0x17da>
 8002172:	bf00      	nop
 8002174:	2400000c 	.word	0x2400000c
 8002178:	0800f780 	.word	0x0800f780
 800217c:	0800f78c 	.word	0x0800f78c
 8002180:	0800f798 	.word	0x0800f798
 8002184:	aaaaaaab 	.word	0xaaaaaaab
		case chaining_main_DEF:

			// Current state_game->action = 4

			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	781a      	ldrb	r2, [r3, #0]
 800218c:	4b90      	ldr	r3, [pc, #576]	; (80023d0 <GAME_PLAY_Phase_Management+0xb3c>)
 800218e:	9203      	str	r2, [sp, #12]
 8002190:	2200      	movs	r2, #0
 8002192:	9202      	str	r2, [sp, #8]
 8002194:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002198:	9201      	str	r2, [sp, #4]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	9200      	str	r2, [sp, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a8c      	ldr	r2, [pc, #560]	; (80023d4 <GAME_PLAY_Phase_Management+0xb40>)
 80021a2:	215a      	movs	r1, #90	; 0x5a
 80021a4:	2005      	movs	r0, #5
 80021a6:	f003 f9aa 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	781a      	ldrb	r2, [r3, #0]
 80021ae:	4b88      	ldr	r3, [pc, #544]	; (80023d0 <GAME_PLAY_Phase_Management+0xb3c>)
 80021b0:	9203      	str	r2, [sp, #12]
 80021b2:	2200      	movs	r2, #0
 80021b4:	9202      	str	r2, [sp, #8]
 80021b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021ba:	9201      	str	r2, [sp, #4]
 80021bc:	685a      	ldr	r2, [r3, #4]
 80021be:	9200      	str	r2, [sp, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	4a85      	ldr	r2, [pc, #532]	; (80023d8 <GAME_PLAY_Phase_Management+0xb44>)
 80021c4:	215a      	movs	r1, #90	; 0x5a
 80021c6:	2005      	movs	r0, #5
 80021c8:	f003 f999 	bl	80054fe <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80021cc:	68bb      	ldr	r3, [r7, #8]
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d11c      	bne.n	800220e <GAME_PLAY_Phase_Management+0x97a>
			{

				if (playerDef->noBTN == GPIO_PIN_RESET){
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	789b      	ldrb	r3, [r3, #2]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d111      	bne.n	8002200 <GAME_PLAY_Phase_Management+0x96c>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	9301      	str	r3, [sp, #4]
 80021e2:	2300      	movs	r3, #0
 80021e4:	9300      	str	r3, [sp, #0]
 80021e6:	2326      	movs	r3, #38	; 0x26
 80021e8:	2280      	movs	r2, #128	; 0x80
 80021ea:	215a      	movs	r1, #90	; 0x5a
 80021ec:	2000      	movs	r0, #0
 80021ee:	f003 facf 	bl	8005790 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	2205      	movs	r2, #5
 80021f6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2200      	movs	r2, #0
 80021fe:	705a      	strb	r2, [r3, #1]
				}
				Player_Reading_Card(RFIDmain,state_game,playerDef);
 8002200:	683a      	ldr	r2, [r7, #0]
 8002202:	68b9      	ldr	r1, [r7, #8]
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7fe faa5 	bl	8000754 <Player_Reading_Card>
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 800220a:	f000 bf29 	b.w	8003060 <GAME_PLAY_Phase_Management+0x17cc>
			else if ((state_game->action == 5 )){
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b05      	cmp	r3, #5
 8002214:	f040 8724 	bne.w	8003060 <GAME_PLAY_Phase_Management+0x17cc>
				ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2300      	movs	r3, #0
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2326      	movs	r3, #38	; 0x26
 8002224:	2280      	movs	r2, #128	; 0x80
 8002226:	215a      	movs	r1, #90	; 0x5a
 8002228:	2000      	movs	r0, #0
 800222a:	f003 fab1 	bl	8005790 <ST7735_FillRectangleNSS>
				ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002234:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8002236:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002238:	6838      	ldr	r0, [r7, #0]
 800223a:	f001 ff13 	bl	8004064 <YUGIOH_Check_Trap_On_board>
 800223e:	4603      	mov	r3, r0
 8002240:	763b      	strb	r3, [r7, #24]
				if (idx != 255)
 8002242:	7e3b      	ldrb	r3, [r7, #24]
 8002244:	2bff      	cmp	r3, #255	; 0xff
 8002246:	d02b      	beq.n	80022a0 <GAME_PLAY_Phase_Management+0xa0c>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 8002248:	68b8      	ldr	r0, [r7, #8]
 800224a:	f7fe ff76 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 800224e:	7e3b      	ldrb	r3, [r7, #24]
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3308      	adds	r3, #8
 8002254:	683a      	ldr	r2, [r7, #0]
 8002256:	4413      	add	r3, r2
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800225a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800225c:	2200      	movs	r2, #0
 800225e:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8002266:	4619      	mov	r1, r3
 8002268:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800226a:	f7fe fa0b 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerDef;
 800226e:	68bb      	ldr	r3, [r7, #8]
 8002270:	683a      	ldr	r2, [r7, #0]
 8002272:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerAtk;
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	687a      	ldr	r2, [r7, #4]
 800227a:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8002284:	3301      	adds	r3, #1
 8002286:	b2da      	uxtb	r2, r3
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 800228e:	68bb      	ldr	r3, [r7, #8]
 8002290:	2206      	movs	r2, #6
 8002292:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	2204      	movs	r2, #4
 800229a:	701a      	strb	r2, [r3, #0]
			break;
 800229c:	f000 bee0 	b.w	8003060 <GAME_PLAY_Phase_Management+0x17cc>
					state_game->action = 4;
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2204      	movs	r2, #4
 80022a4:	701a      	strb	r2, [r3, #0]
			break;
 80022a6:	f000 bedb 	b.w	8003060 <GAME_PLAY_Phase_Management+0x17cc>
		case chaining_main_ATK:
			ST7735_WriteStringNSS(5, 90, "Do you want to chain card ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	781a      	ldrb	r2, [r3, #0]
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <GAME_PLAY_Phase_Management+0xb3c>)
 80022b0:	9203      	str	r2, [sp, #12]
 80022b2:	2200      	movs	r2, #0
 80022b4:	9202      	str	r2, [sp, #8]
 80022b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022ba:	9201      	str	r2, [sp, #4]
 80022bc:	685a      	ldr	r2, [r3, #4]
 80022be:	9200      	str	r2, [sp, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a45      	ldr	r2, [pc, #276]	; (80023d8 <GAME_PLAY_Phase_Management+0xb44>)
 80022c4:	215a      	movs	r1, #90	; 0x5a
 80022c6:	2005      	movs	r0, #5
 80022c8:	f003 f919 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Waiting Opponent Action", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	4b3f      	ldr	r3, [pc, #252]	; (80023d0 <GAME_PLAY_Phase_Management+0xb3c>)
 80022d2:	9203      	str	r2, [sp, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	9202      	str	r2, [sp, #8]
 80022d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022dc:	9201      	str	r2, [sp, #4]
 80022de:	685a      	ldr	r2, [r3, #4]
 80022e0:	9200      	str	r2, [sp, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a3b      	ldr	r2, [pc, #236]	; (80023d4 <GAME_PLAY_Phase_Management+0xb40>)
 80022e6:	215a      	movs	r1, #90	; 0x5a
 80022e8:	2005      	movs	r0, #5
 80022ea:	f003 f908 	bl	80054fe <ST7735_WriteStringNSS>
			if(state_game->action == 4)
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	2b04      	cmp	r3, #4
 80022f4:	d128      	bne.n	8002348 <GAME_PLAY_Phase_Management+0xab4>
			{
				Player_Reading_Card(RFIDmain,state_game,playerAtk);
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	68b9      	ldr	r1, [r7, #8]
 80022fa:	68f8      	ldr	r0, [r7, #12]
 80022fc:	f7fe fa2a 	bl	8000754 <Player_Reading_Card>
				if (playerAtk->noBTN == GPIO_PIN_RESET){
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	789b      	ldrb	r3, [r3, #2]
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 86ae 	bne.w	8003066 <GAME_PLAY_Phase_Management+0x17d2>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	9301      	str	r3, [sp, #4]
 8002310:	2300      	movs	r3, #0
 8002312:	9300      	str	r3, [sp, #0]
 8002314:	2326      	movs	r3, #38	; 0x26
 8002316:	2280      	movs	r2, #128	; 0x80
 8002318:	215a      	movs	r1, #90	; 0x5a
 800231a:	2000      	movs	r0, #0
 800231c:	f003 fa38 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	781b      	ldrb	r3, [r3, #0]
 8002324:	9301      	str	r3, [sp, #4]
 8002326:	2300      	movs	r3, #0
 8002328:	9300      	str	r3, [sp, #0]
 800232a:	2326      	movs	r3, #38	; 0x26
 800232c:	2280      	movs	r2, #128	; 0x80
 800232e:	215a      	movs	r1, #90	; 0x5a
 8002330:	2000      	movs	r0, #0
 8002332:	f003 fa2d 	bl	8005790 <ST7735_FillRectangleNSS>
					state_game->PlyerAction_Main_Substate = activate_effect;
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2205      	movs	r2, #5
 800233a:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->count_chain = 0;
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	2200      	movs	r2, #0
 8002342:	705a      	strb	r2, [r3, #1]
				{
					//display this is not trap card
					state_game->action = 4;
				}
			}
			break;
 8002344:	f000 be8f 	b.w	8003066 <GAME_PLAY_Phase_Management+0x17d2>
			else if ((state_game->action == 5 )){
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b05      	cmp	r3, #5
 800234e:	f040 868a 	bne.w	8003066 <GAME_PLAY_Phase_Management+0x17d2>
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002358:	62bb      	str	r3, [r7, #40]	; 0x28
				uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 800235a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f001 fe81 	bl	8004064 <YUGIOH_Check_Trap_On_board>
 8002362:	4603      	mov	r3, r0
 8002364:	75fb      	strb	r3, [r7, #23]
				if (idx != 255)
 8002366:	7dfb      	ldrb	r3, [r7, #23]
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	d02b      	beq.n	80023c4 <GAME_PLAY_Phase_Management+0xb30>
					YUGIOH_card_Buffer_Update_Chain(state_game);
 800236c:	68b8      	ldr	r0, [r7, #8]
 800236e:	f7fe fee4 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[idx];
 8002372:	7dfb      	ldrb	r3, [r7, #23]
 8002374:	011b      	lsls	r3, r3, #4
 8002376:	3308      	adds	r3, #8
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	4413      	add	r3, r2
 800237c:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 800237e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002380:	2200      	movs	r2, #0
 8002382:	725a      	strb	r2, [r3, #9]
					YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800238a:	4619      	mov	r1, r3
 800238c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800238e:	f7fe f979 	bl	8000684 <YUGIOH_card_copy>
					state_game->ptrChainUser[0] = playerAtk;
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	687a      	ldr	r2, [r7, #4]
 8002396:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
					state_game->ptrChainOpponent[0] = playerDef;
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	683a      	ldr	r2, [r7, #0]
 800239e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
					state_game->ChainCount++;
 80023a2:	68bb      	ldr	r3, [r7, #8]
 80023a4:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80023a8:	3301      	adds	r3, #1
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
					state_game->PlyerAction_Main_Substate = chaining_main_ATK;
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	2206      	movs	r2, #6
 80023b6:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
					state_game->action = 4;
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	2204      	movs	r2, #4
 80023be:	701a      	strb	r2, [r3, #0]
			break;
 80023c0:	f000 be51 	b.w	8003066 <GAME_PLAY_Phase_Management+0x17d2>
					state_game->action = 4;
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	2204      	movs	r2, #4
 80023c8:	701a      	strb	r2, [r3, #0]
			break;
 80023ca:	f000 be4c 	b.w	8003066 <GAME_PLAY_Phase_Management+0x17d2>
 80023ce:	bf00      	nop
 80023d0:	2400000c 	.word	0x2400000c
 80023d4:	0800f7a8 	.word	0x0800f7a8
 80023d8:	0800f7c0 	.word	0x0800f7c0
		case activate_effect:
			ST7735_WriteStringNSS(5, 90, "You activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	781a      	ldrb	r2, [r3, #0]
 80023e0:	4b74      	ldr	r3, [pc, #464]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 80023e2:	9203      	str	r2, [sp, #12]
 80023e4:	2200      	movs	r2, #0
 80023e6:	9202      	str	r2, [sp, #8]
 80023e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80023ec:	9201      	str	r2, [sp, #4]
 80023ee:	685a      	ldr	r2, [r3, #4]
 80023f0:	9200      	str	r2, [sp, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a70      	ldr	r2, [pc, #448]	; (80025b8 <GAME_PLAY_Phase_Management+0xd24>)
 80023f6:	215a      	movs	r1, #90	; 0x5a
 80023f8:	2005      	movs	r0, #5
 80023fa:	f003 f880 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	781a      	ldrb	r2, [r3, #0]
 8002402:	4b6c      	ldr	r3, [pc, #432]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 8002404:	9203      	str	r2, [sp, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	9202      	str	r2, [sp, #8]
 800240a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800240e:	9201      	str	r2, [sp, #4]
 8002410:	685a      	ldr	r2, [r3, #4]
 8002412:	9200      	str	r2, [sp, #0]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a69      	ldr	r2, [pc, #420]	; (80025bc <GAME_PLAY_Phase_Management+0xd28>)
 8002418:	2169      	movs	r1, #105	; 0x69
 800241a:	2005      	movs	r0, #5
 800241c:	f003 f86f 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 90, "Opponent activate", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	781a      	ldrb	r2, [r3, #0]
 8002424:	4b63      	ldr	r3, [pc, #396]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 8002426:	9203      	str	r2, [sp, #12]
 8002428:	2200      	movs	r2, #0
 800242a:	9202      	str	r2, [sp, #8]
 800242c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002430:	9201      	str	r2, [sp, #4]
 8002432:	685a      	ldr	r2, [r3, #4]
 8002434:	9200      	str	r2, [sp, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a61      	ldr	r2, [pc, #388]	; (80025c0 <GAME_PLAY_Phase_Management+0xd2c>)
 800243a:	215a      	movs	r1, #90	; 0x5a
 800243c:	2005      	movs	r0, #5
 800243e:	f003 f85e 	bl	80054fe <ST7735_WriteStringNSS>
			ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b5b      	ldr	r3, [pc, #364]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 8002448:	9203      	str	r2, [sp, #12]
 800244a:	2200      	movs	r2, #0
 800244c:	9202      	str	r2, [sp, #8]
 800244e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002452:	9201      	str	r2, [sp, #4]
 8002454:	685a      	ldr	r2, [r3, #4]
 8002456:	9200      	str	r2, [sp, #0]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a58      	ldr	r2, [pc, #352]	; (80025bc <GAME_PLAY_Phase_Management+0xd28>)
 800245c:	2169      	movs	r1, #105	; 0x69
 800245e:	2005      	movs	r0, #5
 8002460:	f003 f84d 	bl	80054fe <ST7735_WriteStringNSS>
			// Current Action = 4
			ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	f503 7394 	add.w	r3, r3, #296	; 0x128
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	623b      	str	r3, [r7, #32]
			ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	785b      	ldrb	r3, [r3, #1]
 800247a:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	4413      	add	r3, r2
 8002484:	3304      	adds	r3, #4
 8002486:	61fb      	str	r3, [r7, #28]

			if(state_game->action == 4)
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b04      	cmp	r3, #4
 800248e:	f040 8211 	bne.w	80028b4 <GAME_PLAY_Phase_Management+0x1020>
			{
				// Base use to check Card Eff
				if (state_game->count_chain < state_game->ChainCount)
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	785a      	ldrb	r2, [r3, #1]
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800249c:	429a      	cmp	r2, r3
 800249e:	f080 81db 	bcs.w	8002858 <GAME_PLAY_Phase_Management+0xfc4>
				{
					state_game->test = 165;
 80024a2:	68bb      	ldr	r3, [r7, #8]
 80024a4:	22a5      	movs	r2, #165	; 0xa5
 80024a6:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

					ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	785b      	ldrb	r3, [r3, #1]
 80024ae:	3344      	adds	r3, #68	; 0x44
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	68ba      	ldr	r2, [r7, #8]
 80024b4:	4413      	add	r3, r2
 80024b6:	3304      	adds	r3, #4
 80024b8:	62bb      	str	r3, [r7, #40]	; 0x28

					if (ptrYugiohCard_src->cardSignature == 11)
 80024ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b0b      	cmp	r3, #11
 80024c0:	f040 8086 	bne.w	80025d0 <GAME_PLAY_Phase_Management+0xd3c>
					{
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(*ptrOpponent);
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f001 fc51 	bl	8003d70 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80024ce:	6a3b      	ldr	r3, [r7, #32]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fe fe7c 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	785b      	ldrb	r3, [r3, #1]
 80024de:	3301      	adds	r3, #1
 80024e0:	b2da      	uxtb	r2, r3
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 80024e6:	6a3b      	ldr	r3, [r7, #32]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	4b31      	ldr	r3, [pc, #196]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 80024ee:	9203      	str	r2, [sp, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	9202      	str	r2, [sp, #8]
 80024f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80024f8:	9201      	str	r2, [sp, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	9200      	str	r2, [sp, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a30      	ldr	r2, [pc, #192]	; (80025c4 <GAME_PLAY_Phase_Management+0xd30>)
 8002502:	215a      	movs	r1, #90	; 0x5a
 8002504:	2005      	movs	r0, #5
 8002506:	f002 fffa 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Raigeki", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 800250a:	6a3b      	ldr	r3, [r7, #32]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	781a      	ldrb	r2, [r3, #0]
 8002510:	4b28      	ldr	r3, [pc, #160]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 8002512:	9203      	str	r2, [sp, #12]
 8002514:	2200      	movs	r2, #0
 8002516:	9202      	str	r2, [sp, #8]
 8002518:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800251c:	9201      	str	r2, [sp, #4]
 800251e:	685a      	ldr	r2, [r3, #4]
 8002520:	9200      	str	r2, [sp, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <GAME_PLAY_Phase_Management+0xd34>)
 8002526:	2169      	movs	r1, #105	; 0x69
 8002528:	2005      	movs	r0, #5
 800252a:	f002 ffe8 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	4b1f      	ldr	r3, [pc, #124]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 8002536:	9203      	str	r2, [sp, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	9202      	str	r2, [sp, #8]
 800253c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002540:	9201      	str	r2, [sp, #4]
 8002542:	685a      	ldr	r2, [r3, #4]
 8002544:	9200      	str	r2, [sp, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a20      	ldr	r2, [pc, #128]	; (80025cc <GAME_PLAY_Phase_Management+0xd38>)
 800254a:	215a      	movs	r1, #90	; 0x5a
 800254c:	2005      	movs	r0, #5
 800254e:	f002 ffd6 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	781a      	ldrb	r2, [r3, #0]
 8002558:	4b16      	ldr	r3, [pc, #88]	; (80025b4 <GAME_PLAY_Phase_Management+0xd20>)
 800255a:	9203      	str	r2, [sp, #12]
 800255c:	2200      	movs	r2, #0
 800255e:	9202      	str	r2, [sp, #8]
 8002560:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002564:	9201      	str	r2, [sp, #4]
 8002566:	685a      	ldr	r2, [r3, #4]
 8002568:	9200      	str	r2, [sp, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a13      	ldr	r2, [pc, #76]	; (80025bc <GAME_PLAY_Phase_Management+0xd28>)
 800256e:	2169      	movs	r1, #105	; 0x69
 8002570:	2005      	movs	r0, #5
 8002572:	f002 ffc4 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800257a:	f003 fda1 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 800257e:	6a3b      	ldr	r3, [r7, #32]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	9301      	str	r3, [sp, #4]
 8002586:	2300      	movs	r3, #0
 8002588:	9300      	str	r3, [sp, #0]
 800258a:	2326      	movs	r3, #38	; 0x26
 800258c:	2280      	movs	r2, #128	; 0x80
 800258e:	215a      	movs	r1, #90	; 0x5a
 8002590:	2000      	movs	r0, #0
 8002592:	f003 f8fd 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	9301      	str	r3, [sp, #4]
 800259e:	2300      	movs	r3, #0
 80025a0:	9300      	str	r3, [sp, #0]
 80025a2:	2326      	movs	r3, #38	; 0x26
 80025a4:	2280      	movs	r2, #128	; 0x80
 80025a6:	215a      	movs	r1, #90	; 0x5a
 80025a8:	2000      	movs	r0, #0
 80025aa:	f003 f8f1 	bl	8005790 <ST7735_FillRectangleNSS>
					HAL_Delay(1000);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
				}
			}
			break;
 80025ae:	f000 bd5d 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
 80025b2:	bf00      	nop
 80025b4:	2400000c 	.word	0x2400000c
 80025b8:	0800f7dc 	.word	0x0800f7dc
 80025bc:	0800f7ec 	.word	0x0800f7ec
 80025c0:	0800f7fc 	.word	0x0800f7fc
 80025c4:	0800f810 	.word	0x0800f810
 80025c8:	0800f820 	.word	0x0800f820
 80025cc:	0800f828 	.word	0x0800f828
					else if (ptrYugiohCard_src->cardSignature == 12)
 80025d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	2b0c      	cmp	r3, #12
 80025d6:	d179      	bne.n	80026cc <GAME_PLAY_Phase_Management+0xe38>
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(*ptrUser,*ptrOpponent);
 80025d8:	6a3b      	ldr	r3, [r7, #32]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	4610      	mov	r0, r2
 80025e4:	f001 fbe4 	bl	8003db0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80025e8:	6a3b      	ldr	r3, [r7, #32]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7fe fdef 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	785b      	ldrb	r3, [r3, #1]
 80025f8:	3301      	adds	r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	4ba3      	ldr	r3, [pc, #652]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 8002608:	9203      	str	r2, [sp, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	9202      	str	r2, [sp, #8]
 800260e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002612:	9201      	str	r2, [sp, #4]
 8002614:	685a      	ldr	r2, [r3, #4]
 8002616:	9200      	str	r2, [sp, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a9f      	ldr	r2, [pc, #636]	; (8002898 <GAME_PLAY_Phase_Management+0x1004>)
 800261c:	215a      	movs	r1, #90	; 0x5a
 800261e:	2005      	movs	r0, #5
 8002620:	f002 ff6d 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Dark Hole", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002624:	6a3b      	ldr	r3, [r7, #32]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	781a      	ldrb	r2, [r3, #0]
 800262a:	4b9a      	ldr	r3, [pc, #616]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 800262c:	9203      	str	r2, [sp, #12]
 800262e:	2200      	movs	r2, #0
 8002630:	9202      	str	r2, [sp, #8]
 8002632:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002636:	9201      	str	r2, [sp, #4]
 8002638:	685a      	ldr	r2, [r3, #4]
 800263a:	9200      	str	r2, [sp, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a97      	ldr	r2, [pc, #604]	; (800289c <GAME_PLAY_Phase_Management+0x1008>)
 8002640:	2169      	movs	r1, #105	; 0x69
 8002642:	2005      	movs	r0, #5
 8002644:	f002 ff5b 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	4b91      	ldr	r3, [pc, #580]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 8002650:	9203      	str	r2, [sp, #12]
 8002652:	2200      	movs	r2, #0
 8002654:	9202      	str	r2, [sp, #8]
 8002656:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800265a:	9201      	str	r2, [sp, #4]
 800265c:	685a      	ldr	r2, [r3, #4]
 800265e:	9200      	str	r2, [sp, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a8f      	ldr	r2, [pc, #572]	; (80028a0 <GAME_PLAY_Phase_Management+0x100c>)
 8002664:	215a      	movs	r1, #90	; 0x5a
 8002666:	2005      	movs	r0, #5
 8002668:	f002 ff49 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	781a      	ldrb	r2, [r3, #0]
 8002672:	4b88      	ldr	r3, [pc, #544]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 8002674:	9203      	str	r2, [sp, #12]
 8002676:	2200      	movs	r2, #0
 8002678:	9202      	str	r2, [sp, #8]
 800267a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800267e:	9201      	str	r2, [sp, #4]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	9200      	str	r2, [sp, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a87      	ldr	r2, [pc, #540]	; (80028a4 <GAME_PLAY_Phase_Management+0x1010>)
 8002688:	2169      	movs	r1, #105	; 0x69
 800268a:	2005      	movs	r0, #5
 800268c:	f002 ff37 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002694:	f003 fd14 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	2300      	movs	r3, #0
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2326      	movs	r3, #38	; 0x26
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	215a      	movs	r1, #90	; 0x5a
 80026aa:	2000      	movs	r0, #0
 80026ac:	f003 f870 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80026b0:	69fb      	ldr	r3, [r7, #28]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2300      	movs	r3, #0
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2326      	movs	r3, #38	; 0x26
 80026be:	2280      	movs	r2, #128	; 0x80
 80026c0:	215a      	movs	r1, #90	; 0x5a
 80026c2:	2000      	movs	r0, #0
 80026c4:	f003 f864 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 80026c8:	f000 bcd0 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if (ptrYugiohCard_src->cardSignature == 13)
 80026cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b0d      	cmp	r3, #13
 80026d2:	d108      	bne.n	80026e6 <GAME_PLAY_Phase_Management+0xe52>
						state_game->test = 166;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	22a6      	movs	r2, #166	; 0xa6
 80026d8:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	2205      	movs	r2, #5
 80026e0:	701a      	strb	r2, [r3, #0]
			break;
 80026e2:	f000 bcc3 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80026e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b0e      	cmp	r3, #14
 80026ec:	d003      	beq.n	80026f6 <GAME_PLAY_Phase_Management+0xe62>
 80026ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b0f      	cmp	r3, #15
 80026f4:	d17d      	bne.n	80027f2 <GAME_PLAY_Phase_Management+0xf5e>
						state_game->test = 133;
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	2285      	movs	r2, #133	; 0x85
 80026fa:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80026fe:	6a3b      	ldr	r3, [r7, #32]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f001 fc25 	bl	8003f58 <YUGIOH_Gift_of_the_Mystical_Elf>
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800270e:	6a3b      	ldr	r3, [r7, #32]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002714:	4618      	mov	r0, r3
 8002716:	f7fe fd5c 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	785b      	ldrb	r3, [r3, #1]
 800271e:	3301      	adds	r3, #1
 8002720:	b2da      	uxtb	r2, r3
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Act:Gift of the", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002726:	6a3b      	ldr	r3, [r7, #32]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	781a      	ldrb	r2, [r3, #0]
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 800272e:	9203      	str	r2, [sp, #12]
 8002730:	2200      	movs	r2, #0
 8002732:	9202      	str	r2, [sp, #8]
 8002734:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002738:	9201      	str	r2, [sp, #4]
 800273a:	685a      	ldr	r2, [r3, #4]
 800273c:	9200      	str	r2, [sp, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a59      	ldr	r2, [pc, #356]	; (80028a8 <GAME_PLAY_Phase_Management+0x1014>)
 8002742:	215a      	movs	r1, #90	; 0x5a
 8002744:	2005      	movs	r0, #5
 8002746:	f002 feda 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Mystical Elf", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrUser)->displayNSS);
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	781a      	ldrb	r2, [r3, #0]
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 8002752:	9203      	str	r2, [sp, #12]
 8002754:	2200      	movs	r2, #0
 8002756:	9202      	str	r2, [sp, #8]
 8002758:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800275c:	9201      	str	r2, [sp, #4]
 800275e:	685a      	ldr	r2, [r3, #4]
 8002760:	9200      	str	r2, [sp, #0]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a51      	ldr	r2, [pc, #324]	; (80028ac <GAME_PLAY_Phase_Management+0x1018>)
 8002766:	2169      	movs	r1, #105	; 0x69
 8002768:	2005      	movs	r0, #5
 800276a:	f002 fec8 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	781a      	ldrb	r2, [r3, #0]
 8002774:	4b47      	ldr	r3, [pc, #284]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 8002776:	9203      	str	r2, [sp, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	9202      	str	r2, [sp, #8]
 800277c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002780:	9201      	str	r2, [sp, #4]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	9200      	str	r2, [sp, #0]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a45      	ldr	r2, [pc, #276]	; (80028a0 <GAME_PLAY_Phase_Management+0x100c>)
 800278a:	215a      	movs	r1, #90	; 0x5a
 800278c:	2005      	movs	r0, #5
 800278e:	f002 feb6 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a trap card", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	781a      	ldrb	r2, [r3, #0]
 8002798:	4b3e      	ldr	r3, [pc, #248]	; (8002894 <GAME_PLAY_Phase_Management+0x1000>)
 800279a:	9203      	str	r2, [sp, #12]
 800279c:	2200      	movs	r2, #0
 800279e:	9202      	str	r2, [sp, #8]
 80027a0:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80027a4:	9201      	str	r2, [sp, #4]
 80027a6:	685a      	ldr	r2, [r3, #4]
 80027a8:	9200      	str	r2, [sp, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a40      	ldr	r2, [pc, #256]	; (80028b0 <GAME_PLAY_Phase_Management+0x101c>)
 80027ae:	2169      	movs	r1, #105	; 0x69
 80027b0:	2005      	movs	r0, #5
 80027b2:	f002 fea4 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 80027b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80027ba:	f003 fc81 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2300      	movs	r3, #0
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	2326      	movs	r3, #38	; 0x26
 80027cc:	2280      	movs	r2, #128	; 0x80
 80027ce:	215a      	movs	r1, #90	; 0x5a
 80027d0:	2000      	movs	r0, #0
 80027d2:	f002 ffdd 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	9301      	str	r3, [sp, #4]
 80027de:	2300      	movs	r3, #0
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	2326      	movs	r3, #38	; 0x26
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	215a      	movs	r1, #90	; 0x5a
 80027e8:	2000      	movs	r0, #0
 80027ea:	f002 ffd1 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 80027ee:	f000 bc3d 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if(ptrYugiohCard_src->cardSignature == 16)
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b10      	cmp	r3, #16
 80027f8:	d108      	bne.n	800280c <GAME_PLAY_Phase_Management+0xf78>
						state_game->test = 124;
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	227c      	movs	r2, #124	; 0x7c
 80027fe:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 5;
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	2205      	movs	r2, #5
 8002806:	701a      	strb	r2, [r3, #0]
			break;
 8002808:	f000 bc30 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if(ptrYugiohCard_src->cardSignature == 17)
 800280c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	2b11      	cmp	r3, #17
 8002812:	d104      	bne.n	800281e <GAME_PLAY_Phase_Management+0xf8a>
						state_game->action = 5;
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	2205      	movs	r2, #5
 8002818:	701a      	strb	r2, [r3, #0]
			break;
 800281a:	f000 bc27 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if((ptrYugiohCard_src->cardSignature == 18)||(ptrYugiohCard_src->cardSignature == 19))
 800281e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	2b12      	cmp	r3, #18
 8002824:	d004      	beq.n	8002830 <GAME_PLAY_Phase_Management+0xf9c>
 8002826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b13      	cmp	r3, #19
 800282c:	f040 841e 	bne.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
						if ((*ptrUser)->yesBTN == GPIO_PIN_RESET){
 8002830:	6a3b      	ldr	r3, [r7, #32]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	785b      	ldrb	r3, [r3, #1]
 8002836:	2b00      	cmp	r3, #0
 8002838:	f040 8418 	bne.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 800283c:	6a3b      	ldr	r3, [r7, #32]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fcc5 	bl	80011d2 <YUGIOH_To_GY>
							state_game->count_chain++;
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	785b      	ldrb	r3, [r3, #1]
 800284c:	3301      	adds	r3, #1
 800284e:	b2da      	uxtb	r2, r3
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	705a      	strb	r2, [r3, #1]
			break;
 8002854:	f000 bc0a 	b.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	9301      	str	r3, [sp, #4]
 800285e:	2300      	movs	r3, #0
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	2326      	movs	r3, #38	; 0x26
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	215a      	movs	r1, #90	; 0x5a
 8002868:	2000      	movs	r0, #0
 800286a:	f002 ff91 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	9301      	str	r3, [sp, #4]
 8002874:	2300      	movs	r3, #0
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2326      	movs	r3, #38	; 0x26
 800287a:	2280      	movs	r2, #128	; 0x80
 800287c:	215a      	movs	r1, #90	; 0x5a
 800287e:	2000      	movs	r0, #0
 8002880:	f002 ff86 	bl	8005790 <ST7735_FillRectangleNSS>
					state_game->action = 0;
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	2200      	movs	r2, #0
 8002888:	701a      	strb	r2, [r3, #0]
					state_game->PlyerAction_Main_Substate = PMS_ActionAwait;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
			break;
 8002892:	e3eb      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
 8002894:	2400000c 	.word	0x2400000c
 8002898:	0800f810 	.word	0x0800f810
 800289c:	0800f838 	.word	0x0800f838
 80028a0:	0800f828 	.word	0x0800f828
 80028a4:	0800f7ec 	.word	0x0800f7ec
 80028a8:	0800f844 	.word	0x0800f844
 80028ac:	0800f854 	.word	0x0800f854
 80028b0:	0800f864 	.word	0x0800f864
			else if (state_game->action == 5)
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b05      	cmp	r3, #5
 80028ba:	d156      	bne.n	800296a <GAME_PLAY_Phase_Management+0x10d6>
				state_game->test = 167;
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	22a7      	movs	r2, #167	; 0xa7
 80028c0:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	785b      	ldrb	r3, [r3, #1]
 80028c8:	3344      	adds	r3, #68	; 0x44
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	68ba      	ldr	r2, [r7, #8]
 80028ce:	4413      	add	r3, r2
 80028d0:	3304      	adds	r3, #4
 80028d2:	62bb      	str	r3, [r7, #40]	; 0x28
				if((*ptrUser)->noBTN == GPIO_PIN_RESET)
 80028d4:	6a3b      	ldr	r3, [r7, #32]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	789b      	ldrb	r3, [r3, #2]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d119      	bne.n	8002912 <GAME_PLAY_Phase_Management+0x107e>
					YUGIOH_Clear_Card_Bufffer_Player(*ptrUser);
 80028de:	6a3b      	ldr	r3, [r7, #32]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	4618      	mov	r0, r3
 80028e4:	f7fe fb7e 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&(*ptrUser)->ActtionBuffer[0],&(*ptrUser)->CardInPlayed);
 80028e8:	6a3b      	ldr	r3, [r7, #32]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f503 72d4 	add.w	r2, r3, #424	; 0x1a8
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80028f8:	4619      	mov	r1, r3
 80028fa:	4610      	mov	r0, r2
 80028fc:	f7fd fec2 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 4;
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	2204      	movs	r2, #4
 8002904:	701a      	strb	r2, [r3, #0]
					state_game->count_chain++;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	785b      	ldrb	r3, [r3, #1]
 800290a:	3301      	adds	r3, #1
 800290c:	b2da      	uxtb	r2, r3
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	705a      	strb	r2, [r3, #1]
				if (ptrYugiohCard_src->cardSignature == 13)
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b0d      	cmp	r3, #13
 8002918:	d107      	bne.n	800292a <GAME_PLAY_Phase_Management+0x1096>
					Player_Reading_Card_Reborn(RFIDmain, state_game, *ptrUser);
 800291a:	6a3b      	ldr	r3, [r7, #32]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	461a      	mov	r2, r3
 8002920:	68b9      	ldr	r1, [r7, #8]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f7fe f8c8 	bl	8000ab8 <Player_Reading_Card_Reborn>
			break;
 8002928:	e3a0      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
				else if(ptrYugiohCard_src->cardSignature == 16){
 800292a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b10      	cmp	r3, #16
 8002930:	d107      	bne.n	8002942 <GAME_PLAY_Phase_Management+0x10ae>
					Player_Reading_Card_Ancient_Rule(RFIDmain, state_game, *ptrUser);
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	461a      	mov	r2, r3
 8002938:	68b9      	ldr	r1, [r7, #8]
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	f7fe f96a 	bl	8000c14 <Player_Reading_Card_Ancient_Rule>
			break;
 8002940:	e394      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
				else if (ptrYugiohCard_src->cardSignature == 17)
 8002942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002944:	781b      	ldrb	r3, [r3, #0]
 8002946:	2b11      	cmp	r3, #17
 8002948:	d107      	bne.n	800295a <GAME_PLAY_Phase_Management+0x10c6>
					Player_Reading_Card_Stopdef(RFIDmain, state_game, *ptrOpponent);
 800294a:	69fb      	ldr	r3, [r7, #28]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	461a      	mov	r2, r3
 8002950:	68b9      	ldr	r1, [r7, #8]
 8002952:	68f8      	ldr	r0, [r7, #12]
 8002954:	f7fe f806 	bl	8000964 <Player_Reading_Card_Stopdef>
			break;
 8002958:	e388      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
				{	Player_Reading_Card(RFIDmain, state_game, *ptrUser);}
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	461a      	mov	r2, r3
 8002960:	68b9      	ldr	r1, [r7, #8]
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7fd fef6 	bl	8000754 <Player_Reading_Card>
			break;
 8002968:	e380      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
			else if (state_game->action == 6)
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	781b      	ldrb	r3, [r3, #0]
 800296e:	2b06      	cmp	r3, #6
 8002970:	f040 837c 	bne.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
				state_game->test = 169;
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	22a9      	movs	r2, #169	; 0xa9
 8002978:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
				ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	785b      	ldrb	r3, [r3, #1]
 8002980:	3344      	adds	r3, #68	; 0x44
 8002982:	011b      	lsls	r3, r3, #4
 8002984:	68ba      	ldr	r2, [r7, #8]
 8002986:	4413      	add	r3, r2
 8002988:	3304      	adds	r3, #4
 800298a:	62bb      	str	r3, [r7, #40]	; 0x28
				if (ptrYugiohCard_src->cardSignature == 13){
 800298c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	2b0d      	cmp	r3, #13
 8002992:	f040 815d 	bne.w	8002c50 <GAME_PLAY_Phase_Management+0x13bc>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002996:	6a3b      	ldr	r3, [r7, #32]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	781a      	ldrb	r2, [r3, #0]
 800299c:	4ba6      	ldr	r3, [pc, #664]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 800299e:	9203      	str	r2, [sp, #12]
 80029a0:	2200      	movs	r2, #0
 80029a2:	9202      	str	r2, [sp, #8]
 80029a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80029a8:	9201      	str	r2, [sp, #4]
 80029aa:	685a      	ldr	r2, [r3, #4]
 80029ac:	9200      	str	r2, [sp, #0]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4aa2      	ldr	r2, [pc, #648]	; (8002c3c <GAME_PLAY_Phase_Management+0x13a8>)
 80029b2:	215a      	movs	r1, #90	; 0x5a
 80029b4:	2005      	movs	r0, #5
 80029b6:	f002 fda2 	bl	80054fe <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	789b      	ldrb	r3, [r3, #2]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	f040 8099 	bne.w	8002af8 <GAME_PLAY_Phase_Management+0x1264>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	9301      	str	r3, [sp, #4]
 80029ce:	2300      	movs	r3, #0
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2326      	movs	r3, #38	; 0x26
 80029d4:	2280      	movs	r2, #128	; 0x80
 80029d6:	215a      	movs	r1, #90	; 0x5a
 80029d8:	2000      	movs	r0, #0
 80029da:	f002 fed9 	bl	8005790 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	22aa      	movs	r2, #170	; 0xaa
 80029e2:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 80029e6:	6a3b      	ldr	r3, [r7, #32]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80029ee:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 0;
 80029f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029f2:	2200      	movs	r2, #0
 80029f4:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 80029f6:	6a3b      	ldr	r3, [r7, #32]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80029fe:	4619      	mov	r1, r3
 8002a00:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002a02:	f7fd fe3f 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8002a06:	6a3b      	ldr	r3, [r7, #32]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f001 fa0e 	bl	8003e2c <YUGIOH_Reborn>
						state_game->action = 4;
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2204      	movs	r2, #4
 8002a14:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fbd8 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	3301      	adds	r3, #1
 8002a28:	b2da      	uxtb	r2, r3
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002a2e:	6a3b      	ldr	r3, [r7, #32]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	781a      	ldrb	r2, [r3, #0]
 8002a34:	4b80      	ldr	r3, [pc, #512]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002a36:	9203      	str	r2, [sp, #12]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	9202      	str	r2, [sp, #8]
 8002a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a40:	9201      	str	r2, [sp, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	9200      	str	r2, [sp, #0]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a7d      	ldr	r2, [pc, #500]	; (8002c40 <GAME_PLAY_Phase_Management+0x13ac>)
 8002a4a:	215a      	movs	r1, #90	; 0x5a
 8002a4c:	2005      	movs	r0, #5
 8002a4e:	f002 fd56 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002a52:	6a3b      	ldr	r3, [r7, #32]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	781a      	ldrb	r2, [r3, #0]
 8002a58:	4b77      	ldr	r3, [pc, #476]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002a5a:	9203      	str	r2, [sp, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	9202      	str	r2, [sp, #8]
 8002a60:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002a64:	9201      	str	r2, [sp, #4]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	9200      	str	r2, [sp, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a75      	ldr	r2, [pc, #468]	; (8002c44 <GAME_PLAY_Phase_Management+0x13b0>)
 8002a6e:	2169      	movs	r1, #105	; 0x69
 8002a70:	2005      	movs	r0, #5
 8002a72:	f002 fd44 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	781a      	ldrb	r2, [r3, #0]
 8002a7c:	4b6e      	ldr	r3, [pc, #440]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002a7e:	9203      	str	r2, [sp, #12]
 8002a80:	2200      	movs	r2, #0
 8002a82:	9202      	str	r2, [sp, #8]
 8002a84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002a88:	9201      	str	r2, [sp, #4]
 8002a8a:	685a      	ldr	r2, [r3, #4]
 8002a8c:	9200      	str	r2, [sp, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6d      	ldr	r2, [pc, #436]	; (8002c48 <GAME_PLAY_Phase_Management+0x13b4>)
 8002a92:	215a      	movs	r1, #90	; 0x5a
 8002a94:	2005      	movs	r0, #5
 8002a96:	f002 fd32 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	781a      	ldrb	r2, [r3, #0]
 8002aa0:	4b65      	ldr	r3, [pc, #404]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002aa2:	9203      	str	r2, [sp, #12]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	9202      	str	r2, [sp, #8]
 8002aa8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002aac:	9201      	str	r2, [sp, #4]
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	9200      	str	r2, [sp, #0]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a65      	ldr	r2, [pc, #404]	; (8002c4c <GAME_PLAY_Phase_Management+0x13b8>)
 8002ab6:	2169      	movs	r1, #105	; 0x69
 8002ab8:	2005      	movs	r0, #5
 8002aba:	f002 fd20 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002abe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ac2:	f003 fafd 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002ac6:	6a3b      	ldr	r3, [r7, #32]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	781b      	ldrb	r3, [r3, #0]
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2300      	movs	r3, #0
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2326      	movs	r3, #38	; 0x26
 8002ad4:	2280      	movs	r2, #128	; 0x80
 8002ad6:	215a      	movs	r1, #90	; 0x5a
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f002 fe59 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	9301      	str	r3, [sp, #4]
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	9300      	str	r3, [sp, #0]
 8002aea:	2326      	movs	r3, #38	; 0x26
 8002aec:	2280      	movs	r2, #128	; 0x80
 8002aee:	215a      	movs	r1, #90	; 0x5a
 8002af0:	2000      	movs	r0, #0
 8002af2:	f002 fe4d 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 8002af6:	e2b9      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	785b      	ldrb	r3, [r3, #1]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 82b4 	bne.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002b04:	6a3b      	ldr	r3, [r7, #32]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	781b      	ldrb	r3, [r3, #0]
 8002b0a:	9301      	str	r3, [sp, #4]
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	9300      	str	r3, [sp, #0]
 8002b10:	2326      	movs	r3, #38	; 0x26
 8002b12:	2280      	movs	r2, #128	; 0x80
 8002b14:	215a      	movs	r1, #90	; 0x5a
 8002b16:	2000      	movs	r0, #0
 8002b18:	f002 fe3a 	bl	8005790 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	22ab      	movs	r2, #171	; 0xab
 8002b20:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8002b24:	6a3b      	ldr	r3, [r7, #32]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002b2c:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 1;
 8002b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b30:	2201      	movs	r2, #1
 8002b32:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8002b34:	6a3b      	ldr	r3, [r7, #32]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002b40:	f7fd fda0 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Reborn(*ptrUser);
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4618      	mov	r0, r3
 8002b4a:	f001 f96f 	bl	8003e2c <YUGIOH_Reborn>
						state_game->action = 4;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2204      	movs	r2, #4
 8002b52:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002b54:	6a3b      	ldr	r3, [r7, #32]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fb39 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	785b      	ldrb	r3, [r3, #1]
 8002b64:	3301      	adds	r3, #1
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002b6c:	6a3b      	ldr	r3, [r7, #32]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	781a      	ldrb	r2, [r3, #0]
 8002b72:	4b31      	ldr	r3, [pc, #196]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002b74:	9203      	str	r2, [sp, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	9202      	str	r2, [sp, #8]
 8002b7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b7e:	9201      	str	r2, [sp, #4]
 8002b80:	685a      	ldr	r2, [r3, #4]
 8002b82:	9200      	str	r2, [sp, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a2e      	ldr	r2, [pc, #184]	; (8002c40 <GAME_PLAY_Phase_Management+0x13ac>)
 8002b88:	215a      	movs	r1, #90	; 0x5a
 8002b8a:	2005      	movs	r0, #5
 8002b8c:	f002 fcb7 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002b90:	6a3b      	ldr	r3, [r7, #32]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	781a      	ldrb	r2, [r3, #0]
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002b98:	9203      	str	r2, [sp, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	9202      	str	r2, [sp, #8]
 8002b9e:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ba2:	9201      	str	r2, [sp, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	9200      	str	r2, [sp, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a26      	ldr	r2, [pc, #152]	; (8002c44 <GAME_PLAY_Phase_Management+0x13b0>)
 8002bac:	2169      	movs	r1, #105	; 0x69
 8002bae:	2005      	movs	r0, #5
 8002bb0:	f002 fca5 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	781a      	ldrb	r2, [r3, #0]
 8002bba:	4b1f      	ldr	r3, [pc, #124]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002bbc:	9203      	str	r2, [sp, #12]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	9202      	str	r2, [sp, #8]
 8002bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bc6:	9201      	str	r2, [sp, #4]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	9200      	str	r2, [sp, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a1e      	ldr	r2, [pc, #120]	; (8002c48 <GAME_PLAY_Phase_Management+0x13b4>)
 8002bd0:	215a      	movs	r1, #90	; 0x5a
 8002bd2:	2005      	movs	r0, #5
 8002bd4:	f002 fc93 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002bd8:	69fb      	ldr	r3, [r7, #28]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	4b16      	ldr	r3, [pc, #88]	; (8002c38 <GAME_PLAY_Phase_Management+0x13a4>)
 8002be0:	9203      	str	r2, [sp, #12]
 8002be2:	2200      	movs	r2, #0
 8002be4:	9202      	str	r2, [sp, #8]
 8002be6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002bea:	9201      	str	r2, [sp, #4]
 8002bec:	685a      	ldr	r2, [r3, #4]
 8002bee:	9200      	str	r2, [sp, #0]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a16      	ldr	r2, [pc, #88]	; (8002c4c <GAME_PLAY_Phase_Management+0x13b8>)
 8002bf4:	2169      	movs	r1, #105	; 0x69
 8002bf6:	2005      	movs	r0, #5
 8002bf8:	f002 fc81 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002bfc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c00:	f003 fa5e 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002c04:	6a3b      	ldr	r3, [r7, #32]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	9301      	str	r3, [sp, #4]
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	9300      	str	r3, [sp, #0]
 8002c10:	2326      	movs	r3, #38	; 0x26
 8002c12:	2280      	movs	r2, #128	; 0x80
 8002c14:	215a      	movs	r1, #90	; 0x5a
 8002c16:	2000      	movs	r0, #0
 8002c18:	f002 fdba 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2300      	movs	r3, #0
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2326      	movs	r3, #38	; 0x26
 8002c2a:	2280      	movs	r2, #128	; 0x80
 8002c2c:	215a      	movs	r1, #90	; 0x5a
 8002c2e:	2000      	movs	r0, #0
 8002c30:	f002 fdae 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 8002c34:	e21a      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
 8002c36:	bf00      	nop
 8002c38:	2400000c 	.word	0x2400000c
 8002c3c:	0800f71c 	.word	0x0800f71c
 8002c40:	0800f810 	.word	0x0800f810
 8002c44:	0800f870 	.word	0x0800f870
 8002c48:	0800f828 	.word	0x0800f828
 8002c4c:	0800f7ec 	.word	0x0800f7ec
				else if(ptrYugiohCard_src->cardSignature == 16){
 8002c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b10      	cmp	r3, #16
 8002c56:	f040 8169 	bne.w	8002f2c <GAME_PLAY_Phase_Management+0x1698>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	9301      	str	r3, [sp, #4]
 8002c62:	2300      	movs	r3, #0
 8002c64:	9300      	str	r3, [sp, #0]
 8002c66:	2326      	movs	r3, #38	; 0x26
 8002c68:	2280      	movs	r2, #128	; 0x80
 8002c6a:	215a      	movs	r1, #90	; 0x5a
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f002 fd8f 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "select position", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002c72:	6a3b      	ldr	r3, [r7, #32]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	4ba6      	ldr	r3, [pc, #664]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002c7a:	9203      	str	r2, [sp, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	9202      	str	r2, [sp, #8]
 8002c80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c84:	9201      	str	r2, [sp, #4]
 8002c86:	685a      	ldr	r2, [r3, #4]
 8002c88:	9200      	str	r2, [sp, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4aa2      	ldr	r2, [pc, #648]	; (8002f18 <GAME_PLAY_Phase_Management+0x1684>)
 8002c8e:	215a      	movs	r1, #90	; 0x5a
 8002c90:	2005      	movs	r0, #5
 8002c92:	f002 fc34 	bl	80054fe <ST7735_WriteStringNSS>
					if ((*ptrUser)->noBTN == GPIO_PIN_RESET){
 8002c96:	6a3b      	ldr	r3, [r7, #32]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	789b      	ldrb	r3, [r3, #2]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f040 8099 	bne.w	8002dd4 <GAME_PLAY_Phase_Management+0x1540>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002ca2:	6a3b      	ldr	r3, [r7, #32]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	9301      	str	r3, [sp, #4]
 8002caa:	2300      	movs	r3, #0
 8002cac:	9300      	str	r3, [sp, #0]
 8002cae:	2326      	movs	r3, #38	; 0x26
 8002cb0:	2280      	movs	r2, #128	; 0x80
 8002cb2:	215a      	movs	r1, #90	; 0x5a
 8002cb4:	2000      	movs	r0, #0
 8002cb6:	f002 fd6b 	bl	8005790 <ST7735_FillRectangleNSS>
						state_game->test = 170;
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	22aa      	movs	r2, #170	; 0xaa
 8002cbe:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8002cc2:	6a3b      	ldr	r3, [r7, #32]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002cca:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 0;
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	2200      	movs	r2, #0
 8002cd0:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8002cd2:	6a3b      	ldr	r3, [r7, #32]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002cde:	f7fd fcd1 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f001 f90a 	bl	8003f00 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2204      	movs	r2, #4
 8002cf0:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002cf2:	6a3b      	ldr	r3, [r7, #32]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f7fe fa6a 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	785b      	ldrb	r3, [r3, #1]
 8002d02:	3301      	adds	r3, #1
 8002d04:	b2da      	uxtb	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	781a      	ldrb	r2, [r3, #0]
 8002d10:	4b80      	ldr	r3, [pc, #512]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002d12:	9203      	str	r2, [sp, #12]
 8002d14:	2200      	movs	r2, #0
 8002d16:	9202      	str	r2, [sp, #8]
 8002d18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d1c:	9201      	str	r2, [sp, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	9200      	str	r2, [sp, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a7d      	ldr	r2, [pc, #500]	; (8002f1c <GAME_PLAY_Phase_Management+0x1688>)
 8002d26:	215a      	movs	r1, #90	; 0x5a
 8002d28:	2005      	movs	r0, #5
 8002d2a:	f002 fbe8 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002d2e:	6a3b      	ldr	r3, [r7, #32]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	781a      	ldrb	r2, [r3, #0]
 8002d34:	4b77      	ldr	r3, [pc, #476]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002d36:	9203      	str	r2, [sp, #12]
 8002d38:	2200      	movs	r2, #0
 8002d3a:	9202      	str	r2, [sp, #8]
 8002d3c:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d40:	9201      	str	r2, [sp, #4]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	9200      	str	r2, [sp, #0]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a75      	ldr	r2, [pc, #468]	; (8002f20 <GAME_PLAY_Phase_Management+0x168c>)
 8002d4a:	2169      	movs	r1, #105	; 0x69
 8002d4c:	2005      	movs	r0, #5
 8002d4e:	f002 fbd6 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	781a      	ldrb	r2, [r3, #0]
 8002d58:	4b6e      	ldr	r3, [pc, #440]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002d5a:	9203      	str	r2, [sp, #12]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	9202      	str	r2, [sp, #8]
 8002d60:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d64:	9201      	str	r2, [sp, #4]
 8002d66:	685a      	ldr	r2, [r3, #4]
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a6d      	ldr	r2, [pc, #436]	; (8002f24 <GAME_PLAY_Phase_Management+0x1690>)
 8002d6e:	215a      	movs	r1, #90	; 0x5a
 8002d70:	2005      	movs	r0, #5
 8002d72:	f002 fbc4 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	781a      	ldrb	r2, [r3, #0]
 8002d7c:	4b65      	ldr	r3, [pc, #404]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002d7e:	9203      	str	r2, [sp, #12]
 8002d80:	2200      	movs	r2, #0
 8002d82:	9202      	str	r2, [sp, #8]
 8002d84:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002d88:	9201      	str	r2, [sp, #4]
 8002d8a:	685a      	ldr	r2, [r3, #4]
 8002d8c:	9200      	str	r2, [sp, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a65      	ldr	r2, [pc, #404]	; (8002f28 <GAME_PLAY_Phase_Management+0x1694>)
 8002d92:	2169      	movs	r1, #105	; 0x69
 8002d94:	2005      	movs	r0, #5
 8002d96:	f002 fbb2 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002d9a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d9e:	f003 f98f 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002da2:	6a3b      	ldr	r3, [r7, #32]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2300      	movs	r3, #0
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2326      	movs	r3, #38	; 0x26
 8002db0:	2280      	movs	r2, #128	; 0x80
 8002db2:	215a      	movs	r1, #90	; 0x5a
 8002db4:	2000      	movs	r0, #0
 8002db6:	f002 fceb 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	9301      	str	r3, [sp, #4]
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	2326      	movs	r3, #38	; 0x26
 8002dc8:	2280      	movs	r2, #128	; 0x80
 8002dca:	215a      	movs	r1, #90	; 0x5a
 8002dcc:	2000      	movs	r0, #0
 8002dce:	f002 fcdf 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 8002dd2:	e14b      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
					else if ((*ptrUser)->yesBTN == GPIO_PIN_RESET)
 8002dd4:	6a3b      	ldr	r3, [r7, #32]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	785b      	ldrb	r3, [r3, #1]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f040 8146 	bne.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002de0:	6a3b      	ldr	r3, [r7, #32]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	9301      	str	r3, [sp, #4]
 8002de8:	2300      	movs	r3, #0
 8002dea:	9300      	str	r3, [sp, #0]
 8002dec:	2326      	movs	r3, #38	; 0x26
 8002dee:	2280      	movs	r2, #128	; 0x80
 8002df0:	215a      	movs	r1, #90	; 0x5a
 8002df2:	2000      	movs	r0, #0
 8002df4:	f002 fccc 	bl	8005790 <ST7735_FillRectangleNSS>
						state_game->test = 171;
 8002df8:	68bb      	ldr	r3, [r7, #8]
 8002dfa:	22ab      	movs	r2, #171	; 0xab
 8002dfc:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						ptrYugiohCard_dst = &(*ptrUser)->ActtionBuffer[0];
 8002e00:	6a3b      	ldr	r3, [r7, #32]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002e08:	637b      	str	r3, [r7, #52]	; 0x34
						ptrYugiohCard_dst->cardState = 1;
 8002e0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	709a      	strb	r2, [r3, #2]
						YUGIOH_card_copy(ptrYugiohCard_dst, &(*ptrUser)->CardInPlayed);
 8002e10:	6a3b      	ldr	r3, [r7, #32]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002e18:	4619      	mov	r1, r3
 8002e1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002e1c:	f7fd fc32 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Ancient_Rules(*ptrUser);
 8002e20:	6a3b      	ldr	r3, [r7, #32]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f001 f86b 	bl	8003f00 <YUGIOH_Ancient_Rules>
						state_game->action = 4;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	2204      	movs	r2, #4
 8002e2e:	701a      	strb	r2, [r3, #0]
						YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f9cb 	bl	80011d2 <YUGIOH_To_GY>
						state_game->count_chain++;
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	785b      	ldrb	r3, [r3, #1]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	705a      	strb	r2, [r3, #1]
						ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002e48:	6a3b      	ldr	r3, [r7, #32]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	781a      	ldrb	r2, [r3, #0]
 8002e4e:	4b31      	ldr	r3, [pc, #196]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002e50:	9203      	str	r2, [sp, #12]
 8002e52:	2200      	movs	r2, #0
 8002e54:	9202      	str	r2, [sp, #8]
 8002e56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e5a:	9201      	str	r2, [sp, #4]
 8002e5c:	685a      	ldr	r2, [r3, #4]
 8002e5e:	9200      	str	r2, [sp, #0]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <GAME_PLAY_Phase_Management+0x1688>)
 8002e64:	215a      	movs	r1, #90	; 0x5a
 8002e66:	2005      	movs	r0, #5
 8002e68:	f002 fb49 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "Monster reborn", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002e6c:	6a3b      	ldr	r3, [r7, #32]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	781a      	ldrb	r2, [r3, #0]
 8002e72:	4b28      	ldr	r3, [pc, #160]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002e74:	9203      	str	r2, [sp, #12]
 8002e76:	2200      	movs	r2, #0
 8002e78:	9202      	str	r2, [sp, #8]
 8002e7a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002e7e:	9201      	str	r2, [sp, #4]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	9200      	str	r2, [sp, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a26      	ldr	r2, [pc, #152]	; (8002f20 <GAME_PLAY_Phase_Management+0x168c>)
 8002e88:	2169      	movs	r1, #105	; 0x69
 8002e8a:	2005      	movs	r0, #5
 8002e8c:	f002 fb37 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b1f      	ldr	r3, [pc, #124]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002e98:	9203      	str	r2, [sp, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	9202      	str	r2, [sp, #8]
 8002e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ea2:	9201      	str	r2, [sp, #4]
 8002ea4:	685a      	ldr	r2, [r3, #4]
 8002ea6:	9200      	str	r2, [sp, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1e      	ldr	r2, [pc, #120]	; (8002f24 <GAME_PLAY_Phase_Management+0x1690>)
 8002eac:	215a      	movs	r1, #90	; 0x5a
 8002eae:	2005      	movs	r0, #5
 8002eb0:	f002 fb25 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	781a      	ldrb	r2, [r3, #0]
 8002eba:	4b16      	ldr	r3, [pc, #88]	; (8002f14 <GAME_PLAY_Phase_Management+0x1680>)
 8002ebc:	9203      	str	r2, [sp, #12]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	9202      	str	r2, [sp, #8]
 8002ec2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ec6:	9201      	str	r2, [sp, #4]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	9200      	str	r2, [sp, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a16      	ldr	r2, [pc, #88]	; (8002f28 <GAME_PLAY_Phase_Management+0x1694>)
 8002ed0:	2169      	movs	r1, #105	; 0x69
 8002ed2:	2005      	movs	r0, #5
 8002ed4:	f002 fb13 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(1000);
 8002ed8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002edc:	f003 f8f0 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002ee0:	6a3b      	ldr	r3, [r7, #32]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	9301      	str	r3, [sp, #4]
 8002ee8:	2300      	movs	r3, #0
 8002eea:	9300      	str	r3, [sp, #0]
 8002eec:	2326      	movs	r3, #38	; 0x26
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	215a      	movs	r1, #90	; 0x5a
 8002ef2:	2000      	movs	r0, #0
 8002ef4:	f002 fc4c 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	9301      	str	r3, [sp, #4]
 8002f00:	2300      	movs	r3, #0
 8002f02:	9300      	str	r3, [sp, #0]
 8002f04:	2326      	movs	r3, #38	; 0x26
 8002f06:	2280      	movs	r2, #128	; 0x80
 8002f08:	215a      	movs	r1, #90	; 0x5a
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	f002 fc40 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 8002f10:	e0ac      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
 8002f12:	bf00      	nop
 8002f14:	2400000c 	.word	0x2400000c
 8002f18:	0800f71c 	.word	0x0800f71c
 8002f1c:	0800f810 	.word	0x0800f810
 8002f20:	0800f870 	.word	0x0800f870
 8002f24:	0800f828 	.word	0x0800f828
 8002f28:	0800f7ec 	.word	0x0800f7ec
				else if(ptrYugiohCard_src->cardSignature == 17){
 8002f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b11      	cmp	r3, #17
 8002f32:	f040 809b 	bne.w	800306c <GAME_PLAY_Phase_Management+0x17d8>
					ptrYugiohCard_dst = &(*ptrOpponent)->ActtionBuffer[0];
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f3e:	637b      	str	r3, [r7, #52]	; 0x34
					YUGIOH_card_copy(ptrYugiohCard_dst,  &(*ptrUser)->ActtionBuffer[0]);
 8002f40:	6a3b      	ldr	r3, [r7, #32]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8002f48:	4619      	mov	r1, r3
 8002f4a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002f4c:	f7fd fb9a 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_Stop_Defense(*ptrUser,*ptrOpponent);
 8002f50:	6a3b      	ldr	r3, [r7, #32]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	4610      	mov	r0, r2
 8002f5c:	f001 f84c 	bl	8003ff8 <YUGIOH_Stop_Defense>
					state_game->action = 4;
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	2204      	movs	r2, #4
 8002f64:	701a      	strb	r2, [r3, #0]
					YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8002f66:	6a3b      	ldr	r3, [r7, #32]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7fe f930 	bl	80011d2 <YUGIOH_To_GY>
					state_game->count_chain++;
 8002f72:	68bb      	ldr	r3, [r7, #8]
 8002f74:	785b      	ldrb	r3, [r3, #1]
 8002f76:	3301      	adds	r3, #1
 8002f78:	b2da      	uxtb	r2, r3
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	705a      	strb	r2, [r3, #1]
					ST7735_WriteStringNSS(5, 90, "Activated spell", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002f7e:	6a3b      	ldr	r3, [r7, #32]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	781a      	ldrb	r2, [r3, #0]
 8002f84:	4bb3      	ldr	r3, [pc, #716]	; (8003254 <GAME_PLAY_Phase_Management+0x19c0>)
 8002f86:	9203      	str	r2, [sp, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	9202      	str	r2, [sp, #8]
 8002f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f90:	9201      	str	r2, [sp, #4]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	9200      	str	r2, [sp, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4aaf      	ldr	r2, [pc, #700]	; (8003258 <GAME_PLAY_Phase_Management+0x19c4>)
 8002f9a:	215a      	movs	r1, #90	; 0x5a
 8002f9c:	2005      	movs	r0, #5
 8002f9e:	f002 faae 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "Stop Defense", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrUser)->displayNSS);
 8002fa2:	6a3b      	ldr	r3, [r7, #32]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	781a      	ldrb	r2, [r3, #0]
 8002fa8:	4baa      	ldr	r3, [pc, #680]	; (8003254 <GAME_PLAY_Phase_Management+0x19c0>)
 8002faa:	9203      	str	r2, [sp, #12]
 8002fac:	2200      	movs	r2, #0
 8002fae:	9202      	str	r2, [sp, #8]
 8002fb0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002fb4:	9201      	str	r2, [sp, #4]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	9200      	str	r2, [sp, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	4aa7      	ldr	r2, [pc, #668]	; (800325c <GAME_PLAY_Phase_Management+0x19c8>)
 8002fbe:	2169      	movs	r1, #105	; 0x69
 8002fc0:	2005      	movs	r0, #5
 8002fc2:	f002 fa9c 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Opponent chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	4ba1      	ldr	r3, [pc, #644]	; (8003254 <GAME_PLAY_Phase_Management+0x19c0>)
 8002fce:	9203      	str	r2, [sp, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	9202      	str	r2, [sp, #8]
 8002fd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fd8:	9201      	str	r2, [sp, #4]
 8002fda:	685a      	ldr	r2, [r3, #4]
 8002fdc:	9200      	str	r2, [sp, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a9f      	ldr	r2, [pc, #636]	; (8003260 <GAME_PLAY_Phase_Management+0x19cc>)
 8002fe2:	215a      	movs	r1, #90	; 0x5a
 8002fe4:	2005      	movs	r0, #5
 8002fe6:	f002 fa8a 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 105, "a spell card", Font_7x10, ST7735_GREEN, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	781a      	ldrb	r2, [r3, #0]
 8002ff0:	4b98      	ldr	r3, [pc, #608]	; (8003254 <GAME_PLAY_Phase_Management+0x19c0>)
 8002ff2:	9203      	str	r2, [sp, #12]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	9202      	str	r2, [sp, #8]
 8002ff8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8002ffc:	9201      	str	r2, [sp, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	9200      	str	r2, [sp, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a97      	ldr	r2, [pc, #604]	; (8003264 <GAME_PLAY_Phase_Management+0x19d0>)
 8003006:	2169      	movs	r1, #105	; 0x69
 8003008:	2005      	movs	r0, #5
 800300a:	f002 fa78 	bl	80054fe <ST7735_WriteStringNSS>
					HAL_Delay(1000);
 800300e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003012:	f003 f855 	bl	80060c0 <HAL_Delay>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrUser)->displayNSS);
 8003016:	6a3b      	ldr	r3, [r7, #32]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	9301      	str	r3, [sp, #4]
 800301e:	2300      	movs	r3, #0
 8003020:	9300      	str	r3, [sp, #0]
 8003022:	2326      	movs	r3, #38	; 0x26
 8003024:	2280      	movs	r2, #128	; 0x80
 8003026:	215a      	movs	r1, #90	; 0x5a
 8003028:	2000      	movs	r0, #0
 800302a:	f002 fbb1 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,(*ptrOpponent)->displayNSS);
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2300      	movs	r3, #0
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	2326      	movs	r3, #38	; 0x26
 800303c:	2280      	movs	r2, #128	; 0x80
 800303e:	215a      	movs	r1, #90	; 0x5a
 8003040:	2000      	movs	r0, #0
 8003042:	f002 fba5 	bl	8005790 <ST7735_FillRectangleNSS>
			break;
 8003046:	e011      	b.n	800306c <GAME_PLAY_Phase_Management+0x17d8>
			break;
 8003048:	bf00      	nop
 800304a:	f000 be84 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
			break;
 800304e:	bf00      	nop
 8003050:	f000 be81 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
			break;
 8003054:	bf00      	nop
 8003056:	f000 be7e 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
			break;
 800305a:	bf00      	nop
 800305c:	f000 be7b 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
			break;
 8003060:	bf00      	nop
 8003062:	f000 be78 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
			break;
 8003066:	bf00      	nop
 8003068:	f000 be75 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
			break;
 800306c:	bf00      	nop
		}
		break;
 800306e:	f000 be72 	b.w	8003d56 <GAME_PLAY_Phase_Management+0x24c2>
		case Battle_Phase:
			LCDvalue(playerAtk,playerDef);
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f001 f94f 	bl	8004318 <LCDvalue>
			switch(PBS){
 800307a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800307e:	2b06      	cmp	r3, #6
 8003080:	f200 866b 	bhi.w	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
 8003084:	a201      	add	r2, pc, #4	; (adr r2, 800308c <GAME_PLAY_Phase_Management+0x17f8>)
 8003086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800308a:	bf00      	nop
 800308c:	08003d37 	.word	0x08003d37
 8003090:	080030a9 	.word	0x080030a9
 8003094:	08003539 	.word	0x08003539
 8003098:	08003377 	.word	0x08003377
 800309c:	08003717 	.word	0x08003717
 80030a0:	08003895 	.word	0x08003895
 80030a4:	08003c47 	.word	0x08003c47
			case PBS_AFK:
				break;
			case PBS_ActionAwait:
				//ATK action 50
				ST7735_WriteString(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80030a8:	4b6a      	ldr	r3, [pc, #424]	; (8003254 <GAME_PLAY_Phase_Management+0x19c0>)
 80030aa:	2200      	movs	r2, #0
 80030ac:	9202      	str	r2, [sp, #8]
 80030ae:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030b2:	9201      	str	r2, [sp, #4]
 80030b4:	685a      	ldr	r2, [r3, #4]
 80030b6:	9200      	str	r2, [sp, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a6b      	ldr	r2, [pc, #428]	; (8003268 <GAME_PLAY_Phase_Management+0x19d4>)
 80030bc:	2123      	movs	r1, #35	; 0x23
 80030be:	206e      	movs	r0, #110	; 0x6e
 80030c0:	f002 f989 	bl	80053d6 <ST7735_WriteString>
				ST7735_WriteString1(110, 35, "BP", Font_7x10, ST7735_YELLOW, ST7735_BLACK);
 80030c4:	4b63      	ldr	r3, [pc, #396]	; (8003254 <GAME_PLAY_Phase_Management+0x19c0>)
 80030c6:	2200      	movs	r2, #0
 80030c8:	9202      	str	r2, [sp, #8]
 80030ca:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80030ce:	9201      	str	r2, [sp, #4]
 80030d0:	685a      	ldr	r2, [r3, #4]
 80030d2:	9200      	str	r2, [sp, #0]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a64      	ldr	r2, [pc, #400]	; (8003268 <GAME_PLAY_Phase_Management+0x19d4>)
 80030d8:	2123      	movs	r1, #35	; 0x23
 80030da:	206e      	movs	r0, #110	; 0x6e
 80030dc:	f002 f9c5 	bl	800546a <ST7735_WriteString1>
				if(state_game->action == 50){
 80030e0:	68bb      	ldr	r3, [r7, #8]
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b32      	cmp	r3, #50	; 0x32
 80030e6:	d166      	bne.n	80031b6 <GAME_PLAY_Phase_Management+0x1922>
					Player_Reading_Card(RFIDmain, state_game, playerDef);
 80030e8:	683a      	ldr	r2, [r7, #0]
 80030ea:	68b9      	ldr	r1, [r7, #8]
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f7fd fb31 	bl	8000754 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 80030f2:	2101      	movs	r1, #1
 80030f4:	485d      	ldr	r0, [pc, #372]	; (800326c <GAME_PLAY_Phase_Management+0x19d8>)
 80030f6:	f006 f931 	bl	800935c <HAL_GPIO_ReadPin>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f040 861c 	bne.w	8003d3a <GAME_PLAY_Phase_Management+0x24a6>
							== GPIO_PIN_RESET){
						HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 8003102:	485b      	ldr	r0, [pc, #364]	; (8003270 <GAME_PLAY_Phase_Management+0x19dc>)
 8003104:	f009 fb28 	bl	800c758 <HAL_TIM_Base_Stop_IT>
						_micro = 0;
 8003108:	495a      	ldr	r1, [pc, #360]	; (8003274 <GAME_PLAY_Phase_Management+0x19e0>)
 800310a:	f04f 0200 	mov.w	r2, #0
 800310e:	f04f 0300 	mov.w	r3, #0
 8003112:	e9c1 2300 	strd	r2, r3, [r1]
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	9301      	str	r3, [sp, #4]
 800311c:	2300      	movs	r3, #0
 800311e:	9300      	str	r3, [sp, #0]
 8003120:	2326      	movs	r3, #38	; 0x26
 8003122:	2280      	movs	r2, #128	; 0x80
 8003124:	215a      	movs	r1, #90	; 0x5a
 8003126:	2000      	movs	r0, #0
 8003128:	f002 fb32 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_WriteStringNSS(15, 90, "END TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	781a      	ldrb	r2, [r3, #0]
 8003130:	4b51      	ldr	r3, [pc, #324]	; (8003278 <GAME_PLAY_Phase_Management+0x19e4>)
 8003132:	9203      	str	r2, [sp, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	9202      	str	r2, [sp, #8]
 8003138:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800313c:	9201      	str	r2, [sp, #4]
 800313e:	685a      	ldr	r2, [r3, #4]
 8003140:	9200      	str	r2, [sp, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a4d      	ldr	r2, [pc, #308]	; (800327c <GAME_PLAY_Phase_Management+0x19e8>)
 8003146:	215a      	movs	r1, #90	; 0x5a
 8003148:	200f      	movs	r0, #15
 800314a:	f002 f9d8 	bl	80054fe <ST7735_WriteStringNSS>
						HAL_Delay(2000);
 800314e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003152:	f002 ffb5 	bl	80060c0 <HAL_Delay>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	9301      	str	r3, [sp, #4]
 800315c:	2300      	movs	r3, #0
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	2326      	movs	r3, #38	; 0x26
 8003162:	2280      	movs	r2, #128	; 0x80
 8003164:	215a      	movs	r1, #90	; 0x5a
 8003166:	2000      	movs	r0, #0
 8003168:	f002 fb12 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	781b      	ldrb	r3, [r3, #0]
 8003170:	9301      	str	r3, [sp, #4]
 8003172:	2300      	movs	r3, #0
 8003174:	9300      	str	r3, [sp, #0]
 8003176:	2326      	movs	r3, #38	; 0x26
 8003178:	2280      	movs	r2, #128	; 0x80
 800317a:	215a      	movs	r1, #90	; 0x5a
 800317c:	2000      	movs	r0, #0
 800317e:	f002 fb07 	bl	8005790 <ST7735_FillRectangleNSS>
						state_game->action = 0;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	2200      	movs	r2, #0
 8003186:	701a      	strb	r2, [r3, #0]
						YUGIOH_Trap_Can_Activated(playerAtk);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 ffc3 	bl	8004114 <YUGIOH_Trap_Can_Activated>
						if(state_game->MainGame_State == first_player){
 800318e:	68bb      	ldr	r3, [r7, #8]
 8003190:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8003194:	2b02      	cmp	r3, #2
 8003196:	d104      	bne.n	80031a2 <GAME_PLAY_Phase_Management+0x190e>
							state_game->MainGame_State = second_player;
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2203      	movs	r2, #3
 800319c:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 80031a0:	e003      	b.n	80031aa <GAME_PLAY_Phase_Management+0x1916>
						}
						else{
							state_game->MainGame_State = first_player;
 80031a2:	68bb      	ldr	r3, [r7, #8]
 80031a4:	2202      	movs	r2, #2
 80031a6:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
						}
						state_game->PlyerAction_State = Drawn_Phase;
 80031aa:	68bb      	ldr	r3, [r7, #8]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
						state_game->test = 223;
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
					}
				}
				break;
 80031b2:	f000 bdc2 	b.w	8003d3a <GAME_PLAY_Phase_Management+0x24a6>
				else if(state_game->action == 51){
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b33      	cmp	r3, #51	; 0x33
 80031bc:	f040 85bd 	bne.w	8003d3a <GAME_PLAY_Phase_Management+0x24a6>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	9301      	str	r3, [sp, #4]
 80031c6:	2300      	movs	r3, #0
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	2326      	movs	r3, #38	; 0x26
 80031cc:	2280      	movs	r2, #128	; 0x80
 80031ce:	215a      	movs	r1, #90	; 0x5a
 80031d0:	2000      	movs	r0, #0
 80031d2:	f002 fadd 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	9301      	str	r3, [sp, #4]
 80031dc:	2300      	movs	r3, #0
 80031de:	9300      	str	r3, [sp, #0]
 80031e0:	2326      	movs	r3, #38	; 0x26
 80031e2:	2280      	movs	r2, #128	; 0x80
 80031e4:	215a      	movs	r1, #90	; 0x5a
 80031e6:	2000      	movs	r0, #0
 80031e8:	f002 fad2 	bl	8005790 <ST7735_FillRectangleNSS>
					uint8_t check_def_mon = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 80031f8:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t targetpos = ptrYugiohCard_src->standPosition;
 80031fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031fc:	799b      	ldrb	r3, [r3, #6]
 80031fe:	767b      	strb	r3, [r7, #25]
					ptrYugiohCard_dst = &playerDef->cardOnBoard[3];
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	3338      	adds	r3, #56	; 0x38
 8003204:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 8003206:	2300      	movs	r3, #0
 8003208:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 800320c:	e010      	b.n	8003230 <GAME_PLAY_Phase_Management+0x199c>
						if(ptrYugiohCard_dst->cardData == 0){
 800320e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d104      	bne.n	8003220 <GAME_PLAY_Phase_Management+0x198c>
							check_def_mon++;
 8003216:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800321a:	3301      	adds	r3, #1
 800321c:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
						ptrYugiohCard_dst++;
 8003220:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003222:	3310      	adds	r3, #16
 8003224:	637b      	str	r3, [r7, #52]	; 0x34
					for(uint8_t i = 0;i < 3; ++i){
 8003226:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800322a:	3301      	adds	r3, #1
 800322c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 8003230:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8003234:	2b02      	cmp	r3, #2
 8003236:	d9ea      	bls.n	800320e <GAME_PLAY_Phase_Management+0x197a>
					uint8_t flag_can_atk = 0;
 8003238:	2300      	movs	r3, #0
 800323a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
					ptrYugiohCard_dst = &playerAtk->cardOnBoard[3];
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	3338      	adds	r3, #56	; 0x38
 800324a:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 800324c:	2300      	movs	r3, #0
 800324e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8003252:	e02e      	b.n	80032b2 <GAME_PLAY_Phase_Management+0x1a1e>
 8003254:	2400000c 	.word	0x2400000c
 8003258:	0800f810 	.word	0x0800f810
 800325c:	0800f880 	.word	0x0800f880
 8003260:	0800f828 	.word	0x0800f828
 8003264:	0800f7ec 	.word	0x0800f7ec
 8003268:	0800f890 	.word	0x0800f890
 800326c:	58020800 	.word	0x58020800
 8003270:	240002e8 	.word	0x240002e8
 8003274:	24000ea0 	.word	0x24000ea0
 8003278:	24000014 	.word	0x24000014
 800327c:	0800f894 	.word	0x0800f894
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 8003280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003282:	68da      	ldr	r2, [r3, #12]
 8003284:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	429a      	cmp	r2, r3
 800328a:	d10a      	bne.n	80032a2 <GAME_PLAY_Phase_Management+0x1a0e>
							if(ptrYugiohCard_dst->cardState == 1){
 800328c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800328e:	789b      	ldrb	r3, [r3, #2]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d103      	bne.n	800329c <GAME_PLAY_Phase_Management+0x1a08>
								flag_can_atk = 2;
 8003294:	2302      	movs	r3, #2
 8003296:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
								break;
 800329a:	e00e      	b.n	80032ba <GAME_PLAY_Phase_Management+0x1a26>
								flag_can_atk = 1;
 800329c:	2301      	movs	r3, #1
 800329e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
						ptrYugiohCard_dst++;
 80032a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032a4:	3310      	adds	r3, #16
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
					for (uint8_t i = 0;i < 3; ++i) {
 80032a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032ac:	3301      	adds	r3, #1
 80032ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80032b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032b6:	2b02      	cmp	r3, #2
 80032b8:	d9e2      	bls.n	8003280 <GAME_PLAY_Phase_Management+0x19ec>
					if (check_def_mon < 3)
 80032ba:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80032be:	2b02      	cmp	r3, #2
 80032c0:	d80b      	bhi.n	80032da <GAME_PLAY_Phase_Management+0x1a46>
						if (playerDef->cardOnBoard[targetpos].cardData == 0)
 80032c2:	7e7b      	ldrb	r3, [r7, #25]
 80032c4:	683a      	ldr	r2, [r7, #0]
 80032c6:	3301      	adds	r3, #1
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	4413      	add	r3, r2
 80032cc:	3304      	adds	r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d102      	bne.n	80032da <GAME_PLAY_Phase_Management+0x1a46>
							flag_can_atk = 1;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					if (flag_can_atk == 2) {
 80032da:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80032de:	2b02      	cmp	r3, #2
 80032e0:	d13c      	bne.n	800335c <GAME_PLAY_Phase_Management+0x1ac8>
						if (ptrYugiohCard_dst->actionPoint_Atk > 0 && ptrYugiohCard_dst->cardState == 1)
 80032e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032e4:	7a1b      	ldrb	r3, [r3, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d02b      	beq.n	8003342 <GAME_PLAY_Phase_Management+0x1aae>
 80032ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032ec:	789b      	ldrb	r3, [r3, #2]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d127      	bne.n	8003342 <GAME_PLAY_Phase_Management+0x1aae>
							ptrYugiohCard_dst->actionPoint_Atk -= 1; // Action commit ATK point reduce
 80032f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f4:	7a1b      	ldrb	r3, [r3, #8]
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b2da      	uxtb	r2, r3
 80032fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032fc:	721a      	strb	r2, [r3, #8]
							YUGIOH_card_copy(ptrYugiohCard_dst, &playerAtk->CardInPlayed);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003304:	4619      	mov	r1, r3
 8003306:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003308:	f7fd f9bc 	bl	8000684 <YUGIOH_card_copy>
							ptrYugiohCard_dst = &playerAtk->CardInPlayed;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003312:	637b      	str	r3, [r7, #52]	; 0x34
							if(check_def_mon == 3){
 8003314:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003318:	2b03      	cmp	r3, #3
 800331a:	d103      	bne.n	8003324 <GAME_PLAY_Phase_Management+0x1a90>
								ptrYugiohCard_dst->targetPosition = 99;
 800331c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800331e:	2263      	movs	r2, #99	; 0x63
 8003320:	71da      	strb	r2, [r3, #7]
 8003322:	e002      	b.n	800332a <GAME_PLAY_Phase_Management+0x1a96>
								ptrYugiohCard_dst->targetPosition = targetpos;
 8003324:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003326:	7e7a      	ldrb	r2, [r7, #25]
 8003328:	71da      	strb	r2, [r3, #7]
							YUGIOH_Clear_Card_Bufffer_Player(playerDef);
 800332a:	6838      	ldr	r0, [r7, #0]
 800332c:	f7fd fe5a 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->action = 52;
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	2234      	movs	r2, #52	; 0x34
 8003334:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = counter_DEF;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2203      	movs	r2, #3
 800333a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 800333e:	f000 bcfc 	b.w	8003d3a <GAME_PLAY_Phase_Management+0x24a6>
							state_game->test = 222;
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	22de      	movs	r2, #222	; 0xde
 8003346:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							state_game->action = 50;
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	2232      	movs	r2, #50	; 0x32
 800334e:	701a      	strb	r2, [r3, #0]
							state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003358:	f000 bcef 	b.w	8003d3a <GAME_PLAY_Phase_Management+0x24a6>
						state_game->test = 223;
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	22df      	movs	r2, #223	; 0xdf
 8003360:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						state_game->action = 50;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	2232      	movs	r2, #50	; 0x32
 8003368:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 800336a:	68bb      	ldr	r3, [r7, #8]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003372:	f000 bce2 	b.w	8003d3a <GAME_PLAY_Phase_Management+0x24a6>
			case counter_DEF:
				//action 52
				ST7735_WriteStringNSS(5, 90, "You declared", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	781a      	ldrb	r2, [r3, #0]
 800337a:	4ba0      	ldr	r3, [pc, #640]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 800337c:	9203      	str	r2, [sp, #12]
 800337e:	2200      	movs	r2, #0
 8003380:	9202      	str	r2, [sp, #8]
 8003382:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003386:	9201      	str	r2, [sp, #4]
 8003388:	685a      	ldr	r2, [r3, #4]
 800338a:	9200      	str	r2, [sp, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a9c      	ldr	r2, [pc, #624]	; (8003600 <GAME_PLAY_Phase_Management+0x1d6c>)
 8003390:	215a      	movs	r1, #90	; 0x5a
 8003392:	2005      	movs	r0, #5
 8003394:	f002 f8b3 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "an ATTACK", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b97      	ldr	r3, [pc, #604]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 800339e:	9203      	str	r2, [sp, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	9202      	str	r2, [sp, #8]
 80033a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033a8:	9201      	str	r2, [sp, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	9200      	str	r2, [sp, #0]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a94      	ldr	r2, [pc, #592]	; (8003604 <GAME_PLAY_Phase_Management+0x1d70>)
 80033b2:	2169      	movs	r1, #105	; 0x69
 80033b4:	2005      	movs	r0, #5
 80033b6:	f002 f8a2 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	781a      	ldrb	r2, [r3, #0]
 80033be:	4b8f      	ldr	r3, [pc, #572]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 80033c0:	9203      	str	r2, [sp, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	9202      	str	r2, [sp, #8]
 80033c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ca:	9201      	str	r2, [sp, #4]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	9200      	str	r2, [sp, #0]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a8d      	ldr	r2, [pc, #564]	; (8003608 <GAME_PLAY_Phase_Management+0x1d74>)
 80033d4:	215a      	movs	r1, #90	; 0x5a
 80033d6:	2005      	movs	r0, #5
 80033d8:	f002 f891 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD ?", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	4b86      	ldr	r3, [pc, #536]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 80033e2:	9203      	str	r2, [sp, #12]
 80033e4:	2200      	movs	r2, #0
 80033e6:	9202      	str	r2, [sp, #8]
 80033e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80033ec:	9201      	str	r2, [sp, #4]
 80033ee:	685a      	ldr	r2, [r3, #4]
 80033f0:	9200      	str	r2, [sp, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a85      	ldr	r2, [pc, #532]	; (800360c <GAME_PLAY_Phase_Management+0x1d78>)
 80033f6:	2169      	movs	r1, #105	; 0x69
 80033f8:	2005      	movs	r0, #5
 80033fa:	f002 f880 	bl	80054fe <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b34      	cmp	r3, #52	; 0x34
 8003404:	d119      	bne.n	800343a <GAME_PLAY_Phase_Management+0x1ba6>
				{
					if (playerDef->noBTN == GPIO_PIN_RESET){
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	789b      	ldrb	r3, [r3, #2]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d109      	bne.n	8003422 <GAME_PLAY_Phase_Management+0x1b8e>
						state_game->PlyerAction_Battle_Substate = chain_effect;
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	2204      	movs	r2, #4
 8003412:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 54;
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	2236      	movs	r2, #54	; 0x36
 800341a:	701a      	strb	r2, [r3, #0]
						state_game->count_chain = 0;
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	2200      	movs	r2, #0
 8003420:	705a      	strb	r2, [r3, #1]
					}
					Player_Reading_Card(RFIDmain,state_game,playerDef);
 8003422:	683a      	ldr	r2, [r7, #0]
 8003424:	68b9      	ldr	r1, [r7, #8]
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f7fd f994 	bl	8000754 <Player_Reading_Card>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	68b9      	ldr	r1, [r7, #8]
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f7fd fce5 	bl	8000e00 <Player_Reading_Card_Monster_Effect>





				break;
 8003436:	f000 bc82 	b.w	8003d3e <GAME_PLAY_Phase_Management+0x24aa>
				else if ((state_game->action == 53 ))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b35      	cmp	r3, #53	; 0x35
 8003440:	f040 847d 	bne.w	8003d3e <GAME_PLAY_Phase_Management+0x24aa>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	781b      	ldrb	r3, [r3, #0]
 8003448:	9301      	str	r3, [sp, #4]
 800344a:	2300      	movs	r3, #0
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	2326      	movs	r3, #38	; 0x26
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	215a      	movs	r1, #90	; 0x5a
 8003454:	2000      	movs	r0, #0
 8003456:	f002 f99b 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	9301      	str	r3, [sp, #4]
 8003460:	2300      	movs	r3, #0
 8003462:	9300      	str	r3, [sp, #0]
 8003464:	2326      	movs	r3, #38	; 0x26
 8003466:	2280      	movs	r2, #128	; 0x80
 8003468:	215a      	movs	r1, #90	; 0x5a
 800346a:	2000      	movs	r0, #0
 800346c:	f002 f990 	bl	8005790 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerDef->ActtionBuffer[0];
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003476:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerDef, ptrYugiohCard_src);
 8003478:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800347a:	6838      	ldr	r0, [r7, #0]
 800347c:	f000 fdf2 	bl	8004064 <YUGIOH_Check_Trap_On_board>
 8003480:	4603      	mov	r3, r0
 8003482:	76fb      	strb	r3, [r7, #27]
					if(ptrYugiohCard_src->cardSignature == 3){
 8003484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b03      	cmp	r3, #3
 800348a:	d125      	bne.n	80034d8 <GAME_PLAY_Phase_Management+0x1c44>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800348c:	68b8      	ldr	r0, [r7, #8]
 800348e:	f7fd fe54 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8003492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003494:	2200      	movs	r2, #0
 8003496:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f203 4344 	addw	r3, r3, #1092	; 0x444
 800349e:	4619      	mov	r1, r3
 80034a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80034a2:	f7fd f8ef 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerDef;
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	683a      	ldr	r2, [r7, #0]
 80034aa:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerAtk;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80034bc:	3301      	adds	r3, #1
 80034be:	b2da      	uxtb	r2, r3
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_ATK;
 80034c6:	68bb      	ldr	r3, [r7, #8]
 80034c8:	2202      	movs	r2, #2
 80034ca:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	2234      	movs	r2, #52	; 0x34
 80034d2:	701a      	strb	r2, [r3, #0]
				break;
 80034d4:	f000 bc33 	b.w	8003d3e <GAME_PLAY_Phase_Management+0x24aa>
						if (idx != 255)
 80034d8:	7efb      	ldrb	r3, [r7, #27]
 80034da:	2bff      	cmp	r3, #255	; 0xff
 80034dc:	f000 842f 	beq.w	8003d3e <GAME_PLAY_Phase_Management+0x24aa>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80034e0:	68b8      	ldr	r0, [r7, #8]
 80034e2:	f7fd fe2a 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80034e6:	7efb      	ldrb	r3, [r7, #27]
 80034e8:	011b      	lsls	r3, r3, #4
 80034ea:	3308      	adds	r3, #8
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	4413      	add	r3, r2
 80034f0:	637b      	str	r3, [r7, #52]	; 0x34
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	2200      	movs	r2, #0
 80034f6:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80034fe:	4619      	mov	r1, r3
 8003500:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003502:	f7fd f8bf 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800351c:	3301      	adds	r3, #1
 800351e:	b2da      	uxtb	r2, r3
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8003526:	68bb      	ldr	r3, [r7, #8]
 8003528:	2202      	movs	r2, #2
 800352a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	2234      	movs	r2, #52	; 0x34
 8003532:	701a      	strb	r2, [r3, #0]
				break;
 8003534:	f000 bc03 	b.w	8003d3e <GAME_PLAY_Phase_Management+0x24aa>
			case counter_ATK:
				//action 54
				ST7735_WriteStringNSS(5, 90, "Do you chain", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	4b2f      	ldr	r3, [pc, #188]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 800353e:	9203      	str	r2, [sp, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	9202      	str	r2, [sp, #8]
 8003544:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003548:	9201      	str	r2, [sp, #4]
 800354a:	685a      	ldr	r2, [r3, #4]
 800354c:	9200      	str	r2, [sp, #0]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2d      	ldr	r2, [pc, #180]	; (8003608 <GAME_PLAY_Phase_Management+0x1d74>)
 8003552:	215a      	movs	r1, #90	; 0x5a
 8003554:	2005      	movs	r0, #5
 8003556:	f001 ffd2 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	781a      	ldrb	r2, [r3, #0]
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 8003560:	9203      	str	r2, [sp, #12]
 8003562:	2200      	movs	r2, #0
 8003564:	9202      	str	r2, [sp, #8]
 8003566:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800356a:	9201      	str	r2, [sp, #4]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	9200      	str	r2, [sp, #0]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a27      	ldr	r2, [pc, #156]	; (8003610 <GAME_PLAY_Phase_Management+0x1d7c>)
 8003574:	2169      	movs	r1, #105	; 0x69
 8003576:	2005      	movs	r0, #5
 8003578:	f001 ffc1 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Waiting player", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	781a      	ldrb	r2, [r3, #0]
 8003580:	4b1e      	ldr	r3, [pc, #120]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 8003582:	9203      	str	r2, [sp, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	9202      	str	r2, [sp, #8]
 8003588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800358c:	9201      	str	r2, [sp, #4]
 800358e:	685a      	ldr	r2, [r3, #4]
 8003590:	9200      	str	r2, [sp, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	4a1f      	ldr	r2, [pc, #124]	; (8003614 <GAME_PLAY_Phase_Management+0x1d80>)
 8003596:	215a      	movs	r1, #90	; 0x5a
 8003598:	2005      	movs	r0, #5
 800359a:	f001 ffb0 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 105, "for CHAIN card", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	781a      	ldrb	r2, [r3, #0]
 80035a2:	4b16      	ldr	r3, [pc, #88]	; (80035fc <GAME_PLAY_Phase_Management+0x1d68>)
 80035a4:	9203      	str	r2, [sp, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	9202      	str	r2, [sp, #8]
 80035aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80035ae:	9201      	str	r2, [sp, #4]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	9200      	str	r2, [sp, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a18      	ldr	r2, [pc, #96]	; (8003618 <GAME_PLAY_Phase_Management+0x1d84>)
 80035b8:	2169      	movs	r1, #105	; 0x69
 80035ba:	2005      	movs	r0, #5
 80035bc:	f001 ff9f 	bl	80054fe <ST7735_WriteStringNSS>
				if(state_game->action == 52)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	2b34      	cmp	r3, #52	; 0x34
 80035c6:	d129      	bne.n	800361c <GAME_PLAY_Phase_Management+0x1d88>
				{

					if (playerAtk->noBTN == GPIO_PIN_RESET){
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	789b      	ldrb	r3, [r3, #2]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d109      	bne.n	80035e4 <GAME_PLAY_Phase_Management+0x1d50>
						//affect
						state_game->action = 54;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	2236      	movs	r2, #54	; 0x36
 80035d4:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = chain_effect;
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	2204      	movs	r2, #4
 80035da:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->count_chain = 0;
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2200      	movs	r2, #0
 80035e2:	705a      	strb	r2, [r3, #1]
					}

					Player_Reading_Card(RFIDmain,state_game,playerDef);
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	68b9      	ldr	r1, [r7, #8]
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7fd f8b3 	bl	8000754 <Player_Reading_Card>
					Player_Reading_Card_Monster_Effect(RFIDmain,state_game,playerDef);
 80035ee:	683a      	ldr	r2, [r7, #0]
 80035f0:	68b9      	ldr	r1, [r7, #8]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f7fd fc04 	bl	8000e00 <Player_Reading_Card_Monster_Effect>
							state_game->action = 52;
						}
					}
				}

				break;
 80035f8:	e3a3      	b.n	8003d42 <GAME_PLAY_Phase_Management+0x24ae>
 80035fa:	bf00      	nop
 80035fc:	2400000c 	.word	0x2400000c
 8003600:	0800f8a0 	.word	0x0800f8a0
 8003604:	0800f8b0 	.word	0x0800f8b0
 8003608:	0800f8bc 	.word	0x0800f8bc
 800360c:	0800f8cc 	.word	0x0800f8cc
 8003610:	0800f8d8 	.word	0x0800f8d8
 8003614:	0800f8e0 	.word	0x0800f8e0
 8003618:	0800f8f0 	.word	0x0800f8f0
				else if ((state_game->action == 53 )){
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b35      	cmp	r3, #53	; 0x35
 8003622:	f040 838e 	bne.w	8003d42 <GAME_PLAY_Phase_Management+0x24ae>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	9301      	str	r3, [sp, #4]
 800362c:	2300      	movs	r3, #0
 800362e:	9300      	str	r3, [sp, #0]
 8003630:	2326      	movs	r3, #38	; 0x26
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	215a      	movs	r1, #90	; 0x5a
 8003636:	2000      	movs	r0, #0
 8003638:	f002 f8aa 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	9301      	str	r3, [sp, #4]
 8003642:	2300      	movs	r3, #0
 8003644:	9300      	str	r3, [sp, #0]
 8003646:	2326      	movs	r3, #38	; 0x26
 8003648:	2280      	movs	r2, #128	; 0x80
 800364a:	215a      	movs	r1, #90	; 0x5a
 800364c:	2000      	movs	r0, #0
 800364e:	f002 f89f 	bl	8005790 <ST7735_FillRectangleNSS>
					ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003658:	62bb      	str	r3, [r7, #40]	; 0x28
					uint8_t idx = YUGIOH_Check_Trap_On_board(playerAtk, ptrYugiohCard_src);
 800365a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800365c:	6878      	ldr	r0, [r7, #4]
 800365e:	f000 fd01 	bl	8004064 <YUGIOH_Check_Trap_On_board>
 8003662:	4603      	mov	r3, r0
 8003664:	76bb      	strb	r3, [r7, #26]
					if(ptrYugiohCard_src->cardSignature == 3){
 8003666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d124      	bne.n	80036b8 <GAME_PLAY_Phase_Management+0x1e24>
						YUGIOH_card_Buffer_Update_Chain(state_game);
 800366e:	68b8      	ldr	r0, [r7, #8]
 8003670:	f7fd fd63 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
						ptrYugiohCard_src->actionPoint_Eff = 0;
 8003674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003676:	2200      	movs	r2, #0
 8003678:	725a      	strb	r2, [r3, #9]
						YUGIOH_card_copy(ptrYugiohCard_src, &state_game->ChainBuffer[0]);
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	f203 4344 	addw	r3, r3, #1092	; 0x444
 8003680:	4619      	mov	r1, r3
 8003682:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003684:	f7fc fffe 	bl	8000684 <YUGIOH_card_copy>
						state_game->ptrChainUser[0] = playerAtk;
 8003688:	68bb      	ldr	r3, [r7, #8]
 800368a:	687a      	ldr	r2, [r7, #4]
 800368c:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
						state_game->ptrChainOpponent[0] = playerDef;
 8003690:	68bb      	ldr	r3, [r7, #8]
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
						state_game->ChainCount++;
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 800369e:	3301      	adds	r3, #1
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
						state_game->PlyerAction_Battle_Substate = counter_DEF;
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	2203      	movs	r2, #3
 80036ac:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
						state_game->action = 52;
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2234      	movs	r2, #52	; 0x34
 80036b4:	701a      	strb	r2, [r3, #0]
				break;
 80036b6:	e344      	b.n	8003d42 <GAME_PLAY_Phase_Management+0x24ae>
						if (idx != 255)
 80036b8:	7ebb      	ldrb	r3, [r7, #26]
 80036ba:	2bff      	cmp	r3, #255	; 0xff
 80036bc:	f000 8341 	beq.w	8003d42 <GAME_PLAY_Phase_Management+0x24ae>
							YUGIOH_card_Buffer_Update_Chain(state_game);
 80036c0:	68b8      	ldr	r0, [r7, #8]
 80036c2:	f7fd fd3a 	bl	800113a <YUGIOH_card_Buffer_Update_Chain>
							ptrYugiohCard_dst = &playerDef->cardOnBoard[idx];
 80036c6:	7ebb      	ldrb	r3, [r7, #26]
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	3308      	adds	r3, #8
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	4413      	add	r3, r2
 80036d0:	637b      	str	r3, [r7, #52]	; 0x34
							ptrYugiohCard_dst->actionPoint_Eff = 0; //Trap is now use
 80036d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036d4:	2200      	movs	r2, #0
 80036d6:	725a      	strb	r2, [r3, #9]
							YUGIOH_card_copy(ptrYugiohCard_dst, &state_game->ChainBuffer[0]);
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	f203 4344 	addw	r3, r3, #1092	; 0x444
 80036de:	4619      	mov	r1, r3
 80036e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80036e2:	f7fc ffcf 	bl	8000684 <YUGIOH_card_copy>
							state_game->ptrChainUser[0] = playerDef;
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	683a      	ldr	r2, [r7, #0]
 80036ea:	f8c3 24a4 	str.w	r2, [r3, #1188]	; 0x4a4
							state_game->ptrChainOpponent[0] = playerAtk;
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	687a      	ldr	r2, [r7, #4]
 80036f2:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
							state_game->ChainCount++;
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 80036fc:	3301      	adds	r3, #1
 80036fe:	b2da      	uxtb	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	f883 24d4 	strb.w	r2, [r3, #1236]	; 0x4d4
							state_game->PlyerAction_Battle_Substate = counter_ATK;
 8003706:	68bb      	ldr	r3, [r7, #8]
 8003708:	2202      	movs	r2, #2
 800370a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
							state_game->action = 52;
 800370e:	68bb      	ldr	r3, [r7, #8]
 8003710:	2234      	movs	r2, #52	; 0x34
 8003712:	701a      	strb	r2, [r3, #0]
				break;
 8003714:	e315      	b.n	8003d42 <GAME_PLAY_Phase_Management+0x24ae>
			case chain_effect:
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	781a      	ldrb	r2, [r3, #0]
 800371a:	4b74      	ldr	r3, [pc, #464]	; (80038ec <GAME_PLAY_Phase_Management+0x2058>)
 800371c:	9203      	str	r2, [sp, #12]
 800371e:	2200      	movs	r2, #0
 8003720:	9202      	str	r2, [sp, #8]
 8003722:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003726:	9201      	str	r2, [sp, #4]
 8003728:	685a      	ldr	r2, [r3, #4]
 800372a:	9200      	str	r2, [sp, #0]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a70      	ldr	r2, [pc, #448]	; (80038f0 <GAME_PLAY_Phase_Management+0x205c>)
 8003730:	215a      	movs	r1, #90	; 0x5a
 8003732:	2005      	movs	r0, #5
 8003734:	f001 fee3 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Resolve EFFECT", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	781a      	ldrb	r2, [r3, #0]
 800373c:	4b6b      	ldr	r3, [pc, #428]	; (80038ec <GAME_PLAY_Phase_Management+0x2058>)
 800373e:	9203      	str	r2, [sp, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	9202      	str	r2, [sp, #8]
 8003744:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003748:	9201      	str	r2, [sp, #4]
 800374a:	685a      	ldr	r2, [r3, #4]
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a67      	ldr	r2, [pc, #412]	; (80038f0 <GAME_PLAY_Phase_Management+0x205c>)
 8003752:	215a      	movs	r1, #90	; 0x5a
 8003754:	2005      	movs	r0, #5
 8003756:	f001 fed2 	bl	80054fe <ST7735_WriteStringNSS>

				ptrUser = &state_game->ptrChainUser[state_game->count_chain];
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	785b      	ldrb	r3, [r3, #1]
 800375e:	f503 7394 	add.w	r3, r3, #296	; 0x128
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	68ba      	ldr	r2, [r7, #8]
 8003766:	4413      	add	r3, r2
 8003768:	3304      	adds	r3, #4
 800376a:	623b      	str	r3, [r7, #32]
				ptrOpponent = &state_game->ptrChainOpponent[state_game->count_chain];
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	785b      	ldrb	r3, [r3, #1]
 8003770:	f503 7397 	add.w	r3, r3, #302	; 0x12e
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	68ba      	ldr	r2, [r7, #8]
 8003778:	4413      	add	r3, r2
 800377a:	3304      	adds	r3, #4
 800377c:	61fb      	str	r3, [r7, #28]

				if(state_game->action == 54)
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b36      	cmp	r3, #54	; 0x36
 8003784:	f040 82df 	bne.w	8003d46 <GAME_PLAY_Phase_Management+0x24b2>
				{
					// Base use to check Card Eff
					if (state_game->count_chain < state_game->ChainCount)
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	785a      	ldrb	r2, [r3, #1]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	f893 34d4 	ldrb.w	r3, [r3, #1236]	; 0x4d4
 8003792:	429a      	cmp	r2, r3
 8003794:	d260      	bcs.n	8003858 <GAME_PLAY_Phase_Management+0x1fc4>
					{
						state_game->test = 165;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	22a5      	movs	r2, #165	; 0xa5
 800379a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5

						ptrYugiohCard_src = &state_game->ChainBuffer[state_game->count_chain];
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	785b      	ldrb	r3, [r3, #1]
 80037a2:	3344      	adds	r3, #68	; 0x44
 80037a4:	011b      	lsls	r3, r3, #4
 80037a6:	68ba      	ldr	r2, [r7, #8]
 80037a8:	4413      	add	r3, r2
 80037aa:	3304      	adds	r3, #4
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28

						if (ptrYugiohCard_src->cardSignature == 3)
 80037ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b03      	cmp	r3, #3
 80037b4:	d111      	bne.n	80037da <GAME_PLAY_Phase_Management+0x1f46>
						{
							(*ptrOpponent)->CardInPlayed.targetPosition = 98;
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2262      	movs	r2, #98	; 0x62
 80037bc:	f883 220f 	strb.w	r2, [r3, #527]	; 0x20f
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 80037c0:	6a3b      	ldr	r3, [r7, #32]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037c6:	4618      	mov	r0, r3
 80037c8:	f7fd fd03 	bl	80011d2 <YUGIOH_To_GY>
							state_game->count_chain++;
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	785b      	ldrb	r3, [r3, #1]
 80037d0:	3301      	adds	r3, #1
 80037d2:	b2da      	uxtb	r2, r3
 80037d4:	68bb      	ldr	r3, [r7, #8]
 80037d6:	705a      	strb	r2, [r3, #1]
						state_game->action = 50;
						state_game->PlyerAction_Battle_Substate = calculate_damage;
					}

				}
				break;
 80037d8:	e2b5      	b.n	8003d46 <GAME_PLAY_Phase_Management+0x24b2>
						else if(ptrYugiohCard_src->cardSignature == 14 || ptrYugiohCard_src->cardSignature == 15)
 80037da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037dc:	781b      	ldrb	r3, [r3, #0]
 80037de:	2b0e      	cmp	r3, #14
 80037e0:	d003      	beq.n	80037ea <GAME_PLAY_Phase_Management+0x1f56>
 80037e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b0f      	cmp	r3, #15
 80037e8:	d118      	bne.n	800381c <GAME_PLAY_Phase_Management+0x1f88>
							state_game->test = 133;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2285      	movs	r2, #133	; 0x85
 80037ee:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							YUGIOH_Gift_of_the_Mystical_Elf(*ptrUser,*ptrOpponent);
 80037f2:	6a3b      	ldr	r3, [r7, #32]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f000 fbab 	bl	8003f58 <YUGIOH_Gift_of_the_Mystical_Elf>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003802:	6a3b      	ldr	r3, [r7, #32]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003808:	4618      	mov	r0, r3
 800380a:	f7fd fce2 	bl	80011d2 <YUGIOH_To_GY>
							state_game->count_chain++;
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	785b      	ldrb	r3, [r3, #1]
 8003812:	3301      	adds	r3, #1
 8003814:	b2da      	uxtb	r2, r3
 8003816:	68bb      	ldr	r3, [r7, #8]
 8003818:	705a      	strb	r2, [r3, #1]
				break;
 800381a:	e294      	b.n	8003d46 <GAME_PLAY_Phase_Management+0x24b2>
						else if(ptrYugiohCard_src->cardSignature == 20){
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	781b      	ldrb	r3, [r3, #0]
 8003820:	2b14      	cmp	r3, #20
 8003822:	f040 8290 	bne.w	8003d46 <GAME_PLAY_Phase_Management+0x24b2>
							YUGIOH_To_GY(*ptrUser, ptrYugiohCard_src);
 8003826:	6a3b      	ldr	r3, [r7, #32]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800382c:	4618      	mov	r0, r3
 800382e:	f7fd fcd0 	bl	80011d2 <YUGIOH_To_GY>
							if(state_game->MainGame_State == first_player){
 8003832:	68bb      	ldr	r3, [r7, #8]
 8003834:	f893 343c 	ldrb.w	r3, [r3, #1084]	; 0x43c
 8003838:	2b02      	cmp	r3, #2
 800383a:	d104      	bne.n	8003846 <GAME_PLAY_Phase_Management+0x1fb2>
								state_game->MainGame_State = second_player;
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	2203      	movs	r2, #3
 8003840:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
 8003844:	e003      	b.n	800384e <GAME_PLAY_Phase_Management+0x1fba>
								state_game->MainGame_State = first_player;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	2202      	movs	r2, #2
 800384a:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
							state_game->PlyerAction_State = Drawn_Phase;
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	2201      	movs	r2, #1
 8003852:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
				break;
 8003856:	e276      	b.n	8003d46 <GAME_PLAY_Phase_Management+0x24b2>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	2300      	movs	r3, #0
 8003860:	9300      	str	r3, [sp, #0]
 8003862:	2326      	movs	r3, #38	; 0x26
 8003864:	2280      	movs	r2, #128	; 0x80
 8003866:	215a      	movs	r1, #90	; 0x5a
 8003868:	2000      	movs	r0, #0
 800386a:	f001 ff91 	bl	8005790 <ST7735_FillRectangleNSS>
						ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	2300      	movs	r3, #0
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2326      	movs	r3, #38	; 0x26
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	215a      	movs	r1, #90	; 0x5a
 800387e:	2000      	movs	r0, #0
 8003880:	f001 ff86 	bl	8005790 <ST7735_FillRectangleNSS>
						state_game->action = 50;
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	2232      	movs	r2, #50	; 0x32
 8003888:	701a      	strb	r2, [r3, #0]
						state_game->PlyerAction_Battle_Substate = calculate_damage;
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2205      	movs	r2, #5
 800388e:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003892:	e258      	b.n	8003d46 <GAME_PLAY_Phase_Management+0x24b2>
			case  calculate_damage:
				ptrYugiohCard_src = &playerAtk->CardInPlayed;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800389a:	62bb      	str	r3, [r7, #40]	; 0x28

				uint8_t atk = ptrYugiohCard_src->cardAtk;
 800389c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800389e:	791b      	ldrb	r3, [r3, #4]
 80038a0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

				if(ptrYugiohCard_src->targetPosition == 99)
 80038a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038a6:	79db      	ldrb	r3, [r3, #7]
 80038a8:	2b63      	cmp	r3, #99	; 0x63
 80038aa:	d116      	bne.n	80038da <GAME_PLAY_Phase_Management+0x2046>
				{
					playerDef->life_point -= atk*100;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	889a      	ldrh	r2, [r3, #4]
 80038b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	4619      	mov	r1, r3
 80038b8:	0249      	lsls	r1, r1, #9
 80038ba:	1ac9      	subs	r1, r1, r3
 80038bc:	0089      	lsls	r1, r1, #2
 80038be:	4419      	add	r1, r3
 80038c0:	00c9      	lsls	r1, r1, #3
 80038c2:	1acb      	subs	r3, r1, r3
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	4413      	add	r3, r2
 80038ca:	b29a      	uxth	r2, r3
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	809a      	strh	r2, [r3, #4]
					state_game->PlyerAction_Battle_Substate = after_calculate;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	2206      	movs	r2, #6
 80038d4:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f

					}
				}


				break;
 80038d8:	e237      	b.n	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
				else if(ptrYugiohCard_src->targetPosition == 98)
 80038da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038dc:	79db      	ldrb	r3, [r3, #7]
 80038de:	2b62      	cmp	r3, #98	; 0x62
 80038e0:	d108      	bne.n	80038f4 <GAME_PLAY_Phase_Management+0x2060>
					state_game->PlyerAction_Battle_Substate = after_calculate;
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	2206      	movs	r2, #6
 80038e6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 80038ea:	e22e      	b.n	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
 80038ec:	2400000c 	.word	0x2400000c
 80038f0:	0800f900 	.word	0x0800f900
					ptrYugiohCard_dst = playerDef->cardOnBoard;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	3308      	adds	r3, #8
 80038f8:	637b      	str	r3, [r7, #52]	; 0x34
					ptrYugiohCard_dst = &playerDef->cardOnBoard[ptrYugiohCard_src->targetPosition];
 80038fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fc:	79db      	ldrb	r3, [r3, #7]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	3308      	adds	r3, #8
 8003902:	683a      	ldr	r2, [r7, #0]
 8003904:	4413      	add	r3, r2
 8003906:	637b      	str	r3, [r7, #52]	; 0x34
					state_game->test = 54;
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2236      	movs	r2, #54	; 0x36
 800390c:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
					if(ptrYugiohCard_dst->cardState == 0){
 8003910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003912:	789b      	ldrb	r3, [r3, #2]
 8003914:	2b00      	cmp	r3, #0
 8003916:	f040 80b1 	bne.w	8003a7c <GAME_PLAY_Phase_Management+0x21e8>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	781a      	ldrb	r2, [r3, #0]
 800391e:	4ba3      	ldr	r3, [pc, #652]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003920:	9203      	str	r2, [sp, #12]
 8003922:	2200      	movs	r2, #0
 8003924:	9202      	str	r2, [sp, #8]
 8003926:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800392a:	9201      	str	r2, [sp, #4]
 800392c:	685a      	ldr	r2, [r3, #4]
 800392e:	9200      	str	r2, [sp, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a9f      	ldr	r2, [pc, #636]	; (8003bb0 <GAME_PLAY_Phase_Management+0x231c>)
 8003934:	215a      	movs	r1, #90	; 0x5a
 8003936:	2005      	movs	r0, #5
 8003938:	f001 fde1 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	4b9a      	ldr	r3, [pc, #616]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003942:	9203      	str	r2, [sp, #12]
 8003944:	2200      	movs	r2, #0
 8003946:	9202      	str	r2, [sp, #8]
 8003948:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800394c:	9201      	str	r2, [sp, #4]
 800394e:	685a      	ldr	r2, [r3, #4]
 8003950:	9200      	str	r2, [sp, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a97      	ldr	r2, [pc, #604]	; (8003bb4 <GAME_PLAY_Phase_Management+0x2320>)
 8003956:	2169      	movs	r1, #105	; 0x69
 8003958:	2005      	movs	r0, #5
 800395a:	f001 fdd0 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	781a      	ldrb	r2, [r3, #0]
 8003962:	4b92      	ldr	r3, [pc, #584]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003964:	9203      	str	r2, [sp, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	9202      	str	r2, [sp, #8]
 800396a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800396e:	9201      	str	r2, [sp, #4]
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	9200      	str	r2, [sp, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a90      	ldr	r2, [pc, #576]	; (8003bb8 <GAME_PLAY_Phase_Management+0x2324>)
 8003978:	215a      	movs	r1, #90	; 0x5a
 800397a:	2005      	movs	r0, #5
 800397c:	f001 fdbf 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your DEF MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	781a      	ldrb	r2, [r3, #0]
 8003984:	4b89      	ldr	r3, [pc, #548]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003986:	9203      	str	r2, [sp, #12]
 8003988:	2200      	movs	r2, #0
 800398a:	9202      	str	r2, [sp, #8]
 800398c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003990:	9201      	str	r2, [sp, #4]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	9200      	str	r2, [sp, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a88      	ldr	r2, [pc, #544]	; (8003bbc <GAME_PLAY_Phase_Management+0x2328>)
 800399a:	2169      	movs	r1, #105	; 0x69
 800399c:	2005      	movs	r0, #5
 800399e:	f001 fdae 	bl	80054fe <ST7735_WriteStringNSS>
						uint8_t def = ptrYugiohCard_dst->cardDef;
 80039a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039a4:	795b      	ldrb	r3, [r3, #5]
 80039a6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						if(atk < def){
 80039aa:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80039ae:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80039b2:	429a      	cmp	r2, r3
 80039b4:	d23c      	bcs.n	8003a30 <GAME_PLAY_Phase_Management+0x219c>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	9301      	str	r3, [sp, #4]
 80039bc:	2300      	movs	r3, #0
 80039be:	9300      	str	r3, [sp, #0]
 80039c0:	2326      	movs	r3, #38	; 0x26
 80039c2:	2280      	movs	r2, #128	; 0x80
 80039c4:	215a      	movs	r1, #90	; 0x5a
 80039c6:	2000      	movs	r0, #0
 80039c8:	f001 fee2 	bl	8005790 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	9301      	str	r3, [sp, #4]
 80039d2:	2300      	movs	r3, #0
 80039d4:	9300      	str	r3, [sp, #0]
 80039d6:	2326      	movs	r3, #38	; 0x26
 80039d8:	2280      	movs	r2, #128	; 0x80
 80039da:	215a      	movs	r1, #90	; 0x5a
 80039dc:	2000      	movs	r0, #0
 80039de:	f001 fed7 	bl	8005790 <ST7735_FillRectangleNSS>
							playerAtk->life_point -= (def-atk)*100;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	889a      	ldrh	r2, [r3, #4]
 80039e6:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 80039ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ee:	1acb      	subs	r3, r1, r3
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	4619      	mov	r1, r3
 80039f4:	0249      	lsls	r1, r1, #9
 80039f6:	1ac9      	subs	r1, r1, r3
 80039f8:	0089      	lsls	r1, r1, #2
 80039fa:	4419      	add	r1, r3
 80039fc:	00c9      	lsls	r1, r1, #3
 80039fe:	1acb      	subs	r3, r1, r3
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	4413      	add	r3, r2
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8003a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a0e:	799b      	ldrb	r3, [r3, #6]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	3308      	adds	r3, #8
 8003a14:	687a      	ldr	r2, [r7, #4]
 8003a16:	4413      	add	r3, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	f7fd fbd9 	bl	80011d2 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7fd fadf 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2206      	movs	r2, #6
 8003a2a:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003a2e:	e18c      	b.n	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
						else if(atk > def){
 8003a30:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003a34:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	f240 8186 	bls.w	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	2300      	movs	r3, #0
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2326      	movs	r3, #38	; 0x26
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	215a      	movs	r1, #90	; 0x5a
 8003a4e:	2000      	movs	r0, #0
 8003a50:	f001 fe9e 	bl	8005790 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2326      	movs	r3, #38	; 0x26
 8003a60:	2280      	movs	r2, #128	; 0x80
 8003a62:	215a      	movs	r1, #90	; 0x5a
 8003a64:	2000      	movs	r0, #0
 8003a66:	f001 fe93 	bl	8005790 <ST7735_FillRectangleNSS>
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8003a6a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003a6c:	6838      	ldr	r0, [r7, #0]
 8003a6e:	f7fd fbb0 	bl	80011d2 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	2206      	movs	r2, #6
 8003a76:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003a7a:	e166      	b.n	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
					else if(ptrYugiohCard_dst->cardState == 1){
 8003a7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a7e:	789b      	ldrb	r3, [r3, #2]
 8003a80:	2b01      	cmp	r3, #1
 8003a82:	f040 8162 	bne.w	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
						ST7735_WriteStringNSS(5, 90, "You attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	781a      	ldrb	r2, [r3, #0]
 8003a8a:	4b48      	ldr	r3, [pc, #288]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003a8c:	9203      	str	r2, [sp, #12]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	9202      	str	r2, [sp, #8]
 8003a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a96:	9201      	str	r2, [sp, #4]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	9200      	str	r2, [sp, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a44      	ldr	r2, [pc, #272]	; (8003bb0 <GAME_PLAY_Phase_Management+0x231c>)
 8003aa0:	215a      	movs	r1, #90	; 0x5a
 8003aa2:	2005      	movs	r0, #5
 8003aa4:	f001 fd2b 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "a ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerAtk->displayNSS);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	781a      	ldrb	r2, [r3, #0]
 8003aac:	4b3f      	ldr	r3, [pc, #252]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003aae:	9203      	str	r2, [sp, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	9202      	str	r2, [sp, #8]
 8003ab4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003ab8:	9201      	str	r2, [sp, #4]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	9200      	str	r2, [sp, #0]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a3f      	ldr	r2, [pc, #252]	; (8003bc0 <GAME_PLAY_Phase_Management+0x232c>)
 8003ac2:	2169      	movs	r1, #105	; 0x69
 8003ac4:	2005      	movs	r0, #5
 8003ac6:	f001 fd1a 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 90, "Opp. attacked", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003aca:	683b      	ldr	r3, [r7, #0]
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003ad0:	9203      	str	r2, [sp, #12]
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	9202      	str	r2, [sp, #8]
 8003ad6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ada:	9201      	str	r2, [sp, #4]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	9200      	str	r2, [sp, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a35      	ldr	r2, [pc, #212]	; (8003bb8 <GAME_PLAY_Phase_Management+0x2324>)
 8003ae4:	215a      	movs	r1, #90	; 0x5a
 8003ae6:	2005      	movs	r0, #5
 8003ae8:	f001 fd09 	bl	80054fe <ST7735_WriteStringNSS>
						ST7735_WriteStringNSS(5, 105, "your ATK MONSTER", Font_7x10, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	4b2e      	ldr	r3, [pc, #184]	; (8003bac <GAME_PLAY_Phase_Management+0x2318>)
 8003af2:	9203      	str	r2, [sp, #12]
 8003af4:	2200      	movs	r2, #0
 8003af6:	9202      	str	r2, [sp, #8]
 8003af8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8003afc:	9201      	str	r2, [sp, #4]
 8003afe:	685a      	ldr	r2, [r3, #4]
 8003b00:	9200      	str	r2, [sp, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a2f      	ldr	r2, [pc, #188]	; (8003bc4 <GAME_PLAY_Phase_Management+0x2330>)
 8003b06:	2169      	movs	r1, #105	; 0x69
 8003b08:	2005      	movs	r0, #5
 8003b0a:	f001 fcf8 	bl	80054fe <ST7735_WriteStringNSS>
						uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	791b      	ldrb	r3, [r3, #4]
 8003b12:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						state_game->test = 60;
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	223c      	movs	r2, #60	; 0x3c
 8003b1a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
						if(atk < atk2){
 8003b1e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003b22:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d24e      	bcs.n	8003bc8 <GAME_PLAY_Phase_Management+0x2334>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	9301      	str	r3, [sp, #4]
 8003b30:	2300      	movs	r3, #0
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2326      	movs	r3, #38	; 0x26
 8003b36:	2280      	movs	r2, #128	; 0x80
 8003b38:	215a      	movs	r1, #90	; 0x5a
 8003b3a:	2000      	movs	r0, #0
 8003b3c:	f001 fe28 	bl	8005790 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	9301      	str	r3, [sp, #4]
 8003b46:	2300      	movs	r3, #0
 8003b48:	9300      	str	r3, [sp, #0]
 8003b4a:	2326      	movs	r3, #38	; 0x26
 8003b4c:	2280      	movs	r2, #128	; 0x80
 8003b4e:	215a      	movs	r1, #90	; 0x5a
 8003b50:	2000      	movs	r0, #0
 8003b52:	f001 fe1d 	bl	8005790 <ST7735_FillRectangleNSS>
							state_game->test = 61;
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	223d      	movs	r2, #61	; 0x3d
 8003b5a:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerAtk->life_point -= (atk2-atk)*100;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	889a      	ldrh	r2, [r3, #4]
 8003b62:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
 8003b66:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b6a:	1acb      	subs	r3, r1, r3
 8003b6c:	b29b      	uxth	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	0249      	lsls	r1, r1, #9
 8003b72:	1ac9      	subs	r1, r1, r3
 8003b74:	0089      	lsls	r1, r1, #2
 8003b76:	4419      	add	r1, r3
 8003b78:	00c9      	lsls	r1, r1, #3
 8003b7a:	1acb      	subs	r3, r1, r3
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	b29b      	uxth	r3, r3
 8003b80:	4413      	add	r3, r2
 8003b82:	b29a      	uxth	r2, r3
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerAtk, &playerAtk->cardOnBoard[ptrYugiohCard_src->standPosition]);
 8003b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8a:	799b      	ldrb	r3, [r3, #6]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	3308      	adds	r3, #8
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7fd fb1b 	bl	80011d2 <YUGIOH_To_GY>
							YUGIOH_Clear_Card_Bufffer_Player(playerAtk);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f7fd fa21 	bl	8000fe4 <YUGIOH_Clear_Card_Bufffer_Player>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	2206      	movs	r2, #6
 8003ba6:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003baa:	e0ce      	b.n	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
 8003bac:	2400000c 	.word	0x2400000c
 8003bb0:	0800f910 	.word	0x0800f910
 8003bb4:	0800f920 	.word	0x0800f920
 8003bb8:	0800f930 	.word	0x0800f930
 8003bbc:	0800f940 	.word	0x0800f940
 8003bc0:	0800f954 	.word	0x0800f954
 8003bc4:	0800f964 	.word	0x0800f964
						else if(atk > atk2){
 8003bc8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8003bcc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	f240 80ba 	bls.w	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	781b      	ldrb	r3, [r3, #0]
 8003bda:	9301      	str	r3, [sp, #4]
 8003bdc:	2300      	movs	r3, #0
 8003bde:	9300      	str	r3, [sp, #0]
 8003be0:	2326      	movs	r3, #38	; 0x26
 8003be2:	2280      	movs	r2, #128	; 0x80
 8003be4:	215a      	movs	r1, #90	; 0x5a
 8003be6:	2000      	movs	r0, #0
 8003be8:	f001 fdd2 	bl	8005790 <ST7735_FillRectangleNSS>
							ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	781b      	ldrb	r3, [r3, #0]
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	2326      	movs	r3, #38	; 0x26
 8003bf8:	2280      	movs	r2, #128	; 0x80
 8003bfa:	215a      	movs	r1, #90	; 0x5a
 8003bfc:	2000      	movs	r0, #0
 8003bfe:	f001 fdc7 	bl	8005790 <ST7735_FillRectangleNSS>
							state_game->test = 70;
 8003c02:	68bb      	ldr	r3, [r7, #8]
 8003c04:	2246      	movs	r2, #70	; 0x46
 8003c06:	f883 24d5 	strb.w	r2, [r3, #1237]	; 0x4d5
							playerDef->life_point -= (atk-atk2)*100;
 8003c0a:	683b      	ldr	r3, [r7, #0]
 8003c0c:	889a      	ldrh	r2, [r3, #4]
 8003c0e:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
 8003c12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003c16:	1acb      	subs	r3, r1, r3
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	0249      	lsls	r1, r1, #9
 8003c1e:	1ac9      	subs	r1, r1, r3
 8003c20:	0089      	lsls	r1, r1, #2
 8003c22:	4419      	add	r1, r3
 8003c24:	00c9      	lsls	r1, r1, #3
 8003c26:	1acb      	subs	r3, r1, r3
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	4413      	add	r3, r2
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	809a      	strh	r2, [r3, #4]
							YUGIOH_To_GY(playerDef, ptrYugiohCard_dst);
 8003c34:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003c36:	6838      	ldr	r0, [r7, #0]
 8003c38:	f7fd facb 	bl	80011d2 <YUGIOH_To_GY>
							state_game->PlyerAction_Battle_Substate = after_calculate;
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	2206      	movs	r2, #6
 8003c40:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003c44:	e081      	b.n	8003d4a <GAME_PLAY_Phase_Management+0x24b6>
			case after_calculate:
				ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	4b46      	ldr	r3, [pc, #280]	; (8003d64 <GAME_PLAY_Phase_Management+0x24d0>)
 8003c4c:	9203      	str	r2, [sp, #12]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	9202      	str	r2, [sp, #8]
 8003c52:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c56:	9201      	str	r2, [sp, #4]
 8003c58:	685a      	ldr	r2, [r3, #4]
 8003c5a:	9200      	str	r2, [sp, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a42      	ldr	r2, [pc, #264]	; (8003d68 <GAME_PLAY_Phase_Management+0x24d4>)
 8003c60:	215a      	movs	r1, #90	; 0x5a
 8003c62:	2005      	movs	r0, #5
 8003c64:	f001 fc4b 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	781a      	ldrb	r2, [r3, #0]
 8003c6c:	4b3d      	ldr	r3, [pc, #244]	; (8003d64 <GAME_PLAY_Phase_Management+0x24d0>)
 8003c6e:	9203      	str	r2, [sp, #12]
 8003c70:	2200      	movs	r2, #0
 8003c72:	9202      	str	r2, [sp, #8]
 8003c74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c78:	9201      	str	r2, [sp, #4]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	9200      	str	r2, [sp, #0]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a3a      	ldr	r2, [pc, #232]	; (8003d6c <GAME_PLAY_Phase_Management+0x24d8>)
 8003c82:	215a      	movs	r1, #90	; 0x5a
 8003c84:	2005      	movs	r0, #5
 8003c86:	f001 fc3a 	bl	80054fe <ST7735_WriteStringNSS>

				// Clear Card in Played (action ended)
				ptrYugiohCard_src = &playerAtk->ActtionBuffer[0];
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003c90:	62bb      	str	r3, [r7, #40]	; 0x28
				YUGIOH_card_clear(ptrYugiohCard_src);
 8003c92:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c94:	f7fc fd2d 	bl	80006f2 <YUGIOH_card_clear>

				if(playerDef->life_point == 0 || playerDef->life_point >= 60000){
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	889b      	ldrh	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d005      	beq.n	8003cac <GAME_PLAY_Phase_Management+0x2418>
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	889b      	ldrh	r3, [r3, #4]
 8003ca4:	f64e 225f 	movw	r2, #59999	; 0xea5f
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d904      	bls.n	8003cb6 <GAME_PLAY_Phase_Management+0x2422>
					state_game->MainGame_State = Game_Ended;
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	2204      	movs	r2, #4
 8003cb0:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c

					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
				}
				break;
 8003cb4:	e04a      	b.n	8003d4c <GAME_PLAY_Phase_Management+0x24b8>
					state_game->action = 50;
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	2232      	movs	r2, #50	; 0x32
 8003cba:	701a      	strb	r2, [r3, #0]
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerAtk->displayNSS);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	9301      	str	r3, [sp, #4]
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	9300      	str	r3, [sp, #0]
 8003cc6:	2326      	movs	r3, #38	; 0x26
 8003cc8:	2280      	movs	r2, #128	; 0x80
 8003cca:	215a      	movs	r1, #90	; 0x5a
 8003ccc:	2000      	movs	r0, #0
 8003cce:	f001 fd5f 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_FillRectangleNSS(0, 90, 128, 128 - 90, ST7735_BLACK,playerDef->displayNSS);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2300      	movs	r3, #0
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2326      	movs	r3, #38	; 0x26
 8003cde:	2280      	movs	r2, #128	; 0x80
 8003ce0:	215a      	movs	r1, #90	; 0x5a
 8003ce2:	2000      	movs	r0, #0
 8003ce4:	f001 fd54 	bl	8005790 <ST7735_FillRectangleNSS>
					ST7735_WriteStringNSS(5, 90, "Finish attack", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	4b1d      	ldr	r3, [pc, #116]	; (8003d64 <GAME_PLAY_Phase_Management+0x24d0>)
 8003cee:	9203      	str	r2, [sp, #12]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	9202      	str	r2, [sp, #8]
 8003cf4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cf8:	9201      	str	r2, [sp, #4]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	9200      	str	r2, [sp, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	4a19      	ldr	r2, [pc, #100]	; (8003d68 <GAME_PLAY_Phase_Management+0x24d4>)
 8003d02:	215a      	movs	r1, #90	; 0x5a
 8003d04:	2005      	movs	r0, #5
 8003d06:	f001 fbfa 	bl	80054fe <ST7735_WriteStringNSS>
					ST7735_WriteStringNSS(5, 90, "Finish defense", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	781a      	ldrb	r2, [r3, #0]
 8003d0e:	4b15      	ldr	r3, [pc, #84]	; (8003d64 <GAME_PLAY_Phase_Management+0x24d0>)
 8003d10:	9203      	str	r2, [sp, #12]
 8003d12:	2200      	movs	r2, #0
 8003d14:	9202      	str	r2, [sp, #8]
 8003d16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	9200      	str	r2, [sp, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a12      	ldr	r2, [pc, #72]	; (8003d6c <GAME_PLAY_Phase_Management+0x24d8>)
 8003d24:	215a      	movs	r1, #90	; 0x5a
 8003d26:	2005      	movs	r0, #5
 8003d28:	f001 fbe9 	bl	80054fe <ST7735_WriteStringNSS>
					state_game->PlyerAction_Battle_Substate = PBS_ActionAwait;
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
				break;
 8003d34:	e00a      	b.n	8003d4c <GAME_PLAY_Phase_Management+0x24b8>
				break;
 8003d36:	bf00      	nop
 8003d38:	e00f      	b.n	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
				break;
 8003d3a:	bf00      	nop
 8003d3c:	e00d      	b.n	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
				break;
 8003d3e:	bf00      	nop
 8003d40:	e00b      	b.n	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
				break;
 8003d42:	bf00      	nop
 8003d44:	e009      	b.n	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
				break;
 8003d46:	bf00      	nop
 8003d48:	e007      	b.n	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
				break;
 8003d4a:	bf00      	nop
			}
			break;
 8003d4c:	e005      	b.n	8003d5a <GAME_PLAY_Phase_Management+0x24c6>
		break;
 8003d4e:	bf00      	nop
 8003d50:	e004      	b.n	8003d5c <GAME_PLAY_Phase_Management+0x24c8>
		break;
 8003d52:	bf00      	nop
 8003d54:	e002      	b.n	8003d5c <GAME_PLAY_Phase_Management+0x24c8>
		break;
 8003d56:	bf00      	nop
 8003d58:	e000      	b.n	8003d5c <GAME_PLAY_Phase_Management+0x24c8>
			break;
 8003d5a:	bf00      	nop

	}
}
 8003d5c:	bf00      	nop
 8003d5e:	3738      	adds	r7, #56	; 0x38
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	2400000c 	.word	0x2400000c
 8003d68:	0800f978 	.word	0x0800f978
 8003d6c:	0800f988 	.word	0x0800f988

08003d70 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:


void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	3338      	adds	r3, #56	; 0x38
 8003d7c:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003d7e:	2300      	movs	r3, #0
 8003d80:	72fb      	strb	r3, [r7, #11]
 8003d82:	e00d      	b.n	8003da0 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x30>
		if(ptrYUGIOHCard->cardData != 0){
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x24>
			YUGIOH_To_GY(player,ptrYUGIOHCard);
 8003d8c:	68f9      	ldr	r1, [r7, #12]
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f7fd fa1f 	bl	80011d2 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard++;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3310      	adds	r3, #16
 8003d98:	60fb      	str	r3, [r7, #12]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003d9a:	7afb      	ldrb	r3, [r7, #11]
 8003d9c:	3301      	adds	r3, #1
 8003d9e:	72fb      	strb	r3, [r7, #11]
 8003da0:	7afb      	ldrb	r3, [r7, #11]
 8003da2:	2b02      	cmp	r3, #2
 8003da4:	d9ee      	bls.n	8003d84 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x14>
	}
}
 8003da6:	bf00      	nop
 8003da8:	bf00      	nop
 8003daa:	3710      	adds	r7, #16
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bd80      	pop	{r7, pc}

08003db0 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b086      	sub	sp, #24
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	3308      	adds	r3, #8
 8003dbe:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	3338      	adds	r3, #56	; 0x38
 8003dc4:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	3308      	adds	r3, #8
 8003dca:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	3338      	adds	r3, #56	; 0x38
 8003dd0:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	73fb      	strb	r3, [r7, #15]
 8003dd6:	e00d      	b.n	8003df4 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x44>
		if(ptrYUGIOHCard_player1->cardData != 0){
 8003dd8:	697b      	ldr	r3, [r7, #20]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x38>
			YUGIOH_To_GY(player1,ptrYUGIOHCard_player1);
 8003de0:	6979      	ldr	r1, [r7, #20]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f7fd f9f5 	bl	80011d2 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player1++;
 8003de8:	697b      	ldr	r3, [r7, #20]
 8003dea:	3310      	adds	r3, #16
 8003dec:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	3301      	adds	r3, #1
 8003df2:	73fb      	strb	r3, [r7, #15]
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b02      	cmp	r3, #2
 8003df8:	d9ee      	bls.n	8003dd8 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x28>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	73bb      	strb	r3, [r7, #14]
 8003dfe:	e00d      	b.n	8003e1c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x6c>
		if(ptrYUGIOHCard_player2->cardData != 0){
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d003      	beq.n	8003e10 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x60>
			YUGIOH_To_GY(player2,ptrYUGIOHCard_player2);
 8003e08:	6939      	ldr	r1, [r7, #16]
 8003e0a:	6838      	ldr	r0, [r7, #0]
 8003e0c:	f7fd f9e1 	bl	80011d2 <YUGIOH_To_GY>
		}
		ptrYUGIOHCard_player2++;
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	3310      	adds	r3, #16
 8003e14:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003e16:	7bbb      	ldrb	r3, [r7, #14]
 8003e18:	3301      	adds	r3, #1
 8003e1a:	73bb      	strb	r3, [r7, #14]
 8003e1c:	7bbb      	ldrb	r3, [r7, #14]
 8003e1e:	2b02      	cmp	r3, #2
 8003e20:	d9ee      	bls.n	8003e00 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x50>
	}
}
 8003e22:	bf00      	nop
 8003e24:	bf00      	nop
 8003e26:	3718      	adds	r7, #24
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <YUGIOH_Reborn>:

void YUGIOH_Reborn(Player *player){
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b088      	sub	sp, #32
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
	uint8_t flag = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	77fb      	strb	r3, [r7, #31]
	uint8_t index_GY = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77bb      	strb	r3, [r7, #30]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = &player->CardInPlayed;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003e42:	61bb      	str	r3, [r7, #24]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	3368      	adds	r3, #104	; 0x68
 8003e48:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	3368      	adds	r3, #104	; 0x68
 8003e4e:	617b      	str	r3, [r7, #20]

	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8003e50:	2300      	movs	r3, #0
 8003e52:	74fb      	strb	r3, [r7, #19]
 8003e54:	e010      	b.n	8003e78 <YUGIOH_Reborn+0x4c>
		if(ptrYugiohCard_Buffer_src->cardData == ptrYugiohCard_Buffer_dst->cardData){
 8003e56:	69bb      	ldr	r3, [r7, #24]
 8003e58:	68da      	ldr	r2, [r3, #12]
 8003e5a:	697b      	ldr	r3, [r7, #20]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	429a      	cmp	r2, r3
 8003e60:	d104      	bne.n	8003e6c <YUGIOH_Reborn+0x40>
			flag = 1;
 8003e62:	2301      	movs	r3, #1
 8003e64:	77fb      	strb	r3, [r7, #31]
			index_GY = i;
 8003e66:	7cfb      	ldrb	r3, [r7, #19]
 8003e68:	77bb      	strb	r3, [r7, #30]
			break;
 8003e6a:	e008      	b.n	8003e7e <YUGIOH_Reborn+0x52>
		}
		ptrYugiohCard_Buffer_dst++;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	3310      	adds	r3, #16
 8003e70:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0;i < GY_BUFF_LEN ; ++i) {
 8003e72:	7cfb      	ldrb	r3, [r7, #19]
 8003e74:	3301      	adds	r3, #1
 8003e76:	74fb      	strb	r3, [r7, #19]
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b13      	cmp	r3, #19
 8003e7c:	d9eb      	bls.n	8003e56 <YUGIOH_Reborn+0x2a>
	}

	ptrYugiohCard_Buffer_dst = &player->cardOnBoard[3];
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	3338      	adds	r3, #56	; 0x38
 8003e82:	617b      	str	r3, [r7, #20]

	if(flag == 1){
 8003e84:	7ffb      	ldrb	r3, [r7, #31]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d134      	bne.n	8003ef4 <YUGIOH_Reborn+0xc8>
		uint8_t idx = ptrYugiohCard_Buffer_src->standPosition % 6;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	799a      	ldrb	r2, [r3, #6]
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <YUGIOH_Reborn+0xd0>)
 8003e90:	fba3 1302 	umull	r1, r3, r3, r2
 8003e94:	0899      	lsrs	r1, r3, #2
 8003e96:	460b      	mov	r3, r1
 8003e98:	005b      	lsls	r3, r3, #1
 8003e9a:	440b      	add	r3, r1
 8003e9c:	005b      	lsls	r3, r3, #1
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	72fb      	strb	r3, [r7, #11]
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, &player->cardOnBoard[idx]);
 8003ea2:	7afb      	ldrb	r3, [r7, #11]
 8003ea4:	011b      	lsls	r3, r3, #4
 8003ea6:	3308      	adds	r3, #8
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	4413      	add	r3, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	69b8      	ldr	r0, [r7, #24]
 8003eb0:	f7fc fbe8 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_Buffer_src = &player->GY[index_GY+1];
 8003eb4:	7fbb      	ldrb	r3, [r7, #30]
 8003eb6:	3301      	adds	r3, #1
 8003eb8:	011b      	lsls	r3, r3, #4
 8003eba:	3368      	adds	r3, #104	; 0x68
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	61bb      	str	r3, [r7, #24]
		ptrYugiohCard_Buffer_dst = &player->GY[index_GY];
 8003ec2:	7fbb      	ldrb	r3, [r7, #30]
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	3368      	adds	r3, #104	; 0x68
 8003ec8:	687a      	ldr	r2, [r7, #4]
 8003eca:	4413      	add	r3, r2
 8003ecc:	617b      	str	r3, [r7, #20]

		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8003ece:	7fbb      	ldrb	r3, [r7, #30]
 8003ed0:	60fb      	str	r3, [r7, #12]
 8003ed2:	e00c      	b.n	8003eee <YUGIOH_Reborn+0xc2>
			YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 8003ed4:	6979      	ldr	r1, [r7, #20]
 8003ed6:	69b8      	ldr	r0, [r7, #24]
 8003ed8:	f7fc fbd4 	bl	8000684 <YUGIOH_card_copy>
			ptrYugiohCard_Buffer_src++;
 8003edc:	69bb      	ldr	r3, [r7, #24]
 8003ede:	3310      	adds	r3, #16
 8003ee0:	61bb      	str	r3, [r7, #24]
			ptrYugiohCard_Buffer_dst++;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3310      	adds	r3, #16
 8003ee6:	617b      	str	r3, [r7, #20]
		for (int i = index_GY; i < GY_BUFF_LEN ; ++i) {
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	3301      	adds	r3, #1
 8003eec:	60fb      	str	r3, [r7, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b13      	cmp	r3, #19
 8003ef2:	ddef      	ble.n	8003ed4 <YUGIOH_Reborn+0xa8>
		}


	}
}
 8003ef4:	bf00      	nop
 8003ef6:	3720      	adds	r7, #32
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	bd80      	pop	{r7, pc}
 8003efc:	aaaaaaab 	.word	0xaaaaaaab

08003f00 <YUGIOH_Ancient_Rules>:

void YUGIOH_Ancient_Rules(Player *player){
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b086      	sub	sp, #24
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrYugiohCard_src = player->ActtionBuffer;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f0e:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player->ActtionBuffer[0];
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8003f16:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	799a      	ldrb	r2, [r3, #6]
 8003f1c:	4b0d      	ldr	r3, [pc, #52]	; (8003f54 <YUGIOH_Ancient_Rules+0x54>)
 8003f1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003f22:	0899      	lsrs	r1, r3, #2
 8003f24:	460b      	mov	r3, r1
 8003f26:	005b      	lsls	r3, r3, #1
 8003f28:	440b      	add	r3, r1
 8003f2a:	005b      	lsls	r3, r3, #1
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYugiohCard_dst = player->cardOnBoard;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3308      	adds	r3, #8
 8003f34:	60fb      	str	r3, [r7, #12]
	ptrYugiohCard_dst = &player->cardOnBoard[idx];
 8003f36:	7cfb      	ldrb	r3, [r7, #19]
 8003f38:	011b      	lsls	r3, r3, #4
 8003f3a:	3308      	adds	r3, #8
 8003f3c:	687a      	ldr	r2, [r7, #4]
 8003f3e:	4413      	add	r3, r2
 8003f40:	60fb      	str	r3, [r7, #12]

	YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8003f42:	68f9      	ldr	r1, [r7, #12]
 8003f44:	6978      	ldr	r0, [r7, #20]
 8003f46:	f7fc fb9d 	bl	8000684 <YUGIOH_card_copy>

}
 8003f4a:	bf00      	nop
 8003f4c:	3718      	adds	r7, #24
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	aaaaaaab 	.word	0xaaaaaaab

08003f58 <YUGIOH_Gift_of_the_Mystical_Elf>:

void YUGIOH_Gift_of_the_Mystical_Elf(Player *player1,Player *player2){
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
 8003f60:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	3308      	adds	r3, #8
 8003f66:	617b      	str	r3, [r7, #20]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	3338      	adds	r3, #56	; 0x38
 8003f6c:	617b      	str	r3, [r7, #20]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	3308      	adds	r3, #8
 8003f72:	613b      	str	r3, [r7, #16]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	3338      	adds	r3, #56	; 0x38
 8003f78:	613b      	str	r3, [r7, #16]

	uint8_t count_monster = 0;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	73fb      	strb	r3, [r7, #15]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73bb      	strb	r3, [r7, #14]
 8003f82:	e00c      	b.n	8003f9e <YUGIOH_Gift_of_the_Mystical_Elf+0x46>
		if(ptrYUGIOHCard_player1->cardType == 1){
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	785b      	ldrb	r3, [r3, #1]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d102      	bne.n	8003f92 <YUGIOH_Gift_of_the_Mystical_Elf+0x3a>
			count_monster += 1;
 8003f8c:	7bfb      	ldrb	r3, [r7, #15]
 8003f8e:	3301      	adds	r3, #1
 8003f90:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player1++;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	3310      	adds	r3, #16
 8003f96:	617b      	str	r3, [r7, #20]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003f98:	7bbb      	ldrb	r3, [r7, #14]
 8003f9a:	3301      	adds	r3, #1
 8003f9c:	73bb      	strb	r3, [r7, #14]
 8003f9e:	7bbb      	ldrb	r3, [r7, #14]
 8003fa0:	2b02      	cmp	r3, #2
 8003fa2:	d9ef      	bls.n	8003f84 <YUGIOH_Gift_of_the_Mystical_Elf+0x2c>
	}
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	737b      	strb	r3, [r7, #13]
 8003fa8:	e00c      	b.n	8003fc4 <YUGIOH_Gift_of_the_Mystical_Elf+0x6c>
		if(ptrYUGIOHCard_player2->cardType == 1){
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	785b      	ldrb	r3, [r3, #1]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d102      	bne.n	8003fb8 <YUGIOH_Gift_of_the_Mystical_Elf+0x60>
			count_monster += 1;
 8003fb2:	7bfb      	ldrb	r3, [r7, #15]
 8003fb4:	3301      	adds	r3, #1
 8003fb6:	73fb      	strb	r3, [r7, #15]
		}
		ptrYUGIOHCard_player2++;
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	3310      	adds	r3, #16
 8003fbc:	613b      	str	r3, [r7, #16]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8003fbe:	7b7b      	ldrb	r3, [r7, #13]
 8003fc0:	3301      	adds	r3, #1
 8003fc2:	737b      	strb	r3, [r7, #13]
 8003fc4:	7b7b      	ldrb	r3, [r7, #13]
 8003fc6:	2b02      	cmp	r3, #2
 8003fc8:	d9ef      	bls.n	8003faa <YUGIOH_Gift_of_the_Mystical_Elf+0x52>
	}

	player1->life_point += 300*count_monster;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	889a      	ldrh	r2, [r3, #4]
 8003fce:	7bfb      	ldrb	r3, [r7, #15]
 8003fd0:	b29b      	uxth	r3, r3
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	0089      	lsls	r1, r1, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	4619      	mov	r1, r3
 8003fda:	0109      	lsls	r1, r1, #4
 8003fdc:	1acb      	subs	r3, r1, r3
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	809a      	strh	r2, [r3, #4]

}
 8003fea:	bf00      	nop
 8003fec:	371c      	adds	r7, #28
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
	...

08003ff8 <YUGIOH_Stop_Defense>:

void YUGIOH_Stop_Defense(Player *player1,Player *player2){
 8003ff8:	b480      	push	{r7}
 8003ffa:	b087      	sub	sp, #28
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrYugiohCard_src = player1->ActtionBuffer;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004008:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_src = &player1->ActtionBuffer[0];
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	f503 73d4 	add.w	r3, r3, #424	; 0x1a8
 8004010:	617b      	str	r3, [r7, #20]

	uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	799a      	ldrb	r2, [r3, #6]
 8004016:	4b12      	ldr	r3, [pc, #72]	; (8004060 <YUGIOH_Stop_Defense+0x68>)
 8004018:	fba3 1302 	umull	r1, r3, r3, r2
 800401c:	0899      	lsrs	r1, r3, #2
 800401e:	460b      	mov	r3, r1
 8004020:	005b      	lsls	r3, r3, #1
 8004022:	440b      	add	r3, r1
 8004024:	005b      	lsls	r3, r3, #1
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	74fb      	strb	r3, [r7, #19]

	YUGIOH_Card *ptrYUGIOHCard_dst = player2->cardOnBoard;
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	3308      	adds	r3, #8
 800402e:	60fb      	str	r3, [r7, #12]
	ptrYUGIOHCard_dst = &player2->cardOnBoard[idx];
 8004030:	7cfb      	ldrb	r3, [r7, #19]
 8004032:	011b      	lsls	r3, r3, #4
 8004034:	3308      	adds	r3, #8
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	4413      	add	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

	if((ptrYUGIOHCard_dst->cardState == 0) && (ptrYUGIOHCard_dst->cardData != 0)){
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	789b      	ldrb	r3, [r3, #2]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d106      	bne.n	8004052 <YUGIOH_Stop_Defense+0x5a>
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <YUGIOH_Stop_Defense+0x5a>
		ptrYUGIOHCard_dst->cardState = 1;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2201      	movs	r2, #1
 8004050:	709a      	strb	r2, [r3, #2]
	}

}
 8004052:	bf00      	nop
 8004054:	371c      	adds	r7, #28
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	aaaaaaab 	.word	0xaaaaaaab

08004064 <YUGIOH_Check_Trap_On_board>:

uint8_t YUGIOH_Check_Trap_On_board(Player *player,YUGIOH_Card *card)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	3308      	adds	r3, #8
 8004072:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	e016      	b.n	80040a8 <YUGIOH_Check_Trap_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68da      	ldr	r2, [r3, #12]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	429a      	cmp	r2, r3
 8004084:	d10a      	bne.n	800409c <YUGIOH_Check_Trap_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 3)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	7a5b      	ldrb	r3, [r3, #9]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d006      	beq.n	800409c <YUGIOH_Check_Trap_On_board+0x38>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	785b      	ldrb	r3, [r3, #1]
 8004092:	2b03      	cmp	r3, #3
 8004094:	d102      	bne.n	800409c <YUGIOH_Check_Trap_On_board+0x38>
			{
				return i;
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	b2db      	uxtb	r3, r3
 800409a:	e009      	b.n	80040b0 <YUGIOH_Check_Trap_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	3310      	adds	r3, #16
 80040a0:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3301      	adds	r3, #1
 80040a6:	60bb      	str	r3, [r7, #8]
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	dde5      	ble.n	800407a <YUGIOH_Check_Trap_On_board+0x16>
	}
	return 255;
 80040ae:	23ff      	movs	r3, #255	; 0xff
}
 80040b0:	4618      	mov	r0, r3
 80040b2:	3714      	adds	r7, #20
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <YUGIOH_Check_Spell_On_board>:

uint8_t YUGIOH_Check_Spell_On_board(Player *player,YUGIOH_Card *card)
{
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	6039      	str	r1, [r7, #0]
	YUGIOH_Card *ptrCardCheck;
	ptrCardCheck = &player->cardOnBoard[0];
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	3308      	adds	r3, #8
 80040ca:	60fb      	str	r3, [r7, #12]

	for (int i = 0; i < 3; ++i)
 80040cc:	2300      	movs	r3, #0
 80040ce:	60bb      	str	r3, [r7, #8]
 80040d0:	e016      	b.n	8004100 <YUGIOH_Check_Spell_On_board+0x44>
	{
		if(card->cardData == ptrCardCheck->cardData)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68da      	ldr	r2, [r3, #12]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	68db      	ldr	r3, [r3, #12]
 80040da:	429a      	cmp	r2, r3
 80040dc:	d10a      	bne.n	80040f4 <YUGIOH_Check_Spell_On_board+0x38>
		{
			if(ptrCardCheck->actionPoint_Eff > 0 && ptrCardCheck->cardType == 2)
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	7a5b      	ldrb	r3, [r3, #9]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d006      	beq.n	80040f4 <YUGIOH_Check_Spell_On_board+0x38>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	785b      	ldrb	r3, [r3, #1]
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d102      	bne.n	80040f4 <YUGIOH_Check_Spell_On_board+0x38>
			{
				return i;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e009      	b.n	8004108 <YUGIOH_Check_Spell_On_board+0x4c>
			}
		}
		ptrCardCheck++;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	3310      	adds	r3, #16
 80040f8:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	3301      	adds	r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
 8004100:	68bb      	ldr	r3, [r7, #8]
 8004102:	2b02      	cmp	r3, #2
 8004104:	dde5      	ble.n	80040d2 <YUGIOH_Check_Spell_On_board+0x16>
	}
	return 255;
 8004106:	23ff      	movs	r3, #255	; 0xff
}
 8004108:	4618      	mov	r0, r3
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr

08004114 <YUGIOH_Trap_Can_Activated>:

void YUGIOH_Trap_Can_Activated(Player *player)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[0];
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	3308      	adds	r3, #8
 8004120:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 8004122:	2300      	movs	r3, #0
 8004124:	60bb      	str	r3, [r7, #8]
 8004126:	e00c      	b.n	8004142 <YUGIOH_Trap_Can_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d002      	beq.n	8004136 <YUGIOH_Trap_Can_Activated+0x22>
		{
			ptrCard->actionPoint_Eff = 1;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2201      	movs	r2, #1
 8004134:	725a      	strb	r2, [r3, #9]
		}
		ptrCard++;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	3310      	adds	r3, #16
 800413a:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < 3; ++i)
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	3301      	adds	r3, #1
 8004140:	60bb      	str	r3, [r7, #8]
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	2b02      	cmp	r3, #2
 8004146:	ddef      	ble.n	8004128 <YUGIOH_Trap_Can_Activated+0x14>
	}
}
 8004148:	bf00      	nop
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004154:	4770      	bx	lr

08004156 <YUGIOH_Monster_Activated>:

void YUGIOH_Monster_Activated(Player *player)
{
 8004156:	b480      	push	{r7}
 8004158:	b085      	sub	sp, #20
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
	YUGIOH_Card *ptrCard;
	ptrCard = &player->cardOnBoard[3];
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	3338      	adds	r3, #56	; 0x38
 8004162:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 8004164:	2303      	movs	r3, #3
 8004166:	60bb      	str	r3, [r7, #8]
 8004168:	e00c      	b.n	8004184 <YUGIOH_Monster_Activated+0x2e>
	{
		if (ptrCard->cardData != 0)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	68db      	ldr	r3, [r3, #12]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d002      	beq.n	8004178 <YUGIOH_Monster_Activated+0x22>
		{
			ptrCard->actionPoint_Atk = 1;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2201      	movs	r2, #1
 8004176:	721a      	strb	r2, [r3, #8]
		}
		ptrCard++;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	3310      	adds	r3, #16
 800417c:	60fb      	str	r3, [r7, #12]
	for (int i = 3; i < 6; ++i)
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	3301      	adds	r3, #1
 8004182:	60bb      	str	r3, [r7, #8]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b05      	cmp	r3, #5
 8004188:	ddef      	ble.n	800416a <YUGIOH_Monster_Activated+0x14>
	}
}
 800418a:	bf00      	nop
 800418c:	bf00      	nop
 800418e:	3714      	adds	r7, #20
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <MainGUI>:
void MainGUI()
{
 8004198:	b580      	push	{r7, lr}
 800419a:	b084      	sub	sp, #16
 800419c:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800419e:	4b55      	ldr	r3, [pc, #340]	; (80042f4 <MainGUI+0x15c>)
 80041a0:	2200      	movs	r2, #0
 80041a2:	9202      	str	r2, [sp, #8]
 80041a4:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80041a8:	9201      	str	r2, [sp, #4]
 80041aa:	685a      	ldr	r2, [r3, #4]
 80041ac:	9200      	str	r2, [sp, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a51      	ldr	r2, [pc, #324]	; (80042f8 <MainGUI+0x160>)
 80041b2:	2105      	movs	r1, #5
 80041b4:	2005      	movs	r0, #5
 80041b6:	f001 f958 	bl	800546a <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80041ba:	4b4e      	ldr	r3, [pc, #312]	; (80042f4 <MainGUI+0x15c>)
 80041bc:	2200      	movs	r2, #0
 80041be:	9202      	str	r2, [sp, #8]
 80041c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041c4:	9201      	str	r2, [sp, #4]
 80041c6:	685a      	ldr	r2, [r3, #4]
 80041c8:	9200      	str	r2, [sp, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a4b      	ldr	r2, [pc, #300]	; (80042fc <MainGUI+0x164>)
 80041ce:	2114      	movs	r1, #20
 80041d0:	2005      	movs	r0, #5
 80041d2:	f001 f94a 	bl	800546a <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80041d6:	4b47      	ldr	r3, [pc, #284]	; (80042f4 <MainGUI+0x15c>)
 80041d8:	2200      	movs	r2, #0
 80041da:	9202      	str	r2, [sp, #8]
 80041dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041e0:	9201      	str	r2, [sp, #4]
 80041e2:	685a      	ldr	r2, [r3, #4]
 80041e4:	9200      	str	r2, [sp, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a45      	ldr	r2, [pc, #276]	; (8004300 <MainGUI+0x168>)
 80041ea:	2123      	movs	r1, #35	; 0x23
 80041ec:	2005      	movs	r0, #5
 80041ee:	f001 f93c 	bl	800546a <ST7735_WriteString1>
	ST7735_WriteString(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80041f2:	4b40      	ldr	r3, [pc, #256]	; (80042f4 <MainGUI+0x15c>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	9202      	str	r2, [sp, #8]
 80041f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80041fc:	9201      	str	r2, [sp, #4]
 80041fe:	685a      	ldr	r2, [r3, #4]
 8004200:	9200      	str	r2, [sp, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a3f      	ldr	r2, [pc, #252]	; (8004304 <MainGUI+0x16c>)
 8004206:	2123      	movs	r1, #35	; 0x23
 8004208:	203c      	movs	r0, #60	; 0x3c
 800420a:	f001 f8e4 	bl	80053d6 <ST7735_WriteString>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800420e:	4b39      	ldr	r3, [pc, #228]	; (80042f4 <MainGUI+0x15c>)
 8004210:	2200      	movs	r2, #0
 8004212:	9202      	str	r2, [sp, #8]
 8004214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004218:	9201      	str	r2, [sp, #4]
 800421a:	685a      	ldr	r2, [r3, #4]
 800421c:	9200      	str	r2, [sp, #0]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a39      	ldr	r2, [pc, #228]	; (8004308 <MainGUI+0x170>)
 8004222:	2132      	movs	r1, #50	; 0x32
 8004224:	2000      	movs	r0, #0
 8004226:	f001 f920 	bl	800546a <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800422a:	4b32      	ldr	r3, [pc, #200]	; (80042f4 <MainGUI+0x15c>)
 800422c:	2200      	movs	r2, #0
 800422e:	9202      	str	r2, [sp, #8]
 8004230:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004234:	9201      	str	r2, [sp, #4]
 8004236:	685a      	ldr	r2, [r3, #4]
 8004238:	9200      	str	r2, [sp, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a33      	ldr	r2, [pc, #204]	; (800430c <MainGUI+0x174>)
 800423e:	213c      	movs	r1, #60	; 0x3c
 8004240:	2000      	movs	r0, #0
 8004242:	f001 f912 	bl	800546a <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8004246:	4b2b      	ldr	r3, [pc, #172]	; (80042f4 <MainGUI+0x15c>)
 8004248:	2200      	movs	r2, #0
 800424a:	9202      	str	r2, [sp, #8]
 800424c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8004250:	9201      	str	r2, [sp, #4]
 8004252:	685a      	ldr	r2, [r3, #4]
 8004254:	9200      	str	r2, [sp, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a2d      	ldr	r2, [pc, #180]	; (8004310 <MainGUI+0x178>)
 800425a:	2105      	movs	r1, #5
 800425c:	2005      	movs	r0, #5
 800425e:	f001 f8ba 	bl	80053d6 <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8004262:	4b24      	ldr	r3, [pc, #144]	; (80042f4 <MainGUI+0x15c>)
 8004264:	2200      	movs	r2, #0
 8004266:	9202      	str	r2, [sp, #8]
 8004268:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800426c:	9201      	str	r2, [sp, #4]
 800426e:	685a      	ldr	r2, [r3, #4]
 8004270:	9200      	str	r2, [sp, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	4a21      	ldr	r2, [pc, #132]	; (80042fc <MainGUI+0x164>)
 8004276:	2114      	movs	r1, #20
 8004278:	2005      	movs	r0, #5
 800427a:	f001 f8ac 	bl	80053d6 <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800427e:	4b1d      	ldr	r3, [pc, #116]	; (80042f4 <MainGUI+0x15c>)
 8004280:	2200      	movs	r2, #0
 8004282:	9202      	str	r2, [sp, #8]
 8004284:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004288:	9201      	str	r2, [sp, #4]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	9200      	str	r2, [sp, #0]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	4a20      	ldr	r2, [pc, #128]	; (8004314 <MainGUI+0x17c>)
 8004292:	2123      	movs	r1, #35	; 0x23
 8004294:	2005      	movs	r0, #5
 8004296:	f001 f89e 	bl	80053d6 <ST7735_WriteString>
	ST7735_WriteString1(60, 35, "|Phase:", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800429a:	4b16      	ldr	r3, [pc, #88]	; (80042f4 <MainGUI+0x15c>)
 800429c:	2200      	movs	r2, #0
 800429e:	9202      	str	r2, [sp, #8]
 80042a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042a4:	9201      	str	r2, [sp, #4]
 80042a6:	685a      	ldr	r2, [r3, #4]
 80042a8:	9200      	str	r2, [sp, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a15      	ldr	r2, [pc, #84]	; (8004304 <MainGUI+0x16c>)
 80042ae:	2123      	movs	r1, #35	; 0x23
 80042b0:	203c      	movs	r0, #60	; 0x3c
 80042b2:	f001 f8da 	bl	800546a <ST7735_WriteString1>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80042b6:	4b0f      	ldr	r3, [pc, #60]	; (80042f4 <MainGUI+0x15c>)
 80042b8:	2200      	movs	r2, #0
 80042ba:	9202      	str	r2, [sp, #8]
 80042bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042c0:	9201      	str	r2, [sp, #4]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	9200      	str	r2, [sp, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a0f      	ldr	r2, [pc, #60]	; (8004308 <MainGUI+0x170>)
 80042ca:	2132      	movs	r1, #50	; 0x32
 80042cc:	2000      	movs	r0, #0
 80042ce:	f001 f882 	bl	80053d6 <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80042d2:	4b08      	ldr	r3, [pc, #32]	; (80042f4 <MainGUI+0x15c>)
 80042d4:	2200      	movs	r2, #0
 80042d6:	9202      	str	r2, [sp, #8]
 80042d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80042dc:	9201      	str	r2, [sp, #4]
 80042de:	685a      	ldr	r2, [r3, #4]
 80042e0:	9200      	str	r2, [sp, #0]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a09      	ldr	r2, [pc, #36]	; (800430c <MainGUI+0x174>)
 80042e6:	213c      	movs	r1, #60	; 0x3c
 80042e8:	2000      	movs	r0, #0
 80042ea:	f001 f874 	bl	80053d6 <ST7735_WriteString>
}
 80042ee:	bf00      	nop
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}
 80042f4:	2400000c 	.word	0x2400000c
 80042f8:	0800f684 	.word	0x0800f684
 80042fc:	0800f998 	.word	0x0800f998
 8004300:	0800f9a8 	.word	0x0800f9a8
 8004304:	0800f9b0 	.word	0x0800f9b0
 8004308:	0800f9b8 	.word	0x0800f9b8
 800430c:	0800f630 	.word	0x0800f630
 8004310:	0800f624 	.word	0x0800f624
 8004314:	0800f9cc 	.word	0x0800f9cc

08004318 <LCDvalue>:

void LCDvalue(Player *playerAtk, Player *playerDef){
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af04      	add	r7, sp, #16
 800431e:	6078      	str	r0, [r7, #4]
 8004320:	6039      	str	r1, [r7, #0]
	uint16_t a = 0 ;
 8004322:	2300      	movs	r3, #0
 8004324:	817b      	strh	r3, [r7, #10]
	time = timeinit;
 8004326:	4b49      	ldr	r3, [pc, #292]	; (800444c <LCDvalue+0x134>)
 8004328:	881a      	ldrh	r2, [r3, #0]
 800432a:	4b49      	ldr	r3, [pc, #292]	; (8004450 <LCDvalue+0x138>)
 800432c:	801a      	strh	r2, [r3, #0]
	a = _micro / 1000000;
 800432e:	4b49      	ldr	r3, [pc, #292]	; (8004454 <LCDvalue+0x13c>)
 8004330:	e9d3 0100 	ldrd	r0, r1, [r3]
 8004334:	4a48      	ldr	r2, [pc, #288]	; (8004458 <LCDvalue+0x140>)
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	f7fc f821 	bl	8000380 <__aeabi_uldivmod>
 800433e:	4602      	mov	r2, r0
 8004340:	460b      	mov	r3, r1
 8004342:	4613      	mov	r3, r2
 8004344:	817b      	strh	r3, [r7, #10]
	time -= a;
 8004346:	4b42      	ldr	r3, [pc, #264]	; (8004450 <LCDvalue+0x138>)
 8004348:	881a      	ldrh	r2, [r3, #0]
 800434a:	897b      	ldrh	r3, [r7, #10]
 800434c:	1ad3      	subs	r3, r2, r3
 800434e:	b29a      	uxth	r2, r3
 8004350:	4b3f      	ldr	r3, [pc, #252]	; (8004450 <LCDvalue+0x138>)
 8004352:	801a      	strh	r2, [r3, #0]
	sprintf(t_c, "%d",time);
 8004354:	4b3e      	ldr	r3, [pc, #248]	; (8004450 <LCDvalue+0x138>)
 8004356:	881b      	ldrh	r3, [r3, #0]
 8004358:	461a      	mov	r2, r3
 800435a:	4940      	ldr	r1, [pc, #256]	; (800445c <LCDvalue+0x144>)
 800435c:	4840      	ldr	r0, [pc, #256]	; (8004460 <LCDvalue+0x148>)
 800435e:	f00a fdd7 	bl	800ef10 <siprintf>
	for (int i = 0 ; i < 3 ; i++){
 8004362:	2300      	movs	r3, #0
 8004364:	60fb      	str	r3, [r7, #12]
 8004366:	e012      	b.n	800438e <LCDvalue+0x76>
		if(t_c[i] == 0){
 8004368:	4a3d      	ldr	r2, [pc, #244]	; (8004460 <LCDvalue+0x148>)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	4413      	add	r3, r2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d109      	bne.n	8004388 <LCDvalue+0x70>
			t_c[i] = 32;
 8004374:	4a3a      	ldr	r2, [pc, #232]	; (8004460 <LCDvalue+0x148>)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4413      	add	r3, r2
 800437a:	2220      	movs	r2, #32
 800437c:	701a      	strb	r2, [r3, #0]
			t_c[i+1] = 32;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	3301      	adds	r3, #1
 8004382:	4a37      	ldr	r2, [pc, #220]	; (8004460 <LCDvalue+0x148>)
 8004384:	2120      	movs	r1, #32
 8004386:	54d1      	strb	r1, [r2, r3]
	for (int i = 0 ; i < 3 ; i++){
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	3301      	adds	r3, #1
 800438c:	60fb      	str	r3, [r7, #12]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b02      	cmp	r3, #2
 8004392:	dde9      	ble.n	8004368 <LCDvalue+0x50>
		}
	}
	if(time == 0){
 8004394:	4b2e      	ldr	r3, [pc, #184]	; (8004450 <LCDvalue+0x138>)
 8004396:	881b      	ldrh	r3, [r3, #0]
 8004398:	2b00      	cmp	r3, #0
 800439a:	f040 811d 	bne.w	80045d8 <LCDvalue+0x2c0>
		HAL_TIM_Base_Stop_IT(&TIM7_PORT);
 800439e:	4831      	ldr	r0, [pc, #196]	; (8004464 <LCDvalue+0x14c>)
 80043a0:	f008 f9da 	bl	800c758 <HAL_TIM_Base_Stop_IT>
		time = 0;
 80043a4:	4b2a      	ldr	r3, [pc, #168]	; (8004450 <LCDvalue+0x138>)
 80043a6:	2200      	movs	r2, #0
 80043a8:	801a      	strh	r2, [r3, #0]
		ST7735_FillScreen(ST7735_BLACK);
 80043aa:	2000      	movs	r0, #0
 80043ac:	f001 fa7a 	bl	80058a4 <ST7735_FillScreen>
		ST7735_FillScreen1(ST7735_BLACK);
 80043b0:	2000      	movs	r0, #0
 80043b2:	f001 fa88 	bl	80058c6 <ST7735_FillScreen1>
		while(time == 0){
 80043b6:	e10a      	b.n	80045ce <LCDvalue+0x2b6>
			uint8_t credit = 1;
 80043b8:	2301      	movs	r3, #1
 80043ba:	727b      	strb	r3, [r7, #9]
			if(credit == 0){
 80043bc:	7a7b      	ldrb	r3, [r7, #9]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d15e      	bne.n	8004480 <LCDvalue+0x168>
				ST7735_WriteStringNSS(15, 35, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	781a      	ldrb	r2, [r3, #0]
 80043c6:	4b28      	ldr	r3, [pc, #160]	; (8004468 <LCDvalue+0x150>)
 80043c8:	9203      	str	r2, [sp, #12]
 80043ca:	2200      	movs	r2, #0
 80043cc:	9202      	str	r2, [sp, #8]
 80043ce:	221f      	movs	r2, #31
 80043d0:	9201      	str	r2, [sp, #4]
 80043d2:	685a      	ldr	r2, [r3, #4]
 80043d4:	9200      	str	r2, [sp, #0]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a24      	ldr	r2, [pc, #144]	; (800446c <LCDvalue+0x154>)
 80043da:	2123      	movs	r1, #35	; 0x23
 80043dc:	200f      	movs	r0, #15
 80043de:	f001 f88e 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 60, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	4b22      	ldr	r3, [pc, #136]	; (8004470 <LCDvalue+0x158>)
 80043e8:	9203      	str	r2, [sp, #12]
 80043ea:	2200      	movs	r2, #0
 80043ec:	9202      	str	r2, [sp, #8]
 80043ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80043f2:	9201      	str	r2, [sp, #4]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	9200      	str	r2, [sp, #0]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a1e      	ldr	r2, [pc, #120]	; (8004474 <LCDvalue+0x15c>)
 80043fc:	213c      	movs	r1, #60	; 0x3c
 80043fe:	2005      	movs	r0, #5
 8004400:	f001 f87d 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 35, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	781a      	ldrb	r2, [r3, #0]
 8004408:	4b17      	ldr	r3, [pc, #92]	; (8004468 <LCDvalue+0x150>)
 800440a:	9203      	str	r2, [sp, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	9202      	str	r2, [sp, #8]
 8004410:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8004414:	9201      	str	r2, [sp, #4]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	9200      	str	r2, [sp, #0]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a16      	ldr	r2, [pc, #88]	; (8004478 <LCDvalue+0x160>)
 800441e:	2123      	movs	r1, #35	; 0x23
 8004420:	2014      	movs	r0, #20
 8004422:	f001 f86c 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 60, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	781a      	ldrb	r2, [r3, #0]
 800442a:	4b11      	ldr	r3, [pc, #68]	; (8004470 <LCDvalue+0x158>)
 800442c:	9203      	str	r2, [sp, #12]
 800442e:	2200      	movs	r2, #0
 8004430:	9202      	str	r2, [sp, #8]
 8004432:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004436:	9201      	str	r2, [sp, #4]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	9200      	str	r2, [sp, #0]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4a0f      	ldr	r2, [pc, #60]	; (800447c <LCDvalue+0x164>)
 8004440:	213c      	movs	r1, #60	; 0x3c
 8004442:	2000      	movs	r0, #0
 8004444:	f001 f85b 	bl	80054fe <ST7735_WriteStringNSS>
 8004448:	e0c1      	b.n	80045ce <LCDvalue+0x2b6>
 800444a:	bf00      	nop
 800444c:	24000000 	.word	0x24000000
 8004450:	24000174 	.word	0x24000174
 8004454:	24000ea0 	.word	0x24000ea0
 8004458:	000f4240 	.word	0x000f4240
 800445c:	0800f9d4 	.word	0x0800f9d4
 8004460:	24000170 	.word	0x24000170
 8004464:	240002e8 	.word	0x240002e8
 8004468:	24000014 	.word	0x24000014
 800446c:	0800f6bc 	.word	0x0800f6bc
 8004470:	2400000c 	.word	0x2400000c
 8004474:	0800f9d8 	.word	0x0800f9d8
 8004478:	0800f6b4 	.word	0x0800f6b4
 800447c:	0800f9ec 	.word	0x0800f9ec
			}
			// Author CREDITTTTTT
			else if(credit == 1){
 8004480:	7a7b      	ldrb	r3, [r7, #9]
 8004482:	2b01      	cmp	r3, #1
 8004484:	f040 80a3 	bne.w	80045ce <LCDvalue+0x2b6>
				ST7735_WriteStringNSS(15, 25, "YOU LOSE", Font_11x18, ST7735_RED, ST7735_BLACK,playerAtk->displayNSS);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	781a      	ldrb	r2, [r3, #0]
 800448c:	4ba1      	ldr	r3, [pc, #644]	; (8004714 <LCDvalue+0x3fc>)
 800448e:	9203      	str	r2, [sp, #12]
 8004490:	2200      	movs	r2, #0
 8004492:	9202      	str	r2, [sp, #8]
 8004494:	221f      	movs	r2, #31
 8004496:	9201      	str	r2, [sp, #4]
 8004498:	685a      	ldr	r2, [r3, #4]
 800449a:	9200      	str	r2, [sp, #0]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	4a9e      	ldr	r2, [pc, #632]	; (8004718 <LCDvalue+0x400>)
 80044a0:	2119      	movs	r1, #25
 80044a2:	200f      	movs	r0, #15
 80044a4:	f001 f82b 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(5, 50, "player timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerAtk->displayNSS);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	781a      	ldrb	r2, [r3, #0]
 80044ac:	4b9b      	ldr	r3, [pc, #620]	; (800471c <LCDvalue+0x404>)
 80044ae:	9203      	str	r2, [sp, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	9202      	str	r2, [sp, #8]
 80044b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044b8:	9201      	str	r2, [sp, #4]
 80044ba:	685a      	ldr	r2, [r3, #4]
 80044bc:	9200      	str	r2, [sp, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	4a97      	ldr	r2, [pc, #604]	; (8004720 <LCDvalue+0x408>)
 80044c2:	2132      	movs	r1, #50	; 0x32
 80044c4:	2005      	movs	r0, #5
 80044c6:	f001 f81a 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(20, 25, "YOU WIN", Font_11x18, ST7735_YELLOW, ST7735_BLACK,playerDef->displayNSS);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	4b91      	ldr	r3, [pc, #580]	; (8004714 <LCDvalue+0x3fc>)
 80044d0:	9203      	str	r2, [sp, #12]
 80044d2:	2200      	movs	r2, #0
 80044d4:	9202      	str	r2, [sp, #8]
 80044d6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80044da:	9201      	str	r2, [sp, #4]
 80044dc:	685a      	ldr	r2, [r3, #4]
 80044de:	9200      	str	r2, [sp, #0]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a90      	ldr	r2, [pc, #576]	; (8004724 <LCDvalue+0x40c>)
 80044e4:	2119      	movs	r1, #25
 80044e6:	2014      	movs	r0, #20
 80044e8:	f001 f809 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 50, "opponent timed out", Font_7x10, ST7735_WHITE, ST7735_BLACK,playerDef->displayNSS);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	781a      	ldrb	r2, [r3, #0]
 80044f0:	4b8a      	ldr	r3, [pc, #552]	; (800471c <LCDvalue+0x404>)
 80044f2:	9203      	str	r2, [sp, #12]
 80044f4:	2200      	movs	r2, #0
 80044f6:	9202      	str	r2, [sp, #8]
 80044f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80044fc:	9201      	str	r2, [sp, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	9200      	str	r2, [sp, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a88      	ldr	r2, [pc, #544]	; (8004728 <LCDvalue+0x410>)
 8004506:	2132      	movs	r1, #50	; 0x32
 8004508:	2000      	movs	r0, #0
 800450a:	f000 fff8 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,0);
 800450e:	4b83      	ldr	r3, [pc, #524]	; (800471c <LCDvalue+0x404>)
 8004510:	2200      	movs	r2, #0
 8004512:	9203      	str	r2, [sp, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	9202      	str	r2, [sp, #8]
 8004518:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800451c:	9201      	str	r2, [sp, #4]
 800451e:	685a      	ldr	r2, [r3, #4]
 8004520:	9200      	str	r2, [sp, #0]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a81      	ldr	r2, [pc, #516]	; (800472c <LCDvalue+0x414>)
 8004526:	2141      	movs	r1, #65	; 0x41
 8004528:	2000      	movs	r0, #0
 800452a:	f000 ffe8 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 65, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK,1);
 800452e:	4b7b      	ldr	r3, [pc, #492]	; (800471c <LCDvalue+0x404>)
 8004530:	2201      	movs	r2, #1
 8004532:	9203      	str	r2, [sp, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	9202      	str	r2, [sp, #8]
 8004538:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800453c:	9201      	str	r2, [sp, #4]
 800453e:	685a      	ldr	r2, [r3, #4]
 8004540:	9200      	str	r2, [sp, #0]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a79      	ldr	r2, [pc, #484]	; (800472c <LCDvalue+0x414>)
 8004546:	2141      	movs	r1, #65	; 0x41
 8004548:	2000      	movs	r0, #0
 800454a:	f000 ffd8 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 100, "Dev1:TinnZx", Font_7x10, ST7735_CYAN, ST7735_BLACK,0);
 800454e:	4b73      	ldr	r3, [pc, #460]	; (800471c <LCDvalue+0x404>)
 8004550:	2200      	movs	r2, #0
 8004552:	9203      	str	r2, [sp, #12]
 8004554:	2200      	movs	r2, #0
 8004556:	9202      	str	r2, [sp, #8]
 8004558:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800455c:	9201      	str	r2, [sp, #4]
 800455e:	685a      	ldr	r2, [r3, #4]
 8004560:	9200      	str	r2, [sp, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a72      	ldr	r2, [pc, #456]	; (8004730 <LCDvalue+0x418>)
 8004566:	2164      	movs	r1, #100	; 0x64
 8004568:	2000      	movs	r0, #0
 800456a:	f000 ffc8 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev2:Azthorax", Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 800456e:	4b6b      	ldr	r3, [pc, #428]	; (800471c <LCDvalue+0x404>)
 8004570:	2200      	movs	r2, #0
 8004572:	9203      	str	r2, [sp, #12]
 8004574:	2200      	movs	r2, #0
 8004576:	9202      	str	r2, [sp, #8]
 8004578:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800457c:	9201      	str	r2, [sp, #4]
 800457e:	685a      	ldr	r2, [r3, #4]
 8004580:	9200      	str	r2, [sp, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a6b      	ldr	r2, [pc, #428]	; (8004734 <LCDvalue+0x41c>)
 8004586:	2173      	movs	r1, #115	; 0x73
 8004588:	2000      	movs	r0, #0
 800458a:	f000 ffb8 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 115, "Dev3:FANNUT", Font_7x10, ST7735_YELLOW, ST7735_BLACK,1);
 800458e:	4b63      	ldr	r3, [pc, #396]	; (800471c <LCDvalue+0x404>)
 8004590:	2201      	movs	r2, #1
 8004592:	9203      	str	r2, [sp, #12]
 8004594:	2200      	movs	r2, #0
 8004596:	9202      	str	r2, [sp, #8]
 8004598:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800459c:	9201      	str	r2, [sp, #4]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	9200      	str	r2, [sp, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a64      	ldr	r2, [pc, #400]	; (8004738 <LCDvalue+0x420>)
 80045a6:	2173      	movs	r1, #115	; 0x73
 80045a8:	2000      	movs	r0, #0
 80045aa:	f000 ffa8 	bl	80054fe <ST7735_WriteStringNSS>
				ST7735_WriteStringNSS(0, 90, "FRA421 Project", Font_7x10, ST7735_MAGENTA, ST7735_BLACK,1);
 80045ae:	4b5b      	ldr	r3, [pc, #364]	; (800471c <LCDvalue+0x404>)
 80045b0:	2201      	movs	r2, #1
 80045b2:	9203      	str	r2, [sp, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	9202      	str	r2, [sp, #8]
 80045b8:	f64f 021f 	movw	r2, #63519	; 0xf81f
 80045bc:	9201      	str	r2, [sp, #4]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	9200      	str	r2, [sp, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a5d      	ldr	r2, [pc, #372]	; (800473c <LCDvalue+0x424>)
 80045c6:	215a      	movs	r1, #90	; 0x5a
 80045c8:	2000      	movs	r0, #0
 80045ca:	f000 ff98 	bl	80054fe <ST7735_WriteStringNSS>
		while(time == 0){
 80045ce:	4b5c      	ldr	r3, [pc, #368]	; (8004740 <LCDvalue+0x428>)
 80045d0:	881b      	ldrh	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	f43f aef0 	beq.w	80043b8 <LCDvalue+0xa0>
			}
		}
	}

	sprintf(C_LP_ATK, "%d",playerAtk->life_point);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	889b      	ldrh	r3, [r3, #4]
 80045dc:	461a      	mov	r2, r3
 80045de:	4959      	ldr	r1, [pc, #356]	; (8004744 <LCDvalue+0x42c>)
 80045e0:	4859      	ldr	r0, [pc, #356]	; (8004748 <LCDvalue+0x430>)
 80045e2:	f00a fc95 	bl	800ef10 <siprintf>
	if(C_LP_ATK[3] == 0){
 80045e6:	4b58      	ldr	r3, [pc, #352]	; (8004748 <LCDvalue+0x430>)
 80045e8:	78db      	ldrb	r3, [r3, #3]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d10e      	bne.n	800460c <LCDvalue+0x2f4>
		C_LP_ATK[3] = C_LP_ATK[2];
 80045ee:	4b56      	ldr	r3, [pc, #344]	; (8004748 <LCDvalue+0x430>)
 80045f0:	789a      	ldrb	r2, [r3, #2]
 80045f2:	4b55      	ldr	r3, [pc, #340]	; (8004748 <LCDvalue+0x430>)
 80045f4:	70da      	strb	r2, [r3, #3]
		C_LP_ATK[2] = C_LP_ATK[1];
 80045f6:	4b54      	ldr	r3, [pc, #336]	; (8004748 <LCDvalue+0x430>)
 80045f8:	785a      	ldrb	r2, [r3, #1]
 80045fa:	4b53      	ldr	r3, [pc, #332]	; (8004748 <LCDvalue+0x430>)
 80045fc:	709a      	strb	r2, [r3, #2]
		C_LP_ATK[1] = C_LP_ATK[0];
 80045fe:	4b52      	ldr	r3, [pc, #328]	; (8004748 <LCDvalue+0x430>)
 8004600:	781a      	ldrb	r2, [r3, #0]
 8004602:	4b51      	ldr	r3, [pc, #324]	; (8004748 <LCDvalue+0x430>)
 8004604:	705a      	strb	r2, [r3, #1]
		C_LP_ATK[0] = 32;
 8004606:	4b50      	ldr	r3, [pc, #320]	; (8004748 <LCDvalue+0x430>)
 8004608:	2220      	movs	r2, #32
 800460a:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_ATK, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	781a      	ldrb	r2, [r3, #0]
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <LCDvalue+0x404>)
 8004612:	9203      	str	r2, [sp, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	9202      	str	r2, [sp, #8]
 8004618:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800461c:	9201      	str	r2, [sp, #4]
 800461e:	685a      	ldr	r2, [r3, #4]
 8004620:	9200      	str	r2, [sp, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a48      	ldr	r2, [pc, #288]	; (8004748 <LCDvalue+0x430>)
 8004626:	2114      	movs	r1, #20
 8004628:	205a      	movs	r0, #90	; 0x5a
 800462a:	f000 ff68 	bl	80054fe <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, t_c, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerAtk->displayNSS);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	781a      	ldrb	r2, [r3, #0]
 8004632:	4b3a      	ldr	r3, [pc, #232]	; (800471c <LCDvalue+0x404>)
 8004634:	9203      	str	r2, [sp, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	9202      	str	r2, [sp, #8]
 800463a:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 800463e:	9201      	str	r2, [sp, #4]
 8004640:	685a      	ldr	r2, [r3, #4]
 8004642:	9200      	str	r2, [sp, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a41      	ldr	r2, [pc, #260]	; (800474c <LCDvalue+0x434>)
 8004648:	2132      	movs	r1, #50	; 0x32
 800464a:	2069      	movs	r0, #105	; 0x69
 800464c:	f000 ff57 	bl	80054fe <ST7735_WriteStringNSS>
	sprintf(C_LP_DEF, "%d",playerDef->life_point);
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	889b      	ldrh	r3, [r3, #4]
 8004654:	461a      	mov	r2, r3
 8004656:	493b      	ldr	r1, [pc, #236]	; (8004744 <LCDvalue+0x42c>)
 8004658:	483d      	ldr	r0, [pc, #244]	; (8004750 <LCDvalue+0x438>)
 800465a:	f00a fc59 	bl	800ef10 <siprintf>
	if(C_LP_DEF[3] == 0){
 800465e:	4b3c      	ldr	r3, [pc, #240]	; (8004750 <LCDvalue+0x438>)
 8004660:	78db      	ldrb	r3, [r3, #3]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d10e      	bne.n	8004684 <LCDvalue+0x36c>
		C_LP_DEF[3] = C_LP_DEF[2];
 8004666:	4b3a      	ldr	r3, [pc, #232]	; (8004750 <LCDvalue+0x438>)
 8004668:	789a      	ldrb	r2, [r3, #2]
 800466a:	4b39      	ldr	r3, [pc, #228]	; (8004750 <LCDvalue+0x438>)
 800466c:	70da      	strb	r2, [r3, #3]
		C_LP_DEF[2] = C_LP_DEF[1];
 800466e:	4b38      	ldr	r3, [pc, #224]	; (8004750 <LCDvalue+0x438>)
 8004670:	785a      	ldrb	r2, [r3, #1]
 8004672:	4b37      	ldr	r3, [pc, #220]	; (8004750 <LCDvalue+0x438>)
 8004674:	709a      	strb	r2, [r3, #2]
		C_LP_DEF[1] = C_LP_DEF[0];
 8004676:	4b36      	ldr	r3, [pc, #216]	; (8004750 <LCDvalue+0x438>)
 8004678:	781a      	ldrb	r2, [r3, #0]
 800467a:	4b35      	ldr	r3, [pc, #212]	; (8004750 <LCDvalue+0x438>)
 800467c:	705a      	strb	r2, [r3, #1]
		C_LP_DEF[0] = 32;
 800467e:	4b34      	ldr	r3, [pc, #208]	; (8004750 <LCDvalue+0x438>)
 8004680:	2220      	movs	r2, #32
 8004682:	701a      	strb	r2, [r3, #0]
	}
	ST7735_WriteStringNSS( 90, 20, C_LP_DEF, Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	781a      	ldrb	r2, [r3, #0]
 8004688:	4b24      	ldr	r3, [pc, #144]	; (800471c <LCDvalue+0x404>)
 800468a:	9203      	str	r2, [sp, #12]
 800468c:	2200      	movs	r2, #0
 800468e:	9202      	str	r2, [sp, #8]
 8004690:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004694:	9201      	str	r2, [sp, #4]
 8004696:	685a      	ldr	r2, [r3, #4]
 8004698:	9200      	str	r2, [sp, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a2c      	ldr	r2, [pc, #176]	; (8004750 <LCDvalue+0x438>)
 800469e:	2114      	movs	r1, #20
 80046a0:	205a      	movs	r0, #90	; 0x5a
 80046a2:	f000 ff2c 	bl	80054fe <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK,playerDef->displayNSS);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	781a      	ldrb	r2, [r3, #0]
 80046aa:	4b1c      	ldr	r3, [pc, #112]	; (800471c <LCDvalue+0x404>)
 80046ac:	9203      	str	r2, [sp, #12]
 80046ae:	2200      	movs	r2, #0
 80046b0:	9202      	str	r2, [sp, #8]
 80046b2:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80046b6:	9201      	str	r2, [sp, #4]
 80046b8:	685a      	ldr	r2, [r3, #4]
 80046ba:	9200      	str	r2, [sp, #0]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a25      	ldr	r2, [pc, #148]	; (8004754 <LCDvalue+0x43c>)
 80046c0:	2132      	movs	r1, #50	; 0x32
 80046c2:	2069      	movs	r0, #105	; 0x69
 80046c4:	f000 ff1b 	bl	80054fe <ST7735_WriteStringNSS>
	sprintf(c_turn, "%d",turn);
 80046c8:	4b23      	ldr	r3, [pc, #140]	; (8004758 <LCDvalue+0x440>)
 80046ca:	781b      	ldrb	r3, [r3, #0]
 80046cc:	461a      	mov	r2, r3
 80046ce:	491d      	ldr	r1, [pc, #116]	; (8004744 <LCDvalue+0x42c>)
 80046d0:	4822      	ldr	r0, [pc, #136]	; (800475c <LCDvalue+0x444>)
 80046d2:	f00a fc1d 	bl	800ef10 <siprintf>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,0);
 80046d6:	4b11      	ldr	r3, [pc, #68]	; (800471c <LCDvalue+0x404>)
 80046d8:	2200      	movs	r2, #0
 80046da:	9203      	str	r2, [sp, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	9202      	str	r2, [sp, #8]
 80046e0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80046e4:	9201      	str	r2, [sp, #4]
 80046e6:	685a      	ldr	r2, [r3, #4]
 80046e8:	9200      	str	r2, [sp, #0]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a1b      	ldr	r2, [pc, #108]	; (800475c <LCDvalue+0x444>)
 80046ee:	2123      	movs	r1, #35	; 0x23
 80046f0:	2032      	movs	r0, #50	; 0x32
 80046f2:	f000 ff04 	bl	80054fe <ST7735_WriteStringNSS>
	ST7735_WriteStringNSS(50, 35, c_turn, Font_7x10, ST7735_GREEN, ST7735_BLACK,1);
 80046f6:	4b09      	ldr	r3, [pc, #36]	; (800471c <LCDvalue+0x404>)
 80046f8:	2201      	movs	r2, #1
 80046fa:	9203      	str	r2, [sp, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	9202      	str	r2, [sp, #8]
 8004700:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8004704:	9201      	str	r2, [sp, #4]
 8004706:	685a      	ldr	r2, [r3, #4]
 8004708:	9200      	str	r2, [sp, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <LCDvalue+0x444>)
 800470e:	2123      	movs	r1, #35	; 0x23
 8004710:	2032      	movs	r0, #50	; 0x32
 8004712:	e025      	b.n	8004760 <LCDvalue+0x448>
 8004714:	24000014 	.word	0x24000014
 8004718:	0800f6bc 	.word	0x0800f6bc
 800471c:	2400000c 	.word	0x2400000c
 8004720:	0800f9d8 	.word	0x0800f9d8
 8004724:	0800f6b4 	.word	0x0800f6b4
 8004728:	0800f9ec 	.word	0x0800f9ec
 800472c:	0800f630 	.word	0x0800f630
 8004730:	0800fa00 	.word	0x0800fa00
 8004734:	0800fa0c 	.word	0x0800fa0c
 8004738:	0800fa1c 	.word	0x0800fa1c
 800473c:	0800fa28 	.word	0x0800fa28
 8004740:	24000174 	.word	0x24000174
 8004744:	0800f9d4 	.word	0x0800f9d4
 8004748:	24000164 	.word	0x24000164
 800474c:	24000170 	.word	0x24000170
 8004750:	24000168 	.word	0x24000168
 8004754:	0800f680 	.word	0x0800f680
 8004758:	24000176 	.word	0x24000176
 800475c:	2400016c 	.word	0x2400016c
 8004760:	f000 fecd 	bl	80054fe <ST7735_WriteStringNSS>

}
 8004764:	bf00      	nop
 8004766:	3710      	adds	r7, #16
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800476c:	b480      	push	{r7}
 800476e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8004770:	4b3d      	ldr	r3, [pc, #244]	; (8004868 <SystemInit+0xfc>)
 8004772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004776:	4a3c      	ldr	r2, [pc, #240]	; (8004868 <SystemInit+0xfc>)
 8004778:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800477c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8004780:	4b39      	ldr	r3, [pc, #228]	; (8004868 <SystemInit+0xfc>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	4a38      	ldr	r2, [pc, #224]	; (8004868 <SystemInit+0xfc>)
 8004786:	f043 0310 	orr.w	r3, r3, #16
 800478a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800478c:	4b37      	ldr	r3, [pc, #220]	; (800486c <SystemInit+0x100>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f003 030f 	and.w	r3, r3, #15
 8004794:	2b06      	cmp	r3, #6
 8004796:	d807      	bhi.n	80047a8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8004798:	4b34      	ldr	r3, [pc, #208]	; (800486c <SystemInit+0x100>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f023 030f 	bic.w	r3, r3, #15
 80047a0:	4a32      	ldr	r2, [pc, #200]	; (800486c <SystemInit+0x100>)
 80047a2:	f043 0307 	orr.w	r3, r3, #7
 80047a6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80047a8:	4b31      	ldr	r3, [pc, #196]	; (8004870 <SystemInit+0x104>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	4a30      	ldr	r2, [pc, #192]	; (8004870 <SystemInit+0x104>)
 80047ae:	f043 0301 	orr.w	r3, r3, #1
 80047b2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80047b4:	4b2e      	ldr	r3, [pc, #184]	; (8004870 <SystemInit+0x104>)
 80047b6:	2200      	movs	r2, #0
 80047b8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80047ba:	4b2d      	ldr	r3, [pc, #180]	; (8004870 <SystemInit+0x104>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	492c      	ldr	r1, [pc, #176]	; (8004870 <SystemInit+0x104>)
 80047c0:	4b2c      	ldr	r3, [pc, #176]	; (8004874 <SystemInit+0x108>)
 80047c2:	4013      	ands	r3, r2
 80047c4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80047c6:	4b29      	ldr	r3, [pc, #164]	; (800486c <SystemInit+0x100>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f003 0308 	and.w	r3, r3, #8
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d007      	beq.n	80047e2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80047d2:	4b26      	ldr	r3, [pc, #152]	; (800486c <SystemInit+0x100>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f023 030f 	bic.w	r3, r3, #15
 80047da:	4a24      	ldr	r2, [pc, #144]	; (800486c <SystemInit+0x100>)
 80047dc:	f043 0307 	orr.w	r3, r3, #7
 80047e0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80047e2:	4b23      	ldr	r3, [pc, #140]	; (8004870 <SystemInit+0x104>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80047e8:	4b21      	ldr	r3, [pc, #132]	; (8004870 <SystemInit+0x104>)
 80047ea:	2200      	movs	r2, #0
 80047ec:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80047ee:	4b20      	ldr	r3, [pc, #128]	; (8004870 <SystemInit+0x104>)
 80047f0:	2200      	movs	r2, #0
 80047f2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80047f4:	4b1e      	ldr	r3, [pc, #120]	; (8004870 <SystemInit+0x104>)
 80047f6:	4a20      	ldr	r2, [pc, #128]	; (8004878 <SystemInit+0x10c>)
 80047f8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80047fa:	4b1d      	ldr	r3, [pc, #116]	; (8004870 <SystemInit+0x104>)
 80047fc:	4a1f      	ldr	r2, [pc, #124]	; (800487c <SystemInit+0x110>)
 80047fe:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8004800:	4b1b      	ldr	r3, [pc, #108]	; (8004870 <SystemInit+0x104>)
 8004802:	4a1f      	ldr	r2, [pc, #124]	; (8004880 <SystemInit+0x114>)
 8004804:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8004806:	4b1a      	ldr	r3, [pc, #104]	; (8004870 <SystemInit+0x104>)
 8004808:	2200      	movs	r2, #0
 800480a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800480c:	4b18      	ldr	r3, [pc, #96]	; (8004870 <SystemInit+0x104>)
 800480e:	4a1c      	ldr	r2, [pc, #112]	; (8004880 <SystemInit+0x114>)
 8004810:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8004812:	4b17      	ldr	r3, [pc, #92]	; (8004870 <SystemInit+0x104>)
 8004814:	2200      	movs	r2, #0
 8004816:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8004818:	4b15      	ldr	r3, [pc, #84]	; (8004870 <SystemInit+0x104>)
 800481a:	4a19      	ldr	r2, [pc, #100]	; (8004880 <SystemInit+0x114>)
 800481c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800481e:	4b14      	ldr	r3, [pc, #80]	; (8004870 <SystemInit+0x104>)
 8004820:	2200      	movs	r2, #0
 8004822:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004824:	4b12      	ldr	r3, [pc, #72]	; (8004870 <SystemInit+0x104>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a11      	ldr	r2, [pc, #68]	; (8004870 <SystemInit+0x104>)
 800482a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800482e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8004830:	4b0f      	ldr	r3, [pc, #60]	; (8004870 <SystemInit+0x104>)
 8004832:	2200      	movs	r2, #0
 8004834:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8004836:	4b13      	ldr	r3, [pc, #76]	; (8004884 <SystemInit+0x118>)
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	4a12      	ldr	r2, [pc, #72]	; (8004884 <SystemInit+0x118>)
 800483c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004840:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8004842:	4b11      	ldr	r3, [pc, #68]	; (8004888 <SystemInit+0x11c>)
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <SystemInit+0x120>)
 8004848:	4013      	ands	r3, r2
 800484a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800484e:	d202      	bcs.n	8004856 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <SystemInit+0x124>)
 8004852:	2201      	movs	r2, #1
 8004854:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8004856:	4b0f      	ldr	r3, [pc, #60]	; (8004894 <SystemInit+0x128>)
 8004858:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800485c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr
 8004868:	e000ed00 	.word	0xe000ed00
 800486c:	52002000 	.word	0x52002000
 8004870:	58024400 	.word	0x58024400
 8004874:	eaf6ed7f 	.word	0xeaf6ed7f
 8004878:	02020200 	.word	0x02020200
 800487c:	01ff0000 	.word	0x01ff0000
 8004880:	01010280 	.word	0x01010280
 8004884:	580000c0 	.word	0x580000c0
 8004888:	5c001000 	.word	0x5c001000
 800488c:	ffff0000 	.word	0xffff0000
 8004890:	51008108 	.word	0x51008108
 8004894:	52004000 	.word	0x52004000

08004898 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b082      	sub	sp, #8
 800489c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800489e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80048a2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80048a4:	bf00      	nop
 80048a6:	4b37      	ldr	r3, [pc, #220]	; (8004984 <main+0xec>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d004      	beq.n	80048bc <main+0x24>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	1e5a      	subs	r2, r3, #1
 80048b6:	607a      	str	r2, [r7, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	dcf4      	bgt.n	80048a6 <main+0xe>
	if ( timeout < 0 )
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	da01      	bge.n	80048c6 <main+0x2e>
	{
		Error_Handler();
 80048c2:	f000 fbeb 	bl	800509c <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80048c6:	f001 fb69 	bl	8005f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80048ca:	f000 f863 	bl	8004994 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80048ce:	f000 f8e5 	bl	8004a9c <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 80048d2:	4b2c      	ldr	r3, [pc, #176]	; (8004984 <main+0xec>)
 80048d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048d8:	4a2a      	ldr	r2, [pc, #168]	; (8004984 <main+0xec>)
 80048da:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80048de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80048e2:	4b28      	ldr	r3, [pc, #160]	; (8004984 <main+0xec>)
 80048e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80048e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048ec:	603b      	str	r3, [r7, #0]
 80048ee:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 80048f0:	2000      	movs	r0, #0
 80048f2:	f004 fd7f 	bl	80093f4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 80048f6:	2100      	movs	r1, #0
 80048f8:	2000      	movs	r0, #0
 80048fa:	f004 fd95 	bl	8009428 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 80048fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004902:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8004904:	bf00      	nop
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <main+0xec>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d104      	bne.n	800491c <main+0x84>
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	1e5a      	subs	r2, r3, #1
 8004916:	607a      	str	r2, [r7, #4]
 8004918:	2b00      	cmp	r3, #0
 800491a:	dcf4      	bgt.n	8004906 <main+0x6e>
	if ( timeout < 0 )
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da01      	bge.n	8004926 <main+0x8e>
	{
		Error_Handler();
 8004922:	f000 fbbb 	bl	800509c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004926:	f000 fa6d 	bl	8004e04 <MX_GPIO_Init>
  MX_ETH_Init();
 800492a:	f000 f8e9 	bl	8004b00 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800492e:	f000 f9c1 	bl	8004cb4 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8004932:	f000 fa3f 	bl	8004db4 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8004936:	f000 fa0b 	bl	8004d50 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 800493a:	f000 f92d 	bl	8004b98 <MX_SPI3_Init>
  MX_TIM7_Init();
 800493e:	f000 f983 	bl	8004c48 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8004942:	f000 fcb3 	bl	80052ac <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8004946:	2000      	movs	r0, #0
 8004948:	f000 ffbd 	bl	80058c6 <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 800494c:	2000      	movs	r0, #0
 800494e:	f000 ffa9 	bl	80058a4 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8004952:	f001 fba9 	bl	80060a8 <HAL_GetTick>
 8004956:	4602      	mov	r2, r0
 8004958:	4b0b      	ldr	r3, [pc, #44]	; (8004988 <main+0xf0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	2bc8      	cmp	r3, #200	; 0xc8
 8004960:	d9f7      	bls.n	8004952 <main+0xba>
		{
			timemsM7_LED = HAL_GetTick();
 8004962:	f001 fba1 	bl	80060a8 <HAL_GetTick>
 8004966:	4603      	mov	r3, r0
 8004968:	4a07      	ldr	r2, [pc, #28]	; (8004988 <main+0xf0>)
 800496a:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800496c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004970:	4806      	ldr	r0, [pc, #24]	; (800498c <main+0xf4>)
 8004972:	f004 fd24 	bl	80093be <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8004976:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 800497a:	4905      	ldr	r1, [pc, #20]	; (8004990 <main+0xf8>)
 800497c:	4618      	mov	r0, r3
 800497e:	f7fc fc69 	bl	8001254 <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8004982:	e7e6      	b.n	8004952 <main+0xba>
 8004984:	58024400 	.word	0x58024400
 8004988:	24000e98 	.word	0x24000e98
 800498c:	58020400 	.word	0x58020400
 8004990:	240009c0 	.word	0x240009c0

08004994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b09c      	sub	sp, #112	; 0x70
 8004998:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800499a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800499e:	224c      	movs	r2, #76	; 0x4c
 80049a0:	2100      	movs	r1, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f00a f9bc 	bl	800ed20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049a8:	1d3b      	adds	r3, r7, #4
 80049aa:	2220      	movs	r2, #32
 80049ac:	2100      	movs	r1, #0
 80049ae:	4618      	mov	r0, r3
 80049b0:	f00a f9b6 	bl	800ed20 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80049b4:	2004      	movs	r0, #4
 80049b6:	f004 fe93 	bl	80096e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80049ba:	2300      	movs	r3, #0
 80049bc:	603b      	str	r3, [r7, #0]
 80049be:	4b34      	ldr	r3, [pc, #208]	; (8004a90 <SystemClock_Config+0xfc>)
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	4a33      	ldr	r2, [pc, #204]	; (8004a90 <SystemClock_Config+0xfc>)
 80049c4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049c8:	6193      	str	r3, [r2, #24]
 80049ca:	4b31      	ldr	r3, [pc, #196]	; (8004a90 <SystemClock_Config+0xfc>)
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	4b2f      	ldr	r3, [pc, #188]	; (8004a94 <SystemClock_Config+0x100>)
 80049d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049d8:	4a2e      	ldr	r2, [pc, #184]	; (8004a94 <SystemClock_Config+0x100>)
 80049da:	f043 0301 	orr.w	r3, r3, #1
 80049de:	62d3      	str	r3, [r2, #44]	; 0x2c
 80049e0:	4b2c      	ldr	r3, [pc, #176]	; (8004a94 <SystemClock_Config+0x100>)
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	f003 0301 	and.w	r3, r3, #1
 80049e8:	603b      	str	r3, [r7, #0]
 80049ea:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80049ec:	bf00      	nop
 80049ee:	4b28      	ldr	r3, [pc, #160]	; (8004a90 <SystemClock_Config+0xfc>)
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80049f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049fa:	d1f8      	bne.n	80049ee <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 80049fc:	4b26      	ldr	r3, [pc, #152]	; (8004a98 <SystemClock_Config+0x104>)
 80049fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a00:	f023 0303 	bic.w	r3, r3, #3
 8004a04:	4a24      	ldr	r2, [pc, #144]	; (8004a98 <SystemClock_Config+0x104>)
 8004a06:	f043 0302 	orr.w	r3, r3, #2
 8004a0a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004a0c:	2301      	movs	r3, #1
 8004a0e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004a10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8004a14:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004a16:	2302      	movs	r3, #2
 8004a18:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8004a1e:	2301      	movs	r3, #1
 8004a20:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8004a22:	2378      	movs	r3, #120	; 0x78
 8004a24:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8004a26:	2302      	movs	r3, #2
 8004a28:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8004a2e:	2302      	movs	r3, #2
 8004a30:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8004a32:	230c      	movs	r3, #12
 8004a34:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004a36:	2300      	movs	r3, #0
 8004a38:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a42:	4618      	mov	r0, r3
 8004a44:	f004 feb6 	bl	80097b4 <HAL_RCC_OscConfig>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d001      	beq.n	8004a52 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8004a4e:	f000 fb25 	bl	800509c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a52:	233f      	movs	r3, #63	; 0x3f
 8004a54:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a56:	2303      	movs	r3, #3
 8004a58:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004a5e:	2308      	movs	r3, #8
 8004a60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004a62:	2340      	movs	r3, #64	; 0x40
 8004a64:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a6e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004a70:	2340      	movs	r3, #64	; 0x40
 8004a72:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8004a74:	1d3b      	adds	r3, r7, #4
 8004a76:	2104      	movs	r1, #4
 8004a78:	4618      	mov	r0, r3
 8004a7a:	f005 fac9 	bl	800a010 <HAL_RCC_ClockConfig>
 8004a7e:	4603      	mov	r3, r0
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8004a84:	f000 fb0a 	bl	800509c <Error_Handler>
  }
}
 8004a88:	bf00      	nop
 8004a8a:	3770      	adds	r7, #112	; 0x70
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	58024800 	.word	0x58024800
 8004a94:	58000400 	.word	0x58000400
 8004a98:	58024400 	.word	0x58024400

08004a9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b0b0      	sub	sp, #192	; 0xc0
 8004aa0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004aa2:	1d3b      	adds	r3, r7, #4
 8004aa4:	22bc      	movs	r2, #188	; 0xbc
 8004aa6:	2100      	movs	r1, #0
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f00a f939 	bl	800ed20 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8004aae:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8004ab2:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8004ab8:	2318      	movs	r3, #24
 8004aba:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8004abc:	2302      	movs	r3, #2
 8004abe:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8004ac0:	2304      	movs	r3, #4
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8004ac4:	2302      	movs	r3, #2
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8004ac8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004acc:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8004ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ada:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8004adc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004ae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004ae4:	1d3b      	adds	r3, r7, #4
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f005 fe1e 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d001      	beq.n	8004af6 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8004af2:	f000 fad3 	bl	800509c <Error_Handler>
  }
}
 8004af6:	bf00      	nop
 8004af8:	37c0      	adds	r7, #192	; 0xc0
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8004b04:	4b1e      	ldr	r3, [pc, #120]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b06:	4a1f      	ldr	r2, [pc, #124]	; (8004b84 <MX_ETH_Init+0x84>)
 8004b08:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004b0a:	4b1f      	ldr	r3, [pc, #124]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8004b10:	4b1d      	ldr	r3, [pc, #116]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8004b16:	4b1c      	ldr	r3, [pc, #112]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b18:	22e1      	movs	r2, #225	; 0xe1
 8004b1a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8004b1c:	4b1a      	ldr	r3, [pc, #104]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8004b22:	4b19      	ldr	r3, [pc, #100]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b24:	2200      	movs	r2, #0
 8004b26:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8004b28:	4b17      	ldr	r3, [pc, #92]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8004b2e:	4b14      	ldr	r3, [pc, #80]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b30:	4a15      	ldr	r2, [pc, #84]	; (8004b88 <MX_ETH_Init+0x88>)
 8004b32:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004b34:	4b12      	ldr	r3, [pc, #72]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b3c:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <MX_ETH_Init+0x8c>)
 8004b3e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004b40:	4b0f      	ldr	r3, [pc, #60]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b42:	4a13      	ldr	r2, [pc, #76]	; (8004b90 <MX_ETH_Init+0x90>)
 8004b44:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8004b46:	4b0e      	ldr	r3, [pc, #56]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b48:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8004b4c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8004b4e:	480c      	ldr	r0, [pc, #48]	; (8004b80 <MX_ETH_Init+0x80>)
 8004b50:	f003 fe30 	bl	80087b4 <HAL_ETH_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8004b5a:	f000 fa9f 	bl	800509c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004b5e:	2238      	movs	r2, #56	; 0x38
 8004b60:	2100      	movs	r1, #0
 8004b62:	480c      	ldr	r0, [pc, #48]	; (8004b94 <MX_ETH_Init+0x94>)
 8004b64:	f00a f8dc 	bl	800ed20 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <MX_ETH_Init+0x94>)
 8004b6a:	2221      	movs	r2, #33	; 0x21
 8004b6c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004b6e:	4b09      	ldr	r3, [pc, #36]	; (8004b94 <MX_ETH_Init+0x94>)
 8004b70:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004b74:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <MX_ETH_Init+0x94>)
 8004b78:	2200      	movs	r2, #0
 8004b7a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8004b7c:	bf00      	nop
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	240001b0 	.word	0x240001b0
 8004b84:	40028000 	.word	0x40028000
 8004b88:	24000ea8 	.word	0x24000ea8
 8004b8c:	240000e8 	.word	0x240000e8
 8004b90:	24000088 	.word	0x24000088
 8004b94:	24000178 	.word	0x24000178

08004b98 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8004b9c:	4b28      	ldr	r3, [pc, #160]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004b9e:	4a29      	ldr	r2, [pc, #164]	; (8004c44 <MX_SPI3_Init+0xac>)
 8004ba0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004ba2:	4b27      	ldr	r3, [pc, #156]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004ba4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8004ba8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8004baa:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bac:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004bb0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004bb2:	4b23      	ldr	r3, [pc, #140]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bb4:	2207      	movs	r2, #7
 8004bb6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bb8:	4b21      	ldr	r3, [pc, #132]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004bbe:	4b20      	ldr	r3, [pc, #128]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004bc4:	4b1e      	ldr	r3, [pc, #120]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bc6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004bca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bce:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bd2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004bd4:	4b1a      	ldr	r3, [pc, #104]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004bda:	4b19      	ldr	r3, [pc, #100]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bdc:	2200      	movs	r2, #0
 8004bde:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004be0:	4b17      	ldr	r3, [pc, #92]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8004be6:	4b16      	ldr	r3, [pc, #88]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004be8:	2200      	movs	r2, #0
 8004bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004bec:	4b14      	ldr	r3, [pc, #80]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004bf2:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8004bf4:	4b12      	ldr	r3, [pc, #72]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8004bfa:	4b11      	ldr	r3, [pc, #68]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c00:	4b0f      	ldr	r3, [pc, #60]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8004c06:	4b0e      	ldr	r3, [pc, #56]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c08:	2200      	movs	r2, #0
 8004c0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8004c0c:	4b0c      	ldr	r3, [pc, #48]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c0e:	2200      	movs	r2, #0
 8004c10:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8004c12:	4b0b      	ldr	r3, [pc, #44]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8004c18:	4b09      	ldr	r3, [pc, #36]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8004c1e:	4b08      	ldr	r3, [pc, #32]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c20:	2200      	movs	r2, #0
 8004c22:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c26:	2200      	movs	r2, #0
 8004c28:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004c2a:	4805      	ldr	r0, [pc, #20]	; (8004c40 <MX_SPI3_Init+0xa8>)
 8004c2c:	f007 f8e4 	bl	800bdf8 <HAL_SPI_Init>
 8004c30:	4603      	mov	r3, r0
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d001      	beq.n	8004c3a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8004c36:	f000 fa31 	bl	800509c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8004c3a:	bf00      	nop
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	24000260 	.word	0x24000260
 8004c44:	40003c00 	.word	0x40003c00

08004c48 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b084      	sub	sp, #16
 8004c4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004c4e:	1d3b      	adds	r3, r7, #4
 8004c50:	2200      	movs	r2, #0
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	605a      	str	r2, [r3, #4]
 8004c56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8004c58:	4b14      	ldr	r3, [pc, #80]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c5a:	4a15      	ldr	r2, [pc, #84]	; (8004cb0 <MX_TIM7_Init+0x68>)
 8004c5c:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 239;
 8004c5e:	4b13      	ldr	r3, [pc, #76]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c60:	22ef      	movs	r2, #239	; 0xef
 8004c62:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c64:	4b11      	ldr	r3, [pc, #68]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 65535;
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c70:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c72:	4b0e      	ldr	r3, [pc, #56]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8004c78:	480c      	ldr	r0, [pc, #48]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c7a:	f007 fc9e 	bl	800c5ba <HAL_TIM_Base_Init>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8004c84:	f000 fa0a 	bl	800509c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8004c90:	1d3b      	adds	r3, r7, #4
 8004c92:	4619      	mov	r1, r3
 8004c94:	4805      	ldr	r0, [pc, #20]	; (8004cac <MX_TIM7_Init+0x64>)
 8004c96:	f007 ff6f 	bl	800cb78 <HAL_TIMEx_MasterConfigSynchronization>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8004ca0:	f000 f9fc 	bl	800509c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8004ca4:	bf00      	nop
 8004ca6:	3710      	adds	r7, #16
 8004ca8:	46bd      	mov	sp, r7
 8004caa:	bd80      	pop	{r7, pc}
 8004cac:	240002e8 	.word	0x240002e8
 8004cb0:	40001400 	.word	0x40001400

08004cb4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8004cb8:	4b22      	ldr	r3, [pc, #136]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cba:	4a23      	ldr	r2, [pc, #140]	; (8004d48 <MX_USART3_UART_Init+0x94>)
 8004cbc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8004cbe:	4b21      	ldr	r3, [pc, #132]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cc0:	4a22      	ldr	r2, [pc, #136]	; (8004d4c <MX_USART3_UART_Init+0x98>)
 8004cc2:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8004cc4:	4b1f      	ldr	r3, [pc, #124]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8004cca:	4b1e      	ldr	r3, [pc, #120]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8004cd0:	4b1c      	ldr	r3, [pc, #112]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8004cd6:	4b1b      	ldr	r3, [pc, #108]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cd8:	220c      	movs	r2, #12
 8004cda:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004cdc:	4b19      	ldr	r3, [pc, #100]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cde:	2200      	movs	r2, #0
 8004ce0:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8004ce2:	4b18      	ldr	r3, [pc, #96]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004ce8:	4b16      	ldr	r3, [pc, #88]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004cee:	4b15      	ldr	r3, [pc, #84]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004cf4:	4b13      	ldr	r3, [pc, #76]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8004cfa:	4812      	ldr	r0, [pc, #72]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004cfc:	f007 ffe8 	bl	800ccd0 <HAL_UART_Init>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d001      	beq.n	8004d0a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8004d06:	f000 f9c9 	bl	800509c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d0a:	2100      	movs	r1, #0
 8004d0c:	480d      	ldr	r0, [pc, #52]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004d0e:	f009 fc09 	bl	800e524 <HAL_UARTEx_SetTxFifoThreshold>
 8004d12:	4603      	mov	r3, r0
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d001      	beq.n	8004d1c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8004d18:	f000 f9c0 	bl	800509c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004d1c:	2100      	movs	r1, #0
 8004d1e:	4809      	ldr	r0, [pc, #36]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004d20:	f009 fc3e 	bl	800e5a0 <HAL_UARTEx_SetRxFifoThreshold>
 8004d24:	4603      	mov	r3, r0
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8004d2a:	f000 f9b7 	bl	800509c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8004d2e:	4805      	ldr	r0, [pc, #20]	; (8004d44 <MX_USART3_UART_Init+0x90>)
 8004d30:	f009 fbbf 	bl	800e4b2 <HAL_UARTEx_DisableFifoMode>
 8004d34:	4603      	mov	r3, r0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d001      	beq.n	8004d3e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8004d3a:	f000 f9af 	bl	800509c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8004d3e:	bf00      	nop
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	bf00      	nop
 8004d44:	24000334 	.word	0x24000334
 8004d48:	40004800 	.word	0x40004800
 8004d4c:	0005dc00 	.word	0x0005dc00

08004d50 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8004d54:	4b15      	ldr	r3, [pc, #84]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d56:	4a16      	ldr	r2, [pc, #88]	; (8004db0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8004d58:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8004d5a:	4b14      	ldr	r3, [pc, #80]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d5c:	2209      	movs	r2, #9
 8004d5e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8004d60:	4b12      	ldr	r3, [pc, #72]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d62:	2202      	movs	r2, #2
 8004d64:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8004d66:	4b11      	ldr	r3, [pc, #68]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8004d6c:	4b0f      	ldr	r3, [pc, #60]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d6e:	2202      	movs	r2, #2
 8004d70:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8004d72:	4b0e      	ldr	r3, [pc, #56]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d74:	2200      	movs	r2, #0
 8004d76:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8004d78:	4b0c      	ldr	r3, [pc, #48]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8004d7e:	4b0b      	ldr	r3, [pc, #44]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8004d84:	4b09      	ldr	r3, [pc, #36]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d86:	2201      	movs	r2, #1
 8004d88:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8004d8a:	4b08      	ldr	r3, [pc, #32]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8004d90:	4b06      	ldr	r3, [pc, #24]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8004d96:	4805      	ldr	r0, [pc, #20]	; (8004dac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8004d98:	f004 fb5a 	bl	8009450 <HAL_PCD_Init>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d001      	beq.n	8004da6 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8004da2:	f000 f97b 	bl	800509c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8004da6:	bf00      	nop
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	240004b4 	.word	0x240004b4
 8004db0:	40080000 	.word	0x40080000

08004db4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004dba:	4b11      	ldr	r3, [pc, #68]	; (8004e00 <MX_DMA_Init+0x4c>)
 8004dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dc0:	4a0f      	ldr	r2, [pc, #60]	; (8004e00 <MX_DMA_Init+0x4c>)
 8004dc2:	f043 0301 	orr.w	r3, r3, #1
 8004dc6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8004dca:	4b0d      	ldr	r3, [pc, #52]	; (8004e00 <MX_DMA_Init+0x4c>)
 8004dcc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004dd0:	f003 0301 	and.w	r3, r3, #1
 8004dd4:	607b      	str	r3, [r7, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8004dd8:	2200      	movs	r2, #0
 8004dda:	2100      	movs	r1, #0
 8004ddc:	200c      	movs	r0, #12
 8004dde:	f001 fa8e 	bl	80062fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8004de2:	200c      	movs	r0, #12
 8004de4:	f001 faa5 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8004de8:	2200      	movs	r2, #0
 8004dea:	2100      	movs	r1, #0
 8004dec:	200f      	movs	r0, #15
 8004dee:	f001 fa86 	bl	80062fe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8004df2:	200f      	movs	r0, #15
 8004df4:	f001 fa9d 	bl	8006332 <HAL_NVIC_EnableIRQ>

}
 8004df8:	bf00      	nop
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	58024400 	.word	0x58024400

08004e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004e0e:	2200      	movs	r2, #0
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	605a      	str	r2, [r3, #4]
 8004e14:	609a      	str	r2, [r3, #8]
 8004e16:	60da      	str	r2, [r3, #12]
 8004e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004e1a:	4b8a      	ldr	r3, [pc, #552]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e20:	4a88      	ldr	r2, [pc, #544]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e2a:	4b86      	ldr	r3, [pc, #536]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e30:	f003 0304 	and.w	r3, r3, #4
 8004e34:	623b      	str	r3, [r7, #32]
 8004e36:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004e38:	4b82      	ldr	r3, [pc, #520]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e3e:	4a81      	ldr	r2, [pc, #516]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e44:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e48:	4b7e      	ldr	r3, [pc, #504]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e52:	61fb      	str	r3, [r7, #28]
 8004e54:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e56:	4b7b      	ldr	r3, [pc, #492]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e5c:	4a79      	ldr	r2, [pc, #484]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e5e:	f043 0301 	orr.w	r3, r3, #1
 8004e62:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e66:	4b77      	ldr	r3, [pc, #476]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e74:	4b73      	ldr	r3, [pc, #460]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e7a:	4a72      	ldr	r2, [pc, #456]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e7c:	f043 0302 	orr.w	r3, r3, #2
 8004e80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004e84:	4b6f      	ldr	r3, [pc, #444]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e92:	4b6c      	ldr	r3, [pc, #432]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004e98:	4a6a      	ldr	r2, [pc, #424]	; (8005044 <MX_GPIO_Init+0x240>)
 8004e9a:	f043 0320 	orr.w	r3, r3, #32
 8004e9e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ea2:	4b68      	ldr	r3, [pc, #416]	; (8005044 <MX_GPIO_Init+0x240>)
 8004ea4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ea8:	f003 0320 	and.w	r3, r3, #32
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004eb0:	4b64      	ldr	r3, [pc, #400]	; (8005044 <MX_GPIO_Init+0x240>)
 8004eb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004eb6:	4a63      	ldr	r2, [pc, #396]	; (8005044 <MX_GPIO_Init+0x240>)
 8004eb8:	f043 0310 	orr.w	r3, r3, #16
 8004ebc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ec0:	4b60      	ldr	r3, [pc, #384]	; (8005044 <MX_GPIO_Init+0x240>)
 8004ec2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ec6:	f003 0310 	and.w	r3, r3, #16
 8004eca:	60fb      	str	r3, [r7, #12]
 8004ecc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004ece:	4b5d      	ldr	r3, [pc, #372]	; (8005044 <MX_GPIO_Init+0x240>)
 8004ed0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ed4:	4a5b      	ldr	r2, [pc, #364]	; (8005044 <MX_GPIO_Init+0x240>)
 8004ed6:	f043 0308 	orr.w	r3, r3, #8
 8004eda:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004ede:	4b59      	ldr	r3, [pc, #356]	; (8005044 <MX_GPIO_Init+0x240>)
 8004ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004eec:	4b55      	ldr	r3, [pc, #340]	; (8005044 <MX_GPIO_Init+0x240>)
 8004eee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ef2:	4a54      	ldr	r2, [pc, #336]	; (8005044 <MX_GPIO_Init+0x240>)
 8004ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ef8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8004efc:	4b51      	ldr	r3, [pc, #324]	; (8005044 <MX_GPIO_Init+0x240>)
 8004efe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	607b      	str	r3, [r7, #4]
 8004f08:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8004f10:	484d      	ldr	r0, [pc, #308]	; (8005048 <MX_GPIO_Init+0x244>)
 8004f12:	f004 fa3b 	bl	800938c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8004f16:	2200      	movs	r2, #0
 8004f18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004f1c:	484a      	ldr	r0, [pc, #296]	; (8005048 <MX_GPIO_Init+0x244>)
 8004f1e:	f004 fa35 	bl	800938c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8004f22:	2200      	movs	r2, #0
 8004f24:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004f28:	4848      	ldr	r0, [pc, #288]	; (800504c <MX_GPIO_Init+0x248>)
 8004f2a:	f004 fa2f 	bl	800938c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004f34:	4846      	ldr	r0, [pc, #280]	; (8005050 <MX_GPIO_Init+0x24c>)
 8004f36:	f004 fa29 	bl	800938c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004f40:	4844      	ldr	r0, [pc, #272]	; (8005054 <MX_GPIO_Init+0x250>)
 8004f42:	f004 fa23 	bl	800938c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 8004f46:	230d      	movs	r3, #13
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004f52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f56:	4619      	mov	r1, r3
 8004f58:	483f      	ldr	r0, [pc, #252]	; (8005058 <MX_GPIO_Init+0x254>)
 8004f5a:	f004 f84f 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 8004f5e:	2308      	movs	r3, #8
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f62:	2300      	movs	r3, #0
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8004f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f6e:	4619      	mov	r1, r3
 8004f70:	483a      	ldr	r0, [pc, #232]	; (800505c <MX_GPIO_Init+0x258>)
 8004f72:	f004 f843 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 8004f76:	2302      	movs	r3, #2
 8004f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8004f82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f86:	4619      	mov	r1, r3
 8004f88:	4830      	ldr	r0, [pc, #192]	; (800504c <MX_GPIO_Init+0x248>)
 8004f8a:	f004 f837 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 8004f8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f92:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004f94:	2300      	movs	r3, #0
 8004f96:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 8004f9c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fa0:	4619      	mov	r1, r3
 8004fa2:	482f      	ldr	r0, [pc, #188]	; (8005060 <MX_GPIO_Init+0x25c>)
 8004fa4:	f004 f82a 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8004fa8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8004fac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	4821      	ldr	r0, [pc, #132]	; (8005048 <MX_GPIO_Init+0x244>)
 8004fc2:	f004 f81b 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004fc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004fca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004fd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004fdc:	4619      	mov	r1, r3
 8004fde:	481b      	ldr	r0, [pc, #108]	; (800504c <MX_GPIO_Init+0x248>)
 8004fe0:	f004 f80c 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8004fe4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004fea:	2301      	movs	r3, #1
 8004fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8004ff6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	4814      	ldr	r0, [pc, #80]	; (8005050 <MX_GPIO_Init+0x24c>)
 8004ffe:	f003 fffd 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8005002:	2380      	movs	r3, #128	; 0x80
 8005004:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005006:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800500a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800500c:	2300      	movs	r3, #0
 800500e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8005010:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005014:	4619      	mov	r1, r3
 8005016:	480f      	ldr	r0, [pc, #60]	; (8005054 <MX_GPIO_Init+0x250>)
 8005018:	f003 fff0 	bl	8008ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800501c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005022:	2301      	movs	r3, #1
 8005024:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005026:	2300      	movs	r3, #0
 8005028:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800502a:	2300      	movs	r3, #0
 800502c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800502e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005032:	4619      	mov	r1, r3
 8005034:	4807      	ldr	r0, [pc, #28]	; (8005054 <MX_GPIO_Init+0x250>)
 8005036:	f003 ffe1 	bl	8008ffc <HAL_GPIO_Init>

}
 800503a:	bf00      	nop
 800503c:	3738      	adds	r7, #56	; 0x38
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop
 8005044:	58024400 	.word	0x58024400
 8005048:	58021000 	.word	0x58021000
 800504c:	58020400 	.word	0x58020400
 8005050:	58020c00 	.word	0x58020c00
 8005054:	58021800 	.word	0x58021800
 8005058:	58020800 	.word	0x58020800
 800505c:	58020000 	.word	0x58020000
 8005060:	58021400 	.word	0x58021400

08005064 <HAL_TIM_PeriodElapsedCallback>:
//	{
//		   HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
//	}
//}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8005064:	b4b0      	push	{r4, r5, r7}
 8005066:	b083      	sub	sp, #12
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
    if (htim == &htim7) {
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a09      	ldr	r2, [pc, #36]	; (8005094 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d10a      	bne.n	800508a <HAL_TIM_PeriodElapsedCallback+0x26>
        _micro += 65535;
 8005074:	4b08      	ldr	r3, [pc, #32]	; (8005098 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800507a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800507e:	1854      	adds	r4, r2, r1
 8005080:	f143 0500 	adc.w	r5, r3, #0
 8005084:	4b04      	ldr	r3, [pc, #16]	; (8005098 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8005086:	e9c3 4500 	strd	r4, r5, [r3]
    }
}
 800508a:	bf00      	nop
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	bcb0      	pop	{r4, r5, r7}
 8005092:	4770      	bx	lr
 8005094:	240002e8 	.word	0x240002e8
 8005098:	24000ea0 	.word	0x24000ea0

0800509c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800509c:	b480      	push	{r7}
 800509e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80050a0:	b672      	cpsid	i
}
 80050a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80050a4:	e7fe      	b.n	80050a4 <Error_Handler+0x8>
	...

080050a8 <ST7735_Select>:
								ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
								10,                     //     10 ms delay
								ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
								100 };                  //     100 ms delay

static void ST7735_Select() {
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050b2:	4802      	ldr	r0, [pc, #8]	; (80050bc <ST7735_Select+0x14>)
 80050b4:	f004 f96a 	bl	800938c <HAL_GPIO_WritePin>
}
 80050b8:	bf00      	nop
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	58021000 	.word	0x58021000

080050c0 <ST7735_Unselect>:

void ST7735_Unselect() {
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80050c4:	2201      	movs	r2, #1
 80050c6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80050ca:	4802      	ldr	r0, [pc, #8]	; (80050d4 <ST7735_Unselect+0x14>)
 80050cc:	f004 f95e 	bl	800938c <HAL_GPIO_WritePin>
}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	58021000 	.word	0x58021000

080050d8 <ST7735_Select1>:
static void ST7735_Select1() {
 80050d8:	b580      	push	{r7, lr}
 80050da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80050dc:	2200      	movs	r2, #0
 80050de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050e2:	4802      	ldr	r0, [pc, #8]	; (80050ec <ST7735_Select1+0x14>)
 80050e4:	f004 f952 	bl	800938c <HAL_GPIO_WritePin>
}
 80050e8:	bf00      	nop
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	58021000 	.word	0x58021000

080050f0 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80050f4:	2201      	movs	r2, #1
 80050f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80050fa:	4802      	ldr	r0, [pc, #8]	; (8005104 <ST7735_Unselect1+0x14>)
 80050fc:	f004 f946 	bl	800938c <HAL_GPIO_WritePin>
}
 8005100:	bf00      	nop
 8005102:	bd80      	pop	{r7, pc}
 8005104:	58021000 	.word	0x58021000

08005108 <ST7735_Reset>:

static void ST7735_Reset() {
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 800510c:	2200      	movs	r2, #0
 800510e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005112:	4807      	ldr	r0, [pc, #28]	; (8005130 <ST7735_Reset+0x28>)
 8005114:	f004 f93a 	bl	800938c <HAL_GPIO_WritePin>
	HAL_Delay(5);
 8005118:	2005      	movs	r0, #5
 800511a:	f000 ffd1 	bl	80060c0 <HAL_Delay>
	HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 800511e:	2201      	movs	r2, #1
 8005120:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005124:	4802      	ldr	r0, [pc, #8]	; (8005130 <ST7735_Reset+0x28>)
 8005126:	f004 f931 	bl	800938c <HAL_GPIO_WritePin>
}
 800512a:	bf00      	nop
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	58021000 	.word	0x58021000

08005134 <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	4603      	mov	r3, r0
 800513c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 800513e:	2200      	movs	r2, #0
 8005140:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005144:	4806      	ldr	r0, [pc, #24]	; (8005160 <ST7735_WriteCommand+0x2c>)
 8005146:	f004 f921 	bl	800938c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 800514a:	1df9      	adds	r1, r7, #7
 800514c:	f04f 33ff 	mov.w	r3, #4294967295
 8005150:	2201      	movs	r2, #1
 8005152:	4804      	ldr	r0, [pc, #16]	; (8005164 <ST7735_WriteCommand+0x30>)
 8005154:	f006 ff56 	bl	800c004 <HAL_SPI_Transmit>
}
 8005158:	bf00      	nop
 800515a:	3708      	adds	r7, #8
 800515c:	46bd      	mov	sp, r7
 800515e:	bd80      	pop	{r7, pc}
 8005160:	58021800 	.word	0x58021800
 8005164:	24000260 	.word	0x24000260

08005168 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8005168:	b580      	push	{r7, lr}
 800516a:	b082      	sub	sp, #8
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005172:	2201      	movs	r2, #1
 8005174:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005178:	4807      	ldr	r0, [pc, #28]	; (8005198 <ST7735_WriteData+0x30>)
 800517a:	f004 f907 	bl	800938c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	b29a      	uxth	r2, r3
 8005182:	f04f 33ff 	mov.w	r3, #4294967295
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4804      	ldr	r0, [pc, #16]	; (800519c <ST7735_WriteData+0x34>)
 800518a:	f006 ff3b 	bl	800c004 <HAL_SPI_Transmit>
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}
 8005196:	bf00      	nop
 8005198:	58021800 	.word	0x58021800
 800519c:	24000260 	.word	0x24000260

080051a0 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
	uint8_t numCommands, numArgs;
	uint16_t ms;

	numCommands = *addr++;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	1c5a      	adds	r2, r3, #1
 80051ac:	607a      	str	r2, [r7, #4]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	73fb      	strb	r3, [r7, #15]
	while(numCommands--) {
 80051b2:	e034      	b.n	800521e <ST7735_ExecuteCommandList+0x7e>
		uint8_t cmd = *addr++;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	1c5a      	adds	r2, r3, #1
 80051b8:	607a      	str	r2, [r7, #4]
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	72fb      	strb	r3, [r7, #11]
		ST7735_WriteCommand(cmd);
 80051be:	7afb      	ldrb	r3, [r7, #11]
 80051c0:	4618      	mov	r0, r3
 80051c2:	f7ff ffb7 	bl	8005134 <ST7735_WriteCommand>

		numArgs = *addr++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	1c5a      	adds	r2, r3, #1
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	781b      	ldrb	r3, [r3, #0]
 80051ce:	72bb      	strb	r3, [r7, #10]
		// If high bit set, delay follows args
		ms = numArgs & DELAY;
 80051d0:	7abb      	ldrb	r3, [r7, #10]
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	81bb      	strh	r3, [r7, #12]
		numArgs &= ~DELAY;
 80051da:	7abb      	ldrb	r3, [r7, #10]
 80051dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80051e0:	72bb      	strb	r3, [r7, #10]
		if(numArgs) {
 80051e2:	7abb      	ldrb	r3, [r7, #10]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d008      	beq.n	80051fa <ST7735_ExecuteCommandList+0x5a>
			ST7735_WriteData((uint8_t*)addr, numArgs);
 80051e8:	7abb      	ldrb	r3, [r7, #10]
 80051ea:	4619      	mov	r1, r3
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f7ff ffbb 	bl	8005168 <ST7735_WriteData>
			addr += numArgs;
 80051f2:	7abb      	ldrb	r3, [r7, #10]
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4413      	add	r3, r2
 80051f8:	607b      	str	r3, [r7, #4]
		}

		if(ms) {
 80051fa:	89bb      	ldrh	r3, [r7, #12]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d00e      	beq.n	800521e <ST7735_ExecuteCommandList+0x7e>
			ms = *addr++;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	607a      	str	r2, [r7, #4]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	81bb      	strh	r3, [r7, #12]
			if(ms == 255) ms = 500;
 800520a:	89bb      	ldrh	r3, [r7, #12]
 800520c:	2bff      	cmp	r3, #255	; 0xff
 800520e:	d102      	bne.n	8005216 <ST7735_ExecuteCommandList+0x76>
 8005210:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8005214:	81bb      	strh	r3, [r7, #12]
			HAL_Delay(ms);
 8005216:	89bb      	ldrh	r3, [r7, #12]
 8005218:	4618      	mov	r0, r3
 800521a:	f000 ff51 	bl	80060c0 <HAL_Delay>
	while(numCommands--) {
 800521e:	7bfb      	ldrb	r3, [r7, #15]
 8005220:	1e5a      	subs	r2, r3, #1
 8005222:	73fa      	strb	r2, [r7, #15]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d1c5      	bne.n	80051b4 <ST7735_ExecuteCommandList+0x14>
		}
	}
}
 8005228:	bf00      	nop
 800522a:	bf00      	nop
 800522c:	3710      	adds	r7, #16
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8005232:	b590      	push	{r4, r7, lr}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	4604      	mov	r4, r0
 800523a:	4608      	mov	r0, r1
 800523c:	4611      	mov	r1, r2
 800523e:	461a      	mov	r2, r3
 8005240:	4623      	mov	r3, r4
 8005242:	71fb      	strb	r3, [r7, #7]
 8005244:	4603      	mov	r3, r0
 8005246:	71bb      	strb	r3, [r7, #6]
 8005248:	460b      	mov	r3, r1
 800524a:	717b      	strb	r3, [r7, #5]
 800524c:	4613      	mov	r3, r2
 800524e:	713b      	strb	r3, [r7, #4]
	// column address set
	ST7735_WriteCommand(ST7735_CASET);
 8005250:	202a      	movs	r0, #42	; 0x2a
 8005252:	f7ff ff6f 	bl	8005134 <ST7735_WriteCommand>
	uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 8005256:	2300      	movs	r3, #0
 8005258:	733b      	strb	r3, [r7, #12]
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	3302      	adds	r3, #2
 800525e:	b2db      	uxtb	r3, r3
 8005260:	737b      	strb	r3, [r7, #13]
 8005262:	2300      	movs	r3, #0
 8005264:	73bb      	strb	r3, [r7, #14]
 8005266:	797b      	ldrb	r3, [r7, #5]
 8005268:	3302      	adds	r3, #2
 800526a:	b2db      	uxtb	r3, r3
 800526c:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 800526e:	f107 030c 	add.w	r3, r7, #12
 8005272:	2104      	movs	r1, #4
 8005274:	4618      	mov	r0, r3
 8005276:	f7ff ff77 	bl	8005168 <ST7735_WriteData>

	// row address set
	ST7735_WriteCommand(ST7735_RASET);
 800527a:	202b      	movs	r0, #43	; 0x2b
 800527c:	f7ff ff5a 	bl	8005134 <ST7735_WriteCommand>
	data[1] = y0 + ST7735_YSTART;
 8005280:	79bb      	ldrb	r3, [r7, #6]
 8005282:	3301      	adds	r3, #1
 8005284:	b2db      	uxtb	r3, r3
 8005286:	737b      	strb	r3, [r7, #13]
	data[3] = y1 + ST7735_YSTART;
 8005288:	793b      	ldrb	r3, [r7, #4]
 800528a:	3301      	adds	r3, #1
 800528c:	b2db      	uxtb	r3, r3
 800528e:	73fb      	strb	r3, [r7, #15]
	ST7735_WriteData(data, sizeof(data));
 8005290:	f107 030c 	add.w	r3, r7, #12
 8005294:	2104      	movs	r1, #4
 8005296:	4618      	mov	r0, r3
 8005298:	f7ff ff66 	bl	8005168 <ST7735_WriteData>

	// write to RAM
	ST7735_WriteCommand(ST7735_RAMWR);
 800529c:	202c      	movs	r0, #44	; 0x2c
 800529e:	f7ff ff49 	bl	8005134 <ST7735_WriteCommand>
}
 80052a2:	bf00      	nop
 80052a4:	3714      	adds	r7, #20
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd90      	pop	{r4, r7, pc}
	...

080052ac <ST7735_Init>:

void ST7735_Init() {
 80052ac:	b580      	push	{r7, lr}
 80052ae:	af00      	add	r7, sp, #0
	ST7735_Select();
 80052b0:	f7ff fefa 	bl	80050a8 <ST7735_Select>
	ST7735_Select1();
 80052b4:	f7ff ff10 	bl	80050d8 <ST7735_Select1>
	ST7735_Reset();
 80052b8:	f7ff ff26 	bl	8005108 <ST7735_Reset>
	ST7735_ExecuteCommandList(init_cmds1);
 80052bc:	4807      	ldr	r0, [pc, #28]	; (80052dc <ST7735_Init+0x30>)
 80052be:	f7ff ff6f 	bl	80051a0 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds2);
 80052c2:	4807      	ldr	r0, [pc, #28]	; (80052e0 <ST7735_Init+0x34>)
 80052c4:	f7ff ff6c 	bl	80051a0 <ST7735_ExecuteCommandList>
	ST7735_ExecuteCommandList(init_cmds3);
 80052c8:	4806      	ldr	r0, [pc, #24]	; (80052e4 <ST7735_Init+0x38>)
 80052ca:	f7ff ff69 	bl	80051a0 <ST7735_ExecuteCommandList>
	ST7735_Unselect();
 80052ce:	f7ff fef7 	bl	80050c0 <ST7735_Unselect>
	ST7735_Unselect1();
 80052d2:	f7ff ff0d 	bl	80050f0 <ST7735_Unselect1>
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	08010f10 	.word	0x08010f10
 80052e0:	08010f4c 	.word	0x08010f4c
 80052e4:	08010f5c 	.word	0x08010f5c

080052e8 <ST7735_WriteChar>:
	ST7735_WriteData(data, sizeof(data));

	ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 80052e8:	b082      	sub	sp, #8
 80052ea:	b590      	push	{r4, r7, lr}
 80052ec:	b089      	sub	sp, #36	; 0x24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	637b      	str	r3, [r7, #52]	; 0x34
 80052f2:	4603      	mov	r3, r0
 80052f4:	80fb      	strh	r3, [r7, #6]
 80052f6:	460b      	mov	r3, r1
 80052f8:	80bb      	strh	r3, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;

	ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 80052fe:	88fb      	ldrh	r3, [r7, #6]
 8005300:	b2d8      	uxtb	r0, r3
 8005302:	88bb      	ldrh	r3, [r7, #4]
 8005304:	b2d9      	uxtb	r1, r3
 8005306:	88fb      	ldrh	r3, [r7, #6]
 8005308:	b2da      	uxtb	r2, r3
 800530a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800530e:	4413      	add	r3, r2
 8005310:	b2db      	uxtb	r3, r3
 8005312:	3b01      	subs	r3, #1
 8005314:	b2dc      	uxtb	r4, r3
 8005316:	88bb      	ldrh	r3, [r7, #4]
 8005318:	b2da      	uxtb	r2, r3
 800531a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800531e:	4413      	add	r3, r2
 8005320:	b2db      	uxtb	r3, r3
 8005322:	3b01      	subs	r3, #1
 8005324:	b2db      	uxtb	r3, r3
 8005326:	4622      	mov	r2, r4
 8005328:	f7ff ff83 	bl	8005232 <ST7735_SetAddressWindow>

	for(i = 0; i < font.height; i++) {
 800532c:	2300      	movs	r3, #0
 800532e:	61fb      	str	r3, [r7, #28]
 8005330:	e043      	b.n	80053ba <ST7735_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8005332:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005334:	78fb      	ldrb	r3, [r7, #3]
 8005336:	3b20      	subs	r3, #32
 8005338:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 800533c:	fb01 f303 	mul.w	r3, r1, r3
 8005340:	4619      	mov	r1, r3
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	440b      	add	r3, r1
 8005346:	005b      	lsls	r3, r3, #1
 8005348:	4413      	add	r3, r2
 800534a:	881b      	ldrh	r3, [r3, #0]
 800534c:	617b      	str	r3, [r7, #20]
		for(j = 0; j < font.width; j++) {
 800534e:	2300      	movs	r3, #0
 8005350:	61bb      	str	r3, [r7, #24]
 8005352:	e029      	b.n	80053a8 <ST7735_WriteChar+0xc0>
			if((b << j) & 0x8000)  {
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	fa02 f303 	lsl.w	r3, r2, r3
 800535c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00e      	beq.n	8005382 <ST7735_WriteChar+0x9a>
				uint8_t data[] = { color >> 8, color & 0xFF };
 8005364:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005366:	0a1b      	lsrs	r3, r3, #8
 8005368:	b29b      	uxth	r3, r3
 800536a:	b2db      	uxtb	r3, r3
 800536c:	743b      	strb	r3, [r7, #16]
 800536e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8005370:	b2db      	uxtb	r3, r3
 8005372:	747b      	strb	r3, [r7, #17]
				ST7735_WriteData(data, sizeof(data));
 8005374:	f107 0310 	add.w	r3, r7, #16
 8005378:	2102      	movs	r1, #2
 800537a:	4618      	mov	r0, r3
 800537c:	f7ff fef4 	bl	8005168 <ST7735_WriteData>
 8005380:	e00f      	b.n	80053a2 <ST7735_WriteChar+0xba>
			} else {
				uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 8005382:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005386:	0a1b      	lsrs	r3, r3, #8
 8005388:	b29b      	uxth	r3, r3
 800538a:	b2db      	uxtb	r3, r3
 800538c:	733b      	strb	r3, [r7, #12]
 800538e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005392:	b2db      	uxtb	r3, r3
 8005394:	737b      	strb	r3, [r7, #13]
				ST7735_WriteData(data, sizeof(data));
 8005396:	f107 030c 	add.w	r3, r7, #12
 800539a:	2102      	movs	r1, #2
 800539c:	4618      	mov	r0, r3
 800539e:	f7ff fee3 	bl	8005168 <ST7735_WriteData>
		for(j = 0; j < font.width; j++) {
 80053a2:	69bb      	ldr	r3, [r7, #24]
 80053a4:	3301      	adds	r3, #1
 80053a6:	61bb      	str	r3, [r7, #24]
 80053a8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80053ac:	461a      	mov	r2, r3
 80053ae:	69bb      	ldr	r3, [r7, #24]
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d3cf      	bcc.n	8005354 <ST7735_WriteChar+0x6c>
	for(i = 0; i < font.height; i++) {
 80053b4:	69fb      	ldr	r3, [r7, #28]
 80053b6:	3301      	adds	r3, #1
 80053b8:	61fb      	str	r3, [r7, #28]
 80053ba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80053be:	461a      	mov	r2, r3
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d3b5      	bcc.n	8005332 <ST7735_WriteChar+0x4a>
			}
		}
	}
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	3724      	adds	r7, #36	; 0x24
 80053cc:	46bd      	mov	sp, r7
 80053ce:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80053d2:	b002      	add	sp, #8
 80053d4:	4770      	bx	lr

080053d6 <ST7735_WriteString>:
        }
    }
}
 */

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80053d6:	b082      	sub	sp, #8
 80053d8:	b580      	push	{r7, lr}
 80053da:	b086      	sub	sp, #24
 80053dc:	af04      	add	r7, sp, #16
 80053de:	603a      	str	r2, [r7, #0]
 80053e0:	617b      	str	r3, [r7, #20]
 80053e2:	4603      	mov	r3, r0
 80053e4:	80fb      	strh	r3, [r7, #6]
 80053e6:	460b      	mov	r3, r1
 80053e8:	80bb      	strh	r3, [r7, #4]
	ST7735_Select();
 80053ea:	f7ff fe5d 	bl	80050a8 <ST7735_Select>

	while(*str) {
 80053ee:	e02d      	b.n	800544c <ST7735_WriteString+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 80053f0:	88fb      	ldrh	r3, [r7, #6]
 80053f2:	7d3a      	ldrb	r2, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	2b7f      	cmp	r3, #127	; 0x7f
 80053f8:	dd13      	ble.n	8005422 <ST7735_WriteString+0x4c>
			x = 0;
 80053fa:	2300      	movs	r3, #0
 80053fc:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 80053fe:	7d7b      	ldrb	r3, [r7, #21]
 8005400:	b29a      	uxth	r2, r3
 8005402:	88bb      	ldrh	r3, [r7, #4]
 8005404:	4413      	add	r3, r2
 8005406:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8005408:	88bb      	ldrh	r3, [r7, #4]
 800540a:	7d7a      	ldrb	r2, [r7, #21]
 800540c:	4413      	add	r3, r2
 800540e:	2b7f      	cmp	r3, #127	; 0x7f
 8005410:	dc21      	bgt.n	8005456 <ST7735_WriteString+0x80>
				break;
			}

			if(*str == ' ') {
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	2b20      	cmp	r3, #32
 8005418:	d103      	bne.n	8005422 <ST7735_WriteString+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	3301      	adds	r3, #1
 800541e:	603b      	str	r3, [r7, #0]
				continue;
 8005420:	e014      	b.n	800544c <ST7735_WriteString+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	781a      	ldrb	r2, [r3, #0]
 8005426:	88b9      	ldrh	r1, [r7, #4]
 8005428:	88f8      	ldrh	r0, [r7, #6]
 800542a:	8c3b      	ldrh	r3, [r7, #32]
 800542c:	9302      	str	r3, [sp, #8]
 800542e:	8bbb      	ldrh	r3, [r7, #28]
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	f7ff ff56 	bl	80052e8 <ST7735_WriteChar>
		x += font.width;
 800543c:	7d3b      	ldrb	r3, [r7, #20]
 800543e:	b29a      	uxth	r2, r3
 8005440:	88fb      	ldrh	r3, [r7, #6]
 8005442:	4413      	add	r3, r2
 8005444:	80fb      	strh	r3, [r7, #6]
		str++;
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	3301      	adds	r3, #1
 800544a:	603b      	str	r3, [r7, #0]
	while(*str) {
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	781b      	ldrb	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d1cd      	bne.n	80053f0 <ST7735_WriteString+0x1a>
 8005454:	e000      	b.n	8005458 <ST7735_WriteString+0x82>
				break;
 8005456:	bf00      	nop
	}

	ST7735_Unselect();
 8005458:	f7ff fe32 	bl	80050c0 <ST7735_Unselect>
}
 800545c:	bf00      	nop
 800545e:	3708      	adds	r7, #8
 8005460:	46bd      	mov	sp, r7
 8005462:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005466:	b002      	add	sp, #8
 8005468:	4770      	bx	lr

0800546a <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 800546a:	b082      	sub	sp, #8
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af04      	add	r7, sp, #16
 8005472:	603a      	str	r2, [r7, #0]
 8005474:	617b      	str	r3, [r7, #20]
 8005476:	4603      	mov	r3, r0
 8005478:	80fb      	strh	r3, [r7, #6]
 800547a:	460b      	mov	r3, r1
 800547c:	80bb      	strh	r3, [r7, #4]
	ST7735_Select1();
 800547e:	f7ff fe2b 	bl	80050d8 <ST7735_Select1>

	while(*str) {
 8005482:	e02d      	b.n	80054e0 <ST7735_WriteString1+0x76>
		if(x + font.width >= ST7735_WIDTH) {
 8005484:	88fb      	ldrh	r3, [r7, #6]
 8005486:	7d3a      	ldrb	r2, [r7, #20]
 8005488:	4413      	add	r3, r2
 800548a:	2b7f      	cmp	r3, #127	; 0x7f
 800548c:	dd13      	ble.n	80054b6 <ST7735_WriteString1+0x4c>
			x = 0;
 800548e:	2300      	movs	r3, #0
 8005490:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 8005492:	7d7b      	ldrb	r3, [r7, #21]
 8005494:	b29a      	uxth	r2, r3
 8005496:	88bb      	ldrh	r3, [r7, #4]
 8005498:	4413      	add	r3, r2
 800549a:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 800549c:	88bb      	ldrh	r3, [r7, #4]
 800549e:	7d7a      	ldrb	r2, [r7, #21]
 80054a0:	4413      	add	r3, r2
 80054a2:	2b7f      	cmp	r3, #127	; 0x7f
 80054a4:	dc21      	bgt.n	80054ea <ST7735_WriteString1+0x80>
				break;
			}

			if(*str == ' ') {
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d103      	bne.n	80054b6 <ST7735_WriteString1+0x4c>
				// skip spaces in the beginning of the new line
				str++;
 80054ae:	683b      	ldr	r3, [r7, #0]
 80054b0:	3301      	adds	r3, #1
 80054b2:	603b      	str	r3, [r7, #0]
				continue;
 80054b4:	e014      	b.n	80054e0 <ST7735_WriteString1+0x76>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	781a      	ldrb	r2, [r3, #0]
 80054ba:	88b9      	ldrh	r1, [r7, #4]
 80054bc:	88f8      	ldrh	r0, [r7, #6]
 80054be:	8c3b      	ldrh	r3, [r7, #32]
 80054c0:	9302      	str	r3, [sp, #8]
 80054c2:	8bbb      	ldrh	r3, [r7, #28]
 80054c4:	9301      	str	r3, [sp, #4]
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	9300      	str	r3, [sp, #0]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f7ff ff0c 	bl	80052e8 <ST7735_WriteChar>
		x += font.width;
 80054d0:	7d3b      	ldrb	r3, [r7, #20]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	88fb      	ldrh	r3, [r7, #6]
 80054d6:	4413      	add	r3, r2
 80054d8:	80fb      	strh	r3, [r7, #6]
		str++;
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	3301      	adds	r3, #1
 80054de:	603b      	str	r3, [r7, #0]
	while(*str) {
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1cd      	bne.n	8005484 <ST7735_WriteString1+0x1a>
 80054e8:	e000      	b.n	80054ec <ST7735_WriteString1+0x82>
				break;
 80054ea:	bf00      	nop
	}

	ST7735_Unselect1();
 80054ec:	f7ff fe00 	bl	80050f0 <ST7735_Unselect1>
}
 80054f0:	bf00      	nop
 80054f2:	3708      	adds	r7, #8
 80054f4:	46bd      	mov	sp, r7
 80054f6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80054fa:	b002      	add	sp, #8
 80054fc:	4770      	bx	lr

080054fe <ST7735_WriteStringNSS>:
void ST7735_WriteStringNSS(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor,uint8_t NSS){
 80054fe:	b082      	sub	sp, #8
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af04      	add	r7, sp, #16
 8005506:	603a      	str	r2, [r7, #0]
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	4603      	mov	r3, r0
 800550c:	80fb      	strh	r3, [r7, #6]
 800550e:	460b      	mov	r3, r1
 8005510:	80bb      	strh	r3, [r7, #4]

	if(NSS == 0){
 8005512:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <ST7735_WriteStringNSS+0x22>
		ST7735_Select();
 800551a:	f7ff fdc5 	bl	80050a8 <ST7735_Select>
 800551e:	e034      	b.n	800558a <ST7735_WriteStringNSS+0x8c>

	}else if(NSS ==1){
 8005520:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005524:	2b01      	cmp	r3, #1
 8005526:	d130      	bne.n	800558a <ST7735_WriteStringNSS+0x8c>
		ST7735_Select1();
 8005528:	f7ff fdd6 	bl	80050d8 <ST7735_Select1>

	}


	while(*str) {
 800552c:	e02d      	b.n	800558a <ST7735_WriteStringNSS+0x8c>
		if(x + font.width >= ST7735_WIDTH) {
 800552e:	88fb      	ldrh	r3, [r7, #6]
 8005530:	7d3a      	ldrb	r2, [r7, #20]
 8005532:	4413      	add	r3, r2
 8005534:	2b7f      	cmp	r3, #127	; 0x7f
 8005536:	dd13      	ble.n	8005560 <ST7735_WriteStringNSS+0x62>
			x = 0;
 8005538:	2300      	movs	r3, #0
 800553a:	80fb      	strh	r3, [r7, #6]
			y += font.height;
 800553c:	7d7b      	ldrb	r3, [r7, #21]
 800553e:	b29a      	uxth	r2, r3
 8005540:	88bb      	ldrh	r3, [r7, #4]
 8005542:	4413      	add	r3, r2
 8005544:	80bb      	strh	r3, [r7, #4]
			if(y + font.height >= ST7735_HEIGHT) {
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	7d7a      	ldrb	r2, [r7, #21]
 800554a:	4413      	add	r3, r2
 800554c:	2b7f      	cmp	r3, #127	; 0x7f
 800554e:	dc21      	bgt.n	8005594 <ST7735_WriteStringNSS+0x96>
				break;
			}

			if(*str == ' ') {
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	2b20      	cmp	r3, #32
 8005556:	d103      	bne.n	8005560 <ST7735_WriteStringNSS+0x62>
				// skip spaces in the beginning of the new line
				str++;
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	603b      	str	r3, [r7, #0]
				continue;
 800555e:	e014      	b.n	800558a <ST7735_WriteStringNSS+0x8c>
			}
		}

		ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	781a      	ldrb	r2, [r3, #0]
 8005564:	88b9      	ldrh	r1, [r7, #4]
 8005566:	88f8      	ldrh	r0, [r7, #6]
 8005568:	8c3b      	ldrh	r3, [r7, #32]
 800556a:	9302      	str	r3, [sp, #8]
 800556c:	8bbb      	ldrh	r3, [r7, #28]
 800556e:	9301      	str	r3, [sp, #4]
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	9300      	str	r3, [sp, #0]
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f7ff feb7 	bl	80052e8 <ST7735_WriteChar>
		x += font.width;
 800557a:	7d3b      	ldrb	r3, [r7, #20]
 800557c:	b29a      	uxth	r2, r3
 800557e:	88fb      	ldrh	r3, [r7, #6]
 8005580:	4413      	add	r3, r2
 8005582:	80fb      	strh	r3, [r7, #6]
		str++;
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	3301      	adds	r3, #1
 8005588:	603b      	str	r3, [r7, #0]
	while(*str) {
 800558a:	683b      	ldr	r3, [r7, #0]
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d1cd      	bne.n	800552e <ST7735_WriteStringNSS+0x30>
 8005592:	e000      	b.n	8005596 <ST7735_WriteStringNSS+0x98>
				break;
 8005594:	bf00      	nop
	}
	if(NSS == 0){
 8005596:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <ST7735_WriteStringNSS+0xa6>
		ST7735_Unselect();
 800559e:	f7ff fd8f 	bl	80050c0 <ST7735_Unselect>
	}else if(NSS ==1){
		ST7735_Unselect1();
	}


}
 80055a2:	e005      	b.n	80055b0 <ST7735_WriteStringNSS+0xb2>
	}else if(NSS ==1){
 80055a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80055a8:	2b01      	cmp	r3, #1
 80055aa:	d101      	bne.n	80055b0 <ST7735_WriteStringNSS+0xb2>
		ST7735_Unselect1();
 80055ac:	f7ff fda0 	bl	80050f0 <ST7735_Unselect1>
}
 80055b0:	bf00      	nop
 80055b2:	3708      	adds	r7, #8
 80055b4:	46bd      	mov	sp, r7
 80055b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055ba:	b002      	add	sp, #8
 80055bc:	4770      	bx	lr
	...

080055c0 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80055c0:	b590      	push	{r4, r7, lr}
 80055c2:	b085      	sub	sp, #20
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4604      	mov	r4, r0
 80055c8:	4608      	mov	r0, r1
 80055ca:	4611      	mov	r1, r2
 80055cc:	461a      	mov	r2, r3
 80055ce:	4623      	mov	r3, r4
 80055d0:	80fb      	strh	r3, [r7, #6]
 80055d2:	4603      	mov	r3, r0
 80055d4:	80bb      	strh	r3, [r7, #4]
 80055d6:	460b      	mov	r3, r1
 80055d8:	807b      	strh	r3, [r7, #2]
 80055da:	4613      	mov	r3, r2
 80055dc:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b7f      	cmp	r3, #127	; 0x7f
 80055e2:	d858      	bhi.n	8005696 <ST7735_FillRectangle+0xd6>
 80055e4:	88bb      	ldrh	r3, [r7, #4]
 80055e6:	2b7f      	cmp	r3, #127	; 0x7f
 80055e8:	d855      	bhi.n	8005696 <ST7735_FillRectangle+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80055ea:	88fa      	ldrh	r2, [r7, #6]
 80055ec:	887b      	ldrh	r3, [r7, #2]
 80055ee:	4413      	add	r3, r2
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	dd03      	ble.n	80055fc <ST7735_FillRectangle+0x3c>
 80055f4:	88fb      	ldrh	r3, [r7, #6]
 80055f6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80055fa:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80055fc:	88ba      	ldrh	r2, [r7, #4]
 80055fe:	883b      	ldrh	r3, [r7, #0]
 8005600:	4413      	add	r3, r2
 8005602:	2b80      	cmp	r3, #128	; 0x80
 8005604:	dd03      	ble.n	800560e <ST7735_FillRectangle+0x4e>
 8005606:	88bb      	ldrh	r3, [r7, #4]
 8005608:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800560c:	803b      	strh	r3, [r7, #0]

	ST7735_Select();
 800560e:	f7ff fd4b 	bl	80050a8 <ST7735_Select>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8005612:	88fb      	ldrh	r3, [r7, #6]
 8005614:	b2d8      	uxtb	r0, r3
 8005616:	88bb      	ldrh	r3, [r7, #4]
 8005618:	b2d9      	uxtb	r1, r3
 800561a:	88fb      	ldrh	r3, [r7, #6]
 800561c:	b2da      	uxtb	r2, r3
 800561e:	887b      	ldrh	r3, [r7, #2]
 8005620:	b2db      	uxtb	r3, r3
 8005622:	4413      	add	r3, r2
 8005624:	b2db      	uxtb	r3, r3
 8005626:	3b01      	subs	r3, #1
 8005628:	b2dc      	uxtb	r4, r3
 800562a:	88bb      	ldrh	r3, [r7, #4]
 800562c:	b2da      	uxtb	r2, r3
 800562e:	883b      	ldrh	r3, [r7, #0]
 8005630:	b2db      	uxtb	r3, r3
 8005632:	4413      	add	r3, r2
 8005634:	b2db      	uxtb	r3, r3
 8005636:	3b01      	subs	r3, #1
 8005638:	b2db      	uxtb	r3, r3
 800563a:	4622      	mov	r2, r4
 800563c:	f7ff fdf9 	bl	8005232 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8005640:	8c3b      	ldrh	r3, [r7, #32]
 8005642:	0a1b      	lsrs	r3, r3, #8
 8005644:	b29b      	uxth	r3, r3
 8005646:	b2db      	uxtb	r3, r3
 8005648:	733b      	strb	r3, [r7, #12]
 800564a:	8c3b      	ldrh	r3, [r7, #32]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005650:	2201      	movs	r2, #1
 8005652:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8005656:	4812      	ldr	r0, [pc, #72]	; (80056a0 <ST7735_FillRectangle+0xe0>)
 8005658:	f003 fe98 	bl	800938c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 800565c:	883b      	ldrh	r3, [r7, #0]
 800565e:	80bb      	strh	r3, [r7, #4]
 8005660:	e013      	b.n	800568a <ST7735_FillRectangle+0xca>
		for(x = w; x > 0; x--) {
 8005662:	887b      	ldrh	r3, [r7, #2]
 8005664:	80fb      	strh	r3, [r7, #6]
 8005666:	e00a      	b.n	800567e <ST7735_FillRectangle+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8005668:	f107 010c 	add.w	r1, r7, #12
 800566c:	f04f 33ff 	mov.w	r3, #4294967295
 8005670:	2202      	movs	r2, #2
 8005672:	480c      	ldr	r0, [pc, #48]	; (80056a4 <ST7735_FillRectangle+0xe4>)
 8005674:	f006 fcc6 	bl	800c004 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8005678:	88fb      	ldrh	r3, [r7, #6]
 800567a:	3b01      	subs	r3, #1
 800567c:	80fb      	strh	r3, [r7, #6]
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d1f1      	bne.n	8005668 <ST7735_FillRectangle+0xa8>
	for(y = h; y > 0; y--) {
 8005684:	88bb      	ldrh	r3, [r7, #4]
 8005686:	3b01      	subs	r3, #1
 8005688:	80bb      	strh	r3, [r7, #4]
 800568a:	88bb      	ldrh	r3, [r7, #4]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d1e8      	bne.n	8005662 <ST7735_FillRectangle+0xa2>
		}
	}

	ST7735_Unselect();
 8005690:	f7ff fd16 	bl	80050c0 <ST7735_Unselect>
 8005694:	e000      	b.n	8005698 <ST7735_FillRectangle+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005696:	bf00      	nop
}
 8005698:	3714      	adds	r7, #20
 800569a:	46bd      	mov	sp, r7
 800569c:	bd90      	pop	{r4, r7, pc}
 800569e:	bf00      	nop
 80056a0:	58021800 	.word	0x58021800
 80056a4:	24000260 	.word	0x24000260

080056a8 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80056a8:	b590      	push	{r4, r7, lr}
 80056aa:	b085      	sub	sp, #20
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	4604      	mov	r4, r0
 80056b0:	4608      	mov	r0, r1
 80056b2:	4611      	mov	r1, r2
 80056b4:	461a      	mov	r2, r3
 80056b6:	4623      	mov	r3, r4
 80056b8:	80fb      	strh	r3, [r7, #6]
 80056ba:	4603      	mov	r3, r0
 80056bc:	80bb      	strh	r3, [r7, #4]
 80056be:	460b      	mov	r3, r1
 80056c0:	807b      	strh	r3, [r7, #2]
 80056c2:	4613      	mov	r3, r2
 80056c4:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	2b7f      	cmp	r3, #127	; 0x7f
 80056ca:	d858      	bhi.n	800577e <ST7735_FillRectangle1+0xd6>
 80056cc:	88bb      	ldrh	r3, [r7, #4]
 80056ce:	2b7f      	cmp	r3, #127	; 0x7f
 80056d0:	d855      	bhi.n	800577e <ST7735_FillRectangle1+0xd6>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80056d2:	88fa      	ldrh	r2, [r7, #6]
 80056d4:	887b      	ldrh	r3, [r7, #2]
 80056d6:	4413      	add	r3, r2
 80056d8:	2b80      	cmp	r3, #128	; 0x80
 80056da:	dd03      	ble.n	80056e4 <ST7735_FillRectangle1+0x3c>
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80056e2:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80056e4:	88ba      	ldrh	r2, [r7, #4]
 80056e6:	883b      	ldrh	r3, [r7, #0]
 80056e8:	4413      	add	r3, r2
 80056ea:	2b80      	cmp	r3, #128	; 0x80
 80056ec:	dd03      	ble.n	80056f6 <ST7735_FillRectangle1+0x4e>
 80056ee:	88bb      	ldrh	r3, [r7, #4]
 80056f0:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80056f4:	803b      	strh	r3, [r7, #0]

	ST7735_Select1();
 80056f6:	f7ff fcef 	bl	80050d8 <ST7735_Select1>
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80056fa:	88fb      	ldrh	r3, [r7, #6]
 80056fc:	b2d8      	uxtb	r0, r3
 80056fe:	88bb      	ldrh	r3, [r7, #4]
 8005700:	b2d9      	uxtb	r1, r3
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	b2da      	uxtb	r2, r3
 8005706:	887b      	ldrh	r3, [r7, #2]
 8005708:	b2db      	uxtb	r3, r3
 800570a:	4413      	add	r3, r2
 800570c:	b2db      	uxtb	r3, r3
 800570e:	3b01      	subs	r3, #1
 8005710:	b2dc      	uxtb	r4, r3
 8005712:	88bb      	ldrh	r3, [r7, #4]
 8005714:	b2da      	uxtb	r2, r3
 8005716:	883b      	ldrh	r3, [r7, #0]
 8005718:	b2db      	uxtb	r3, r3
 800571a:	4413      	add	r3, r2
 800571c:	b2db      	uxtb	r3, r3
 800571e:	3b01      	subs	r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4622      	mov	r2, r4
 8005724:	f7ff fd85 	bl	8005232 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8005728:	8c3b      	ldrh	r3, [r7, #32]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2db      	uxtb	r3, r3
 8005730:	733b      	strb	r3, [r7, #12]
 8005732:	8c3b      	ldrh	r3, [r7, #32]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005738:	2201      	movs	r2, #1
 800573a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800573e:	4812      	ldr	r0, [pc, #72]	; (8005788 <ST7735_FillRectangle1+0xe0>)
 8005740:	f003 fe24 	bl	800938c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8005744:	883b      	ldrh	r3, [r7, #0]
 8005746:	80bb      	strh	r3, [r7, #4]
 8005748:	e013      	b.n	8005772 <ST7735_FillRectangle1+0xca>
		for(x = w; x > 0; x--) {
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	80fb      	strh	r3, [r7, #6]
 800574e:	e00a      	b.n	8005766 <ST7735_FillRectangle1+0xbe>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8005750:	f107 010c 	add.w	r1, r7, #12
 8005754:	f04f 33ff 	mov.w	r3, #4294967295
 8005758:	2202      	movs	r2, #2
 800575a:	480c      	ldr	r0, [pc, #48]	; (800578c <ST7735_FillRectangle1+0xe4>)
 800575c:	f006 fc52 	bl	800c004 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 8005760:	88fb      	ldrh	r3, [r7, #6]
 8005762:	3b01      	subs	r3, #1
 8005764:	80fb      	strh	r3, [r7, #6]
 8005766:	88fb      	ldrh	r3, [r7, #6]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1f1      	bne.n	8005750 <ST7735_FillRectangle1+0xa8>
	for(y = h; y > 0; y--) {
 800576c:	88bb      	ldrh	r3, [r7, #4]
 800576e:	3b01      	subs	r3, #1
 8005770:	80bb      	strh	r3, [r7, #4]
 8005772:	88bb      	ldrh	r3, [r7, #4]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e8      	bne.n	800574a <ST7735_FillRectangle1+0xa2>
		}
	}

	ST7735_Unselect1();
 8005778:	f7ff fcba 	bl	80050f0 <ST7735_Unselect1>
 800577c:	e000      	b.n	8005780 <ST7735_FillRectangle1+0xd8>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800577e:	bf00      	nop
}
 8005780:	3714      	adds	r7, #20
 8005782:	46bd      	mov	sp, r7
 8005784:	bd90      	pop	{r4, r7, pc}
 8005786:	bf00      	nop
 8005788:	58021800 	.word	0x58021800
 800578c:	24000260 	.word	0x24000260

08005790 <ST7735_FillRectangleNSS>:
void ST7735_FillRectangleNSS(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color,uint8_t NSS) {
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b085      	sub	sp, #20
 8005794:	af00      	add	r7, sp, #0
 8005796:	4604      	mov	r4, r0
 8005798:	4608      	mov	r0, r1
 800579a:	4611      	mov	r1, r2
 800579c:	461a      	mov	r2, r3
 800579e:	4623      	mov	r3, r4
 80057a0:	80fb      	strh	r3, [r7, #6]
 80057a2:	4603      	mov	r3, r0
 80057a4:	80bb      	strh	r3, [r7, #4]
 80057a6:	460b      	mov	r3, r1
 80057a8:	807b      	strh	r3, [r7, #2]
 80057aa:	4613      	mov	r3, r2
 80057ac:	803b      	strh	r3, [r7, #0]
	// clipping
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80057ae:	88fb      	ldrh	r3, [r7, #6]
 80057b0:	2b7f      	cmp	r3, #127	; 0x7f
 80057b2:	d86e      	bhi.n	8005892 <ST7735_FillRectangleNSS+0x102>
 80057b4:	88bb      	ldrh	r3, [r7, #4]
 80057b6:	2b7f      	cmp	r3, #127	; 0x7f
 80057b8:	d86b      	bhi.n	8005892 <ST7735_FillRectangleNSS+0x102>
	if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80057ba:	88fa      	ldrh	r2, [r7, #6]
 80057bc:	887b      	ldrh	r3, [r7, #2]
 80057be:	4413      	add	r3, r2
 80057c0:	2b80      	cmp	r3, #128	; 0x80
 80057c2:	dd03      	ble.n	80057cc <ST7735_FillRectangleNSS+0x3c>
 80057c4:	88fb      	ldrh	r3, [r7, #6]
 80057c6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80057ca:	807b      	strh	r3, [r7, #2]
	if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80057cc:	88ba      	ldrh	r2, [r7, #4]
 80057ce:	883b      	ldrh	r3, [r7, #0]
 80057d0:	4413      	add	r3, r2
 80057d2:	2b80      	cmp	r3, #128	; 0x80
 80057d4:	dd03      	ble.n	80057de <ST7735_FillRectangleNSS+0x4e>
 80057d6:	88bb      	ldrh	r3, [r7, #4]
 80057d8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80057dc:	803b      	strh	r3, [r7, #0]

	if(NSS == 0){
 80057de:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d102      	bne.n	80057ec <ST7735_FillRectangleNSS+0x5c>
		ST7735_Select();
 80057e6:	f7ff fc5f 	bl	80050a8 <ST7735_Select>
 80057ea:	e005      	b.n	80057f8 <ST7735_FillRectangleNSS+0x68>

	}else if(NSS ==1){
 80057ec:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d101      	bne.n	80057f8 <ST7735_FillRectangleNSS+0x68>
		ST7735_Select1();
 80057f4:	f7ff fc70 	bl	80050d8 <ST7735_Select1>

	}
	ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	b2d8      	uxtb	r0, r3
 80057fc:	88bb      	ldrh	r3, [r7, #4]
 80057fe:	b2d9      	uxtb	r1, r3
 8005800:	88fb      	ldrh	r3, [r7, #6]
 8005802:	b2da      	uxtb	r2, r3
 8005804:	887b      	ldrh	r3, [r7, #2]
 8005806:	b2db      	uxtb	r3, r3
 8005808:	4413      	add	r3, r2
 800580a:	b2db      	uxtb	r3, r3
 800580c:	3b01      	subs	r3, #1
 800580e:	b2dc      	uxtb	r4, r3
 8005810:	88bb      	ldrh	r3, [r7, #4]
 8005812:	b2da      	uxtb	r2, r3
 8005814:	883b      	ldrh	r3, [r7, #0]
 8005816:	b2db      	uxtb	r3, r3
 8005818:	4413      	add	r3, r2
 800581a:	b2db      	uxtb	r3, r3
 800581c:	3b01      	subs	r3, #1
 800581e:	b2db      	uxtb	r3, r3
 8005820:	4622      	mov	r2, r4
 8005822:	f7ff fd06 	bl	8005232 <ST7735_SetAddressWindow>

	uint8_t data[] = { color >> 8, color & 0xFF };
 8005826:	8c3b      	ldrh	r3, [r7, #32]
 8005828:	0a1b      	lsrs	r3, r3, #8
 800582a:	b29b      	uxth	r3, r3
 800582c:	b2db      	uxtb	r3, r3
 800582e:	733b      	strb	r3, [r7, #12]
 8005830:	8c3b      	ldrh	r3, [r7, #32]
 8005832:	b2db      	uxtb	r3, r3
 8005834:	737b      	strb	r3, [r7, #13]
	HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8005836:	2201      	movs	r2, #1
 8005838:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800583c:	4817      	ldr	r0, [pc, #92]	; (800589c <ST7735_FillRectangleNSS+0x10c>)
 800583e:	f003 fda5 	bl	800938c <HAL_GPIO_WritePin>
	for(y = h; y > 0; y--) {
 8005842:	883b      	ldrh	r3, [r7, #0]
 8005844:	80bb      	strh	r3, [r7, #4]
 8005846:	e013      	b.n	8005870 <ST7735_FillRectangleNSS+0xe0>
		for(x = w; x > 0; x--) {
 8005848:	887b      	ldrh	r3, [r7, #2]
 800584a:	80fb      	strh	r3, [r7, #6]
 800584c:	e00a      	b.n	8005864 <ST7735_FillRectangleNSS+0xd4>
			HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800584e:	f107 010c 	add.w	r1, r7, #12
 8005852:	f04f 33ff 	mov.w	r3, #4294967295
 8005856:	2202      	movs	r2, #2
 8005858:	4811      	ldr	r0, [pc, #68]	; (80058a0 <ST7735_FillRectangleNSS+0x110>)
 800585a:	f006 fbd3 	bl	800c004 <HAL_SPI_Transmit>
		for(x = w; x > 0; x--) {
 800585e:	88fb      	ldrh	r3, [r7, #6]
 8005860:	3b01      	subs	r3, #1
 8005862:	80fb      	strh	r3, [r7, #6]
 8005864:	88fb      	ldrh	r3, [r7, #6]
 8005866:	2b00      	cmp	r3, #0
 8005868:	d1f1      	bne.n	800584e <ST7735_FillRectangleNSS+0xbe>
	for(y = h; y > 0; y--) {
 800586a:	88bb      	ldrh	r3, [r7, #4]
 800586c:	3b01      	subs	r3, #1
 800586e:	80bb      	strh	r3, [r7, #4]
 8005870:	88bb      	ldrh	r3, [r7, #4]
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e8      	bne.n	8005848 <ST7735_FillRectangleNSS+0xb8>
		}
	}

	if(NSS == 0){
 8005876:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800587a:	2b00      	cmp	r3, #0
 800587c:	d102      	bne.n	8005884 <ST7735_FillRectangleNSS+0xf4>
		ST7735_Unselect();
 800587e:	f7ff fc1f 	bl	80050c0 <ST7735_Unselect>
 8005882:	e007      	b.n	8005894 <ST7735_FillRectangleNSS+0x104>
	}else if(NSS ==1){
 8005884:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005888:	2b01      	cmp	r3, #1
 800588a:	d103      	bne.n	8005894 <ST7735_FillRectangleNSS+0x104>
		ST7735_Unselect1();
 800588c:	f7ff fc30 	bl	80050f0 <ST7735_Unselect1>
 8005890:	e000      	b.n	8005894 <ST7735_FillRectangleNSS+0x104>
	if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8005892:	bf00      	nop
	}
}
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bd90      	pop	{r4, r7, pc}
 800589a:	bf00      	nop
 800589c:	58021800 	.word	0x58021800
 80058a0:	24000260 	.word	0x24000260

080058a4 <ST7735_FillScreen>:

	free(line);
	ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af02      	add	r7, sp, #8
 80058aa:	4603      	mov	r3, r0
 80058ac:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80058ae:	88fb      	ldrh	r3, [r7, #6]
 80058b0:	9300      	str	r3, [sp, #0]
 80058b2:	2380      	movs	r3, #128	; 0x80
 80058b4:	2280      	movs	r2, #128	; 0x80
 80058b6:	2100      	movs	r1, #0
 80058b8:	2000      	movs	r0, #0
 80058ba:	f7ff fe81 	bl	80055c0 <ST7735_FillRectangle>
}
 80058be:	bf00      	nop
 80058c0:	3708      	adds	r7, #8
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 80058c6:	b580      	push	{r7, lr}
 80058c8:	b084      	sub	sp, #16
 80058ca:	af02      	add	r7, sp, #8
 80058cc:	4603      	mov	r3, r0
 80058ce:	80fb      	strh	r3, [r7, #6]
	ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80058d0:	88fb      	ldrh	r3, [r7, #6]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	2380      	movs	r3, #128	; 0x80
 80058d6:	2280      	movs	r2, #128	; 0x80
 80058d8:	2100      	movs	r1, #0
 80058da:	2000      	movs	r0, #0
 80058dc:	f7ff fee4 	bl	80056a8 <ST7735_FillRectangle1>
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}

080058e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b083      	sub	sp, #12
 80058ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058ee:	4b0a      	ldr	r3, [pc, #40]	; (8005918 <HAL_MspInit+0x30>)
 80058f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80058f4:	4a08      	ldr	r2, [pc, #32]	; (8005918 <HAL_MspInit+0x30>)
 80058f6:	f043 0302 	orr.w	r3, r3, #2
 80058fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80058fe:	4b06      	ldr	r3, [pc, #24]	; (8005918 <HAL_MspInit+0x30>)
 8005900:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8005904:	f003 0302 	and.w	r3, r3, #2
 8005908:	607b      	str	r3, [r7, #4]
 800590a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	58024400 	.word	0x58024400

0800591c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08e      	sub	sp, #56	; 0x38
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005924:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005928:	2200      	movs	r2, #0
 800592a:	601a      	str	r2, [r3, #0]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	609a      	str	r2, [r3, #8]
 8005930:	60da      	str	r2, [r3, #12]
 8005932:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a59      	ldr	r2, [pc, #356]	; (8005aa0 <HAL_ETH_MspInit+0x184>)
 800593a:	4293      	cmp	r3, r2
 800593c:	f040 80ab 	bne.w	8005a96 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005940:	4b58      	ldr	r3, [pc, #352]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005942:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005946:	4a57      	ldr	r2, [pc, #348]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005948:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800594c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005950:	4b54      	ldr	r3, [pc, #336]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005952:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005956:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800595a:	623b      	str	r3, [r7, #32]
 800595c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800595e:	4b51      	ldr	r3, [pc, #324]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005960:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005964:	4a4f      	ldr	r2, [pc, #316]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005966:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800596a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800596e:	4b4d      	ldr	r3, [pc, #308]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005970:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005978:	61fb      	str	r3, [r7, #28]
 800597a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800597c:	4b49      	ldr	r3, [pc, #292]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 800597e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005982:	4a48      	ldr	r2, [pc, #288]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005988:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800598c:	4b45      	ldr	r3, [pc, #276]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 800598e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005992:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005996:	61bb      	str	r3, [r7, #24]
 8005998:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800599a:	4b42      	ldr	r3, [pc, #264]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 800599c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059a0:	4a40      	ldr	r2, [pc, #256]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059a2:	f043 0304 	orr.w	r3, r3, #4
 80059a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059aa:	4b3e      	ldr	r3, [pc, #248]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80059b8:	4b3a      	ldr	r3, [pc, #232]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059be:	4a39      	ldr	r2, [pc, #228]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059c0:	f043 0301 	orr.w	r3, r3, #1
 80059c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059c8:	4b36      	ldr	r3, [pc, #216]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ce:	f003 0301 	and.w	r3, r3, #1
 80059d2:	613b      	str	r3, [r7, #16]
 80059d4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80059d6:	4b33      	ldr	r3, [pc, #204]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059dc:	4a31      	ldr	r2, [pc, #196]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059de:	f043 0302 	orr.w	r3, r3, #2
 80059e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059e6:	4b2f      	ldr	r3, [pc, #188]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ec:	f003 0302 	and.w	r3, r3, #2
 80059f0:	60fb      	str	r3, [r7, #12]
 80059f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80059f4:	4b2b      	ldr	r3, [pc, #172]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059fa:	4a2a      	ldr	r2, [pc, #168]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 80059fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005a00:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005a04:	4b27      	ldr	r3, [pc, #156]	; (8005aa4 <HAL_ETH_MspInit+0x188>)
 8005a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005a0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a0e:	60bb      	str	r3, [r7, #8]
 8005a10:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005a12:	2332      	movs	r3, #50	; 0x32
 8005a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a16:	2302      	movs	r3, #2
 8005a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a22:	230b      	movs	r3, #11
 8005a24:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	481e      	ldr	r0, [pc, #120]	; (8005aa8 <HAL_ETH_MspInit+0x18c>)
 8005a2e:	f003 fae5 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005a32:	2386      	movs	r3, #134	; 0x86
 8005a34:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a36:	2302      	movs	r3, #2
 8005a38:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a42:	230b      	movs	r3, #11
 8005a44:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a4a:	4619      	mov	r1, r3
 8005a4c:	4817      	ldr	r0, [pc, #92]	; (8005aac <HAL_ETH_MspInit+0x190>)
 8005a4e:	f003 fad5 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005a52:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a58:	2302      	movs	r3, #2
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a60:	2300      	movs	r3, #0
 8005a62:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a64:	230b      	movs	r3, #11
 8005a66:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005a68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4810      	ldr	r0, [pc, #64]	; (8005ab0 <HAL_ETH_MspInit+0x194>)
 8005a70:	f003 fac4 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005a74:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005a7a:	2302      	movs	r3, #2
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a82:	2300      	movs	r3, #0
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005a86:	230b      	movs	r3, #11
 8005a88:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a8e:	4619      	mov	r1, r3
 8005a90:	4808      	ldr	r0, [pc, #32]	; (8005ab4 <HAL_ETH_MspInit+0x198>)
 8005a92:	f003 fab3 	bl	8008ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8005a96:	bf00      	nop
 8005a98:	3738      	adds	r7, #56	; 0x38
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	bd80      	pop	{r7, pc}
 8005a9e:	bf00      	nop
 8005aa0:	40028000 	.word	0x40028000
 8005aa4:	58024400 	.word	0x58024400
 8005aa8:	58020800 	.word	0x58020800
 8005aac:	58020000 	.word	0x58020000
 8005ab0:	58020400 	.word	0x58020400
 8005ab4:	58021800 	.word	0x58021800

08005ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b08a      	sub	sp, #40	; 0x28
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ac0:	f107 0314 	add.w	r3, r7, #20
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	601a      	str	r2, [r3, #0]
 8005ac8:	605a      	str	r2, [r3, #4]
 8005aca:	609a      	str	r2, [r3, #8]
 8005acc:	60da      	str	r2, [r3, #12]
 8005ace:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a2a      	ldr	r2, [pc, #168]	; (8005b80 <HAL_SPI_MspInit+0xc8>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d14d      	bne.n	8005b76 <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005ada:	4b2a      	ldr	r3, [pc, #168]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005adc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ae0:	4a28      	ldr	r2, [pc, #160]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005ae2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ae6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005aea:	4b26      	ldr	r3, [pc, #152]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005aec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005af8:	4b22      	ldr	r3, [pc, #136]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005afa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005afe:	4a21      	ldr	r2, [pc, #132]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005b00:	f043 0302 	orr.w	r3, r3, #2
 8005b04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b08:	4b1e      	ldr	r3, [pc, #120]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005b0a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b0e:	f003 0302 	and.w	r3, r3, #2
 8005b12:	60fb      	str	r3, [r7, #12]
 8005b14:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005b16:	4b1b      	ldr	r3, [pc, #108]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005b18:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b1c:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005b1e:	f043 0304 	orr.w	r3, r3, #4
 8005b22:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005b26:	4b17      	ldr	r3, [pc, #92]	; (8005b84 <HAL_SPI_MspInit+0xcc>)
 8005b28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005b2c:	f003 0304 	and.w	r3, r3, #4
 8005b30:	60bb      	str	r3, [r7, #8]
 8005b32:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005b34:	2304      	movs	r3, #4
 8005b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b38:	2302      	movs	r3, #2
 8005b3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b3c:	2302      	movs	r3, #2
 8005b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8005b44:	2307      	movs	r3, #7
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b48:	f107 0314 	add.w	r3, r7, #20
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	480e      	ldr	r0, [pc, #56]	; (8005b88 <HAL_SPI_MspInit+0xd0>)
 8005b50:	f003 fa54 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005b54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b5a:	2302      	movs	r3, #2
 8005b5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8005b5e:	2302      	movs	r3, #2
 8005b60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b62:	2300      	movs	r3, #0
 8005b64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005b66:	2306      	movs	r3, #6
 8005b68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b6a:	f107 0314 	add.w	r3, r7, #20
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4806      	ldr	r0, [pc, #24]	; (8005b8c <HAL_SPI_MspInit+0xd4>)
 8005b72:	f003 fa43 	bl	8008ffc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8005b76:	bf00      	nop
 8005b78:	3728      	adds	r7, #40	; 0x28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40003c00 	.word	0x40003c00
 8005b84:	58024400 	.word	0x58024400
 8005b88:	58020400 	.word	0x58020400
 8005b8c:	58020800 	.word	0x58020800

08005b90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	4a0e      	ldr	r2, [pc, #56]	; (8005bd8 <HAL_TIM_Base_MspInit+0x48>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d116      	bne.n	8005bd0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 8005ba2:	4b0e      	ldr	r3, [pc, #56]	; (8005bdc <HAL_TIM_Base_MspInit+0x4c>)
 8005ba4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005ba8:	4a0c      	ldr	r2, [pc, #48]	; (8005bdc <HAL_TIM_Base_MspInit+0x4c>)
 8005baa:	f043 0320 	orr.w	r3, r3, #32
 8005bae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005bb2:	4b0a      	ldr	r3, [pc, #40]	; (8005bdc <HAL_TIM_Base_MspInit+0x4c>)
 8005bb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005bb8:	f003 0320 	and.w	r3, r3, #32
 8005bbc:	60fb      	str	r3, [r7, #12]
 8005bbe:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	2100      	movs	r1, #0
 8005bc4:	2037      	movs	r0, #55	; 0x37
 8005bc6:	f000 fb9a 	bl	80062fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8005bca:	2037      	movs	r0, #55	; 0x37
 8005bcc:	f000 fbb1 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8005bd0:	bf00      	nop
 8005bd2:	3710      	adds	r7, #16
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}
 8005bd8:	40001400 	.word	0x40001400
 8005bdc:	58024400 	.word	0x58024400

08005be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b0b8      	sub	sp, #224	; 0xe0
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005be8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]
 8005bf0:	605a      	str	r2, [r3, #4]
 8005bf2:	609a      	str	r2, [r3, #8]
 8005bf4:	60da      	str	r2, [r3, #12]
 8005bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005bf8:	f107 0310 	add.w	r3, r7, #16
 8005bfc:	22bc      	movs	r2, #188	; 0xbc
 8005bfe:	2100      	movs	r1, #0
 8005c00:	4618      	mov	r0, r3
 8005c02:	f009 f88d 	bl	800ed20 <memset>
  if(huart->Instance==USART3)
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a57      	ldr	r2, [pc, #348]	; (8005d68 <HAL_UART_MspInit+0x188>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	f040 80a6 	bne.w	8005d5e <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8005c12:	2302      	movs	r3, #2
 8005c14:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8005c16:	2300      	movs	r3, #0
 8005c18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005c1c:	f107 0310 	add.w	r3, r7, #16
 8005c20:	4618      	mov	r0, r3
 8005c22:	f004 fd81 	bl	800a728 <HAL_RCCEx_PeriphCLKConfig>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d001      	beq.n	8005c30 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8005c2c:	f7ff fa36 	bl	800509c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005c30:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <HAL_UART_MspInit+0x18c>)
 8005c32:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c36:	4a4d      	ldr	r2, [pc, #308]	; (8005d6c <HAL_UART_MspInit+0x18c>)
 8005c38:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8005c40:	4b4a      	ldr	r3, [pc, #296]	; (8005d6c <HAL_UART_MspInit+0x18c>)
 8005c42:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8005c46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c4a:	60fb      	str	r3, [r7, #12]
 8005c4c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005c4e:	4b47      	ldr	r3, [pc, #284]	; (8005d6c <HAL_UART_MspInit+0x18c>)
 8005c50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c54:	4a45      	ldr	r2, [pc, #276]	; (8005d6c <HAL_UART_MspInit+0x18c>)
 8005c56:	f043 0308 	orr.w	r3, r3, #8
 8005c5a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005c5e:	4b43      	ldr	r3, [pc, #268]	; (8005d6c <HAL_UART_MspInit+0x18c>)
 8005c60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005c64:	f003 0308 	and.w	r3, r3, #8
 8005c68:	60bb      	str	r3, [r7, #8]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8005c6c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005c70:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c74:	2302      	movs	r3, #2
 8005c76:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c80:	2300      	movs	r3, #0
 8005c82:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005c86:	2307      	movs	r3, #7
 8005c88:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c8c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005c90:	4619      	mov	r1, r3
 8005c92:	4837      	ldr	r0, [pc, #220]	; (8005d70 <HAL_UART_MspInit+0x190>)
 8005c94:	f003 f9b2 	bl	8008ffc <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005c98:	4b36      	ldr	r3, [pc, #216]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005c9a:	4a37      	ldr	r2, [pc, #220]	; (8005d78 <HAL_UART_MspInit+0x198>)
 8005c9c:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8005c9e:	4b35      	ldr	r3, [pc, #212]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005ca0:	222d      	movs	r2, #45	; 0x2d
 8005ca2:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ca4:	4b33      	ldr	r3, [pc, #204]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005caa:	4b32      	ldr	r3, [pc, #200]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cb0:	4b30      	ldr	r3, [pc, #192]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cb2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cb6:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cb8:	4b2e      	ldr	r3, [pc, #184]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cba:	2200      	movs	r2, #0
 8005cbc:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cbe:	4b2d      	ldr	r3, [pc, #180]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8005cc4:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cc6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cca:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005ccc:	4b29      	ldr	r3, [pc, #164]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cce:	2200      	movs	r2, #0
 8005cd0:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005cd2:	4b28      	ldr	r3, [pc, #160]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8005cd8:	4826      	ldr	r0, [pc, #152]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cda:	f000 fb45 	bl	8006368 <HAL_DMA_Init>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d001      	beq.n	8005ce8 <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8005ce4:	f7ff f9da 	bl	800509c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a22      	ldr	r2, [pc, #136]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cec:	67da      	str	r2, [r3, #124]	; 0x7c
 8005cee:	4a21      	ldr	r2, [pc, #132]	; (8005d74 <HAL_UART_MspInit+0x194>)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8005cf4:	4b21      	ldr	r3, [pc, #132]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005cf6:	4a22      	ldr	r2, [pc, #136]	; (8005d80 <HAL_UART_MspInit+0x1a0>)
 8005cf8:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8005cfa:	4b20      	ldr	r3, [pc, #128]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005cfc:	222e      	movs	r2, #46	; 0x2e
 8005cfe:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d00:	4b1e      	ldr	r3, [pc, #120]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d02:	2240      	movs	r2, #64	; 0x40
 8005d04:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005d06:	4b1d      	ldr	r3, [pc, #116]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d0c:	4b1b      	ldr	r3, [pc, #108]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d0e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d12:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d14:	4b19      	ldr	r3, [pc, #100]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d1a:	4b18      	ldr	r3, [pc, #96]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8005d20:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d26:	4b15      	ldr	r3, [pc, #84]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005d2c:	4b13      	ldr	r3, [pc, #76]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d2e:	2200      	movs	r2, #0
 8005d30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005d32:	4812      	ldr	r0, [pc, #72]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d34:	f000 fb18 	bl	8006368 <HAL_DMA_Init>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d001      	beq.n	8005d42 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8005d3e:	f7ff f9ad 	bl	800509c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	4a0d      	ldr	r2, [pc, #52]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d46:	679a      	str	r2, [r3, #120]	; 0x78
 8005d48:	4a0c      	ldr	r2, [pc, #48]	; (8005d7c <HAL_UART_MspInit+0x19c>)
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8005d4e:	2200      	movs	r2, #0
 8005d50:	2100      	movs	r1, #0
 8005d52:	2027      	movs	r0, #39	; 0x27
 8005d54:	f000 fad3 	bl	80062fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005d58:	2027      	movs	r0, #39	; 0x27
 8005d5a:	f000 faea 	bl	8006332 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8005d5e:	bf00      	nop
 8005d60:	37e0      	adds	r7, #224	; 0xe0
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}
 8005d66:	bf00      	nop
 8005d68:	40004800 	.word	0x40004800
 8005d6c:	58024400 	.word	0x58024400
 8005d70:	58020c00 	.word	0x58020c00
 8005d74:	240003c4 	.word	0x240003c4
 8005d78:	40020028 	.word	0x40020028
 8005d7c:	2400043c 	.word	0x2400043c
 8005d80:	40020070 	.word	0x40020070

08005d84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b08a      	sub	sp, #40	; 0x28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d8c:	f107 0314 	add.w	r3, r7, #20
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	605a      	str	r2, [r3, #4]
 8005d96:	609a      	str	r2, [r3, #8]
 8005d98:	60da      	str	r2, [r3, #12]
 8005d9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	4a22      	ldr	r2, [pc, #136]	; (8005e2c <HAL_PCD_MspInit+0xa8>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d13d      	bne.n	8005e22 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8005da6:	f003 fcf5 	bl	8009794 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005daa:	4b21      	ldr	r3, [pc, #132]	; (8005e30 <HAL_PCD_MspInit+0xac>)
 8005dac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005db0:	4a1f      	ldr	r2, [pc, #124]	; (8005e30 <HAL_PCD_MspInit+0xac>)
 8005db2:	f043 0301 	orr.w	r3, r3, #1
 8005db6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005dba:	4b1d      	ldr	r3, [pc, #116]	; (8005e30 <HAL_PCD_MspInit+0xac>)
 8005dbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	613b      	str	r3, [r7, #16]
 8005dc6:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8005dc8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8005dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dce:	2302      	movs	r3, #2
 8005dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8005dda:	230a      	movs	r3, #10
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005dde:	f107 0314 	add.w	r3, r7, #20
 8005de2:	4619      	mov	r1, r3
 8005de4:	4813      	ldr	r0, [pc, #76]	; (8005e34 <HAL_PCD_MspInit+0xb0>)
 8005de6:	f003 f909 	bl	8008ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8005dea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005dee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005df0:	2300      	movs	r3, #0
 8005df2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005df4:	2300      	movs	r3, #0
 8005df6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005df8:	f107 0314 	add.w	r3, r7, #20
 8005dfc:	4619      	mov	r1, r3
 8005dfe:	480d      	ldr	r0, [pc, #52]	; (8005e34 <HAL_PCD_MspInit+0xb0>)
 8005e00:	f003 f8fc 	bl	8008ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8005e04:	4b0a      	ldr	r3, [pc, #40]	; (8005e30 <HAL_PCD_MspInit+0xac>)
 8005e06:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e0a:	4a09      	ldr	r2, [pc, #36]	; (8005e30 <HAL_PCD_MspInit+0xac>)
 8005e0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005e10:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005e14:	4b06      	ldr	r3, [pc, #24]	; (8005e30 <HAL_PCD_MspInit+0xac>)
 8005e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005e1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e1e:	60fb      	str	r3, [r7, #12]
 8005e20:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8005e22:	bf00      	nop
 8005e24:	3728      	adds	r7, #40	; 0x28
 8005e26:	46bd      	mov	sp, r7
 8005e28:	bd80      	pop	{r7, pc}
 8005e2a:	bf00      	nop
 8005e2c:	40080000 	.word	0x40080000
 8005e30:	58024400 	.word	0x58024400
 8005e34:	58020000 	.word	0x58020000

08005e38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005e38:	b480      	push	{r7}
 8005e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005e3c:	e7fe      	b.n	8005e3c <NMI_Handler+0x4>

08005e3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005e3e:	b480      	push	{r7}
 8005e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005e42:	e7fe      	b.n	8005e42 <HardFault_Handler+0x4>

08005e44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005e44:	b480      	push	{r7}
 8005e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005e48:	e7fe      	b.n	8005e48 <MemManage_Handler+0x4>

08005e4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005e4e:	e7fe      	b.n	8005e4e <BusFault_Handler+0x4>

08005e50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005e54:	e7fe      	b.n	8005e54 <UsageFault_Handler+0x4>

08005e56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005e56:	b480      	push	{r7}
 8005e58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005e5a:	bf00      	nop
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e62:	4770      	bx	lr

08005e64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005e64:	b480      	push	{r7}
 8005e66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005e68:	bf00      	nop
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005e72:	b480      	push	{r7}
 8005e74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005e76:	bf00      	nop
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7e:	4770      	bx	lr

08005e80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005e84:	f000 f8fc 	bl	8006080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005e88:	bf00      	nop
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8005e90:	4802      	ldr	r0, [pc, #8]	; (8005e9c <DMA1_Stream1_IRQHandler+0x10>)
 8005e92:	f001 fb29 	bl	80074e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8005e96:	bf00      	nop
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	240003c4 	.word	0x240003c4

08005ea0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8005ea4:	4802      	ldr	r0, [pc, #8]	; (8005eb0 <DMA1_Stream4_IRQHandler+0x10>)
 8005ea6:	f001 fb1f 	bl	80074e8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8005eaa:	bf00      	nop
 8005eac:	bd80      	pop	{r7, pc}
 8005eae:	bf00      	nop
 8005eb0:	2400043c 	.word	0x2400043c

08005eb4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005eb8:	4802      	ldr	r0, [pc, #8]	; (8005ec4 <USART3_IRQHandler+0x10>)
 8005eba:	f006 ff59 	bl	800cd70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005ebe:	bf00      	nop
 8005ec0:	bd80      	pop	{r7, pc}
 8005ec2:	bf00      	nop
 8005ec4:	24000334 	.word	0x24000334

08005ec8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8005ecc:	4802      	ldr	r0, [pc, #8]	; (8005ed8 <TIM7_IRQHandler+0x10>)
 8005ece:	f006 fc72 	bl	800c7b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8005ed2:	bf00      	nop
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	240002e8 	.word	0x240002e8

08005edc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005ee4:	4a14      	ldr	r2, [pc, #80]	; (8005f38 <_sbrk+0x5c>)
 8005ee6:	4b15      	ldr	r3, [pc, #84]	; (8005f3c <_sbrk+0x60>)
 8005ee8:	1ad3      	subs	r3, r2, r3
 8005eea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005eec:	697b      	ldr	r3, [r7, #20]
 8005eee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005ef0:	4b13      	ldr	r3, [pc, #76]	; (8005f40 <_sbrk+0x64>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d102      	bne.n	8005efe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005ef8:	4b11      	ldr	r3, [pc, #68]	; (8005f40 <_sbrk+0x64>)
 8005efa:	4a12      	ldr	r2, [pc, #72]	; (8005f44 <_sbrk+0x68>)
 8005efc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005efe:	4b10      	ldr	r3, [pc, #64]	; (8005f40 <_sbrk+0x64>)
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4413      	add	r3, r2
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d207      	bcs.n	8005f1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005f0c:	f008 fede 	bl	800eccc <__errno>
 8005f10:	4603      	mov	r3, r0
 8005f12:	220c      	movs	r2, #12
 8005f14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005f16:	f04f 33ff 	mov.w	r3, #4294967295
 8005f1a:	e009      	b.n	8005f30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005f1c:	4b08      	ldr	r3, [pc, #32]	; (8005f40 <_sbrk+0x64>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005f22:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <_sbrk+0x64>)
 8005f24:	681a      	ldr	r2, [r3, #0]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4413      	add	r3, r2
 8005f2a:	4a05      	ldr	r2, [pc, #20]	; (8005f40 <_sbrk+0x64>)
 8005f2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005f2e:	68fb      	ldr	r3, [r7, #12]
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	3718      	adds	r7, #24
 8005f34:	46bd      	mov	sp, r7
 8005f36:	bd80      	pop	{r7, pc}
 8005f38:	24080000 	.word	0x24080000
 8005f3c:	00000400 	.word	0x00000400
 8005f40:	24000eb0 	.word	0x24000eb0
 8005f44:	24000ec8 	.word	0x24000ec8

08005f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8005f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005f80 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005f4c:	f7fe fc0e 	bl	800476c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005f50:	480c      	ldr	r0, [pc, #48]	; (8005f84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8005f52:	490d      	ldr	r1, [pc, #52]	; (8005f88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8005f54:	4a0d      	ldr	r2, [pc, #52]	; (8005f8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8005f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005f58:	e002      	b.n	8005f60 <LoopCopyDataInit>

08005f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005f5e:	3304      	adds	r3, #4

08005f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005f64:	d3f9      	bcc.n	8005f5a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005f66:	4a0a      	ldr	r2, [pc, #40]	; (8005f90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005f68:	4c0a      	ldr	r4, [pc, #40]	; (8005f94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8005f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005f6c:	e001      	b.n	8005f72 <LoopFillZerobss>

08005f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005f70:	3204      	adds	r2, #4

08005f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005f74:	d3fb      	bcc.n	8005f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8005f76:	f008 feaf 	bl	800ecd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005f7a:	f7fe fc8d 	bl	8004898 <main>
  bx  lr
 8005f7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005f80:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8005f84:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005f88:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8005f8c:	08010ffc 	.word	0x08010ffc
  ldr r2, =_sbss
 8005f90:	24000148 	.word	0x24000148
  ldr r4, =_ebss
 8005f94:	24000ec8 	.word	0x24000ec8

08005f98 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005f98:	e7fe      	b.n	8005f98 <ADC3_IRQHandler>
	...

08005f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005fa2:	2003      	movs	r0, #3
 8005fa4:	f000 f9a0 	bl	80062e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8005fa8:	f004 f9e8 	bl	800a37c <HAL_RCC_GetSysClockFreq>
 8005fac:	4602      	mov	r2, r0
 8005fae:	4b15      	ldr	r3, [pc, #84]	; (8006004 <HAL_Init+0x68>)
 8005fb0:	699b      	ldr	r3, [r3, #24]
 8005fb2:	0a1b      	lsrs	r3, r3, #8
 8005fb4:	f003 030f 	and.w	r3, r3, #15
 8005fb8:	4913      	ldr	r1, [pc, #76]	; (8006008 <HAL_Init+0x6c>)
 8005fba:	5ccb      	ldrb	r3, [r1, r3]
 8005fbc:	f003 031f 	and.w	r3, r3, #31
 8005fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8005fc4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005fc6:	4b0f      	ldr	r3, [pc, #60]	; (8006004 <HAL_Init+0x68>)
 8005fc8:	699b      	ldr	r3, [r3, #24]
 8005fca:	f003 030f 	and.w	r3, r3, #15
 8005fce:	4a0e      	ldr	r2, [pc, #56]	; (8006008 <HAL_Init+0x6c>)
 8005fd0:	5cd3      	ldrb	r3, [r2, r3]
 8005fd2:	f003 031f 	and.w	r3, r3, #31
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fdc:	4a0b      	ldr	r2, [pc, #44]	; (800600c <HAL_Init+0x70>)
 8005fde:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005fe0:	4a0b      	ldr	r2, [pc, #44]	; (8006010 <HAL_Init+0x74>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005fe6:	2000      	movs	r0, #0
 8005fe8:	f000 f814 	bl	8006014 <HAL_InitTick>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e002      	b.n	8005ffc <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8005ff6:	f7ff fc77 	bl	80058e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005ffa:	2300      	movs	r3, #0
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3708      	adds	r7, #8
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	58024400 	.word	0x58024400
 8006008:	0800fa38 	.word	0x0800fa38
 800600c:	24000008 	.word	0x24000008
 8006010:	24000004 	.word	0x24000004

08006014 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800601c:	4b15      	ldr	r3, [pc, #84]	; (8006074 <HAL_InitTick+0x60>)
 800601e:	781b      	ldrb	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d101      	bne.n	8006028 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8006024:	2301      	movs	r3, #1
 8006026:	e021      	b.n	800606c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8006028:	4b13      	ldr	r3, [pc, #76]	; (8006078 <HAL_InitTick+0x64>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <HAL_InitTick+0x60>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	4619      	mov	r1, r3
 8006032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006036:	fbb3 f3f1 	udiv	r3, r3, r1
 800603a:	fbb2 f3f3 	udiv	r3, r2, r3
 800603e:	4618      	mov	r0, r3
 8006040:	f000 f985 	bl	800634e <HAL_SYSTICK_Config>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800604a:	2301      	movs	r3, #1
 800604c:	e00e      	b.n	800606c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b0f      	cmp	r3, #15
 8006052:	d80a      	bhi.n	800606a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006054:	2200      	movs	r2, #0
 8006056:	6879      	ldr	r1, [r7, #4]
 8006058:	f04f 30ff 	mov.w	r0, #4294967295
 800605c:	f000 f94f 	bl	80062fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006060:	4a06      	ldr	r2, [pc, #24]	; (800607c <HAL_InitTick+0x68>)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006066:	2300      	movs	r3, #0
 8006068:	e000      	b.n	800606c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
}
 800606c:	4618      	mov	r0, r3
 800606e:	3708      	adds	r7, #8
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	24000020 	.word	0x24000020
 8006078:	24000004 	.word	0x24000004
 800607c:	2400001c 	.word	0x2400001c

08006080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_IncTick+0x20>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	461a      	mov	r2, r3
 800608a:	4b06      	ldr	r3, [pc, #24]	; (80060a4 <HAL_IncTick+0x24>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4413      	add	r3, r2
 8006090:	4a04      	ldr	r2, [pc, #16]	; (80060a4 <HAL_IncTick+0x24>)
 8006092:	6013      	str	r3, [r2, #0]
}
 8006094:	bf00      	nop
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	24000020 	.word	0x24000020
 80060a4:	24000eb4 	.word	0x24000eb4

080060a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80060a8:	b480      	push	{r7}
 80060aa:	af00      	add	r7, sp, #0
  return uwTick;
 80060ac:	4b03      	ldr	r3, [pc, #12]	; (80060bc <HAL_GetTick+0x14>)
 80060ae:	681b      	ldr	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	46bd      	mov	sp, r7
 80060b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b8:	4770      	bx	lr
 80060ba:	bf00      	nop
 80060bc:	24000eb4 	.word	0x24000eb4

080060c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80060c8:	f7ff ffee 	bl	80060a8 <HAL_GetTick>
 80060cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060d8:	d005      	beq.n	80060e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80060da:	4b0a      	ldr	r3, [pc, #40]	; (8006104 <HAL_Delay+0x44>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4413      	add	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80060e6:	bf00      	nop
 80060e8:	f7ff ffde 	bl	80060a8 <HAL_GetTick>
 80060ec:	4602      	mov	r2, r0
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	1ad3      	subs	r3, r2, r3
 80060f2:	68fa      	ldr	r2, [r7, #12]
 80060f4:	429a      	cmp	r2, r3
 80060f6:	d8f7      	bhi.n	80060e8 <HAL_Delay+0x28>
  {
  }
}
 80060f8:	bf00      	nop
 80060fa:	bf00      	nop
 80060fc:	3710      	adds	r7, #16
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	24000020 	.word	0x24000020

08006108 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8006108:	b480      	push	{r7}
 800610a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <HAL_GetREVID+0x14>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	0c1b      	lsrs	r3, r3, #16
}
 8006112:	4618      	mov	r0, r3
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	5c001000 	.word	0x5c001000

08006120 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8006128:	4b06      	ldr	r3, [pc, #24]	; (8006144 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800612a:	685b      	ldr	r3, [r3, #4]
 800612c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006130:	4904      	ldr	r1, [pc, #16]	; (8006144 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4313      	orrs	r3, r2
 8006136:	604b      	str	r3, [r1, #4]
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr
 8006144:	58000400 	.word	0x58000400

08006148 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f003 0307 	and.w	r3, r3, #7
 8006156:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006158:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <__NVIC_SetPriorityGrouping+0x40>)
 800615a:	68db      	ldr	r3, [r3, #12]
 800615c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800615e:	68ba      	ldr	r2, [r7, #8]
 8006160:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006164:	4013      	ands	r3, r2
 8006166:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800616c:	68bb      	ldr	r3, [r7, #8]
 800616e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8006170:	4b06      	ldr	r3, [pc, #24]	; (800618c <__NVIC_SetPriorityGrouping+0x44>)
 8006172:	4313      	orrs	r3, r2
 8006174:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006176:	4a04      	ldr	r2, [pc, #16]	; (8006188 <__NVIC_SetPriorityGrouping+0x40>)
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	60d3      	str	r3, [r2, #12]
}
 800617c:	bf00      	nop
 800617e:	3714      	adds	r7, #20
 8006180:	46bd      	mov	sp, r7
 8006182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006186:	4770      	bx	lr
 8006188:	e000ed00 	.word	0xe000ed00
 800618c:	05fa0000 	.word	0x05fa0000

08006190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006190:	b480      	push	{r7}
 8006192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006194:	4b04      	ldr	r3, [pc, #16]	; (80061a8 <__NVIC_GetPriorityGrouping+0x18>)
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	0a1b      	lsrs	r3, r3, #8
 800619a:	f003 0307 	and.w	r3, r3, #7
}
 800619e:	4618      	mov	r0, r3
 80061a0:	46bd      	mov	sp, r7
 80061a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a6:	4770      	bx	lr
 80061a8:	e000ed00 	.word	0xe000ed00

080061ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	4603      	mov	r3, r0
 80061b4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	db0b      	blt.n	80061d6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80061be:	88fb      	ldrh	r3, [r7, #6]
 80061c0:	f003 021f 	and.w	r2, r3, #31
 80061c4:	4907      	ldr	r1, [pc, #28]	; (80061e4 <__NVIC_EnableIRQ+0x38>)
 80061c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061ca:	095b      	lsrs	r3, r3, #5
 80061cc:	2001      	movs	r0, #1
 80061ce:	fa00 f202 	lsl.w	r2, r0, r2
 80061d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80061d6:	bf00      	nop
 80061d8:	370c      	adds	r7, #12
 80061da:	46bd      	mov	sp, r7
 80061dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e0:	4770      	bx	lr
 80061e2:	bf00      	nop
 80061e4:	e000e100 	.word	0xe000e100

080061e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	4603      	mov	r3, r0
 80061f0:	6039      	str	r1, [r7, #0]
 80061f2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80061f4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	db0a      	blt.n	8006212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	490c      	ldr	r1, [pc, #48]	; (8006234 <__NVIC_SetPriority+0x4c>)
 8006202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006206:	0112      	lsls	r2, r2, #4
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	440b      	add	r3, r1
 800620c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006210:	e00a      	b.n	8006228 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	b2da      	uxtb	r2, r3
 8006216:	4908      	ldr	r1, [pc, #32]	; (8006238 <__NVIC_SetPriority+0x50>)
 8006218:	88fb      	ldrh	r3, [r7, #6]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	3b04      	subs	r3, #4
 8006220:	0112      	lsls	r2, r2, #4
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	440b      	add	r3, r1
 8006226:	761a      	strb	r2, [r3, #24]
}
 8006228:	bf00      	nop
 800622a:	370c      	adds	r7, #12
 800622c:	46bd      	mov	sp, r7
 800622e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006232:	4770      	bx	lr
 8006234:	e000e100 	.word	0xe000e100
 8006238:	e000ed00 	.word	0xe000ed00

0800623c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800623c:	b480      	push	{r7}
 800623e:	b089      	sub	sp, #36	; 0x24
 8006240:	af00      	add	r7, sp, #0
 8006242:	60f8      	str	r0, [r7, #12]
 8006244:	60b9      	str	r1, [r7, #8]
 8006246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	f003 0307 	and.w	r3, r3, #7
 800624e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f1c3 0307 	rsb	r3, r3, #7
 8006256:	2b04      	cmp	r3, #4
 8006258:	bf28      	it	cs
 800625a:	2304      	movcs	r3, #4
 800625c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	3304      	adds	r3, #4
 8006262:	2b06      	cmp	r3, #6
 8006264:	d902      	bls.n	800626c <NVIC_EncodePriority+0x30>
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	3b03      	subs	r3, #3
 800626a:	e000      	b.n	800626e <NVIC_EncodePriority+0x32>
 800626c:	2300      	movs	r3, #0
 800626e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006270:	f04f 32ff 	mov.w	r2, #4294967295
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	fa02 f303 	lsl.w	r3, r2, r3
 800627a:	43da      	mvns	r2, r3
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	401a      	ands	r2, r3
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006284:	f04f 31ff 	mov.w	r1, #4294967295
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	fa01 f303 	lsl.w	r3, r1, r3
 800628e:	43d9      	mvns	r1, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006294:	4313      	orrs	r3, r2
         );
}
 8006296:	4618      	mov	r0, r3
 8006298:	3724      	adds	r7, #36	; 0x24
 800629a:	46bd      	mov	sp, r7
 800629c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a0:	4770      	bx	lr
	...

080062a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	3b01      	subs	r3, #1
 80062b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80062b4:	d301      	bcc.n	80062ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80062b6:	2301      	movs	r3, #1
 80062b8:	e00f      	b.n	80062da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80062ba:	4a0a      	ldr	r2, [pc, #40]	; (80062e4 <SysTick_Config+0x40>)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3b01      	subs	r3, #1
 80062c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80062c2:	210f      	movs	r1, #15
 80062c4:	f04f 30ff 	mov.w	r0, #4294967295
 80062c8:	f7ff ff8e 	bl	80061e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <SysTick_Config+0x40>)
 80062ce:	2200      	movs	r2, #0
 80062d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80062d2:	4b04      	ldr	r3, [pc, #16]	; (80062e4 <SysTick_Config+0x40>)
 80062d4:	2207      	movs	r2, #7
 80062d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3708      	adds	r7, #8
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	e000e010 	.word	0xe000e010

080062e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f7ff ff29 	bl	8006148 <__NVIC_SetPriorityGrouping>
}
 80062f6:	bf00      	nop
 80062f8:	3708      	adds	r7, #8
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b086      	sub	sp, #24
 8006302:	af00      	add	r7, sp, #0
 8006304:	4603      	mov	r3, r0
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
 800630a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800630c:	f7ff ff40 	bl	8006190 <__NVIC_GetPriorityGrouping>
 8006310:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006312:	687a      	ldr	r2, [r7, #4]
 8006314:	68b9      	ldr	r1, [r7, #8]
 8006316:	6978      	ldr	r0, [r7, #20]
 8006318:	f7ff ff90 	bl	800623c <NVIC_EncodePriority>
 800631c:	4602      	mov	r2, r0
 800631e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8006322:	4611      	mov	r1, r2
 8006324:	4618      	mov	r0, r3
 8006326:	f7ff ff5f 	bl	80061e8 <__NVIC_SetPriority>
}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}

08006332 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006332:	b580      	push	{r7, lr}
 8006334:	b082      	sub	sp, #8
 8006336:	af00      	add	r7, sp, #0
 8006338:	4603      	mov	r3, r0
 800633a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800633c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006340:	4618      	mov	r0, r3
 8006342:	f7ff ff33 	bl	80061ac <__NVIC_EnableIRQ>
}
 8006346:	bf00      	nop
 8006348:	3708      	adds	r7, #8
 800634a:	46bd      	mov	sp, r7
 800634c:	bd80      	pop	{r7, pc}

0800634e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800634e:	b580      	push	{r7, lr}
 8006350:	b082      	sub	sp, #8
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f7ff ffa4 	bl	80062a4 <SysTick_Config>
 800635c:	4603      	mov	r3, r0
}
 800635e:	4618      	mov	r0, r3
 8006360:	3708      	adds	r7, #8
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}
	...

08006368 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8006370:	f7ff fe9a 	bl	80060a8 <HAL_GetTick>
 8006374:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d101      	bne.n	8006380 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e316      	b.n	80069ae <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a66      	ldr	r2, [pc, #408]	; (8006520 <HAL_DMA_Init+0x1b8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d04a      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4a65      	ldr	r2, [pc, #404]	; (8006524 <HAL_DMA_Init+0x1bc>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d045      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	4a63      	ldr	r2, [pc, #396]	; (8006528 <HAL_DMA_Init+0x1c0>)
 800639a:	4293      	cmp	r3, r2
 800639c:	d040      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a62      	ldr	r2, [pc, #392]	; (800652c <HAL_DMA_Init+0x1c4>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d03b      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a60      	ldr	r2, [pc, #384]	; (8006530 <HAL_DMA_Init+0x1c8>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d036      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a5f      	ldr	r2, [pc, #380]	; (8006534 <HAL_DMA_Init+0x1cc>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d031      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a5d      	ldr	r2, [pc, #372]	; (8006538 <HAL_DMA_Init+0x1d0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d02c      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a5c      	ldr	r2, [pc, #368]	; (800653c <HAL_DMA_Init+0x1d4>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d027      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a5a      	ldr	r2, [pc, #360]	; (8006540 <HAL_DMA_Init+0x1d8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d022      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a59      	ldr	r2, [pc, #356]	; (8006544 <HAL_DMA_Init+0x1dc>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d01d      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a57      	ldr	r2, [pc, #348]	; (8006548 <HAL_DMA_Init+0x1e0>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d018      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4a56      	ldr	r2, [pc, #344]	; (800654c <HAL_DMA_Init+0x1e4>)
 80063f4:	4293      	cmp	r3, r2
 80063f6:	d013      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a54      	ldr	r2, [pc, #336]	; (8006550 <HAL_DMA_Init+0x1e8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d00e      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a53      	ldr	r2, [pc, #332]	; (8006554 <HAL_DMA_Init+0x1ec>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d009      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a51      	ldr	r2, [pc, #324]	; (8006558 <HAL_DMA_Init+0x1f0>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d004      	beq.n	8006420 <HAL_DMA_Init+0xb8>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a50      	ldr	r2, [pc, #320]	; (800655c <HAL_DMA_Init+0x1f4>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d101      	bne.n	8006424 <HAL_DMA_Init+0xbc>
 8006420:	2301      	movs	r3, #1
 8006422:	e000      	b.n	8006426 <HAL_DMA_Init+0xbe>
 8006424:	2300      	movs	r3, #0
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 813b 	beq.w	80066a2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a37      	ldr	r2, [pc, #220]	; (8006520 <HAL_DMA_Init+0x1b8>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d04a      	beq.n	80064dc <HAL_DMA_Init+0x174>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a36      	ldr	r2, [pc, #216]	; (8006524 <HAL_DMA_Init+0x1bc>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d045      	beq.n	80064dc <HAL_DMA_Init+0x174>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a34      	ldr	r2, [pc, #208]	; (8006528 <HAL_DMA_Init+0x1c0>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d040      	beq.n	80064dc <HAL_DMA_Init+0x174>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a33      	ldr	r2, [pc, #204]	; (800652c <HAL_DMA_Init+0x1c4>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d03b      	beq.n	80064dc <HAL_DMA_Init+0x174>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a31      	ldr	r2, [pc, #196]	; (8006530 <HAL_DMA_Init+0x1c8>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d036      	beq.n	80064dc <HAL_DMA_Init+0x174>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	4a30      	ldr	r2, [pc, #192]	; (8006534 <HAL_DMA_Init+0x1cc>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d031      	beq.n	80064dc <HAL_DMA_Init+0x174>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a2e      	ldr	r2, [pc, #184]	; (8006538 <HAL_DMA_Init+0x1d0>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d02c      	beq.n	80064dc <HAL_DMA_Init+0x174>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a2d      	ldr	r2, [pc, #180]	; (800653c <HAL_DMA_Init+0x1d4>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d027      	beq.n	80064dc <HAL_DMA_Init+0x174>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a2b      	ldr	r2, [pc, #172]	; (8006540 <HAL_DMA_Init+0x1d8>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d022      	beq.n	80064dc <HAL_DMA_Init+0x174>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a2a      	ldr	r2, [pc, #168]	; (8006544 <HAL_DMA_Init+0x1dc>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d01d      	beq.n	80064dc <HAL_DMA_Init+0x174>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a28      	ldr	r2, [pc, #160]	; (8006548 <HAL_DMA_Init+0x1e0>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d018      	beq.n	80064dc <HAL_DMA_Init+0x174>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a27      	ldr	r2, [pc, #156]	; (800654c <HAL_DMA_Init+0x1e4>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d013      	beq.n	80064dc <HAL_DMA_Init+0x174>
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	4a25      	ldr	r2, [pc, #148]	; (8006550 <HAL_DMA_Init+0x1e8>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00e      	beq.n	80064dc <HAL_DMA_Init+0x174>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4a24      	ldr	r2, [pc, #144]	; (8006554 <HAL_DMA_Init+0x1ec>)
 80064c4:	4293      	cmp	r3, r2
 80064c6:	d009      	beq.n	80064dc <HAL_DMA_Init+0x174>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	4a22      	ldr	r2, [pc, #136]	; (8006558 <HAL_DMA_Init+0x1f0>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d004      	beq.n	80064dc <HAL_DMA_Init+0x174>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	4a21      	ldr	r2, [pc, #132]	; (800655c <HAL_DMA_Init+0x1f4>)
 80064d8:	4293      	cmp	r3, r2
 80064da:	d108      	bne.n	80064ee <HAL_DMA_Init+0x186>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f022 0201 	bic.w	r2, r2, #1
 80064ea:	601a      	str	r2, [r3, #0]
 80064ec:	e007      	b.n	80064fe <HAL_DMA_Init+0x196>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f022 0201 	bic.w	r2, r2, #1
 80064fc:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80064fe:	e02f      	b.n	8006560 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006500:	f7ff fdd2 	bl	80060a8 <HAL_GetTick>
 8006504:	4602      	mov	r2, r0
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	1ad3      	subs	r3, r2, r3
 800650a:	2b05      	cmp	r3, #5
 800650c:	d928      	bls.n	8006560 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	2220      	movs	r2, #32
 8006512:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2203      	movs	r2, #3
 8006518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800651c:	2301      	movs	r3, #1
 800651e:	e246      	b.n	80069ae <HAL_DMA_Init+0x646>
 8006520:	40020010 	.word	0x40020010
 8006524:	40020028 	.word	0x40020028
 8006528:	40020040 	.word	0x40020040
 800652c:	40020058 	.word	0x40020058
 8006530:	40020070 	.word	0x40020070
 8006534:	40020088 	.word	0x40020088
 8006538:	400200a0 	.word	0x400200a0
 800653c:	400200b8 	.word	0x400200b8
 8006540:	40020410 	.word	0x40020410
 8006544:	40020428 	.word	0x40020428
 8006548:	40020440 	.word	0x40020440
 800654c:	40020458 	.word	0x40020458
 8006550:	40020470 	.word	0x40020470
 8006554:	40020488 	.word	0x40020488
 8006558:	400204a0 	.word	0x400204a0
 800655c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f003 0301 	and.w	r3, r3, #1
 800656a:	2b00      	cmp	r3, #0
 800656c:	d1c8      	bne.n	8006500 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006576:	697a      	ldr	r2, [r7, #20]
 8006578:	4b83      	ldr	r3, [pc, #524]	; (8006788 <HAL_DMA_Init+0x420>)
 800657a:	4013      	ands	r3, r2
 800657c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8006586:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	691b      	ldr	r3, [r3, #16]
 800658c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006592:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	699b      	ldr	r3, [r3, #24]
 8006598:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800659e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	6a1b      	ldr	r3, [r3, #32]
 80065a4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	4313      	orrs	r3, r2
 80065aa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b0:	2b04      	cmp	r3, #4
 80065b2:	d107      	bne.n	80065c4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065bc:	4313      	orrs	r3, r2
 80065be:	697a      	ldr	r2, [r7, #20]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80065c4:	4b71      	ldr	r3, [pc, #452]	; (800678c <HAL_DMA_Init+0x424>)
 80065c6:	681a      	ldr	r2, [r3, #0]
 80065c8:	4b71      	ldr	r3, [pc, #452]	; (8006790 <HAL_DMA_Init+0x428>)
 80065ca:	4013      	ands	r3, r2
 80065cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065d0:	d328      	bcc.n	8006624 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	2b28      	cmp	r3, #40	; 0x28
 80065d8:	d903      	bls.n	80065e2 <HAL_DMA_Init+0x27a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	685b      	ldr	r3, [r3, #4]
 80065de:	2b2e      	cmp	r3, #46	; 0x2e
 80065e0:	d917      	bls.n	8006612 <HAL_DMA_Init+0x2aa>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	685b      	ldr	r3, [r3, #4]
 80065e6:	2b3e      	cmp	r3, #62	; 0x3e
 80065e8:	d903      	bls.n	80065f2 <HAL_DMA_Init+0x28a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	2b42      	cmp	r3, #66	; 0x42
 80065f0:	d90f      	bls.n	8006612 <HAL_DMA_Init+0x2aa>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	2b46      	cmp	r3, #70	; 0x46
 80065f8:	d903      	bls.n	8006602 <HAL_DMA_Init+0x29a>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	685b      	ldr	r3, [r3, #4]
 80065fe:	2b48      	cmp	r3, #72	; 0x48
 8006600:	d907      	bls.n	8006612 <HAL_DMA_Init+0x2aa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	2b4e      	cmp	r3, #78	; 0x4e
 8006608:	d905      	bls.n	8006616 <HAL_DMA_Init+0x2ae>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	2b52      	cmp	r3, #82	; 0x52
 8006610:	d801      	bhi.n	8006616 <HAL_DMA_Init+0x2ae>
 8006612:	2301      	movs	r3, #1
 8006614:	e000      	b.n	8006618 <HAL_DMA_Init+0x2b0>
 8006616:	2300      	movs	r3, #0
 8006618:	2b00      	cmp	r3, #0
 800661a:	d003      	beq.n	8006624 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006622:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695b      	ldr	r3, [r3, #20]
 8006632:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f023 0307 	bic.w	r3, r3, #7
 800663a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	4313      	orrs	r3, r2
 8006644:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664a:	2b04      	cmp	r3, #4
 800664c:	d117      	bne.n	800667e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	4313      	orrs	r3, r2
 8006656:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00e      	beq.n	800667e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 ff1d 	bl	80084a0 <DMA_CheckFifoParam>
 8006666:	4603      	mov	r3, r0
 8006668:	2b00      	cmp	r3, #0
 800666a:	d008      	beq.n	800667e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2240      	movs	r2, #64	; 0x40
 8006670:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2201      	movs	r2, #1
 8006676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e197      	b.n	80069ae <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f001 fe58 	bl	800833c <DMA_CalcBaseAndBitshift>
 800668c:	4603      	mov	r3, r0
 800668e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006694:	f003 031f 	and.w	r3, r3, #31
 8006698:	223f      	movs	r2, #63	; 0x3f
 800669a:	409a      	lsls	r2, r3
 800669c:	68bb      	ldr	r3, [r7, #8]
 800669e:	609a      	str	r2, [r3, #8]
 80066a0:	e0cd      	b.n	800683e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	4a3b      	ldr	r2, [pc, #236]	; (8006794 <HAL_DMA_Init+0x42c>)
 80066a8:	4293      	cmp	r3, r2
 80066aa:	d022      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	4a39      	ldr	r2, [pc, #228]	; (8006798 <HAL_DMA_Init+0x430>)
 80066b2:	4293      	cmp	r3, r2
 80066b4:	d01d      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	4a38      	ldr	r2, [pc, #224]	; (800679c <HAL_DMA_Init+0x434>)
 80066bc:	4293      	cmp	r3, r2
 80066be:	d018      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	4a36      	ldr	r2, [pc, #216]	; (80067a0 <HAL_DMA_Init+0x438>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d013      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4a35      	ldr	r2, [pc, #212]	; (80067a4 <HAL_DMA_Init+0x43c>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d00e      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a33      	ldr	r2, [pc, #204]	; (80067a8 <HAL_DMA_Init+0x440>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d009      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4a32      	ldr	r2, [pc, #200]	; (80067ac <HAL_DMA_Init+0x444>)
 80066e4:	4293      	cmp	r3, r2
 80066e6:	d004      	beq.n	80066f2 <HAL_DMA_Init+0x38a>
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4a30      	ldr	r2, [pc, #192]	; (80067b0 <HAL_DMA_Init+0x448>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d101      	bne.n	80066f6 <HAL_DMA_Init+0x38e>
 80066f2:	2301      	movs	r3, #1
 80066f4:	e000      	b.n	80066f8 <HAL_DMA_Init+0x390>
 80066f6:	2300      	movs	r3, #0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	f000 8097 	beq.w	800682c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	4a24      	ldr	r2, [pc, #144]	; (8006794 <HAL_DMA_Init+0x42c>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d021      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a22      	ldr	r2, [pc, #136]	; (8006798 <HAL_DMA_Init+0x430>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d01c      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a21      	ldr	r2, [pc, #132]	; (800679c <HAL_DMA_Init+0x434>)
 8006718:	4293      	cmp	r3, r2
 800671a:	d017      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1f      	ldr	r2, [pc, #124]	; (80067a0 <HAL_DMA_Init+0x438>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d012      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a1e      	ldr	r2, [pc, #120]	; (80067a4 <HAL_DMA_Init+0x43c>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d00d      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1c      	ldr	r2, [pc, #112]	; (80067a8 <HAL_DMA_Init+0x440>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d008      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a1b      	ldr	r2, [pc, #108]	; (80067ac <HAL_DMA_Init+0x444>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <HAL_DMA_Init+0x3e4>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a19      	ldr	r2, [pc, #100]	; (80067b0 <HAL_DMA_Init+0x448>)
 800674a:	4293      	cmp	r3, r2
 800674c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2202      	movs	r2, #2
 8006752:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	4b12      	ldr	r3, [pc, #72]	; (80067b4 <HAL_DMA_Init+0x44c>)
 800676a:	4013      	ands	r3, r2
 800676c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	689b      	ldr	r3, [r3, #8]
 8006772:	2b40      	cmp	r3, #64	; 0x40
 8006774:	d020      	beq.n	80067b8 <HAL_DMA_Init+0x450>
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	2b80      	cmp	r3, #128	; 0x80
 800677c:	d102      	bne.n	8006784 <HAL_DMA_Init+0x41c>
 800677e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006782:	e01a      	b.n	80067ba <HAL_DMA_Init+0x452>
 8006784:	2300      	movs	r3, #0
 8006786:	e018      	b.n	80067ba <HAL_DMA_Init+0x452>
 8006788:	fe10803f 	.word	0xfe10803f
 800678c:	5c001000 	.word	0x5c001000
 8006790:	ffff0000 	.word	0xffff0000
 8006794:	58025408 	.word	0x58025408
 8006798:	5802541c 	.word	0x5802541c
 800679c:	58025430 	.word	0x58025430
 80067a0:	58025444 	.word	0x58025444
 80067a4:	58025458 	.word	0x58025458
 80067a8:	5802546c 	.word	0x5802546c
 80067ac:	58025480 	.word	0x58025480
 80067b0:	58025494 	.word	0x58025494
 80067b4:	fffe000f 	.word	0xfffe000f
 80067b8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80067ba:	687a      	ldr	r2, [r7, #4]
 80067bc:	68d2      	ldr	r2, [r2, #12]
 80067be:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80067c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80067d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80067d8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80067e0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6a1b      	ldr	r3, [r3, #32]
 80067e6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80067e8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	4313      	orrs	r3, r2
 80067ee:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	461a      	mov	r2, r3
 80067fe:	4b6e      	ldr	r3, [pc, #440]	; (80069b8 <HAL_DMA_Init+0x650>)
 8006800:	4413      	add	r3, r2
 8006802:	4a6e      	ldr	r2, [pc, #440]	; (80069bc <HAL_DMA_Init+0x654>)
 8006804:	fba2 2303 	umull	r2, r3, r2, r3
 8006808:	091b      	lsrs	r3, r3, #4
 800680a:	009a      	lsls	r2, r3, #2
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006810:	6878      	ldr	r0, [r7, #4]
 8006812:	f001 fd93 	bl	800833c <DMA_CalcBaseAndBitshift>
 8006816:	4603      	mov	r3, r0
 8006818:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800681e:	f003 031f 	and.w	r3, r3, #31
 8006822:	2201      	movs	r2, #1
 8006824:	409a      	lsls	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	605a      	str	r2, [r3, #4]
 800682a:	e008      	b.n	800683e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2240      	movs	r2, #64	; 0x40
 8006830:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2203      	movs	r2, #3
 8006836:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	e0b7      	b.n	80069ae <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a5f      	ldr	r2, [pc, #380]	; (80069c0 <HAL_DMA_Init+0x658>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d072      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a5d      	ldr	r2, [pc, #372]	; (80069c4 <HAL_DMA_Init+0x65c>)
 800684e:	4293      	cmp	r3, r2
 8006850:	d06d      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a5c      	ldr	r2, [pc, #368]	; (80069c8 <HAL_DMA_Init+0x660>)
 8006858:	4293      	cmp	r3, r2
 800685a:	d068      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	4a5a      	ldr	r2, [pc, #360]	; (80069cc <HAL_DMA_Init+0x664>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d063      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a59      	ldr	r2, [pc, #356]	; (80069d0 <HAL_DMA_Init+0x668>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d05e      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a57      	ldr	r2, [pc, #348]	; (80069d4 <HAL_DMA_Init+0x66c>)
 8006876:	4293      	cmp	r3, r2
 8006878:	d059      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a56      	ldr	r2, [pc, #344]	; (80069d8 <HAL_DMA_Init+0x670>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d054      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	4a54      	ldr	r2, [pc, #336]	; (80069dc <HAL_DMA_Init+0x674>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d04f      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a53      	ldr	r2, [pc, #332]	; (80069e0 <HAL_DMA_Init+0x678>)
 8006894:	4293      	cmp	r3, r2
 8006896:	d04a      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a51      	ldr	r2, [pc, #324]	; (80069e4 <HAL_DMA_Init+0x67c>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d045      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	4a50      	ldr	r2, [pc, #320]	; (80069e8 <HAL_DMA_Init+0x680>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d040      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4a4e      	ldr	r2, [pc, #312]	; (80069ec <HAL_DMA_Init+0x684>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d03b      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	4a4d      	ldr	r2, [pc, #308]	; (80069f0 <HAL_DMA_Init+0x688>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d036      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	4a4b      	ldr	r2, [pc, #300]	; (80069f4 <HAL_DMA_Init+0x68c>)
 80068c6:	4293      	cmp	r3, r2
 80068c8:	d031      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	4a4a      	ldr	r2, [pc, #296]	; (80069f8 <HAL_DMA_Init+0x690>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d02c      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	4a48      	ldr	r2, [pc, #288]	; (80069fc <HAL_DMA_Init+0x694>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d027      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	4a47      	ldr	r2, [pc, #284]	; (8006a00 <HAL_DMA_Init+0x698>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d022      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	4a45      	ldr	r2, [pc, #276]	; (8006a04 <HAL_DMA_Init+0x69c>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d01d      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	4a44      	ldr	r2, [pc, #272]	; (8006a08 <HAL_DMA_Init+0x6a0>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d018      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	4a42      	ldr	r2, [pc, #264]	; (8006a0c <HAL_DMA_Init+0x6a4>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d013      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	4a41      	ldr	r2, [pc, #260]	; (8006a10 <HAL_DMA_Init+0x6a8>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d00e      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a3f      	ldr	r2, [pc, #252]	; (8006a14 <HAL_DMA_Init+0x6ac>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d009      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	4a3e      	ldr	r2, [pc, #248]	; (8006a18 <HAL_DMA_Init+0x6b0>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d004      	beq.n	800692e <HAL_DMA_Init+0x5c6>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a3c      	ldr	r2, [pc, #240]	; (8006a1c <HAL_DMA_Init+0x6b4>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d101      	bne.n	8006932 <HAL_DMA_Init+0x5ca>
 800692e:	2301      	movs	r3, #1
 8006930:	e000      	b.n	8006934 <HAL_DMA_Init+0x5cc>
 8006932:	2300      	movs	r3, #0
 8006934:	2b00      	cmp	r3, #0
 8006936:	d032      	beq.n	800699e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8006938:	6878      	ldr	r0, [r7, #4]
 800693a:	f001 fe2d 	bl	8008598 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	689b      	ldr	r3, [r3, #8]
 8006942:	2b80      	cmp	r3, #128	; 0x80
 8006944:	d102      	bne.n	800694c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2200      	movs	r2, #0
 800694a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006954:	b2d2      	uxtb	r2, r2
 8006956:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006960:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d010      	beq.n	800698c <HAL_DMA_Init+0x624>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	2b08      	cmp	r3, #8
 8006970:	d80c      	bhi.n	800698c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f001 feaa 	bl	80086cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800697c:	2200      	movs	r2, #0
 800697e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006984:	687a      	ldr	r2, [r7, #4]
 8006986:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	e008      	b.n	800699e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2201      	movs	r2, #1
 80069a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	a7fdabf8 	.word	0xa7fdabf8
 80069bc:	cccccccd 	.word	0xcccccccd
 80069c0:	40020010 	.word	0x40020010
 80069c4:	40020028 	.word	0x40020028
 80069c8:	40020040 	.word	0x40020040
 80069cc:	40020058 	.word	0x40020058
 80069d0:	40020070 	.word	0x40020070
 80069d4:	40020088 	.word	0x40020088
 80069d8:	400200a0 	.word	0x400200a0
 80069dc:	400200b8 	.word	0x400200b8
 80069e0:	40020410 	.word	0x40020410
 80069e4:	40020428 	.word	0x40020428
 80069e8:	40020440 	.word	0x40020440
 80069ec:	40020458 	.word	0x40020458
 80069f0:	40020470 	.word	0x40020470
 80069f4:	40020488 	.word	0x40020488
 80069f8:	400204a0 	.word	0x400204a0
 80069fc:	400204b8 	.word	0x400204b8
 8006a00:	58025408 	.word	0x58025408
 8006a04:	5802541c 	.word	0x5802541c
 8006a08:	58025430 	.word	0x58025430
 8006a0c:	58025444 	.word	0x58025444
 8006a10:	58025458 	.word	0x58025458
 8006a14:	5802546c 	.word	0x5802546c
 8006a18:	58025480 	.word	0x58025480
 8006a1c:	58025494 	.word	0x58025494

08006a20 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b086      	sub	sp, #24
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8006a28:	f7ff fb3e 	bl	80060a8 <HAL_GetTick>
 8006a2c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e2dc      	b.n	8006ff2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006a3e:	b2db      	uxtb	r3, r3
 8006a40:	2b02      	cmp	r3, #2
 8006a42:	d008      	beq.n	8006a56 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2280      	movs	r2, #128	; 0x80
 8006a48:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8006a52:	2301      	movs	r3, #1
 8006a54:	e2cd      	b.n	8006ff2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	4a76      	ldr	r2, [pc, #472]	; (8006c34 <HAL_DMA_Abort+0x214>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d04a      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	4a74      	ldr	r2, [pc, #464]	; (8006c38 <HAL_DMA_Abort+0x218>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d045      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a73      	ldr	r2, [pc, #460]	; (8006c3c <HAL_DMA_Abort+0x21c>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d040      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	4a71      	ldr	r2, [pc, #452]	; (8006c40 <HAL_DMA_Abort+0x220>)
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	d03b      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	4a70      	ldr	r2, [pc, #448]	; (8006c44 <HAL_DMA_Abort+0x224>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d036      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	4a6e      	ldr	r2, [pc, #440]	; (8006c48 <HAL_DMA_Abort+0x228>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d031      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	4a6d      	ldr	r2, [pc, #436]	; (8006c4c <HAL_DMA_Abort+0x22c>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d02c      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a6b      	ldr	r2, [pc, #428]	; (8006c50 <HAL_DMA_Abort+0x230>)
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	d027      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a6a      	ldr	r2, [pc, #424]	; (8006c54 <HAL_DMA_Abort+0x234>)
 8006aac:	4293      	cmp	r3, r2
 8006aae:	d022      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a68      	ldr	r2, [pc, #416]	; (8006c58 <HAL_DMA_Abort+0x238>)
 8006ab6:	4293      	cmp	r3, r2
 8006ab8:	d01d      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	4a67      	ldr	r2, [pc, #412]	; (8006c5c <HAL_DMA_Abort+0x23c>)
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	d018      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4a65      	ldr	r2, [pc, #404]	; (8006c60 <HAL_DMA_Abort+0x240>)
 8006aca:	4293      	cmp	r3, r2
 8006acc:	d013      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	4a64      	ldr	r2, [pc, #400]	; (8006c64 <HAL_DMA_Abort+0x244>)
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d00e      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	4a62      	ldr	r2, [pc, #392]	; (8006c68 <HAL_DMA_Abort+0x248>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d009      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	4a61      	ldr	r2, [pc, #388]	; (8006c6c <HAL_DMA_Abort+0x24c>)
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d004      	beq.n	8006af6 <HAL_DMA_Abort+0xd6>
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	4a5f      	ldr	r2, [pc, #380]	; (8006c70 <HAL_DMA_Abort+0x250>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d101      	bne.n	8006afa <HAL_DMA_Abort+0xda>
 8006af6:	2301      	movs	r3, #1
 8006af8:	e000      	b.n	8006afc <HAL_DMA_Abort+0xdc>
 8006afa:	2300      	movs	r3, #0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d013      	beq.n	8006b28 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681a      	ldr	r2, [r3, #0]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	f022 021e 	bic.w	r2, r2, #30
 8006b0e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	695a      	ldr	r2, [r3, #20]
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b1e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	617b      	str	r3, [r7, #20]
 8006b26:	e00a      	b.n	8006b3e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	681a      	ldr	r2, [r3, #0]
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f022 020e 	bic.w	r2, r2, #14
 8006b36:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4a3c      	ldr	r2, [pc, #240]	; (8006c34 <HAL_DMA_Abort+0x214>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d072      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	4a3a      	ldr	r2, [pc, #232]	; (8006c38 <HAL_DMA_Abort+0x218>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d06d      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a39      	ldr	r2, [pc, #228]	; (8006c3c <HAL_DMA_Abort+0x21c>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d068      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4a37      	ldr	r2, [pc, #220]	; (8006c40 <HAL_DMA_Abort+0x220>)
 8006b62:	4293      	cmp	r3, r2
 8006b64:	d063      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a36      	ldr	r2, [pc, #216]	; (8006c44 <HAL_DMA_Abort+0x224>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d05e      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a34      	ldr	r2, [pc, #208]	; (8006c48 <HAL_DMA_Abort+0x228>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d059      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a33      	ldr	r2, [pc, #204]	; (8006c4c <HAL_DMA_Abort+0x22c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d054      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a31      	ldr	r2, [pc, #196]	; (8006c50 <HAL_DMA_Abort+0x230>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d04f      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a30      	ldr	r2, [pc, #192]	; (8006c54 <HAL_DMA_Abort+0x234>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d04a      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a2e      	ldr	r2, [pc, #184]	; (8006c58 <HAL_DMA_Abort+0x238>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d045      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a2d      	ldr	r2, [pc, #180]	; (8006c5c <HAL_DMA_Abort+0x23c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d040      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a2b      	ldr	r2, [pc, #172]	; (8006c60 <HAL_DMA_Abort+0x240>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d03b      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a2a      	ldr	r2, [pc, #168]	; (8006c64 <HAL_DMA_Abort+0x244>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d036      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a28      	ldr	r2, [pc, #160]	; (8006c68 <HAL_DMA_Abort+0x248>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d031      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a27      	ldr	r2, [pc, #156]	; (8006c6c <HAL_DMA_Abort+0x24c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d02c      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a25      	ldr	r2, [pc, #148]	; (8006c70 <HAL_DMA_Abort+0x250>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d027      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a24      	ldr	r2, [pc, #144]	; (8006c74 <HAL_DMA_Abort+0x254>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d022      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a22      	ldr	r2, [pc, #136]	; (8006c78 <HAL_DMA_Abort+0x258>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d01d      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a21      	ldr	r2, [pc, #132]	; (8006c7c <HAL_DMA_Abort+0x25c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d018      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <HAL_DMA_Abort+0x260>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d013      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a1e      	ldr	r2, [pc, #120]	; (8006c84 <HAL_DMA_Abort+0x264>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d00e      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a1c      	ldr	r2, [pc, #112]	; (8006c88 <HAL_DMA_Abort+0x268>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d009      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a1b      	ldr	r2, [pc, #108]	; (8006c8c <HAL_DMA_Abort+0x26c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d004      	beq.n	8006c2e <HAL_DMA_Abort+0x20e>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a19      	ldr	r2, [pc, #100]	; (8006c90 <HAL_DMA_Abort+0x270>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d132      	bne.n	8006c94 <HAL_DMA_Abort+0x274>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e031      	b.n	8006c96 <HAL_DMA_Abort+0x276>
 8006c32:	bf00      	nop
 8006c34:	40020010 	.word	0x40020010
 8006c38:	40020028 	.word	0x40020028
 8006c3c:	40020040 	.word	0x40020040
 8006c40:	40020058 	.word	0x40020058
 8006c44:	40020070 	.word	0x40020070
 8006c48:	40020088 	.word	0x40020088
 8006c4c:	400200a0 	.word	0x400200a0
 8006c50:	400200b8 	.word	0x400200b8
 8006c54:	40020410 	.word	0x40020410
 8006c58:	40020428 	.word	0x40020428
 8006c5c:	40020440 	.word	0x40020440
 8006c60:	40020458 	.word	0x40020458
 8006c64:	40020470 	.word	0x40020470
 8006c68:	40020488 	.word	0x40020488
 8006c6c:	400204a0 	.word	0x400204a0
 8006c70:	400204b8 	.word	0x400204b8
 8006c74:	58025408 	.word	0x58025408
 8006c78:	5802541c 	.word	0x5802541c
 8006c7c:	58025430 	.word	0x58025430
 8006c80:	58025444 	.word	0x58025444
 8006c84:	58025458 	.word	0x58025458
 8006c88:	5802546c 	.word	0x5802546c
 8006c8c:	58025480 	.word	0x58025480
 8006c90:	58025494 	.word	0x58025494
 8006c94:	2300      	movs	r3, #0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d007      	beq.n	8006caa <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006c9e:	681a      	ldr	r2, [r3, #0]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ca4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006ca8:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	4a6d      	ldr	r2, [pc, #436]	; (8006e64 <HAL_DMA_Abort+0x444>)
 8006cb0:	4293      	cmp	r3, r2
 8006cb2:	d04a      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	4a6b      	ldr	r2, [pc, #428]	; (8006e68 <HAL_DMA_Abort+0x448>)
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d045      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	4a6a      	ldr	r2, [pc, #424]	; (8006e6c <HAL_DMA_Abort+0x44c>)
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d040      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	4a68      	ldr	r2, [pc, #416]	; (8006e70 <HAL_DMA_Abort+0x450>)
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d03b      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a67      	ldr	r2, [pc, #412]	; (8006e74 <HAL_DMA_Abort+0x454>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d036      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	4a65      	ldr	r2, [pc, #404]	; (8006e78 <HAL_DMA_Abort+0x458>)
 8006ce2:	4293      	cmp	r3, r2
 8006ce4:	d031      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	4a64      	ldr	r2, [pc, #400]	; (8006e7c <HAL_DMA_Abort+0x45c>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d02c      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a62      	ldr	r2, [pc, #392]	; (8006e80 <HAL_DMA_Abort+0x460>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d027      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a61      	ldr	r2, [pc, #388]	; (8006e84 <HAL_DMA_Abort+0x464>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d022      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a5f      	ldr	r2, [pc, #380]	; (8006e88 <HAL_DMA_Abort+0x468>)
 8006d0a:	4293      	cmp	r3, r2
 8006d0c:	d01d      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	4a5e      	ldr	r2, [pc, #376]	; (8006e8c <HAL_DMA_Abort+0x46c>)
 8006d14:	4293      	cmp	r3, r2
 8006d16:	d018      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	4a5c      	ldr	r2, [pc, #368]	; (8006e90 <HAL_DMA_Abort+0x470>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d013      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a5b      	ldr	r2, [pc, #364]	; (8006e94 <HAL_DMA_Abort+0x474>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00e      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a59      	ldr	r2, [pc, #356]	; (8006e98 <HAL_DMA_Abort+0x478>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d009      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	4a58      	ldr	r2, [pc, #352]	; (8006e9c <HAL_DMA_Abort+0x47c>)
 8006d3c:	4293      	cmp	r3, r2
 8006d3e:	d004      	beq.n	8006d4a <HAL_DMA_Abort+0x32a>
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	4a56      	ldr	r2, [pc, #344]	; (8006ea0 <HAL_DMA_Abort+0x480>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	d108      	bne.n	8006d5c <HAL_DMA_Abort+0x33c>
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f022 0201 	bic.w	r2, r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
 8006d5a:	e007      	b.n	8006d6c <HAL_DMA_Abort+0x34c>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f022 0201 	bic.w	r2, r2, #1
 8006d6a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d6c:	e013      	b.n	8006d96 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d6e:	f7ff f99b 	bl	80060a8 <HAL_GetTick>
 8006d72:	4602      	mov	r2, r0
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	1ad3      	subs	r3, r2, r3
 8006d78:	2b05      	cmp	r3, #5
 8006d7a:	d90c      	bls.n	8006d96 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	2220      	movs	r2, #32
 8006d80:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	2203      	movs	r2, #3
 8006d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e12d      	b.n	8006ff2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0301 	and.w	r3, r3, #1
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d1e5      	bne.n	8006d6e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a2f      	ldr	r2, [pc, #188]	; (8006e64 <HAL_DMA_Abort+0x444>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d04a      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a2d      	ldr	r2, [pc, #180]	; (8006e68 <HAL_DMA_Abort+0x448>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d045      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a2c      	ldr	r2, [pc, #176]	; (8006e6c <HAL_DMA_Abort+0x44c>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d040      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a2a      	ldr	r2, [pc, #168]	; (8006e70 <HAL_DMA_Abort+0x450>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d03b      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <HAL_DMA_Abort+0x454>)
 8006dd0:	4293      	cmp	r3, r2
 8006dd2:	d036      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	4a27      	ldr	r2, [pc, #156]	; (8006e78 <HAL_DMA_Abort+0x458>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	d031      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	4a26      	ldr	r2, [pc, #152]	; (8006e7c <HAL_DMA_Abort+0x45c>)
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d02c      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	4a24      	ldr	r2, [pc, #144]	; (8006e80 <HAL_DMA_Abort+0x460>)
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d027      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	4a23      	ldr	r2, [pc, #140]	; (8006e84 <HAL_DMA_Abort+0x464>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d022      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a21      	ldr	r2, [pc, #132]	; (8006e88 <HAL_DMA_Abort+0x468>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d01d      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	4a20      	ldr	r2, [pc, #128]	; (8006e8c <HAL_DMA_Abort+0x46c>)
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d018      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	4a1e      	ldr	r2, [pc, #120]	; (8006e90 <HAL_DMA_Abort+0x470>)
 8006e16:	4293      	cmp	r3, r2
 8006e18:	d013      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	4a1d      	ldr	r2, [pc, #116]	; (8006e94 <HAL_DMA_Abort+0x474>)
 8006e20:	4293      	cmp	r3, r2
 8006e22:	d00e      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	4a1b      	ldr	r2, [pc, #108]	; (8006e98 <HAL_DMA_Abort+0x478>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d009      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4a1a      	ldr	r2, [pc, #104]	; (8006e9c <HAL_DMA_Abort+0x47c>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d004      	beq.n	8006e42 <HAL_DMA_Abort+0x422>
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a18      	ldr	r2, [pc, #96]	; (8006ea0 <HAL_DMA_Abort+0x480>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d101      	bne.n	8006e46 <HAL_DMA_Abort+0x426>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <HAL_DMA_Abort+0x428>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d02b      	beq.n	8006ea4 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e50:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006e56:	f003 031f 	and.w	r3, r3, #31
 8006e5a:	223f      	movs	r2, #63	; 0x3f
 8006e5c:	409a      	lsls	r2, r3
 8006e5e:	68bb      	ldr	r3, [r7, #8]
 8006e60:	609a      	str	r2, [r3, #8]
 8006e62:	e02a      	b.n	8006eba <HAL_DMA_Abort+0x49a>
 8006e64:	40020010 	.word	0x40020010
 8006e68:	40020028 	.word	0x40020028
 8006e6c:	40020040 	.word	0x40020040
 8006e70:	40020058 	.word	0x40020058
 8006e74:	40020070 	.word	0x40020070
 8006e78:	40020088 	.word	0x40020088
 8006e7c:	400200a0 	.word	0x400200a0
 8006e80:	400200b8 	.word	0x400200b8
 8006e84:	40020410 	.word	0x40020410
 8006e88:	40020428 	.word	0x40020428
 8006e8c:	40020440 	.word	0x40020440
 8006e90:	40020458 	.word	0x40020458
 8006e94:	40020470 	.word	0x40020470
 8006e98:	40020488 	.word	0x40020488
 8006e9c:	400204a0 	.word	0x400204a0
 8006ea0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	409a      	lsls	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	4a4f      	ldr	r2, [pc, #316]	; (8006ffc <HAL_DMA_Abort+0x5dc>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d072      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	4a4d      	ldr	r2, [pc, #308]	; (8007000 <HAL_DMA_Abort+0x5e0>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d06d      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a4c      	ldr	r2, [pc, #304]	; (8007004 <HAL_DMA_Abort+0x5e4>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d068      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	4a4a      	ldr	r2, [pc, #296]	; (8007008 <HAL_DMA_Abort+0x5e8>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d063      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	4a49      	ldr	r2, [pc, #292]	; (800700c <HAL_DMA_Abort+0x5ec>)
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d05e      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	4a47      	ldr	r2, [pc, #284]	; (8007010 <HAL_DMA_Abort+0x5f0>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d059      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	4a46      	ldr	r2, [pc, #280]	; (8007014 <HAL_DMA_Abort+0x5f4>)
 8006efc:	4293      	cmp	r3, r2
 8006efe:	d054      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	4a44      	ldr	r2, [pc, #272]	; (8007018 <HAL_DMA_Abort+0x5f8>)
 8006f06:	4293      	cmp	r3, r2
 8006f08:	d04f      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	4a43      	ldr	r2, [pc, #268]	; (800701c <HAL_DMA_Abort+0x5fc>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d04a      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a41      	ldr	r2, [pc, #260]	; (8007020 <HAL_DMA_Abort+0x600>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d045      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	4a40      	ldr	r2, [pc, #256]	; (8007024 <HAL_DMA_Abort+0x604>)
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d040      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a3e      	ldr	r2, [pc, #248]	; (8007028 <HAL_DMA_Abort+0x608>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d03b      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	4a3d      	ldr	r2, [pc, #244]	; (800702c <HAL_DMA_Abort+0x60c>)
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	d036      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	4a3b      	ldr	r2, [pc, #236]	; (8007030 <HAL_DMA_Abort+0x610>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d031      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	4a3a      	ldr	r2, [pc, #232]	; (8007034 <HAL_DMA_Abort+0x614>)
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d02c      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	4a38      	ldr	r2, [pc, #224]	; (8007038 <HAL_DMA_Abort+0x618>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d027      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	4a37      	ldr	r2, [pc, #220]	; (800703c <HAL_DMA_Abort+0x61c>)
 8006f60:	4293      	cmp	r3, r2
 8006f62:	d022      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	4a35      	ldr	r2, [pc, #212]	; (8007040 <HAL_DMA_Abort+0x620>)
 8006f6a:	4293      	cmp	r3, r2
 8006f6c:	d01d      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	4a34      	ldr	r2, [pc, #208]	; (8007044 <HAL_DMA_Abort+0x624>)
 8006f74:	4293      	cmp	r3, r2
 8006f76:	d018      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	4a32      	ldr	r2, [pc, #200]	; (8007048 <HAL_DMA_Abort+0x628>)
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d013      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	4a31      	ldr	r2, [pc, #196]	; (800704c <HAL_DMA_Abort+0x62c>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d00e      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	4a2f      	ldr	r2, [pc, #188]	; (8007050 <HAL_DMA_Abort+0x630>)
 8006f92:	4293      	cmp	r3, r2
 8006f94:	d009      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a2e      	ldr	r2, [pc, #184]	; (8007054 <HAL_DMA_Abort+0x634>)
 8006f9c:	4293      	cmp	r3, r2
 8006f9e:	d004      	beq.n	8006faa <HAL_DMA_Abort+0x58a>
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a2c      	ldr	r2, [pc, #176]	; (8007058 <HAL_DMA_Abort+0x638>)
 8006fa6:	4293      	cmp	r3, r2
 8006fa8:	d101      	bne.n	8006fae <HAL_DMA_Abort+0x58e>
 8006faa:	2301      	movs	r3, #1
 8006fac:	e000      	b.n	8006fb0 <HAL_DMA_Abort+0x590>
 8006fae:	2300      	movs	r3, #0
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d015      	beq.n	8006fe0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8006fbc:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00c      	beq.n	8006fe0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fca:	681a      	ldr	r2, [r3, #0]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006fd0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006fd4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fda:	687a      	ldr	r2, [r7, #4]
 8006fdc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006fde:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	40020010 	.word	0x40020010
 8007000:	40020028 	.word	0x40020028
 8007004:	40020040 	.word	0x40020040
 8007008:	40020058 	.word	0x40020058
 800700c:	40020070 	.word	0x40020070
 8007010:	40020088 	.word	0x40020088
 8007014:	400200a0 	.word	0x400200a0
 8007018:	400200b8 	.word	0x400200b8
 800701c:	40020410 	.word	0x40020410
 8007020:	40020428 	.word	0x40020428
 8007024:	40020440 	.word	0x40020440
 8007028:	40020458 	.word	0x40020458
 800702c:	40020470 	.word	0x40020470
 8007030:	40020488 	.word	0x40020488
 8007034:	400204a0 	.word	0x400204a0
 8007038:	400204b8 	.word	0x400204b8
 800703c:	58025408 	.word	0x58025408
 8007040:	5802541c 	.word	0x5802541c
 8007044:	58025430 	.word	0x58025430
 8007048:	58025444 	.word	0x58025444
 800704c:	58025458 	.word	0x58025458
 8007050:	5802546c 	.word	0x5802546c
 8007054:	58025480 	.word	0x58025480
 8007058:	58025494 	.word	0x58025494

0800705c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b084      	sub	sp, #16
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e237      	b.n	80074de <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b02      	cmp	r3, #2
 8007078:	d004      	beq.n	8007084 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2280      	movs	r2, #128	; 0x80
 800707e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007080:	2301      	movs	r3, #1
 8007082:	e22c      	b.n	80074de <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	4a5c      	ldr	r2, [pc, #368]	; (80071fc <HAL_DMA_Abort_IT+0x1a0>)
 800708a:	4293      	cmp	r3, r2
 800708c:	d04a      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	4a5b      	ldr	r2, [pc, #364]	; (8007200 <HAL_DMA_Abort_IT+0x1a4>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d045      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	4a59      	ldr	r2, [pc, #356]	; (8007204 <HAL_DMA_Abort_IT+0x1a8>)
 800709e:	4293      	cmp	r3, r2
 80070a0:	d040      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a58      	ldr	r2, [pc, #352]	; (8007208 <HAL_DMA_Abort_IT+0x1ac>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d03b      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	4a56      	ldr	r2, [pc, #344]	; (800720c <HAL_DMA_Abort_IT+0x1b0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d036      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a55      	ldr	r2, [pc, #340]	; (8007210 <HAL_DMA_Abort_IT+0x1b4>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d031      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4a53      	ldr	r2, [pc, #332]	; (8007214 <HAL_DMA_Abort_IT+0x1b8>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d02c      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a52      	ldr	r2, [pc, #328]	; (8007218 <HAL_DMA_Abort_IT+0x1bc>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d027      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a50      	ldr	r2, [pc, #320]	; (800721c <HAL_DMA_Abort_IT+0x1c0>)
 80070da:	4293      	cmp	r3, r2
 80070dc:	d022      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	4a4f      	ldr	r2, [pc, #316]	; (8007220 <HAL_DMA_Abort_IT+0x1c4>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d01d      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	4a4d      	ldr	r2, [pc, #308]	; (8007224 <HAL_DMA_Abort_IT+0x1c8>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d018      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	4a4c      	ldr	r2, [pc, #304]	; (8007228 <HAL_DMA_Abort_IT+0x1cc>)
 80070f8:	4293      	cmp	r3, r2
 80070fa:	d013      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4a4a      	ldr	r2, [pc, #296]	; (800722c <HAL_DMA_Abort_IT+0x1d0>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d00e      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	4a49      	ldr	r2, [pc, #292]	; (8007230 <HAL_DMA_Abort_IT+0x1d4>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d009      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	4a47      	ldr	r2, [pc, #284]	; (8007234 <HAL_DMA_Abort_IT+0x1d8>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d004      	beq.n	8007124 <HAL_DMA_Abort_IT+0xc8>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	4a46      	ldr	r2, [pc, #280]	; (8007238 <HAL_DMA_Abort_IT+0x1dc>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d101      	bne.n	8007128 <HAL_DMA_Abort_IT+0xcc>
 8007124:	2301      	movs	r3, #1
 8007126:	e000      	b.n	800712a <HAL_DMA_Abort_IT+0xce>
 8007128:	2300      	movs	r3, #0
 800712a:	2b00      	cmp	r3, #0
 800712c:	f000 8086 	beq.w	800723c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2204      	movs	r2, #4
 8007134:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a2f      	ldr	r2, [pc, #188]	; (80071fc <HAL_DMA_Abort_IT+0x1a0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d04a      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	4a2e      	ldr	r2, [pc, #184]	; (8007200 <HAL_DMA_Abort_IT+0x1a4>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d045      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a2c      	ldr	r2, [pc, #176]	; (8007204 <HAL_DMA_Abort_IT+0x1a8>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d040      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	4a2b      	ldr	r2, [pc, #172]	; (8007208 <HAL_DMA_Abort_IT+0x1ac>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d03b      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	4a29      	ldr	r2, [pc, #164]	; (800720c <HAL_DMA_Abort_IT+0x1b0>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d036      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	4a28      	ldr	r2, [pc, #160]	; (8007210 <HAL_DMA_Abort_IT+0x1b4>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d031      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	4a26      	ldr	r2, [pc, #152]	; (8007214 <HAL_DMA_Abort_IT+0x1b8>)
 800717a:	4293      	cmp	r3, r2
 800717c:	d02c      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	4a25      	ldr	r2, [pc, #148]	; (8007218 <HAL_DMA_Abort_IT+0x1bc>)
 8007184:	4293      	cmp	r3, r2
 8007186:	d027      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4a23      	ldr	r2, [pc, #140]	; (800721c <HAL_DMA_Abort_IT+0x1c0>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d022      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a22      	ldr	r2, [pc, #136]	; (8007220 <HAL_DMA_Abort_IT+0x1c4>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d01d      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	4a20      	ldr	r2, [pc, #128]	; (8007224 <HAL_DMA_Abort_IT+0x1c8>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d018      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	4a1f      	ldr	r2, [pc, #124]	; (8007228 <HAL_DMA_Abort_IT+0x1cc>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d013      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	4a1d      	ldr	r2, [pc, #116]	; (800722c <HAL_DMA_Abort_IT+0x1d0>)
 80071b6:	4293      	cmp	r3, r2
 80071b8:	d00e      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	4a1c      	ldr	r2, [pc, #112]	; (8007230 <HAL_DMA_Abort_IT+0x1d4>)
 80071c0:	4293      	cmp	r3, r2
 80071c2:	d009      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	4a1a      	ldr	r2, [pc, #104]	; (8007234 <HAL_DMA_Abort_IT+0x1d8>)
 80071ca:	4293      	cmp	r3, r2
 80071cc:	d004      	beq.n	80071d8 <HAL_DMA_Abort_IT+0x17c>
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a19      	ldr	r2, [pc, #100]	; (8007238 <HAL_DMA_Abort_IT+0x1dc>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d108      	bne.n	80071ea <HAL_DMA_Abort_IT+0x18e>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	681a      	ldr	r2, [r3, #0]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 0201 	bic.w	r2, r2, #1
 80071e6:	601a      	str	r2, [r3, #0]
 80071e8:	e178      	b.n	80074dc <HAL_DMA_Abort_IT+0x480>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f022 0201 	bic.w	r2, r2, #1
 80071f8:	601a      	str	r2, [r3, #0]
 80071fa:	e16f      	b.n	80074dc <HAL_DMA_Abort_IT+0x480>
 80071fc:	40020010 	.word	0x40020010
 8007200:	40020028 	.word	0x40020028
 8007204:	40020040 	.word	0x40020040
 8007208:	40020058 	.word	0x40020058
 800720c:	40020070 	.word	0x40020070
 8007210:	40020088 	.word	0x40020088
 8007214:	400200a0 	.word	0x400200a0
 8007218:	400200b8 	.word	0x400200b8
 800721c:	40020410 	.word	0x40020410
 8007220:	40020428 	.word	0x40020428
 8007224:	40020440 	.word	0x40020440
 8007228:	40020458 	.word	0x40020458
 800722c:	40020470 	.word	0x40020470
 8007230:	40020488 	.word	0x40020488
 8007234:	400204a0 	.word	0x400204a0
 8007238:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f022 020e 	bic.w	r2, r2, #14
 800724a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a6c      	ldr	r2, [pc, #432]	; (8007404 <HAL_DMA_Abort_IT+0x3a8>)
 8007252:	4293      	cmp	r3, r2
 8007254:	d04a      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	4a6b      	ldr	r2, [pc, #428]	; (8007408 <HAL_DMA_Abort_IT+0x3ac>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d045      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a69      	ldr	r2, [pc, #420]	; (800740c <HAL_DMA_Abort_IT+0x3b0>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d040      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	4a68      	ldr	r2, [pc, #416]	; (8007410 <HAL_DMA_Abort_IT+0x3b4>)
 8007270:	4293      	cmp	r3, r2
 8007272:	d03b      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	4a66      	ldr	r2, [pc, #408]	; (8007414 <HAL_DMA_Abort_IT+0x3b8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d036      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	4a65      	ldr	r2, [pc, #404]	; (8007418 <HAL_DMA_Abort_IT+0x3bc>)
 8007284:	4293      	cmp	r3, r2
 8007286:	d031      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4a63      	ldr	r2, [pc, #396]	; (800741c <HAL_DMA_Abort_IT+0x3c0>)
 800728e:	4293      	cmp	r3, r2
 8007290:	d02c      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	4a62      	ldr	r2, [pc, #392]	; (8007420 <HAL_DMA_Abort_IT+0x3c4>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d027      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	4a60      	ldr	r2, [pc, #384]	; (8007424 <HAL_DMA_Abort_IT+0x3c8>)
 80072a2:	4293      	cmp	r3, r2
 80072a4:	d022      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a5f      	ldr	r2, [pc, #380]	; (8007428 <HAL_DMA_Abort_IT+0x3cc>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d01d      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a5d      	ldr	r2, [pc, #372]	; (800742c <HAL_DMA_Abort_IT+0x3d0>)
 80072b6:	4293      	cmp	r3, r2
 80072b8:	d018      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	4a5c      	ldr	r2, [pc, #368]	; (8007430 <HAL_DMA_Abort_IT+0x3d4>)
 80072c0:	4293      	cmp	r3, r2
 80072c2:	d013      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	4a5a      	ldr	r2, [pc, #360]	; (8007434 <HAL_DMA_Abort_IT+0x3d8>)
 80072ca:	4293      	cmp	r3, r2
 80072cc:	d00e      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	4a59      	ldr	r2, [pc, #356]	; (8007438 <HAL_DMA_Abort_IT+0x3dc>)
 80072d4:	4293      	cmp	r3, r2
 80072d6:	d009      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	4a57      	ldr	r2, [pc, #348]	; (800743c <HAL_DMA_Abort_IT+0x3e0>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d004      	beq.n	80072ec <HAL_DMA_Abort_IT+0x290>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a56      	ldr	r2, [pc, #344]	; (8007440 <HAL_DMA_Abort_IT+0x3e4>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d108      	bne.n	80072fe <HAL_DMA_Abort_IT+0x2a2>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f022 0201 	bic.w	r2, r2, #1
 80072fa:	601a      	str	r2, [r3, #0]
 80072fc:	e007      	b.n	800730e <HAL_DMA_Abort_IT+0x2b2>
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f022 0201 	bic.w	r2, r2, #1
 800730c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	4a3c      	ldr	r2, [pc, #240]	; (8007404 <HAL_DMA_Abort_IT+0x3a8>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d072      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	4a3a      	ldr	r2, [pc, #232]	; (8007408 <HAL_DMA_Abort_IT+0x3ac>)
 800731e:	4293      	cmp	r3, r2
 8007320:	d06d      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a39      	ldr	r2, [pc, #228]	; (800740c <HAL_DMA_Abort_IT+0x3b0>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d068      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a37      	ldr	r2, [pc, #220]	; (8007410 <HAL_DMA_Abort_IT+0x3b4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d063      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	4a36      	ldr	r2, [pc, #216]	; (8007414 <HAL_DMA_Abort_IT+0x3b8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d05e      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a34      	ldr	r2, [pc, #208]	; (8007418 <HAL_DMA_Abort_IT+0x3bc>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d059      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a33      	ldr	r2, [pc, #204]	; (800741c <HAL_DMA_Abort_IT+0x3c0>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d054      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a31      	ldr	r2, [pc, #196]	; (8007420 <HAL_DMA_Abort_IT+0x3c4>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d04f      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a30      	ldr	r2, [pc, #192]	; (8007424 <HAL_DMA_Abort_IT+0x3c8>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d04a      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a2e      	ldr	r2, [pc, #184]	; (8007428 <HAL_DMA_Abort_IT+0x3cc>)
 800736e:	4293      	cmp	r3, r2
 8007370:	d045      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a2d      	ldr	r2, [pc, #180]	; (800742c <HAL_DMA_Abort_IT+0x3d0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d040      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a2b      	ldr	r2, [pc, #172]	; (8007430 <HAL_DMA_Abort_IT+0x3d4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d03b      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a2a      	ldr	r2, [pc, #168]	; (8007434 <HAL_DMA_Abort_IT+0x3d8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d036      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a28      	ldr	r2, [pc, #160]	; (8007438 <HAL_DMA_Abort_IT+0x3dc>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d031      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a27      	ldr	r2, [pc, #156]	; (800743c <HAL_DMA_Abort_IT+0x3e0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d02c      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a25      	ldr	r2, [pc, #148]	; (8007440 <HAL_DMA_Abort_IT+0x3e4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d027      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a24      	ldr	r2, [pc, #144]	; (8007444 <HAL_DMA_Abort_IT+0x3e8>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d022      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a22      	ldr	r2, [pc, #136]	; (8007448 <HAL_DMA_Abort_IT+0x3ec>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d01d      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a21      	ldr	r2, [pc, #132]	; (800744c <HAL_DMA_Abort_IT+0x3f0>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d018      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a1f      	ldr	r2, [pc, #124]	; (8007450 <HAL_DMA_Abort_IT+0x3f4>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d013      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a1e      	ldr	r2, [pc, #120]	; (8007454 <HAL_DMA_Abort_IT+0x3f8>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d00e      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a1c      	ldr	r2, [pc, #112]	; (8007458 <HAL_DMA_Abort_IT+0x3fc>)
 80073e6:	4293      	cmp	r3, r2
 80073e8:	d009      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a1b      	ldr	r2, [pc, #108]	; (800745c <HAL_DMA_Abort_IT+0x400>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d004      	beq.n	80073fe <HAL_DMA_Abort_IT+0x3a2>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	4a19      	ldr	r2, [pc, #100]	; (8007460 <HAL_DMA_Abort_IT+0x404>)
 80073fa:	4293      	cmp	r3, r2
 80073fc:	d132      	bne.n	8007464 <HAL_DMA_Abort_IT+0x408>
 80073fe:	2301      	movs	r3, #1
 8007400:	e031      	b.n	8007466 <HAL_DMA_Abort_IT+0x40a>
 8007402:	bf00      	nop
 8007404:	40020010 	.word	0x40020010
 8007408:	40020028 	.word	0x40020028
 800740c:	40020040 	.word	0x40020040
 8007410:	40020058 	.word	0x40020058
 8007414:	40020070 	.word	0x40020070
 8007418:	40020088 	.word	0x40020088
 800741c:	400200a0 	.word	0x400200a0
 8007420:	400200b8 	.word	0x400200b8
 8007424:	40020410 	.word	0x40020410
 8007428:	40020428 	.word	0x40020428
 800742c:	40020440 	.word	0x40020440
 8007430:	40020458 	.word	0x40020458
 8007434:	40020470 	.word	0x40020470
 8007438:	40020488 	.word	0x40020488
 800743c:	400204a0 	.word	0x400204a0
 8007440:	400204b8 	.word	0x400204b8
 8007444:	58025408 	.word	0x58025408
 8007448:	5802541c 	.word	0x5802541c
 800744c:	58025430 	.word	0x58025430
 8007450:	58025444 	.word	0x58025444
 8007454:	58025458 	.word	0x58025458
 8007458:	5802546c 	.word	0x5802546c
 800745c:	58025480 	.word	0x58025480
 8007460:	58025494 	.word	0x58025494
 8007464:	2300      	movs	r3, #0
 8007466:	2b00      	cmp	r3, #0
 8007468:	d028      	beq.n	80074bc <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800746e:	681a      	ldr	r2, [r3, #0]
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007474:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007478:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800747e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007484:	f003 031f 	and.w	r3, r3, #31
 8007488:	2201      	movs	r2, #1
 800748a:	409a      	lsls	r2, r3
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007494:	687a      	ldr	r2, [r7, #4]
 8007496:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007498:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00c      	beq.n	80074bc <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074a6:	681a      	ldr	r2, [r3, #0]
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80074b0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80074b6:	687a      	ldr	r2, [r7, #4]
 80074b8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80074ba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2201      	movs	r2, #1
 80074c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d003      	beq.n	80074dc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	bf00      	nop

080074e8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	b08a      	sub	sp, #40	; 0x28
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80074f0:	2300      	movs	r3, #0
 80074f2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80074f4:	4b67      	ldr	r3, [pc, #412]	; (8007694 <HAL_DMA_IRQHandler+0x1ac>)
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	4a67      	ldr	r2, [pc, #412]	; (8007698 <HAL_DMA_IRQHandler+0x1b0>)
 80074fa:	fba2 2303 	umull	r2, r3, r2, r3
 80074fe:	0a9b      	lsrs	r3, r3, #10
 8007500:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007506:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800750c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a5f      	ldr	r2, [pc, #380]	; (800769c <HAL_DMA_IRQHandler+0x1b4>)
 8007520:	4293      	cmp	r3, r2
 8007522:	d04a      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4a5d      	ldr	r2, [pc, #372]	; (80076a0 <HAL_DMA_IRQHandler+0x1b8>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d045      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	4a5c      	ldr	r2, [pc, #368]	; (80076a4 <HAL_DMA_IRQHandler+0x1bc>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d040      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	4a5a      	ldr	r2, [pc, #360]	; (80076a8 <HAL_DMA_IRQHandler+0x1c0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d03b      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	4a59      	ldr	r2, [pc, #356]	; (80076ac <HAL_DMA_IRQHandler+0x1c4>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d036      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	4a57      	ldr	r2, [pc, #348]	; (80076b0 <HAL_DMA_IRQHandler+0x1c8>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d031      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4a56      	ldr	r2, [pc, #344]	; (80076b4 <HAL_DMA_IRQHandler+0x1cc>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d02c      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	4a54      	ldr	r2, [pc, #336]	; (80076b8 <HAL_DMA_IRQHandler+0x1d0>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d027      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a53      	ldr	r2, [pc, #332]	; (80076bc <HAL_DMA_IRQHandler+0x1d4>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d022      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	4a51      	ldr	r2, [pc, #324]	; (80076c0 <HAL_DMA_IRQHandler+0x1d8>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d01d      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a50      	ldr	r2, [pc, #320]	; (80076c4 <HAL_DMA_IRQHandler+0x1dc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d018      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a4e      	ldr	r2, [pc, #312]	; (80076c8 <HAL_DMA_IRQHandler+0x1e0>)
 800758e:	4293      	cmp	r3, r2
 8007590:	d013      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a4d      	ldr	r2, [pc, #308]	; (80076cc <HAL_DMA_IRQHandler+0x1e4>)
 8007598:	4293      	cmp	r3, r2
 800759a:	d00e      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a4b      	ldr	r2, [pc, #300]	; (80076d0 <HAL_DMA_IRQHandler+0x1e8>)
 80075a2:	4293      	cmp	r3, r2
 80075a4:	d009      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4a4a      	ldr	r2, [pc, #296]	; (80076d4 <HAL_DMA_IRQHandler+0x1ec>)
 80075ac:	4293      	cmp	r3, r2
 80075ae:	d004      	beq.n	80075ba <HAL_DMA_IRQHandler+0xd2>
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4a48      	ldr	r2, [pc, #288]	; (80076d8 <HAL_DMA_IRQHandler+0x1f0>)
 80075b6:	4293      	cmp	r3, r2
 80075b8:	d101      	bne.n	80075be <HAL_DMA_IRQHandler+0xd6>
 80075ba:	2301      	movs	r3, #1
 80075bc:	e000      	b.n	80075c0 <HAL_DMA_IRQHandler+0xd8>
 80075be:	2300      	movs	r3, #0
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	f000 842b 	beq.w	8007e1c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80075ca:	f003 031f 	and.w	r3, r3, #31
 80075ce:	2208      	movs	r2, #8
 80075d0:	409a      	lsls	r2, r3
 80075d2:	69bb      	ldr	r3, [r7, #24]
 80075d4:	4013      	ands	r3, r2
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	f000 80a2 	beq.w	8007720 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	4a2e      	ldr	r2, [pc, #184]	; (800769c <HAL_DMA_IRQHandler+0x1b4>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d04a      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	4a2d      	ldr	r2, [pc, #180]	; (80076a0 <HAL_DMA_IRQHandler+0x1b8>)
 80075ec:	4293      	cmp	r3, r2
 80075ee:	d045      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	4a2b      	ldr	r2, [pc, #172]	; (80076a4 <HAL_DMA_IRQHandler+0x1bc>)
 80075f6:	4293      	cmp	r3, r2
 80075f8:	d040      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	4a2a      	ldr	r2, [pc, #168]	; (80076a8 <HAL_DMA_IRQHandler+0x1c0>)
 8007600:	4293      	cmp	r3, r2
 8007602:	d03b      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	4a28      	ldr	r2, [pc, #160]	; (80076ac <HAL_DMA_IRQHandler+0x1c4>)
 800760a:	4293      	cmp	r3, r2
 800760c:	d036      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	4a27      	ldr	r2, [pc, #156]	; (80076b0 <HAL_DMA_IRQHandler+0x1c8>)
 8007614:	4293      	cmp	r3, r2
 8007616:	d031      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	4a25      	ldr	r2, [pc, #148]	; (80076b4 <HAL_DMA_IRQHandler+0x1cc>)
 800761e:	4293      	cmp	r3, r2
 8007620:	d02c      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a24      	ldr	r2, [pc, #144]	; (80076b8 <HAL_DMA_IRQHandler+0x1d0>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d027      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a22      	ldr	r2, [pc, #136]	; (80076bc <HAL_DMA_IRQHandler+0x1d4>)
 8007632:	4293      	cmp	r3, r2
 8007634:	d022      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	4a21      	ldr	r2, [pc, #132]	; (80076c0 <HAL_DMA_IRQHandler+0x1d8>)
 800763c:	4293      	cmp	r3, r2
 800763e:	d01d      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	4a1f      	ldr	r2, [pc, #124]	; (80076c4 <HAL_DMA_IRQHandler+0x1dc>)
 8007646:	4293      	cmp	r3, r2
 8007648:	d018      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	4a1e      	ldr	r2, [pc, #120]	; (80076c8 <HAL_DMA_IRQHandler+0x1e0>)
 8007650:	4293      	cmp	r3, r2
 8007652:	d013      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <HAL_DMA_IRQHandler+0x1e4>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00e      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	4a1b      	ldr	r2, [pc, #108]	; (80076d0 <HAL_DMA_IRQHandler+0x1e8>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d009      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a19      	ldr	r2, [pc, #100]	; (80076d4 <HAL_DMA_IRQHandler+0x1ec>)
 800766e:	4293      	cmp	r3, r2
 8007670:	d004      	beq.n	800767c <HAL_DMA_IRQHandler+0x194>
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	4a18      	ldr	r2, [pc, #96]	; (80076d8 <HAL_DMA_IRQHandler+0x1f0>)
 8007678:	4293      	cmp	r3, r2
 800767a:	d12f      	bne.n	80076dc <HAL_DMA_IRQHandler+0x1f4>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	f003 0304 	and.w	r3, r3, #4
 8007686:	2b00      	cmp	r3, #0
 8007688:	bf14      	ite	ne
 800768a:	2301      	movne	r3, #1
 800768c:	2300      	moveq	r3, #0
 800768e:	b2db      	uxtb	r3, r3
 8007690:	e02e      	b.n	80076f0 <HAL_DMA_IRQHandler+0x208>
 8007692:	bf00      	nop
 8007694:	24000004 	.word	0x24000004
 8007698:	1b4e81b5 	.word	0x1b4e81b5
 800769c:	40020010 	.word	0x40020010
 80076a0:	40020028 	.word	0x40020028
 80076a4:	40020040 	.word	0x40020040
 80076a8:	40020058 	.word	0x40020058
 80076ac:	40020070 	.word	0x40020070
 80076b0:	40020088 	.word	0x40020088
 80076b4:	400200a0 	.word	0x400200a0
 80076b8:	400200b8 	.word	0x400200b8
 80076bc:	40020410 	.word	0x40020410
 80076c0:	40020428 	.word	0x40020428
 80076c4:	40020440 	.word	0x40020440
 80076c8:	40020458 	.word	0x40020458
 80076cc:	40020470 	.word	0x40020470
 80076d0:	40020488 	.word	0x40020488
 80076d4:	400204a0 	.word	0x400204a0
 80076d8:	400204b8 	.word	0x400204b8
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	f003 0308 	and.w	r3, r3, #8
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	bf14      	ite	ne
 80076ea:	2301      	movne	r3, #1
 80076ec:	2300      	moveq	r3, #0
 80076ee:	b2db      	uxtb	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d015      	beq.n	8007720 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	f022 0204 	bic.w	r2, r2, #4
 8007702:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007708:	f003 031f 	and.w	r3, r3, #31
 800770c:	2208      	movs	r2, #8
 800770e:	409a      	lsls	r2, r3
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007718:	f043 0201 	orr.w	r2, r3, #1
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007724:	f003 031f 	and.w	r3, r3, #31
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	fa22 f303 	lsr.w	r3, r2, r3
 800772e:	f003 0301 	and.w	r3, r3, #1
 8007732:	2b00      	cmp	r3, #0
 8007734:	d06e      	beq.n	8007814 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a69      	ldr	r2, [pc, #420]	; (80078e0 <HAL_DMA_IRQHandler+0x3f8>)
 800773c:	4293      	cmp	r3, r2
 800773e:	d04a      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	4a67      	ldr	r2, [pc, #412]	; (80078e4 <HAL_DMA_IRQHandler+0x3fc>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d045      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	4a66      	ldr	r2, [pc, #408]	; (80078e8 <HAL_DMA_IRQHandler+0x400>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d040      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a64      	ldr	r2, [pc, #400]	; (80078ec <HAL_DMA_IRQHandler+0x404>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d03b      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	4a63      	ldr	r2, [pc, #396]	; (80078f0 <HAL_DMA_IRQHandler+0x408>)
 8007764:	4293      	cmp	r3, r2
 8007766:	d036      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	4a61      	ldr	r2, [pc, #388]	; (80078f4 <HAL_DMA_IRQHandler+0x40c>)
 800776e:	4293      	cmp	r3, r2
 8007770:	d031      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	4a60      	ldr	r2, [pc, #384]	; (80078f8 <HAL_DMA_IRQHandler+0x410>)
 8007778:	4293      	cmp	r3, r2
 800777a:	d02c      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a5e      	ldr	r2, [pc, #376]	; (80078fc <HAL_DMA_IRQHandler+0x414>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d027      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a5d      	ldr	r2, [pc, #372]	; (8007900 <HAL_DMA_IRQHandler+0x418>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d022      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	4a5b      	ldr	r2, [pc, #364]	; (8007904 <HAL_DMA_IRQHandler+0x41c>)
 8007796:	4293      	cmp	r3, r2
 8007798:	d01d      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	4a5a      	ldr	r2, [pc, #360]	; (8007908 <HAL_DMA_IRQHandler+0x420>)
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d018      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4a58      	ldr	r2, [pc, #352]	; (800790c <HAL_DMA_IRQHandler+0x424>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d013      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a57      	ldr	r2, [pc, #348]	; (8007910 <HAL_DMA_IRQHandler+0x428>)
 80077b4:	4293      	cmp	r3, r2
 80077b6:	d00e      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a55      	ldr	r2, [pc, #340]	; (8007914 <HAL_DMA_IRQHandler+0x42c>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d009      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	4a54      	ldr	r2, [pc, #336]	; (8007918 <HAL_DMA_IRQHandler+0x430>)
 80077c8:	4293      	cmp	r3, r2
 80077ca:	d004      	beq.n	80077d6 <HAL_DMA_IRQHandler+0x2ee>
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a52      	ldr	r2, [pc, #328]	; (800791c <HAL_DMA_IRQHandler+0x434>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d10a      	bne.n	80077ec <HAL_DMA_IRQHandler+0x304>
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695b      	ldr	r3, [r3, #20]
 80077dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	bf14      	ite	ne
 80077e4:	2301      	movne	r3, #1
 80077e6:	2300      	moveq	r3, #0
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	e003      	b.n	80077f4 <HAL_DMA_IRQHandler+0x30c>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	2300      	movs	r3, #0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00d      	beq.n	8007814 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80077fc:	f003 031f 	and.w	r3, r3, #31
 8007800:	2201      	movs	r2, #1
 8007802:	409a      	lsls	r2, r3
 8007804:	6a3b      	ldr	r3, [r7, #32]
 8007806:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800780c:	f043 0202 	orr.w	r2, r3, #2
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007818:	f003 031f 	and.w	r3, r3, #31
 800781c:	2204      	movs	r2, #4
 800781e:	409a      	lsls	r2, r3
 8007820:	69bb      	ldr	r3, [r7, #24]
 8007822:	4013      	ands	r3, r2
 8007824:	2b00      	cmp	r3, #0
 8007826:	f000 808f 	beq.w	8007948 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	4a2c      	ldr	r2, [pc, #176]	; (80078e0 <HAL_DMA_IRQHandler+0x3f8>)
 8007830:	4293      	cmp	r3, r2
 8007832:	d04a      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a2a      	ldr	r2, [pc, #168]	; (80078e4 <HAL_DMA_IRQHandler+0x3fc>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d045      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a29      	ldr	r2, [pc, #164]	; (80078e8 <HAL_DMA_IRQHandler+0x400>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d040      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a27      	ldr	r2, [pc, #156]	; (80078ec <HAL_DMA_IRQHandler+0x404>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d03b      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a26      	ldr	r2, [pc, #152]	; (80078f0 <HAL_DMA_IRQHandler+0x408>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d036      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a24      	ldr	r2, [pc, #144]	; (80078f4 <HAL_DMA_IRQHandler+0x40c>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d031      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a23      	ldr	r2, [pc, #140]	; (80078f8 <HAL_DMA_IRQHandler+0x410>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d02c      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	4a21      	ldr	r2, [pc, #132]	; (80078fc <HAL_DMA_IRQHandler+0x414>)
 8007876:	4293      	cmp	r3, r2
 8007878:	d027      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	4a20      	ldr	r2, [pc, #128]	; (8007900 <HAL_DMA_IRQHandler+0x418>)
 8007880:	4293      	cmp	r3, r2
 8007882:	d022      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	4a1e      	ldr	r2, [pc, #120]	; (8007904 <HAL_DMA_IRQHandler+0x41c>)
 800788a:	4293      	cmp	r3, r2
 800788c:	d01d      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a1d      	ldr	r2, [pc, #116]	; (8007908 <HAL_DMA_IRQHandler+0x420>)
 8007894:	4293      	cmp	r3, r2
 8007896:	d018      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a1b      	ldr	r2, [pc, #108]	; (800790c <HAL_DMA_IRQHandler+0x424>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d013      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	4a1a      	ldr	r2, [pc, #104]	; (8007910 <HAL_DMA_IRQHandler+0x428>)
 80078a8:	4293      	cmp	r3, r2
 80078aa:	d00e      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a18      	ldr	r2, [pc, #96]	; (8007914 <HAL_DMA_IRQHandler+0x42c>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d009      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a17      	ldr	r2, [pc, #92]	; (8007918 <HAL_DMA_IRQHandler+0x430>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d004      	beq.n	80078ca <HAL_DMA_IRQHandler+0x3e2>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a15      	ldr	r2, [pc, #84]	; (800791c <HAL_DMA_IRQHandler+0x434>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d12a      	bne.n	8007920 <HAL_DMA_IRQHandler+0x438>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	f003 0302 	and.w	r3, r3, #2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	bf14      	ite	ne
 80078d8:	2301      	movne	r3, #1
 80078da:	2300      	moveq	r3, #0
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	e023      	b.n	8007928 <HAL_DMA_IRQHandler+0x440>
 80078e0:	40020010 	.word	0x40020010
 80078e4:	40020028 	.word	0x40020028
 80078e8:	40020040 	.word	0x40020040
 80078ec:	40020058 	.word	0x40020058
 80078f0:	40020070 	.word	0x40020070
 80078f4:	40020088 	.word	0x40020088
 80078f8:	400200a0 	.word	0x400200a0
 80078fc:	400200b8 	.word	0x400200b8
 8007900:	40020410 	.word	0x40020410
 8007904:	40020428 	.word	0x40020428
 8007908:	40020440 	.word	0x40020440
 800790c:	40020458 	.word	0x40020458
 8007910:	40020470 	.word	0x40020470
 8007914:	40020488 	.word	0x40020488
 8007918:	400204a0 	.word	0x400204a0
 800791c:	400204b8 	.word	0x400204b8
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2300      	movs	r3, #0
 8007928:	2b00      	cmp	r3, #0
 800792a:	d00d      	beq.n	8007948 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007930:	f003 031f 	and.w	r3, r3, #31
 8007934:	2204      	movs	r2, #4
 8007936:	409a      	lsls	r2, r3
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007940:	f043 0204 	orr.w	r2, r3, #4
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794c:	f003 031f 	and.w	r3, r3, #31
 8007950:	2210      	movs	r2, #16
 8007952:	409a      	lsls	r2, r3
 8007954:	69bb      	ldr	r3, [r7, #24]
 8007956:	4013      	ands	r3, r2
 8007958:	2b00      	cmp	r3, #0
 800795a:	f000 80a6 	beq.w	8007aaa <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	4a85      	ldr	r2, [pc, #532]	; (8007b78 <HAL_DMA_IRQHandler+0x690>)
 8007964:	4293      	cmp	r3, r2
 8007966:	d04a      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a83      	ldr	r2, [pc, #524]	; (8007b7c <HAL_DMA_IRQHandler+0x694>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d045      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a82      	ldr	r2, [pc, #520]	; (8007b80 <HAL_DMA_IRQHandler+0x698>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d040      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a80      	ldr	r2, [pc, #512]	; (8007b84 <HAL_DMA_IRQHandler+0x69c>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d03b      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a7f      	ldr	r2, [pc, #508]	; (8007b88 <HAL_DMA_IRQHandler+0x6a0>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d036      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a7d      	ldr	r2, [pc, #500]	; (8007b8c <HAL_DMA_IRQHandler+0x6a4>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d031      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a7c      	ldr	r2, [pc, #496]	; (8007b90 <HAL_DMA_IRQHandler+0x6a8>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d02c      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a7a      	ldr	r2, [pc, #488]	; (8007b94 <HAL_DMA_IRQHandler+0x6ac>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d027      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a79      	ldr	r2, [pc, #484]	; (8007b98 <HAL_DMA_IRQHandler+0x6b0>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d022      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	4a77      	ldr	r2, [pc, #476]	; (8007b9c <HAL_DMA_IRQHandler+0x6b4>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d01d      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a76      	ldr	r2, [pc, #472]	; (8007ba0 <HAL_DMA_IRQHandler+0x6b8>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d018      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a74      	ldr	r2, [pc, #464]	; (8007ba4 <HAL_DMA_IRQHandler+0x6bc>)
 80079d2:	4293      	cmp	r3, r2
 80079d4:	d013      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4a73      	ldr	r2, [pc, #460]	; (8007ba8 <HAL_DMA_IRQHandler+0x6c0>)
 80079dc:	4293      	cmp	r3, r2
 80079de:	d00e      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a71      	ldr	r2, [pc, #452]	; (8007bac <HAL_DMA_IRQHandler+0x6c4>)
 80079e6:	4293      	cmp	r3, r2
 80079e8:	d009      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a70      	ldr	r2, [pc, #448]	; (8007bb0 <HAL_DMA_IRQHandler+0x6c8>)
 80079f0:	4293      	cmp	r3, r2
 80079f2:	d004      	beq.n	80079fe <HAL_DMA_IRQHandler+0x516>
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4a6e      	ldr	r2, [pc, #440]	; (8007bb4 <HAL_DMA_IRQHandler+0x6cc>)
 80079fa:	4293      	cmp	r3, r2
 80079fc:	d10a      	bne.n	8007a14 <HAL_DMA_IRQHandler+0x52c>
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f003 0308 	and.w	r3, r3, #8
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	bf14      	ite	ne
 8007a0c:	2301      	movne	r3, #1
 8007a0e:	2300      	moveq	r3, #0
 8007a10:	b2db      	uxtb	r3, r3
 8007a12:	e009      	b.n	8007a28 <HAL_DMA_IRQHandler+0x540>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 0304 	and.w	r3, r3, #4
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	bf14      	ite	ne
 8007a22:	2301      	movne	r3, #1
 8007a24:	2300      	moveq	r3, #0
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d03e      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a30:	f003 031f 	and.w	r3, r3, #31
 8007a34:	2210      	movs	r2, #16
 8007a36:	409a      	lsls	r2, r3
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d018      	beq.n	8007a7c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d108      	bne.n	8007a6a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d024      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a64:	6878      	ldr	r0, [r7, #4]
 8007a66:	4798      	blx	r3
 8007a68:	e01f      	b.n	8007aaa <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01b      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	e016      	b.n	8007aaa <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d107      	bne.n	8007a9a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f022 0208 	bic.w	r2, r2, #8
 8007a98:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d003      	beq.n	8007aaa <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007aae:	f003 031f 	and.w	r3, r3, #31
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	409a      	lsls	r2, r3
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	4013      	ands	r3, r2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	f000 8110 	beq.w	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a2c      	ldr	r2, [pc, #176]	; (8007b78 <HAL_DMA_IRQHandler+0x690>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d04a      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a2b      	ldr	r2, [pc, #172]	; (8007b7c <HAL_DMA_IRQHandler+0x694>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d045      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a29      	ldr	r2, [pc, #164]	; (8007b80 <HAL_DMA_IRQHandler+0x698>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d040      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a28      	ldr	r2, [pc, #160]	; (8007b84 <HAL_DMA_IRQHandler+0x69c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d03b      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a26      	ldr	r2, [pc, #152]	; (8007b88 <HAL_DMA_IRQHandler+0x6a0>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d036      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a25      	ldr	r2, [pc, #148]	; (8007b8c <HAL_DMA_IRQHandler+0x6a4>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d031      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a23      	ldr	r2, [pc, #140]	; (8007b90 <HAL_DMA_IRQHandler+0x6a8>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d02c      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a22      	ldr	r2, [pc, #136]	; (8007b94 <HAL_DMA_IRQHandler+0x6ac>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d027      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a20      	ldr	r2, [pc, #128]	; (8007b98 <HAL_DMA_IRQHandler+0x6b0>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d022      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a1f      	ldr	r2, [pc, #124]	; (8007b9c <HAL_DMA_IRQHandler+0x6b4>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d01d      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a1d      	ldr	r2, [pc, #116]	; (8007ba0 <HAL_DMA_IRQHandler+0x6b8>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d018      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a1c      	ldr	r2, [pc, #112]	; (8007ba4 <HAL_DMA_IRQHandler+0x6bc>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d013      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a1a      	ldr	r2, [pc, #104]	; (8007ba8 <HAL_DMA_IRQHandler+0x6c0>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d00e      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a19      	ldr	r2, [pc, #100]	; (8007bac <HAL_DMA_IRQHandler+0x6c4>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d009      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a17      	ldr	r2, [pc, #92]	; (8007bb0 <HAL_DMA_IRQHandler+0x6c8>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d004      	beq.n	8007b60 <HAL_DMA_IRQHandler+0x678>
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	4a16      	ldr	r2, [pc, #88]	; (8007bb4 <HAL_DMA_IRQHandler+0x6cc>)
 8007b5c:	4293      	cmp	r3, r2
 8007b5e:	d12b      	bne.n	8007bb8 <HAL_DMA_IRQHandler+0x6d0>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0310 	and.w	r3, r3, #16
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	bf14      	ite	ne
 8007b6e:	2301      	movne	r3, #1
 8007b70:	2300      	moveq	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	e02a      	b.n	8007bcc <HAL_DMA_IRQHandler+0x6e4>
 8007b76:	bf00      	nop
 8007b78:	40020010 	.word	0x40020010
 8007b7c:	40020028 	.word	0x40020028
 8007b80:	40020040 	.word	0x40020040
 8007b84:	40020058 	.word	0x40020058
 8007b88:	40020070 	.word	0x40020070
 8007b8c:	40020088 	.word	0x40020088
 8007b90:	400200a0 	.word	0x400200a0
 8007b94:	400200b8 	.word	0x400200b8
 8007b98:	40020410 	.word	0x40020410
 8007b9c:	40020428 	.word	0x40020428
 8007ba0:	40020440 	.word	0x40020440
 8007ba4:	40020458 	.word	0x40020458
 8007ba8:	40020470 	.word	0x40020470
 8007bac:	40020488 	.word	0x40020488
 8007bb0:	400204a0 	.word	0x400204a0
 8007bb4:	400204b8 	.word	0x400204b8
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0302 	and.w	r3, r3, #2
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	bf14      	ite	ne
 8007bc6:	2301      	movne	r3, #1
 8007bc8:	2300      	moveq	r3, #0
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 8087 	beq.w	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd6:	f003 031f 	and.w	r3, r3, #31
 8007bda:	2220      	movs	r2, #32
 8007bdc:	409a      	lsls	r2, r3
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007be8:	b2db      	uxtb	r3, r3
 8007bea:	2b04      	cmp	r3, #4
 8007bec:	d139      	bne.n	8007c62 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	681a      	ldr	r2, [r3, #0]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f022 0216 	bic.w	r2, r2, #22
 8007bfc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	695a      	ldr	r2, [r3, #20]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007c0c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d103      	bne.n	8007c1e <HAL_DMA_IRQHandler+0x736>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	681a      	ldr	r2, [r3, #0]
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f022 0208 	bic.w	r2, r2, #8
 8007c2c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c32:	f003 031f 	and.w	r3, r3, #31
 8007c36:	223f      	movs	r2, #63	; 0x3f
 8007c38:	409a      	lsls	r2, r3
 8007c3a:	6a3b      	ldr	r3, [r7, #32]
 8007c3c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2201      	movs	r2, #1
 8007c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	f000 834a 	beq.w	80082ec <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c5c:	6878      	ldr	r0, [r7, #4]
 8007c5e:	4798      	blx	r3
          }
          return;
 8007c60:	e344      	b.n	80082ec <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d018      	beq.n	8007ca2 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d108      	bne.n	8007c90 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d02c      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	4798      	blx	r3
 8007c8e:	e027      	b.n	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d023      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	6878      	ldr	r0, [r7, #4]
 8007c9e:	4798      	blx	r3
 8007ca0:	e01e      	b.n	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d10f      	bne.n	8007cd0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0210 	bic.w	r2, r2, #16
 8007cbe:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d003      	beq.n	8007ce0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	6878      	ldr	r0, [r7, #4]
 8007cde:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	f000 8306 	beq.w	80082f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cee:	f003 0301 	and.w	r3, r3, #1
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f000 8088 	beq.w	8007e08 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4a7a      	ldr	r2, [pc, #488]	; (8007ef0 <HAL_DMA_IRQHandler+0xa08>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d04a      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4a79      	ldr	r2, [pc, #484]	; (8007ef4 <HAL_DMA_IRQHandler+0xa0c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d045      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	4a77      	ldr	r2, [pc, #476]	; (8007ef8 <HAL_DMA_IRQHandler+0xa10>)
 8007d1a:	4293      	cmp	r3, r2
 8007d1c:	d040      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	4a76      	ldr	r2, [pc, #472]	; (8007efc <HAL_DMA_IRQHandler+0xa14>)
 8007d24:	4293      	cmp	r3, r2
 8007d26:	d03b      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4a74      	ldr	r2, [pc, #464]	; (8007f00 <HAL_DMA_IRQHandler+0xa18>)
 8007d2e:	4293      	cmp	r3, r2
 8007d30:	d036      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a73      	ldr	r2, [pc, #460]	; (8007f04 <HAL_DMA_IRQHandler+0xa1c>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d031      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	4a71      	ldr	r2, [pc, #452]	; (8007f08 <HAL_DMA_IRQHandler+0xa20>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d02c      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a70      	ldr	r2, [pc, #448]	; (8007f0c <HAL_DMA_IRQHandler+0xa24>)
 8007d4c:	4293      	cmp	r3, r2
 8007d4e:	d027      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	4a6e      	ldr	r2, [pc, #440]	; (8007f10 <HAL_DMA_IRQHandler+0xa28>)
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d022      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	4a6d      	ldr	r2, [pc, #436]	; (8007f14 <HAL_DMA_IRQHandler+0xa2c>)
 8007d60:	4293      	cmp	r3, r2
 8007d62:	d01d      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	4a6b      	ldr	r2, [pc, #428]	; (8007f18 <HAL_DMA_IRQHandler+0xa30>)
 8007d6a:	4293      	cmp	r3, r2
 8007d6c:	d018      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4a6a      	ldr	r2, [pc, #424]	; (8007f1c <HAL_DMA_IRQHandler+0xa34>)
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d013      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a68      	ldr	r2, [pc, #416]	; (8007f20 <HAL_DMA_IRQHandler+0xa38>)
 8007d7e:	4293      	cmp	r3, r2
 8007d80:	d00e      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4a67      	ldr	r2, [pc, #412]	; (8007f24 <HAL_DMA_IRQHandler+0xa3c>)
 8007d88:	4293      	cmp	r3, r2
 8007d8a:	d009      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4a65      	ldr	r2, [pc, #404]	; (8007f28 <HAL_DMA_IRQHandler+0xa40>)
 8007d92:	4293      	cmp	r3, r2
 8007d94:	d004      	beq.n	8007da0 <HAL_DMA_IRQHandler+0x8b8>
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a64      	ldr	r2, [pc, #400]	; (8007f2c <HAL_DMA_IRQHandler+0xa44>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d108      	bne.n	8007db2 <HAL_DMA_IRQHandler+0x8ca>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681a      	ldr	r2, [r3, #0]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f022 0201 	bic.w	r2, r2, #1
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	e007      	b.n	8007dc2 <HAL_DMA_IRQHandler+0x8da>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	f022 0201 	bic.w	r2, r2, #1
 8007dc0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	3301      	adds	r3, #1
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007dca:	429a      	cmp	r2, r3
 8007dcc:	d307      	bcc.n	8007dde <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	f003 0301 	and.w	r3, r3, #1
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d1f2      	bne.n	8007dc2 <HAL_DMA_IRQHandler+0x8da>
 8007ddc:	e000      	b.n	8007de0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8007dde:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	f003 0301 	and.w	r3, r3, #1
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d004      	beq.n	8007df8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	2203      	movs	r2, #3
 8007df2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8007df6:	e003      	b.n	8007e00 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	f000 8272 	beq.w	80082f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	4798      	blx	r3
 8007e1a:	e26c      	b.n	80082f6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a43      	ldr	r2, [pc, #268]	; (8007f30 <HAL_DMA_IRQHandler+0xa48>)
 8007e22:	4293      	cmp	r3, r2
 8007e24:	d022      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4a42      	ldr	r2, [pc, #264]	; (8007f34 <HAL_DMA_IRQHandler+0xa4c>)
 8007e2c:	4293      	cmp	r3, r2
 8007e2e:	d01d      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	4a40      	ldr	r2, [pc, #256]	; (8007f38 <HAL_DMA_IRQHandler+0xa50>)
 8007e36:	4293      	cmp	r3, r2
 8007e38:	d018      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	4a3f      	ldr	r2, [pc, #252]	; (8007f3c <HAL_DMA_IRQHandler+0xa54>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d013      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	4a3d      	ldr	r2, [pc, #244]	; (8007f40 <HAL_DMA_IRQHandler+0xa58>)
 8007e4a:	4293      	cmp	r3, r2
 8007e4c:	d00e      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4a3c      	ldr	r2, [pc, #240]	; (8007f44 <HAL_DMA_IRQHandler+0xa5c>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d009      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	4a3a      	ldr	r2, [pc, #232]	; (8007f48 <HAL_DMA_IRQHandler+0xa60>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d004      	beq.n	8007e6c <HAL_DMA_IRQHandler+0x984>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4a39      	ldr	r2, [pc, #228]	; (8007f4c <HAL_DMA_IRQHandler+0xa64>)
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d101      	bne.n	8007e70 <HAL_DMA_IRQHandler+0x988>
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	e000      	b.n	8007e72 <HAL_DMA_IRQHandler+0x98a>
 8007e70:	2300      	movs	r3, #0
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 823f 	beq.w	80082f6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e84:	f003 031f 	and.w	r3, r3, #31
 8007e88:	2204      	movs	r2, #4
 8007e8a:	409a      	lsls	r2, r3
 8007e8c:	697b      	ldr	r3, [r7, #20]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	f000 80cd 	beq.w	8008030 <HAL_DMA_IRQHandler+0xb48>
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	f003 0304 	and.w	r3, r3, #4
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 80c7 	beq.w	8008030 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ea6:	f003 031f 	and.w	r3, r3, #31
 8007eaa:	2204      	movs	r2, #4
 8007eac:	409a      	lsls	r2, r3
 8007eae:	69fb      	ldr	r3, [r7, #28]
 8007eb0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eb2:	693b      	ldr	r3, [r7, #16]
 8007eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d049      	beq.n	8007f50 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d109      	bne.n	8007eda <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f000 8210 	beq.w	80082f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007ed8:	e20a      	b.n	80082f0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	f000 8206 	beq.w	80082f0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee8:	6878      	ldr	r0, [r7, #4]
 8007eea:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8007eec:	e200      	b.n	80082f0 <HAL_DMA_IRQHandler+0xe08>
 8007eee:	bf00      	nop
 8007ef0:	40020010 	.word	0x40020010
 8007ef4:	40020028 	.word	0x40020028
 8007ef8:	40020040 	.word	0x40020040
 8007efc:	40020058 	.word	0x40020058
 8007f00:	40020070 	.word	0x40020070
 8007f04:	40020088 	.word	0x40020088
 8007f08:	400200a0 	.word	0x400200a0
 8007f0c:	400200b8 	.word	0x400200b8
 8007f10:	40020410 	.word	0x40020410
 8007f14:	40020428 	.word	0x40020428
 8007f18:	40020440 	.word	0x40020440
 8007f1c:	40020458 	.word	0x40020458
 8007f20:	40020470 	.word	0x40020470
 8007f24:	40020488 	.word	0x40020488
 8007f28:	400204a0 	.word	0x400204a0
 8007f2c:	400204b8 	.word	0x400204b8
 8007f30:	58025408 	.word	0x58025408
 8007f34:	5802541c 	.word	0x5802541c
 8007f38:	58025430 	.word	0x58025430
 8007f3c:	58025444 	.word	0x58025444
 8007f40:	58025458 	.word	0x58025458
 8007f44:	5802546c 	.word	0x5802546c
 8007f48:	58025480 	.word	0x58025480
 8007f4c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8007f50:	693b      	ldr	r3, [r7, #16]
 8007f52:	f003 0320 	and.w	r3, r3, #32
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d160      	bne.n	800801c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	4a7f      	ldr	r2, [pc, #508]	; (800815c <HAL_DMA_IRQHandler+0xc74>)
 8007f60:	4293      	cmp	r3, r2
 8007f62:	d04a      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a7d      	ldr	r2, [pc, #500]	; (8008160 <HAL_DMA_IRQHandler+0xc78>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d045      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	4a7c      	ldr	r2, [pc, #496]	; (8008164 <HAL_DMA_IRQHandler+0xc7c>)
 8007f74:	4293      	cmp	r3, r2
 8007f76:	d040      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a7a      	ldr	r2, [pc, #488]	; (8008168 <HAL_DMA_IRQHandler+0xc80>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d03b      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	4a79      	ldr	r2, [pc, #484]	; (800816c <HAL_DMA_IRQHandler+0xc84>)
 8007f88:	4293      	cmp	r3, r2
 8007f8a:	d036      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	4a77      	ldr	r2, [pc, #476]	; (8008170 <HAL_DMA_IRQHandler+0xc88>)
 8007f92:	4293      	cmp	r3, r2
 8007f94:	d031      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	4a76      	ldr	r2, [pc, #472]	; (8008174 <HAL_DMA_IRQHandler+0xc8c>)
 8007f9c:	4293      	cmp	r3, r2
 8007f9e:	d02c      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	4a74      	ldr	r2, [pc, #464]	; (8008178 <HAL_DMA_IRQHandler+0xc90>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d027      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	4a73      	ldr	r2, [pc, #460]	; (800817c <HAL_DMA_IRQHandler+0xc94>)
 8007fb0:	4293      	cmp	r3, r2
 8007fb2:	d022      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4a71      	ldr	r2, [pc, #452]	; (8008180 <HAL_DMA_IRQHandler+0xc98>)
 8007fba:	4293      	cmp	r3, r2
 8007fbc:	d01d      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	4a70      	ldr	r2, [pc, #448]	; (8008184 <HAL_DMA_IRQHandler+0xc9c>)
 8007fc4:	4293      	cmp	r3, r2
 8007fc6:	d018      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	4a6e      	ldr	r2, [pc, #440]	; (8008188 <HAL_DMA_IRQHandler+0xca0>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d013      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a6d      	ldr	r2, [pc, #436]	; (800818c <HAL_DMA_IRQHandler+0xca4>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d00e      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a6b      	ldr	r2, [pc, #428]	; (8008190 <HAL_DMA_IRQHandler+0xca8>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d009      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a6a      	ldr	r2, [pc, #424]	; (8008194 <HAL_DMA_IRQHandler+0xcac>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d004      	beq.n	8007ffa <HAL_DMA_IRQHandler+0xb12>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a68      	ldr	r2, [pc, #416]	; (8008198 <HAL_DMA_IRQHandler+0xcb0>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d108      	bne.n	800800c <HAL_DMA_IRQHandler+0xb24>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f022 0208 	bic.w	r2, r2, #8
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e007      	b.n	800801c <HAL_DMA_IRQHandler+0xb34>
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681a      	ldr	r2, [r3, #0]
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f022 0204 	bic.w	r2, r2, #4
 800801a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008020:	2b00      	cmp	r3, #0
 8008022:	f000 8165 	beq.w	80082f0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800802e:	e15f      	b.n	80082f0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008034:	f003 031f 	and.w	r3, r3, #31
 8008038:	2202      	movs	r2, #2
 800803a:	409a      	lsls	r2, r3
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	4013      	ands	r3, r2
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 80c5 	beq.w	80081d0 <HAL_DMA_IRQHandler+0xce8>
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	f003 0302 	and.w	r3, r3, #2
 800804c:	2b00      	cmp	r3, #0
 800804e:	f000 80bf 	beq.w	80081d0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008056:	f003 031f 	and.w	r3, r3, #31
 800805a:	2202      	movs	r2, #2
 800805c:	409a      	lsls	r2, r3
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008068:	2b00      	cmp	r3, #0
 800806a:	d018      	beq.n	800809e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800806c:	693b      	ldr	r3, [r7, #16]
 800806e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 813a 	beq.w	80082f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008084:	6878      	ldr	r0, [r7, #4]
 8008086:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8008088:	e134      	b.n	80082f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800808e:	2b00      	cmp	r3, #0
 8008090:	f000 8130 	beq.w	80082f4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800809c:	e12a      	b.n	80082f4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800809e:	693b      	ldr	r3, [r7, #16]
 80080a0:	f003 0320 	and.w	r3, r3, #32
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	f040 8089 	bne.w	80081bc <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2b      	ldr	r2, [pc, #172]	; (800815c <HAL_DMA_IRQHandler+0xc74>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d04a      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a29      	ldr	r2, [pc, #164]	; (8008160 <HAL_DMA_IRQHandler+0xc78>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d045      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a28      	ldr	r2, [pc, #160]	; (8008164 <HAL_DMA_IRQHandler+0xc7c>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d040      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a26      	ldr	r2, [pc, #152]	; (8008168 <HAL_DMA_IRQHandler+0xc80>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d03b      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a25      	ldr	r2, [pc, #148]	; (800816c <HAL_DMA_IRQHandler+0xc84>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d036      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a23      	ldr	r2, [pc, #140]	; (8008170 <HAL_DMA_IRQHandler+0xc88>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d031      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a22      	ldr	r2, [pc, #136]	; (8008174 <HAL_DMA_IRQHandler+0xc8c>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d02c      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a20      	ldr	r2, [pc, #128]	; (8008178 <HAL_DMA_IRQHandler+0xc90>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d027      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1f      	ldr	r2, [pc, #124]	; (800817c <HAL_DMA_IRQHandler+0xc94>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d022      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1d      	ldr	r2, [pc, #116]	; (8008180 <HAL_DMA_IRQHandler+0xc98>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d01d      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1c      	ldr	r2, [pc, #112]	; (8008184 <HAL_DMA_IRQHandler+0xc9c>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d018      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1a      	ldr	r2, [pc, #104]	; (8008188 <HAL_DMA_IRQHandler+0xca0>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d013      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a19      	ldr	r2, [pc, #100]	; (800818c <HAL_DMA_IRQHandler+0xca4>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d00e      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a17      	ldr	r2, [pc, #92]	; (8008190 <HAL_DMA_IRQHandler+0xca8>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d009      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	4a16      	ldr	r2, [pc, #88]	; (8008194 <HAL_DMA_IRQHandler+0xcac>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d004      	beq.n	800814a <HAL_DMA_IRQHandler+0xc62>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	4a14      	ldr	r2, [pc, #80]	; (8008198 <HAL_DMA_IRQHandler+0xcb0>)
 8008146:	4293      	cmp	r3, r2
 8008148:	d128      	bne.n	800819c <HAL_DMA_IRQHandler+0xcb4>
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 0214 	bic.w	r2, r2, #20
 8008158:	601a      	str	r2, [r3, #0]
 800815a:	e027      	b.n	80081ac <HAL_DMA_IRQHandler+0xcc4>
 800815c:	40020010 	.word	0x40020010
 8008160:	40020028 	.word	0x40020028
 8008164:	40020040 	.word	0x40020040
 8008168:	40020058 	.word	0x40020058
 800816c:	40020070 	.word	0x40020070
 8008170:	40020088 	.word	0x40020088
 8008174:	400200a0 	.word	0x400200a0
 8008178:	400200b8 	.word	0x400200b8
 800817c:	40020410 	.word	0x40020410
 8008180:	40020428 	.word	0x40020428
 8008184:	40020440 	.word	0x40020440
 8008188:	40020458 	.word	0x40020458
 800818c:	40020470 	.word	0x40020470
 8008190:	40020488 	.word	0x40020488
 8008194:	400204a0 	.word	0x400204a0
 8008198:	400204b8 	.word	0x400204b8
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	681a      	ldr	r2, [r3, #0]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f022 020a 	bic.w	r2, r2, #10
 80081aa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2201      	movs	r2, #1
 80081b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	2200      	movs	r2, #0
 80081b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	f000 8097 	beq.w	80082f4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80081ce:	e091      	b.n	80082f4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80081d4:	f003 031f 	and.w	r3, r3, #31
 80081d8:	2208      	movs	r2, #8
 80081da:	409a      	lsls	r2, r3
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	4013      	ands	r3, r2
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	f000 8088 	beq.w	80082f6 <HAL_DMA_IRQHandler+0xe0e>
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f003 0308 	and.w	r3, r3, #8
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	f000 8082 	beq.w	80082f6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4a41      	ldr	r2, [pc, #260]	; (80082fc <HAL_DMA_IRQHandler+0xe14>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d04a      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	4a3f      	ldr	r2, [pc, #252]	; (8008300 <HAL_DMA_IRQHandler+0xe18>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d045      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a3e      	ldr	r2, [pc, #248]	; (8008304 <HAL_DMA_IRQHandler+0xe1c>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d040      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	4a3c      	ldr	r2, [pc, #240]	; (8008308 <HAL_DMA_IRQHandler+0xe20>)
 8008216:	4293      	cmp	r3, r2
 8008218:	d03b      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	4a3b      	ldr	r2, [pc, #236]	; (800830c <HAL_DMA_IRQHandler+0xe24>)
 8008220:	4293      	cmp	r3, r2
 8008222:	d036      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	4a39      	ldr	r2, [pc, #228]	; (8008310 <HAL_DMA_IRQHandler+0xe28>)
 800822a:	4293      	cmp	r3, r2
 800822c:	d031      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4a38      	ldr	r2, [pc, #224]	; (8008314 <HAL_DMA_IRQHandler+0xe2c>)
 8008234:	4293      	cmp	r3, r2
 8008236:	d02c      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	4a36      	ldr	r2, [pc, #216]	; (8008318 <HAL_DMA_IRQHandler+0xe30>)
 800823e:	4293      	cmp	r3, r2
 8008240:	d027      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	4a35      	ldr	r2, [pc, #212]	; (800831c <HAL_DMA_IRQHandler+0xe34>)
 8008248:	4293      	cmp	r3, r2
 800824a:	d022      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a33      	ldr	r2, [pc, #204]	; (8008320 <HAL_DMA_IRQHandler+0xe38>)
 8008252:	4293      	cmp	r3, r2
 8008254:	d01d      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a32      	ldr	r2, [pc, #200]	; (8008324 <HAL_DMA_IRQHandler+0xe3c>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4a30      	ldr	r2, [pc, #192]	; (8008328 <HAL_DMA_IRQHandler+0xe40>)
 8008266:	4293      	cmp	r3, r2
 8008268:	d013      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a2f      	ldr	r2, [pc, #188]	; (800832c <HAL_DMA_IRQHandler+0xe44>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a2d      	ldr	r2, [pc, #180]	; (8008330 <HAL_DMA_IRQHandler+0xe48>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a2c      	ldr	r2, [pc, #176]	; (8008334 <HAL_DMA_IRQHandler+0xe4c>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_DMA_IRQHandler+0xdaa>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a2a      	ldr	r2, [pc, #168]	; (8008338 <HAL_DMA_IRQHandler+0xe50>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d108      	bne.n	80082a4 <HAL_DMA_IRQHandler+0xdbc>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	681a      	ldr	r2, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 021c 	bic.w	r2, r2, #28
 80082a0:	601a      	str	r2, [r3, #0]
 80082a2:	e007      	b.n	80082b4 <HAL_DMA_IRQHandler+0xdcc>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 020e 	bic.w	r2, r2, #14
 80082b2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80082b8:	f003 031f 	and.w	r3, r3, #31
 80082bc:	2201      	movs	r2, #1
 80082be:	409a      	lsls	r2, r3
 80082c0:	69fb      	ldr	r3, [r7, #28]
 80082c2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2201      	movs	r2, #1
 80082c8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2200      	movs	r2, #0
 80082d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d009      	beq.n	80082f6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	4798      	blx	r3
 80082ea:	e004      	b.n	80082f6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80082ec:	bf00      	nop
 80082ee:	e002      	b.n	80082f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082f0:	bf00      	nop
 80082f2:	e000      	b.n	80082f6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80082f4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80082f6:	3728      	adds	r7, #40	; 0x28
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	40020010 	.word	0x40020010
 8008300:	40020028 	.word	0x40020028
 8008304:	40020040 	.word	0x40020040
 8008308:	40020058 	.word	0x40020058
 800830c:	40020070 	.word	0x40020070
 8008310:	40020088 	.word	0x40020088
 8008314:	400200a0 	.word	0x400200a0
 8008318:	400200b8 	.word	0x400200b8
 800831c:	40020410 	.word	0x40020410
 8008320:	40020428 	.word	0x40020428
 8008324:	40020440 	.word	0x40020440
 8008328:	40020458 	.word	0x40020458
 800832c:	40020470 	.word	0x40020470
 8008330:	40020488 	.word	0x40020488
 8008334:	400204a0 	.word	0x400204a0
 8008338:	400204b8 	.word	0x400204b8

0800833c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	4a42      	ldr	r2, [pc, #264]	; (8008454 <DMA_CalcBaseAndBitshift+0x118>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d04a      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	4a41      	ldr	r2, [pc, #260]	; (8008458 <DMA_CalcBaseAndBitshift+0x11c>)
 8008354:	4293      	cmp	r3, r2
 8008356:	d045      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	4a3f      	ldr	r2, [pc, #252]	; (800845c <DMA_CalcBaseAndBitshift+0x120>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d040      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	4a3e      	ldr	r2, [pc, #248]	; (8008460 <DMA_CalcBaseAndBitshift+0x124>)
 8008368:	4293      	cmp	r3, r2
 800836a:	d03b      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a3c      	ldr	r2, [pc, #240]	; (8008464 <DMA_CalcBaseAndBitshift+0x128>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d036      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a3b      	ldr	r2, [pc, #236]	; (8008468 <DMA_CalcBaseAndBitshift+0x12c>)
 800837c:	4293      	cmp	r3, r2
 800837e:	d031      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	4a39      	ldr	r2, [pc, #228]	; (800846c <DMA_CalcBaseAndBitshift+0x130>)
 8008386:	4293      	cmp	r3, r2
 8008388:	d02c      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a38      	ldr	r2, [pc, #224]	; (8008470 <DMA_CalcBaseAndBitshift+0x134>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d027      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a36      	ldr	r2, [pc, #216]	; (8008474 <DMA_CalcBaseAndBitshift+0x138>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d022      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a35      	ldr	r2, [pc, #212]	; (8008478 <DMA_CalcBaseAndBitshift+0x13c>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d01d      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a33      	ldr	r2, [pc, #204]	; (800847c <DMA_CalcBaseAndBitshift+0x140>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d018      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a32      	ldr	r2, [pc, #200]	; (8008480 <DMA_CalcBaseAndBitshift+0x144>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d013      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a30      	ldr	r2, [pc, #192]	; (8008484 <DMA_CalcBaseAndBitshift+0x148>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d00e      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a2f      	ldr	r2, [pc, #188]	; (8008488 <DMA_CalcBaseAndBitshift+0x14c>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d009      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a2d      	ldr	r2, [pc, #180]	; (800848c <DMA_CalcBaseAndBitshift+0x150>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d004      	beq.n	80083e4 <DMA_CalcBaseAndBitshift+0xa8>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a2c      	ldr	r2, [pc, #176]	; (8008490 <DMA_CalcBaseAndBitshift+0x154>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d101      	bne.n	80083e8 <DMA_CalcBaseAndBitshift+0xac>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e000      	b.n	80083ea <DMA_CalcBaseAndBitshift+0xae>
 80083e8:	2300      	movs	r3, #0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d024      	beq.n	8008438 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	3b10      	subs	r3, #16
 80083f6:	4a27      	ldr	r2, [pc, #156]	; (8008494 <DMA_CalcBaseAndBitshift+0x158>)
 80083f8:	fba2 2303 	umull	r2, r3, r2, r3
 80083fc:	091b      	lsrs	r3, r3, #4
 80083fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f003 0307 	and.w	r3, r3, #7
 8008406:	4a24      	ldr	r2, [pc, #144]	; (8008498 <DMA_CalcBaseAndBitshift+0x15c>)
 8008408:	5cd3      	ldrb	r3, [r2, r3]
 800840a:	461a      	mov	r2, r3
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	2b03      	cmp	r3, #3
 8008414:	d908      	bls.n	8008428 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	461a      	mov	r2, r3
 800841c:	4b1f      	ldr	r3, [pc, #124]	; (800849c <DMA_CalcBaseAndBitshift+0x160>)
 800841e:	4013      	ands	r3, r2
 8008420:	1d1a      	adds	r2, r3, #4
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	659a      	str	r2, [r3, #88]	; 0x58
 8008426:	e00d      	b.n	8008444 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	461a      	mov	r2, r3
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <DMA_CalcBaseAndBitshift+0x160>)
 8008430:	4013      	ands	r3, r2
 8008432:	687a      	ldr	r2, [r7, #4]
 8008434:	6593      	str	r3, [r2, #88]	; 0x58
 8008436:	e005      	b.n	8008444 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008448:	4618      	mov	r0, r3
 800844a:	3714      	adds	r7, #20
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr
 8008454:	40020010 	.word	0x40020010
 8008458:	40020028 	.word	0x40020028
 800845c:	40020040 	.word	0x40020040
 8008460:	40020058 	.word	0x40020058
 8008464:	40020070 	.word	0x40020070
 8008468:	40020088 	.word	0x40020088
 800846c:	400200a0 	.word	0x400200a0
 8008470:	400200b8 	.word	0x400200b8
 8008474:	40020410 	.word	0x40020410
 8008478:	40020428 	.word	0x40020428
 800847c:	40020440 	.word	0x40020440
 8008480:	40020458 	.word	0x40020458
 8008484:	40020470 	.word	0x40020470
 8008488:	40020488 	.word	0x40020488
 800848c:	400204a0 	.word	0x400204a0
 8008490:	400204b8 	.word	0x400204b8
 8008494:	aaaaaaab 	.word	0xaaaaaaab
 8008498:	08010f88 	.word	0x08010f88
 800849c:	fffffc00 	.word	0xfffffc00

080084a0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b085      	sub	sp, #20
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a8:	2300      	movs	r3, #0
 80084aa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	699b      	ldr	r3, [r3, #24]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d120      	bne.n	80084f6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b8:	2b03      	cmp	r3, #3
 80084ba:	d858      	bhi.n	800856e <DMA_CheckFifoParam+0xce>
 80084bc:	a201      	add	r2, pc, #4	; (adr r2, 80084c4 <DMA_CheckFifoParam+0x24>)
 80084be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c2:	bf00      	nop
 80084c4:	080084d5 	.word	0x080084d5
 80084c8:	080084e7 	.word	0x080084e7
 80084cc:	080084d5 	.word	0x080084d5
 80084d0:	0800856f 	.word	0x0800856f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d048      	beq.n	8008572 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80084e0:	2301      	movs	r3, #1
 80084e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084e4:	e045      	b.n	8008572 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084ea:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80084ee:	d142      	bne.n	8008576 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80084f4:	e03f      	b.n	8008576 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084fe:	d123      	bne.n	8008548 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008504:	2b03      	cmp	r3, #3
 8008506:	d838      	bhi.n	800857a <DMA_CheckFifoParam+0xda>
 8008508:	a201      	add	r2, pc, #4	; (adr r2, 8008510 <DMA_CheckFifoParam+0x70>)
 800850a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800850e:	bf00      	nop
 8008510:	08008521 	.word	0x08008521
 8008514:	08008527 	.word	0x08008527
 8008518:	08008521 	.word	0x08008521
 800851c:	08008539 	.word	0x08008539
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8008520:	2301      	movs	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
        break;
 8008524:	e030      	b.n	8008588 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800852a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d025      	beq.n	800857e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008536:	e022      	b.n	800857e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800853c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008540:	d11f      	bne.n	8008582 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8008542:	2301      	movs	r3, #1
 8008544:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8008546:	e01c      	b.n	8008582 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800854c:	2b02      	cmp	r3, #2
 800854e:	d902      	bls.n	8008556 <DMA_CheckFifoParam+0xb6>
 8008550:	2b03      	cmp	r3, #3
 8008552:	d003      	beq.n	800855c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8008554:	e018      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8008556:	2301      	movs	r3, #1
 8008558:	73fb      	strb	r3, [r7, #15]
        break;
 800855a:	e015      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008560:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d00e      	beq.n	8008586 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8008568:	2301      	movs	r3, #1
 800856a:	73fb      	strb	r3, [r7, #15]
    break;
 800856c:	e00b      	b.n	8008586 <DMA_CheckFifoParam+0xe6>
        break;
 800856e:	bf00      	nop
 8008570:	e00a      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        break;
 8008572:	bf00      	nop
 8008574:	e008      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        break;
 8008576:	bf00      	nop
 8008578:	e006      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        break;
 800857a:	bf00      	nop
 800857c:	e004      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        break;
 800857e:	bf00      	nop
 8008580:	e002      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
        break;
 8008582:	bf00      	nop
 8008584:	e000      	b.n	8008588 <DMA_CheckFifoParam+0xe8>
    break;
 8008586:	bf00      	nop
    }
  }

  return status;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3714      	adds	r7, #20
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop

08008598 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8008598:	b480      	push	{r7}
 800859a:	b085      	sub	sp, #20
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a38      	ldr	r2, [pc, #224]	; (800868c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d022      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a36      	ldr	r2, [pc, #216]	; (8008690 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d01d      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a35      	ldr	r2, [pc, #212]	; (8008694 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d018      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a33      	ldr	r2, [pc, #204]	; (8008698 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d013      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a32      	ldr	r2, [pc, #200]	; (800869c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d00e      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a30      	ldr	r2, [pc, #192]	; (80086a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d009      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	4a2f      	ldr	r2, [pc, #188]	; (80086a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80085e8:	4293      	cmp	r3, r2
 80085ea:	d004      	beq.n	80085f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	4a2d      	ldr	r2, [pc, #180]	; (80086a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d101      	bne.n	80085fa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80085f6:	2301      	movs	r3, #1
 80085f8:	e000      	b.n	80085fc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80085fa:	2300      	movs	r3, #0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d01a      	beq.n	8008636 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	b2db      	uxtb	r3, r3
 8008606:	3b08      	subs	r3, #8
 8008608:	4a28      	ldr	r2, [pc, #160]	; (80086ac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800860a:	fba2 2303 	umull	r2, r3, r2, r3
 800860e:	091b      	lsrs	r3, r3, #4
 8008610:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4b26      	ldr	r3, [pc, #152]	; (80086b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8008616:	4413      	add	r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	461a      	mov	r2, r3
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	4a24      	ldr	r2, [pc, #144]	; (80086b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8008624:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	f003 031f 	and.w	r3, r3, #31
 800862c:	2201      	movs	r2, #1
 800862e:	409a      	lsls	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8008634:	e024      	b.n	8008680 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	b2db      	uxtb	r3, r3
 800863c:	3b10      	subs	r3, #16
 800863e:	4a1e      	ldr	r2, [pc, #120]	; (80086b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8008640:	fba2 2303 	umull	r2, r3, r2, r3
 8008644:	091b      	lsrs	r3, r3, #4
 8008646:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8008648:	68bb      	ldr	r3, [r7, #8]
 800864a:	4a1c      	ldr	r2, [pc, #112]	; (80086bc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d806      	bhi.n	800865e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	4a1b      	ldr	r2, [pc, #108]	; (80086c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d902      	bls.n	800865e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	3308      	adds	r3, #8
 800865c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800865e:	68fa      	ldr	r2, [r7, #12]
 8008660:	4b18      	ldr	r3, [pc, #96]	; (80086c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8008662:	4413      	add	r3, r2
 8008664:	009b      	lsls	r3, r3, #2
 8008666:	461a      	mov	r2, r3
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	4a16      	ldr	r2, [pc, #88]	; (80086c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8008670:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	f003 031f 	and.w	r3, r3, #31
 8008678:	2201      	movs	r2, #1
 800867a:	409a      	lsls	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8008680:	bf00      	nop
 8008682:	3714      	adds	r7, #20
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr
 800868c:	58025408 	.word	0x58025408
 8008690:	5802541c 	.word	0x5802541c
 8008694:	58025430 	.word	0x58025430
 8008698:	58025444 	.word	0x58025444
 800869c:	58025458 	.word	0x58025458
 80086a0:	5802546c 	.word	0x5802546c
 80086a4:	58025480 	.word	0x58025480
 80086a8:	58025494 	.word	0x58025494
 80086ac:	cccccccd 	.word	0xcccccccd
 80086b0:	16009600 	.word	0x16009600
 80086b4:	58025880 	.word	0x58025880
 80086b8:	aaaaaaab 	.word	0xaaaaaaab
 80086bc:	400204b8 	.word	0x400204b8
 80086c0:	4002040f 	.word	0x4002040f
 80086c4:	10008200 	.word	0x10008200
 80086c8:	40020880 	.word	0x40020880

080086cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80086cc:	b480      	push	{r7}
 80086ce:	b085      	sub	sp, #20
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d04a      	beq.n	8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2b08      	cmp	r3, #8
 80086e6:	d847      	bhi.n	8008778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a25      	ldr	r2, [pc, #148]	; (8008784 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d022      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	4a24      	ldr	r2, [pc, #144]	; (8008788 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d01d      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a22      	ldr	r2, [pc, #136]	; (800878c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d018      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	681b      	ldr	r3, [r3, #0]
 800870a:	4a21      	ldr	r2, [pc, #132]	; (8008790 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800870c:	4293      	cmp	r3, r2
 800870e:	d013      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	4a1f      	ldr	r2, [pc, #124]	; (8008794 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8008716:	4293      	cmp	r3, r2
 8008718:	d00e      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	4a1e      	ldr	r2, [pc, #120]	; (8008798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8008720:	4293      	cmp	r3, r2
 8008722:	d009      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	4a1c      	ldr	r2, [pc, #112]	; (800879c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800872a:	4293      	cmp	r3, r2
 800872c:	d004      	beq.n	8008738 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4a1b      	ldr	r2, [pc, #108]	; (80087a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8008734:	4293      	cmp	r3, r2
 8008736:	d101      	bne.n	800873c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8008738:	2301      	movs	r3, #1
 800873a:	e000      	b.n	800873e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800873c:	2300      	movs	r3, #0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d00a      	beq.n	8008758 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8008742:	68fa      	ldr	r2, [r7, #12]
 8008744:	4b17      	ldr	r3, [pc, #92]	; (80087a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8008746:	4413      	add	r3, r2
 8008748:	009b      	lsls	r3, r3, #2
 800874a:	461a      	mov	r2, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	4a15      	ldr	r2, [pc, #84]	; (80087a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8008754:	671a      	str	r2, [r3, #112]	; 0x70
 8008756:	e009      	b.n	800876c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8008758:	68fa      	ldr	r2, [r7, #12]
 800875a:	4b14      	ldr	r3, [pc, #80]	; (80087ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800875c:	4413      	add	r3, r2
 800875e:	009b      	lsls	r3, r3, #2
 8008760:	461a      	mov	r2, r3
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a11      	ldr	r2, [pc, #68]	; (80087b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800876a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3b01      	subs	r3, #1
 8008770:	2201      	movs	r2, #1
 8008772:	409a      	lsls	r2, r3
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8008778:	bf00      	nop
 800877a:	3714      	adds	r7, #20
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr
 8008784:	58025408 	.word	0x58025408
 8008788:	5802541c 	.word	0x5802541c
 800878c:	58025430 	.word	0x58025430
 8008790:	58025444 	.word	0x58025444
 8008794:	58025458 	.word	0x58025458
 8008798:	5802546c 	.word	0x5802546c
 800879c:	58025480 	.word	0x58025480
 80087a0:	58025494 	.word	0x58025494
 80087a4:	1600963f 	.word	0x1600963f
 80087a8:	58025940 	.word	0x58025940
 80087ac:	1000823f 	.word	0x1000823f
 80087b0:	40020940 	.word	0x40020940

080087b4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d101      	bne.n	80087c6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80087c2:	2301      	movs	r3, #1
 80087c4:	e0cf      	b.n	8008966 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d106      	bne.n	80087de <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2223      	movs	r2, #35	; 0x23
 80087d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80087d8:	6878      	ldr	r0, [r7, #4]
 80087da:	f7fd f89f 	bl	800591c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80087de:	4b64      	ldr	r3, [pc, #400]	; (8008970 <HAL_ETH_Init+0x1bc>)
 80087e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087e4:	4a62      	ldr	r2, [pc, #392]	; (8008970 <HAL_ETH_Init+0x1bc>)
 80087e6:	f043 0302 	orr.w	r3, r3, #2
 80087ea:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80087ee:	4b60      	ldr	r3, [pc, #384]	; (8008970 <HAL_ETH_Init+0x1bc>)
 80087f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087f4:	f003 0302 	and.w	r3, r3, #2
 80087f8:	60bb      	str	r3, [r7, #8]
 80087fa:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	7a1b      	ldrb	r3, [r3, #8]
 8008800:	2b00      	cmp	r3, #0
 8008802:	d103      	bne.n	800880c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8008804:	2000      	movs	r0, #0
 8008806:	f7fd fc8b 	bl	8006120 <HAL_SYSCFG_ETHInterfaceSelect>
 800880a:	e003      	b.n	8008814 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800880c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8008810:	f7fd fc86 	bl	8006120 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8008814:	4b57      	ldr	r3, [pc, #348]	; (8008974 <HAL_ETH_Init+0x1c0>)
 8008816:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	6812      	ldr	r2, [r2, #0]
 8008826:	f043 0301 	orr.w	r3, r3, #1
 800882a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800882e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008830:	f7fd fc3a 	bl	80060a8 <HAL_GetTick>
 8008834:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8008836:	e011      	b.n	800885c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8008838:	f7fd fc36 	bl	80060a8 <HAL_GetTick>
 800883c:	4602      	mov	r2, r0
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	1ad3      	subs	r3, r2, r3
 8008842:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008846:	d909      	bls.n	800885c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2204      	movs	r2, #4
 800884c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	22e0      	movs	r2, #224	; 0xe0
 8008854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8008858:	2301      	movs	r3, #1
 800885a:	e084      	b.n	8008966 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0301 	and.w	r3, r3, #1
 800886a:	2b00      	cmp	r3, #0
 800886c:	d1e4      	bne.n	8008838 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f886 	bl	8008980 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8008874:	f001 fefc 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 8008878:	4603      	mov	r3, r0
 800887a:	4a3f      	ldr	r2, [pc, #252]	; (8008978 <HAL_ETH_Init+0x1c4>)
 800887c:	fba2 2303 	umull	r2, r3, r2, r3
 8008880:	0c9a      	lsrs	r2, r3, #18
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	3a01      	subs	r2, #1
 8008888:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800888c:	6878      	ldr	r0, [r7, #4]
 800888e:	f000 fa71 	bl	8008d74 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800889a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800889e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80088a2:	687a      	ldr	r2, [r7, #4]
 80088a4:	6812      	ldr	r2, [r2, #0]
 80088a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80088aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088ae:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	695b      	ldr	r3, [r3, #20]
 80088b6:	f003 0303 	and.w	r3, r3, #3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2201      	movs	r2, #1
 80088c2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	22e0      	movs	r2, #224	; 0xe0
 80088ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	e049      	b.n	8008966 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80088da:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80088de:	4b27      	ldr	r3, [pc, #156]	; (800897c <HAL_ETH_Init+0x1c8>)
 80088e0:	4013      	ands	r3, r2
 80088e2:	687a      	ldr	r2, [r7, #4]
 80088e4:	6952      	ldr	r2, [r2, #20]
 80088e6:	0051      	lsls	r1, r2, #1
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	6812      	ldr	r2, [r2, #0]
 80088ec:	430b      	orrs	r3, r1
 80088ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80088f2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80088f6:	6878      	ldr	r0, [r7, #4]
 80088f8:	f000 fad9 	bl	8008eae <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 fb1f 	bl	8008f40 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	685b      	ldr	r3, [r3, #4]
 8008906:	3305      	adds	r3, #5
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	021a      	lsls	r2, r3, #8
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	685b      	ldr	r3, [r3, #4]
 8008910:	3304      	adds	r3, #4
 8008912:	781b      	ldrb	r3, [r3, #0]
 8008914:	4619      	mov	r1, r3
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	430a      	orrs	r2, r1
 800891c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	3303      	adds	r3, #3
 8008926:	781b      	ldrb	r3, [r3, #0]
 8008928:	061a      	lsls	r2, r3, #24
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	685b      	ldr	r3, [r3, #4]
 800892e:	3302      	adds	r3, #2
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	041b      	lsls	r3, r3, #16
 8008934:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	685b      	ldr	r3, [r3, #4]
 800893a:	3301      	adds	r3, #1
 800893c:	781b      	ldrb	r3, [r3, #0]
 800893e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008940:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800894e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8008950:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	2210      	movs	r2, #16
 8008960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3710      	adds	r7, #16
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}
 800896e:	bf00      	nop
 8008970:	58024400 	.word	0x58024400
 8008974:	58000400 	.word	0x58000400
 8008978:	431bde83 	.word	0x431bde83
 800897c:	ffff8001 	.word	0xffff8001

08008980 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b084      	sub	sp, #16
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8008990:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008998:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800899a:	f001 fe69 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800899e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80089a0:	68bb      	ldr	r3, [r7, #8]
 80089a2:	4a1e      	ldr	r2, [pc, #120]	; (8008a1c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d908      	bls.n	80089ba <HAL_ETH_SetMDIOClockRange+0x3a>
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	4a1d      	ldr	r2, [pc, #116]	; (8008a20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d804      	bhi.n	80089ba <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80089b6:	60fb      	str	r3, [r7, #12]
 80089b8:	e027      	b.n	8008a0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	4a18      	ldr	r2, [pc, #96]	; (8008a20 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80089be:	4293      	cmp	r3, r2
 80089c0:	d908      	bls.n	80089d4 <HAL_ETH_SetMDIOClockRange+0x54>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	4a17      	ldr	r2, [pc, #92]	; (8008a24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d204      	bcs.n	80089d4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80089d0:	60fb      	str	r3, [r7, #12]
 80089d2:	e01a      	b.n	8008a0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	4a13      	ldr	r2, [pc, #76]	; (8008a24 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d303      	bcc.n	80089e4 <HAL_ETH_SetMDIOClockRange+0x64>
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	4a12      	ldr	r2, [pc, #72]	; (8008a28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d911      	bls.n	8008a08 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80089e4:	68bb      	ldr	r3, [r7, #8]
 80089e6:	4a10      	ldr	r2, [pc, #64]	; (8008a28 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80089e8:	4293      	cmp	r3, r2
 80089ea:	d908      	bls.n	80089fe <HAL_ETH_SetMDIOClockRange+0x7e>
 80089ec:	68bb      	ldr	r3, [r7, #8]
 80089ee:	4a0f      	ldr	r2, [pc, #60]	; (8008a2c <HAL_ETH_SetMDIOClockRange+0xac>)
 80089f0:	4293      	cmp	r3, r2
 80089f2:	d804      	bhi.n	80089fe <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089fa:	60fb      	str	r3, [r7, #12]
 80089fc:	e005      	b.n	8008a0a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e000      	b.n	8008a0a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8008a08:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	68fa      	ldr	r2, [r7, #12]
 8008a10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8008a14:	bf00      	nop
 8008a16:	3710      	adds	r7, #16
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	01312cff 	.word	0x01312cff
 8008a20:	02160ebf 	.word	0x02160ebf
 8008a24:	03938700 	.word	0x03938700
 8008a28:	05f5e0ff 	.word	0x05f5e0ff
 8008a2c:	08f0d17f 	.word	0x08f0d17f

08008a30 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8008a30:	b480      	push	{r7}
 8008a32:	b085      	sub	sp, #20
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8008a3e:	683b      	ldr	r3, [r7, #0]
 8008a40:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8008a42:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8008a4a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008a4c:	683b      	ldr	r3, [r7, #0]
 8008a4e:	7b1b      	ldrb	r3, [r3, #12]
 8008a50:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8008a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	7b5b      	ldrb	r3, [r3, #13]
 8008a58:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8008a5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	7b9b      	ldrb	r3, [r3, #14]
 8008a60:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8008a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	7bdb      	ldrb	r3, [r3, #15]
 8008a68:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8008a6a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	7c12      	ldrb	r2, [r2, #16]
 8008a70:	2a00      	cmp	r2, #0
 8008a72:	d102      	bne.n	8008a7a <ETH_SetMACConfig+0x4a>
 8008a74:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8008a78:	e000      	b.n	8008a7c <ETH_SetMACConfig+0x4c>
 8008a7a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8008a7c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008a7e:	683a      	ldr	r2, [r7, #0]
 8008a80:	7c52      	ldrb	r2, [r2, #17]
 8008a82:	2a00      	cmp	r2, #0
 8008a84:	d102      	bne.n	8008a8c <ETH_SetMACConfig+0x5c>
 8008a86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008a8a:	e000      	b.n	8008a8e <ETH_SetMACConfig+0x5e>
 8008a8c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8008a8e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	7c9b      	ldrb	r3, [r3, #18]
 8008a94:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8008a96:	431a      	orrs	r2, r3
               macconf->Speed |
 8008a98:	683b      	ldr	r3, [r7, #0]
 8008a9a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8008a9c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8008aa2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8008aa4:	683b      	ldr	r3, [r7, #0]
 8008aa6:	7f1b      	ldrb	r3, [r3, #28]
 8008aa8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8008aaa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	7f5b      	ldrb	r3, [r3, #29]
 8008ab0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8008ab2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008ab4:	683a      	ldr	r2, [r7, #0]
 8008ab6:	7f92      	ldrb	r2, [r2, #30]
 8008ab8:	2a00      	cmp	r2, #0
 8008aba:	d102      	bne.n	8008ac2 <ETH_SetMACConfig+0x92>
 8008abc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008ac0:	e000      	b.n	8008ac4 <ETH_SetMACConfig+0x94>
 8008ac2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8008ac4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	7fdb      	ldrb	r3, [r3, #31]
 8008aca:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8008acc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8008ace:	683a      	ldr	r2, [r7, #0]
 8008ad0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8008ad4:	2a00      	cmp	r2, #0
 8008ad6:	d102      	bne.n	8008ade <ETH_SetMACConfig+0xae>
 8008ad8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008adc:	e000      	b.n	8008ae0 <ETH_SetMACConfig+0xb0>
 8008ade:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8008ae0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8008ae6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8008ae8:	683b      	ldr	r3, [r7, #0]
 8008aea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008aee:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8008af0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8008af6:	4313      	orrs	r3, r2
 8008af8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681a      	ldr	r2, [r3, #0]
 8008b00:	4b56      	ldr	r3, [pc, #344]	; (8008c5c <ETH_SetMACConfig+0x22c>)
 8008b02:	4013      	ands	r3, r2
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6812      	ldr	r2, [r2, #0]
 8008b08:	68f9      	ldr	r1, [r7, #12]
 8008b0a:	430b      	orrs	r3, r1
 8008b0c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008b0e:	683b      	ldr	r3, [r7, #0]
 8008b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b12:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b1a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008b1c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008b24:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8008b26:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8008b2e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8008b30:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8008b32:	683a      	ldr	r2, [r7, #0]
 8008b34:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8008b38:	2a00      	cmp	r2, #0
 8008b3a:	d102      	bne.n	8008b42 <ETH_SetMACConfig+0x112>
 8008b3c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8008b40:	e000      	b.n	8008b44 <ETH_SetMACConfig+0x114>
 8008b42:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8008b44:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8008b46:	683b      	ldr	r3, [r7, #0]
 8008b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	685a      	ldr	r2, [r3, #4]
 8008b54:	4b42      	ldr	r3, [pc, #264]	; (8008c60 <ETH_SetMACConfig+0x230>)
 8008b56:	4013      	ands	r3, r2
 8008b58:	687a      	ldr	r2, [r7, #4]
 8008b5a:	6812      	ldr	r2, [r2, #0]
 8008b5c:	68f9      	ldr	r1, [r7, #12]
 8008b5e:	430b      	orrs	r3, r1
 8008b60:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b68:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	4b3a      	ldr	r3, [pc, #232]	; (8008c64 <ETH_SetMACConfig+0x234>)
 8008b7a:	4013      	ands	r3, r2
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6812      	ldr	r2, [r2, #0]
 8008b80:	68f9      	ldr	r1, [r7, #12]
 8008b82:	430b      	orrs	r3, r1
 8008b84:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8008b8c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008b92:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8008b94:	683a      	ldr	r2, [r7, #0]
 8008b96:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8008b9a:	2a00      	cmp	r2, #0
 8008b9c:	d101      	bne.n	8008ba2 <ETH_SetMACConfig+0x172>
 8008b9e:	2280      	movs	r2, #128	; 0x80
 8008ba0:	e000      	b.n	8008ba4 <ETH_SetMACConfig+0x174>
 8008ba2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8008ba4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008baa:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8008bac:	4313      	orrs	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008bb6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8008bba:	4013      	ands	r3, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6812      	ldr	r2, [r2, #0]
 8008bc0:	68f9      	ldr	r1, [r7, #12]
 8008bc2:	430b      	orrs	r3, r1
 8008bc4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8008bcc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8008bd4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8008bd6:	4313      	orrs	r3, r2
 8008bd8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008be2:	f023 0103 	bic.w	r1, r3, #3
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	68fa      	ldr	r2, [r7, #12]
 8008bec:	430a      	orrs	r2, r1
 8008bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8008bfa:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8008bfe:	683b      	ldr	r3, [r7, #0]
 8008c00:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	430a      	orrs	r2, r1
 8008c08:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8008c16:	2a00      	cmp	r2, #0
 8008c18:	d101      	bne.n	8008c1e <ETH_SetMACConfig+0x1ee>
 8008c1a:	2240      	movs	r2, #64	; 0x40
 8008c1c:	e000      	b.n	8008c20 <ETH_SetMACConfig+0x1f0>
 8008c1e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8008c20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8008c28:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8008c2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8008c32:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8008c34:	4313      	orrs	r3, r2
 8008c36:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8008c40:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	68fa      	ldr	r2, [r7, #12]
 8008c4a:	430a      	orrs	r2, r1
 8008c4c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8008c50:	bf00      	nop
 8008c52:	3714      	adds	r7, #20
 8008c54:	46bd      	mov	sp, r7
 8008c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5a:	4770      	bx	lr
 8008c5c:	00048083 	.word	0x00048083
 8008c60:	c0f88000 	.word	0xc0f88000
 8008c64:	fffffef0 	.word	0xfffffef0

08008c68 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	b085      	sub	sp, #20
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008c7a:	681a      	ldr	r2, [r3, #0]
 8008c7c:	4b38      	ldr	r3, [pc, #224]	; (8008d60 <ETH_SetDMAConfig+0xf8>)
 8008c7e:	4013      	ands	r3, r2
 8008c80:	683a      	ldr	r2, [r7, #0]
 8008c82:	6811      	ldr	r1, [r2, #0]
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	6812      	ldr	r2, [r2, #0]
 8008c88:	430b      	orrs	r3, r1
 8008c8a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008c8e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008c90:	683b      	ldr	r3, [r7, #0]
 8008c92:	791b      	ldrb	r3, [r3, #4]
 8008c94:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008c9a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	7b1b      	ldrb	r3, [r3, #12]
 8008ca0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8008ca2:	4313      	orrs	r3, r2
 8008ca4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	4b2c      	ldr	r3, [pc, #176]	; (8008d64 <ETH_SetDMAConfig+0xfc>)
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	6812      	ldr	r2, [r2, #0]
 8008cb8:	68f9      	ldr	r1, [r7, #12]
 8008cba:	430b      	orrs	r3, r1
 8008cbc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cc0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	7b5b      	ldrb	r3, [r3, #13]
 8008cc6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8008cc8:	683b      	ldr	r3, [r7, #0]
 8008cca:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008cd8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8008cdc:	4b22      	ldr	r3, [pc, #136]	; (8008d68 <ETH_SetDMAConfig+0x100>)
 8008cde:	4013      	ands	r3, r2
 8008ce0:	687a      	ldr	r2, [r7, #4]
 8008ce2:	6812      	ldr	r2, [r2, #0]
 8008ce4:	68f9      	ldr	r1, [r7, #12]
 8008ce6:	430b      	orrs	r3, r1
 8008ce8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008cec:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8008cf0:	683b      	ldr	r3, [r7, #0]
 8008cf2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	7d1b      	ldrb	r3, [r3, #20]
 8008cf8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8008cfa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8008cfc:	683b      	ldr	r3, [r7, #0]
 8008cfe:	7f5b      	ldrb	r3, [r3, #29]
 8008d00:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8008d02:	4313      	orrs	r3, r2
 8008d04:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d0e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8008d12:	4b16      	ldr	r3, [pc, #88]	; (8008d6c <ETH_SetDMAConfig+0x104>)
 8008d14:	4013      	ands	r3, r2
 8008d16:	687a      	ldr	r2, [r7, #4]
 8008d18:	6812      	ldr	r2, [r2, #0]
 8008d1a:	68f9      	ldr	r1, [r7, #12]
 8008d1c:	430b      	orrs	r3, r1
 8008d1e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d22:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	7f1b      	ldrb	r3, [r3, #28]
 8008d2a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8008d30:	4313      	orrs	r3, r2
 8008d32:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008d3c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8008d40:	4b0b      	ldr	r3, [pc, #44]	; (8008d70 <ETH_SetDMAConfig+0x108>)
 8008d42:	4013      	ands	r3, r2
 8008d44:	687a      	ldr	r2, [r7, #4]
 8008d46:	6812      	ldr	r2, [r2, #0]
 8008d48:	68f9      	ldr	r1, [r7, #12]
 8008d4a:	430b      	orrs	r3, r1
 8008d4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8008d50:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8008d54:	bf00      	nop
 8008d56:	3714      	adds	r7, #20
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5e:	4770      	bx	lr
 8008d60:	ffff87fd 	.word	0xffff87fd
 8008d64:	ffff2ffe 	.word	0xffff2ffe
 8008d68:	fffec000 	.word	0xfffec000
 8008d6c:	ffc0efef 	.word	0xffc0efef
 8008d70:	7fc0ffff 	.word	0x7fc0ffff

08008d74 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	b0a4      	sub	sp, #144	; 0x90
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8008d82:	2300      	movs	r3, #0
 8008d84:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8008d86:	2300      	movs	r3, #0
 8008d88:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8008d92:	2301      	movs	r3, #1
 8008d94:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8008da4:	2300      	movs	r3, #0
 8008da6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8008daa:	2301      	movs	r3, #1
 8008dac:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8008db0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008db4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8008db6:	2300      	movs	r3, #0
 8008db8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8008dcc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8008dd0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8008dd8:	2300      	movs	r3, #0
 8008dda:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8008de2:	2300      	movs	r3, #0
 8008de4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8008de8:	2300      	movs	r3, #0
 8008dea:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8008dee:	2300      	movs	r3, #0
 8008df0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8008df6:	2300      	movs	r3, #0
 8008df8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8008e00:	2300      	movs	r3, #0
 8008e02:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8008e06:	2301      	movs	r3, #1
 8008e08:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8008e0c:	2320      	movs	r3, #32
 8008e0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8008e12:	2301      	movs	r3, #1
 8008e14:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8008e1e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8008e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8008e24:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008e28:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8008e30:	2302      	movs	r3, #2
 8008e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8008e36:	2300      	movs	r3, #0
 8008e38:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8008e42:	2300      	movs	r3, #0
 8008e44:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8008e48:	2301      	movs	r3, #1
 8008e4a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8008e52:	2301      	movs	r3, #1
 8008e54:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8008e58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008e5c:	4619      	mov	r1, r3
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f7ff fde6 	bl	8008a30 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8008e64:	2301      	movs	r3, #1
 8008e66:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8008e70:	2300      	movs	r3, #0
 8008e72:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8008e76:	2300      	movs	r3, #0
 8008e78:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8008e7e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e82:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8008e84:	2300      	movs	r3, #0
 8008e86:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8008e88:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008e8c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8008e94:	f44f 7306 	mov.w	r3, #536	; 0x218
 8008e98:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8008e9a:	f107 0308 	add.w	r3, r7, #8
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f7ff fee1 	bl	8008c68 <ETH_SetDMAConfig>
}
 8008ea6:	bf00      	nop
 8008ea8:	3790      	adds	r7, #144	; 0x90
 8008eaa:	46bd      	mov	sp, r7
 8008eac:	bd80      	pop	{r7, pc}

08008eae <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8008eae:	b480      	push	{r7}
 8008eb0:	b085      	sub	sp, #20
 8008eb2:	af00      	add	r7, sp, #0
 8008eb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008eb6:	2300      	movs	r3, #0
 8008eb8:	60fb      	str	r3, [r7, #12]
 8008eba:	e01d      	b.n	8008ef8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	68d9      	ldr	r1, [r3, #12]
 8008ec0:	68fa      	ldr	r2, [r7, #12]
 8008ec2:	4613      	mov	r3, r2
 8008ec4:	005b      	lsls	r3, r3, #1
 8008ec6:	4413      	add	r3, r2
 8008ec8:	00db      	lsls	r3, r3, #3
 8008eca:	440b      	add	r3, r1
 8008ecc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	2200      	movs	r2, #0
 8008ed8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2200      	movs	r2, #0
 8008ede:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8008ee6:	68b9      	ldr	r1, [r7, #8]
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	3206      	adds	r2, #6
 8008eee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3301      	adds	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b03      	cmp	r3, #3
 8008efc:	d9de      	bls.n	8008ebc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2200      	movs	r2, #0
 8008f02:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f0c:	461a      	mov	r2, r3
 8008f0e:	2303      	movs	r3, #3
 8008f10:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f20:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	68da      	ldr	r2, [r3, #12]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008f30:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8008f34:	bf00      	nop
 8008f36:	3714      	adds	r7, #20
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f3e:	4770      	bx	lr

08008f40 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8008f40:	b480      	push	{r7}
 8008f42:	b085      	sub	sp, #20
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008f48:	2300      	movs	r3, #0
 8008f4a:	60fb      	str	r3, [r7, #12]
 8008f4c:	e023      	b.n	8008f96 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6919      	ldr	r1, [r3, #16]
 8008f52:	68fa      	ldr	r2, [r7, #12]
 8008f54:	4613      	mov	r3, r2
 8008f56:	005b      	lsls	r3, r3, #1
 8008f58:	4413      	add	r3, r2
 8008f5a:	00db      	lsls	r3, r3, #3
 8008f5c:	440b      	add	r3, r1
 8008f5e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8008f60:	68bb      	ldr	r3, [r7, #8]
 8008f62:	2200      	movs	r2, #0
 8008f64:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	2200      	movs	r2, #0
 8008f76:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	2200      	movs	r2, #0
 8008f82:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8008f84:	68b9      	ldr	r1, [r7, #8]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68fa      	ldr	r2, [r7, #12]
 8008f8a:	3212      	adds	r2, #18
 8008f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	3301      	adds	r3, #1
 8008f94:	60fb      	str	r3, [r7, #12]
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2b03      	cmp	r3, #3
 8008f9a:	d9d8      	bls.n	8008f4e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2200      	movs	r2, #0
 8008fac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fc2:	461a      	mov	r2, r3
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	691a      	ldr	r2, [r3, #16]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fd6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	691b      	ldr	r3, [r3, #16]
 8008fde:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008fea:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8008fee:	bf00      	nop
 8008ff0:	3714      	adds	r7, #20
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr
	...

08008ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b089      	sub	sp, #36	; 0x24
 8009000:	af00      	add	r7, sp, #0
 8009002:	6078      	str	r0, [r7, #4]
 8009004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009006:	2300      	movs	r3, #0
 8009008:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800900a:	4b89      	ldr	r3, [pc, #548]	; (8009230 <HAL_GPIO_Init+0x234>)
 800900c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800900e:	e194      	b.n	800933a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	681a      	ldr	r2, [r3, #0]
 8009014:	2101      	movs	r1, #1
 8009016:	69fb      	ldr	r3, [r7, #28]
 8009018:	fa01 f303 	lsl.w	r3, r1, r3
 800901c:	4013      	ands	r3, r2
 800901e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 8186 	beq.w	8009334 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009028:	683b      	ldr	r3, [r7, #0]
 800902a:	685b      	ldr	r3, [r3, #4]
 800902c:	f003 0303 	and.w	r3, r3, #3
 8009030:	2b01      	cmp	r3, #1
 8009032:	d005      	beq.n	8009040 <HAL_GPIO_Init+0x44>
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685b      	ldr	r3, [r3, #4]
 8009038:	f003 0303 	and.w	r3, r3, #3
 800903c:	2b02      	cmp	r3, #2
 800903e:	d130      	bne.n	80090a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	689b      	ldr	r3, [r3, #8]
 8009044:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009046:	69fb      	ldr	r3, [r7, #28]
 8009048:	005b      	lsls	r3, r3, #1
 800904a:	2203      	movs	r2, #3
 800904c:	fa02 f303 	lsl.w	r3, r2, r3
 8009050:	43db      	mvns	r3, r3
 8009052:	69ba      	ldr	r2, [r7, #24]
 8009054:	4013      	ands	r3, r2
 8009056:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	68da      	ldr	r2, [r3, #12]
 800905c:	69fb      	ldr	r3, [r7, #28]
 800905e:	005b      	lsls	r3, r3, #1
 8009060:	fa02 f303 	lsl.w	r3, r2, r3
 8009064:	69ba      	ldr	r2, [r7, #24]
 8009066:	4313      	orrs	r3, r2
 8009068:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	69ba      	ldr	r2, [r7, #24]
 800906e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	685b      	ldr	r3, [r3, #4]
 8009074:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8009076:	2201      	movs	r2, #1
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	fa02 f303 	lsl.w	r3, r2, r3
 800907e:	43db      	mvns	r3, r3
 8009080:	69ba      	ldr	r2, [r7, #24]
 8009082:	4013      	ands	r3, r2
 8009084:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009086:	683b      	ldr	r3, [r7, #0]
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	091b      	lsrs	r3, r3, #4
 800908c:	f003 0201 	and.w	r2, r3, #1
 8009090:	69fb      	ldr	r3, [r7, #28]
 8009092:	fa02 f303 	lsl.w	r3, r2, r3
 8009096:	69ba      	ldr	r2, [r7, #24]
 8009098:	4313      	orrs	r3, r2
 800909a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	69ba      	ldr	r2, [r7, #24]
 80090a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f003 0303 	and.w	r3, r3, #3
 80090aa:	2b03      	cmp	r3, #3
 80090ac:	d017      	beq.n	80090de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	68db      	ldr	r3, [r3, #12]
 80090b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	005b      	lsls	r3, r3, #1
 80090b8:	2203      	movs	r2, #3
 80090ba:	fa02 f303 	lsl.w	r3, r2, r3
 80090be:	43db      	mvns	r3, r3
 80090c0:	69ba      	ldr	r2, [r7, #24]
 80090c2:	4013      	ands	r3, r2
 80090c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	689a      	ldr	r2, [r3, #8]
 80090ca:	69fb      	ldr	r3, [r7, #28]
 80090cc:	005b      	lsls	r3, r3, #1
 80090ce:	fa02 f303 	lsl.w	r3, r2, r3
 80090d2:	69ba      	ldr	r2, [r7, #24]
 80090d4:	4313      	orrs	r3, r2
 80090d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	69ba      	ldr	r2, [r7, #24]
 80090dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	f003 0303 	and.w	r3, r3, #3
 80090e6:	2b02      	cmp	r3, #2
 80090e8:	d123      	bne.n	8009132 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	08da      	lsrs	r2, r3, #3
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	3208      	adds	r2, #8
 80090f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80090f8:	69fb      	ldr	r3, [r7, #28]
 80090fa:	f003 0307 	and.w	r3, r3, #7
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	220f      	movs	r2, #15
 8009102:	fa02 f303 	lsl.w	r3, r2, r3
 8009106:	43db      	mvns	r3, r3
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	4013      	ands	r3, r2
 800910c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	691a      	ldr	r2, [r3, #16]
 8009112:	69fb      	ldr	r3, [r7, #28]
 8009114:	f003 0307 	and.w	r3, r3, #7
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	fa02 f303 	lsl.w	r3, r2, r3
 800911e:	69ba      	ldr	r2, [r7, #24]
 8009120:	4313      	orrs	r3, r2
 8009122:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8009124:	69fb      	ldr	r3, [r7, #28]
 8009126:	08da      	lsrs	r2, r3, #3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	3208      	adds	r2, #8
 800912c:	69b9      	ldr	r1, [r7, #24]
 800912e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8009138:	69fb      	ldr	r3, [r7, #28]
 800913a:	005b      	lsls	r3, r3, #1
 800913c:	2203      	movs	r2, #3
 800913e:	fa02 f303 	lsl.w	r3, r2, r3
 8009142:	43db      	mvns	r3, r3
 8009144:	69ba      	ldr	r2, [r7, #24]
 8009146:	4013      	ands	r3, r2
 8009148:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	f003 0203 	and.w	r2, r3, #3
 8009152:	69fb      	ldr	r3, [r7, #28]
 8009154:	005b      	lsls	r3, r3, #1
 8009156:	fa02 f303 	lsl.w	r3, r2, r3
 800915a:	69ba      	ldr	r2, [r7, #24]
 800915c:	4313      	orrs	r3, r2
 800915e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	69ba      	ldr	r2, [r7, #24]
 8009164:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800916e:	2b00      	cmp	r3, #0
 8009170:	f000 80e0 	beq.w	8009334 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009174:	4b2f      	ldr	r3, [pc, #188]	; (8009234 <HAL_GPIO_Init+0x238>)
 8009176:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800917a:	4a2e      	ldr	r2, [pc, #184]	; (8009234 <HAL_GPIO_Init+0x238>)
 800917c:	f043 0302 	orr.w	r3, r3, #2
 8009180:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8009184:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <HAL_GPIO_Init+0x238>)
 8009186:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800918a:	f003 0302 	and.w	r3, r3, #2
 800918e:	60fb      	str	r3, [r7, #12]
 8009190:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009192:	4a29      	ldr	r2, [pc, #164]	; (8009238 <HAL_GPIO_Init+0x23c>)
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	089b      	lsrs	r3, r3, #2
 8009198:	3302      	adds	r3, #2
 800919a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800919e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80091a0:	69fb      	ldr	r3, [r7, #28]
 80091a2:	f003 0303 	and.w	r3, r3, #3
 80091a6:	009b      	lsls	r3, r3, #2
 80091a8:	220f      	movs	r2, #15
 80091aa:	fa02 f303 	lsl.w	r3, r2, r3
 80091ae:	43db      	mvns	r3, r3
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	4013      	ands	r3, r2
 80091b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	4a20      	ldr	r2, [pc, #128]	; (800923c <HAL_GPIO_Init+0x240>)
 80091ba:	4293      	cmp	r3, r2
 80091bc:	d052      	beq.n	8009264 <HAL_GPIO_Init+0x268>
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	4a1f      	ldr	r2, [pc, #124]	; (8009240 <HAL_GPIO_Init+0x244>)
 80091c2:	4293      	cmp	r3, r2
 80091c4:	d031      	beq.n	800922a <HAL_GPIO_Init+0x22e>
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	4a1e      	ldr	r2, [pc, #120]	; (8009244 <HAL_GPIO_Init+0x248>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d02b      	beq.n	8009226 <HAL_GPIO_Init+0x22a>
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	4a1d      	ldr	r2, [pc, #116]	; (8009248 <HAL_GPIO_Init+0x24c>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d025      	beq.n	8009222 <HAL_GPIO_Init+0x226>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	4a1c      	ldr	r2, [pc, #112]	; (800924c <HAL_GPIO_Init+0x250>)
 80091da:	4293      	cmp	r3, r2
 80091dc:	d01f      	beq.n	800921e <HAL_GPIO_Init+0x222>
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	4a1b      	ldr	r2, [pc, #108]	; (8009250 <HAL_GPIO_Init+0x254>)
 80091e2:	4293      	cmp	r3, r2
 80091e4:	d019      	beq.n	800921a <HAL_GPIO_Init+0x21e>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	4a1a      	ldr	r2, [pc, #104]	; (8009254 <HAL_GPIO_Init+0x258>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	d013      	beq.n	8009216 <HAL_GPIO_Init+0x21a>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	4a19      	ldr	r2, [pc, #100]	; (8009258 <HAL_GPIO_Init+0x25c>)
 80091f2:	4293      	cmp	r3, r2
 80091f4:	d00d      	beq.n	8009212 <HAL_GPIO_Init+0x216>
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	4a18      	ldr	r2, [pc, #96]	; (800925c <HAL_GPIO_Init+0x260>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d007      	beq.n	800920e <HAL_GPIO_Init+0x212>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	4a17      	ldr	r2, [pc, #92]	; (8009260 <HAL_GPIO_Init+0x264>)
 8009202:	4293      	cmp	r3, r2
 8009204:	d101      	bne.n	800920a <HAL_GPIO_Init+0x20e>
 8009206:	2309      	movs	r3, #9
 8009208:	e02d      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800920a:	230a      	movs	r3, #10
 800920c:	e02b      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800920e:	2308      	movs	r3, #8
 8009210:	e029      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009212:	2307      	movs	r3, #7
 8009214:	e027      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009216:	2306      	movs	r3, #6
 8009218:	e025      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800921a:	2305      	movs	r3, #5
 800921c:	e023      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800921e:	2304      	movs	r3, #4
 8009220:	e021      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009222:	2303      	movs	r3, #3
 8009224:	e01f      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 8009226:	2302      	movs	r3, #2
 8009228:	e01d      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800922a:	2301      	movs	r3, #1
 800922c:	e01b      	b.n	8009266 <HAL_GPIO_Init+0x26a>
 800922e:	bf00      	nop
 8009230:	58000080 	.word	0x58000080
 8009234:	58024400 	.word	0x58024400
 8009238:	58000400 	.word	0x58000400
 800923c:	58020000 	.word	0x58020000
 8009240:	58020400 	.word	0x58020400
 8009244:	58020800 	.word	0x58020800
 8009248:	58020c00 	.word	0x58020c00
 800924c:	58021000 	.word	0x58021000
 8009250:	58021400 	.word	0x58021400
 8009254:	58021800 	.word	0x58021800
 8009258:	58021c00 	.word	0x58021c00
 800925c:	58022000 	.word	0x58022000
 8009260:	58022400 	.word	0x58022400
 8009264:	2300      	movs	r3, #0
 8009266:	69fa      	ldr	r2, [r7, #28]
 8009268:	f002 0203 	and.w	r2, r2, #3
 800926c:	0092      	lsls	r2, r2, #2
 800926e:	4093      	lsls	r3, r2
 8009270:	69ba      	ldr	r2, [r7, #24]
 8009272:	4313      	orrs	r3, r2
 8009274:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009276:	4938      	ldr	r1, [pc, #224]	; (8009358 <HAL_GPIO_Init+0x35c>)
 8009278:	69fb      	ldr	r3, [r7, #28]
 800927a:	089b      	lsrs	r3, r3, #2
 800927c:	3302      	adds	r3, #2
 800927e:	69ba      	ldr	r2, [r7, #24]
 8009280:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8009284:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	43db      	mvns	r3, r3
 8009290:	69ba      	ldr	r2, [r7, #24]
 8009292:	4013      	ands	r3, r2
 8009294:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8009296:	683b      	ldr	r3, [r7, #0]
 8009298:	685b      	ldr	r3, [r3, #4]
 800929a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d003      	beq.n	80092aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	4313      	orrs	r3, r2
 80092a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80092aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092ae:	69bb      	ldr	r3, [r7, #24]
 80092b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80092b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80092b6:	685b      	ldr	r3, [r3, #4]
 80092b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	43db      	mvns	r3, r3
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	4013      	ands	r3, r2
 80092c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80092c4:	683b      	ldr	r3, [r7, #0]
 80092c6:	685b      	ldr	r3, [r3, #4]
 80092c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d003      	beq.n	80092d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80092d0:	69ba      	ldr	r2, [r7, #24]
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	4313      	orrs	r3, r2
 80092d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80092d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80092dc:	69bb      	ldr	r3, [r7, #24]
 80092de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	43db      	mvns	r3, r3
 80092ea:	69ba      	ldr	r2, [r7, #24]
 80092ec:	4013      	ands	r3, r2
 80092ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80092f0:	683b      	ldr	r3, [r7, #0]
 80092f2:	685b      	ldr	r3, [r3, #4]
 80092f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d003      	beq.n	8009304 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80092fc:	69ba      	ldr	r2, [r7, #24]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	4313      	orrs	r3, r2
 8009302:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8009304:	697b      	ldr	r3, [r7, #20]
 8009306:	69ba      	ldr	r2, [r7, #24]
 8009308:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	43db      	mvns	r3, r3
 8009314:	69ba      	ldr	r2, [r7, #24]
 8009316:	4013      	ands	r3, r2
 8009318:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800931a:	683b      	ldr	r3, [r7, #0]
 800931c:	685b      	ldr	r3, [r3, #4]
 800931e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d003      	beq.n	800932e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8009326:	69ba      	ldr	r2, [r7, #24]
 8009328:	693b      	ldr	r3, [r7, #16]
 800932a:	4313      	orrs	r3, r2
 800932c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800932e:	697b      	ldr	r3, [r7, #20]
 8009330:	69ba      	ldr	r2, [r7, #24]
 8009332:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3301      	adds	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	69fb      	ldr	r3, [r7, #28]
 8009340:	fa22 f303 	lsr.w	r3, r2, r3
 8009344:	2b00      	cmp	r3, #0
 8009346:	f47f ae63 	bne.w	8009010 <HAL_GPIO_Init+0x14>
  }
}
 800934a:	bf00      	nop
 800934c:	bf00      	nop
 800934e:	3724      	adds	r7, #36	; 0x24
 8009350:	46bd      	mov	sp, r7
 8009352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009356:	4770      	bx	lr
 8009358:	58000400 	.word	0x58000400

0800935c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800935c:	b480      	push	{r7}
 800935e:	b085      	sub	sp, #20
 8009360:	af00      	add	r7, sp, #0
 8009362:	6078      	str	r0, [r7, #4]
 8009364:	460b      	mov	r3, r1
 8009366:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	691a      	ldr	r2, [r3, #16]
 800936c:	887b      	ldrh	r3, [r7, #2]
 800936e:	4013      	ands	r3, r2
 8009370:	2b00      	cmp	r3, #0
 8009372:	d002      	beq.n	800937a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009374:	2301      	movs	r3, #1
 8009376:	73fb      	strb	r3, [r7, #15]
 8009378:	e001      	b.n	800937e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800937a:	2300      	movs	r3, #0
 800937c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800937e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009380:	4618      	mov	r0, r3
 8009382:	3714      	adds	r7, #20
 8009384:	46bd      	mov	sp, r7
 8009386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938a:	4770      	bx	lr

0800938c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800938c:	b480      	push	{r7}
 800938e:	b083      	sub	sp, #12
 8009390:	af00      	add	r7, sp, #0
 8009392:	6078      	str	r0, [r7, #4]
 8009394:	460b      	mov	r3, r1
 8009396:	807b      	strh	r3, [r7, #2]
 8009398:	4613      	mov	r3, r2
 800939a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800939c:	787b      	ldrb	r3, [r7, #1]
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d003      	beq.n	80093aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80093a2:	887a      	ldrh	r2, [r7, #2]
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80093a8:	e003      	b.n	80093b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80093aa:	887b      	ldrh	r3, [r7, #2]
 80093ac:	041a      	lsls	r2, r3, #16
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	619a      	str	r2, [r3, #24]
}
 80093b2:	bf00      	nop
 80093b4:	370c      	adds	r7, #12
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr

080093be <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80093be:	b480      	push	{r7}
 80093c0:	b085      	sub	sp, #20
 80093c2:	af00      	add	r7, sp, #0
 80093c4:	6078      	str	r0, [r7, #4]
 80093c6:	460b      	mov	r3, r1
 80093c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80093d0:	887a      	ldrh	r2, [r7, #2]
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	4013      	ands	r3, r2
 80093d6:	041a      	lsls	r2, r3, #16
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	43d9      	mvns	r1, r3
 80093dc:	887b      	ldrh	r3, [r7, #2]
 80093de:	400b      	ands	r3, r1
 80093e0:	431a      	orrs	r2, r3
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	619a      	str	r2, [r3, #24]
}
 80093e6:	bf00      	nop
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr
	...

080093f4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80093f4:	b480      	push	{r7}
 80093f6:	b083      	sub	sp, #12
 80093f8:	af00      	add	r7, sp, #0
 80093fa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80093fc:	4a08      	ldr	r2, [pc, #32]	; (8009420 <HAL_HSEM_FastTake+0x2c>)
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3320      	adds	r3, #32
 8009402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009406:	4a07      	ldr	r2, [pc, #28]	; (8009424 <HAL_HSEM_FastTake+0x30>)
 8009408:	4293      	cmp	r3, r2
 800940a:	d101      	bne.n	8009410 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800940c:	2300      	movs	r3, #0
 800940e:	e000      	b.n	8009412 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
}
 8009412:	4618      	mov	r0, r3
 8009414:	370c      	adds	r7, #12
 8009416:	46bd      	mov	sp, r7
 8009418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941c:	4770      	bx	lr
 800941e:	bf00      	nop
 8009420:	58026400 	.word	0x58026400
 8009424:	80000300 	.word	0x80000300

08009428 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8009428:	b480      	push	{r7}
 800942a:	b083      	sub	sp, #12
 800942c:	af00      	add	r7, sp, #0
 800942e:	6078      	str	r0, [r7, #4]
 8009430:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8009432:	4906      	ldr	r1, [pc, #24]	; (800944c <HAL_HSEM_Release+0x24>)
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	58026400 	.word	0x58026400

08009450 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8009450:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009452:	b08f      	sub	sp, #60	; 0x3c
 8009454:	af0a      	add	r7, sp, #40	; 0x28
 8009456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	2b00      	cmp	r3, #0
 800945c:	d101      	bne.n	8009462 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800945e:	2301      	movs	r3, #1
 8009460:	e116      	b.n	8009690 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800946e:	b2db      	uxtb	r3, r3
 8009470:	2b00      	cmp	r3, #0
 8009472:	d106      	bne.n	8009482 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	2200      	movs	r2, #0
 8009478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800947c:	6878      	ldr	r0, [r7, #4]
 800947e:	f7fc fc81 	bl	8005d84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2203      	movs	r2, #3
 8009486:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800948e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009492:	2b00      	cmp	r3, #0
 8009494:	d102      	bne.n	800949c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2200      	movs	r2, #0
 800949a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4618      	mov	r0, r3
 80094a2:	f005 f977 	bl	800e794 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	603b      	str	r3, [r7, #0]
 80094ac:	687e      	ldr	r6, [r7, #4]
 80094ae:	466d      	mov	r5, sp
 80094b0:	f106 0410 	add.w	r4, r6, #16
 80094b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80094ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80094bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80094c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80094c4:	1d33      	adds	r3, r6, #4
 80094c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80094c8:	6838      	ldr	r0, [r7, #0]
 80094ca:	f005 f8f5 	bl	800e6b8 <USB_CoreInit>
 80094ce:	4603      	mov	r3, r0
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d005      	beq.n	80094e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2202      	movs	r2, #2
 80094d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80094dc:	2301      	movs	r3, #1
 80094de:	e0d7      	b.n	8009690 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2100      	movs	r1, #0
 80094e6:	4618      	mov	r0, r3
 80094e8:	f005 f965 	bl	800e7b6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80094ec:	2300      	movs	r3, #0
 80094ee:	73fb      	strb	r3, [r7, #15]
 80094f0:	e04a      	b.n	8009588 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80094f2:	7bfa      	ldrb	r2, [r7, #15]
 80094f4:	6879      	ldr	r1, [r7, #4]
 80094f6:	4613      	mov	r3, r2
 80094f8:	00db      	lsls	r3, r3, #3
 80094fa:	4413      	add	r3, r2
 80094fc:	009b      	lsls	r3, r3, #2
 80094fe:	440b      	add	r3, r1
 8009500:	333d      	adds	r3, #61	; 0x3d
 8009502:	2201      	movs	r2, #1
 8009504:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8009506:	7bfa      	ldrb	r2, [r7, #15]
 8009508:	6879      	ldr	r1, [r7, #4]
 800950a:	4613      	mov	r3, r2
 800950c:	00db      	lsls	r3, r3, #3
 800950e:	4413      	add	r3, r2
 8009510:	009b      	lsls	r3, r3, #2
 8009512:	440b      	add	r3, r1
 8009514:	333c      	adds	r3, #60	; 0x3c
 8009516:	7bfa      	ldrb	r2, [r7, #15]
 8009518:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800951a:	7bfa      	ldrb	r2, [r7, #15]
 800951c:	7bfb      	ldrb	r3, [r7, #15]
 800951e:	b298      	uxth	r0, r3
 8009520:	6879      	ldr	r1, [r7, #4]
 8009522:	4613      	mov	r3, r2
 8009524:	00db      	lsls	r3, r3, #3
 8009526:	4413      	add	r3, r2
 8009528:	009b      	lsls	r3, r3, #2
 800952a:	440b      	add	r3, r1
 800952c:	3344      	adds	r3, #68	; 0x44
 800952e:	4602      	mov	r2, r0
 8009530:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8009532:	7bfa      	ldrb	r2, [r7, #15]
 8009534:	6879      	ldr	r1, [r7, #4]
 8009536:	4613      	mov	r3, r2
 8009538:	00db      	lsls	r3, r3, #3
 800953a:	4413      	add	r3, r2
 800953c:	009b      	lsls	r3, r3, #2
 800953e:	440b      	add	r3, r1
 8009540:	3340      	adds	r3, #64	; 0x40
 8009542:	2200      	movs	r2, #0
 8009544:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8009546:	7bfa      	ldrb	r2, [r7, #15]
 8009548:	6879      	ldr	r1, [r7, #4]
 800954a:	4613      	mov	r3, r2
 800954c:	00db      	lsls	r3, r3, #3
 800954e:	4413      	add	r3, r2
 8009550:	009b      	lsls	r3, r3, #2
 8009552:	440b      	add	r3, r1
 8009554:	3348      	adds	r3, #72	; 0x48
 8009556:	2200      	movs	r2, #0
 8009558:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800955a:	7bfa      	ldrb	r2, [r7, #15]
 800955c:	6879      	ldr	r1, [r7, #4]
 800955e:	4613      	mov	r3, r2
 8009560:	00db      	lsls	r3, r3, #3
 8009562:	4413      	add	r3, r2
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	440b      	add	r3, r1
 8009568:	334c      	adds	r3, #76	; 0x4c
 800956a:	2200      	movs	r2, #0
 800956c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800956e:	7bfa      	ldrb	r2, [r7, #15]
 8009570:	6879      	ldr	r1, [r7, #4]
 8009572:	4613      	mov	r3, r2
 8009574:	00db      	lsls	r3, r3, #3
 8009576:	4413      	add	r3, r2
 8009578:	009b      	lsls	r3, r3, #2
 800957a:	440b      	add	r3, r1
 800957c:	3354      	adds	r3, #84	; 0x54
 800957e:	2200      	movs	r2, #0
 8009580:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009582:	7bfb      	ldrb	r3, [r7, #15]
 8009584:	3301      	adds	r3, #1
 8009586:	73fb      	strb	r3, [r7, #15]
 8009588:	7bfa      	ldrb	r2, [r7, #15]
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	429a      	cmp	r2, r3
 8009590:	d3af      	bcc.n	80094f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]
 8009596:	e044      	b.n	8009622 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8009598:	7bfa      	ldrb	r2, [r7, #15]
 800959a:	6879      	ldr	r1, [r7, #4]
 800959c:	4613      	mov	r3, r2
 800959e:	00db      	lsls	r3, r3, #3
 80095a0:	4413      	add	r3, r2
 80095a2:	009b      	lsls	r3, r3, #2
 80095a4:	440b      	add	r3, r1
 80095a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80095aa:	2200      	movs	r2, #0
 80095ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80095ae:	7bfa      	ldrb	r2, [r7, #15]
 80095b0:	6879      	ldr	r1, [r7, #4]
 80095b2:	4613      	mov	r3, r2
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	4413      	add	r3, r2
 80095b8:	009b      	lsls	r3, r3, #2
 80095ba:	440b      	add	r3, r1
 80095bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80095c0:	7bfa      	ldrb	r2, [r7, #15]
 80095c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80095c4:	7bfa      	ldrb	r2, [r7, #15]
 80095c6:	6879      	ldr	r1, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	00db      	lsls	r3, r3, #3
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80095d6:	2200      	movs	r2, #0
 80095d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80095da:	7bfa      	ldrb	r2, [r7, #15]
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	00db      	lsls	r3, r3, #3
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80095ec:	2200      	movs	r2, #0
 80095ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80095f0:	7bfa      	ldrb	r2, [r7, #15]
 80095f2:	6879      	ldr	r1, [r7, #4]
 80095f4:	4613      	mov	r3, r2
 80095f6:	00db      	lsls	r3, r3, #3
 80095f8:	4413      	add	r3, r2
 80095fa:	009b      	lsls	r3, r3, #2
 80095fc:	440b      	add	r3, r1
 80095fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8009606:	7bfa      	ldrb	r2, [r7, #15]
 8009608:	6879      	ldr	r1, [r7, #4]
 800960a:	4613      	mov	r3, r2
 800960c:	00db      	lsls	r3, r3, #3
 800960e:	4413      	add	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	440b      	add	r3, r1
 8009614:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8009618:	2200      	movs	r2, #0
 800961a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800961c:	7bfb      	ldrb	r3, [r7, #15]
 800961e:	3301      	adds	r3, #1
 8009620:	73fb      	strb	r3, [r7, #15]
 8009622:	7bfa      	ldrb	r2, [r7, #15]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	429a      	cmp	r2, r3
 800962a:	d3b5      	bcc.n	8009598 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	603b      	str	r3, [r7, #0]
 8009632:	687e      	ldr	r6, [r7, #4]
 8009634:	466d      	mov	r5, sp
 8009636:	f106 0410 	add.w	r4, r6, #16
 800963a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800963c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800963e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8009640:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8009642:	e894 0003 	ldmia.w	r4, {r0, r1}
 8009646:	e885 0003 	stmia.w	r5, {r0, r1}
 800964a:	1d33      	adds	r3, r6, #4
 800964c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800964e:	6838      	ldr	r0, [r7, #0]
 8009650:	f005 f8fe 	bl	800e850 <USB_DevInit>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d005      	beq.n	8009666 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	e014      	b.n	8009690 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	2200      	movs	r2, #0
 800966a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2201      	movs	r2, #1
 8009672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800967a:	2b01      	cmp	r3, #1
 800967c:	d102      	bne.n	8009684 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f80a 	bl	8009698 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	4618      	mov	r0, r3
 800968a:	f005 fabc 	bl	800ec06 <USB_DevDisconnect>

  return HAL_OK;
 800968e:	2300      	movs	r3, #0
}
 8009690:	4618      	mov	r0, r3
 8009692:	3714      	adds	r7, #20
 8009694:	46bd      	mov	sp, r7
 8009696:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009698 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2201      	movs	r2, #1
 80096aa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	699b      	ldr	r3, [r3, #24]
 80096ba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096c6:	4b05      	ldr	r3, [pc, #20]	; (80096dc <HAL_PCDEx_ActivateLPM+0x44>)
 80096c8:	4313      	orrs	r3, r2
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80096ce:	2300      	movs	r3, #0
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr
 80096dc:	10000003 	.word	0x10000003

080096e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80096e8:	4b29      	ldr	r3, [pc, #164]	; (8009790 <HAL_PWREx_ConfigSupply+0xb0>)
 80096ea:	68db      	ldr	r3, [r3, #12]
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	2b06      	cmp	r3, #6
 80096f2:	d00a      	beq.n	800970a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80096f4:	4b26      	ldr	r3, [pc, #152]	; (8009790 <HAL_PWREx_ConfigSupply+0xb0>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096fc:	687a      	ldr	r2, [r7, #4]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d001      	beq.n	8009706 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009702:	2301      	movs	r3, #1
 8009704:	e040      	b.n	8009788 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009706:	2300      	movs	r3, #0
 8009708:	e03e      	b.n	8009788 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800970a:	4b21      	ldr	r3, [pc, #132]	; (8009790 <HAL_PWREx_ConfigSupply+0xb0>)
 800970c:	68db      	ldr	r3, [r3, #12]
 800970e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8009712:	491f      	ldr	r1, [pc, #124]	; (8009790 <HAL_PWREx_ConfigSupply+0xb0>)
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	4313      	orrs	r3, r2
 8009718:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800971a:	f7fc fcc5 	bl	80060a8 <HAL_GetTick>
 800971e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009720:	e009      	b.n	8009736 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009722:	f7fc fcc1 	bl	80060a8 <HAL_GetTick>
 8009726:	4602      	mov	r2, r0
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	1ad3      	subs	r3, r2, r3
 800972c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009730:	d901      	bls.n	8009736 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009732:	2301      	movs	r3, #1
 8009734:	e028      	b.n	8009788 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009736:	4b16      	ldr	r3, [pc, #88]	; (8009790 <HAL_PWREx_ConfigSupply+0xb0>)
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800973e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009742:	d1ee      	bne.n	8009722 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b1e      	cmp	r3, #30
 8009748:	d008      	beq.n	800975c <HAL_PWREx_ConfigSupply+0x7c>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2b2e      	cmp	r3, #46	; 0x2e
 800974e:	d005      	beq.n	800975c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b1d      	cmp	r3, #29
 8009754:	d002      	beq.n	800975c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	2b2d      	cmp	r3, #45	; 0x2d
 800975a:	d114      	bne.n	8009786 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800975c:	f7fc fca4 	bl	80060a8 <HAL_GetTick>
 8009760:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009762:	e009      	b.n	8009778 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009764:	f7fc fca0 	bl	80060a8 <HAL_GetTick>
 8009768:	4602      	mov	r2, r0
 800976a:	68fb      	ldr	r3, [r7, #12]
 800976c:	1ad3      	subs	r3, r2, r3
 800976e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009772:	d901      	bls.n	8009778 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e007      	b.n	8009788 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <HAL_PWREx_ConfigSupply+0xb0>)
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009780:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009784:	d1ee      	bne.n	8009764 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3710      	adds	r7, #16
 800978c:	46bd      	mov	sp, r7
 800978e:	bd80      	pop	{r7, pc}
 8009790:	58024800 	.word	0x58024800

08009794 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8009794:	b480      	push	{r7}
 8009796:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8009798:	4b05      	ldr	r3, [pc, #20]	; (80097b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	4a04      	ldr	r2, [pc, #16]	; (80097b0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800979e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80097a2:	60d3      	str	r3, [r2, #12]
}
 80097a4:	bf00      	nop
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr
 80097ae:	bf00      	nop
 80097b0:	58024800 	.word	0x58024800

080097b4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80097b4:	b580      	push	{r7, lr}
 80097b6:	b08c      	sub	sp, #48	; 0x30
 80097b8:	af00      	add	r7, sp, #0
 80097ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d102      	bne.n	80097c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80097c2:	2301      	movs	r3, #1
 80097c4:	f000 bc1d 	b.w	800a002 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	f003 0301 	and.w	r3, r3, #1
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 8087 	beq.w	80098e4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80097d6:	4b99      	ldr	r3, [pc, #612]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80097d8:	691b      	ldr	r3, [r3, #16]
 80097da:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097de:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80097e0:	4b96      	ldr	r3, [pc, #600]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80097e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097e4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80097e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097e8:	2b10      	cmp	r3, #16
 80097ea:	d007      	beq.n	80097fc <HAL_RCC_OscConfig+0x48>
 80097ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ee:	2b18      	cmp	r3, #24
 80097f0:	d110      	bne.n	8009814 <HAL_RCC_OscConfig+0x60>
 80097f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	2b02      	cmp	r3, #2
 80097fa:	d10b      	bne.n	8009814 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80097fc:	4b8f      	ldr	r3, [pc, #572]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009804:	2b00      	cmp	r3, #0
 8009806:	d06c      	beq.n	80098e2 <HAL_RCC_OscConfig+0x12e>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	685b      	ldr	r3, [r3, #4]
 800980c:	2b00      	cmp	r3, #0
 800980e:	d168      	bne.n	80098e2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8009810:	2301      	movs	r3, #1
 8009812:	e3f6      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800981c:	d106      	bne.n	800982c <HAL_RCC_OscConfig+0x78>
 800981e:	4b87      	ldr	r3, [pc, #540]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a86      	ldr	r2, [pc, #536]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009824:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009828:	6013      	str	r3, [r2, #0]
 800982a:	e02e      	b.n	800988a <HAL_RCC_OscConfig+0xd6>
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	2b00      	cmp	r3, #0
 8009832:	d10c      	bne.n	800984e <HAL_RCC_OscConfig+0x9a>
 8009834:	4b81      	ldr	r3, [pc, #516]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	4a80      	ldr	r2, [pc, #512]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800983a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800983e:	6013      	str	r3, [r2, #0]
 8009840:	4b7e      	ldr	r3, [pc, #504]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	4a7d      	ldr	r2, [pc, #500]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009846:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800984a:	6013      	str	r3, [r2, #0]
 800984c:	e01d      	b.n	800988a <HAL_RCC_OscConfig+0xd6>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	685b      	ldr	r3, [r3, #4]
 8009852:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009856:	d10c      	bne.n	8009872 <HAL_RCC_OscConfig+0xbe>
 8009858:	4b78      	ldr	r3, [pc, #480]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4a77      	ldr	r2, [pc, #476]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800985e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009862:	6013      	str	r3, [r2, #0]
 8009864:	4b75      	ldr	r3, [pc, #468]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	4a74      	ldr	r2, [pc, #464]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800986a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	e00b      	b.n	800988a <HAL_RCC_OscConfig+0xd6>
 8009872:	4b72      	ldr	r3, [pc, #456]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a71      	ldr	r2, [pc, #452]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009878:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800987c:	6013      	str	r3, [r2, #0]
 800987e:	4b6f      	ldr	r3, [pc, #444]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	4a6e      	ldr	r2, [pc, #440]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009884:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009888:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	685b      	ldr	r3, [r3, #4]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d013      	beq.n	80098ba <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009892:	f7fc fc09 	bl	80060a8 <HAL_GetTick>
 8009896:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009898:	e008      	b.n	80098ac <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800989a:	f7fc fc05 	bl	80060a8 <HAL_GetTick>
 800989e:	4602      	mov	r2, r0
 80098a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a2:	1ad3      	subs	r3, r2, r3
 80098a4:	2b64      	cmp	r3, #100	; 0x64
 80098a6:	d901      	bls.n	80098ac <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80098a8:	2303      	movs	r3, #3
 80098aa:	e3aa      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80098ac:	4b63      	ldr	r3, [pc, #396]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d0f0      	beq.n	800989a <HAL_RCC_OscConfig+0xe6>
 80098b8:	e014      	b.n	80098e4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098ba:	f7fc fbf5 	bl	80060a8 <HAL_GetTick>
 80098be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098c0:	e008      	b.n	80098d4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80098c2:	f7fc fbf1 	bl	80060a8 <HAL_GetTick>
 80098c6:	4602      	mov	r2, r0
 80098c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ca:	1ad3      	subs	r3, r2, r3
 80098cc:	2b64      	cmp	r3, #100	; 0x64
 80098ce:	d901      	bls.n	80098d4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80098d0:	2303      	movs	r3, #3
 80098d2:	e396      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80098d4:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d1f0      	bne.n	80098c2 <HAL_RCC_OscConfig+0x10e>
 80098e0:	e000      	b.n	80098e4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80098e2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	f003 0302 	and.w	r3, r3, #2
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f000 80cb 	beq.w	8009a88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80098f2:	4b52      	ldr	r3, [pc, #328]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80098fa:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80098fc:	4b4f      	ldr	r3, [pc, #316]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80098fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009900:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	2b00      	cmp	r3, #0
 8009906:	d007      	beq.n	8009918 <HAL_RCC_OscConfig+0x164>
 8009908:	6a3b      	ldr	r3, [r7, #32]
 800990a:	2b18      	cmp	r3, #24
 800990c:	d156      	bne.n	80099bc <HAL_RCC_OscConfig+0x208>
 800990e:	69fb      	ldr	r3, [r7, #28]
 8009910:	f003 0303 	and.w	r3, r3, #3
 8009914:	2b00      	cmp	r3, #0
 8009916:	d151      	bne.n	80099bc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009918:	4b48      	ldr	r3, [pc, #288]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0304 	and.w	r3, r3, #4
 8009920:	2b00      	cmp	r3, #0
 8009922:	d005      	beq.n	8009930 <HAL_RCC_OscConfig+0x17c>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	68db      	ldr	r3, [r3, #12]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d101      	bne.n	8009930 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	e368      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009930:	4b42      	ldr	r3, [pc, #264]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f023 0219 	bic.w	r2, r3, #25
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	68db      	ldr	r3, [r3, #12]
 800993c:	493f      	ldr	r1, [pc, #252]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800993e:	4313      	orrs	r3, r2
 8009940:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009942:	f7fc fbb1 	bl	80060a8 <HAL_GetTick>
 8009946:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009948:	e008      	b.n	800995c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800994a:	f7fc fbad 	bl	80060a8 <HAL_GetTick>
 800994e:	4602      	mov	r2, r0
 8009950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009952:	1ad3      	subs	r3, r2, r3
 8009954:	2b02      	cmp	r3, #2
 8009956:	d901      	bls.n	800995c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8009958:	2303      	movs	r3, #3
 800995a:	e352      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800995c:	4b37      	ldr	r3, [pc, #220]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	f003 0304 	and.w	r3, r3, #4
 8009964:	2b00      	cmp	r3, #0
 8009966:	d0f0      	beq.n	800994a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009968:	f7fc fbce 	bl	8006108 <HAL_GetREVID>
 800996c:	4603      	mov	r3, r0
 800996e:	f241 0203 	movw	r2, #4099	; 0x1003
 8009972:	4293      	cmp	r3, r2
 8009974:	d817      	bhi.n	80099a6 <HAL_RCC_OscConfig+0x1f2>
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	691b      	ldr	r3, [r3, #16]
 800997a:	2b40      	cmp	r3, #64	; 0x40
 800997c:	d108      	bne.n	8009990 <HAL_RCC_OscConfig+0x1dc>
 800997e:	4b2f      	ldr	r3, [pc, #188]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009980:	685b      	ldr	r3, [r3, #4]
 8009982:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009986:	4a2d      	ldr	r2, [pc, #180]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009988:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800998c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800998e:	e07b      	b.n	8009a88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009990:	4b2a      	ldr	r3, [pc, #168]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009992:	685b      	ldr	r3, [r3, #4]
 8009994:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	691b      	ldr	r3, [r3, #16]
 800999c:	031b      	lsls	r3, r3, #12
 800999e:	4927      	ldr	r1, [pc, #156]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80099a0:	4313      	orrs	r3, r2
 80099a2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099a4:	e070      	b.n	8009a88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099a6:	4b25      	ldr	r3, [pc, #148]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80099a8:	685b      	ldr	r3, [r3, #4]
 80099aa:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	691b      	ldr	r3, [r3, #16]
 80099b2:	061b      	lsls	r3, r3, #24
 80099b4:	4921      	ldr	r1, [pc, #132]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80099b6:	4313      	orrs	r3, r2
 80099b8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80099ba:	e065      	b.n	8009a88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	68db      	ldr	r3, [r3, #12]
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d048      	beq.n	8009a56 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80099c4:	4b1d      	ldr	r3, [pc, #116]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f023 0219 	bic.w	r2, r3, #25
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	68db      	ldr	r3, [r3, #12]
 80099d0:	491a      	ldr	r1, [pc, #104]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80099d2:	4313      	orrs	r3, r2
 80099d4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099d6:	f7fc fb67 	bl	80060a8 <HAL_GetTick>
 80099da:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099dc:	e008      	b.n	80099f0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80099de:	f7fc fb63 	bl	80060a8 <HAL_GetTick>
 80099e2:	4602      	mov	r2, r0
 80099e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099e6:	1ad3      	subs	r3, r2, r3
 80099e8:	2b02      	cmp	r3, #2
 80099ea:	d901      	bls.n	80099f0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80099ec:	2303      	movs	r3, #3
 80099ee:	e308      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80099f0:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 0304 	and.w	r3, r3, #4
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d0f0      	beq.n	80099de <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099fc:	f7fc fb84 	bl	8006108 <HAL_GetREVID>
 8009a00:	4603      	mov	r3, r0
 8009a02:	f241 0203 	movw	r2, #4099	; 0x1003
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d81a      	bhi.n	8009a40 <HAL_RCC_OscConfig+0x28c>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	2b40      	cmp	r3, #64	; 0x40
 8009a10:	d108      	bne.n	8009a24 <HAL_RCC_OscConfig+0x270>
 8009a12:	4b0a      	ldr	r3, [pc, #40]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009a1a:	4a08      	ldr	r2, [pc, #32]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009a1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a20:	6053      	str	r3, [r2, #4]
 8009a22:	e031      	b.n	8009a88 <HAL_RCC_OscConfig+0x2d4>
 8009a24:	4b05      	ldr	r3, [pc, #20]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	691b      	ldr	r3, [r3, #16]
 8009a30:	031b      	lsls	r3, r3, #12
 8009a32:	4902      	ldr	r1, [pc, #8]	; (8009a3c <HAL_RCC_OscConfig+0x288>)
 8009a34:	4313      	orrs	r3, r2
 8009a36:	604b      	str	r3, [r1, #4]
 8009a38:	e026      	b.n	8009a88 <HAL_RCC_OscConfig+0x2d4>
 8009a3a:	bf00      	nop
 8009a3c:	58024400 	.word	0x58024400
 8009a40:	4b9a      	ldr	r3, [pc, #616]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009a42:	685b      	ldr	r3, [r3, #4]
 8009a44:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	691b      	ldr	r3, [r3, #16]
 8009a4c:	061b      	lsls	r3, r3, #24
 8009a4e:	4997      	ldr	r1, [pc, #604]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	604b      	str	r3, [r1, #4]
 8009a54:	e018      	b.n	8009a88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009a56:	4b95      	ldr	r3, [pc, #596]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a94      	ldr	r2, [pc, #592]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009a5c:	f023 0301 	bic.w	r3, r3, #1
 8009a60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009a62:	f7fc fb21 	bl	80060a8 <HAL_GetTick>
 8009a66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a68:	e008      	b.n	8009a7c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009a6a:	f7fc fb1d 	bl	80060a8 <HAL_GetTick>
 8009a6e:	4602      	mov	r2, r0
 8009a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a72:	1ad3      	subs	r3, r2, r3
 8009a74:	2b02      	cmp	r3, #2
 8009a76:	d901      	bls.n	8009a7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009a78:	2303      	movs	r3, #3
 8009a7a:	e2c2      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009a7c:	4b8b      	ldr	r3, [pc, #556]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f003 0304 	and.w	r3, r3, #4
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d1f0      	bne.n	8009a6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f003 0310 	and.w	r3, r3, #16
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	f000 80a9 	beq.w	8009be8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a96:	4b85      	ldr	r3, [pc, #532]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009a9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009aa0:	4b82      	ldr	r3, [pc, #520]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009aa4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009aa6:	69bb      	ldr	r3, [r7, #24]
 8009aa8:	2b08      	cmp	r3, #8
 8009aaa:	d007      	beq.n	8009abc <HAL_RCC_OscConfig+0x308>
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	2b18      	cmp	r3, #24
 8009ab0:	d13a      	bne.n	8009b28 <HAL_RCC_OscConfig+0x374>
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	f003 0303 	and.w	r3, r3, #3
 8009ab8:	2b01      	cmp	r3, #1
 8009aba:	d135      	bne.n	8009b28 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009abc:	4b7b      	ldr	r3, [pc, #492]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d005      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x320>
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	69db      	ldr	r3, [r3, #28]
 8009acc:	2b80      	cmp	r3, #128	; 0x80
 8009ace:	d001      	beq.n	8009ad4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	e296      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009ad4:	f7fc fb18 	bl	8006108 <HAL_GetREVID>
 8009ad8:	4603      	mov	r3, r0
 8009ada:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ade:	4293      	cmp	r3, r2
 8009ae0:	d817      	bhi.n	8009b12 <HAL_RCC_OscConfig+0x35e>
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6a1b      	ldr	r3, [r3, #32]
 8009ae6:	2b20      	cmp	r3, #32
 8009ae8:	d108      	bne.n	8009afc <HAL_RCC_OscConfig+0x348>
 8009aea:	4b70      	ldr	r3, [pc, #448]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009aec:	685b      	ldr	r3, [r3, #4]
 8009aee:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009af2:	4a6e      	ldr	r2, [pc, #440]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009af4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009af8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009afa:	e075      	b.n	8009be8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009afc:	4b6b      	ldr	r3, [pc, #428]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6a1b      	ldr	r3, [r3, #32]
 8009b08:	069b      	lsls	r3, r3, #26
 8009b0a:	4968      	ldr	r1, [pc, #416]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b10:	e06a      	b.n	8009be8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b12:	4b66      	ldr	r3, [pc, #408]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b14:	68db      	ldr	r3, [r3, #12]
 8009b16:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6a1b      	ldr	r3, [r3, #32]
 8009b1e:	061b      	lsls	r3, r3, #24
 8009b20:	4962      	ldr	r1, [pc, #392]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b22:	4313      	orrs	r3, r2
 8009b24:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009b26:	e05f      	b.n	8009be8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	69db      	ldr	r3, [r3, #28]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d042      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8009b30:	4b5e      	ldr	r3, [pc, #376]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	4a5d      	ldr	r2, [pc, #372]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009b3c:	f7fc fab4 	bl	80060a8 <HAL_GetTick>
 8009b40:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b42:	e008      	b.n	8009b56 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009b44:	f7fc fab0 	bl	80060a8 <HAL_GetTick>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b4c:	1ad3      	subs	r3, r2, r3
 8009b4e:	2b02      	cmp	r3, #2
 8009b50:	d901      	bls.n	8009b56 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8009b52:	2303      	movs	r3, #3
 8009b54:	e255      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009b56:	4b55      	ldr	r3, [pc, #340]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0f0      	beq.n	8009b44 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009b62:	f7fc fad1 	bl	8006108 <HAL_GetREVID>
 8009b66:	4603      	mov	r3, r0
 8009b68:	f241 0203 	movw	r2, #4099	; 0x1003
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d817      	bhi.n	8009ba0 <HAL_RCC_OscConfig+0x3ec>
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	6a1b      	ldr	r3, [r3, #32]
 8009b74:	2b20      	cmp	r3, #32
 8009b76:	d108      	bne.n	8009b8a <HAL_RCC_OscConfig+0x3d6>
 8009b78:	4b4c      	ldr	r3, [pc, #304]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b7a:	685b      	ldr	r3, [r3, #4]
 8009b7c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8009b80:	4a4a      	ldr	r2, [pc, #296]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009b86:	6053      	str	r3, [r2, #4]
 8009b88:	e02e      	b.n	8009be8 <HAL_RCC_OscConfig+0x434>
 8009b8a:	4b48      	ldr	r3, [pc, #288]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6a1b      	ldr	r3, [r3, #32]
 8009b96:	069b      	lsls	r3, r3, #26
 8009b98:	4944      	ldr	r1, [pc, #272]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	604b      	str	r3, [r1, #4]
 8009b9e:	e023      	b.n	8009be8 <HAL_RCC_OscConfig+0x434>
 8009ba0:	4b42      	ldr	r3, [pc, #264]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009ba2:	68db      	ldr	r3, [r3, #12]
 8009ba4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	6a1b      	ldr	r3, [r3, #32]
 8009bac:	061b      	lsls	r3, r3, #24
 8009bae:	493f      	ldr	r1, [pc, #252]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009bb0:	4313      	orrs	r3, r2
 8009bb2:	60cb      	str	r3, [r1, #12]
 8009bb4:	e018      	b.n	8009be8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8009bb6:	4b3d      	ldr	r3, [pc, #244]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	4a3c      	ldr	r2, [pc, #240]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009bbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009bc0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009bc2:	f7fc fa71 	bl	80060a8 <HAL_GetTick>
 8009bc6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bc8:	e008      	b.n	8009bdc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8009bca:	f7fc fa6d 	bl	80060a8 <HAL_GetTick>
 8009bce:	4602      	mov	r2, r0
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	1ad3      	subs	r3, r2, r3
 8009bd4:	2b02      	cmp	r3, #2
 8009bd6:	d901      	bls.n	8009bdc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8009bd8:	2303      	movs	r3, #3
 8009bda:	e212      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009bdc:	4b33      	ldr	r3, [pc, #204]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d1f0      	bne.n	8009bca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f003 0308 	and.w	r3, r3, #8
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d036      	beq.n	8009c62 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	695b      	ldr	r3, [r3, #20]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d019      	beq.n	8009c30 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009bfc:	4b2b      	ldr	r3, [pc, #172]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c00:	4a2a      	ldr	r2, [pc, #168]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c02:	f043 0301 	orr.w	r3, r3, #1
 8009c06:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c08:	f7fc fa4e 	bl	80060a8 <HAL_GetTick>
 8009c0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c0e:	e008      	b.n	8009c22 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c10:	f7fc fa4a 	bl	80060a8 <HAL_GetTick>
 8009c14:	4602      	mov	r2, r0
 8009c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c18:	1ad3      	subs	r3, r2, r3
 8009c1a:	2b02      	cmp	r3, #2
 8009c1c:	d901      	bls.n	8009c22 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8009c1e:	2303      	movs	r3, #3
 8009c20:	e1ef      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009c22:	4b22      	ldr	r3, [pc, #136]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c26:	f003 0302 	and.w	r3, r3, #2
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d0f0      	beq.n	8009c10 <HAL_RCC_OscConfig+0x45c>
 8009c2e:	e018      	b.n	8009c62 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009c30:	4b1e      	ldr	r3, [pc, #120]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c34:	4a1d      	ldr	r2, [pc, #116]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c36:	f023 0301 	bic.w	r3, r3, #1
 8009c3a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c3c:	f7fc fa34 	bl	80060a8 <HAL_GetTick>
 8009c40:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c42:	e008      	b.n	8009c56 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009c44:	f7fc fa30 	bl	80060a8 <HAL_GetTick>
 8009c48:	4602      	mov	r2, r0
 8009c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c4c:	1ad3      	subs	r3, r2, r3
 8009c4e:	2b02      	cmp	r3, #2
 8009c50:	d901      	bls.n	8009c56 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8009c52:	2303      	movs	r3, #3
 8009c54:	e1d5      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009c56:	4b15      	ldr	r3, [pc, #84]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c5a:	f003 0302 	and.w	r3, r3, #2
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d1f0      	bne.n	8009c44 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c62:	687b      	ldr	r3, [r7, #4]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	f003 0320 	and.w	r3, r3, #32
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d039      	beq.n	8009ce2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	699b      	ldr	r3, [r3, #24]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d01c      	beq.n	8009cb0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c76:	4b0d      	ldr	r3, [pc, #52]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	4a0c      	ldr	r2, [pc, #48]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c7c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009c80:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009c82:	f7fc fa11 	bl	80060a8 <HAL_GetTick>
 8009c86:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c88:	e008      	b.n	8009c9c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009c8a:	f7fc fa0d 	bl	80060a8 <HAL_GetTick>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c92:	1ad3      	subs	r3, r2, r3
 8009c94:	2b02      	cmp	r3, #2
 8009c96:	d901      	bls.n	8009c9c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8009c98:	2303      	movs	r3, #3
 8009c9a:	e1b2      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009c9c:	4b03      	ldr	r3, [pc, #12]	; (8009cac <HAL_RCC_OscConfig+0x4f8>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d0f0      	beq.n	8009c8a <HAL_RCC_OscConfig+0x4d6>
 8009ca8:	e01b      	b.n	8009ce2 <HAL_RCC_OscConfig+0x52e>
 8009caa:	bf00      	nop
 8009cac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009cb0:	4b9b      	ldr	r3, [pc, #620]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	4a9a      	ldr	r2, [pc, #616]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8009cbc:	f7fc f9f4 	bl	80060a8 <HAL_GetTick>
 8009cc0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cc2:	e008      	b.n	8009cd6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8009cc4:	f7fc f9f0 	bl	80060a8 <HAL_GetTick>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	d901      	bls.n	8009cd6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8009cd2:	2303      	movs	r3, #3
 8009cd4:	e195      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009cd6:	4b92      	ldr	r3, [pc, #584]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d1f0      	bne.n	8009cc4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	f000 8081 	beq.w	8009df2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009cf0:	4b8c      	ldr	r3, [pc, #560]	; (8009f24 <HAL_RCC_OscConfig+0x770>)
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	4a8b      	ldr	r2, [pc, #556]	; (8009f24 <HAL_RCC_OscConfig+0x770>)
 8009cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009cfa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009cfc:	f7fc f9d4 	bl	80060a8 <HAL_GetTick>
 8009d00:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d02:	e008      	b.n	8009d16 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8009d04:	f7fc f9d0 	bl	80060a8 <HAL_GetTick>
 8009d08:	4602      	mov	r2, r0
 8009d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d0c:	1ad3      	subs	r3, r2, r3
 8009d0e:	2b64      	cmp	r3, #100	; 0x64
 8009d10:	d901      	bls.n	8009d16 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8009d12:	2303      	movs	r3, #3
 8009d14:	e175      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009d16:	4b83      	ldr	r3, [pc, #524]	; (8009f24 <HAL_RCC_OscConfig+0x770>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d0f0      	beq.n	8009d04 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	689b      	ldr	r3, [r3, #8]
 8009d26:	2b01      	cmp	r3, #1
 8009d28:	d106      	bne.n	8009d38 <HAL_RCC_OscConfig+0x584>
 8009d2a:	4b7d      	ldr	r3, [pc, #500]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d2e:	4a7c      	ldr	r2, [pc, #496]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d30:	f043 0301 	orr.w	r3, r3, #1
 8009d34:	6713      	str	r3, [r2, #112]	; 0x70
 8009d36:	e02d      	b.n	8009d94 <HAL_RCC_OscConfig+0x5e0>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d10c      	bne.n	8009d5a <HAL_RCC_OscConfig+0x5a6>
 8009d40:	4b77      	ldr	r3, [pc, #476]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d44:	4a76      	ldr	r2, [pc, #472]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d46:	f023 0301 	bic.w	r3, r3, #1
 8009d4a:	6713      	str	r3, [r2, #112]	; 0x70
 8009d4c:	4b74      	ldr	r3, [pc, #464]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d50:	4a73      	ldr	r2, [pc, #460]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d52:	f023 0304 	bic.w	r3, r3, #4
 8009d56:	6713      	str	r3, [r2, #112]	; 0x70
 8009d58:	e01c      	b.n	8009d94 <HAL_RCC_OscConfig+0x5e0>
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	2b05      	cmp	r3, #5
 8009d60:	d10c      	bne.n	8009d7c <HAL_RCC_OscConfig+0x5c8>
 8009d62:	4b6f      	ldr	r3, [pc, #444]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d66:	4a6e      	ldr	r2, [pc, #440]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d68:	f043 0304 	orr.w	r3, r3, #4
 8009d6c:	6713      	str	r3, [r2, #112]	; 0x70
 8009d6e:	4b6c      	ldr	r3, [pc, #432]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d72:	4a6b      	ldr	r2, [pc, #428]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d74:	f043 0301 	orr.w	r3, r3, #1
 8009d78:	6713      	str	r3, [r2, #112]	; 0x70
 8009d7a:	e00b      	b.n	8009d94 <HAL_RCC_OscConfig+0x5e0>
 8009d7c:	4b68      	ldr	r3, [pc, #416]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d80:	4a67      	ldr	r2, [pc, #412]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d82:	f023 0301 	bic.w	r3, r3, #1
 8009d86:	6713      	str	r3, [r2, #112]	; 0x70
 8009d88:	4b65      	ldr	r3, [pc, #404]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009d8c:	4a64      	ldr	r2, [pc, #400]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009d8e:	f023 0304 	bic.w	r3, r3, #4
 8009d92:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	689b      	ldr	r3, [r3, #8]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d015      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009d9c:	f7fc f984 	bl	80060a8 <HAL_GetTick>
 8009da0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009da2:	e00a      	b.n	8009dba <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009da4:	f7fc f980 	bl	80060a8 <HAL_GetTick>
 8009da8:	4602      	mov	r2, r0
 8009daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dac:	1ad3      	subs	r3, r2, r3
 8009dae:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e123      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009dba:	4b59      	ldr	r3, [pc, #356]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dbe:	f003 0302 	and.w	r3, r3, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0ee      	beq.n	8009da4 <HAL_RCC_OscConfig+0x5f0>
 8009dc6:	e014      	b.n	8009df2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009dc8:	f7fc f96e 	bl	80060a8 <HAL_GetTick>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009dce:	e00a      	b.n	8009de6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009dd0:	f7fc f96a 	bl	80060a8 <HAL_GetTick>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	f241 3288 	movw	r2, #5000	; 0x1388
 8009dde:	4293      	cmp	r3, r2
 8009de0:	d901      	bls.n	8009de6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8009de2:	2303      	movs	r3, #3
 8009de4:	e10d      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009de6:	4b4e      	ldr	r3, [pc, #312]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009dea:	f003 0302 	and.w	r3, r3, #2
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1ee      	bne.n	8009dd0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	f000 8102 	beq.w	800a000 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009dfc:	4b48      	ldr	r3, [pc, #288]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009dfe:	691b      	ldr	r3, [r3, #16]
 8009e00:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e04:	2b18      	cmp	r3, #24
 8009e06:	f000 80bd 	beq.w	8009f84 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e0e:	2b02      	cmp	r3, #2
 8009e10:	f040 809e 	bne.w	8009f50 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e14:	4b42      	ldr	r3, [pc, #264]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	4a41      	ldr	r2, [pc, #260]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e20:	f7fc f942 	bl	80060a8 <HAL_GetTick>
 8009e24:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e26:	e008      	b.n	8009e3a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e28:	f7fc f93e 	bl	80060a8 <HAL_GetTick>
 8009e2c:	4602      	mov	r2, r0
 8009e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e30:	1ad3      	subs	r3, r2, r3
 8009e32:	2b02      	cmp	r3, #2
 8009e34:	d901      	bls.n	8009e3a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8009e36:	2303      	movs	r3, #3
 8009e38:	e0e3      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e3a:	4b39      	ldr	r3, [pc, #228]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d1f0      	bne.n	8009e28 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e46:	4b36      	ldr	r3, [pc, #216]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e4a:	4b37      	ldr	r3, [pc, #220]	; (8009f28 <HAL_RCC_OscConfig+0x774>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009e56:	0112      	lsls	r2, r2, #4
 8009e58:	430a      	orrs	r2, r1
 8009e5a:	4931      	ldr	r1, [pc, #196]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	628b      	str	r3, [r1, #40]	; 0x28
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e64:	3b01      	subs	r3, #1
 8009e66:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	025b      	lsls	r3, r3, #9
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	431a      	orrs	r2, r3
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	041b      	lsls	r3, r3, #16
 8009e7e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e82:	431a      	orrs	r2, r3
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009e88:	3b01      	subs	r3, #1
 8009e8a:	061b      	lsls	r3, r3, #24
 8009e8c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e90:	4923      	ldr	r1, [pc, #140]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e92:	4313      	orrs	r3, r2
 8009e94:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8009e96:	4b22      	ldr	r3, [pc, #136]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e9a:	4a21      	ldr	r2, [pc, #132]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009e9c:	f023 0301 	bic.w	r3, r3, #1
 8009ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009ea2:	4b1f      	ldr	r3, [pc, #124]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ea4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ea6:	4b21      	ldr	r3, [pc, #132]	; (8009f2c <HAL_RCC_OscConfig+0x778>)
 8009ea8:	4013      	ands	r3, r2
 8009eaa:	687a      	ldr	r2, [r7, #4]
 8009eac:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8009eae:	00d2      	lsls	r2, r2, #3
 8009eb0:	491b      	ldr	r1, [pc, #108]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009eb6:	4b1a      	ldr	r3, [pc, #104]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eba:	f023 020c 	bic.w	r2, r3, #12
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ec2:	4917      	ldr	r1, [pc, #92]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009ec8:	4b15      	ldr	r3, [pc, #84]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ecc:	f023 0202 	bic.w	r2, r3, #2
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ed4:	4912      	ldr	r1, [pc, #72]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ed6:	4313      	orrs	r3, r2
 8009ed8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009eda:	4b11      	ldr	r3, [pc, #68]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009edc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ede:	4a10      	ldr	r2, [pc, #64]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ee0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009ee4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009ee6:	4b0e      	ldr	r3, [pc, #56]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eea:	4a0d      	ldr	r2, [pc, #52]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009eec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ef0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009ef2:	4b0b      	ldr	r3, [pc, #44]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ef6:	4a0a      	ldr	r2, [pc, #40]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009efc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8009efe:	4b08      	ldr	r3, [pc, #32]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f02:	4a07      	ldr	r2, [pc, #28]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009f04:	f043 0301 	orr.w	r3, r3, #1
 8009f08:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009f0a:	4b05      	ldr	r3, [pc, #20]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	4a04      	ldr	r2, [pc, #16]	; (8009f20 <HAL_RCC_OscConfig+0x76c>)
 8009f10:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009f14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f16:	f7fc f8c7 	bl	80060a8 <HAL_GetTick>
 8009f1a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f1c:	e011      	b.n	8009f42 <HAL_RCC_OscConfig+0x78e>
 8009f1e:	bf00      	nop
 8009f20:	58024400 	.word	0x58024400
 8009f24:	58024800 	.word	0x58024800
 8009f28:	fffffc0c 	.word	0xfffffc0c
 8009f2c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f30:	f7fc f8ba 	bl	80060a8 <HAL_GetTick>
 8009f34:	4602      	mov	r2, r0
 8009f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f38:	1ad3      	subs	r3, r2, r3
 8009f3a:	2b02      	cmp	r3, #2
 8009f3c:	d901      	bls.n	8009f42 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8009f3e:	2303      	movs	r3, #3
 8009f40:	e05f      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f42:	4b32      	ldr	r3, [pc, #200]	; (800a00c <HAL_RCC_OscConfig+0x858>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <HAL_RCC_OscConfig+0x77c>
 8009f4e:	e057      	b.n	800a000 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009f50:	4b2e      	ldr	r3, [pc, #184]	; (800a00c <HAL_RCC_OscConfig+0x858>)
 8009f52:	681b      	ldr	r3, [r3, #0]
 8009f54:	4a2d      	ldr	r2, [pc, #180]	; (800a00c <HAL_RCC_OscConfig+0x858>)
 8009f56:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f5c:	f7fc f8a4 	bl	80060a8 <HAL_GetTick>
 8009f60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f62:	e008      	b.n	8009f76 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009f64:	f7fc f8a0 	bl	80060a8 <HAL_GetTick>
 8009f68:	4602      	mov	r2, r0
 8009f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f6c:	1ad3      	subs	r3, r2, r3
 8009f6e:	2b02      	cmp	r3, #2
 8009f70:	d901      	bls.n	8009f76 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8009f72:	2303      	movs	r3, #3
 8009f74:	e045      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009f76:	4b25      	ldr	r3, [pc, #148]	; (800a00c <HAL_RCC_OscConfig+0x858>)
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d1f0      	bne.n	8009f64 <HAL_RCC_OscConfig+0x7b0>
 8009f82:	e03d      	b.n	800a000 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009f84:	4b21      	ldr	r3, [pc, #132]	; (800a00c <HAL_RCC_OscConfig+0x858>)
 8009f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f88:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009f8a:	4b20      	ldr	r3, [pc, #128]	; (800a00c <HAL_RCC_OscConfig+0x858>)
 8009f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f8e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d031      	beq.n	8009ffc <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	f003 0203 	and.w	r2, r3, #3
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009fa2:	429a      	cmp	r2, r3
 8009fa4:	d12a      	bne.n	8009ffc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fa6:	693b      	ldr	r3, [r7, #16]
 8009fa8:	091b      	lsrs	r3, r3, #4
 8009faa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009fb2:	429a      	cmp	r2, r3
 8009fb4:	d122      	bne.n	8009ffc <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fc0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d11a      	bne.n	8009ffc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	0a5b      	lsrs	r3, r3, #9
 8009fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009fd2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d111      	bne.n	8009ffc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	0c1b      	lsrs	r3, r3, #16
 8009fdc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fe4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009fe6:	429a      	cmp	r2, r3
 8009fe8:	d108      	bne.n	8009ffc <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	0e1b      	lsrs	r3, r3, #24
 8009fee:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ff6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009ff8:	429a      	cmp	r2, r3
 8009ffa:	d001      	beq.n	800a000 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009ffc:	2301      	movs	r3, #1
 8009ffe:	e000      	b.n	800a002 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800a000:	2300      	movs	r3, #0
}
 800a002:	4618      	mov	r0, r3
 800a004:	3730      	adds	r7, #48	; 0x30
 800a006:	46bd      	mov	sp, r7
 800a008:	bd80      	pop	{r7, pc}
 800a00a:	bf00      	nop
 800a00c:	58024400 	.word	0x58024400

0800a010 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a010:	b580      	push	{r7, lr}
 800a012:	b086      	sub	sp, #24
 800a014:	af00      	add	r7, sp, #0
 800a016:	6078      	str	r0, [r7, #4]
 800a018:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d101      	bne.n	800a024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a020:	2301      	movs	r3, #1
 800a022:	e19c      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a024:	4b8a      	ldr	r3, [pc, #552]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	683a      	ldr	r2, [r7, #0]
 800a02e:	429a      	cmp	r2, r3
 800a030:	d910      	bls.n	800a054 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a032:	4b87      	ldr	r3, [pc, #540]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	f023 020f 	bic.w	r2, r3, #15
 800a03a:	4985      	ldr	r1, [pc, #532]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a03c:	683b      	ldr	r3, [r7, #0]
 800a03e:	4313      	orrs	r3, r2
 800a040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a042:	4b83      	ldr	r3, [pc, #524]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	f003 030f 	and.w	r3, r3, #15
 800a04a:	683a      	ldr	r2, [r7, #0]
 800a04c:	429a      	cmp	r2, r3
 800a04e:	d001      	beq.n	800a054 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a050:	2301      	movs	r3, #1
 800a052:	e184      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f003 0304 	and.w	r3, r3, #4
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d010      	beq.n	800a082 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	691a      	ldr	r2, [r3, #16]
 800a064:	4b7b      	ldr	r3, [pc, #492]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a066:	699b      	ldr	r3, [r3, #24]
 800a068:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a06c:	429a      	cmp	r2, r3
 800a06e:	d908      	bls.n	800a082 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a070:	4b78      	ldr	r3, [pc, #480]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a072:	699b      	ldr	r3, [r3, #24]
 800a074:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	691b      	ldr	r3, [r3, #16]
 800a07c:	4975      	ldr	r1, [pc, #468]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a07e:	4313      	orrs	r3, r2
 800a080:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f003 0308 	and.w	r3, r3, #8
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d010      	beq.n	800a0b0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	695a      	ldr	r2, [r3, #20]
 800a092:	4b70      	ldr	r3, [pc, #448]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a094:	69db      	ldr	r3, [r3, #28]
 800a096:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d908      	bls.n	800a0b0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a09e:	4b6d      	ldr	r3, [pc, #436]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0a0:	69db      	ldr	r3, [r3, #28]
 800a0a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	695b      	ldr	r3, [r3, #20]
 800a0aa:	496a      	ldr	r1, [pc, #424]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0310 	and.w	r3, r3, #16
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d010      	beq.n	800a0de <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	699a      	ldr	r2, [r3, #24]
 800a0c0:	4b64      	ldr	r3, [pc, #400]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0c2:	69db      	ldr	r3, [r3, #28]
 800a0c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a0c8:	429a      	cmp	r2, r3
 800a0ca:	d908      	bls.n	800a0de <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a0cc:	4b61      	ldr	r3, [pc, #388]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0ce:	69db      	ldr	r3, [r3, #28]
 800a0d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	699b      	ldr	r3, [r3, #24]
 800a0d8:	495e      	ldr	r1, [pc, #376]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	f003 0320 	and.w	r3, r3, #32
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d010      	beq.n	800a10c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	69da      	ldr	r2, [r3, #28]
 800a0ee:	4b59      	ldr	r3, [pc, #356]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0f0:	6a1b      	ldr	r3, [r3, #32]
 800a0f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a0f6:	429a      	cmp	r2, r3
 800a0f8:	d908      	bls.n	800a10c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a0fa:	4b56      	ldr	r3, [pc, #344]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a0fc:	6a1b      	ldr	r3, [r3, #32]
 800a0fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	69db      	ldr	r3, [r3, #28]
 800a106:	4953      	ldr	r1, [pc, #332]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a108:	4313      	orrs	r3, r2
 800a10a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f003 0302 	and.w	r3, r3, #2
 800a114:	2b00      	cmp	r3, #0
 800a116:	d010      	beq.n	800a13a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	68da      	ldr	r2, [r3, #12]
 800a11c:	4b4d      	ldr	r3, [pc, #308]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a11e:	699b      	ldr	r3, [r3, #24]
 800a120:	f003 030f 	and.w	r3, r3, #15
 800a124:	429a      	cmp	r2, r3
 800a126:	d908      	bls.n	800a13a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a128:	4b4a      	ldr	r3, [pc, #296]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f023 020f 	bic.w	r2, r3, #15
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	68db      	ldr	r3, [r3, #12]
 800a134:	4947      	ldr	r1, [pc, #284]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a136:	4313      	orrs	r3, r2
 800a138:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	f003 0301 	and.w	r3, r3, #1
 800a142:	2b00      	cmp	r3, #0
 800a144:	d055      	beq.n	800a1f2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a146:	4b43      	ldr	r3, [pc, #268]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a148:	699b      	ldr	r3, [r3, #24]
 800a14a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	689b      	ldr	r3, [r3, #8]
 800a152:	4940      	ldr	r1, [pc, #256]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a154:	4313      	orrs	r3, r2
 800a156:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	2b02      	cmp	r3, #2
 800a15e:	d107      	bne.n	800a170 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a160:	4b3c      	ldr	r3, [pc, #240]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d121      	bne.n	800a1b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a16c:	2301      	movs	r3, #1
 800a16e:	e0f6      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	2b03      	cmp	r3, #3
 800a176:	d107      	bne.n	800a188 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a178:	4b36      	ldr	r3, [pc, #216]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a180:	2b00      	cmp	r3, #0
 800a182:	d115      	bne.n	800a1b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a184:	2301      	movs	r3, #1
 800a186:	e0ea      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	685b      	ldr	r3, [r3, #4]
 800a18c:	2b01      	cmp	r3, #1
 800a18e:	d107      	bne.n	800a1a0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a190:	4b30      	ldr	r3, [pc, #192]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d109      	bne.n	800a1b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a19c:	2301      	movs	r3, #1
 800a19e:	e0de      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1a0:	4b2c      	ldr	r3, [pc, #176]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0304 	and.w	r3, r3, #4
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e0d6      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a1b0:	4b28      	ldr	r3, [pc, #160]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a1b2:	691b      	ldr	r3, [r3, #16]
 800a1b4:	f023 0207 	bic.w	r2, r3, #7
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	685b      	ldr	r3, [r3, #4]
 800a1bc:	4925      	ldr	r1, [pc, #148]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a1be:	4313      	orrs	r3, r2
 800a1c0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a1c2:	f7fb ff71 	bl	80060a8 <HAL_GetTick>
 800a1c6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1c8:	e00a      	b.n	800a1e0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a1ca:	f7fb ff6d 	bl	80060a8 <HAL_GetTick>
 800a1ce:	4602      	mov	r2, r0
 800a1d0:	697b      	ldr	r3, [r7, #20]
 800a1d2:	1ad3      	subs	r3, r2, r3
 800a1d4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	d901      	bls.n	800a1e0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800a1dc:	2303      	movs	r3, #3
 800a1de:	e0be      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a1e0:	4b1c      	ldr	r3, [pc, #112]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a1e2:	691b      	ldr	r3, [r3, #16]
 800a1e4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	00db      	lsls	r3, r3, #3
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d1eb      	bne.n	800a1ca <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	f003 0302 	and.w	r3, r3, #2
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d010      	beq.n	800a220 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	68da      	ldr	r2, [r3, #12]
 800a202:	4b14      	ldr	r3, [pc, #80]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a204:	699b      	ldr	r3, [r3, #24]
 800a206:	f003 030f 	and.w	r3, r3, #15
 800a20a:	429a      	cmp	r2, r3
 800a20c:	d208      	bcs.n	800a220 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a20e:	4b11      	ldr	r3, [pc, #68]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a210:	699b      	ldr	r3, [r3, #24]
 800a212:	f023 020f 	bic.w	r2, r3, #15
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	490e      	ldr	r1, [pc, #56]	; (800a254 <HAL_RCC_ClockConfig+0x244>)
 800a21c:	4313      	orrs	r3, r2
 800a21e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a220:	4b0b      	ldr	r3, [pc, #44]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f003 030f 	and.w	r3, r3, #15
 800a228:	683a      	ldr	r2, [r7, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d214      	bcs.n	800a258 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a22e:	4b08      	ldr	r3, [pc, #32]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	f023 020f 	bic.w	r2, r3, #15
 800a236:	4906      	ldr	r1, [pc, #24]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	4313      	orrs	r3, r2
 800a23c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a23e:	4b04      	ldr	r3, [pc, #16]	; (800a250 <HAL_RCC_ClockConfig+0x240>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	f003 030f 	and.w	r3, r3, #15
 800a246:	683a      	ldr	r2, [r7, #0]
 800a248:	429a      	cmp	r2, r3
 800a24a:	d005      	beq.n	800a258 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e086      	b.n	800a35e <HAL_RCC_ClockConfig+0x34e>
 800a250:	52002000 	.word	0x52002000
 800a254:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	f003 0304 	and.w	r3, r3, #4
 800a260:	2b00      	cmp	r3, #0
 800a262:	d010      	beq.n	800a286 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	691a      	ldr	r2, [r3, #16]
 800a268:	4b3f      	ldr	r3, [pc, #252]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a26a:	699b      	ldr	r3, [r3, #24]
 800a26c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a270:	429a      	cmp	r2, r3
 800a272:	d208      	bcs.n	800a286 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a274:	4b3c      	ldr	r3, [pc, #240]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a276:	699b      	ldr	r3, [r3, #24]
 800a278:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	691b      	ldr	r3, [r3, #16]
 800a280:	4939      	ldr	r1, [pc, #228]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a282:	4313      	orrs	r3, r2
 800a284:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0308 	and.w	r3, r3, #8
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d010      	beq.n	800a2b4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	695a      	ldr	r2, [r3, #20]
 800a296:	4b34      	ldr	r3, [pc, #208]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a298:	69db      	ldr	r3, [r3, #28]
 800a29a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a29e:	429a      	cmp	r2, r3
 800a2a0:	d208      	bcs.n	800a2b4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a2a2:	4b31      	ldr	r3, [pc, #196]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a2a4:	69db      	ldr	r3, [r3, #28]
 800a2a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	695b      	ldr	r3, [r3, #20]
 800a2ae:	492e      	ldr	r1, [pc, #184]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a2b0:	4313      	orrs	r3, r2
 800a2b2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f003 0310 	and.w	r3, r3, #16
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d010      	beq.n	800a2e2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	699a      	ldr	r2, [r3, #24]
 800a2c4:	4b28      	ldr	r3, [pc, #160]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a2c6:	69db      	ldr	r3, [r3, #28]
 800a2c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a2cc:	429a      	cmp	r2, r3
 800a2ce:	d208      	bcs.n	800a2e2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a2d0:	4b25      	ldr	r3, [pc, #148]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a2d2:	69db      	ldr	r3, [r3, #28]
 800a2d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	699b      	ldr	r3, [r3, #24]
 800a2dc:	4922      	ldr	r1, [pc, #136]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f003 0320 	and.w	r3, r3, #32
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d010      	beq.n	800a310 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	69da      	ldr	r2, [r3, #28]
 800a2f2:	4b1d      	ldr	r3, [pc, #116]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a2f4:	6a1b      	ldr	r3, [r3, #32]
 800a2f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a2fa:	429a      	cmp	r2, r3
 800a2fc:	d208      	bcs.n	800a310 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800a2fe:	4b1a      	ldr	r3, [pc, #104]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a300:	6a1b      	ldr	r3, [r3, #32]
 800a302:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	69db      	ldr	r3, [r3, #28]
 800a30a:	4917      	ldr	r1, [pc, #92]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a30c:	4313      	orrs	r3, r2
 800a30e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a310:	f000 f834 	bl	800a37c <HAL_RCC_GetSysClockFreq>
 800a314:	4602      	mov	r2, r0
 800a316:	4b14      	ldr	r3, [pc, #80]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a318:	699b      	ldr	r3, [r3, #24]
 800a31a:	0a1b      	lsrs	r3, r3, #8
 800a31c:	f003 030f 	and.w	r3, r3, #15
 800a320:	4912      	ldr	r1, [pc, #72]	; (800a36c <HAL_RCC_ClockConfig+0x35c>)
 800a322:	5ccb      	ldrb	r3, [r1, r3]
 800a324:	f003 031f 	and.w	r3, r3, #31
 800a328:	fa22 f303 	lsr.w	r3, r2, r3
 800a32c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a32e:	4b0e      	ldr	r3, [pc, #56]	; (800a368 <HAL_RCC_ClockConfig+0x358>)
 800a330:	699b      	ldr	r3, [r3, #24]
 800a332:	f003 030f 	and.w	r3, r3, #15
 800a336:	4a0d      	ldr	r2, [pc, #52]	; (800a36c <HAL_RCC_ClockConfig+0x35c>)
 800a338:	5cd3      	ldrb	r3, [r2, r3]
 800a33a:	f003 031f 	and.w	r3, r3, #31
 800a33e:	693a      	ldr	r2, [r7, #16]
 800a340:	fa22 f303 	lsr.w	r3, r2, r3
 800a344:	4a0a      	ldr	r2, [pc, #40]	; (800a370 <HAL_RCC_ClockConfig+0x360>)
 800a346:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a348:	4a0a      	ldr	r2, [pc, #40]	; (800a374 <HAL_RCC_ClockConfig+0x364>)
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800a34e:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <HAL_RCC_ClockConfig+0x368>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4618      	mov	r0, r3
 800a354:	f7fb fe5e 	bl	8006014 <HAL_InitTick>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a35e:	4618      	mov	r0, r3
 800a360:	3718      	adds	r7, #24
 800a362:	46bd      	mov	sp, r7
 800a364:	bd80      	pop	{r7, pc}
 800a366:	bf00      	nop
 800a368:	58024400 	.word	0x58024400
 800a36c:	0800fa38 	.word	0x0800fa38
 800a370:	24000008 	.word	0x24000008
 800a374:	24000004 	.word	0x24000004
 800a378:	2400001c 	.word	0x2400001c

0800a37c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b089      	sub	sp, #36	; 0x24
 800a380:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a382:	4bb3      	ldr	r3, [pc, #716]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a384:	691b      	ldr	r3, [r3, #16]
 800a386:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a38a:	2b18      	cmp	r3, #24
 800a38c:	f200 8155 	bhi.w	800a63a <HAL_RCC_GetSysClockFreq+0x2be>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3fd 	.word	0x0800a3fd
 800a39c:	0800a63b 	.word	0x0800a63b
 800a3a0:	0800a63b 	.word	0x0800a63b
 800a3a4:	0800a63b 	.word	0x0800a63b
 800a3a8:	0800a63b 	.word	0x0800a63b
 800a3ac:	0800a63b 	.word	0x0800a63b
 800a3b0:	0800a63b 	.word	0x0800a63b
 800a3b4:	0800a63b 	.word	0x0800a63b
 800a3b8:	0800a423 	.word	0x0800a423
 800a3bc:	0800a63b 	.word	0x0800a63b
 800a3c0:	0800a63b 	.word	0x0800a63b
 800a3c4:	0800a63b 	.word	0x0800a63b
 800a3c8:	0800a63b 	.word	0x0800a63b
 800a3cc:	0800a63b 	.word	0x0800a63b
 800a3d0:	0800a63b 	.word	0x0800a63b
 800a3d4:	0800a63b 	.word	0x0800a63b
 800a3d8:	0800a429 	.word	0x0800a429
 800a3dc:	0800a63b 	.word	0x0800a63b
 800a3e0:	0800a63b 	.word	0x0800a63b
 800a3e4:	0800a63b 	.word	0x0800a63b
 800a3e8:	0800a63b 	.word	0x0800a63b
 800a3ec:	0800a63b 	.word	0x0800a63b
 800a3f0:	0800a63b 	.word	0x0800a63b
 800a3f4:	0800a63b 	.word	0x0800a63b
 800a3f8:	0800a42f 	.word	0x0800a42f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a3fc:	4b94      	ldr	r3, [pc, #592]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	f003 0320 	and.w	r3, r3, #32
 800a404:	2b00      	cmp	r3, #0
 800a406:	d009      	beq.n	800a41c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a408:	4b91      	ldr	r3, [pc, #580]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	08db      	lsrs	r3, r3, #3
 800a40e:	f003 0303 	and.w	r3, r3, #3
 800a412:	4a90      	ldr	r2, [pc, #576]	; (800a654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a414:	fa22 f303 	lsr.w	r3, r2, r3
 800a418:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800a41a:	e111      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a41c:	4b8d      	ldr	r3, [pc, #564]	; (800a654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a41e:	61bb      	str	r3, [r7, #24]
    break;
 800a420:	e10e      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800a422:	4b8d      	ldr	r3, [pc, #564]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a424:	61bb      	str	r3, [r7, #24]
    break;
 800a426:	e10b      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800a428:	4b8c      	ldr	r3, [pc, #560]	; (800a65c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a42a:	61bb      	str	r3, [r7, #24]
    break;
 800a42c:	e108      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a42e:	4b88      	ldr	r3, [pc, #544]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a432:	f003 0303 	and.w	r3, r3, #3
 800a436:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800a438:	4b85      	ldr	r3, [pc, #532]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	091b      	lsrs	r3, r3, #4
 800a43e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a442:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a444:	4b82      	ldr	r3, [pc, #520]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a448:	f003 0301 	and.w	r3, r3, #1
 800a44c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800a44e:	4b80      	ldr	r3, [pc, #512]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a452:	08db      	lsrs	r3, r3, #3
 800a454:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	fb02 f303 	mul.w	r3, r2, r3
 800a45e:	ee07 3a90 	vmov	s15, r3
 800a462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a466:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	2b00      	cmp	r3, #0
 800a46e:	f000 80e1 	beq.w	800a634 <HAL_RCC_GetSysClockFreq+0x2b8>
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	2b02      	cmp	r3, #2
 800a476:	f000 8083 	beq.w	800a580 <HAL_RCC_GetSysClockFreq+0x204>
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	2b02      	cmp	r3, #2
 800a47e:	f200 80a1 	bhi.w	800a5c4 <HAL_RCC_GetSysClockFreq+0x248>
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	2b00      	cmp	r3, #0
 800a486:	d003      	beq.n	800a490 <HAL_RCC_GetSysClockFreq+0x114>
 800a488:	697b      	ldr	r3, [r7, #20]
 800a48a:	2b01      	cmp	r3, #1
 800a48c:	d056      	beq.n	800a53c <HAL_RCC_GetSysClockFreq+0x1c0>
 800a48e:	e099      	b.n	800a5c4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a490:	4b6f      	ldr	r3, [pc, #444]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f003 0320 	and.w	r3, r3, #32
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d02d      	beq.n	800a4f8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800a49c:	4b6c      	ldr	r3, [pc, #432]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	08db      	lsrs	r3, r3, #3
 800a4a2:	f003 0303 	and.w	r3, r3, #3
 800a4a6:	4a6b      	ldr	r2, [pc, #428]	; (800a654 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a4a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4ac:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	ee07 3a90 	vmov	s15, r3
 800a4b4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4b8:	693b      	ldr	r3, [r7, #16]
 800a4ba:	ee07 3a90 	vmov	s15, r3
 800a4be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a4c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a4c6:	4b62      	ldr	r3, [pc, #392]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a4c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ce:	ee07 3a90 	vmov	s15, r3
 800a4d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a4d6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a4da:	eddf 5a61 	vldr	s11, [pc, #388]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a4de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a4e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a4e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a4ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a4f2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800a4f6:	e087      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	ee07 3a90 	vmov	s15, r3
 800a4fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a502:	eddf 6a58 	vldr	s13, [pc, #352]	; 800a664 <HAL_RCC_GetSysClockFreq+0x2e8>
 800a506:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a50a:	4b51      	ldr	r3, [pc, #324]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a50c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a50e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a512:	ee07 3a90 	vmov	s15, r3
 800a516:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a51a:	ed97 6a02 	vldr	s12, [r7, #8]
 800a51e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a522:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a526:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a52a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a532:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a536:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a53a:	e065      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	ee07 3a90 	vmov	s15, r3
 800a542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a546:	eddf 6a48 	vldr	s13, [pc, #288]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a54a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a54e:	4b40      	ldr	r3, [pc, #256]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a552:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a556:	ee07 3a90 	vmov	s15, r3
 800a55a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a55e:	ed97 6a02 	vldr	s12, [r7, #8]
 800a562:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a566:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a56a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a56e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a572:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a57a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a57e:	e043      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a580:	693b      	ldr	r3, [r7, #16]
 800a582:	ee07 3a90 	vmov	s15, r3
 800a586:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a58a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800a66c <HAL_RCC_GetSysClockFreq+0x2f0>
 800a58e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a592:	4b2f      	ldr	r3, [pc, #188]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a59a:	ee07 3a90 	vmov	s15, r3
 800a59e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5a2:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5a6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a5be:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a5c2:	e021      	b.n	800a608 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800a5c4:	693b      	ldr	r3, [r7, #16]
 800a5c6:	ee07 3a90 	vmov	s15, r3
 800a5ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a5ce:	eddf 6a26 	vldr	s13, [pc, #152]	; 800a668 <HAL_RCC_GetSysClockFreq+0x2ec>
 800a5d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a5d6:	4b1e      	ldr	r3, [pc, #120]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a5d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a5de:	ee07 3a90 	vmov	s15, r3
 800a5e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a5e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800a5ea:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800a660 <HAL_RCC_GetSysClockFreq+0x2e4>
 800a5ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a5f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a5f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800a5fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a5fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a602:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a606:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800a608:	4b11      	ldr	r3, [pc, #68]	; (800a650 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a60a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a60c:	0a5b      	lsrs	r3, r3, #9
 800a60e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a612:	3301      	adds	r3, #1
 800a614:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	ee07 3a90 	vmov	s15, r3
 800a61c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800a620:	edd7 6a07 	vldr	s13, [r7, #28]
 800a624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a62c:	ee17 3a90 	vmov	r3, s15
 800a630:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800a632:	e005      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800a634:	2300      	movs	r3, #0
 800a636:	61bb      	str	r3, [r7, #24]
    break;
 800a638:	e002      	b.n	800a640 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800a63a:	4b07      	ldr	r3, [pc, #28]	; (800a658 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a63c:	61bb      	str	r3, [r7, #24]
    break;
 800a63e:	bf00      	nop
  }

  return sysclockfreq;
 800a640:	69bb      	ldr	r3, [r7, #24]
}
 800a642:	4618      	mov	r0, r3
 800a644:	3724      	adds	r7, #36	; 0x24
 800a646:	46bd      	mov	sp, r7
 800a648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a64c:	4770      	bx	lr
 800a64e:	bf00      	nop
 800a650:	58024400 	.word	0x58024400
 800a654:	03d09000 	.word	0x03d09000
 800a658:	003d0900 	.word	0x003d0900
 800a65c:	007a1200 	.word	0x007a1200
 800a660:	46000000 	.word	0x46000000
 800a664:	4c742400 	.word	0x4c742400
 800a668:	4a742400 	.word	0x4a742400
 800a66c:	4af42400 	.word	0x4af42400

0800a670 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a670:	b580      	push	{r7, lr}
 800a672:	b082      	sub	sp, #8
 800a674:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a676:	f7ff fe81 	bl	800a37c <HAL_RCC_GetSysClockFreq>
 800a67a:	4602      	mov	r2, r0
 800a67c:	4b10      	ldr	r3, [pc, #64]	; (800a6c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a67e:	699b      	ldr	r3, [r3, #24]
 800a680:	0a1b      	lsrs	r3, r3, #8
 800a682:	f003 030f 	and.w	r3, r3, #15
 800a686:	490f      	ldr	r1, [pc, #60]	; (800a6c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a688:	5ccb      	ldrb	r3, [r1, r3]
 800a68a:	f003 031f 	and.w	r3, r3, #31
 800a68e:	fa22 f303 	lsr.w	r3, r2, r3
 800a692:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a694:	4b0a      	ldr	r3, [pc, #40]	; (800a6c0 <HAL_RCC_GetHCLKFreq+0x50>)
 800a696:	699b      	ldr	r3, [r3, #24]
 800a698:	f003 030f 	and.w	r3, r3, #15
 800a69c:	4a09      	ldr	r2, [pc, #36]	; (800a6c4 <HAL_RCC_GetHCLKFreq+0x54>)
 800a69e:	5cd3      	ldrb	r3, [r2, r3]
 800a6a0:	f003 031f 	and.w	r3, r3, #31
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	fa22 f303 	lsr.w	r3, r2, r3
 800a6aa:	4a07      	ldr	r2, [pc, #28]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6ac:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a6ae:	4a07      	ldr	r2, [pc, #28]	; (800a6cc <HAL_RCC_GetHCLKFreq+0x5c>)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800a6b4:	4b04      	ldr	r3, [pc, #16]	; (800a6c8 <HAL_RCC_GetHCLKFreq+0x58>)
 800a6b6:	681b      	ldr	r3, [r3, #0]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	3708      	adds	r7, #8
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd80      	pop	{r7, pc}
 800a6c0:	58024400 	.word	0x58024400
 800a6c4:	0800fa38 	.word	0x0800fa38
 800a6c8:	24000008 	.word	0x24000008
 800a6cc:	24000004 	.word	0x24000004

0800a6d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a6d4:	f7ff ffcc 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a6d8:	4602      	mov	r2, r0
 800a6da:	4b06      	ldr	r3, [pc, #24]	; (800a6f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a6dc:	69db      	ldr	r3, [r3, #28]
 800a6de:	091b      	lsrs	r3, r3, #4
 800a6e0:	f003 0307 	and.w	r3, r3, #7
 800a6e4:	4904      	ldr	r1, [pc, #16]	; (800a6f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a6e6:	5ccb      	ldrb	r3, [r1, r3]
 800a6e8:	f003 031f 	and.w	r3, r3, #31
 800a6ec:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	bd80      	pop	{r7, pc}
 800a6f4:	58024400 	.word	0x58024400
 800a6f8:	0800fa38 	.word	0x0800fa38

0800a6fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a700:	f7ff ffb6 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800a704:	4602      	mov	r2, r0
 800a706:	4b06      	ldr	r3, [pc, #24]	; (800a720 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a708:	69db      	ldr	r3, [r3, #28]
 800a70a:	0a1b      	lsrs	r3, r3, #8
 800a70c:	f003 0307 	and.w	r3, r3, #7
 800a710:	4904      	ldr	r1, [pc, #16]	; (800a724 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a712:	5ccb      	ldrb	r3, [r1, r3]
 800a714:	f003 031f 	and.w	r3, r3, #31
 800a718:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a71c:	4618      	mov	r0, r3
 800a71e:	bd80      	pop	{r7, pc}
 800a720:	58024400 	.word	0x58024400
 800a724:	0800fa38 	.word	0x0800fa38

0800a728 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a730:	2300      	movs	r3, #0
 800a732:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a734:	2300      	movs	r3, #0
 800a736:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a740:	2b00      	cmp	r3, #0
 800a742:	d03f      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a748:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a74c:	d02a      	beq.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800a74e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a752:	d824      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a754:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a758:	d018      	beq.n	800a78c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800a75a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a75e:	d81e      	bhi.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x76>
 800a760:	2b00      	cmp	r3, #0
 800a762:	d003      	beq.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a768:	d007      	beq.n	800a77a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800a76a:	e018      	b.n	800a79e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a76c:	4ba3      	ldr	r3, [pc, #652]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a76e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a770:	4aa2      	ldr	r2, [pc, #648]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a772:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a776:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a778:	e015      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	3304      	adds	r3, #4
 800a77e:	2102      	movs	r1, #2
 800a780:	4618      	mov	r0, r3
 800a782:	f001 f9d5 	bl	800bb30 <RCCEx_PLL2_Config>
 800a786:	4603      	mov	r3, r0
 800a788:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a78a:	e00c      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	3324      	adds	r3, #36	; 0x24
 800a790:	2102      	movs	r1, #2
 800a792:	4618      	mov	r0, r3
 800a794:	f001 fa7e 	bl	800bc94 <RCCEx_PLL3_Config>
 800a798:	4603      	mov	r3, r0
 800a79a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800a79c:	e003      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a79e:	2301      	movs	r3, #1
 800a7a0:	75fb      	strb	r3, [r7, #23]
      break;
 800a7a2:	e000      	b.n	800a7a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800a7a4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a7a6:	7dfb      	ldrb	r3, [r7, #23]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d109      	bne.n	800a7c0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a7ac:	4b93      	ldr	r3, [pc, #588]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a7b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a7b8:	4990      	ldr	r1, [pc, #576]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7ba:	4313      	orrs	r3, r2
 800a7bc:	650b      	str	r3, [r1, #80]	; 0x50
 800a7be:	e001      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a7c0:	7dfb      	ldrb	r3, [r7, #23]
 800a7c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a7c4:	687b      	ldr	r3, [r7, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
 800a7c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d03d      	beq.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d4:	2b04      	cmp	r3, #4
 800a7d6:	d826      	bhi.n	800a826 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800a7d8:	a201      	add	r2, pc, #4	; (adr r2, 800a7e0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800a7da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7de:	bf00      	nop
 800a7e0:	0800a7f5 	.word	0x0800a7f5
 800a7e4:	0800a803 	.word	0x0800a803
 800a7e8:	0800a815 	.word	0x0800a815
 800a7ec:	0800a82d 	.word	0x0800a82d
 800a7f0:	0800a82d 	.word	0x0800a82d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f4:	4b81      	ldr	r3, [pc, #516]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7f8:	4a80      	ldr	r2, [pc, #512]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a7fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7fe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a800:	e015      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	3304      	adds	r3, #4
 800a806:	2100      	movs	r1, #0
 800a808:	4618      	mov	r0, r3
 800a80a:	f001 f991 	bl	800bb30 <RCCEx_PLL2_Config>
 800a80e:	4603      	mov	r3, r0
 800a810:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a812:	e00c      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	3324      	adds	r3, #36	; 0x24
 800a818:	2100      	movs	r1, #0
 800a81a:	4618      	mov	r0, r3
 800a81c:	f001 fa3a 	bl	800bc94 <RCCEx_PLL3_Config>
 800a820:	4603      	mov	r3, r0
 800a822:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a824:	e003      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a826:	2301      	movs	r3, #1
 800a828:	75fb      	strb	r3, [r7, #23]
      break;
 800a82a:	e000      	b.n	800a82e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800a82c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a82e:	7dfb      	ldrb	r3, [r7, #23]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d109      	bne.n	800a848 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a834:	4b71      	ldr	r3, [pc, #452]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a836:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a838:	f023 0207 	bic.w	r2, r3, #7
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a840:	496e      	ldr	r1, [pc, #440]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a842:	4313      	orrs	r3, r2
 800a844:	650b      	str	r3, [r1, #80]	; 0x50
 800a846:	e001      	b.n	800a84c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a848:	7dfb      	ldrb	r3, [r7, #23]
 800a84a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a854:	2b00      	cmp	r3, #0
 800a856:	d042      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a85c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a860:	d02b      	beq.n	800a8ba <HAL_RCCEx_PeriphCLKConfig+0x192>
 800a862:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a866:	d825      	bhi.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a868:	2bc0      	cmp	r3, #192	; 0xc0
 800a86a:	d028      	beq.n	800a8be <HAL_RCCEx_PeriphCLKConfig+0x196>
 800a86c:	2bc0      	cmp	r3, #192	; 0xc0
 800a86e:	d821      	bhi.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a870:	2b80      	cmp	r3, #128	; 0x80
 800a872:	d016      	beq.n	800a8a2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800a874:	2b80      	cmp	r3, #128	; 0x80
 800a876:	d81d      	bhi.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d002      	beq.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800a87c:	2b40      	cmp	r3, #64	; 0x40
 800a87e:	d007      	beq.n	800a890 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800a880:	e018      	b.n	800a8b4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a882:	4b5e      	ldr	r3, [pc, #376]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a886:	4a5d      	ldr	r2, [pc, #372]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a888:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a88c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a88e:	e017      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	3304      	adds	r3, #4
 800a894:	2100      	movs	r1, #0
 800a896:	4618      	mov	r0, r3
 800a898:	f001 f94a 	bl	800bb30 <RCCEx_PLL2_Config>
 800a89c:	4603      	mov	r3, r0
 800a89e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a8a0:	e00e      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	3324      	adds	r3, #36	; 0x24
 800a8a6:	2100      	movs	r1, #0
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f001 f9f3 	bl	800bc94 <RCCEx_PLL3_Config>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800a8b2:	e005      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	75fb      	strb	r3, [r7, #23]
      break;
 800a8b8:	e002      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a8ba:	bf00      	nop
 800a8bc:	e000      	b.n	800a8c0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800a8be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a8c0:	7dfb      	ldrb	r3, [r7, #23]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d109      	bne.n	800a8da <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a8c6:	4b4d      	ldr	r3, [pc, #308]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a8ca:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8d2:	494a      	ldr	r1, [pc, #296]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a8d4:	4313      	orrs	r3, r2
 800a8d6:	650b      	str	r3, [r1, #80]	; 0x50
 800a8d8:	e001      	b.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
 800a8dc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d049      	beq.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a8f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8f4:	d030      	beq.n	800a958 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800a8f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a8fa:	d82a      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a8fc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a900:	d02c      	beq.n	800a95c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800a902:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800a906:	d824      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a908:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a90c:	d018      	beq.n	800a940 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800a90e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a912:	d81e      	bhi.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800a914:	2b00      	cmp	r3, #0
 800a916:	d003      	beq.n	800a920 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800a918:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a91c:	d007      	beq.n	800a92e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800a91e:	e018      	b.n	800a952 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a920:	4b36      	ldr	r3, [pc, #216]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a924:	4a35      	ldr	r2, [pc, #212]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a92c:	e017      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	3304      	adds	r3, #4
 800a932:	2100      	movs	r1, #0
 800a934:	4618      	mov	r0, r3
 800a936:	f001 f8fb 	bl	800bb30 <RCCEx_PLL2_Config>
 800a93a:	4603      	mov	r3, r0
 800a93c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a93e:	e00e      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	3324      	adds	r3, #36	; 0x24
 800a944:	2100      	movs	r1, #0
 800a946:	4618      	mov	r0, r3
 800a948:	f001 f9a4 	bl	800bc94 <RCCEx_PLL3_Config>
 800a94c:	4603      	mov	r3, r0
 800a94e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a950:	e005      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a952:	2301      	movs	r3, #1
 800a954:	75fb      	strb	r3, [r7, #23]
      break;
 800a956:	e002      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a958:	bf00      	nop
 800a95a:	e000      	b.n	800a95e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800a95c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a95e:	7dfb      	ldrb	r3, [r7, #23]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d10a      	bne.n	800a97a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a964:	4b25      	ldr	r3, [pc, #148]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a968:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a972:	4922      	ldr	r1, [pc, #136]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a974:	4313      	orrs	r3, r2
 800a976:	658b      	str	r3, [r1, #88]	; 0x58
 800a978:	e001      	b.n	800a97e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a97a:	7dfb      	ldrb	r3, [r7, #23]
 800a97c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a986:	2b00      	cmp	r3, #0
 800a988:	d04b      	beq.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a990:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a994:	d030      	beq.n	800a9f8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800a996:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a99a:	d82a      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a99c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9a0:	d02e      	beq.n	800aa00 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800a9a2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800a9a6:	d824      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a9a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9ac:	d018      	beq.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800a9ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a9b2:	d81e      	bhi.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d003      	beq.n	800a9c0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800a9b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800a9bc:	d007      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800a9be:	e018      	b.n	800a9f2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9c0:	4b0e      	ldr	r3, [pc, #56]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c4:	4a0d      	ldr	r2, [pc, #52]	; (800a9fc <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800a9c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a9ca:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9cc:	e019      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	f001 f8ab 	bl	800bb30 <RCCEx_PLL2_Config>
 800a9da:	4603      	mov	r3, r0
 800a9dc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800a9de:	e010      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	3324      	adds	r3, #36	; 0x24
 800a9e4:	2100      	movs	r1, #0
 800a9e6:	4618      	mov	r0, r3
 800a9e8:	f001 f954 	bl	800bc94 <RCCEx_PLL3_Config>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800a9f0:	e007      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f6:	e004      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800a9f8:	bf00      	nop
 800a9fa:	e002      	b.n	800aa02 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800a9fc:	58024400 	.word	0x58024400
      break;
 800aa00:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa02:	7dfb      	ldrb	r3, [r7, #23]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d10a      	bne.n	800aa1e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800aa08:	4b99      	ldr	r3, [pc, #612]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa0c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800aa16:	4996      	ldr	r1, [pc, #600]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	658b      	str	r3, [r1, #88]	; 0x58
 800aa1c:	e001      	b.n	800aa22 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa1e:	7dfb      	ldrb	r3, [r7, #23]
 800aa20:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d032      	beq.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa32:	2b30      	cmp	r3, #48	; 0x30
 800aa34:	d01c      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800aa36:	2b30      	cmp	r3, #48	; 0x30
 800aa38:	d817      	bhi.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800aa3a:	2b20      	cmp	r3, #32
 800aa3c:	d00c      	beq.n	800aa58 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800aa3e:	2b20      	cmp	r3, #32
 800aa40:	d813      	bhi.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d016      	beq.n	800aa74 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800aa46:	2b10      	cmp	r3, #16
 800aa48:	d10f      	bne.n	800aa6a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa4a:	4b89      	ldr	r3, [pc, #548]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa4e:	4a88      	ldr	r2, [pc, #544]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aa54:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aa56:	e00e      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	3304      	adds	r3, #4
 800aa5c:	2102      	movs	r1, #2
 800aa5e:	4618      	mov	r0, r3
 800aa60:	f001 f866 	bl	800bb30 <RCCEx_PLL2_Config>
 800aa64:	4603      	mov	r3, r0
 800aa66:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800aa68:	e005      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800aa6a:	2301      	movs	r3, #1
 800aa6c:	75fb      	strb	r3, [r7, #23]
      break;
 800aa6e:	e002      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800aa70:	bf00      	nop
 800aa72:	e000      	b.n	800aa76 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800aa74:	bf00      	nop
    }

    if(ret == HAL_OK)
 800aa76:	7dfb      	ldrb	r3, [r7, #23]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d109      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800aa7c:	4b7c      	ldr	r3, [pc, #496]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa80:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800aa88:	4979      	ldr	r1, [pc, #484]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800aa8e:	e001      	b.n	800aa94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aa90:	7dfb      	ldrb	r3, [r7, #23]
 800aa92:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d047      	beq.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aaa4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaa8:	d030      	beq.n	800ab0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800aaaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800aaae:	d82a      	bhi.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800aab0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aab4:	d02c      	beq.n	800ab10 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800aab6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800aaba:	d824      	bhi.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800aabc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac0:	d018      	beq.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800aac2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac6:	d81e      	bhi.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d003      	beq.n	800aad4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800aacc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad0:	d007      	beq.n	800aae2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800aad2:	e018      	b.n	800ab06 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aad4:	4b66      	ldr	r3, [pc, #408]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aad8:	4a65      	ldr	r2, [pc, #404]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800aada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aade:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aae0:	e017      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	3304      	adds	r3, #4
 800aae6:	2100      	movs	r1, #0
 800aae8:	4618      	mov	r0, r3
 800aaea:	f001 f821 	bl	800bb30 <RCCEx_PLL2_Config>
 800aaee:	4603      	mov	r3, r0
 800aaf0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800aaf2:	e00e      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	3324      	adds	r3, #36	; 0x24
 800aaf8:	2100      	movs	r1, #0
 800aafa:	4618      	mov	r0, r3
 800aafc:	f001 f8ca 	bl	800bc94 <RCCEx_PLL3_Config>
 800ab00:	4603      	mov	r3, r0
 800ab02:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ab04:	e005      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	75fb      	strb	r3, [r7, #23]
      break;
 800ab0a:	e002      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ab0c:	bf00      	nop
 800ab0e:	e000      	b.n	800ab12 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ab10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ab12:	7dfb      	ldrb	r3, [r7, #23]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d109      	bne.n	800ab2c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ab18:	4b55      	ldr	r3, [pc, #340]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab1c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ab24:	4952      	ldr	r1, [pc, #328]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ab26:	4313      	orrs	r3, r2
 800ab28:	650b      	str	r3, [r1, #80]	; 0x50
 800ab2a:	e001      	b.n	800ab30 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab2c:	7dfb      	ldrb	r3, [r7, #23]
 800ab2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d049      	beq.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab44:	d02e      	beq.n	800aba4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ab46:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ab4a:	d828      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ab4c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab50:	d02a      	beq.n	800aba8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ab52:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ab56:	d822      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ab58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab5c:	d026      	beq.n	800abac <HAL_RCCEx_PeriphCLKConfig+0x484>
 800ab5e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ab62:	d81c      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ab64:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab68:	d010      	beq.n	800ab8c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ab6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ab6e:	d816      	bhi.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d01d      	beq.n	800abb0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800ab74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ab78:	d111      	bne.n	800ab9e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	3304      	adds	r3, #4
 800ab7e:	2101      	movs	r1, #1
 800ab80:	4618      	mov	r0, r3
 800ab82:	f000 ffd5 	bl	800bb30 <RCCEx_PLL2_Config>
 800ab86:	4603      	mov	r3, r0
 800ab88:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab8a:	e012      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	3324      	adds	r3, #36	; 0x24
 800ab90:	2101      	movs	r1, #1
 800ab92:	4618      	mov	r0, r3
 800ab94:	f001 f87e 	bl	800bc94 <RCCEx_PLL3_Config>
 800ab98:	4603      	mov	r3, r0
 800ab9a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ab9c:	e009      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ab9e:	2301      	movs	r3, #1
 800aba0:	75fb      	strb	r3, [r7, #23]
      break;
 800aba2:	e006      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aba4:	bf00      	nop
 800aba6:	e004      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800aba8:	bf00      	nop
 800abaa:	e002      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800abac:	bf00      	nop
 800abae:	e000      	b.n	800abb2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800abb0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800abb2:	7dfb      	ldrb	r3, [r7, #23]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d109      	bne.n	800abcc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800abb8:	4b2d      	ldr	r3, [pc, #180]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800abbc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abc4:	492a      	ldr	r1, [pc, #168]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800abc6:	4313      	orrs	r3, r2
 800abc8:	650b      	str	r3, [r1, #80]	; 0x50
 800abca:	e001      	b.n	800abd0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abcc:	7dfb      	ldrb	r3, [r7, #23]
 800abce:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d04d      	beq.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800abe2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abe6:	d02e      	beq.n	800ac46 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800abe8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abec:	d828      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800abee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf2:	d02a      	beq.n	800ac4a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800abf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abf8:	d822      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800abfa:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800abfe:	d026      	beq.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800ac00:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ac04:	d81c      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ac06:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac0a:	d010      	beq.n	800ac2e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800ac0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac10:	d816      	bhi.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d01d      	beq.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800ac16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac1a:	d111      	bne.n	800ac40 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	3304      	adds	r3, #4
 800ac20:	2101      	movs	r1, #1
 800ac22:	4618      	mov	r0, r3
 800ac24:	f000 ff84 	bl	800bb30 <RCCEx_PLL2_Config>
 800ac28:	4603      	mov	r3, r0
 800ac2a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ac2c:	e012      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	3324      	adds	r3, #36	; 0x24
 800ac32:	2101      	movs	r1, #1
 800ac34:	4618      	mov	r0, r3
 800ac36:	f001 f82d 	bl	800bc94 <RCCEx_PLL3_Config>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800ac3e:	e009      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800ac40:	2301      	movs	r3, #1
 800ac42:	75fb      	strb	r3, [r7, #23]
      break;
 800ac44:	e006      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ac46:	bf00      	nop
 800ac48:	e004      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ac4a:	bf00      	nop
 800ac4c:	e002      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ac4e:	bf00      	nop
 800ac50:	e000      	b.n	800ac54 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800ac52:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ac54:	7dfb      	ldrb	r3, [r7, #23]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d10c      	bne.n	800ac74 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ac5a:	4b05      	ldr	r3, [pc, #20]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac5e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800ac68:	4901      	ldr	r1, [pc, #4]	; (800ac70 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	658b      	str	r3, [r1, #88]	; 0x58
 800ac6e:	e003      	b.n	800ac78 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800ac70:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac74:	7dfb      	ldrb	r3, [r7, #23]
 800ac76:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d02f      	beq.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac8c:	d00e      	beq.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x584>
 800ac8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ac92:	d814      	bhi.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x596>
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d015      	beq.n	800acc4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800ac98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ac9c:	d10f      	bne.n	800acbe <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac9e:	4baf      	ldr	r3, [pc, #700]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aca2:	4aae      	ldr	r2, [pc, #696]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800aca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aca8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800acaa:	e00c      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	3304      	adds	r3, #4
 800acb0:	2101      	movs	r1, #1
 800acb2:	4618      	mov	r0, r3
 800acb4:	f000 ff3c 	bl	800bb30 <RCCEx_PLL2_Config>
 800acb8:	4603      	mov	r3, r0
 800acba:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800acbc:	e003      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	75fb      	strb	r3, [r7, #23]
      break;
 800acc2:	e000      	b.n	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800acc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800acc6:	7dfb      	ldrb	r3, [r7, #23]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d109      	bne.n	800ace0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800accc:	4ba3      	ldr	r3, [pc, #652]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800acce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acd0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acd8:	49a0      	ldr	r1, [pc, #640]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800acda:	4313      	orrs	r3, r2
 800acdc:	650b      	str	r3, [r1, #80]	; 0x50
 800acde:	e001      	b.n	800ace4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ace0:	7dfb      	ldrb	r3, [r7, #23]
 800ace2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800acec:	2b00      	cmp	r3, #0
 800acee:	d032      	beq.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf4:	2b03      	cmp	r3, #3
 800acf6:	d81b      	bhi.n	800ad30 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800acf8:	a201      	add	r2, pc, #4	; (adr r2, 800ad00 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800acfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acfe:	bf00      	nop
 800ad00:	0800ad37 	.word	0x0800ad37
 800ad04:	0800ad11 	.word	0x0800ad11
 800ad08:	0800ad1f 	.word	0x0800ad1f
 800ad0c:	0800ad37 	.word	0x0800ad37
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad10:	4b92      	ldr	r3, [pc, #584]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad14:	4a91      	ldr	r2, [pc, #580]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ad1c:	e00c      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	3304      	adds	r3, #4
 800ad22:	2102      	movs	r1, #2
 800ad24:	4618      	mov	r0, r3
 800ad26:	f000 ff03 	bl	800bb30 <RCCEx_PLL2_Config>
 800ad2a:	4603      	mov	r3, r0
 800ad2c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800ad2e:	e003      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	75fb      	strb	r3, [r7, #23]
      break;
 800ad34:	e000      	b.n	800ad38 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800ad36:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ad38:	7dfb      	ldrb	r3, [r7, #23]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d109      	bne.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ad3e:	4b87      	ldr	r3, [pc, #540]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad42:	f023 0203 	bic.w	r2, r3, #3
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ad4a:	4984      	ldr	r1, [pc, #528]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ad4c:	4313      	orrs	r3, r2
 800ad4e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800ad50:	e001      	b.n	800ad56 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ad52:	7dfb      	ldrb	r3, [r7, #23]
 800ad54:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f000 8086 	beq.w	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ad64:	4b7e      	ldr	r3, [pc, #504]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4a7d      	ldr	r2, [pc, #500]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ad6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ad6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ad70:	f7fb f99a 	bl	80060a8 <HAL_GetTick>
 800ad74:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad76:	e009      	b.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ad78:	f7fb f996 	bl	80060a8 <HAL_GetTick>
 800ad7c:	4602      	mov	r2, r0
 800ad7e:	693b      	ldr	r3, [r7, #16]
 800ad80:	1ad3      	subs	r3, r2, r3
 800ad82:	2b64      	cmp	r3, #100	; 0x64
 800ad84:	d902      	bls.n	800ad8c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800ad86:	2303      	movs	r3, #3
 800ad88:	75fb      	strb	r3, [r7, #23]
        break;
 800ad8a:	e005      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ad8c:	4b74      	ldr	r3, [pc, #464]	; (800af60 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d0ef      	beq.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800ad98:	7dfb      	ldrb	r3, [r7, #23]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d166      	bne.n	800ae6c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ad9e:	4b6f      	ldr	r3, [pc, #444]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ada0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ada8:	4053      	eors	r3, r2
 800adaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d013      	beq.n	800adda <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800adb2:	4b6a      	ldr	r3, [pc, #424]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800adb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adba:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800adbc:	4b67      	ldr	r3, [pc, #412]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800adbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adc0:	4a66      	ldr	r2, [pc, #408]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800adc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800adc6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800adc8:	4b64      	ldr	r3, [pc, #400]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800adca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800adcc:	4a63      	ldr	r2, [pc, #396]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800adce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800add2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800add4:	4a61      	ldr	r2, [pc, #388]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ade0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ade4:	d115      	bne.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ade6:	f7fb f95f 	bl	80060a8 <HAL_GetTick>
 800adea:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800adec:	e00b      	b.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800adee:	f7fb f95b 	bl	80060a8 <HAL_GetTick>
 800adf2:	4602      	mov	r2, r0
 800adf4:	693b      	ldr	r3, [r7, #16]
 800adf6:	1ad3      	subs	r3, r2, r3
 800adf8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d902      	bls.n	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800ae00:	2303      	movs	r3, #3
 800ae02:	75fb      	strb	r3, [r7, #23]
            break;
 800ae04:	e005      	b.n	800ae12 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ae06:	4b55      	ldr	r3, [pc, #340]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae0a:	f003 0302 	and.w	r3, r3, #2
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0ed      	beq.n	800adee <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800ae12:	7dfb      	ldrb	r3, [r7, #23]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d126      	bne.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ae26:	d10d      	bne.n	800ae44 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800ae28:	4b4c      	ldr	r3, [pc, #304]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae2a:	691b      	ldr	r3, [r3, #16]
 800ae2c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae36:	0919      	lsrs	r1, r3, #4
 800ae38:	4b4a      	ldr	r3, [pc, #296]	; (800af64 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800ae3a:	400b      	ands	r3, r1
 800ae3c:	4947      	ldr	r1, [pc, #284]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	610b      	str	r3, [r1, #16]
 800ae42:	e005      	b.n	800ae50 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800ae44:	4b45      	ldr	r3, [pc, #276]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae46:	691b      	ldr	r3, [r3, #16]
 800ae48:	4a44      	ldr	r2, [pc, #272]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae4a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800ae4e:	6113      	str	r3, [r2, #16]
 800ae50:	4b42      	ldr	r3, [pc, #264]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800ae5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ae5e:	493f      	ldr	r1, [pc, #252]	; (800af5c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800ae60:	4313      	orrs	r3, r2
 800ae62:	670b      	str	r3, [r1, #112]	; 0x70
 800ae64:	e004      	b.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800ae66:	7dfb      	ldrb	r3, [r7, #23]
 800ae68:	75bb      	strb	r3, [r7, #22]
 800ae6a:	e001      	b.n	800ae70 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae6c:	7dfb      	ldrb	r3, [r7, #23]
 800ae6e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	f003 0301 	and.w	r3, r3, #1
 800ae78:	2b00      	cmp	r3, #0
 800ae7a:	f000 8085 	beq.w	800af88 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ae82:	2b28      	cmp	r3, #40	; 0x28
 800ae84:	d866      	bhi.n	800af54 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800ae86:	a201      	add	r2, pc, #4	; (adr r2, 800ae8c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800ae88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8c:	0800af69 	.word	0x0800af69
 800ae90:	0800af55 	.word	0x0800af55
 800ae94:	0800af55 	.word	0x0800af55
 800ae98:	0800af55 	.word	0x0800af55
 800ae9c:	0800af55 	.word	0x0800af55
 800aea0:	0800af55 	.word	0x0800af55
 800aea4:	0800af55 	.word	0x0800af55
 800aea8:	0800af55 	.word	0x0800af55
 800aeac:	0800af31 	.word	0x0800af31
 800aeb0:	0800af55 	.word	0x0800af55
 800aeb4:	0800af55 	.word	0x0800af55
 800aeb8:	0800af55 	.word	0x0800af55
 800aebc:	0800af55 	.word	0x0800af55
 800aec0:	0800af55 	.word	0x0800af55
 800aec4:	0800af55 	.word	0x0800af55
 800aec8:	0800af55 	.word	0x0800af55
 800aecc:	0800af43 	.word	0x0800af43
 800aed0:	0800af55 	.word	0x0800af55
 800aed4:	0800af55 	.word	0x0800af55
 800aed8:	0800af55 	.word	0x0800af55
 800aedc:	0800af55 	.word	0x0800af55
 800aee0:	0800af55 	.word	0x0800af55
 800aee4:	0800af55 	.word	0x0800af55
 800aee8:	0800af55 	.word	0x0800af55
 800aeec:	0800af69 	.word	0x0800af69
 800aef0:	0800af55 	.word	0x0800af55
 800aef4:	0800af55 	.word	0x0800af55
 800aef8:	0800af55 	.word	0x0800af55
 800aefc:	0800af55 	.word	0x0800af55
 800af00:	0800af55 	.word	0x0800af55
 800af04:	0800af55 	.word	0x0800af55
 800af08:	0800af55 	.word	0x0800af55
 800af0c:	0800af69 	.word	0x0800af69
 800af10:	0800af55 	.word	0x0800af55
 800af14:	0800af55 	.word	0x0800af55
 800af18:	0800af55 	.word	0x0800af55
 800af1c:	0800af55 	.word	0x0800af55
 800af20:	0800af55 	.word	0x0800af55
 800af24:	0800af55 	.word	0x0800af55
 800af28:	0800af55 	.word	0x0800af55
 800af2c:	0800af69 	.word	0x0800af69
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	3304      	adds	r3, #4
 800af34:	2101      	movs	r1, #1
 800af36:	4618      	mov	r0, r3
 800af38:	f000 fdfa 	bl	800bb30 <RCCEx_PLL2_Config>
 800af3c:	4603      	mov	r3, r0
 800af3e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800af40:	e013      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3324      	adds	r3, #36	; 0x24
 800af46:	2101      	movs	r1, #1
 800af48:	4618      	mov	r0, r3
 800af4a:	f000 fea3 	bl	800bc94 <RCCEx_PLL3_Config>
 800af4e:	4603      	mov	r3, r0
 800af50:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800af52:	e00a      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800af54:	2301      	movs	r3, #1
 800af56:	75fb      	strb	r3, [r7, #23]
      break;
 800af58:	e007      	b.n	800af6a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800af5a:	bf00      	nop
 800af5c:	58024400 	.word	0x58024400
 800af60:	58024800 	.word	0x58024800
 800af64:	00ffffcf 	.word	0x00ffffcf
      break;
 800af68:	bf00      	nop
    }

    if(ret == HAL_OK)
 800af6a:	7dfb      	ldrb	r3, [r7, #23]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	d109      	bne.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800af70:	4b96      	ldr	r3, [pc, #600]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800af74:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800af7c:	4993      	ldr	r1, [pc, #588]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800af7e:	4313      	orrs	r3, r2
 800af80:	654b      	str	r3, [r1, #84]	; 0x54
 800af82:	e001      	b.n	800af88 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af84:	7dfb      	ldrb	r3, [r7, #23]
 800af86:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f003 0302 	and.w	r3, r3, #2
 800af90:	2b00      	cmp	r3, #0
 800af92:	d038      	beq.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800af98:	2b05      	cmp	r3, #5
 800af9a:	d821      	bhi.n	800afe0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800af9c:	a201      	add	r2, pc, #4	; (adr r2, 800afa4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800af9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afa2:	bf00      	nop
 800afa4:	0800afe7 	.word	0x0800afe7
 800afa8:	0800afbd 	.word	0x0800afbd
 800afac:	0800afcf 	.word	0x0800afcf
 800afb0:	0800afe7 	.word	0x0800afe7
 800afb4:	0800afe7 	.word	0x0800afe7
 800afb8:	0800afe7 	.word	0x0800afe7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	3304      	adds	r3, #4
 800afc0:	2101      	movs	r1, #1
 800afc2:	4618      	mov	r0, r3
 800afc4:	f000 fdb4 	bl	800bb30 <RCCEx_PLL2_Config>
 800afc8:	4603      	mov	r3, r0
 800afca:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800afcc:	e00c      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	3324      	adds	r3, #36	; 0x24
 800afd2:	2101      	movs	r1, #1
 800afd4:	4618      	mov	r0, r3
 800afd6:	f000 fe5d 	bl	800bc94 <RCCEx_PLL3_Config>
 800afda:	4603      	mov	r3, r0
 800afdc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800afde:	e003      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800afe0:	2301      	movs	r3, #1
 800afe2:	75fb      	strb	r3, [r7, #23]
      break;
 800afe4:	e000      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800afe6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800afe8:	7dfb      	ldrb	r3, [r7, #23]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d109      	bne.n	800b002 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800afee:	4b77      	ldr	r3, [pc, #476]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800aff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aff2:	f023 0207 	bic.w	r2, r3, #7
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800affa:	4974      	ldr	r1, [pc, #464]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800affc:	4313      	orrs	r3, r2
 800affe:	654b      	str	r3, [r1, #84]	; 0x54
 800b000:	e001      	b.n	800b006 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b002:	7dfb      	ldrb	r3, [r7, #23]
 800b004:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0304 	and.w	r3, r3, #4
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d03a      	beq.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b018:	2b05      	cmp	r3, #5
 800b01a:	d821      	bhi.n	800b060 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800b01c:	a201      	add	r2, pc, #4	; (adr r2, 800b024 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800b01e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b022:	bf00      	nop
 800b024:	0800b067 	.word	0x0800b067
 800b028:	0800b03d 	.word	0x0800b03d
 800b02c:	0800b04f 	.word	0x0800b04f
 800b030:	0800b067 	.word	0x0800b067
 800b034:	0800b067 	.word	0x0800b067
 800b038:	0800b067 	.word	0x0800b067
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	3304      	adds	r3, #4
 800b040:	2101      	movs	r1, #1
 800b042:	4618      	mov	r0, r3
 800b044:	f000 fd74 	bl	800bb30 <RCCEx_PLL2_Config>
 800b048:	4603      	mov	r3, r0
 800b04a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b04c:	e00c      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	3324      	adds	r3, #36	; 0x24
 800b052:	2101      	movs	r1, #1
 800b054:	4618      	mov	r0, r3
 800b056:	f000 fe1d 	bl	800bc94 <RCCEx_PLL3_Config>
 800b05a:	4603      	mov	r3, r0
 800b05c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800b05e:	e003      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b060:	2301      	movs	r3, #1
 800b062:	75fb      	strb	r3, [r7, #23]
      break;
 800b064:	e000      	b.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800b066:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b068:	7dfb      	ldrb	r3, [r7, #23]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d10a      	bne.n	800b084 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b06e:	4b57      	ldr	r3, [pc, #348]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b072:	f023 0207 	bic.w	r2, r3, #7
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b07c:	4953      	ldr	r1, [pc, #332]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b07e:	4313      	orrs	r3, r2
 800b080:	658b      	str	r3, [r1, #88]	; 0x58
 800b082:	e001      	b.n	800b088 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b084:	7dfb      	ldrb	r3, [r7, #23]
 800b086:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	f003 0320 	and.w	r3, r3, #32
 800b090:	2b00      	cmp	r3, #0
 800b092:	d04b      	beq.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b09a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b09e:	d02e      	beq.n	800b0fe <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800b0a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b0a4:	d828      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b0a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0aa:	d02a      	beq.n	800b102 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800b0ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b0b0:	d822      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b0b2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0b6:	d026      	beq.n	800b106 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800b0b8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b0bc:	d81c      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b0be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c2:	d010      	beq.n	800b0e6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800b0c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0c8:	d816      	bhi.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d01d      	beq.n	800b10a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800b0ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b0d2:	d111      	bne.n	800b0f8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	2100      	movs	r1, #0
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f000 fd28 	bl	800bb30 <RCCEx_PLL2_Config>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b0e4:	e012      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	3324      	adds	r3, #36	; 0x24
 800b0ea:	2102      	movs	r1, #2
 800b0ec:	4618      	mov	r0, r3
 800b0ee:	f000 fdd1 	bl	800bc94 <RCCEx_PLL3_Config>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800b0f6:	e009      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b0f8:	2301      	movs	r3, #1
 800b0fa:	75fb      	strb	r3, [r7, #23]
      break;
 800b0fc:	e006      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b0fe:	bf00      	nop
 800b100:	e004      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b102:	bf00      	nop
 800b104:	e002      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b106:	bf00      	nop
 800b108:	e000      	b.n	800b10c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800b10a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b10c:	7dfb      	ldrb	r3, [r7, #23]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b112:	4b2e      	ldr	r3, [pc, #184]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b114:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b116:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b120:	492a      	ldr	r1, [pc, #168]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b122:	4313      	orrs	r3, r2
 800b124:	654b      	str	r3, [r1, #84]	; 0x54
 800b126:	e001      	b.n	800b12c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b128:	7dfb      	ldrb	r3, [r7, #23]
 800b12a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b134:	2b00      	cmp	r3, #0
 800b136:	d04d      	beq.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b13e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b142:	d02e      	beq.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800b144:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b148:	d828      	bhi.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b14a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b14e:	d02a      	beq.n	800b1a6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800b150:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b154:	d822      	bhi.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b156:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b15a:	d026      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800b15c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b160:	d81c      	bhi.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b162:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b166:	d010      	beq.n	800b18a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800b168:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b16c:	d816      	bhi.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d01d      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800b172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b176:	d111      	bne.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	3304      	adds	r3, #4
 800b17c:	2100      	movs	r1, #0
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 fcd6 	bl	800bb30 <RCCEx_PLL2_Config>
 800b184:	4603      	mov	r3, r0
 800b186:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b188:	e012      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	3324      	adds	r3, #36	; 0x24
 800b18e:	2102      	movs	r1, #2
 800b190:	4618      	mov	r0, r3
 800b192:	f000 fd7f 	bl	800bc94 <RCCEx_PLL3_Config>
 800b196:	4603      	mov	r3, r0
 800b198:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800b19a:	e009      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
      break;
 800b1a0:	e006      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b1a2:	bf00      	nop
 800b1a4:	e004      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b1a6:	bf00      	nop
 800b1a8:	e002      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b1aa:	bf00      	nop
 800b1ac:	e000      	b.n	800b1b0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800b1ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b1b0:	7dfb      	ldrb	r3, [r7, #23]
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10c      	bne.n	800b1d0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b1b6:	4b05      	ldr	r3, [pc, #20]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b1b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b1ba:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b1c4:	4901      	ldr	r1, [pc, #4]	; (800b1cc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	658b      	str	r3, [r1, #88]	; 0x58
 800b1ca:	e003      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800b1cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1d0:	7dfb      	ldrb	r3, [r7, #23]
 800b1d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d04b      	beq.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b1e6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b1ea:	d02e      	beq.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800b1ec:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800b1f0:	d828      	bhi.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b1f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1f6:	d02a      	beq.n	800b24e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800b1f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1fc:	d822      	bhi.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b1fe:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b202:	d026      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800b204:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800b208:	d81c      	bhi.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b20a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b20e:	d010      	beq.n	800b232 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800b210:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b214:	d816      	bhi.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800b216:	2b00      	cmp	r3, #0
 800b218:	d01d      	beq.n	800b256 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800b21a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b21e:	d111      	bne.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	3304      	adds	r3, #4
 800b224:	2100      	movs	r1, #0
 800b226:	4618      	mov	r0, r3
 800b228:	f000 fc82 	bl	800bb30 <RCCEx_PLL2_Config>
 800b22c:	4603      	mov	r3, r0
 800b22e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b230:	e012      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	3324      	adds	r3, #36	; 0x24
 800b236:	2102      	movs	r1, #2
 800b238:	4618      	mov	r0, r3
 800b23a:	f000 fd2b 	bl	800bc94 <RCCEx_PLL3_Config>
 800b23e:	4603      	mov	r3, r0
 800b240:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800b242:	e009      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b244:	2301      	movs	r3, #1
 800b246:	75fb      	strb	r3, [r7, #23]
      break;
 800b248:	e006      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b24a:	bf00      	nop
 800b24c:	e004      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b24e:	bf00      	nop
 800b250:	e002      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b252:	bf00      	nop
 800b254:	e000      	b.n	800b258 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800b256:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b258:	7dfb      	ldrb	r3, [r7, #23]
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d10a      	bne.n	800b274 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b25e:	4b9d      	ldr	r3, [pc, #628]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b262:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b26c:	4999      	ldr	r1, [pc, #612]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	658b      	str	r3, [r1, #88]	; 0x58
 800b272:	e001      	b.n	800b278 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	f003 0308 	and.w	r3, r3, #8
 800b280:	2b00      	cmp	r3, #0
 800b282:	d01a      	beq.n	800b2ba <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b28a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b28e:	d10a      	bne.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	3324      	adds	r3, #36	; 0x24
 800b294:	2102      	movs	r1, #2
 800b296:	4618      	mov	r0, r3
 800b298:	f000 fcfc 	bl	800bc94 <RCCEx_PLL3_Config>
 800b29c:	4603      	mov	r3, r0
 800b29e:	2b00      	cmp	r3, #0
 800b2a0:	d001      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800b2a2:	2301      	movs	r3, #1
 800b2a4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b2a6:	4b8b      	ldr	r3, [pc, #556]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800b2b4:	4987      	ldr	r1, [pc, #540]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2b6:	4313      	orrs	r3, r2
 800b2b8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f003 0310 	and.w	r3, r3, #16
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d01a      	beq.n	800b2fc <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2d0:	d10a      	bne.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	3324      	adds	r3, #36	; 0x24
 800b2d6:	2102      	movs	r1, #2
 800b2d8:	4618      	mov	r0, r3
 800b2da:	f000 fcdb 	bl	800bc94 <RCCEx_PLL3_Config>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d001      	beq.n	800b2e8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b2e8:	4b7a      	ldr	r3, [pc, #488]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b2f6:	4977      	ldr	r1, [pc, #476]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800b304:	2b00      	cmp	r3, #0
 800b306:	d034      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b30e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b312:	d01d      	beq.n	800b350 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800b314:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b318:	d817      	bhi.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d003      	beq.n	800b326 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800b31e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b322:	d009      	beq.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800b324:	e011      	b.n	800b34a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	3304      	adds	r3, #4
 800b32a:	2100      	movs	r1, #0
 800b32c:	4618      	mov	r0, r3
 800b32e:	f000 fbff 	bl	800bb30 <RCCEx_PLL2_Config>
 800b332:	4603      	mov	r3, r0
 800b334:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b336:	e00c      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	3324      	adds	r3, #36	; 0x24
 800b33c:	2102      	movs	r1, #2
 800b33e:	4618      	mov	r0, r3
 800b340:	f000 fca8 	bl	800bc94 <RCCEx_PLL3_Config>
 800b344:	4603      	mov	r3, r0
 800b346:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800b348:	e003      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b34a:	2301      	movs	r3, #1
 800b34c:	75fb      	strb	r3, [r7, #23]
      break;
 800b34e:	e000      	b.n	800b352 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800b350:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b352:	7dfb      	ldrb	r3, [r7, #23]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d10a      	bne.n	800b36e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b358:	4b5e      	ldr	r3, [pc, #376]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b35a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b35c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800b366:	495b      	ldr	r1, [pc, #364]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b368:	4313      	orrs	r3, r2
 800b36a:	658b      	str	r3, [r1, #88]	; 0x58
 800b36c:	e001      	b.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b36e:	7dfb      	ldrb	r3, [r7, #23]
 800b370:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	681b      	ldr	r3, [r3, #0]
 800b376:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d033      	beq.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b384:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b388:	d01c      	beq.n	800b3c4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800b38a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800b38e:	d816      	bhi.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800b390:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b394:	d003      	beq.n	800b39e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800b396:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b39a:	d007      	beq.n	800b3ac <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800b39c:	e00f      	b.n	800b3be <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b39e:	4b4d      	ldr	r3, [pc, #308]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a2:	4a4c      	ldr	r2, [pc, #304]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800b3aa:	e00c      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	3324      	adds	r3, #36	; 0x24
 800b3b0:	2101      	movs	r1, #1
 800b3b2:	4618      	mov	r0, r3
 800b3b4:	f000 fc6e 	bl	800bc94 <RCCEx_PLL3_Config>
 800b3b8:	4603      	mov	r3, r0
 800b3ba:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800b3bc:	e003      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b3be:	2301      	movs	r3, #1
 800b3c0:	75fb      	strb	r3, [r7, #23]
      break;
 800b3c2:	e000      	b.n	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800b3c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b3c6:	7dfb      	ldrb	r3, [r7, #23]
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d10a      	bne.n	800b3e2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3cc:	4b41      	ldr	r3, [pc, #260]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b3d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b3da:	493e      	ldr	r1, [pc, #248]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	654b      	str	r3, [r1, #84]	; 0x54
 800b3e0:	e001      	b.n	800b3e6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3e2:	7dfb      	ldrb	r3, [r7, #23]
 800b3e4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b3ee:	2b00      	cmp	r3, #0
 800b3f0:	d029      	beq.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	d003      	beq.n	800b402 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800b3fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3fe:	d007      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800b400:	e00f      	b.n	800b422 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b402:	4b34      	ldr	r3, [pc, #208]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b406:	4a33      	ldr	r2, [pc, #204]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b40c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b40e:	e00b      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	3304      	adds	r3, #4
 800b414:	2102      	movs	r1, #2
 800b416:	4618      	mov	r0, r3
 800b418:	f000 fb8a 	bl	800bb30 <RCCEx_PLL2_Config>
 800b41c:	4603      	mov	r3, r0
 800b41e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800b420:	e002      	b.n	800b428 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800b422:	2301      	movs	r3, #1
 800b424:	75fb      	strb	r3, [r7, #23]
      break;
 800b426:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b428:	7dfb      	ldrb	r3, [r7, #23]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d109      	bne.n	800b442 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b42e:	4b29      	ldr	r3, [pc, #164]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b432:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b43a:	4926      	ldr	r1, [pc, #152]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b43c:	4313      	orrs	r3, r2
 800b43e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800b440:	e001      	b.n	800b446 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b442:	7dfb      	ldrb	r3, [r7, #23]
 800b444:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d00a      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	3324      	adds	r3, #36	; 0x24
 800b456:	2102      	movs	r1, #2
 800b458:	4618      	mov	r0, r3
 800b45a:	f000 fc1b 	bl	800bc94 <RCCEx_PLL3_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	2b00      	cmp	r3, #0
 800b462:	d001      	beq.n	800b468 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800b464:	2301      	movs	r3, #1
 800b466:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d033      	beq.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b478:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b47c:	d017      	beq.n	800b4ae <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800b47e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b482:	d811      	bhi.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b484:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b488:	d013      	beq.n	800b4b2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800b48a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b48e:	d80b      	bhi.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800b490:	2b00      	cmp	r3, #0
 800b492:	d010      	beq.n	800b4b6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800b494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b498:	d106      	bne.n	800b4a8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b49a:	4b0e      	ldr	r3, [pc, #56]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49e:	4a0d      	ldr	r2, [pc, #52]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b4a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800b4a6:	e007      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800b4a8:	2301      	movs	r3, #1
 800b4aa:	75fb      	strb	r3, [r7, #23]
      break;
 800b4ac:	e004      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b4ae:	bf00      	nop
 800b4b0:	e002      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b4b2:	bf00      	nop
 800b4b4:	e000      	b.n	800b4b8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800b4b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800b4b8:	7dfb      	ldrb	r3, [r7, #23]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10c      	bne.n	800b4d8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b4be:	4b05      	ldr	r3, [pc, #20]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b4ca:	4902      	ldr	r1, [pc, #8]	; (800b4d4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800b4cc:	4313      	orrs	r3, r2
 800b4ce:	654b      	str	r3, [r1, #84]	; 0x54
 800b4d0:	e004      	b.n	800b4dc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800b4d2:	bf00      	nop
 800b4d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4d8:	7dfb      	ldrb	r3, [r7, #23]
 800b4da:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d008      	beq.n	800b4fa <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b4e8:	4b31      	ldr	r3, [pc, #196]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b4ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b4f4:	492e      	ldr	r1, [pc, #184]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b4f6:	4313      	orrs	r3, r2
 800b4f8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b502:	2b00      	cmp	r3, #0
 800b504:	d009      	beq.n	800b51a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b506:	4b2a      	ldr	r3, [pc, #168]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b508:	691b      	ldr	r3, [r3, #16]
 800b50a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b514:	4926      	ldr	r1, [pc, #152]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b516:	4313      	orrs	r3, r2
 800b518:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d008      	beq.n	800b538 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b526:	4b22      	ldr	r3, [pc, #136]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b528:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b52a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b532:	491f      	ldr	r1, [pc, #124]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b534:	4313      	orrs	r3, r2
 800b536:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b540:	2b00      	cmp	r3, #0
 800b542:	d00d      	beq.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b544:	4b1a      	ldr	r3, [pc, #104]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b546:	691b      	ldr	r3, [r3, #16]
 800b548:	4a19      	ldr	r2, [pc, #100]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b54a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800b54e:	6113      	str	r3, [r2, #16]
 800b550:	4b17      	ldr	r3, [pc, #92]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b552:	691a      	ldr	r2, [r3, #16]
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800b55a:	4915      	ldr	r1, [pc, #84]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b55c:	4313      	orrs	r3, r2
 800b55e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	2b00      	cmp	r3, #0
 800b566:	da08      	bge.n	800b57a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b568:	4b11      	ldr	r3, [pc, #68]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b56a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b56c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b574:	490e      	ldr	r1, [pc, #56]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b576:	4313      	orrs	r3, r2
 800b578:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d009      	beq.n	800b59a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b586:	4b0a      	ldr	r3, [pc, #40]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b58a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b594:	4906      	ldr	r1, [pc, #24]	; (800b5b0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800b596:	4313      	orrs	r3, r2
 800b598:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800b59a:	7dbb      	ldrb	r3, [r7, #22]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	d101      	bne.n	800b5a4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	e000      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800b5a4:	2301      	movs	r3, #1
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	3718      	adds	r7, #24
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	bd80      	pop	{r7, pc}
 800b5ae:	bf00      	nop
 800b5b0:	58024400 	.word	0x58024400

0800b5b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b5b8:	f7ff f85a 	bl	800a670 <HAL_RCC_GetHCLKFreq>
 800b5bc:	4602      	mov	r2, r0
 800b5be:	4b06      	ldr	r3, [pc, #24]	; (800b5d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b5c0:	6a1b      	ldr	r3, [r3, #32]
 800b5c2:	091b      	lsrs	r3, r3, #4
 800b5c4:	f003 0307 	and.w	r3, r3, #7
 800b5c8:	4904      	ldr	r1, [pc, #16]	; (800b5dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b5ca:	5ccb      	ldrb	r3, [r1, r3]
 800b5cc:	f003 031f 	and.w	r3, r3, #31
 800b5d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b5d4:	4618      	mov	r0, r3
 800b5d6:	bd80      	pop	{r7, pc}
 800b5d8:	58024400 	.word	0x58024400
 800b5dc:	0800fa38 	.word	0x0800fa38

0800b5e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800b5e0:	b480      	push	{r7}
 800b5e2:	b089      	sub	sp, #36	; 0x24
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5e8:	4ba1      	ldr	r3, [pc, #644]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ec:	f003 0303 	and.w	r3, r3, #3
 800b5f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800b5f2:	4b9f      	ldr	r3, [pc, #636]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5f6:	0b1b      	lsrs	r3, r3, #12
 800b5f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b5fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b5fe:	4b9c      	ldr	r3, [pc, #624]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b600:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b602:	091b      	lsrs	r3, r3, #4
 800b604:	f003 0301 	and.w	r3, r3, #1
 800b608:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800b60a:	4b99      	ldr	r3, [pc, #612]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b60e:	08db      	lsrs	r3, r3, #3
 800b610:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b614:	693a      	ldr	r2, [r7, #16]
 800b616:	fb02 f303 	mul.w	r3, r2, r3
 800b61a:	ee07 3a90 	vmov	s15, r3
 800b61e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b622:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b626:	697b      	ldr	r3, [r7, #20]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	f000 8111 	beq.w	800b850 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b62e:	69bb      	ldr	r3, [r7, #24]
 800b630:	2b02      	cmp	r3, #2
 800b632:	f000 8083 	beq.w	800b73c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	2b02      	cmp	r3, #2
 800b63a:	f200 80a1 	bhi.w	800b780 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b63e:	69bb      	ldr	r3, [r7, #24]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d003      	beq.n	800b64c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b644:	69bb      	ldr	r3, [r7, #24]
 800b646:	2b01      	cmp	r3, #1
 800b648:	d056      	beq.n	800b6f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b64a:	e099      	b.n	800b780 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b64c:	4b88      	ldr	r3, [pc, #544]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f003 0320 	and.w	r3, r3, #32
 800b654:	2b00      	cmp	r3, #0
 800b656:	d02d      	beq.n	800b6b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b658:	4b85      	ldr	r3, [pc, #532]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	08db      	lsrs	r3, r3, #3
 800b65e:	f003 0303 	and.w	r3, r3, #3
 800b662:	4a84      	ldr	r2, [pc, #528]	; (800b874 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b664:	fa22 f303 	lsr.w	r3, r2, r3
 800b668:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	ee07 3a90 	vmov	s15, r3
 800b670:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b674:	697b      	ldr	r3, [r7, #20]
 800b676:	ee07 3a90 	vmov	s15, r3
 800b67a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b67e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b682:	4b7b      	ldr	r3, [pc, #492]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b68a:	ee07 3a90 	vmov	s15, r3
 800b68e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b692:	ed97 6a03 	vldr	s12, [r7, #12]
 800b696:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b69a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b69e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6ae:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b6b2:	e087      	b.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b6b4:	697b      	ldr	r3, [r7, #20]
 800b6b6:	ee07 3a90 	vmov	s15, r3
 800b6ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b6be:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b6c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b6c6:	4b6a      	ldr	r3, [pc, #424]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b6c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ce:	ee07 3a90 	vmov	s15, r3
 800b6d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b6d6:	ed97 6a03 	vldr	s12, [r7, #12]
 800b6da:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b6de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b6e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b6e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b6ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b6f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b6f6:	e065      	b.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b6f8:	697b      	ldr	r3, [r7, #20]
 800b6fa:	ee07 3a90 	vmov	s15, r3
 800b6fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b702:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b706:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b70a:	4b59      	ldr	r3, [pc, #356]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b712:	ee07 3a90 	vmov	s15, r3
 800b716:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b71a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b71e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b722:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b726:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b72a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b732:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b736:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b73a:	e043      	b.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b73c:	697b      	ldr	r3, [r7, #20]
 800b73e:	ee07 3a90 	vmov	s15, r3
 800b742:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b746:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800b884 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b74a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b74e:	4b48      	ldr	r3, [pc, #288]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b750:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b756:	ee07 3a90 	vmov	s15, r3
 800b75a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b75e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b762:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b766:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b76a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b76e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b772:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b776:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b77a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b77e:	e021      	b.n	800b7c4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	ee07 3a90 	vmov	s15, r3
 800b786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b78a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b880 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b78e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b792:	4b37      	ldr	r3, [pc, #220]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b79a:	ee07 3a90 	vmov	s15, r3
 800b79e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b7a6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b878 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b7aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b7ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b7b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b7b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b7ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b7be:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b7c2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800b7c4:	4b2a      	ldr	r3, [pc, #168]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7c8:	0a5b      	lsrs	r3, r3, #9
 800b7ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7ce:	ee07 3a90 	vmov	s15, r3
 800b7d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7d6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b7da:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b7de:	edd7 6a07 	vldr	s13, [r7, #28]
 800b7e2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b7e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b7ea:	ee17 2a90 	vmov	r2, s15
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800b7f2:	4b1f      	ldr	r3, [pc, #124]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7f6:	0c1b      	lsrs	r3, r3, #16
 800b7f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b7fc:	ee07 3a90 	vmov	s15, r3
 800b800:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b804:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b808:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b80c:	edd7 6a07 	vldr	s13, [r7, #28]
 800b810:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b814:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b818:	ee17 2a90 	vmov	r2, s15
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800b820:	4b13      	ldr	r3, [pc, #76]	; (800b870 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b824:	0e1b      	lsrs	r3, r3, #24
 800b826:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b82a:	ee07 3a90 	vmov	s15, r3
 800b82e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b832:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b836:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b83a:	edd7 6a07 	vldr	s13, [r7, #28]
 800b83e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b842:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b846:	ee17 2a90 	vmov	r2, s15
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b84e:	e008      	b.n	800b862 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	2200      	movs	r2, #0
 800b854:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2200      	movs	r2, #0
 800b85a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2200      	movs	r2, #0
 800b860:	609a      	str	r2, [r3, #8]
}
 800b862:	bf00      	nop
 800b864:	3724      	adds	r7, #36	; 0x24
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	58024400 	.word	0x58024400
 800b874:	03d09000 	.word	0x03d09000
 800b878:	46000000 	.word	0x46000000
 800b87c:	4c742400 	.word	0x4c742400
 800b880:	4a742400 	.word	0x4a742400
 800b884:	4af42400 	.word	0x4af42400

0800b888 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800b888:	b480      	push	{r7}
 800b88a:	b089      	sub	sp, #36	; 0x24
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b890:	4ba1      	ldr	r3, [pc, #644]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b894:	f003 0303 	and.w	r3, r3, #3
 800b898:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800b89a:	4b9f      	ldr	r3, [pc, #636]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b89c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b89e:	0d1b      	lsrs	r3, r3, #20
 800b8a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b8a4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b8a6:	4b9c      	ldr	r3, [pc, #624]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8aa:	0a1b      	lsrs	r3, r3, #8
 800b8ac:	f003 0301 	and.w	r3, r3, #1
 800b8b0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800b8b2:	4b99      	ldr	r3, [pc, #612]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b8b6:	08db      	lsrs	r3, r3, #3
 800b8b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b8bc:	693a      	ldr	r2, [r7, #16]
 800b8be:	fb02 f303 	mul.w	r3, r2, r3
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800b8ce:	697b      	ldr	r3, [r7, #20]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 8111 	beq.w	800baf8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	f000 8083 	beq.w	800b9e4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800b8de:	69bb      	ldr	r3, [r7, #24]
 800b8e0:	2b02      	cmp	r3, #2
 800b8e2:	f200 80a1 	bhi.w	800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800b8e6:	69bb      	ldr	r3, [r7, #24]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d003      	beq.n	800b8f4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800b8ec:	69bb      	ldr	r3, [r7, #24]
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d056      	beq.n	800b9a0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800b8f2:	e099      	b.n	800ba28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b8f4:	4b88      	ldr	r3, [pc, #544]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f003 0320 	and.w	r3, r3, #32
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d02d      	beq.n	800b95c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800b900:	4b85      	ldr	r3, [pc, #532]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b902:	681b      	ldr	r3, [r3, #0]
 800b904:	08db      	lsrs	r3, r3, #3
 800b906:	f003 0303 	and.w	r3, r3, #3
 800b90a:	4a84      	ldr	r2, [pc, #528]	; (800bb1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800b90c:	fa22 f303 	lsr.w	r3, r2, r3
 800b910:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b912:	68bb      	ldr	r3, [r7, #8]
 800b914:	ee07 3a90 	vmov	s15, r3
 800b918:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b91c:	697b      	ldr	r3, [r7, #20]
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b92a:	4b7b      	ldr	r3, [pc, #492]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b92c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b92e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b932:	ee07 3a90 	vmov	s15, r3
 800b936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b93a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b93e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b94a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b94e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b952:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b956:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800b95a:	e087      	b.n	800ba6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b95c:	697b      	ldr	r3, [r7, #20]
 800b95e:	ee07 3a90 	vmov	s15, r3
 800b962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b966:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800b96a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b96e:	4b6a      	ldr	r3, [pc, #424]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b976:	ee07 3a90 	vmov	s15, r3
 800b97a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b97e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b982:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b98a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b98e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b996:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b99a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b99e:	e065      	b.n	800ba6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9a0:	697b      	ldr	r3, [r7, #20]
 800b9a2:	ee07 3a90 	vmov	s15, r3
 800b9a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9aa:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bb28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800b9ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9b2:	4b59      	ldr	r3, [pc, #356]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9ba:	ee07 3a90 	vmov	s15, r3
 800b9be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b9c2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b9c6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800b9ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b9ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b9d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b9d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b9da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b9de:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800b9e2:	e043      	b.n	800ba6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	ee07 3a90 	vmov	s15, r3
 800b9ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9ee:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bb2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800b9f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b9f6:	4b48      	ldr	r3, [pc, #288]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800b9f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b9fe:	ee07 3a90 	vmov	s15, r3
 800ba02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba06:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba0a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba22:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba26:	e021      	b.n	800ba6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800ba28:	697b      	ldr	r3, [r7, #20]
 800ba2a:	ee07 3a90 	vmov	s15, r3
 800ba2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba32:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bb28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ba36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ba3a:	4b37      	ldr	r3, [pc, #220]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ba42:	ee07 3a90 	vmov	s15, r3
 800ba46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ba4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ba4e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bb20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ba52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ba56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ba5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ba5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ba62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba66:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800ba6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800ba6c:	4b2a      	ldr	r3, [pc, #168]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba70:	0a5b      	lsrs	r3, r3, #9
 800ba72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ba76:	ee07 3a90 	vmov	s15, r3
 800ba7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ba82:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ba86:	edd7 6a07 	vldr	s13, [r7, #28]
 800ba8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ba8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ba92:	ee17 2a90 	vmov	r2, s15
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ba9a:	4b1f      	ldr	r3, [pc, #124]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba9e:	0c1b      	lsrs	r3, r3, #16
 800baa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800baa4:	ee07 3a90 	vmov	s15, r3
 800baa8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bab4:	edd7 6a07 	vldr	s13, [r7, #28]
 800bab8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800babc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bac0:	ee17 2a90 	vmov	r2, s15
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800bac8:	4b13      	ldr	r3, [pc, #76]	; (800bb18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bacc:	0e1b      	lsrs	r3, r3, #24
 800bace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bad2:	ee07 3a90 	vmov	s15, r3
 800bad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bade:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bae2:	edd7 6a07 	vldr	s13, [r7, #28]
 800bae6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800baea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800baee:	ee17 2a90 	vmov	r2, s15
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800baf6:	e008      	b.n	800bb0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	2200      	movs	r2, #0
 800bb02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	609a      	str	r2, [r3, #8]
}
 800bb0a:	bf00      	nop
 800bb0c:	3724      	adds	r7, #36	; 0x24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	58024400 	.word	0x58024400
 800bb1c:	03d09000 	.word	0x03d09000
 800bb20:	46000000 	.word	0x46000000
 800bb24:	4c742400 	.word	0x4c742400
 800bb28:	4a742400 	.word	0x4a742400
 800bb2c:	4af42400 	.word	0x4af42400

0800bb30 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bb3a:	2300      	movs	r3, #0
 800bb3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bb3e:	4b53      	ldr	r3, [pc, #332]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bb40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb42:	f003 0303 	and.w	r3, r3, #3
 800bb46:	2b03      	cmp	r3, #3
 800bb48:	d101      	bne.n	800bb4e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e099      	b.n	800bc82 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800bb4e:	4b4f      	ldr	r3, [pc, #316]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	4a4e      	ldr	r2, [pc, #312]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bb54:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800bb58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bb5a:	f7fa faa5 	bl	80060a8 <HAL_GetTick>
 800bb5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb60:	e008      	b.n	800bb74 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bb62:	f7fa faa1 	bl	80060a8 <HAL_GetTick>
 800bb66:	4602      	mov	r2, r0
 800bb68:	68bb      	ldr	r3, [r7, #8]
 800bb6a:	1ad3      	subs	r3, r2, r3
 800bb6c:	2b02      	cmp	r3, #2
 800bb6e:	d901      	bls.n	800bb74 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bb70:	2303      	movs	r3, #3
 800bb72:	e086      	b.n	800bc82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800bb74:	4b45      	ldr	r3, [pc, #276]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1f0      	bne.n	800bb62 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800bb80:	4b42      	ldr	r3, [pc, #264]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bb82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bb84:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	031b      	lsls	r3, r3, #12
 800bb8e:	493f      	ldr	r1, [pc, #252]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bb90:	4313      	orrs	r3, r2
 800bb92:	628b      	str	r3, [r1, #40]	; 0x28
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	3b01      	subs	r3, #1
 800bb9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	689b      	ldr	r3, [r3, #8]
 800bba2:	3b01      	subs	r3, #1
 800bba4:	025b      	lsls	r3, r3, #9
 800bba6:	b29b      	uxth	r3, r3
 800bba8:	431a      	orrs	r2, r3
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	68db      	ldr	r3, [r3, #12]
 800bbae:	3b01      	subs	r3, #1
 800bbb0:	041b      	lsls	r3, r3, #16
 800bbb2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bbb6:	431a      	orrs	r2, r3
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	061b      	lsls	r3, r3, #24
 800bbc0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bbc4:	4931      	ldr	r1, [pc, #196]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbc6:	4313      	orrs	r3, r2
 800bbc8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800bbca:	4b30      	ldr	r3, [pc, #192]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	695b      	ldr	r3, [r3, #20]
 800bbd6:	492d      	ldr	r1, [pc, #180]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbd8:	4313      	orrs	r3, r2
 800bbda:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800bbdc:	4b2b      	ldr	r3, [pc, #172]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbe0:	f023 0220 	bic.w	r2, r3, #32
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	699b      	ldr	r3, [r3, #24]
 800bbe8:	4928      	ldr	r1, [pc, #160]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbea:	4313      	orrs	r3, r2
 800bbec:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800bbee:	4b27      	ldr	r3, [pc, #156]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bbf2:	4a26      	ldr	r2, [pc, #152]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbf4:	f023 0310 	bic.w	r3, r3, #16
 800bbf8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800bbfa:	4b24      	ldr	r3, [pc, #144]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bbfc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bbfe:	4b24      	ldr	r3, [pc, #144]	; (800bc90 <RCCEx_PLL2_Config+0x160>)
 800bc00:	4013      	ands	r3, r2
 800bc02:	687a      	ldr	r2, [r7, #4]
 800bc04:	69d2      	ldr	r2, [r2, #28]
 800bc06:	00d2      	lsls	r2, r2, #3
 800bc08:	4920      	ldr	r1, [pc, #128]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc0a:	4313      	orrs	r3, r2
 800bc0c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800bc0e:	4b1f      	ldr	r3, [pc, #124]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc12:	4a1e      	ldr	r2, [pc, #120]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc14:	f043 0310 	orr.w	r3, r3, #16
 800bc18:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bc1a:	683b      	ldr	r3, [r7, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d106      	bne.n	800bc2e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800bc20:	4b1a      	ldr	r3, [pc, #104]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc24:	4a19      	ldr	r2, [pc, #100]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc26:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bc2a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc2c:	e00f      	b.n	800bc4e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bc2e:	683b      	ldr	r3, [r7, #0]
 800bc30:	2b01      	cmp	r3, #1
 800bc32:	d106      	bne.n	800bc42 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800bc34:	4b15      	ldr	r3, [pc, #84]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc38:	4a14      	ldr	r2, [pc, #80]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc3e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bc40:	e005      	b.n	800bc4e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800bc42:	4b12      	ldr	r3, [pc, #72]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc46:	4a11      	ldr	r2, [pc, #68]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bc4c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800bc4e:	4b0f      	ldr	r3, [pc, #60]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	4a0e      	ldr	r2, [pc, #56]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bc58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bc5a:	f7fa fa25 	bl	80060a8 <HAL_GetTick>
 800bc5e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc60:	e008      	b.n	800bc74 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800bc62:	f7fa fa21 	bl	80060a8 <HAL_GetTick>
 800bc66:	4602      	mov	r2, r0
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	1ad3      	subs	r3, r2, r3
 800bc6c:	2b02      	cmp	r3, #2
 800bc6e:	d901      	bls.n	800bc74 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bc70:	2303      	movs	r3, #3
 800bc72:	e006      	b.n	800bc82 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800bc74:	4b05      	ldr	r3, [pc, #20]	; (800bc8c <RCCEx_PLL2_Config+0x15c>)
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	d0f0      	beq.n	800bc62 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800bc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc82:	4618      	mov	r0, r3
 800bc84:	3710      	adds	r7, #16
 800bc86:	46bd      	mov	sp, r7
 800bc88:	bd80      	pop	{r7, pc}
 800bc8a:	bf00      	nop
 800bc8c:	58024400 	.word	0x58024400
 800bc90:	ffff0007 	.word	0xffff0007

0800bc94 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800bc94:	b580      	push	{r7, lr}
 800bc96:	b084      	sub	sp, #16
 800bc98:	af00      	add	r7, sp, #0
 800bc9a:	6078      	str	r0, [r7, #4]
 800bc9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800bc9e:	2300      	movs	r3, #0
 800bca0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800bca2:	4b53      	ldr	r3, [pc, #332]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bca6:	f003 0303 	and.w	r3, r3, #3
 800bcaa:	2b03      	cmp	r3, #3
 800bcac:	d101      	bne.n	800bcb2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800bcae:	2301      	movs	r3, #1
 800bcb0:	e099      	b.n	800bde6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800bcb2:	4b4f      	ldr	r3, [pc, #316]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	4a4e      	ldr	r2, [pc, #312]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bcb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bcbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bcbe:	f7fa f9f3 	bl	80060a8 <HAL_GetTick>
 800bcc2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcc4:	e008      	b.n	800bcd8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bcc6:	f7fa f9ef 	bl	80060a8 <HAL_GetTick>
 800bcca:	4602      	mov	r2, r0
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	1ad3      	subs	r3, r2, r3
 800bcd0:	2b02      	cmp	r3, #2
 800bcd2:	d901      	bls.n	800bcd8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800bcd4:	2303      	movs	r3, #3
 800bcd6:	e086      	b.n	800bde6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800bcd8:	4b45      	ldr	r3, [pc, #276]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d1f0      	bne.n	800bcc6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800bce4:	4b42      	ldr	r3, [pc, #264]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bce8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	051b      	lsls	r3, r3, #20
 800bcf2:	493f      	ldr	r1, [pc, #252]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	628b      	str	r3, [r1, #40]	; 0x28
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	685b      	ldr	r3, [r3, #4]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	3b01      	subs	r3, #1
 800bd08:	025b      	lsls	r3, r3, #9
 800bd0a:	b29b      	uxth	r3, r3
 800bd0c:	431a      	orrs	r2, r3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	68db      	ldr	r3, [r3, #12]
 800bd12:	3b01      	subs	r3, #1
 800bd14:	041b      	lsls	r3, r3, #16
 800bd16:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	691b      	ldr	r3, [r3, #16]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	061b      	lsls	r3, r3, #24
 800bd24:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800bd28:	4931      	ldr	r1, [pc, #196]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd2a:	4313      	orrs	r3, r2
 800bd2c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800bd2e:	4b30      	ldr	r3, [pc, #192]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd32:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	492d      	ldr	r1, [pc, #180]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd3c:	4313      	orrs	r3, r2
 800bd3e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800bd40:	4b2b      	ldr	r3, [pc, #172]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd44:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	699b      	ldr	r3, [r3, #24]
 800bd4c:	4928      	ldr	r1, [pc, #160]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800bd52:	4b27      	ldr	r3, [pc, #156]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd56:	4a26      	ldr	r2, [pc, #152]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bd5c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800bd5e:	4b24      	ldr	r3, [pc, #144]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bd62:	4b24      	ldr	r3, [pc, #144]	; (800bdf4 <RCCEx_PLL3_Config+0x160>)
 800bd64:	4013      	ands	r3, r2
 800bd66:	687a      	ldr	r2, [r7, #4]
 800bd68:	69d2      	ldr	r2, [r2, #28]
 800bd6a:	00d2      	lsls	r2, r2, #3
 800bd6c:	4920      	ldr	r1, [pc, #128]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd6e:	4313      	orrs	r3, r2
 800bd70:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800bd72:	4b1f      	ldr	r3, [pc, #124]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd76:	4a1e      	ldr	r2, [pc, #120]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bd7c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d106      	bne.n	800bd92 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800bd84:	4b1a      	ldr	r3, [pc, #104]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd88:	4a19      	ldr	r2, [pc, #100]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd8a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800bd8e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bd90:	e00f      	b.n	800bdb2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	2b01      	cmp	r3, #1
 800bd96:	d106      	bne.n	800bda6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800bd98:	4b15      	ldr	r3, [pc, #84]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd9c:	4a14      	ldr	r2, [pc, #80]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bd9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800bda2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800bda4:	e005      	b.n	800bdb2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800bda6:	4b12      	ldr	r3, [pc, #72]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bda8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdaa:	4a11      	ldr	r2, [pc, #68]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bdac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bdb0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800bdb2:	4b0f      	ldr	r3, [pc, #60]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a0e      	ldr	r2, [pc, #56]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bdb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bdbc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bdbe:	f7fa f973 	bl	80060a8 <HAL_GetTick>
 800bdc2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdc4:	e008      	b.n	800bdd8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800bdc6:	f7fa f96f 	bl	80060a8 <HAL_GetTick>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	68bb      	ldr	r3, [r7, #8]
 800bdce:	1ad3      	subs	r3, r2, r3
 800bdd0:	2b02      	cmp	r3, #2
 800bdd2:	d901      	bls.n	800bdd8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800bdd4:	2303      	movs	r3, #3
 800bdd6:	e006      	b.n	800bde6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <RCCEx_PLL3_Config+0x15c>)
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d0f0      	beq.n	800bdc6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800bde4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bde6:	4618      	mov	r0, r3
 800bde8:	3710      	adds	r7, #16
 800bdea:	46bd      	mov	sp, r7
 800bdec:	bd80      	pop	{r7, pc}
 800bdee:	bf00      	nop
 800bdf0:	58024400 	.word	0x58024400
 800bdf4:	ffff0007 	.word	0xffff0007

0800bdf8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b084      	sub	sp, #16
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d101      	bne.n	800be0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be06:	2301      	movs	r3, #1
 800be08:	e0f1      	b.n	800bfee <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2200      	movs	r2, #0
 800be0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	4a78      	ldr	r2, [pc, #480]	; (800bff8 <HAL_SPI_Init+0x200>)
 800be16:	4293      	cmp	r3, r2
 800be18:	d00f      	beq.n	800be3a <HAL_SPI_Init+0x42>
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4a77      	ldr	r2, [pc, #476]	; (800bffc <HAL_SPI_Init+0x204>)
 800be20:	4293      	cmp	r3, r2
 800be22:	d00a      	beq.n	800be3a <HAL_SPI_Init+0x42>
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a75      	ldr	r2, [pc, #468]	; (800c000 <HAL_SPI_Init+0x208>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d005      	beq.n	800be3a <HAL_SPI_Init+0x42>
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	68db      	ldr	r3, [r3, #12]
 800be32:	2b0f      	cmp	r3, #15
 800be34:	d901      	bls.n	800be3a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800be36:	2301      	movs	r3, #1
 800be38:	e0d9      	b.n	800bfee <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800be3a:	6878      	ldr	r0, [r7, #4]
 800be3c:	f000 fba2 	bl	800c584 <SPI_GetPacketSize>
 800be40:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	4a6c      	ldr	r2, [pc, #432]	; (800bff8 <HAL_SPI_Init+0x200>)
 800be48:	4293      	cmp	r3, r2
 800be4a:	d00c      	beq.n	800be66 <HAL_SPI_Init+0x6e>
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	4a6a      	ldr	r2, [pc, #424]	; (800bffc <HAL_SPI_Init+0x204>)
 800be52:	4293      	cmp	r3, r2
 800be54:	d007      	beq.n	800be66 <HAL_SPI_Init+0x6e>
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4a69      	ldr	r2, [pc, #420]	; (800c000 <HAL_SPI_Init+0x208>)
 800be5c:	4293      	cmp	r3, r2
 800be5e:	d002      	beq.n	800be66 <HAL_SPI_Init+0x6e>
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2b08      	cmp	r3, #8
 800be64:	d811      	bhi.n	800be8a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800be6a:	4a63      	ldr	r2, [pc, #396]	; (800bff8 <HAL_SPI_Init+0x200>)
 800be6c:	4293      	cmp	r3, r2
 800be6e:	d009      	beq.n	800be84 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	4a61      	ldr	r2, [pc, #388]	; (800bffc <HAL_SPI_Init+0x204>)
 800be76:	4293      	cmp	r3, r2
 800be78:	d004      	beq.n	800be84 <HAL_SPI_Init+0x8c>
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	4a60      	ldr	r2, [pc, #384]	; (800c000 <HAL_SPI_Init+0x208>)
 800be80:	4293      	cmp	r3, r2
 800be82:	d104      	bne.n	800be8e <HAL_SPI_Init+0x96>
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	2b10      	cmp	r3, #16
 800be88:	d901      	bls.n	800be8e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e0af      	b.n	800bfee <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800be94:	b2db      	uxtb	r3, r3
 800be96:	2b00      	cmp	r3, #0
 800be98:	d106      	bne.n	800bea8 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800bea2:	6878      	ldr	r0, [r7, #4]
 800bea4:	f7f9 fe08 	bl	8005ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	2202      	movs	r2, #2
 800beac:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	681a      	ldr	r2, [r3, #0]
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	681b      	ldr	r3, [r3, #0]
 800beba:	f022 0201 	bic.w	r2, r2, #1
 800bebe:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	689b      	ldr	r3, [r3, #8]
 800bec6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800beca:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	699b      	ldr	r3, [r3, #24]
 800bed0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800bed4:	d119      	bne.n	800bf0a <HAL_SPI_Init+0x112>
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	685b      	ldr	r3, [r3, #4]
 800beda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bede:	d103      	bne.n	800bee8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d008      	beq.n	800befa <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10c      	bne.n	800bf0a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800bef4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bef8:	d107      	bne.n	800bf0a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	681a      	ldr	r2, [r3, #0]
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	681b      	ldr	r3, [r3, #0]
 800bf04:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800bf08:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	69da      	ldr	r2, [r3, #28]
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf12:	431a      	orrs	r2, r3
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	431a      	orrs	r2, r3
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf1c:	ea42 0103 	orr.w	r1, r2, r3
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	68da      	ldr	r2, [r3, #12]
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	430a      	orrs	r2, r1
 800bf2a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf34:	431a      	orrs	r2, r3
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	699b      	ldr	r3, [r3, #24]
 800bf40:	431a      	orrs	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	691b      	ldr	r3, [r3, #16]
 800bf46:	431a      	orrs	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	695b      	ldr	r3, [r3, #20]
 800bf4c:	431a      	orrs	r2, r3
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	6a1b      	ldr	r3, [r3, #32]
 800bf52:	431a      	orrs	r2, r3
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	685b      	ldr	r3, [r3, #4]
 800bf58:	431a      	orrs	r2, r3
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf5e:	431a      	orrs	r2, r3
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	431a      	orrs	r2, r3
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf6a:	ea42 0103 	orr.w	r1, r2, r3
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	430a      	orrs	r2, r1
 800bf78:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	685b      	ldr	r3, [r3, #4]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d113      	bne.n	800bfaa <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	689b      	ldr	r3, [r3, #8]
 800bf88:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800bf94:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800bfa8:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	f022 0201 	bic.w	r2, r2, #1
 800bfb8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	685b      	ldr	r3, [r3, #4]
 800bfbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800bfc2:	2b00      	cmp	r3, #0
 800bfc4:	d00a      	beq.n	800bfdc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	68db      	ldr	r3, [r3, #12]
 800bfcc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	430a      	orrs	r2, r1
 800bfda:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2200      	movs	r2, #0
 800bfe0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2201      	movs	r2, #1
 800bfe8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800bfec:	2300      	movs	r3, #0
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	40013000 	.word	0x40013000
 800bffc:	40003800 	.word	0x40003800
 800c000:	40003c00 	.word	0x40003c00

0800c004 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b08a      	sub	sp, #40	; 0x28
 800c008:	af02      	add	r7, sp, #8
 800c00a:	60f8      	str	r0, [r7, #12]
 800c00c:	60b9      	str	r1, [r7, #8]
 800c00e:	603b      	str	r3, [r7, #0]
 800c010:	4613      	mov	r3, r2
 800c012:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	3320      	adds	r3, #32
 800c01a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800c026:	2b01      	cmp	r3, #1
 800c028:	d101      	bne.n	800c02e <HAL_SPI_Transmit+0x2a>
 800c02a:	2302      	movs	r3, #2
 800c02c:	e1d7      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2201      	movs	r2, #1
 800c032:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800c036:	f7fa f837 	bl	80060a8 <HAL_GetTick>
 800c03a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c042:	b2db      	uxtb	r3, r3
 800c044:	2b01      	cmp	r3, #1
 800c046:	d007      	beq.n	800c058 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800c048:	2302      	movs	r3, #2
 800c04a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c04c:	68fb      	ldr	r3, [r7, #12]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c054:	7efb      	ldrb	r3, [r7, #27]
 800c056:	e1c2      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d002      	beq.n	800c064 <HAL_SPI_Transmit+0x60>
 800c05e:	88fb      	ldrh	r3, [r7, #6]
 800c060:	2b00      	cmp	r3, #0
 800c062:	d107      	bne.n	800c074 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800c064:	2301      	movs	r3, #1
 800c066:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	2200      	movs	r2, #0
 800c06c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800c070:	7efb      	ldrb	r3, [r7, #27]
 800c072:	e1b4      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800c074:	68fb      	ldr	r3, [r7, #12]
 800c076:	2203      	movs	r2, #3
 800c078:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	2200      	movs	r2, #0
 800c080:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800c084:	68fb      	ldr	r3, [r7, #12]
 800c086:	68ba      	ldr	r2, [r7, #8]
 800c088:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	88fa      	ldrh	r2, [r7, #6]
 800c08e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800c092:	68fb      	ldr	r3, [r7, #12]
 800c094:	88fa      	ldrh	r2, [r7, #6]
 800c096:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	2200      	movs	r2, #0
 800c09e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	2200      	movs	r2, #0
 800c0a4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800c0b0:	68fb      	ldr	r3, [r7, #12]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800c0c4:	d107      	bne.n	800c0d6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	681b      	ldr	r3, [r3, #0]
 800c0ca:	681a      	ldr	r2, [r3, #0]
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800c0d4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	4b96      	ldr	r3, [pc, #600]	; (800c338 <HAL_SPI_Transmit+0x334>)
 800c0de:	4013      	ands	r3, r2
 800c0e0:	88f9      	ldrh	r1, [r7, #6]
 800c0e2:	68fa      	ldr	r2, [r7, #12]
 800c0e4:	6812      	ldr	r2, [r2, #0]
 800c0e6:	430b      	orrs	r3, r1
 800c0e8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	681a      	ldr	r2, [r3, #0]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	f042 0201 	orr.w	r2, r2, #1
 800c0f8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c102:	d107      	bne.n	800c114 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	681a      	ldr	r2, [r3, #0]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c112:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	2b0f      	cmp	r3, #15
 800c11a:	d947      	bls.n	800c1ac <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c11c:	e03f      	b.n	800c19e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	f003 0302 	and.w	r3, r3, #2
 800c128:	2b02      	cmp	r3, #2
 800c12a:	d114      	bne.n	800c156 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c130:	68fb      	ldr	r3, [r7, #12]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	6812      	ldr	r2, [r2, #0]
 800c136:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800c138:	68fb      	ldr	r3, [r7, #12]
 800c13a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c13c:	1d1a      	adds	r2, r3, #4
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c148:	b29b      	uxth	r3, r3
 800c14a:	3b01      	subs	r3, #1
 800c14c:	b29a      	uxth	r2, r3
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c154:	e023      	b.n	800c19e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c156:	f7f9 ffa7 	bl	80060a8 <HAL_GetTick>
 800c15a:	4602      	mov	r2, r0
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	1ad3      	subs	r3, r2, r3
 800c160:	683a      	ldr	r2, [r7, #0]
 800c162:	429a      	cmp	r2, r3
 800c164:	d803      	bhi.n	800c16e <HAL_SPI_Transmit+0x16a>
 800c166:	683b      	ldr	r3, [r7, #0]
 800c168:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c16c:	d102      	bne.n	800c174 <HAL_SPI_Transmit+0x170>
 800c16e:	683b      	ldr	r3, [r7, #0]
 800c170:	2b00      	cmp	r3, #0
 800c172:	d114      	bne.n	800c19e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c174:	68f8      	ldr	r0, [r7, #12]
 800c176:	f000 f937 	bl	800c3e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2200      	movs	r2, #0
 800c17e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c188:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c18c:	68fb      	ldr	r3, [r7, #12]
 800c18e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	2201      	movs	r2, #1
 800c196:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	e11f      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1a4:	b29b      	uxth	r3, r3
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d1b9      	bne.n	800c11e <HAL_SPI_Transmit+0x11a>
 800c1aa:	e0f2      	b.n	800c392 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	68db      	ldr	r3, [r3, #12]
 800c1b0:	2b07      	cmp	r3, #7
 800c1b2:	f240 80e7 	bls.w	800c384 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800c1b6:	e05d      	b.n	800c274 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c1b8:	68fb      	ldr	r3, [r7, #12]
 800c1ba:	681b      	ldr	r3, [r3, #0]
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	f003 0302 	and.w	r3, r3, #2
 800c1c2:	2b02      	cmp	r3, #2
 800c1c4:	d132      	bne.n	800c22c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c1c6:	68fb      	ldr	r3, [r7, #12]
 800c1c8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1cc:	b29b      	uxth	r3, r3
 800c1ce:	2b01      	cmp	r3, #1
 800c1d0:	d918      	bls.n	800c204 <HAL_SPI_Transmit+0x200>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d014      	beq.n	800c204 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	681b      	ldr	r3, [r3, #0]
 800c1e2:	6812      	ldr	r2, [r2, #0]
 800c1e4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c1ea:	1d1a      	adds	r2, r3, #4
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c1f0:	68fb      	ldr	r3, [r7, #12]
 800c1f2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c1f6:	b29b      	uxth	r3, r3
 800c1f8:	3b02      	subs	r3, #2
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c202:	e037      	b.n	800c274 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c208:	881a      	ldrh	r2, [r3, #0]
 800c20a:	69fb      	ldr	r3, [r7, #28]
 800c20c:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c212:	1c9a      	adds	r2, r3, #2
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c218:	68fb      	ldr	r3, [r7, #12]
 800c21a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c21e:	b29b      	uxth	r3, r3
 800c220:	3b01      	subs	r3, #1
 800c222:	b29a      	uxth	r2, r3
 800c224:	68fb      	ldr	r3, [r7, #12]
 800c226:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c22a:	e023      	b.n	800c274 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c22c:	f7f9 ff3c 	bl	80060a8 <HAL_GetTick>
 800c230:	4602      	mov	r2, r0
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	1ad3      	subs	r3, r2, r3
 800c236:	683a      	ldr	r2, [r7, #0]
 800c238:	429a      	cmp	r2, r3
 800c23a:	d803      	bhi.n	800c244 <HAL_SPI_Transmit+0x240>
 800c23c:	683b      	ldr	r3, [r7, #0]
 800c23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c242:	d102      	bne.n	800c24a <HAL_SPI_Transmit+0x246>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d114      	bne.n	800c274 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c24a:	68f8      	ldr	r0, [r7, #12]
 800c24c:	f000 f8cc 	bl	800c3e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c250:	68fb      	ldr	r3, [r7, #12]
 800c252:	2200      	movs	r2, #0
 800c254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c25e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	2201      	movs	r2, #1
 800c26c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c270:	2303      	movs	r3, #3
 800c272:	e0b4      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d19b      	bne.n	800c1b8 <HAL_SPI_Transmit+0x1b4>
 800c280:	e087      	b.n	800c392 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800c282:	68fb      	ldr	r3, [r7, #12]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	695b      	ldr	r3, [r3, #20]
 800c288:	f003 0302 	and.w	r3, r3, #2
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d155      	bne.n	800c33c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c296:	b29b      	uxth	r3, r3
 800c298:	2b03      	cmp	r3, #3
 800c29a:	d918      	bls.n	800c2ce <HAL_SPI_Transmit+0x2ca>
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2a0:	2b40      	cmp	r3, #64	; 0x40
 800c2a2:	d914      	bls.n	800c2ce <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c2a8:	68fb      	ldr	r3, [r7, #12]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	6812      	ldr	r2, [r2, #0]
 800c2ae:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2b4:	1d1a      	adds	r2, r3, #4
 800c2b6:	68fb      	ldr	r3, [r7, #12]
 800c2b8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2c0:	b29b      	uxth	r3, r3
 800c2c2:	3b04      	subs	r3, #4
 800c2c4:	b29a      	uxth	r2, r3
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c2cc:	e05a      	b.n	800c384 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800c2ce:	68fb      	ldr	r3, [r7, #12]
 800c2d0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	2b01      	cmp	r3, #1
 800c2d8:	d917      	bls.n	800c30a <HAL_SPI_Transmit+0x306>
 800c2da:	68fb      	ldr	r3, [r7, #12]
 800c2dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d013      	beq.n	800c30a <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 800c2e2:	68fb      	ldr	r3, [r7, #12]
 800c2e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2e6:	881a      	ldrh	r2, [r3, #0]
 800c2e8:	69fb      	ldr	r3, [r7, #28]
 800c2ea:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800c2ec:	68fb      	ldr	r3, [r7, #12]
 800c2ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c2f0:	1c9a      	adds	r2, r3, #2
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c2fc:	b29b      	uxth	r3, r3
 800c2fe:	3b02      	subs	r3, #2
 800c300:	b29a      	uxth	r2, r3
 800c302:	68fb      	ldr	r3, [r7, #12]
 800c304:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c308:	e03c      	b.n	800c384 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	3320      	adds	r3, #32
 800c314:	7812      	ldrb	r2, [r2, #0]
 800c316:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	68fb      	ldr	r3, [r7, #12]
 800c320:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800c334:	e026      	b.n	800c384 <HAL_SPI_Transmit+0x380>
 800c336:	bf00      	nop
 800c338:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c33c:	f7f9 feb4 	bl	80060a8 <HAL_GetTick>
 800c340:	4602      	mov	r2, r0
 800c342:	697b      	ldr	r3, [r7, #20]
 800c344:	1ad3      	subs	r3, r2, r3
 800c346:	683a      	ldr	r2, [r7, #0]
 800c348:	429a      	cmp	r2, r3
 800c34a:	d803      	bhi.n	800c354 <HAL_SPI_Transmit+0x350>
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c352:	d102      	bne.n	800c35a <HAL_SPI_Transmit+0x356>
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d114      	bne.n	800c384 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f844 	bl	800c3e8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	2200      	movs	r2, #0
 800c364:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800c368:	68fb      	ldr	r3, [r7, #12]
 800c36a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c36e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800c378:	68fb      	ldr	r3, [r7, #12]
 800c37a:	2201      	movs	r2, #1
 800c37c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800c380:	2303      	movs	r3, #3
 800c382:	e02c      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800c384:	68fb      	ldr	r3, [r7, #12]
 800c386:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	f47f af78 	bne.w	800c282 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 800c392:	683b      	ldr	r3, [r7, #0]
 800c394:	9300      	str	r3, [sp, #0]
 800c396:	697b      	ldr	r3, [r7, #20]
 800c398:	2200      	movs	r2, #0
 800c39a:	2108      	movs	r1, #8
 800c39c:	68f8      	ldr	r0, [r7, #12]
 800c39e:	f000 f8c3 	bl	800c528 <SPI_WaitOnFlagUntilTimeout>
 800c3a2:	4603      	mov	r3, r0
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d007      	beq.n	800c3b8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800c3a8:	68fb      	ldr	r3, [r7, #12]
 800c3aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3ae:	f043 0220 	orr.w	r2, r3, #32
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800c3b8:	68f8      	ldr	r0, [r7, #12]
 800c3ba:	f000 f815 	bl	800c3e8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	2200      	movs	r2, #0
 800c3c2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2201      	movs	r2, #1
 800c3ca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d001      	beq.n	800c3dc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 800c3d8:	2301      	movs	r3, #1
 800c3da:	e000      	b.n	800c3de <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 800c3dc:	7efb      	ldrb	r3, [r7, #27]
}
 800c3de:	4618      	mov	r0, r3
 800c3e0:	3720      	adds	r7, #32
 800c3e2:	46bd      	mov	sp, r7
 800c3e4:	bd80      	pop	{r7, pc}
 800c3e6:	bf00      	nop

0800c3e8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800c3e8:	b480      	push	{r7}
 800c3ea:	b085      	sub	sp, #20
 800c3ec:	af00      	add	r7, sp, #0
 800c3ee:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	695b      	ldr	r3, [r3, #20]
 800c3f6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	681b      	ldr	r3, [r3, #0]
 800c3fc:	699a      	ldr	r2, [r3, #24]
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	f042 0208 	orr.w	r2, r2, #8
 800c406:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	699a      	ldr	r2, [r3, #24]
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	f042 0210 	orr.w	r2, r2, #16
 800c416:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	681a      	ldr	r2, [r3, #0]
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	f022 0201 	bic.w	r2, r2, #1
 800c426:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	6919      	ldr	r1, [r3, #16]
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	681a      	ldr	r2, [r3, #0]
 800c432:	4b3c      	ldr	r3, [pc, #240]	; (800c524 <SPI_CloseTransfer+0x13c>)
 800c434:	400b      	ands	r3, r1
 800c436:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800c438:	687b      	ldr	r3, [r7, #4]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	689a      	ldr	r2, [r3, #8]
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800c446:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c44e:	b2db      	uxtb	r3, r3
 800c450:	2b04      	cmp	r3, #4
 800c452:	d014      	beq.n	800c47e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	f003 0320 	and.w	r3, r3, #32
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d00f      	beq.n	800c47e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c464:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	699a      	ldr	r2, [r3, #24]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0220 	orr.w	r2, r2, #32
 800c47c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800c484:	b2db      	uxtb	r3, r3
 800c486:	2b03      	cmp	r3, #3
 800c488:	d014      	beq.n	800c4b4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c490:	2b00      	cmp	r3, #0
 800c492:	d00f      	beq.n	800c4b4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c49a:	f043 0204 	orr.w	r2, r3, #4
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	699a      	ldr	r2, [r3, #24]
 800c4aa:	687b      	ldr	r3, [r7, #4]
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4b2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d00f      	beq.n	800c4de <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4c4:	f043 0201 	orr.w	r2, r3, #1
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	699a      	ldr	r2, [r3, #24]
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800c4dc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	d00f      	beq.n	800c508 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c4ee:	f043 0208 	orr.w	r2, r3, #8
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	699a      	ldr	r2, [r3, #24]
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	681b      	ldr	r3, [r3, #0]
 800c502:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c506:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2200      	movs	r2, #0
 800c50c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	2200      	movs	r2, #0
 800c514:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800c518:	bf00      	nop
 800c51a:	3714      	adds	r7, #20
 800c51c:	46bd      	mov	sp, r7
 800c51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c522:	4770      	bx	lr
 800c524:	fffffc90 	.word	0xfffffc90

0800c528 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b084      	sub	sp, #16
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	60f8      	str	r0, [r7, #12]
 800c530:	60b9      	str	r1, [r7, #8]
 800c532:	603b      	str	r3, [r7, #0]
 800c534:	4613      	mov	r3, r2
 800c536:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c538:	e010      	b.n	800c55c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800c53a:	f7f9 fdb5 	bl	80060a8 <HAL_GetTick>
 800c53e:	4602      	mov	r2, r0
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	1ad3      	subs	r3, r2, r3
 800c544:	69ba      	ldr	r2, [r7, #24]
 800c546:	429a      	cmp	r2, r3
 800c548:	d803      	bhi.n	800c552 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c550:	d102      	bne.n	800c558 <SPI_WaitOnFlagUntilTimeout+0x30>
 800c552:	69bb      	ldr	r3, [r7, #24]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800c558:	2303      	movs	r3, #3
 800c55a:	e00f      	b.n	800c57c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800c55c:	68fb      	ldr	r3, [r7, #12]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	695a      	ldr	r2, [r3, #20]
 800c562:	68bb      	ldr	r3, [r7, #8]
 800c564:	4013      	ands	r3, r2
 800c566:	68ba      	ldr	r2, [r7, #8]
 800c568:	429a      	cmp	r2, r3
 800c56a:	bf0c      	ite	eq
 800c56c:	2301      	moveq	r3, #1
 800c56e:	2300      	movne	r3, #0
 800c570:	b2db      	uxtb	r3, r3
 800c572:	461a      	mov	r2, r3
 800c574:	79fb      	ldrb	r3, [r7, #7]
 800c576:	429a      	cmp	r2, r3
 800c578:	d0df      	beq.n	800c53a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800c57a:	2300      	movs	r3, #0
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800c584:	b480      	push	{r7}
 800c586:	b085      	sub	sp, #20
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c590:	095b      	lsrs	r3, r3, #5
 800c592:	3301      	adds	r3, #1
 800c594:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	3301      	adds	r3, #1
 800c59c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800c59e:	68bb      	ldr	r3, [r7, #8]
 800c5a0:	3307      	adds	r3, #7
 800c5a2:	08db      	lsrs	r3, r3, #3
 800c5a4:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800c5a6:	68bb      	ldr	r3, [r7, #8]
 800c5a8:	68fa      	ldr	r2, [r7, #12]
 800c5aa:	fb02 f303 	mul.w	r3, r2, r3
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c5ba:	b580      	push	{r7, lr}
 800c5bc:	b082      	sub	sp, #8
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d101      	bne.n	800c5cc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	e049      	b.n	800c660 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c5d2:	b2db      	uxtb	r3, r3
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d106      	bne.n	800c5e6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	2200      	movs	r2, #0
 800c5dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f7f9 fad5 	bl	8005b90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681a      	ldr	r2, [r3, #0]
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	3304      	adds	r3, #4
 800c5f6:	4619      	mov	r1, r3
 800c5f8:	4610      	mov	r0, r2
 800c5fa:	f000 fa23 	bl	800ca44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2201      	movs	r2, #1
 800c602:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2201      	movs	r2, #1
 800c60a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	2201      	movs	r2, #1
 800c612:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	2201      	movs	r2, #1
 800c61a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2201      	movs	r2, #1
 800c622:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2201      	movs	r2, #1
 800c62a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2201      	movs	r2, #1
 800c632:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	2201      	movs	r2, #1
 800c63a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2201      	movs	r2, #1
 800c642:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	2201      	movs	r2, #1
 800c64a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	2201      	movs	r2, #1
 800c652:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c656:	687b      	ldr	r3, [r7, #4]
 800c658:	2201      	movs	r2, #1
 800c65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c65e:	2300      	movs	r3, #0
}
 800c660:	4618      	mov	r0, r3
 800c662:	3708      	adds	r7, #8
 800c664:	46bd      	mov	sp, r7
 800c666:	bd80      	pop	{r7, pc}

0800c668 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c668:	b480      	push	{r7}
 800c66a:	b085      	sub	sp, #20
 800c66c:	af00      	add	r7, sp, #0
 800c66e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c676:	b2db      	uxtb	r3, r3
 800c678:	2b01      	cmp	r3, #1
 800c67a:	d001      	beq.n	800c680 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e054      	b.n	800c72a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	2202      	movs	r2, #2
 800c684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	68da      	ldr	r2, [r3, #12]
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f042 0201 	orr.w	r2, r2, #1
 800c696:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4a26      	ldr	r2, [pc, #152]	; (800c738 <HAL_TIM_Base_Start_IT+0xd0>)
 800c69e:	4293      	cmp	r3, r2
 800c6a0:	d022      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c6aa:	d01d      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	4a22      	ldr	r2, [pc, #136]	; (800c73c <HAL_TIM_Base_Start_IT+0xd4>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d018      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	4a21      	ldr	r2, [pc, #132]	; (800c740 <HAL_TIM_Base_Start_IT+0xd8>)
 800c6bc:	4293      	cmp	r3, r2
 800c6be:	d013      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a1f      	ldr	r2, [pc, #124]	; (800c744 <HAL_TIM_Base_Start_IT+0xdc>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d00e      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	4a1e      	ldr	r2, [pc, #120]	; (800c748 <HAL_TIM_Base_Start_IT+0xe0>)
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d009      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a1c      	ldr	r2, [pc, #112]	; (800c74c <HAL_TIM_Base_Start_IT+0xe4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d004      	beq.n	800c6e8 <HAL_TIM_Base_Start_IT+0x80>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a1b      	ldr	r2, [pc, #108]	; (800c750 <HAL_TIM_Base_Start_IT+0xe8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d115      	bne.n	800c714 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	689a      	ldr	r2, [r3, #8]
 800c6ee:	4b19      	ldr	r3, [pc, #100]	; (800c754 <HAL_TIM_Base_Start_IT+0xec>)
 800c6f0:	4013      	ands	r3, r2
 800c6f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c6f4:	68fb      	ldr	r3, [r7, #12]
 800c6f6:	2b06      	cmp	r3, #6
 800c6f8:	d015      	beq.n	800c726 <HAL_TIM_Base_Start_IT+0xbe>
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c700:	d011      	beq.n	800c726 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	681a      	ldr	r2, [r3, #0]
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	f042 0201 	orr.w	r2, r2, #1
 800c710:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c712:	e008      	b.n	800c726 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f042 0201 	orr.w	r2, r2, #1
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	e000      	b.n	800c728 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c726:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c728:	2300      	movs	r3, #0
}
 800c72a:	4618      	mov	r0, r3
 800c72c:	3714      	adds	r7, #20
 800c72e:	46bd      	mov	sp, r7
 800c730:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c734:	4770      	bx	lr
 800c736:	bf00      	nop
 800c738:	40010000 	.word	0x40010000
 800c73c:	40000400 	.word	0x40000400
 800c740:	40000800 	.word	0x40000800
 800c744:	40000c00 	.word	0x40000c00
 800c748:	40010400 	.word	0x40010400
 800c74c:	40001800 	.word	0x40001800
 800c750:	40014000 	.word	0x40014000
 800c754:	00010007 	.word	0x00010007

0800c758 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c758:	b480      	push	{r7}
 800c75a:	b083      	sub	sp, #12
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	68da      	ldr	r2, [r3, #12]
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f022 0201 	bic.w	r2, r2, #1
 800c76e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	6a1a      	ldr	r2, [r3, #32]
 800c776:	f241 1311 	movw	r3, #4369	; 0x1111
 800c77a:	4013      	ands	r3, r2
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d10f      	bne.n	800c7a0 <HAL_TIM_Base_Stop_IT+0x48>
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	6a1a      	ldr	r2, [r3, #32]
 800c786:	f240 4344 	movw	r3, #1092	; 0x444
 800c78a:	4013      	ands	r3, r2
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d107      	bne.n	800c7a0 <HAL_TIM_Base_Stop_IT+0x48>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	681a      	ldr	r2, [r3, #0]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	681b      	ldr	r3, [r3, #0]
 800c79a:	f022 0201 	bic.w	r2, r2, #1
 800c79e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	2201      	movs	r2, #1
 800c7a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c7a8:	2300      	movs	r3, #0
}
 800c7aa:	4618      	mov	r0, r3
 800c7ac:	370c      	adds	r7, #12
 800c7ae:	46bd      	mov	sp, r7
 800c7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b4:	4770      	bx	lr

0800c7b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c7b6:	b580      	push	{r7, lr}
 800c7b8:	b082      	sub	sp, #8
 800c7ba:	af00      	add	r7, sp, #0
 800c7bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	691b      	ldr	r3, [r3, #16]
 800c7c4:	f003 0302 	and.w	r3, r3, #2
 800c7c8:	2b02      	cmp	r3, #2
 800c7ca:	d122      	bne.n	800c812 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	68db      	ldr	r3, [r3, #12]
 800c7d2:	f003 0302 	and.w	r3, r3, #2
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d11b      	bne.n	800c812 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f06f 0202 	mvn.w	r2, #2
 800c7e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	2201      	movs	r2, #1
 800c7e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	681b      	ldr	r3, [r3, #0]
 800c7ee:	699b      	ldr	r3, [r3, #24]
 800c7f0:	f003 0303 	and.w	r3, r3, #3
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d003      	beq.n	800c800 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c7f8:	6878      	ldr	r0, [r7, #4]
 800c7fa:	f000 f905 	bl	800ca08 <HAL_TIM_IC_CaptureCallback>
 800c7fe:	e005      	b.n	800c80c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c800:	6878      	ldr	r0, [r7, #4]
 800c802:	f000 f8f7 	bl	800c9f4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c806:	6878      	ldr	r0, [r7, #4]
 800c808:	f000 f908 	bl	800ca1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	2200      	movs	r2, #0
 800c810:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	691b      	ldr	r3, [r3, #16]
 800c818:	f003 0304 	and.w	r3, r3, #4
 800c81c:	2b04      	cmp	r3, #4
 800c81e:	d122      	bne.n	800c866 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	f003 0304 	and.w	r3, r3, #4
 800c82a:	2b04      	cmp	r3, #4
 800c82c:	d11b      	bne.n	800c866 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f06f 0204 	mvn.w	r2, #4
 800c836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	2202      	movs	r2, #2
 800c83c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	699b      	ldr	r3, [r3, #24]
 800c844:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d003      	beq.n	800c854 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c84c:	6878      	ldr	r0, [r7, #4]
 800c84e:	f000 f8db 	bl	800ca08 <HAL_TIM_IC_CaptureCallback>
 800c852:	e005      	b.n	800c860 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c854:	6878      	ldr	r0, [r7, #4]
 800c856:	f000 f8cd 	bl	800c9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f000 f8de 	bl	800ca1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	681b      	ldr	r3, [r3, #0]
 800c86a:	691b      	ldr	r3, [r3, #16]
 800c86c:	f003 0308 	and.w	r3, r3, #8
 800c870:	2b08      	cmp	r3, #8
 800c872:	d122      	bne.n	800c8ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	68db      	ldr	r3, [r3, #12]
 800c87a:	f003 0308 	and.w	r3, r3, #8
 800c87e:	2b08      	cmp	r3, #8
 800c880:	d11b      	bne.n	800c8ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	681b      	ldr	r3, [r3, #0]
 800c886:	f06f 0208 	mvn.w	r2, #8
 800c88a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c88c:	687b      	ldr	r3, [r7, #4]
 800c88e:	2204      	movs	r2, #4
 800c890:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	69db      	ldr	r3, [r3, #28]
 800c898:	f003 0303 	and.w	r3, r3, #3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d003      	beq.n	800c8a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8a0:	6878      	ldr	r0, [r7, #4]
 800c8a2:	f000 f8b1 	bl	800ca08 <HAL_TIM_IC_CaptureCallback>
 800c8a6:	e005      	b.n	800c8b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8a8:	6878      	ldr	r0, [r7, #4]
 800c8aa:	f000 f8a3 	bl	800c9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c8ae:	6878      	ldr	r0, [r7, #4]
 800c8b0:	f000 f8b4 	bl	800ca1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2200      	movs	r2, #0
 800c8b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	681b      	ldr	r3, [r3, #0]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f003 0310 	and.w	r3, r3, #16
 800c8c4:	2b10      	cmp	r3, #16
 800c8c6:	d122      	bne.n	800c90e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	f003 0310 	and.w	r3, r3, #16
 800c8d2:	2b10      	cmp	r3, #16
 800c8d4:	d11b      	bne.n	800c90e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	f06f 0210 	mvn.w	r2, #16
 800c8de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	2208      	movs	r2, #8
 800c8e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	69db      	ldr	r3, [r3, #28]
 800c8ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d003      	beq.n	800c8fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c8f4:	6878      	ldr	r0, [r7, #4]
 800c8f6:	f000 f887 	bl	800ca08 <HAL_TIM_IC_CaptureCallback>
 800c8fa:	e005      	b.n	800c908 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c8fc:	6878      	ldr	r0, [r7, #4]
 800c8fe:	f000 f879 	bl	800c9f4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c902:	6878      	ldr	r0, [r7, #4]
 800c904:	f000 f88a 	bl	800ca1c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	2200      	movs	r2, #0
 800c90c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	691b      	ldr	r3, [r3, #16]
 800c914:	f003 0301 	and.w	r3, r3, #1
 800c918:	2b01      	cmp	r3, #1
 800c91a:	d10e      	bne.n	800c93a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68db      	ldr	r3, [r3, #12]
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b01      	cmp	r3, #1
 800c928:	d107      	bne.n	800c93a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	f06f 0201 	mvn.w	r2, #1
 800c932:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c934:	6878      	ldr	r0, [r7, #4]
 800c936:	f7f8 fb95 	bl	8005064 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	681b      	ldr	r3, [r3, #0]
 800c93e:	691b      	ldr	r3, [r3, #16]
 800c940:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c944:	2b80      	cmp	r3, #128	; 0x80
 800c946:	d10e      	bne.n	800c966 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	68db      	ldr	r3, [r3, #12]
 800c94e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c952:	2b80      	cmp	r3, #128	; 0x80
 800c954:	d107      	bne.n	800c966 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c95e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c960:	6878      	ldr	r0, [r7, #4]
 800c962:	f000 f9a1 	bl	800cca8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	691b      	ldr	r3, [r3, #16]
 800c96c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c970:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c974:	d10e      	bne.n	800c994 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	68db      	ldr	r3, [r3, #12]
 800c97c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c980:	2b80      	cmp	r3, #128	; 0x80
 800c982:	d107      	bne.n	800c994 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c98c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c98e:	6878      	ldr	r0, [r7, #4]
 800c990:	f000 f994 	bl	800ccbc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	691b      	ldr	r3, [r3, #16]
 800c99a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c99e:	2b40      	cmp	r3, #64	; 0x40
 800c9a0:	d10e      	bne.n	800c9c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c9a2:	687b      	ldr	r3, [r7, #4]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68db      	ldr	r3, [r3, #12]
 800c9a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c9ac:	2b40      	cmp	r3, #64	; 0x40
 800c9ae:	d107      	bne.n	800c9c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c9b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c9ba:	6878      	ldr	r0, [r7, #4]
 800c9bc:	f000 f838 	bl	800ca30 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	691b      	ldr	r3, [r3, #16]
 800c9c6:	f003 0320 	and.w	r3, r3, #32
 800c9ca:	2b20      	cmp	r3, #32
 800c9cc:	d10e      	bne.n	800c9ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68db      	ldr	r3, [r3, #12]
 800c9d4:	f003 0320 	and.w	r3, r3, #32
 800c9d8:	2b20      	cmp	r3, #32
 800c9da:	d107      	bne.n	800c9ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	f06f 0220 	mvn.w	r2, #32
 800c9e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f000 f954 	bl	800cc94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c9ec:	bf00      	nop
 800c9ee:	3708      	adds	r7, #8
 800c9f0:	46bd      	mov	sp, r7
 800c9f2:	bd80      	pop	{r7, pc}

0800c9f4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b083      	sub	sp, #12
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c9fc:	bf00      	nop
 800c9fe:	370c      	adds	r7, #12
 800ca00:	46bd      	mov	sp, r7
 800ca02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca06:	4770      	bx	lr

0800ca08 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ca08:	b480      	push	{r7}
 800ca0a:	b083      	sub	sp, #12
 800ca0c:	af00      	add	r7, sp, #0
 800ca0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ca10:	bf00      	nop
 800ca12:	370c      	adds	r7, #12
 800ca14:	46bd      	mov	sp, r7
 800ca16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca1a:	4770      	bx	lr

0800ca1c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ca1c:	b480      	push	{r7}
 800ca1e:	b083      	sub	sp, #12
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ca24:	bf00      	nop
 800ca26:	370c      	adds	r7, #12
 800ca28:	46bd      	mov	sp, r7
 800ca2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca2e:	4770      	bx	lr

0800ca30 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ca30:	b480      	push	{r7}
 800ca32:	b083      	sub	sp, #12
 800ca34:	af00      	add	r7, sp, #0
 800ca36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ca38:	bf00      	nop
 800ca3a:	370c      	adds	r7, #12
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca42:	4770      	bx	lr

0800ca44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ca44:	b480      	push	{r7}
 800ca46:	b085      	sub	sp, #20
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	6078      	str	r0, [r7, #4]
 800ca4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	681b      	ldr	r3, [r3, #0]
 800ca52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	4a40      	ldr	r2, [pc, #256]	; (800cb58 <TIM_Base_SetConfig+0x114>)
 800ca58:	4293      	cmp	r3, r2
 800ca5a:	d013      	beq.n	800ca84 <TIM_Base_SetConfig+0x40>
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca62:	d00f      	beq.n	800ca84 <TIM_Base_SetConfig+0x40>
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	4a3d      	ldr	r2, [pc, #244]	; (800cb5c <TIM_Base_SetConfig+0x118>)
 800ca68:	4293      	cmp	r3, r2
 800ca6a:	d00b      	beq.n	800ca84 <TIM_Base_SetConfig+0x40>
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	4a3c      	ldr	r2, [pc, #240]	; (800cb60 <TIM_Base_SetConfig+0x11c>)
 800ca70:	4293      	cmp	r3, r2
 800ca72:	d007      	beq.n	800ca84 <TIM_Base_SetConfig+0x40>
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	4a3b      	ldr	r2, [pc, #236]	; (800cb64 <TIM_Base_SetConfig+0x120>)
 800ca78:	4293      	cmp	r3, r2
 800ca7a:	d003      	beq.n	800ca84 <TIM_Base_SetConfig+0x40>
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	4a3a      	ldr	r2, [pc, #232]	; (800cb68 <TIM_Base_SetConfig+0x124>)
 800ca80:	4293      	cmp	r3, r2
 800ca82:	d108      	bne.n	800ca96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	685b      	ldr	r3, [r3, #4]
 800ca90:	68fa      	ldr	r2, [r7, #12]
 800ca92:	4313      	orrs	r3, r2
 800ca94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	4a2f      	ldr	r2, [pc, #188]	; (800cb58 <TIM_Base_SetConfig+0x114>)
 800ca9a:	4293      	cmp	r3, r2
 800ca9c:	d01f      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800caa4:	d01b      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	4a2c      	ldr	r2, [pc, #176]	; (800cb5c <TIM_Base_SetConfig+0x118>)
 800caaa:	4293      	cmp	r3, r2
 800caac:	d017      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	4a2b      	ldr	r2, [pc, #172]	; (800cb60 <TIM_Base_SetConfig+0x11c>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d013      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	4a2a      	ldr	r2, [pc, #168]	; (800cb64 <TIM_Base_SetConfig+0x120>)
 800caba:	4293      	cmp	r3, r2
 800cabc:	d00f      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	4a29      	ldr	r2, [pc, #164]	; (800cb68 <TIM_Base_SetConfig+0x124>)
 800cac2:	4293      	cmp	r3, r2
 800cac4:	d00b      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	4a28      	ldr	r2, [pc, #160]	; (800cb6c <TIM_Base_SetConfig+0x128>)
 800caca:	4293      	cmp	r3, r2
 800cacc:	d007      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	4a27      	ldr	r2, [pc, #156]	; (800cb70 <TIM_Base_SetConfig+0x12c>)
 800cad2:	4293      	cmp	r3, r2
 800cad4:	d003      	beq.n	800cade <TIM_Base_SetConfig+0x9a>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a26      	ldr	r2, [pc, #152]	; (800cb74 <TIM_Base_SetConfig+0x130>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d108      	bne.n	800caf0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cade:	68fb      	ldr	r3, [r7, #12]
 800cae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800cae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cae6:	683b      	ldr	r3, [r7, #0]
 800cae8:	68db      	ldr	r3, [r3, #12]
 800caea:	68fa      	ldr	r2, [r7, #12]
 800caec:	4313      	orrs	r3, r2
 800caee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	695b      	ldr	r3, [r3, #20]
 800cafa:	4313      	orrs	r3, r2
 800cafc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	68fa      	ldr	r2, [r7, #12]
 800cb02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	689a      	ldr	r2, [r3, #8]
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681a      	ldr	r2, [r3, #0]
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	4a10      	ldr	r2, [pc, #64]	; (800cb58 <TIM_Base_SetConfig+0x114>)
 800cb18:	4293      	cmp	r3, r2
 800cb1a:	d00f      	beq.n	800cb3c <TIM_Base_SetConfig+0xf8>
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	4a12      	ldr	r2, [pc, #72]	; (800cb68 <TIM_Base_SetConfig+0x124>)
 800cb20:	4293      	cmp	r3, r2
 800cb22:	d00b      	beq.n	800cb3c <TIM_Base_SetConfig+0xf8>
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	4a11      	ldr	r2, [pc, #68]	; (800cb6c <TIM_Base_SetConfig+0x128>)
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	d007      	beq.n	800cb3c <TIM_Base_SetConfig+0xf8>
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	4a10      	ldr	r2, [pc, #64]	; (800cb70 <TIM_Base_SetConfig+0x12c>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d003      	beq.n	800cb3c <TIM_Base_SetConfig+0xf8>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	4a0f      	ldr	r2, [pc, #60]	; (800cb74 <TIM_Base_SetConfig+0x130>)
 800cb38:	4293      	cmp	r3, r2
 800cb3a:	d103      	bne.n	800cb44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb3c:	683b      	ldr	r3, [r7, #0]
 800cb3e:	691a      	ldr	r2, [r3, #16]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2201      	movs	r2, #1
 800cb48:	615a      	str	r2, [r3, #20]
}
 800cb4a:	bf00      	nop
 800cb4c:	3714      	adds	r7, #20
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb54:	4770      	bx	lr
 800cb56:	bf00      	nop
 800cb58:	40010000 	.word	0x40010000
 800cb5c:	40000400 	.word	0x40000400
 800cb60:	40000800 	.word	0x40000800
 800cb64:	40000c00 	.word	0x40000c00
 800cb68:	40010400 	.word	0x40010400
 800cb6c:	40014000 	.word	0x40014000
 800cb70:	40014400 	.word	0x40014400
 800cb74:	40014800 	.word	0x40014800

0800cb78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cb78:	b480      	push	{r7}
 800cb7a:	b085      	sub	sp, #20
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	6078      	str	r0, [r7, #4]
 800cb80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d101      	bne.n	800cb90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cb8c:	2302      	movs	r3, #2
 800cb8e:	e06d      	b.n	800cc6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	2201      	movs	r2, #1
 800cb94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2202      	movs	r2, #2
 800cb9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	685b      	ldr	r3, [r3, #4]
 800cba6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	4a30      	ldr	r2, [pc, #192]	; (800cc78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbb6:	4293      	cmp	r3, r2
 800cbb8:	d004      	beq.n	800cbc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	4a2f      	ldr	r2, [pc, #188]	; (800cc7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cbc0:	4293      	cmp	r3, r2
 800cbc2:	d108      	bne.n	800cbd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cbca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cbcc:	683b      	ldr	r3, [r7, #0]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	68fa      	ldr	r2, [r7, #12]
 800cbd2:	4313      	orrs	r3, r2
 800cbd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cbdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cbde:	683b      	ldr	r3, [r7, #0]
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	681b      	ldr	r3, [r3, #0]
 800cbec:	68fa      	ldr	r2, [r7, #12]
 800cbee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	4a20      	ldr	r2, [pc, #128]	; (800cc78 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800cbf6:	4293      	cmp	r3, r2
 800cbf8:	d022      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	681b      	ldr	r3, [r3, #0]
 800cbfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cc02:	d01d      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	4a1d      	ldr	r2, [pc, #116]	; (800cc80 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800cc0a:	4293      	cmp	r3, r2
 800cc0c:	d018      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	681b      	ldr	r3, [r3, #0]
 800cc12:	4a1c      	ldr	r2, [pc, #112]	; (800cc84 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800cc14:	4293      	cmp	r3, r2
 800cc16:	d013      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	681b      	ldr	r3, [r3, #0]
 800cc1c:	4a1a      	ldr	r2, [pc, #104]	; (800cc88 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cc1e:	4293      	cmp	r3, r2
 800cc20:	d00e      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	4a15      	ldr	r2, [pc, #84]	; (800cc7c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800cc28:	4293      	cmp	r3, r2
 800cc2a:	d009      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a16      	ldr	r2, [pc, #88]	; (800cc8c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cc32:	4293      	cmp	r3, r2
 800cc34:	d004      	beq.n	800cc40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	4a15      	ldr	r2, [pc, #84]	; (800cc90 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d10c      	bne.n	800cc5a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cc46:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cc48:	683b      	ldr	r3, [r7, #0]
 800cc4a:	689b      	ldr	r3, [r3, #8]
 800cc4c:	68ba      	ldr	r2, [r7, #8]
 800cc4e:	4313      	orrs	r3, r2
 800cc50:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	68ba      	ldr	r2, [r7, #8]
 800cc58:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cc5a:	687b      	ldr	r3, [r7, #4]
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cc6a:	2300      	movs	r3, #0
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr
 800cc78:	40010000 	.word	0x40010000
 800cc7c:	40010400 	.word	0x40010400
 800cc80:	40000400 	.word	0x40000400
 800cc84:	40000800 	.word	0x40000800
 800cc88:	40000c00 	.word	0x40000c00
 800cc8c:	40001800 	.word	0x40001800
 800cc90:	40014000 	.word	0x40014000

0800cc94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cc94:	b480      	push	{r7}
 800cc96:	b083      	sub	sp, #12
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cc9c:	bf00      	nop
 800cc9e:	370c      	adds	r7, #12
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cca8:	b480      	push	{r7}
 800ccaa:	b083      	sub	sp, #12
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ccb0:	bf00      	nop
 800ccb2:	370c      	adds	r7, #12
 800ccb4:	46bd      	mov	sp, r7
 800ccb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccba:	4770      	bx	lr

0800ccbc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ccbc:	b480      	push	{r7}
 800ccbe:	b083      	sub	sp, #12
 800ccc0:	af00      	add	r7, sp, #0
 800ccc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ccc4:	bf00      	nop
 800ccc6:	370c      	adds	r7, #12
 800ccc8:	46bd      	mov	sp, r7
 800ccca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccce:	4770      	bx	lr

0800ccd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ccd0:	b580      	push	{r7, lr}
 800ccd2:	b082      	sub	sp, #8
 800ccd4:	af00      	add	r7, sp, #0
 800ccd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d101      	bne.n	800cce2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ccde:	2301      	movs	r3, #1
 800cce0:	e042      	b.n	800cd68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d106      	bne.n	800ccfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	2200      	movs	r2, #0
 800ccf0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ccf4:	6878      	ldr	r0, [r7, #4]
 800ccf6:	f7f8 ff73 	bl	8005be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	2224      	movs	r2, #36	; 0x24
 800ccfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	681a      	ldr	r2, [r3, #0]
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	f022 0201 	bic.w	r2, r2, #1
 800cd10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800cd12:	6878      	ldr	r0, [r7, #4]
 800cd14:	f000 fbea 	bl	800d4ec <UART_SetConfig>
 800cd18:	4603      	mov	r3, r0
 800cd1a:	2b01      	cmp	r3, #1
 800cd1c:	d101      	bne.n	800cd22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800cd1e:	2301      	movs	r3, #1
 800cd20:	e022      	b.n	800cd68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d002      	beq.n	800cd30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800cd2a:	6878      	ldr	r0, [r7, #4]
 800cd2c:	f001 f946 	bl	800dfbc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	681b      	ldr	r3, [r3, #0]
 800cd34:	685a      	ldr	r2, [r3, #4]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800cd3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	689a      	ldr	r2, [r3, #8]
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800cd4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	f042 0201 	orr.w	r2, r2, #1
 800cd5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cd60:	6878      	ldr	r0, [r7, #4]
 800cd62:	f001 f9cd 	bl	800e100 <UART_CheckIdleState>
 800cd66:	4603      	mov	r3, r0
}
 800cd68:	4618      	mov	r0, r3
 800cd6a:	3708      	adds	r7, #8
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	bd80      	pop	{r7, pc}

0800cd70 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800cd70:	b580      	push	{r7, lr}
 800cd72:	b0ba      	sub	sp, #232	; 0xe8
 800cd74:	af00      	add	r7, sp, #0
 800cd76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	69db      	ldr	r3, [r3, #28]
 800cd7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	689b      	ldr	r3, [r3, #8]
 800cd92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800cd96:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800cd9a:	f640 030f 	movw	r3, #2063	; 0x80f
 800cd9e:	4013      	ands	r3, r2
 800cda0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800cda4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d11b      	bne.n	800cde4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cdac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cdb0:	f003 0320 	and.w	r3, r3, #32
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d015      	beq.n	800cde4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cdb8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cdbc:	f003 0320 	and.w	r3, r3, #32
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d105      	bne.n	800cdd0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cdc4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cdc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cdcc:	2b00      	cmp	r3, #0
 800cdce:	d009      	beq.n	800cde4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	f000 835a 	beq.w	800d48e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	4798      	blx	r3
      }
      return;
 800cde2:	e354      	b.n	800d48e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800cde4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	f000 811f 	beq.w	800d02c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cdee:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800cdf2:	4b8b      	ldr	r3, [pc, #556]	; (800d020 <HAL_UART_IRQHandler+0x2b0>)
 800cdf4:	4013      	ands	r3, r2
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d106      	bne.n	800ce08 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cdfa:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800cdfe:	4b89      	ldr	r3, [pc, #548]	; (800d024 <HAL_UART_IRQHandler+0x2b4>)
 800ce00:	4013      	ands	r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 8112 	beq.w	800d02c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ce08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce0c:	f003 0301 	and.w	r3, r3, #1
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d011      	beq.n	800ce38 <HAL_UART_IRQHandler+0xc8>
 800ce14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ce18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d00b      	beq.n	800ce38 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	2201      	movs	r2, #1
 800ce26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce2e:	f043 0201 	orr.w	r2, r3, #1
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce3c:	f003 0302 	and.w	r3, r3, #2
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d011      	beq.n	800ce68 <HAL_UART_IRQHandler+0xf8>
 800ce44:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce48:	f003 0301 	and.w	r3, r3, #1
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d00b      	beq.n	800ce68 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	2202      	movs	r2, #2
 800ce56:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce5e:	f043 0204 	orr.w	r2, r3, #4
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ce68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce6c:	f003 0304 	and.w	r3, r3, #4
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d011      	beq.n	800ce98 <HAL_UART_IRQHandler+0x128>
 800ce74:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ce78:	f003 0301 	and.w	r3, r3, #1
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d00b      	beq.n	800ce98 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	2204      	movs	r2, #4
 800ce86:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ce88:	687b      	ldr	r3, [r7, #4]
 800ce8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ce8e:	f043 0202 	orr.w	r2, r3, #2
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ce98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ce9c:	f003 0308 	and.w	r3, r3, #8
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d017      	beq.n	800ced4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cea4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cea8:	f003 0320 	and.w	r3, r3, #32
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d105      	bne.n	800cebc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800ceb0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800ceb4:	4b5a      	ldr	r3, [pc, #360]	; (800d020 <HAL_UART_IRQHandler+0x2b0>)
 800ceb6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d00b      	beq.n	800ced4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	2208      	movs	r2, #8
 800cec2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ceca:	f043 0208 	orr.w	r2, r3, #8
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ced4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ced8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d012      	beq.n	800cf06 <HAL_UART_IRQHandler+0x196>
 800cee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cee4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00c      	beq.n	800cf06 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cef4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cefc:	f043 0220 	orr.w	r2, r3, #32
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	f000 82c0 	beq.w	800d492 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cf12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf16:	f003 0320 	and.w	r3, r3, #32
 800cf1a:	2b00      	cmp	r3, #0
 800cf1c:	d013      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cf1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf22:	f003 0320 	and.w	r3, r3, #32
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d105      	bne.n	800cf36 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cf2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cf2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cf32:	2b00      	cmp	r3, #0
 800cf34:	d007      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf42:	6878      	ldr	r0, [r7, #4]
 800cf44:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cf4c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	689b      	ldr	r3, [r3, #8]
 800cf56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf5a:	2b40      	cmp	r3, #64	; 0x40
 800cf5c:	d005      	beq.n	800cf6a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cf5e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cf62:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d04f      	beq.n	800d00a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f001 f9dc 	bl	800e328 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	689b      	ldr	r3, [r3, #8]
 800cf76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf7a:	2b40      	cmp	r3, #64	; 0x40
 800cf7c:	d141      	bne.n	800d002 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	681b      	ldr	r3, [r3, #0]
 800cf82:	3308      	adds	r3, #8
 800cf84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cf8c:	e853 3f00 	ldrex	r3, [r3]
 800cf90:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cf94:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cf98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cf9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	3308      	adds	r3, #8
 800cfa6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cfaa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cfae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cfb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cfb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cfba:	e841 2300 	strex	r3, r2, [r1]
 800cfbe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cfc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cfc6:	2b00      	cmp	r3, #0
 800cfc8:	d1d9      	bne.n	800cf7e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d013      	beq.n	800cffa <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfd6:	4a14      	ldr	r2, [pc, #80]	; (800d028 <HAL_UART_IRQHandler+0x2b8>)
 800cfd8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfde:	4618      	mov	r0, r3
 800cfe0:	f7fa f83c 	bl	800705c <HAL_DMA_Abort_IT>
 800cfe4:	4603      	mov	r3, r0
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d017      	beq.n	800d01a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cfee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800cff4:	4610      	mov	r0, r2
 800cff6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cff8:	e00f      	b.n	800d01a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f000 fa60 	bl	800d4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d000:	e00b      	b.n	800d01a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800d002:	6878      	ldr	r0, [r7, #4]
 800d004:	f000 fa5c 	bl	800d4c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d008:	e007      	b.n	800d01a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800d00a:	6878      	ldr	r0, [r7, #4]
 800d00c:	f000 fa58 	bl	800d4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800d018:	e23b      	b.n	800d492 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d01a:	bf00      	nop
    return;
 800d01c:	e239      	b.n	800d492 <HAL_UART_IRQHandler+0x722>
 800d01e:	bf00      	nop
 800d020:	10000001 	.word	0x10000001
 800d024:	04000120 	.word	0x04000120
 800d028:	0800e3f5 	.word	0x0800e3f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d030:	2b01      	cmp	r3, #1
 800d032:	f040 81ce 	bne.w	800d3d2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d03a:	f003 0310 	and.w	r3, r3, #16
 800d03e:	2b00      	cmp	r3, #0
 800d040:	f000 81c7 	beq.w	800d3d2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d048:	f003 0310 	and.w	r3, r3, #16
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	f000 81c0 	beq.w	800d3d2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2210      	movs	r2, #16
 800d058:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	689b      	ldr	r3, [r3, #8]
 800d060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d064:	2b40      	cmp	r3, #64	; 0x40
 800d066:	f040 813b 	bne.w	800d2e0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d06e:	681b      	ldr	r3, [r3, #0]
 800d070:	4a8b      	ldr	r2, [pc, #556]	; (800d2a0 <HAL_UART_IRQHandler+0x530>)
 800d072:	4293      	cmp	r3, r2
 800d074:	d059      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d07a:	681b      	ldr	r3, [r3, #0]
 800d07c:	4a89      	ldr	r2, [pc, #548]	; (800d2a4 <HAL_UART_IRQHandler+0x534>)
 800d07e:	4293      	cmp	r3, r2
 800d080:	d053      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d086:	681b      	ldr	r3, [r3, #0]
 800d088:	4a87      	ldr	r2, [pc, #540]	; (800d2a8 <HAL_UART_IRQHandler+0x538>)
 800d08a:	4293      	cmp	r3, r2
 800d08c:	d04d      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	4a85      	ldr	r2, [pc, #532]	; (800d2ac <HAL_UART_IRQHandler+0x53c>)
 800d096:	4293      	cmp	r3, r2
 800d098:	d047      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4a83      	ldr	r2, [pc, #524]	; (800d2b0 <HAL_UART_IRQHandler+0x540>)
 800d0a2:	4293      	cmp	r3, r2
 800d0a4:	d041      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4a81      	ldr	r2, [pc, #516]	; (800d2b4 <HAL_UART_IRQHandler+0x544>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d03b      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	4a7f      	ldr	r2, [pc, #508]	; (800d2b8 <HAL_UART_IRQHandler+0x548>)
 800d0ba:	4293      	cmp	r3, r2
 800d0bc:	d035      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a7d      	ldr	r2, [pc, #500]	; (800d2bc <HAL_UART_IRQHandler+0x54c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d02f      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	4a7b      	ldr	r2, [pc, #492]	; (800d2c0 <HAL_UART_IRQHandler+0x550>)
 800d0d2:	4293      	cmp	r3, r2
 800d0d4:	d029      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0da:	681b      	ldr	r3, [r3, #0]
 800d0dc:	4a79      	ldr	r2, [pc, #484]	; (800d2c4 <HAL_UART_IRQHandler+0x554>)
 800d0de:	4293      	cmp	r3, r2
 800d0e0:	d023      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	4a77      	ldr	r2, [pc, #476]	; (800d2c8 <HAL_UART_IRQHandler+0x558>)
 800d0ea:	4293      	cmp	r3, r2
 800d0ec:	d01d      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0f2:	681b      	ldr	r3, [r3, #0]
 800d0f4:	4a75      	ldr	r2, [pc, #468]	; (800d2cc <HAL_UART_IRQHandler+0x55c>)
 800d0f6:	4293      	cmp	r3, r2
 800d0f8:	d017      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4a73      	ldr	r2, [pc, #460]	; (800d2d0 <HAL_UART_IRQHandler+0x560>)
 800d102:	4293      	cmp	r3, r2
 800d104:	d011      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4a71      	ldr	r2, [pc, #452]	; (800d2d4 <HAL_UART_IRQHandler+0x564>)
 800d10e:	4293      	cmp	r3, r2
 800d110:	d00b      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	4a6f      	ldr	r2, [pc, #444]	; (800d2d8 <HAL_UART_IRQHandler+0x568>)
 800d11a:	4293      	cmp	r3, r2
 800d11c:	d005      	beq.n	800d12a <HAL_UART_IRQHandler+0x3ba>
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	4a6d      	ldr	r2, [pc, #436]	; (800d2dc <HAL_UART_IRQHandler+0x56c>)
 800d126:	4293      	cmp	r3, r2
 800d128:	d105      	bne.n	800d136 <HAL_UART_IRQHandler+0x3c6>
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	b29b      	uxth	r3, r3
 800d134:	e004      	b.n	800d140 <HAL_UART_IRQHandler+0x3d0>
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d13a:	681b      	ldr	r3, [r3, #0]
 800d13c:	685b      	ldr	r3, [r3, #4]
 800d13e:	b29b      	uxth	r3, r3
 800d140:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800d144:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f000 81a4 	beq.w	800d496 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d154:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d158:	429a      	cmp	r2, r3
 800d15a:	f080 819c 	bcs.w	800d496 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d15e:	687b      	ldr	r3, [r7, #4]
 800d160:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800d164:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d16c:	69db      	ldr	r3, [r3, #28]
 800d16e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d172:	f000 8086 	beq.w	800d282 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d17e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d182:	e853 3f00 	ldrex	r3, [r3]
 800d186:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800d18a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800d18e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d192:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	681b      	ldr	r3, [r3, #0]
 800d19a:	461a      	mov	r2, r3
 800d19c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800d1a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800d1a4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1a8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800d1ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800d1b0:	e841 2300 	strex	r3, r2, [r1]
 800d1b4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800d1b8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d1da      	bne.n	800d176 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	3308      	adds	r3, #8
 800d1c6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d1ca:	e853 3f00 	ldrex	r3, [r3]
 800d1ce:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800d1d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d1d2:	f023 0301 	bic.w	r3, r3, #1
 800d1d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	3308      	adds	r3, #8
 800d1e0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800d1e4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800d1e8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1ea:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800d1ec:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800d1f0:	e841 2300 	strex	r3, r2, [r1]
 800d1f4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800d1f6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d1e1      	bne.n	800d1c0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1fc:	687b      	ldr	r3, [r7, #4]
 800d1fe:	681b      	ldr	r3, [r3, #0]
 800d200:	3308      	adds	r3, #8
 800d202:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d204:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d206:	e853 3f00 	ldrex	r3, [r3]
 800d20a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800d20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d20e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d212:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	3308      	adds	r3, #8
 800d21c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800d220:	66fa      	str	r2, [r7, #108]	; 0x6c
 800d222:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d224:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800d226:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800d228:	e841 2300 	strex	r3, r2, [r1]
 800d22c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800d22e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d230:	2b00      	cmp	r3, #0
 800d232:	d1e3      	bne.n	800d1fc <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	2220      	movs	r2, #32
 800d238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	2200      	movs	r2, #0
 800d240:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d248:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d24a:	e853 3f00 	ldrex	r3, [r3]
 800d24e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d250:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d252:	f023 0310 	bic.w	r3, r3, #16
 800d256:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	461a      	mov	r2, r3
 800d260:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800d264:	65bb      	str	r3, [r7, #88]	; 0x58
 800d266:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d268:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d26a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d26c:	e841 2300 	strex	r3, r2, [r1]
 800d270:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d272:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d274:	2b00      	cmp	r3, #0
 800d276:	d1e4      	bne.n	800d242 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d27c:	4618      	mov	r0, r3
 800d27e:	f7f9 fbcf 	bl	8006a20 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d28e:	b29b      	uxth	r3, r3
 800d290:	1ad3      	subs	r3, r2, r3
 800d292:	b29b      	uxth	r3, r3
 800d294:	4619      	mov	r1, r3
 800d296:	6878      	ldr	r0, [r7, #4]
 800d298:	f000 f91c 	bl	800d4d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d29c:	e0fb      	b.n	800d496 <HAL_UART_IRQHandler+0x726>
 800d29e:	bf00      	nop
 800d2a0:	40020010 	.word	0x40020010
 800d2a4:	40020028 	.word	0x40020028
 800d2a8:	40020040 	.word	0x40020040
 800d2ac:	40020058 	.word	0x40020058
 800d2b0:	40020070 	.word	0x40020070
 800d2b4:	40020088 	.word	0x40020088
 800d2b8:	400200a0 	.word	0x400200a0
 800d2bc:	400200b8 	.word	0x400200b8
 800d2c0:	40020410 	.word	0x40020410
 800d2c4:	40020428 	.word	0x40020428
 800d2c8:	40020440 	.word	0x40020440
 800d2cc:	40020458 	.word	0x40020458
 800d2d0:	40020470 	.word	0x40020470
 800d2d4:	40020488 	.word	0x40020488
 800d2d8:	400204a0 	.word	0x400204a0
 800d2dc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2ec:	b29b      	uxth	r3, r3
 800d2ee:	1ad3      	subs	r3, r2, r3
 800d2f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800d2fa:	b29b      	uxth	r3, r3
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	f000 80cc 	beq.w	800d49a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800d302:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d306:	2b00      	cmp	r3, #0
 800d308:	f000 80c7 	beq.w	800d49a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d30c:	687b      	ldr	r3, [r7, #4]
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d312:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d314:	e853 3f00 	ldrex	r3, [r3]
 800d318:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d31a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d31c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d320:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	461a      	mov	r2, r3
 800d32a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800d32e:	647b      	str	r3, [r7, #68]	; 0x44
 800d330:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d332:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d336:	e841 2300 	strex	r3, r2, [r1]
 800d33a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d33c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d1e4      	bne.n	800d30c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d342:	687b      	ldr	r3, [r7, #4]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	3308      	adds	r3, #8
 800d348:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d34a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d34c:	e853 3f00 	ldrex	r3, [r3]
 800d350:	623b      	str	r3, [r7, #32]
   return(result);
 800d352:	6a3a      	ldr	r2, [r7, #32]
 800d354:	4b54      	ldr	r3, [pc, #336]	; (800d4a8 <HAL_UART_IRQHandler+0x738>)
 800d356:	4013      	ands	r3, r2
 800d358:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	3308      	adds	r3, #8
 800d362:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800d366:	633a      	str	r2, [r7, #48]	; 0x30
 800d368:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d36a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d36c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d36e:	e841 2300 	strex	r3, r2, [r1]
 800d372:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d376:	2b00      	cmp	r3, #0
 800d378:	d1e3      	bne.n	800d342 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2220      	movs	r2, #32
 800d37e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	2200      	movs	r2, #0
 800d386:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2200      	movs	r2, #0
 800d38c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	681b      	ldr	r3, [r3, #0]
 800d392:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	e853 3f00 	ldrex	r3, [r3]
 800d39a:	60fb      	str	r3, [r7, #12]
   return(result);
 800d39c:	68fb      	ldr	r3, [r7, #12]
 800d39e:	f023 0310 	bic.w	r3, r3, #16
 800d3a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	461a      	mov	r2, r3
 800d3ac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800d3b0:	61fb      	str	r3, [r7, #28]
 800d3b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3b4:	69b9      	ldr	r1, [r7, #24]
 800d3b6:	69fa      	ldr	r2, [r7, #28]
 800d3b8:	e841 2300 	strex	r3, r2, [r1]
 800d3bc:	617b      	str	r3, [r7, #20]
   return(result);
 800d3be:	697b      	ldr	r3, [r7, #20]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d1e4      	bne.n	800d38e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800d3c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800d3c8:	4619      	mov	r1, r3
 800d3ca:	6878      	ldr	r0, [r7, #4]
 800d3cc:	f000 f882 	bl	800d4d4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d3d0:	e063      	b.n	800d49a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d3d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d3d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d00e      	beq.n	800d3fc <HAL_UART_IRQHandler+0x68c>
 800d3de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d3e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d008      	beq.n	800d3fc <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d3f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800d3f4:	6878      	ldr	r0, [r7, #4]
 800d3f6:	f001 f83e 	bl	800e476 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d3fa:	e051      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800d3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d404:	2b00      	cmp	r3, #0
 800d406:	d014      	beq.n	800d432 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800d408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d40c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d410:	2b00      	cmp	r3, #0
 800d412:	d105      	bne.n	800d420 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800d414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800d418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d008      	beq.n	800d432 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d424:	2b00      	cmp	r3, #0
 800d426:	d03a      	beq.n	800d49e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	4798      	blx	r3
    }
    return;
 800d430:	e035      	b.n	800d49e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d009      	beq.n	800d452 <HAL_UART_IRQHandler+0x6e2>
 800d43e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	d003      	beq.n	800d452 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800d44a:	6878      	ldr	r0, [r7, #4]
 800d44c:	f000 ffe8 	bl	800e420 <UART_EndTransmit_IT>
    return;
 800d450:	e026      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800d452:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d009      	beq.n	800d472 <HAL_UART_IRQHandler+0x702>
 800d45e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d462:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d466:	2b00      	cmp	r3, #0
 800d468:	d003      	beq.n	800d472 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800d46a:	6878      	ldr	r0, [r7, #4]
 800d46c:	f001 f817 	bl	800e49e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d470:	e016      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800d472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800d476:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d010      	beq.n	800d4a0 <HAL_UART_IRQHandler+0x730>
 800d47e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800d482:	2b00      	cmp	r3, #0
 800d484:	da0c      	bge.n	800d4a0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 ffff 	bl	800e48a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d48c:	e008      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
      return;
 800d48e:	bf00      	nop
 800d490:	e006      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
    return;
 800d492:	bf00      	nop
 800d494:	e004      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
      return;
 800d496:	bf00      	nop
 800d498:	e002      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
      return;
 800d49a:	bf00      	nop
 800d49c:	e000      	b.n	800d4a0 <HAL_UART_IRQHandler+0x730>
    return;
 800d49e:	bf00      	nop
  }
}
 800d4a0:	37e8      	adds	r7, #232	; 0xe8
 800d4a2:	46bd      	mov	sp, r7
 800d4a4:	bd80      	pop	{r7, pc}
 800d4a6:	bf00      	nop
 800d4a8:	effffffe 	.word	0xeffffffe

0800d4ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d4ac:	b480      	push	{r7}
 800d4ae:	b083      	sub	sp, #12
 800d4b0:	af00      	add	r7, sp, #0
 800d4b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d4b4:	bf00      	nop
 800d4b6:	370c      	adds	r7, #12
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr

0800d4c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800d4c0:	b480      	push	{r7}
 800d4c2:	b083      	sub	sp, #12
 800d4c4:	af00      	add	r7, sp, #0
 800d4c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800d4c8:	bf00      	nop
 800d4ca:	370c      	adds	r7, #12
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d4d4:	b480      	push	{r7}
 800d4d6:	b083      	sub	sp, #12
 800d4d8:	af00      	add	r7, sp, #0
 800d4da:	6078      	str	r0, [r7, #4]
 800d4dc:	460b      	mov	r3, r1
 800d4de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d4e0:	bf00      	nop
 800d4e2:	370c      	adds	r7, #12
 800d4e4:	46bd      	mov	sp, r7
 800d4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ea:	4770      	bx	lr

0800d4ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d4ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d4f0:	b092      	sub	sp, #72	; 0x48
 800d4f2:	af00      	add	r7, sp, #0
 800d4f4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	689a      	ldr	r2, [r3, #8]
 800d500:	697b      	ldr	r3, [r7, #20]
 800d502:	691b      	ldr	r3, [r3, #16]
 800d504:	431a      	orrs	r2, r3
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	695b      	ldr	r3, [r3, #20]
 800d50a:	431a      	orrs	r2, r3
 800d50c:	697b      	ldr	r3, [r7, #20]
 800d50e:	69db      	ldr	r3, [r3, #28]
 800d510:	4313      	orrs	r3, r2
 800d512:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	681b      	ldr	r3, [r3, #0]
 800d518:	681a      	ldr	r2, [r3, #0]
 800d51a:	4bbe      	ldr	r3, [pc, #760]	; (800d814 <UART_SetConfig+0x328>)
 800d51c:	4013      	ands	r3, r2
 800d51e:	697a      	ldr	r2, [r7, #20]
 800d520:	6812      	ldr	r2, [r2, #0]
 800d522:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d524:	430b      	orrs	r3, r1
 800d526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d528:	697b      	ldr	r3, [r7, #20]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	685b      	ldr	r3, [r3, #4]
 800d52e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	68da      	ldr	r2, [r3, #12]
 800d536:	697b      	ldr	r3, [r7, #20]
 800d538:	681b      	ldr	r3, [r3, #0]
 800d53a:	430a      	orrs	r2, r1
 800d53c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	699b      	ldr	r3, [r3, #24]
 800d542:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d544:	697b      	ldr	r3, [r7, #20]
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	4ab3      	ldr	r2, [pc, #716]	; (800d818 <UART_SetConfig+0x32c>)
 800d54a:	4293      	cmp	r3, r2
 800d54c:	d004      	beq.n	800d558 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d54e:	697b      	ldr	r3, [r7, #20]
 800d550:	6a1b      	ldr	r3, [r3, #32]
 800d552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d554:	4313      	orrs	r3, r2
 800d556:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	689a      	ldr	r2, [r3, #8]
 800d55e:	4baf      	ldr	r3, [pc, #700]	; (800d81c <UART_SetConfig+0x330>)
 800d560:	4013      	ands	r3, r2
 800d562:	697a      	ldr	r2, [r7, #20]
 800d564:	6812      	ldr	r2, [r2, #0]
 800d566:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d568:	430b      	orrs	r3, r1
 800d56a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d572:	f023 010f 	bic.w	r1, r3, #15
 800d576:	697b      	ldr	r3, [r7, #20]
 800d578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d57a:	697b      	ldr	r3, [r7, #20]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	430a      	orrs	r2, r1
 800d580:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	4aa6      	ldr	r2, [pc, #664]	; (800d820 <UART_SetConfig+0x334>)
 800d588:	4293      	cmp	r3, r2
 800d58a:	d177      	bne.n	800d67c <UART_SetConfig+0x190>
 800d58c:	4ba5      	ldr	r3, [pc, #660]	; (800d824 <UART_SetConfig+0x338>)
 800d58e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d590:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d594:	2b28      	cmp	r3, #40	; 0x28
 800d596:	d86d      	bhi.n	800d674 <UART_SetConfig+0x188>
 800d598:	a201      	add	r2, pc, #4	; (adr r2, 800d5a0 <UART_SetConfig+0xb4>)
 800d59a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d59e:	bf00      	nop
 800d5a0:	0800d645 	.word	0x0800d645
 800d5a4:	0800d675 	.word	0x0800d675
 800d5a8:	0800d675 	.word	0x0800d675
 800d5ac:	0800d675 	.word	0x0800d675
 800d5b0:	0800d675 	.word	0x0800d675
 800d5b4:	0800d675 	.word	0x0800d675
 800d5b8:	0800d675 	.word	0x0800d675
 800d5bc:	0800d675 	.word	0x0800d675
 800d5c0:	0800d64d 	.word	0x0800d64d
 800d5c4:	0800d675 	.word	0x0800d675
 800d5c8:	0800d675 	.word	0x0800d675
 800d5cc:	0800d675 	.word	0x0800d675
 800d5d0:	0800d675 	.word	0x0800d675
 800d5d4:	0800d675 	.word	0x0800d675
 800d5d8:	0800d675 	.word	0x0800d675
 800d5dc:	0800d675 	.word	0x0800d675
 800d5e0:	0800d655 	.word	0x0800d655
 800d5e4:	0800d675 	.word	0x0800d675
 800d5e8:	0800d675 	.word	0x0800d675
 800d5ec:	0800d675 	.word	0x0800d675
 800d5f0:	0800d675 	.word	0x0800d675
 800d5f4:	0800d675 	.word	0x0800d675
 800d5f8:	0800d675 	.word	0x0800d675
 800d5fc:	0800d675 	.word	0x0800d675
 800d600:	0800d65d 	.word	0x0800d65d
 800d604:	0800d675 	.word	0x0800d675
 800d608:	0800d675 	.word	0x0800d675
 800d60c:	0800d675 	.word	0x0800d675
 800d610:	0800d675 	.word	0x0800d675
 800d614:	0800d675 	.word	0x0800d675
 800d618:	0800d675 	.word	0x0800d675
 800d61c:	0800d675 	.word	0x0800d675
 800d620:	0800d665 	.word	0x0800d665
 800d624:	0800d675 	.word	0x0800d675
 800d628:	0800d675 	.word	0x0800d675
 800d62c:	0800d675 	.word	0x0800d675
 800d630:	0800d675 	.word	0x0800d675
 800d634:	0800d675 	.word	0x0800d675
 800d638:	0800d675 	.word	0x0800d675
 800d63c:	0800d675 	.word	0x0800d675
 800d640:	0800d66d 	.word	0x0800d66d
 800d644:	2301      	movs	r3, #1
 800d646:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d64a:	e222      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d64c:	2304      	movs	r3, #4
 800d64e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d652:	e21e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d654:	2308      	movs	r3, #8
 800d656:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d65a:	e21a      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d65c:	2310      	movs	r3, #16
 800d65e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d662:	e216      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d664:	2320      	movs	r3, #32
 800d666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d66a:	e212      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d66c:	2340      	movs	r3, #64	; 0x40
 800d66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d672:	e20e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d674:	2380      	movs	r3, #128	; 0x80
 800d676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d67a:	e20a      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4a69      	ldr	r2, [pc, #420]	; (800d828 <UART_SetConfig+0x33c>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d130      	bne.n	800d6e8 <UART_SetConfig+0x1fc>
 800d686:	4b67      	ldr	r3, [pc, #412]	; (800d824 <UART_SetConfig+0x338>)
 800d688:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d68a:	f003 0307 	and.w	r3, r3, #7
 800d68e:	2b05      	cmp	r3, #5
 800d690:	d826      	bhi.n	800d6e0 <UART_SetConfig+0x1f4>
 800d692:	a201      	add	r2, pc, #4	; (adr r2, 800d698 <UART_SetConfig+0x1ac>)
 800d694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d698:	0800d6b1 	.word	0x0800d6b1
 800d69c:	0800d6b9 	.word	0x0800d6b9
 800d6a0:	0800d6c1 	.word	0x0800d6c1
 800d6a4:	0800d6c9 	.word	0x0800d6c9
 800d6a8:	0800d6d1 	.word	0x0800d6d1
 800d6ac:	0800d6d9 	.word	0x0800d6d9
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6b6:	e1ec      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6b8:	2304      	movs	r3, #4
 800d6ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6be:	e1e8      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6c0:	2308      	movs	r3, #8
 800d6c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6c6:	e1e4      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6c8:	2310      	movs	r3, #16
 800d6ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6ce:	e1e0      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6d0:	2320      	movs	r3, #32
 800d6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6d6:	e1dc      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6d8:	2340      	movs	r3, #64	; 0x40
 800d6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6de:	e1d8      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6e0:	2380      	movs	r3, #128	; 0x80
 800d6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d6e6:	e1d4      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d6e8:	697b      	ldr	r3, [r7, #20]
 800d6ea:	681b      	ldr	r3, [r3, #0]
 800d6ec:	4a4f      	ldr	r2, [pc, #316]	; (800d82c <UART_SetConfig+0x340>)
 800d6ee:	4293      	cmp	r3, r2
 800d6f0:	d130      	bne.n	800d754 <UART_SetConfig+0x268>
 800d6f2:	4b4c      	ldr	r3, [pc, #304]	; (800d824 <UART_SetConfig+0x338>)
 800d6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6f6:	f003 0307 	and.w	r3, r3, #7
 800d6fa:	2b05      	cmp	r3, #5
 800d6fc:	d826      	bhi.n	800d74c <UART_SetConfig+0x260>
 800d6fe:	a201      	add	r2, pc, #4	; (adr r2, 800d704 <UART_SetConfig+0x218>)
 800d700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d704:	0800d71d 	.word	0x0800d71d
 800d708:	0800d725 	.word	0x0800d725
 800d70c:	0800d72d 	.word	0x0800d72d
 800d710:	0800d735 	.word	0x0800d735
 800d714:	0800d73d 	.word	0x0800d73d
 800d718:	0800d745 	.word	0x0800d745
 800d71c:	2300      	movs	r3, #0
 800d71e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d722:	e1b6      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d724:	2304      	movs	r3, #4
 800d726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d72a:	e1b2      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d72c:	2308      	movs	r3, #8
 800d72e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d732:	e1ae      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d734:	2310      	movs	r3, #16
 800d736:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d73a:	e1aa      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d73c:	2320      	movs	r3, #32
 800d73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d742:	e1a6      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d744:	2340      	movs	r3, #64	; 0x40
 800d746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d74a:	e1a2      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d74c:	2380      	movs	r3, #128	; 0x80
 800d74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d752:	e19e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d754:	697b      	ldr	r3, [r7, #20]
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	4a35      	ldr	r2, [pc, #212]	; (800d830 <UART_SetConfig+0x344>)
 800d75a:	4293      	cmp	r3, r2
 800d75c:	d130      	bne.n	800d7c0 <UART_SetConfig+0x2d4>
 800d75e:	4b31      	ldr	r3, [pc, #196]	; (800d824 <UART_SetConfig+0x338>)
 800d760:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d762:	f003 0307 	and.w	r3, r3, #7
 800d766:	2b05      	cmp	r3, #5
 800d768:	d826      	bhi.n	800d7b8 <UART_SetConfig+0x2cc>
 800d76a:	a201      	add	r2, pc, #4	; (adr r2, 800d770 <UART_SetConfig+0x284>)
 800d76c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d770:	0800d789 	.word	0x0800d789
 800d774:	0800d791 	.word	0x0800d791
 800d778:	0800d799 	.word	0x0800d799
 800d77c:	0800d7a1 	.word	0x0800d7a1
 800d780:	0800d7a9 	.word	0x0800d7a9
 800d784:	0800d7b1 	.word	0x0800d7b1
 800d788:	2300      	movs	r3, #0
 800d78a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d78e:	e180      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d790:	2304      	movs	r3, #4
 800d792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d796:	e17c      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d798:	2308      	movs	r3, #8
 800d79a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d79e:	e178      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d7a0:	2310      	movs	r3, #16
 800d7a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7a6:	e174      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d7a8:	2320      	movs	r3, #32
 800d7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7ae:	e170      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d7b0:	2340      	movs	r3, #64	; 0x40
 800d7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7b6:	e16c      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d7b8:	2380      	movs	r3, #128	; 0x80
 800d7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7be:	e168      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d7c0:	697b      	ldr	r3, [r7, #20]
 800d7c2:	681b      	ldr	r3, [r3, #0]
 800d7c4:	4a1b      	ldr	r2, [pc, #108]	; (800d834 <UART_SetConfig+0x348>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d142      	bne.n	800d850 <UART_SetConfig+0x364>
 800d7ca:	4b16      	ldr	r3, [pc, #88]	; (800d824 <UART_SetConfig+0x338>)
 800d7cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7ce:	f003 0307 	and.w	r3, r3, #7
 800d7d2:	2b05      	cmp	r3, #5
 800d7d4:	d838      	bhi.n	800d848 <UART_SetConfig+0x35c>
 800d7d6:	a201      	add	r2, pc, #4	; (adr r2, 800d7dc <UART_SetConfig+0x2f0>)
 800d7d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7dc:	0800d7f5 	.word	0x0800d7f5
 800d7e0:	0800d7fd 	.word	0x0800d7fd
 800d7e4:	0800d805 	.word	0x0800d805
 800d7e8:	0800d80d 	.word	0x0800d80d
 800d7ec:	0800d839 	.word	0x0800d839
 800d7f0:	0800d841 	.word	0x0800d841
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d7fa:	e14a      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d7fc:	2304      	movs	r3, #4
 800d7fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d802:	e146      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d804:	2308      	movs	r3, #8
 800d806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d80a:	e142      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d80c:	2310      	movs	r3, #16
 800d80e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d812:	e13e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d814:	cfff69f3 	.word	0xcfff69f3
 800d818:	58000c00 	.word	0x58000c00
 800d81c:	11fff4ff 	.word	0x11fff4ff
 800d820:	40011000 	.word	0x40011000
 800d824:	58024400 	.word	0x58024400
 800d828:	40004400 	.word	0x40004400
 800d82c:	40004800 	.word	0x40004800
 800d830:	40004c00 	.word	0x40004c00
 800d834:	40005000 	.word	0x40005000
 800d838:	2320      	movs	r3, #32
 800d83a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d83e:	e128      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d840:	2340      	movs	r3, #64	; 0x40
 800d842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d846:	e124      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d848:	2380      	movs	r3, #128	; 0x80
 800d84a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d84e:	e120      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d850:	697b      	ldr	r3, [r7, #20]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	4acb      	ldr	r2, [pc, #812]	; (800db84 <UART_SetConfig+0x698>)
 800d856:	4293      	cmp	r3, r2
 800d858:	d176      	bne.n	800d948 <UART_SetConfig+0x45c>
 800d85a:	4bcb      	ldr	r3, [pc, #812]	; (800db88 <UART_SetConfig+0x69c>)
 800d85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d85e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800d862:	2b28      	cmp	r3, #40	; 0x28
 800d864:	d86c      	bhi.n	800d940 <UART_SetConfig+0x454>
 800d866:	a201      	add	r2, pc, #4	; (adr r2, 800d86c <UART_SetConfig+0x380>)
 800d868:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d86c:	0800d911 	.word	0x0800d911
 800d870:	0800d941 	.word	0x0800d941
 800d874:	0800d941 	.word	0x0800d941
 800d878:	0800d941 	.word	0x0800d941
 800d87c:	0800d941 	.word	0x0800d941
 800d880:	0800d941 	.word	0x0800d941
 800d884:	0800d941 	.word	0x0800d941
 800d888:	0800d941 	.word	0x0800d941
 800d88c:	0800d919 	.word	0x0800d919
 800d890:	0800d941 	.word	0x0800d941
 800d894:	0800d941 	.word	0x0800d941
 800d898:	0800d941 	.word	0x0800d941
 800d89c:	0800d941 	.word	0x0800d941
 800d8a0:	0800d941 	.word	0x0800d941
 800d8a4:	0800d941 	.word	0x0800d941
 800d8a8:	0800d941 	.word	0x0800d941
 800d8ac:	0800d921 	.word	0x0800d921
 800d8b0:	0800d941 	.word	0x0800d941
 800d8b4:	0800d941 	.word	0x0800d941
 800d8b8:	0800d941 	.word	0x0800d941
 800d8bc:	0800d941 	.word	0x0800d941
 800d8c0:	0800d941 	.word	0x0800d941
 800d8c4:	0800d941 	.word	0x0800d941
 800d8c8:	0800d941 	.word	0x0800d941
 800d8cc:	0800d929 	.word	0x0800d929
 800d8d0:	0800d941 	.word	0x0800d941
 800d8d4:	0800d941 	.word	0x0800d941
 800d8d8:	0800d941 	.word	0x0800d941
 800d8dc:	0800d941 	.word	0x0800d941
 800d8e0:	0800d941 	.word	0x0800d941
 800d8e4:	0800d941 	.word	0x0800d941
 800d8e8:	0800d941 	.word	0x0800d941
 800d8ec:	0800d931 	.word	0x0800d931
 800d8f0:	0800d941 	.word	0x0800d941
 800d8f4:	0800d941 	.word	0x0800d941
 800d8f8:	0800d941 	.word	0x0800d941
 800d8fc:	0800d941 	.word	0x0800d941
 800d900:	0800d941 	.word	0x0800d941
 800d904:	0800d941 	.word	0x0800d941
 800d908:	0800d941 	.word	0x0800d941
 800d90c:	0800d939 	.word	0x0800d939
 800d910:	2301      	movs	r3, #1
 800d912:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d916:	e0bc      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d918:	2304      	movs	r3, #4
 800d91a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d91e:	e0b8      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d920:	2308      	movs	r3, #8
 800d922:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d926:	e0b4      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d928:	2310      	movs	r3, #16
 800d92a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d92e:	e0b0      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d930:	2320      	movs	r3, #32
 800d932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d936:	e0ac      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d938:	2340      	movs	r3, #64	; 0x40
 800d93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d93e:	e0a8      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d940:	2380      	movs	r3, #128	; 0x80
 800d942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d946:	e0a4      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d948:	697b      	ldr	r3, [r7, #20]
 800d94a:	681b      	ldr	r3, [r3, #0]
 800d94c:	4a8f      	ldr	r2, [pc, #572]	; (800db8c <UART_SetConfig+0x6a0>)
 800d94e:	4293      	cmp	r3, r2
 800d950:	d130      	bne.n	800d9b4 <UART_SetConfig+0x4c8>
 800d952:	4b8d      	ldr	r3, [pc, #564]	; (800db88 <UART_SetConfig+0x69c>)
 800d954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d956:	f003 0307 	and.w	r3, r3, #7
 800d95a:	2b05      	cmp	r3, #5
 800d95c:	d826      	bhi.n	800d9ac <UART_SetConfig+0x4c0>
 800d95e:	a201      	add	r2, pc, #4	; (adr r2, 800d964 <UART_SetConfig+0x478>)
 800d960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d964:	0800d97d 	.word	0x0800d97d
 800d968:	0800d985 	.word	0x0800d985
 800d96c:	0800d98d 	.word	0x0800d98d
 800d970:	0800d995 	.word	0x0800d995
 800d974:	0800d99d 	.word	0x0800d99d
 800d978:	0800d9a5 	.word	0x0800d9a5
 800d97c:	2300      	movs	r3, #0
 800d97e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d982:	e086      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d984:	2304      	movs	r3, #4
 800d986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d98a:	e082      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d98c:	2308      	movs	r3, #8
 800d98e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d992:	e07e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d994:	2310      	movs	r3, #16
 800d996:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d99a:	e07a      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d99c:	2320      	movs	r3, #32
 800d99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9a2:	e076      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d9a4:	2340      	movs	r3, #64	; 0x40
 800d9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9aa:	e072      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d9ac:	2380      	movs	r3, #128	; 0x80
 800d9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9b2:	e06e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d9b4:	697b      	ldr	r3, [r7, #20]
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	4a75      	ldr	r2, [pc, #468]	; (800db90 <UART_SetConfig+0x6a4>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d130      	bne.n	800da20 <UART_SetConfig+0x534>
 800d9be:	4b72      	ldr	r3, [pc, #456]	; (800db88 <UART_SetConfig+0x69c>)
 800d9c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d9c2:	f003 0307 	and.w	r3, r3, #7
 800d9c6:	2b05      	cmp	r3, #5
 800d9c8:	d826      	bhi.n	800da18 <UART_SetConfig+0x52c>
 800d9ca:	a201      	add	r2, pc, #4	; (adr r2, 800d9d0 <UART_SetConfig+0x4e4>)
 800d9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d9d0:	0800d9e9 	.word	0x0800d9e9
 800d9d4:	0800d9f1 	.word	0x0800d9f1
 800d9d8:	0800d9f9 	.word	0x0800d9f9
 800d9dc:	0800da01 	.word	0x0800da01
 800d9e0:	0800da09 	.word	0x0800da09
 800d9e4:	0800da11 	.word	0x0800da11
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9ee:	e050      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d9f0:	2304      	movs	r3, #4
 800d9f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9f6:	e04c      	b.n	800da92 <UART_SetConfig+0x5a6>
 800d9f8:	2308      	movs	r3, #8
 800d9fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d9fe:	e048      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da00:	2310      	movs	r3, #16
 800da02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da06:	e044      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da08:	2320      	movs	r3, #32
 800da0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da0e:	e040      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da10:	2340      	movs	r3, #64	; 0x40
 800da12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da16:	e03c      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da18:	2380      	movs	r3, #128	; 0x80
 800da1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da1e:	e038      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da20:	697b      	ldr	r3, [r7, #20]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	4a5b      	ldr	r2, [pc, #364]	; (800db94 <UART_SetConfig+0x6a8>)
 800da26:	4293      	cmp	r3, r2
 800da28:	d130      	bne.n	800da8c <UART_SetConfig+0x5a0>
 800da2a:	4b57      	ldr	r3, [pc, #348]	; (800db88 <UART_SetConfig+0x69c>)
 800da2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800da2e:	f003 0307 	and.w	r3, r3, #7
 800da32:	2b05      	cmp	r3, #5
 800da34:	d826      	bhi.n	800da84 <UART_SetConfig+0x598>
 800da36:	a201      	add	r2, pc, #4	; (adr r2, 800da3c <UART_SetConfig+0x550>)
 800da38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da3c:	0800da55 	.word	0x0800da55
 800da40:	0800da5d 	.word	0x0800da5d
 800da44:	0800da65 	.word	0x0800da65
 800da48:	0800da6d 	.word	0x0800da6d
 800da4c:	0800da75 	.word	0x0800da75
 800da50:	0800da7d 	.word	0x0800da7d
 800da54:	2302      	movs	r3, #2
 800da56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da5a:	e01a      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da5c:	2304      	movs	r3, #4
 800da5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da62:	e016      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da64:	2308      	movs	r3, #8
 800da66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da6a:	e012      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da6c:	2310      	movs	r3, #16
 800da6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da72:	e00e      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da74:	2320      	movs	r3, #32
 800da76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da7a:	e00a      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da7c:	2340      	movs	r3, #64	; 0x40
 800da7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da82:	e006      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da84:	2380      	movs	r3, #128	; 0x80
 800da86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800da8a:	e002      	b.n	800da92 <UART_SetConfig+0x5a6>
 800da8c:	2380      	movs	r3, #128	; 0x80
 800da8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800da92:	697b      	ldr	r3, [r7, #20]
 800da94:	681b      	ldr	r3, [r3, #0]
 800da96:	4a3f      	ldr	r2, [pc, #252]	; (800db94 <UART_SetConfig+0x6a8>)
 800da98:	4293      	cmp	r3, r2
 800da9a:	f040 80f8 	bne.w	800dc8e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800da9e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800daa2:	2b20      	cmp	r3, #32
 800daa4:	dc46      	bgt.n	800db34 <UART_SetConfig+0x648>
 800daa6:	2b02      	cmp	r3, #2
 800daa8:	f2c0 8082 	blt.w	800dbb0 <UART_SetConfig+0x6c4>
 800daac:	3b02      	subs	r3, #2
 800daae:	2b1e      	cmp	r3, #30
 800dab0:	d87e      	bhi.n	800dbb0 <UART_SetConfig+0x6c4>
 800dab2:	a201      	add	r2, pc, #4	; (adr r2, 800dab8 <UART_SetConfig+0x5cc>)
 800dab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dab8:	0800db3b 	.word	0x0800db3b
 800dabc:	0800dbb1 	.word	0x0800dbb1
 800dac0:	0800db43 	.word	0x0800db43
 800dac4:	0800dbb1 	.word	0x0800dbb1
 800dac8:	0800dbb1 	.word	0x0800dbb1
 800dacc:	0800dbb1 	.word	0x0800dbb1
 800dad0:	0800db53 	.word	0x0800db53
 800dad4:	0800dbb1 	.word	0x0800dbb1
 800dad8:	0800dbb1 	.word	0x0800dbb1
 800dadc:	0800dbb1 	.word	0x0800dbb1
 800dae0:	0800dbb1 	.word	0x0800dbb1
 800dae4:	0800dbb1 	.word	0x0800dbb1
 800dae8:	0800dbb1 	.word	0x0800dbb1
 800daec:	0800dbb1 	.word	0x0800dbb1
 800daf0:	0800db63 	.word	0x0800db63
 800daf4:	0800dbb1 	.word	0x0800dbb1
 800daf8:	0800dbb1 	.word	0x0800dbb1
 800dafc:	0800dbb1 	.word	0x0800dbb1
 800db00:	0800dbb1 	.word	0x0800dbb1
 800db04:	0800dbb1 	.word	0x0800dbb1
 800db08:	0800dbb1 	.word	0x0800dbb1
 800db0c:	0800dbb1 	.word	0x0800dbb1
 800db10:	0800dbb1 	.word	0x0800dbb1
 800db14:	0800dbb1 	.word	0x0800dbb1
 800db18:	0800dbb1 	.word	0x0800dbb1
 800db1c:	0800dbb1 	.word	0x0800dbb1
 800db20:	0800dbb1 	.word	0x0800dbb1
 800db24:	0800dbb1 	.word	0x0800dbb1
 800db28:	0800dbb1 	.word	0x0800dbb1
 800db2c:	0800dbb1 	.word	0x0800dbb1
 800db30:	0800dba3 	.word	0x0800dba3
 800db34:	2b40      	cmp	r3, #64	; 0x40
 800db36:	d037      	beq.n	800dba8 <UART_SetConfig+0x6bc>
 800db38:	e03a      	b.n	800dbb0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800db3a:	f7fd fd3b 	bl	800b5b4 <HAL_RCCEx_GetD3PCLK1Freq>
 800db3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800db40:	e03c      	b.n	800dbbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800db42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800db46:	4618      	mov	r0, r3
 800db48:	f7fd fd4a 	bl	800b5e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800db4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db50:	e034      	b.n	800dbbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800db52:	f107 0318 	add.w	r3, r7, #24
 800db56:	4618      	mov	r0, r3
 800db58:	f7fd fe96 	bl	800b888 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800db5c:	69fb      	ldr	r3, [r7, #28]
 800db5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800db60:	e02c      	b.n	800dbbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800db62:	4b09      	ldr	r3, [pc, #36]	; (800db88 <UART_SetConfig+0x69c>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	f003 0320 	and.w	r3, r3, #32
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d016      	beq.n	800db9c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800db6e:	4b06      	ldr	r3, [pc, #24]	; (800db88 <UART_SetConfig+0x69c>)
 800db70:	681b      	ldr	r3, [r3, #0]
 800db72:	08db      	lsrs	r3, r3, #3
 800db74:	f003 0303 	and.w	r3, r3, #3
 800db78:	4a07      	ldr	r2, [pc, #28]	; (800db98 <UART_SetConfig+0x6ac>)
 800db7a:	fa22 f303 	lsr.w	r3, r2, r3
 800db7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800db80:	e01c      	b.n	800dbbc <UART_SetConfig+0x6d0>
 800db82:	bf00      	nop
 800db84:	40011400 	.word	0x40011400
 800db88:	58024400 	.word	0x58024400
 800db8c:	40007800 	.word	0x40007800
 800db90:	40007c00 	.word	0x40007c00
 800db94:	58000c00 	.word	0x58000c00
 800db98:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800db9c:	4b9d      	ldr	r3, [pc, #628]	; (800de14 <UART_SetConfig+0x928>)
 800db9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dba0:	e00c      	b.n	800dbbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dba2:	4b9d      	ldr	r3, [pc, #628]	; (800de18 <UART_SetConfig+0x92c>)
 800dba4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dba6:	e009      	b.n	800dbbc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dbac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dbae:	e005      	b.n	800dbbc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dbb4:	2301      	movs	r3, #1
 800dbb6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dbba:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	f000 81de 	beq.w	800df80 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800dbc4:	697b      	ldr	r3, [r7, #20]
 800dbc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbc8:	4a94      	ldr	r2, [pc, #592]	; (800de1c <UART_SetConfig+0x930>)
 800dbca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dbce:	461a      	mov	r2, r3
 800dbd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd2:	fbb3 f3f2 	udiv	r3, r3, r2
 800dbd6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbd8:	697b      	ldr	r3, [r7, #20]
 800dbda:	685a      	ldr	r2, [r3, #4]
 800dbdc:	4613      	mov	r3, r2
 800dbde:	005b      	lsls	r3, r3, #1
 800dbe0:	4413      	add	r3, r2
 800dbe2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbe4:	429a      	cmp	r2, r3
 800dbe6:	d305      	bcc.n	800dbf4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	685b      	ldr	r3, [r3, #4]
 800dbec:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800dbee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d903      	bls.n	800dbfc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dbfa:	e1c1      	b.n	800df80 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800dbfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbfe:	2200      	movs	r2, #0
 800dc00:	60bb      	str	r3, [r7, #8]
 800dc02:	60fa      	str	r2, [r7, #12]
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc08:	4a84      	ldr	r2, [pc, #528]	; (800de1c <UART_SetConfig+0x930>)
 800dc0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800dc0e:	b29b      	uxth	r3, r3
 800dc10:	2200      	movs	r2, #0
 800dc12:	603b      	str	r3, [r7, #0]
 800dc14:	607a      	str	r2, [r7, #4]
 800dc16:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dc1a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800dc1e:	f7f2 fbaf 	bl	8000380 <__aeabi_uldivmod>
 800dc22:	4602      	mov	r2, r0
 800dc24:	460b      	mov	r3, r1
 800dc26:	4610      	mov	r0, r2
 800dc28:	4619      	mov	r1, r3
 800dc2a:	f04f 0200 	mov.w	r2, #0
 800dc2e:	f04f 0300 	mov.w	r3, #0
 800dc32:	020b      	lsls	r3, r1, #8
 800dc34:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800dc38:	0202      	lsls	r2, r0, #8
 800dc3a:	6979      	ldr	r1, [r7, #20]
 800dc3c:	6849      	ldr	r1, [r1, #4]
 800dc3e:	0849      	lsrs	r1, r1, #1
 800dc40:	2000      	movs	r0, #0
 800dc42:	460c      	mov	r4, r1
 800dc44:	4605      	mov	r5, r0
 800dc46:	eb12 0804 	adds.w	r8, r2, r4
 800dc4a:	eb43 0905 	adc.w	r9, r3, r5
 800dc4e:	697b      	ldr	r3, [r7, #20]
 800dc50:	685b      	ldr	r3, [r3, #4]
 800dc52:	2200      	movs	r2, #0
 800dc54:	469a      	mov	sl, r3
 800dc56:	4693      	mov	fp, r2
 800dc58:	4652      	mov	r2, sl
 800dc5a:	465b      	mov	r3, fp
 800dc5c:	4640      	mov	r0, r8
 800dc5e:	4649      	mov	r1, r9
 800dc60:	f7f2 fb8e 	bl	8000380 <__aeabi_uldivmod>
 800dc64:	4602      	mov	r2, r0
 800dc66:	460b      	mov	r3, r1
 800dc68:	4613      	mov	r3, r2
 800dc6a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800dc72:	d308      	bcc.n	800dc86 <UART_SetConfig+0x79a>
 800dc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dc7a:	d204      	bcs.n	800dc86 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800dc7c:	697b      	ldr	r3, [r7, #20]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dc82:	60da      	str	r2, [r3, #12]
 800dc84:	e17c      	b.n	800df80 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800dc86:	2301      	movs	r3, #1
 800dc88:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800dc8c:	e178      	b.n	800df80 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800dc96:	f040 80c5 	bne.w	800de24 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800dc9a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800dc9e:	2b20      	cmp	r3, #32
 800dca0:	dc48      	bgt.n	800dd34 <UART_SetConfig+0x848>
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	db7b      	blt.n	800dd9e <UART_SetConfig+0x8b2>
 800dca6:	2b20      	cmp	r3, #32
 800dca8:	d879      	bhi.n	800dd9e <UART_SetConfig+0x8b2>
 800dcaa:	a201      	add	r2, pc, #4	; (adr r2, 800dcb0 <UART_SetConfig+0x7c4>)
 800dcac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcb0:	0800dd3b 	.word	0x0800dd3b
 800dcb4:	0800dd43 	.word	0x0800dd43
 800dcb8:	0800dd9f 	.word	0x0800dd9f
 800dcbc:	0800dd9f 	.word	0x0800dd9f
 800dcc0:	0800dd4b 	.word	0x0800dd4b
 800dcc4:	0800dd9f 	.word	0x0800dd9f
 800dcc8:	0800dd9f 	.word	0x0800dd9f
 800dccc:	0800dd9f 	.word	0x0800dd9f
 800dcd0:	0800dd5b 	.word	0x0800dd5b
 800dcd4:	0800dd9f 	.word	0x0800dd9f
 800dcd8:	0800dd9f 	.word	0x0800dd9f
 800dcdc:	0800dd9f 	.word	0x0800dd9f
 800dce0:	0800dd9f 	.word	0x0800dd9f
 800dce4:	0800dd9f 	.word	0x0800dd9f
 800dce8:	0800dd9f 	.word	0x0800dd9f
 800dcec:	0800dd9f 	.word	0x0800dd9f
 800dcf0:	0800dd6b 	.word	0x0800dd6b
 800dcf4:	0800dd9f 	.word	0x0800dd9f
 800dcf8:	0800dd9f 	.word	0x0800dd9f
 800dcfc:	0800dd9f 	.word	0x0800dd9f
 800dd00:	0800dd9f 	.word	0x0800dd9f
 800dd04:	0800dd9f 	.word	0x0800dd9f
 800dd08:	0800dd9f 	.word	0x0800dd9f
 800dd0c:	0800dd9f 	.word	0x0800dd9f
 800dd10:	0800dd9f 	.word	0x0800dd9f
 800dd14:	0800dd9f 	.word	0x0800dd9f
 800dd18:	0800dd9f 	.word	0x0800dd9f
 800dd1c:	0800dd9f 	.word	0x0800dd9f
 800dd20:	0800dd9f 	.word	0x0800dd9f
 800dd24:	0800dd9f 	.word	0x0800dd9f
 800dd28:	0800dd9f 	.word	0x0800dd9f
 800dd2c:	0800dd9f 	.word	0x0800dd9f
 800dd30:	0800dd91 	.word	0x0800dd91
 800dd34:	2b40      	cmp	r3, #64	; 0x40
 800dd36:	d02e      	beq.n	800dd96 <UART_SetConfig+0x8aa>
 800dd38:	e031      	b.n	800dd9e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dd3a:	f7fc fcc9 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 800dd3e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd40:	e033      	b.n	800ddaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dd42:	f7fc fcdb 	bl	800a6fc <HAL_RCC_GetPCLK2Freq>
 800dd46:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800dd48:	e02f      	b.n	800ddaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800dd4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f7fd fc46 	bl	800b5e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd58:	e027      	b.n	800ddaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dd5a:	f107 0318 	add.w	r3, r7, #24
 800dd5e:	4618      	mov	r0, r3
 800dd60:	f7fd fd92 	bl	800b888 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800dd64:	69fb      	ldr	r3, [r7, #28]
 800dd66:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd68:	e01f      	b.n	800ddaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dd6a:	4b2d      	ldr	r3, [pc, #180]	; (800de20 <UART_SetConfig+0x934>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	f003 0320 	and.w	r3, r3, #32
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d009      	beq.n	800dd8a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800dd76:	4b2a      	ldr	r3, [pc, #168]	; (800de20 <UART_SetConfig+0x934>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	08db      	lsrs	r3, r3, #3
 800dd7c:	f003 0303 	and.w	r3, r3, #3
 800dd80:	4a24      	ldr	r2, [pc, #144]	; (800de14 <UART_SetConfig+0x928>)
 800dd82:	fa22 f303 	lsr.w	r3, r2, r3
 800dd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd88:	e00f      	b.n	800ddaa <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800dd8a:	4b22      	ldr	r3, [pc, #136]	; (800de14 <UART_SetConfig+0x928>)
 800dd8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd8e:	e00c      	b.n	800ddaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800dd90:	4b21      	ldr	r3, [pc, #132]	; (800de18 <UART_SetConfig+0x92c>)
 800dd92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd94:	e009      	b.n	800ddaa <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dd9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dd9c:	e005      	b.n	800ddaa <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800dd9e:	2300      	movs	r3, #0
 800dda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800dda2:	2301      	movs	r3, #1
 800dda4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800dda8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ddaa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	f000 80e7 	beq.w	800df80 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddb6:	4a19      	ldr	r2, [pc, #100]	; (800de1c <UART_SetConfig+0x930>)
 800ddb8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ddbc:	461a      	mov	r2, r3
 800ddbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ddc0:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddc4:	005a      	lsls	r2, r3, #1
 800ddc6:	697b      	ldr	r3, [r7, #20]
 800ddc8:	685b      	ldr	r3, [r3, #4]
 800ddca:	085b      	lsrs	r3, r3, #1
 800ddcc:	441a      	add	r2, r3
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	685b      	ldr	r3, [r3, #4]
 800ddd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800ddd6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddda:	2b0f      	cmp	r3, #15
 800dddc:	d916      	bls.n	800de0c <UART_SetConfig+0x920>
 800ddde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dde4:	d212      	bcs.n	800de0c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dde6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dde8:	b29b      	uxth	r3, r3
 800ddea:	f023 030f 	bic.w	r3, r3, #15
 800ddee:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ddf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ddf2:	085b      	lsrs	r3, r3, #1
 800ddf4:	b29b      	uxth	r3, r3
 800ddf6:	f003 0307 	and.w	r3, r3, #7
 800ddfa:	b29a      	uxth	r2, r3
 800ddfc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800ddfe:	4313      	orrs	r3, r2
 800de00:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800de02:	697b      	ldr	r3, [r7, #20]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800de08:	60da      	str	r2, [r3, #12]
 800de0a:	e0b9      	b.n	800df80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800de0c:	2301      	movs	r3, #1
 800de0e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800de12:	e0b5      	b.n	800df80 <UART_SetConfig+0xa94>
 800de14:	03d09000 	.word	0x03d09000
 800de18:	003d0900 	.word	0x003d0900
 800de1c:	08010f90 	.word	0x08010f90
 800de20:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800de24:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800de28:	2b20      	cmp	r3, #32
 800de2a:	dc49      	bgt.n	800dec0 <UART_SetConfig+0x9d4>
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	db7c      	blt.n	800df2a <UART_SetConfig+0xa3e>
 800de30:	2b20      	cmp	r3, #32
 800de32:	d87a      	bhi.n	800df2a <UART_SetConfig+0xa3e>
 800de34:	a201      	add	r2, pc, #4	; (adr r2, 800de3c <UART_SetConfig+0x950>)
 800de36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de3a:	bf00      	nop
 800de3c:	0800dec7 	.word	0x0800dec7
 800de40:	0800decf 	.word	0x0800decf
 800de44:	0800df2b 	.word	0x0800df2b
 800de48:	0800df2b 	.word	0x0800df2b
 800de4c:	0800ded7 	.word	0x0800ded7
 800de50:	0800df2b 	.word	0x0800df2b
 800de54:	0800df2b 	.word	0x0800df2b
 800de58:	0800df2b 	.word	0x0800df2b
 800de5c:	0800dee7 	.word	0x0800dee7
 800de60:	0800df2b 	.word	0x0800df2b
 800de64:	0800df2b 	.word	0x0800df2b
 800de68:	0800df2b 	.word	0x0800df2b
 800de6c:	0800df2b 	.word	0x0800df2b
 800de70:	0800df2b 	.word	0x0800df2b
 800de74:	0800df2b 	.word	0x0800df2b
 800de78:	0800df2b 	.word	0x0800df2b
 800de7c:	0800def7 	.word	0x0800def7
 800de80:	0800df2b 	.word	0x0800df2b
 800de84:	0800df2b 	.word	0x0800df2b
 800de88:	0800df2b 	.word	0x0800df2b
 800de8c:	0800df2b 	.word	0x0800df2b
 800de90:	0800df2b 	.word	0x0800df2b
 800de94:	0800df2b 	.word	0x0800df2b
 800de98:	0800df2b 	.word	0x0800df2b
 800de9c:	0800df2b 	.word	0x0800df2b
 800dea0:	0800df2b 	.word	0x0800df2b
 800dea4:	0800df2b 	.word	0x0800df2b
 800dea8:	0800df2b 	.word	0x0800df2b
 800deac:	0800df2b 	.word	0x0800df2b
 800deb0:	0800df2b 	.word	0x0800df2b
 800deb4:	0800df2b 	.word	0x0800df2b
 800deb8:	0800df2b 	.word	0x0800df2b
 800debc:	0800df1d 	.word	0x0800df1d
 800dec0:	2b40      	cmp	r3, #64	; 0x40
 800dec2:	d02e      	beq.n	800df22 <UART_SetConfig+0xa36>
 800dec4:	e031      	b.n	800df2a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dec6:	f7fc fc03 	bl	800a6d0 <HAL_RCC_GetPCLK1Freq>
 800deca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800decc:	e033      	b.n	800df36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dece:	f7fc fc15 	bl	800a6fc <HAL_RCC_GetPCLK2Freq>
 800ded2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ded4:	e02f      	b.n	800df36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ded6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800deda:	4618      	mov	r0, r3
 800dedc:	f7fd fb80 	bl	800b5e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800dee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dee2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800dee4:	e027      	b.n	800df36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800dee6:	f107 0318 	add.w	r3, r7, #24
 800deea:	4618      	mov	r0, r3
 800deec:	f7fd fccc 	bl	800b888 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800def0:	69fb      	ldr	r3, [r7, #28]
 800def2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800def4:	e01f      	b.n	800df36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800def6:	4b2d      	ldr	r3, [pc, #180]	; (800dfac <UART_SetConfig+0xac0>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	f003 0320 	and.w	r3, r3, #32
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800df02:	4b2a      	ldr	r3, [pc, #168]	; (800dfac <UART_SetConfig+0xac0>)
 800df04:	681b      	ldr	r3, [r3, #0]
 800df06:	08db      	lsrs	r3, r3, #3
 800df08:	f003 0303 	and.w	r3, r3, #3
 800df0c:	4a28      	ldr	r2, [pc, #160]	; (800dfb0 <UART_SetConfig+0xac4>)
 800df0e:	fa22 f303 	lsr.w	r3, r2, r3
 800df12:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800df14:	e00f      	b.n	800df36 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800df16:	4b26      	ldr	r3, [pc, #152]	; (800dfb0 <UART_SetConfig+0xac4>)
 800df18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df1a:	e00c      	b.n	800df36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800df1c:	4b25      	ldr	r3, [pc, #148]	; (800dfb4 <UART_SetConfig+0xac8>)
 800df1e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df20:	e009      	b.n	800df36 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800df22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800df26:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800df28:	e005      	b.n	800df36 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800df2a:	2300      	movs	r3, #0
 800df2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800df2e:	2301      	movs	r3, #1
 800df30:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800df34:	bf00      	nop
    }

    if (pclk != 0U)
 800df36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df38:	2b00      	cmp	r3, #0
 800df3a:	d021      	beq.n	800df80 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800df3c:	697b      	ldr	r3, [r7, #20]
 800df3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800df40:	4a1d      	ldr	r2, [pc, #116]	; (800dfb8 <UART_SetConfig+0xacc>)
 800df42:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800df46:	461a      	mov	r2, r3
 800df48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df4a:	fbb3 f2f2 	udiv	r2, r3, r2
 800df4e:	697b      	ldr	r3, [r7, #20]
 800df50:	685b      	ldr	r3, [r3, #4]
 800df52:	085b      	lsrs	r3, r3, #1
 800df54:	441a      	add	r2, r3
 800df56:	697b      	ldr	r3, [r7, #20]
 800df58:	685b      	ldr	r3, [r3, #4]
 800df5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800df5e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800df60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df62:	2b0f      	cmp	r3, #15
 800df64:	d909      	bls.n	800df7a <UART_SetConfig+0xa8e>
 800df66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df6c:	d205      	bcs.n	800df7a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800df6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df70:	b29a      	uxth	r2, r3
 800df72:	697b      	ldr	r3, [r7, #20]
 800df74:	681b      	ldr	r3, [r3, #0]
 800df76:	60da      	str	r2, [r3, #12]
 800df78:	e002      	b.n	800df80 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800df7a:	2301      	movs	r3, #1
 800df7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800df80:	697b      	ldr	r3, [r7, #20]
 800df82:	2201      	movs	r2, #1
 800df84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800df88:	697b      	ldr	r3, [r7, #20]
 800df8a:	2201      	movs	r2, #1
 800df8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800df90:	697b      	ldr	r3, [r7, #20]
 800df92:	2200      	movs	r2, #0
 800df94:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800df96:	697b      	ldr	r3, [r7, #20]
 800df98:	2200      	movs	r2, #0
 800df9a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800df9c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	3748      	adds	r7, #72	; 0x48
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800dfaa:	bf00      	nop
 800dfac:	58024400 	.word	0x58024400
 800dfb0:	03d09000 	.word	0x03d09000
 800dfb4:	003d0900 	.word	0x003d0900
 800dfb8:	08010f90 	.word	0x08010f90

0800dfbc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfc8:	f003 0301 	and.w	r3, r3, #1
 800dfcc:	2b00      	cmp	r3, #0
 800dfce:	d00a      	beq.n	800dfe6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	681b      	ldr	r3, [r3, #0]
 800dfd4:	685b      	ldr	r3, [r3, #4]
 800dfd6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800dfda:	687b      	ldr	r3, [r7, #4]
 800dfdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	430a      	orrs	r2, r1
 800dfe4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfea:	f003 0302 	and.w	r3, r3, #2
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d00a      	beq.n	800e008 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	685b      	ldr	r3, [r3, #4]
 800dff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	430a      	orrs	r2, r1
 800e006:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e00c:	f003 0304 	and.w	r3, r3, #4
 800e010:	2b00      	cmp	r3, #0
 800e012:	d00a      	beq.n	800e02a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e014:	687b      	ldr	r3, [r7, #4]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800e022:	687b      	ldr	r3, [r7, #4]
 800e024:	681b      	ldr	r3, [r3, #0]
 800e026:	430a      	orrs	r2, r1
 800e028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e02a:	687b      	ldr	r3, [r7, #4]
 800e02c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e02e:	f003 0308 	and.w	r3, r3, #8
 800e032:	2b00      	cmp	r3, #0
 800e034:	d00a      	beq.n	800e04c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800e040:	687b      	ldr	r3, [r7, #4]
 800e042:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	430a      	orrs	r2, r1
 800e04a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e050:	f003 0310 	and.w	r3, r3, #16
 800e054:	2b00      	cmp	r3, #0
 800e056:	d00a      	beq.n	800e06e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	689b      	ldr	r3, [r3, #8]
 800e05e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	430a      	orrs	r2, r1
 800e06c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e072:	f003 0320 	and.w	r3, r3, #32
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00a      	beq.n	800e090 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	689b      	ldr	r3, [r3, #8]
 800e080:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	430a      	orrs	r2, r1
 800e08e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e090:	687b      	ldr	r3, [r7, #4]
 800e092:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d01a      	beq.n	800e0d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	681b      	ldr	r3, [r3, #0]
 800e0a0:	685b      	ldr	r3, [r3, #4]
 800e0a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	430a      	orrs	r2, r1
 800e0b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e0ba:	d10a      	bne.n	800e0d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e0bc:	687b      	ldr	r3, [r7, #4]
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	685b      	ldr	r3, [r3, #4]
 800e0c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	430a      	orrs	r2, r1
 800e0d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e0da:	2b00      	cmp	r3, #0
 800e0dc:	d00a      	beq.n	800e0f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	430a      	orrs	r2, r1
 800e0f2:	605a      	str	r2, [r3, #4]
  }
}
 800e0f4:	bf00      	nop
 800e0f6:	370c      	adds	r7, #12
 800e0f8:	46bd      	mov	sp, r7
 800e0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0fe:	4770      	bx	lr

0800e100 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800e100:	b580      	push	{r7, lr}
 800e102:	b086      	sub	sp, #24
 800e104:	af02      	add	r7, sp, #8
 800e106:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e110:	f7f7 ffca 	bl	80060a8 <HAL_GetTick>
 800e114:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	681b      	ldr	r3, [r3, #0]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	f003 0308 	and.w	r3, r3, #8
 800e120:	2b08      	cmp	r3, #8
 800e122:	d10e      	bne.n	800e142 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e124:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e128:	9300      	str	r3, [sp, #0]
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	2200      	movs	r2, #0
 800e12e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800e132:	6878      	ldr	r0, [r7, #4]
 800e134:	f000 f82f 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800e138:	4603      	mov	r3, r0
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d001      	beq.n	800e142 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e13e:	2303      	movs	r3, #3
 800e140:	e025      	b.n	800e18e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	f003 0304 	and.w	r3, r3, #4
 800e14c:	2b04      	cmp	r3, #4
 800e14e:	d10e      	bne.n	800e16e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e150:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2200      	movs	r2, #0
 800e15a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800e15e:	6878      	ldr	r0, [r7, #4]
 800e160:	f000 f819 	bl	800e196 <UART_WaitOnFlagUntilTimeout>
 800e164:	4603      	mov	r3, r0
 800e166:	2b00      	cmp	r3, #0
 800e168:	d001      	beq.n	800e16e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e16a:	2303      	movs	r3, #3
 800e16c:	e00f      	b.n	800e18e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	2220      	movs	r2, #32
 800e172:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800e176:	687b      	ldr	r3, [r7, #4]
 800e178:	2220      	movs	r2, #32
 800e17a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	2200      	movs	r2, #0
 800e182:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2200      	movs	r2, #0
 800e188:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e18c:	2300      	movs	r3, #0
}
 800e18e:	4618      	mov	r0, r3
 800e190:	3710      	adds	r7, #16
 800e192:	46bd      	mov	sp, r7
 800e194:	bd80      	pop	{r7, pc}

0800e196 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e196:	b580      	push	{r7, lr}
 800e198:	b09c      	sub	sp, #112	; 0x70
 800e19a:	af00      	add	r7, sp, #0
 800e19c:	60f8      	str	r0, [r7, #12]
 800e19e:	60b9      	str	r1, [r7, #8]
 800e1a0:	603b      	str	r3, [r7, #0]
 800e1a2:	4613      	mov	r3, r2
 800e1a4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1a6:	e0a9      	b.n	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e1a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e1ae:	f000 80a5 	beq.w	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e1b2:	f7f7 ff79 	bl	80060a8 <HAL_GetTick>
 800e1b6:	4602      	mov	r2, r0
 800e1b8:	683b      	ldr	r3, [r7, #0]
 800e1ba:	1ad3      	subs	r3, r2, r3
 800e1bc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800e1be:	429a      	cmp	r2, r3
 800e1c0:	d302      	bcc.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x32>
 800e1c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d140      	bne.n	800e24a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e1d0:	e853 3f00 	ldrex	r3, [r3]
 800e1d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e1d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e1d8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e1dc:	667b      	str	r3, [r7, #100]	; 0x64
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	461a      	mov	r2, r3
 800e1e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e1e6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1e8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1ea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800e1ec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800e1ee:	e841 2300 	strex	r3, r2, [r1]
 800e1f2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800e1f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d1e6      	bne.n	800e1c8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e1fa:	68fb      	ldr	r3, [r7, #12]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	3308      	adds	r3, #8
 800e200:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e202:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e204:	e853 3f00 	ldrex	r3, [r3]
 800e208:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e20a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e20c:	f023 0301 	bic.w	r3, r3, #1
 800e210:	663b      	str	r3, [r7, #96]	; 0x60
 800e212:	68fb      	ldr	r3, [r7, #12]
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	3308      	adds	r3, #8
 800e218:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e21a:	64ba      	str	r2, [r7, #72]	; 0x48
 800e21c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e21e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e220:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e222:	e841 2300 	strex	r3, r2, [r1]
 800e226:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800e228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d1e5      	bne.n	800e1fa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	2220      	movs	r2, #32
 800e232:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	2220      	movs	r2, #32
 800e23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	2200      	movs	r2, #0
 800e242:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800e246:	2303      	movs	r3, #3
 800e248:	e069      	b.n	800e31e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	681b      	ldr	r3, [r3, #0]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	f003 0304 	and.w	r3, r3, #4
 800e254:	2b00      	cmp	r3, #0
 800e256:	d051      	beq.n	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e258:	68fb      	ldr	r3, [r7, #12]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	69db      	ldr	r3, [r3, #28]
 800e25e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e262:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800e266:	d149      	bne.n	800e2fc <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800e270:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e27a:	e853 3f00 	ldrex	r3, [r3]
 800e27e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e282:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800e286:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	461a      	mov	r2, r3
 800e28e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e290:	637b      	str	r3, [r7, #52]	; 0x34
 800e292:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e294:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800e296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800e298:	e841 2300 	strex	r3, r2, [r1]
 800e29c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800e29e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d1e6      	bne.n	800e272 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	3308      	adds	r3, #8
 800e2aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2ac:	697b      	ldr	r3, [r7, #20]
 800e2ae:	e853 3f00 	ldrex	r3, [r3]
 800e2b2:	613b      	str	r3, [r7, #16]
   return(result);
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	f023 0301 	bic.w	r3, r3, #1
 800e2ba:	66bb      	str	r3, [r7, #104]	; 0x68
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	3308      	adds	r3, #8
 800e2c2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800e2c4:	623a      	str	r2, [r7, #32]
 800e2c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2c8:	69f9      	ldr	r1, [r7, #28]
 800e2ca:	6a3a      	ldr	r2, [r7, #32]
 800e2cc:	e841 2300 	strex	r3, r2, [r1]
 800e2d0:	61bb      	str	r3, [r7, #24]
   return(result);
 800e2d2:	69bb      	ldr	r3, [r7, #24]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d1e5      	bne.n	800e2a4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	2220      	movs	r2, #32
 800e2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800e2e0:	68fb      	ldr	r3, [r7, #12]
 800e2e2:	2220      	movs	r2, #32
 800e2e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	2220      	movs	r2, #32
 800e2ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800e2f8:	2303      	movs	r3, #3
 800e2fa:	e010      	b.n	800e31e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	69da      	ldr	r2, [r3, #28]
 800e302:	68bb      	ldr	r3, [r7, #8]
 800e304:	4013      	ands	r3, r2
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	429a      	cmp	r2, r3
 800e30a:	bf0c      	ite	eq
 800e30c:	2301      	moveq	r3, #1
 800e30e:	2300      	movne	r3, #0
 800e310:	b2db      	uxtb	r3, r3
 800e312:	461a      	mov	r2, r3
 800e314:	79fb      	ldrb	r3, [r7, #7]
 800e316:	429a      	cmp	r2, r3
 800e318:	f43f af46 	beq.w	800e1a8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e31c:	2300      	movs	r3, #0
}
 800e31e:	4618      	mov	r0, r3
 800e320:	3770      	adds	r7, #112	; 0x70
 800e322:	46bd      	mov	sp, r7
 800e324:	bd80      	pop	{r7, pc}
	...

0800e328 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e328:	b480      	push	{r7}
 800e32a:	b095      	sub	sp, #84	; 0x54
 800e32c:	af00      	add	r7, sp, #0
 800e32e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e338:	e853 3f00 	ldrex	r3, [r3]
 800e33c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e33e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e340:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e344:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	681b      	ldr	r3, [r3, #0]
 800e34a:	461a      	mov	r2, r3
 800e34c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e34e:	643b      	str	r3, [r7, #64]	; 0x40
 800e350:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e352:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e354:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e356:	e841 2300 	strex	r3, r2, [r1]
 800e35a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e35c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d1e6      	bne.n	800e330 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800e362:	687b      	ldr	r3, [r7, #4]
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	3308      	adds	r3, #8
 800e368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	e853 3f00 	ldrex	r3, [r3]
 800e370:	61fb      	str	r3, [r7, #28]
   return(result);
 800e372:	69fa      	ldr	r2, [r7, #28]
 800e374:	4b1e      	ldr	r3, [pc, #120]	; (800e3f0 <UART_EndRxTransfer+0xc8>)
 800e376:	4013      	ands	r3, r2
 800e378:	64bb      	str	r3, [r7, #72]	; 0x48
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	3308      	adds	r3, #8
 800e380:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800e382:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e384:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e386:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e388:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e38a:	e841 2300 	strex	r3, r2, [r1]
 800e38e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e392:	2b00      	cmp	r3, #0
 800e394:	d1e5      	bne.n	800e362 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e396:	687b      	ldr	r3, [r7, #4]
 800e398:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e39a:	2b01      	cmp	r3, #1
 800e39c:	d118      	bne.n	800e3d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	e853 3f00 	ldrex	r3, [r3]
 800e3aa:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3ac:	68bb      	ldr	r3, [r7, #8]
 800e3ae:	f023 0310 	bic.w	r3, r3, #16
 800e3b2:	647b      	str	r3, [r7, #68]	; 0x44
 800e3b4:	687b      	ldr	r3, [r7, #4]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	461a      	mov	r2, r3
 800e3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3bc:	61bb      	str	r3, [r7, #24]
 800e3be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3c0:	6979      	ldr	r1, [r7, #20]
 800e3c2:	69ba      	ldr	r2, [r7, #24]
 800e3c4:	e841 2300 	strex	r3, r2, [r1]
 800e3c8:	613b      	str	r3, [r7, #16]
   return(result);
 800e3ca:	693b      	ldr	r3, [r7, #16]
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d1e6      	bne.n	800e39e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e3d0:	687b      	ldr	r3, [r7, #4]
 800e3d2:	2220      	movs	r2, #32
 800e3d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	2200      	movs	r2, #0
 800e3dc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e3de:	687b      	ldr	r3, [r7, #4]
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	671a      	str	r2, [r3, #112]	; 0x70
}
 800e3e4:	bf00      	nop
 800e3e6:	3754      	adds	r7, #84	; 0x54
 800e3e8:	46bd      	mov	sp, r7
 800e3ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ee:	4770      	bx	lr
 800e3f0:	effffffe 	.word	0xeffffffe

0800e3f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	b084      	sub	sp, #16
 800e3f8:	af00      	add	r7, sp, #0
 800e3fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e400:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	2200      	movs	r2, #0
 800e406:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800e412:	68f8      	ldr	r0, [r7, #12]
 800e414:	f7ff f854 	bl	800d4c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e418:	bf00      	nop
 800e41a:	3710      	adds	r7, #16
 800e41c:	46bd      	mov	sp, r7
 800e41e:	bd80      	pop	{r7, pc}

0800e420 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b088      	sub	sp, #32
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	681b      	ldr	r3, [r3, #0]
 800e42c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	e853 3f00 	ldrex	r3, [r3]
 800e434:	60bb      	str	r3, [r7, #8]
   return(result);
 800e436:	68bb      	ldr	r3, [r7, #8]
 800e438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e43c:	61fb      	str	r3, [r7, #28]
 800e43e:	687b      	ldr	r3, [r7, #4]
 800e440:	681b      	ldr	r3, [r3, #0]
 800e442:	461a      	mov	r2, r3
 800e444:	69fb      	ldr	r3, [r7, #28]
 800e446:	61bb      	str	r3, [r7, #24]
 800e448:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e44a:	6979      	ldr	r1, [r7, #20]
 800e44c:	69ba      	ldr	r2, [r7, #24]
 800e44e:	e841 2300 	strex	r3, r2, [r1]
 800e452:	613b      	str	r3, [r7, #16]
   return(result);
 800e454:	693b      	ldr	r3, [r7, #16]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d1e6      	bne.n	800e428 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2220      	movs	r2, #32
 800e45e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e462:	687b      	ldr	r3, [r7, #4]
 800e464:	2200      	movs	r2, #0
 800e466:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7ff f81f 	bl	800d4ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e46e:	bf00      	nop
 800e470:	3720      	adds	r7, #32
 800e472:	46bd      	mov	sp, r7
 800e474:	bd80      	pop	{r7, pc}

0800e476 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e476:	b480      	push	{r7}
 800e478:	b083      	sub	sp, #12
 800e47a:	af00      	add	r7, sp, #0
 800e47c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e47e:	bf00      	nop
 800e480:	370c      	adds	r7, #12
 800e482:	46bd      	mov	sp, r7
 800e484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e488:	4770      	bx	lr

0800e48a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800e48a:	b480      	push	{r7}
 800e48c:	b083      	sub	sp, #12
 800e48e:	af00      	add	r7, sp, #0
 800e490:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800e492:	bf00      	nop
 800e494:	370c      	adds	r7, #12
 800e496:	46bd      	mov	sp, r7
 800e498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49c:	4770      	bx	lr

0800e49e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800e49e:	b480      	push	{r7}
 800e4a0:	b083      	sub	sp, #12
 800e4a2:	af00      	add	r7, sp, #0
 800e4a4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800e4a6:	bf00      	nop
 800e4a8:	370c      	adds	r7, #12
 800e4aa:	46bd      	mov	sp, r7
 800e4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4b0:	4770      	bx	lr

0800e4b2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800e4b2:	b480      	push	{r7}
 800e4b4:	b085      	sub	sp, #20
 800e4b6:	af00      	add	r7, sp, #0
 800e4b8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e4c0:	2b01      	cmp	r3, #1
 800e4c2:	d101      	bne.n	800e4c8 <HAL_UARTEx_DisableFifoMode+0x16>
 800e4c4:	2302      	movs	r3, #2
 800e4c6:	e027      	b.n	800e518 <HAL_UARTEx_DisableFifoMode+0x66>
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	2201      	movs	r2, #1
 800e4cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	2224      	movs	r2, #36	; 0x24
 800e4d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e4e0:	687b      	ldr	r3, [r7, #4]
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	681a      	ldr	r2, [r3, #0]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	f022 0201 	bic.w	r2, r2, #1
 800e4ee:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800e4f6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	2200      	movs	r2, #0
 800e4fc:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	68fa      	ldr	r2, [r7, #12]
 800e504:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	2220      	movs	r2, #32
 800e50a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e50e:	687b      	ldr	r3, [r7, #4]
 800e510:	2200      	movs	r2, #0
 800e512:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e516:	2300      	movs	r3, #0
}
 800e518:	4618      	mov	r0, r3
 800e51a:	3714      	adds	r7, #20
 800e51c:	46bd      	mov	sp, r7
 800e51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e522:	4770      	bx	lr

0800e524 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b084      	sub	sp, #16
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
 800e52c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e534:	2b01      	cmp	r3, #1
 800e536:	d101      	bne.n	800e53c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800e538:	2302      	movs	r3, #2
 800e53a:	e02d      	b.n	800e598 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2224      	movs	r2, #36	; 0x24
 800e548:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	681b      	ldr	r3, [r3, #0]
 800e550:	681b      	ldr	r3, [r3, #0]
 800e552:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	681b      	ldr	r3, [r3, #0]
 800e558:	681a      	ldr	r2, [r3, #0]
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	681b      	ldr	r3, [r3, #0]
 800e55e:	f022 0201 	bic.w	r2, r2, #1
 800e562:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	689b      	ldr	r3, [r3, #8]
 800e56a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	683a      	ldr	r2, [r7, #0]
 800e574:	430a      	orrs	r2, r1
 800e576:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e578:	6878      	ldr	r0, [r7, #4]
 800e57a:	f000 f84f 	bl	800e61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	681b      	ldr	r3, [r3, #0]
 800e582:	68fa      	ldr	r2, [r7, #12]
 800e584:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	2220      	movs	r2, #32
 800e58a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	2200      	movs	r2, #0
 800e592:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	3710      	adds	r7, #16
 800e59c:	46bd      	mov	sp, r7
 800e59e:	bd80      	pop	{r7, pc}

0800e5a0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800e5a0:	b580      	push	{r7, lr}
 800e5a2:	b084      	sub	sp, #16
 800e5a4:	af00      	add	r7, sp, #0
 800e5a6:	6078      	str	r0, [r7, #4]
 800e5a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800e5b0:	2b01      	cmp	r3, #1
 800e5b2:	d101      	bne.n	800e5b8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800e5b4:	2302      	movs	r3, #2
 800e5b6:	e02d      	b.n	800e614 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	2201      	movs	r2, #1
 800e5bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2224      	movs	r2, #36	; 0x24
 800e5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	681b      	ldr	r3, [r3, #0]
 800e5cc:	681b      	ldr	r3, [r3, #0]
 800e5ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	681b      	ldr	r3, [r3, #0]
 800e5d4:	681a      	ldr	r2, [r3, #0]
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	681b      	ldr	r3, [r3, #0]
 800e5da:	f022 0201 	bic.w	r2, r2, #1
 800e5de:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800e5e0:	687b      	ldr	r3, [r7, #4]
 800e5e2:	681b      	ldr	r3, [r3, #0]
 800e5e4:	689b      	ldr	r3, [r3, #8]
 800e5e6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	683a      	ldr	r2, [r7, #0]
 800e5f0:	430a      	orrs	r2, r1
 800e5f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800e5f4:	6878      	ldr	r0, [r7, #4]
 800e5f6:	f000 f811 	bl	800e61c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	68fa      	ldr	r2, [r7, #12]
 800e600:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	2220      	movs	r2, #32
 800e606:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	2200      	movs	r2, #0
 800e60e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800e612:	2300      	movs	r3, #0
}
 800e614:	4618      	mov	r0, r3
 800e616:	3710      	adds	r7, #16
 800e618:	46bd      	mov	sp, r7
 800e61a:	bd80      	pop	{r7, pc}

0800e61c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800e61c:	b480      	push	{r7}
 800e61e:	b085      	sub	sp, #20
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d108      	bne.n	800e63e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	2201      	movs	r2, #1
 800e630:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	2201      	movs	r2, #1
 800e638:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800e63c:	e031      	b.n	800e6a2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800e63e:	2310      	movs	r3, #16
 800e640:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800e642:	2310      	movs	r3, #16
 800e644:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800e646:	687b      	ldr	r3, [r7, #4]
 800e648:	681b      	ldr	r3, [r3, #0]
 800e64a:	689b      	ldr	r3, [r3, #8]
 800e64c:	0e5b      	lsrs	r3, r3, #25
 800e64e:	b2db      	uxtb	r3, r3
 800e650:	f003 0307 	and.w	r3, r3, #7
 800e654:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	681b      	ldr	r3, [r3, #0]
 800e65a:	689b      	ldr	r3, [r3, #8]
 800e65c:	0f5b      	lsrs	r3, r3, #29
 800e65e:	b2db      	uxtb	r3, r3
 800e660:	f003 0307 	and.w	r3, r3, #7
 800e664:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e666:	7bbb      	ldrb	r3, [r7, #14]
 800e668:	7b3a      	ldrb	r2, [r7, #12]
 800e66a:	4911      	ldr	r1, [pc, #68]	; (800e6b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e66c:	5c8a      	ldrb	r2, [r1, r2]
 800e66e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800e672:	7b3a      	ldrb	r2, [r7, #12]
 800e674:	490f      	ldr	r1, [pc, #60]	; (800e6b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e676:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800e678:	fb93 f3f2 	sdiv	r3, r3, r2
 800e67c:	b29a      	uxth	r2, r3
 800e67e:	687b      	ldr	r3, [r7, #4]
 800e680:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e684:	7bfb      	ldrb	r3, [r7, #15]
 800e686:	7b7a      	ldrb	r2, [r7, #13]
 800e688:	4909      	ldr	r1, [pc, #36]	; (800e6b0 <UARTEx_SetNbDataToProcess+0x94>)
 800e68a:	5c8a      	ldrb	r2, [r1, r2]
 800e68c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800e690:	7b7a      	ldrb	r2, [r7, #13]
 800e692:	4908      	ldr	r1, [pc, #32]	; (800e6b4 <UARTEx_SetNbDataToProcess+0x98>)
 800e694:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800e696:	fb93 f3f2 	sdiv	r3, r3, r2
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800e6a2:	bf00      	nop
 800e6a4:	3714      	adds	r7, #20
 800e6a6:	46bd      	mov	sp, r7
 800e6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ac:	4770      	bx	lr
 800e6ae:	bf00      	nop
 800e6b0:	08010fa8 	.word	0x08010fa8
 800e6b4:	08010fb0 	.word	0x08010fb0

0800e6b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e6b8:	b084      	sub	sp, #16
 800e6ba:	b580      	push	{r7, lr}
 800e6bc:	b084      	sub	sp, #16
 800e6be:	af00      	add	r7, sp, #0
 800e6c0:	6078      	str	r0, [r7, #4]
 800e6c2:	f107 001c 	add.w	r0, r7, #28
 800e6c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e6cc:	2b01      	cmp	r3, #1
 800e6ce:	d120      	bne.n	800e712 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e6d0:	687b      	ldr	r3, [r7, #4]
 800e6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e6d4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	68da      	ldr	r2, [r3, #12]
 800e6e0:	4b2a      	ldr	r3, [pc, #168]	; (800e78c <USB_CoreInit+0xd4>)
 800e6e2:	4013      	ands	r3, r2
 800e6e4:	687a      	ldr	r2, [r7, #4]
 800e6e6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	68db      	ldr	r3, [r3, #12]
 800e6ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800e6f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e6f6:	2b01      	cmp	r3, #1
 800e6f8:	d105      	bne.n	800e706 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	68db      	ldr	r3, [r3, #12]
 800e6fe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e706:	6878      	ldr	r0, [r7, #4]
 800e708:	f000 faac 	bl	800ec64 <USB_CoreReset>
 800e70c:	4603      	mov	r3, r0
 800e70e:	73fb      	strb	r3, [r7, #15]
 800e710:	e01a      	b.n	800e748 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	68db      	ldr	r3, [r3, #12]
 800e716:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800e71e:	6878      	ldr	r0, [r7, #4]
 800e720:	f000 faa0 	bl	800ec64 <USB_CoreReset>
 800e724:	4603      	mov	r3, r0
 800e726:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800e728:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d106      	bne.n	800e73c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e732:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	639a      	str	r2, [r3, #56]	; 0x38
 800e73a:	e005      	b.n	800e748 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800e73c:	687b      	ldr	r3, [r7, #4]
 800e73e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800e748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e74a:	2b01      	cmp	r3, #1
 800e74c:	d116      	bne.n	800e77c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e752:	b29a      	uxth	r2, r3
 800e754:	687b      	ldr	r3, [r7, #4]
 800e756:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e75c:	4b0c      	ldr	r3, [pc, #48]	; (800e790 <USB_CoreInit+0xd8>)
 800e75e:	4313      	orrs	r3, r2
 800e760:	687a      	ldr	r2, [r7, #4]
 800e762:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800e764:	687b      	ldr	r3, [r7, #4]
 800e766:	689b      	ldr	r3, [r3, #8]
 800e768:	f043 0206 	orr.w	r2, r3, #6
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800e770:	687b      	ldr	r3, [r7, #4]
 800e772:	689b      	ldr	r3, [r3, #8]
 800e774:	f043 0220 	orr.w	r2, r3, #32
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800e77c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e77e:	4618      	mov	r0, r3
 800e780:	3710      	adds	r7, #16
 800e782:	46bd      	mov	sp, r7
 800e784:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800e788:	b004      	add	sp, #16
 800e78a:	4770      	bx	lr
 800e78c:	ffbdffbf 	.word	0xffbdffbf
 800e790:	03ee0000 	.word	0x03ee0000

0800e794 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800e794:	b480      	push	{r7}
 800e796:	b083      	sub	sp, #12
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	689b      	ldr	r3, [r3, #8]
 800e7a0:	f023 0201 	bic.w	r2, r3, #1
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800e7a8:	2300      	movs	r3, #0
}
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	370c      	adds	r7, #12
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7b4:	4770      	bx	lr

0800e7b6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800e7b6:	b580      	push	{r7, lr}
 800e7b8:	b084      	sub	sp, #16
 800e7ba:	af00      	add	r7, sp, #0
 800e7bc:	6078      	str	r0, [r7, #4]
 800e7be:	460b      	mov	r3, r1
 800e7c0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800e7c2:	2300      	movs	r3, #0
 800e7c4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	68db      	ldr	r3, [r3, #12]
 800e7ca:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800e7ce:	687b      	ldr	r3, [r7, #4]
 800e7d0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800e7d2:	78fb      	ldrb	r3, [r7, #3]
 800e7d4:	2b01      	cmp	r3, #1
 800e7d6:	d115      	bne.n	800e804 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	68db      	ldr	r3, [r3, #12]
 800e7dc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800e7e0:	687b      	ldr	r3, [r7, #4]
 800e7e2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e7e4:	2001      	movs	r0, #1
 800e7e6:	f7f7 fc6b 	bl	80060c0 <HAL_Delay>
      ms++;
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	3301      	adds	r3, #1
 800e7ee:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f000 fa29 	bl	800ec48 <USB_GetMode>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b01      	cmp	r3, #1
 800e7fa:	d01e      	beq.n	800e83a <USB_SetCurrentMode+0x84>
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	2b31      	cmp	r3, #49	; 0x31
 800e800:	d9f0      	bls.n	800e7e4 <USB_SetCurrentMode+0x2e>
 800e802:	e01a      	b.n	800e83a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800e804:	78fb      	ldrb	r3, [r7, #3]
 800e806:	2b00      	cmp	r3, #0
 800e808:	d115      	bne.n	800e836 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800e816:	2001      	movs	r0, #1
 800e818:	f7f7 fc52 	bl	80060c0 <HAL_Delay>
      ms++;
 800e81c:	68fb      	ldr	r3, [r7, #12]
 800e81e:	3301      	adds	r3, #1
 800e820:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800e822:	6878      	ldr	r0, [r7, #4]
 800e824:	f000 fa10 	bl	800ec48 <USB_GetMode>
 800e828:	4603      	mov	r3, r0
 800e82a:	2b00      	cmp	r3, #0
 800e82c:	d005      	beq.n	800e83a <USB_SetCurrentMode+0x84>
 800e82e:	68fb      	ldr	r3, [r7, #12]
 800e830:	2b31      	cmp	r3, #49	; 0x31
 800e832:	d9f0      	bls.n	800e816 <USB_SetCurrentMode+0x60>
 800e834:	e001      	b.n	800e83a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800e836:	2301      	movs	r3, #1
 800e838:	e005      	b.n	800e846 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	2b32      	cmp	r3, #50	; 0x32
 800e83e:	d101      	bne.n	800e844 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800e840:	2301      	movs	r3, #1
 800e842:	e000      	b.n	800e846 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800e844:	2300      	movs	r3, #0
}
 800e846:	4618      	mov	r0, r3
 800e848:	3710      	adds	r7, #16
 800e84a:	46bd      	mov	sp, r7
 800e84c:	bd80      	pop	{r7, pc}
	...

0800e850 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800e850:	b084      	sub	sp, #16
 800e852:	b580      	push	{r7, lr}
 800e854:	b086      	sub	sp, #24
 800e856:	af00      	add	r7, sp, #0
 800e858:	6078      	str	r0, [r7, #4]
 800e85a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800e85e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800e862:	2300      	movs	r3, #0
 800e864:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800e86a:	2300      	movs	r3, #0
 800e86c:	613b      	str	r3, [r7, #16]
 800e86e:	e009      	b.n	800e884 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800e870:	687a      	ldr	r2, [r7, #4]
 800e872:	693b      	ldr	r3, [r7, #16]
 800e874:	3340      	adds	r3, #64	; 0x40
 800e876:	009b      	lsls	r3, r3, #2
 800e878:	4413      	add	r3, r2
 800e87a:	2200      	movs	r2, #0
 800e87c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800e87e:	693b      	ldr	r3, [r7, #16]
 800e880:	3301      	adds	r3, #1
 800e882:	613b      	str	r3, [r7, #16]
 800e884:	693b      	ldr	r3, [r7, #16]
 800e886:	2b0e      	cmp	r3, #14
 800e888:	d9f2      	bls.n	800e870 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800e88a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d11c      	bne.n	800e8ca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800e890:	68fb      	ldr	r3, [r7, #12]
 800e892:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e896:	685b      	ldr	r3, [r3, #4]
 800e898:	68fa      	ldr	r2, [r7, #12]
 800e89a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800e89e:	f043 0302 	orr.w	r3, r3, #2
 800e8a2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8a8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800e8c4:	687b      	ldr	r3, [r7, #4]
 800e8c6:	601a      	str	r2, [r3, #0]
 800e8c8:	e005      	b.n	800e8d6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e8ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800e8d6:	68fb      	ldr	r3, [r7, #12]
 800e8d8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800e8dc:	461a      	mov	r2, r3
 800e8de:	2300      	movs	r3, #0
 800e8e0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e8f0:	461a      	mov	r2, r3
 800e8f2:	680b      	ldr	r3, [r1, #0]
 800e8f4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800e8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e8f8:	2b01      	cmp	r3, #1
 800e8fa:	d10c      	bne.n	800e916 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800e8fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d104      	bne.n	800e90c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800e902:	2100      	movs	r1, #0
 800e904:	6878      	ldr	r0, [r7, #4]
 800e906:	f000 f965 	bl	800ebd4 <USB_SetDevSpeed>
 800e90a:	e008      	b.n	800e91e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800e90c:	2101      	movs	r1, #1
 800e90e:	6878      	ldr	r0, [r7, #4]
 800e910:	f000 f960 	bl	800ebd4 <USB_SetDevSpeed>
 800e914:	e003      	b.n	800e91e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800e916:	2103      	movs	r1, #3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f000 f95b 	bl	800ebd4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800e91e:	2110      	movs	r1, #16
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f8f3 	bl	800eb0c <USB_FlushTxFifo>
 800e926:	4603      	mov	r3, r0
 800e928:	2b00      	cmp	r3, #0
 800e92a:	d001      	beq.n	800e930 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800e930:	6878      	ldr	r0, [r7, #4]
 800e932:	f000 f91f 	bl	800eb74 <USB_FlushRxFifo>
 800e936:	4603      	mov	r3, r0
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d001      	beq.n	800e940 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800e93c:	2301      	movs	r3, #1
 800e93e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e946:	461a      	mov	r2, r3
 800e948:	2300      	movs	r3, #0
 800e94a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800e94c:	68fb      	ldr	r3, [r7, #12]
 800e94e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e952:	461a      	mov	r2, r3
 800e954:	2300      	movs	r3, #0
 800e956:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800e95e:	461a      	mov	r2, r3
 800e960:	2300      	movs	r3, #0
 800e962:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e964:	2300      	movs	r3, #0
 800e966:	613b      	str	r3, [r7, #16]
 800e968:	e043      	b.n	800e9f2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	015a      	lsls	r2, r3, #5
 800e96e:	68fb      	ldr	r3, [r7, #12]
 800e970:	4413      	add	r3, r2
 800e972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e97c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800e980:	d118      	bne.n	800e9b4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800e982:	693b      	ldr	r3, [r7, #16]
 800e984:	2b00      	cmp	r3, #0
 800e986:	d10a      	bne.n	800e99e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800e988:	693b      	ldr	r3, [r7, #16]
 800e98a:	015a      	lsls	r2, r3, #5
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	4413      	add	r3, r2
 800e990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e994:	461a      	mov	r2, r3
 800e996:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800e99a:	6013      	str	r3, [r2, #0]
 800e99c:	e013      	b.n	800e9c6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800e99e:	693b      	ldr	r3, [r7, #16]
 800e9a0:	015a      	lsls	r2, r3, #5
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	4413      	add	r3, r2
 800e9a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800e9b0:	6013      	str	r3, [r2, #0]
 800e9b2:	e008      	b.n	800e9c6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800e9b4:	693b      	ldr	r3, [r7, #16]
 800e9b6:	015a      	lsls	r2, r3, #5
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	4413      	add	r3, r2
 800e9bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9c0:	461a      	mov	r2, r3
 800e9c2:	2300      	movs	r3, #0
 800e9c4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800e9c6:	693b      	ldr	r3, [r7, #16]
 800e9c8:	015a      	lsls	r2, r3, #5
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	4413      	add	r3, r2
 800e9ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	015a      	lsls	r2, r3, #5
 800e9dc:	68fb      	ldr	r3, [r7, #12]
 800e9de:	4413      	add	r3, r2
 800e9e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800e9e4:	461a      	mov	r2, r3
 800e9e6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800e9ea:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9ec:	693b      	ldr	r3, [r7, #16]
 800e9ee:	3301      	adds	r3, #1
 800e9f0:	613b      	str	r3, [r7, #16]
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f4:	693a      	ldr	r2, [r7, #16]
 800e9f6:	429a      	cmp	r2, r3
 800e9f8:	d3b7      	bcc.n	800e96a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800e9fa:	2300      	movs	r3, #0
 800e9fc:	613b      	str	r3, [r7, #16]
 800e9fe:	e043      	b.n	800ea88 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ea00:	693b      	ldr	r3, [r7, #16]
 800ea02:	015a      	lsls	r2, r3, #5
 800ea04:	68fb      	ldr	r3, [r7, #12]
 800ea06:	4413      	add	r3, r2
 800ea08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ea12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ea16:	d118      	bne.n	800ea4a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ea18:	693b      	ldr	r3, [r7, #16]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d10a      	bne.n	800ea34 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ea1e:	693b      	ldr	r3, [r7, #16]
 800ea20:	015a      	lsls	r2, r3, #5
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	4413      	add	r3, r2
 800ea26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea2a:	461a      	mov	r2, r3
 800ea2c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ea30:	6013      	str	r3, [r2, #0]
 800ea32:	e013      	b.n	800ea5c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ea34:	693b      	ldr	r3, [r7, #16]
 800ea36:	015a      	lsls	r2, r3, #5
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea40:	461a      	mov	r2, r3
 800ea42:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ea46:	6013      	str	r3, [r2, #0]
 800ea48:	e008      	b.n	800ea5c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ea4a:	693b      	ldr	r3, [r7, #16]
 800ea4c:	015a      	lsls	r2, r3, #5
 800ea4e:	68fb      	ldr	r3, [r7, #12]
 800ea50:	4413      	add	r3, r2
 800ea52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea56:	461a      	mov	r2, r3
 800ea58:	2300      	movs	r3, #0
 800ea5a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ea5c:	693b      	ldr	r3, [r7, #16]
 800ea5e:	015a      	lsls	r2, r3, #5
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	4413      	add	r3, r2
 800ea64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea68:	461a      	mov	r2, r3
 800ea6a:	2300      	movs	r3, #0
 800ea6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	015a      	lsls	r2, r3, #5
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	4413      	add	r3, r2
 800ea76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ea7a:	461a      	mov	r2, r3
 800ea7c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ea80:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	3301      	adds	r3, #1
 800ea86:	613b      	str	r3, [r7, #16]
 800ea88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea8a:	693a      	ldr	r2, [r7, #16]
 800ea8c:	429a      	cmp	r2, r3
 800ea8e:	d3b7      	bcc.n	800ea00 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ea90:	68fb      	ldr	r3, [r7, #12]
 800ea92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ea96:	691b      	ldr	r3, [r3, #16]
 800ea98:	68fa      	ldr	r2, [r7, #12]
 800ea9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ea9e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800eaa2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2200      	movs	r2, #0
 800eaa8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800eab0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800eab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d105      	bne.n	800eac4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	699b      	ldr	r3, [r3, #24]
 800eabc:	f043 0210 	orr.w	r2, r3, #16
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	699a      	ldr	r2, [r3, #24]
 800eac8:	4b0e      	ldr	r3, [pc, #56]	; (800eb04 <USB_DevInit+0x2b4>)
 800eaca:	4313      	orrs	r3, r2
 800eacc:	687a      	ldr	r2, [r7, #4]
 800eace:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ead0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	d005      	beq.n	800eae2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	699b      	ldr	r3, [r3, #24]
 800eada:	f043 0208 	orr.w	r2, r3, #8
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800eae2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800eae4:	2b01      	cmp	r3, #1
 800eae6:	d105      	bne.n	800eaf4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	699a      	ldr	r2, [r3, #24]
 800eaec:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <USB_DevInit+0x2b8>)
 800eaee:	4313      	orrs	r3, r2
 800eaf0:	687a      	ldr	r2, [r7, #4]
 800eaf2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3718      	adds	r7, #24
 800eafa:	46bd      	mov	sp, r7
 800eafc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800eb00:	b004      	add	sp, #16
 800eb02:	4770      	bx	lr
 800eb04:	803c3800 	.word	0x803c3800
 800eb08:	40000004 	.word	0x40000004

0800eb0c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b085      	sub	sp, #20
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
 800eb14:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800eb16:	2300      	movs	r3, #0
 800eb18:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eb20:	68fb      	ldr	r3, [r7, #12]
 800eb22:	4a13      	ldr	r2, [pc, #76]	; (800eb70 <USB_FlushTxFifo+0x64>)
 800eb24:	4293      	cmp	r3, r2
 800eb26:	d901      	bls.n	800eb2c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800eb28:	2303      	movs	r3, #3
 800eb2a:	e01b      	b.n	800eb64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	691b      	ldr	r3, [r3, #16]
 800eb30:	2b00      	cmp	r3, #0
 800eb32:	daf2      	bge.n	800eb1a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800eb34:	2300      	movs	r3, #0
 800eb36:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800eb38:	683b      	ldr	r3, [r7, #0]
 800eb3a:	019b      	lsls	r3, r3, #6
 800eb3c:	f043 0220 	orr.w	r2, r3, #32
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	3301      	adds	r3, #1
 800eb48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	4a08      	ldr	r2, [pc, #32]	; (800eb70 <USB_FlushTxFifo+0x64>)
 800eb4e:	4293      	cmp	r3, r2
 800eb50:	d901      	bls.n	800eb56 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800eb52:	2303      	movs	r3, #3
 800eb54:	e006      	b.n	800eb64 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	691b      	ldr	r3, [r3, #16]
 800eb5a:	f003 0320 	and.w	r3, r3, #32
 800eb5e:	2b20      	cmp	r3, #32
 800eb60:	d0f0      	beq.n	800eb44 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800eb62:	2300      	movs	r3, #0
}
 800eb64:	4618      	mov	r0, r3
 800eb66:	3714      	adds	r7, #20
 800eb68:	46bd      	mov	sp, r7
 800eb6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6e:	4770      	bx	lr
 800eb70:	00030d40 	.word	0x00030d40

0800eb74 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800eb74:	b480      	push	{r7}
 800eb76:	b085      	sub	sp, #20
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800eb7c:	2300      	movs	r3, #0
 800eb7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	3301      	adds	r3, #1
 800eb84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	4a11      	ldr	r2, [pc, #68]	; (800ebd0 <USB_FlushRxFifo+0x5c>)
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d901      	bls.n	800eb92 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800eb8e:	2303      	movs	r3, #3
 800eb90:	e018      	b.n	800ebc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	691b      	ldr	r3, [r3, #16]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	daf2      	bge.n	800eb80 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	2210      	movs	r2, #16
 800eba2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	3301      	adds	r3, #1
 800eba8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	4a08      	ldr	r2, [pc, #32]	; (800ebd0 <USB_FlushRxFifo+0x5c>)
 800ebae:	4293      	cmp	r3, r2
 800ebb0:	d901      	bls.n	800ebb6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ebb2:	2303      	movs	r3, #3
 800ebb4:	e006      	b.n	800ebc4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	691b      	ldr	r3, [r3, #16]
 800ebba:	f003 0310 	and.w	r3, r3, #16
 800ebbe:	2b10      	cmp	r3, #16
 800ebc0:	d0f0      	beq.n	800eba4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ebc2:	2300      	movs	r3, #0
}
 800ebc4:	4618      	mov	r0, r3
 800ebc6:	3714      	adds	r7, #20
 800ebc8:	46bd      	mov	sp, r7
 800ebca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebce:	4770      	bx	lr
 800ebd0:	00030d40 	.word	0x00030d40

0800ebd4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ebd4:	b480      	push	{r7}
 800ebd6:	b085      	sub	sp, #20
 800ebd8:	af00      	add	r7, sp, #0
 800ebda:	6078      	str	r0, [r7, #4]
 800ebdc:	460b      	mov	r3, r1
 800ebde:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ebe4:	68fb      	ldr	r3, [r7, #12]
 800ebe6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ebea:	681a      	ldr	r2, [r3, #0]
 800ebec:	78fb      	ldrb	r3, [r7, #3]
 800ebee:	68f9      	ldr	r1, [r7, #12]
 800ebf0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ebf4:	4313      	orrs	r3, r2
 800ebf6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ebf8:	2300      	movs	r3, #0
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3714      	adds	r7, #20
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec04:	4770      	bx	lr

0800ec06 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ec06:	b480      	push	{r7}
 800ec08:	b085      	sub	sp, #20
 800ec0a:	af00      	add	r7, sp, #0
 800ec0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ec12:	68fb      	ldr	r3, [r7, #12]
 800ec14:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	68fa      	ldr	r2, [r7, #12]
 800ec1c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ec20:	f023 0303 	bic.w	r3, r3, #3
 800ec24:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	68fa      	ldr	r2, [r7, #12]
 800ec30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ec34:	f043 0302 	orr.w	r3, r3, #2
 800ec38:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ec3a:	2300      	movs	r3, #0
}
 800ec3c:	4618      	mov	r0, r3
 800ec3e:	3714      	adds	r7, #20
 800ec40:	46bd      	mov	sp, r7
 800ec42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec46:	4770      	bx	lr

0800ec48 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800ec48:	b480      	push	{r7}
 800ec4a:	b083      	sub	sp, #12
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	695b      	ldr	r3, [r3, #20]
 800ec54:	f003 0301 	and.w	r3, r3, #1
}
 800ec58:	4618      	mov	r0, r3
 800ec5a:	370c      	adds	r7, #12
 800ec5c:	46bd      	mov	sp, r7
 800ec5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec62:	4770      	bx	lr

0800ec64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b085      	sub	sp, #20
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ec70:	68fb      	ldr	r3, [r7, #12]
 800ec72:	3301      	adds	r3, #1
 800ec74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ec76:	68fb      	ldr	r3, [r7, #12]
 800ec78:	4a13      	ldr	r2, [pc, #76]	; (800ecc8 <USB_CoreReset+0x64>)
 800ec7a:	4293      	cmp	r3, r2
 800ec7c:	d901      	bls.n	800ec82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ec7e:	2303      	movs	r3, #3
 800ec80:	e01b      	b.n	800ecba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	691b      	ldr	r3, [r3, #16]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	daf2      	bge.n	800ec70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ec8a:	2300      	movs	r3, #0
 800ec8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691b      	ldr	r3, [r3, #16]
 800ec92:	f043 0201 	orr.w	r2, r3, #1
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	4a09      	ldr	r2, [pc, #36]	; (800ecc8 <USB_CoreReset+0x64>)
 800eca4:	4293      	cmp	r3, r2
 800eca6:	d901      	bls.n	800ecac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800eca8:	2303      	movs	r3, #3
 800ecaa:	e006      	b.n	800ecba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ecac:	687b      	ldr	r3, [r7, #4]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	f003 0301 	and.w	r3, r3, #1
 800ecb4:	2b01      	cmp	r3, #1
 800ecb6:	d0f0      	beq.n	800ec9a <USB_CoreReset+0x36>

  return HAL_OK;
 800ecb8:	2300      	movs	r3, #0
}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	3714      	adds	r7, #20
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	00030d40 	.word	0x00030d40

0800eccc <__errno>:
 800eccc:	4b01      	ldr	r3, [pc, #4]	; (800ecd4 <__errno+0x8>)
 800ecce:	6818      	ldr	r0, [r3, #0]
 800ecd0:	4770      	bx	lr
 800ecd2:	bf00      	nop
 800ecd4:	24000024 	.word	0x24000024

0800ecd8 <__libc_init_array>:
 800ecd8:	b570      	push	{r4, r5, r6, lr}
 800ecda:	4d0d      	ldr	r5, [pc, #52]	; (800ed10 <__libc_init_array+0x38>)
 800ecdc:	4c0d      	ldr	r4, [pc, #52]	; (800ed14 <__libc_init_array+0x3c>)
 800ecde:	1b64      	subs	r4, r4, r5
 800ece0:	10a4      	asrs	r4, r4, #2
 800ece2:	2600      	movs	r6, #0
 800ece4:	42a6      	cmp	r6, r4
 800ece6:	d109      	bne.n	800ecfc <__libc_init_array+0x24>
 800ece8:	4d0b      	ldr	r5, [pc, #44]	; (800ed18 <__libc_init_array+0x40>)
 800ecea:	4c0c      	ldr	r4, [pc, #48]	; (800ed1c <__libc_init_array+0x44>)
 800ecec:	f000 fc8e 	bl	800f60c <_init>
 800ecf0:	1b64      	subs	r4, r4, r5
 800ecf2:	10a4      	asrs	r4, r4, #2
 800ecf4:	2600      	movs	r6, #0
 800ecf6:	42a6      	cmp	r6, r4
 800ecf8:	d105      	bne.n	800ed06 <__libc_init_array+0x2e>
 800ecfa:	bd70      	pop	{r4, r5, r6, pc}
 800ecfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed00:	4798      	blx	r3
 800ed02:	3601      	adds	r6, #1
 800ed04:	e7ee      	b.n	800ece4 <__libc_init_array+0xc>
 800ed06:	f855 3b04 	ldr.w	r3, [r5], #4
 800ed0a:	4798      	blx	r3
 800ed0c:	3601      	adds	r6, #1
 800ed0e:	e7f2      	b.n	800ecf6 <__libc_init_array+0x1e>
 800ed10:	08010ff4 	.word	0x08010ff4
 800ed14:	08010ff4 	.word	0x08010ff4
 800ed18:	08010ff4 	.word	0x08010ff4
 800ed1c:	08010ff8 	.word	0x08010ff8

0800ed20 <memset>:
 800ed20:	4402      	add	r2, r0
 800ed22:	4603      	mov	r3, r0
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d100      	bne.n	800ed2a <memset+0xa>
 800ed28:	4770      	bx	lr
 800ed2a:	f803 1b01 	strb.w	r1, [r3], #1
 800ed2e:	e7f9      	b.n	800ed24 <memset+0x4>

0800ed30 <_free_r>:
 800ed30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed32:	2900      	cmp	r1, #0
 800ed34:	d044      	beq.n	800edc0 <_free_r+0x90>
 800ed36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed3a:	9001      	str	r0, [sp, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f1a1 0404 	sub.w	r4, r1, #4
 800ed42:	bfb8      	it	lt
 800ed44:	18e4      	addlt	r4, r4, r3
 800ed46:	f000 f903 	bl	800ef50 <__malloc_lock>
 800ed4a:	4a1e      	ldr	r2, [pc, #120]	; (800edc4 <_free_r+0x94>)
 800ed4c:	9801      	ldr	r0, [sp, #4]
 800ed4e:	6813      	ldr	r3, [r2, #0]
 800ed50:	b933      	cbnz	r3, 800ed60 <_free_r+0x30>
 800ed52:	6063      	str	r3, [r4, #4]
 800ed54:	6014      	str	r4, [r2, #0]
 800ed56:	b003      	add	sp, #12
 800ed58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed5c:	f000 b8fe 	b.w	800ef5c <__malloc_unlock>
 800ed60:	42a3      	cmp	r3, r4
 800ed62:	d908      	bls.n	800ed76 <_free_r+0x46>
 800ed64:	6825      	ldr	r5, [r4, #0]
 800ed66:	1961      	adds	r1, r4, r5
 800ed68:	428b      	cmp	r3, r1
 800ed6a:	bf01      	itttt	eq
 800ed6c:	6819      	ldreq	r1, [r3, #0]
 800ed6e:	685b      	ldreq	r3, [r3, #4]
 800ed70:	1949      	addeq	r1, r1, r5
 800ed72:	6021      	streq	r1, [r4, #0]
 800ed74:	e7ed      	b.n	800ed52 <_free_r+0x22>
 800ed76:	461a      	mov	r2, r3
 800ed78:	685b      	ldr	r3, [r3, #4]
 800ed7a:	b10b      	cbz	r3, 800ed80 <_free_r+0x50>
 800ed7c:	42a3      	cmp	r3, r4
 800ed7e:	d9fa      	bls.n	800ed76 <_free_r+0x46>
 800ed80:	6811      	ldr	r1, [r2, #0]
 800ed82:	1855      	adds	r5, r2, r1
 800ed84:	42a5      	cmp	r5, r4
 800ed86:	d10b      	bne.n	800eda0 <_free_r+0x70>
 800ed88:	6824      	ldr	r4, [r4, #0]
 800ed8a:	4421      	add	r1, r4
 800ed8c:	1854      	adds	r4, r2, r1
 800ed8e:	42a3      	cmp	r3, r4
 800ed90:	6011      	str	r1, [r2, #0]
 800ed92:	d1e0      	bne.n	800ed56 <_free_r+0x26>
 800ed94:	681c      	ldr	r4, [r3, #0]
 800ed96:	685b      	ldr	r3, [r3, #4]
 800ed98:	6053      	str	r3, [r2, #4]
 800ed9a:	4421      	add	r1, r4
 800ed9c:	6011      	str	r1, [r2, #0]
 800ed9e:	e7da      	b.n	800ed56 <_free_r+0x26>
 800eda0:	d902      	bls.n	800eda8 <_free_r+0x78>
 800eda2:	230c      	movs	r3, #12
 800eda4:	6003      	str	r3, [r0, #0]
 800eda6:	e7d6      	b.n	800ed56 <_free_r+0x26>
 800eda8:	6825      	ldr	r5, [r4, #0]
 800edaa:	1961      	adds	r1, r4, r5
 800edac:	428b      	cmp	r3, r1
 800edae:	bf04      	itt	eq
 800edb0:	6819      	ldreq	r1, [r3, #0]
 800edb2:	685b      	ldreq	r3, [r3, #4]
 800edb4:	6063      	str	r3, [r4, #4]
 800edb6:	bf04      	itt	eq
 800edb8:	1949      	addeq	r1, r1, r5
 800edba:	6021      	streq	r1, [r4, #0]
 800edbc:	6054      	str	r4, [r2, #4]
 800edbe:	e7ca      	b.n	800ed56 <_free_r+0x26>
 800edc0:	b003      	add	sp, #12
 800edc2:	bd30      	pop	{r4, r5, pc}
 800edc4:	24000eb8 	.word	0x24000eb8

0800edc8 <sbrk_aligned>:
 800edc8:	b570      	push	{r4, r5, r6, lr}
 800edca:	4e0e      	ldr	r6, [pc, #56]	; (800ee04 <sbrk_aligned+0x3c>)
 800edcc:	460c      	mov	r4, r1
 800edce:	6831      	ldr	r1, [r6, #0]
 800edd0:	4605      	mov	r5, r0
 800edd2:	b911      	cbnz	r1, 800edda <sbrk_aligned+0x12>
 800edd4:	f000 f88c 	bl	800eef0 <_sbrk_r>
 800edd8:	6030      	str	r0, [r6, #0]
 800edda:	4621      	mov	r1, r4
 800eddc:	4628      	mov	r0, r5
 800edde:	f000 f887 	bl	800eef0 <_sbrk_r>
 800ede2:	1c43      	adds	r3, r0, #1
 800ede4:	d00a      	beq.n	800edfc <sbrk_aligned+0x34>
 800ede6:	1cc4      	adds	r4, r0, #3
 800ede8:	f024 0403 	bic.w	r4, r4, #3
 800edec:	42a0      	cmp	r0, r4
 800edee:	d007      	beq.n	800ee00 <sbrk_aligned+0x38>
 800edf0:	1a21      	subs	r1, r4, r0
 800edf2:	4628      	mov	r0, r5
 800edf4:	f000 f87c 	bl	800eef0 <_sbrk_r>
 800edf8:	3001      	adds	r0, #1
 800edfa:	d101      	bne.n	800ee00 <sbrk_aligned+0x38>
 800edfc:	f04f 34ff 	mov.w	r4, #4294967295
 800ee00:	4620      	mov	r0, r4
 800ee02:	bd70      	pop	{r4, r5, r6, pc}
 800ee04:	24000ebc 	.word	0x24000ebc

0800ee08 <_malloc_r>:
 800ee08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ee0c:	1ccd      	adds	r5, r1, #3
 800ee0e:	f025 0503 	bic.w	r5, r5, #3
 800ee12:	3508      	adds	r5, #8
 800ee14:	2d0c      	cmp	r5, #12
 800ee16:	bf38      	it	cc
 800ee18:	250c      	movcc	r5, #12
 800ee1a:	2d00      	cmp	r5, #0
 800ee1c:	4607      	mov	r7, r0
 800ee1e:	db01      	blt.n	800ee24 <_malloc_r+0x1c>
 800ee20:	42a9      	cmp	r1, r5
 800ee22:	d905      	bls.n	800ee30 <_malloc_r+0x28>
 800ee24:	230c      	movs	r3, #12
 800ee26:	603b      	str	r3, [r7, #0]
 800ee28:	2600      	movs	r6, #0
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ee30:	4e2e      	ldr	r6, [pc, #184]	; (800eeec <_malloc_r+0xe4>)
 800ee32:	f000 f88d 	bl	800ef50 <__malloc_lock>
 800ee36:	6833      	ldr	r3, [r6, #0]
 800ee38:	461c      	mov	r4, r3
 800ee3a:	bb34      	cbnz	r4, 800ee8a <_malloc_r+0x82>
 800ee3c:	4629      	mov	r1, r5
 800ee3e:	4638      	mov	r0, r7
 800ee40:	f7ff ffc2 	bl	800edc8 <sbrk_aligned>
 800ee44:	1c43      	adds	r3, r0, #1
 800ee46:	4604      	mov	r4, r0
 800ee48:	d14d      	bne.n	800eee6 <_malloc_r+0xde>
 800ee4a:	6834      	ldr	r4, [r6, #0]
 800ee4c:	4626      	mov	r6, r4
 800ee4e:	2e00      	cmp	r6, #0
 800ee50:	d140      	bne.n	800eed4 <_malloc_r+0xcc>
 800ee52:	6823      	ldr	r3, [r4, #0]
 800ee54:	4631      	mov	r1, r6
 800ee56:	4638      	mov	r0, r7
 800ee58:	eb04 0803 	add.w	r8, r4, r3
 800ee5c:	f000 f848 	bl	800eef0 <_sbrk_r>
 800ee60:	4580      	cmp	r8, r0
 800ee62:	d13a      	bne.n	800eeda <_malloc_r+0xd2>
 800ee64:	6821      	ldr	r1, [r4, #0]
 800ee66:	3503      	adds	r5, #3
 800ee68:	1a6d      	subs	r5, r5, r1
 800ee6a:	f025 0503 	bic.w	r5, r5, #3
 800ee6e:	3508      	adds	r5, #8
 800ee70:	2d0c      	cmp	r5, #12
 800ee72:	bf38      	it	cc
 800ee74:	250c      	movcc	r5, #12
 800ee76:	4629      	mov	r1, r5
 800ee78:	4638      	mov	r0, r7
 800ee7a:	f7ff ffa5 	bl	800edc8 <sbrk_aligned>
 800ee7e:	3001      	adds	r0, #1
 800ee80:	d02b      	beq.n	800eeda <_malloc_r+0xd2>
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	442b      	add	r3, r5
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	e00e      	b.n	800eea8 <_malloc_r+0xa0>
 800ee8a:	6822      	ldr	r2, [r4, #0]
 800ee8c:	1b52      	subs	r2, r2, r5
 800ee8e:	d41e      	bmi.n	800eece <_malloc_r+0xc6>
 800ee90:	2a0b      	cmp	r2, #11
 800ee92:	d916      	bls.n	800eec2 <_malloc_r+0xba>
 800ee94:	1961      	adds	r1, r4, r5
 800ee96:	42a3      	cmp	r3, r4
 800ee98:	6025      	str	r5, [r4, #0]
 800ee9a:	bf18      	it	ne
 800ee9c:	6059      	strne	r1, [r3, #4]
 800ee9e:	6863      	ldr	r3, [r4, #4]
 800eea0:	bf08      	it	eq
 800eea2:	6031      	streq	r1, [r6, #0]
 800eea4:	5162      	str	r2, [r4, r5]
 800eea6:	604b      	str	r3, [r1, #4]
 800eea8:	4638      	mov	r0, r7
 800eeaa:	f104 060b 	add.w	r6, r4, #11
 800eeae:	f000 f855 	bl	800ef5c <__malloc_unlock>
 800eeb2:	f026 0607 	bic.w	r6, r6, #7
 800eeb6:	1d23      	adds	r3, r4, #4
 800eeb8:	1af2      	subs	r2, r6, r3
 800eeba:	d0b6      	beq.n	800ee2a <_malloc_r+0x22>
 800eebc:	1b9b      	subs	r3, r3, r6
 800eebe:	50a3      	str	r3, [r4, r2]
 800eec0:	e7b3      	b.n	800ee2a <_malloc_r+0x22>
 800eec2:	6862      	ldr	r2, [r4, #4]
 800eec4:	42a3      	cmp	r3, r4
 800eec6:	bf0c      	ite	eq
 800eec8:	6032      	streq	r2, [r6, #0]
 800eeca:	605a      	strne	r2, [r3, #4]
 800eecc:	e7ec      	b.n	800eea8 <_malloc_r+0xa0>
 800eece:	4623      	mov	r3, r4
 800eed0:	6864      	ldr	r4, [r4, #4]
 800eed2:	e7b2      	b.n	800ee3a <_malloc_r+0x32>
 800eed4:	4634      	mov	r4, r6
 800eed6:	6876      	ldr	r6, [r6, #4]
 800eed8:	e7b9      	b.n	800ee4e <_malloc_r+0x46>
 800eeda:	230c      	movs	r3, #12
 800eedc:	603b      	str	r3, [r7, #0]
 800eede:	4638      	mov	r0, r7
 800eee0:	f000 f83c 	bl	800ef5c <__malloc_unlock>
 800eee4:	e7a1      	b.n	800ee2a <_malloc_r+0x22>
 800eee6:	6025      	str	r5, [r4, #0]
 800eee8:	e7de      	b.n	800eea8 <_malloc_r+0xa0>
 800eeea:	bf00      	nop
 800eeec:	24000eb8 	.word	0x24000eb8

0800eef0 <_sbrk_r>:
 800eef0:	b538      	push	{r3, r4, r5, lr}
 800eef2:	4d06      	ldr	r5, [pc, #24]	; (800ef0c <_sbrk_r+0x1c>)
 800eef4:	2300      	movs	r3, #0
 800eef6:	4604      	mov	r4, r0
 800eef8:	4608      	mov	r0, r1
 800eefa:	602b      	str	r3, [r5, #0]
 800eefc:	f7f6 ffee 	bl	8005edc <_sbrk>
 800ef00:	1c43      	adds	r3, r0, #1
 800ef02:	d102      	bne.n	800ef0a <_sbrk_r+0x1a>
 800ef04:	682b      	ldr	r3, [r5, #0]
 800ef06:	b103      	cbz	r3, 800ef0a <_sbrk_r+0x1a>
 800ef08:	6023      	str	r3, [r4, #0]
 800ef0a:	bd38      	pop	{r3, r4, r5, pc}
 800ef0c:	24000ec0 	.word	0x24000ec0

0800ef10 <siprintf>:
 800ef10:	b40e      	push	{r1, r2, r3}
 800ef12:	b500      	push	{lr}
 800ef14:	b09c      	sub	sp, #112	; 0x70
 800ef16:	ab1d      	add	r3, sp, #116	; 0x74
 800ef18:	9002      	str	r0, [sp, #8]
 800ef1a:	9006      	str	r0, [sp, #24]
 800ef1c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ef20:	4809      	ldr	r0, [pc, #36]	; (800ef48 <siprintf+0x38>)
 800ef22:	9107      	str	r1, [sp, #28]
 800ef24:	9104      	str	r1, [sp, #16]
 800ef26:	4909      	ldr	r1, [pc, #36]	; (800ef4c <siprintf+0x3c>)
 800ef28:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef2c:	9105      	str	r1, [sp, #20]
 800ef2e:	6800      	ldr	r0, [r0, #0]
 800ef30:	9301      	str	r3, [sp, #4]
 800ef32:	a902      	add	r1, sp, #8
 800ef34:	f000 f874 	bl	800f020 <_svfiprintf_r>
 800ef38:	9b02      	ldr	r3, [sp, #8]
 800ef3a:	2200      	movs	r2, #0
 800ef3c:	701a      	strb	r2, [r3, #0]
 800ef3e:	b01c      	add	sp, #112	; 0x70
 800ef40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef44:	b003      	add	sp, #12
 800ef46:	4770      	bx	lr
 800ef48:	24000024 	.word	0x24000024
 800ef4c:	ffff0208 	.word	0xffff0208

0800ef50 <__malloc_lock>:
 800ef50:	4801      	ldr	r0, [pc, #4]	; (800ef58 <__malloc_lock+0x8>)
 800ef52:	f000 baf9 	b.w	800f548 <__retarget_lock_acquire_recursive>
 800ef56:	bf00      	nop
 800ef58:	24000ec4 	.word	0x24000ec4

0800ef5c <__malloc_unlock>:
 800ef5c:	4801      	ldr	r0, [pc, #4]	; (800ef64 <__malloc_unlock+0x8>)
 800ef5e:	f000 baf4 	b.w	800f54a <__retarget_lock_release_recursive>
 800ef62:	bf00      	nop
 800ef64:	24000ec4 	.word	0x24000ec4

0800ef68 <__ssputs_r>:
 800ef68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef6c:	688e      	ldr	r6, [r1, #8]
 800ef6e:	429e      	cmp	r6, r3
 800ef70:	4682      	mov	sl, r0
 800ef72:	460c      	mov	r4, r1
 800ef74:	4690      	mov	r8, r2
 800ef76:	461f      	mov	r7, r3
 800ef78:	d838      	bhi.n	800efec <__ssputs_r+0x84>
 800ef7a:	898a      	ldrh	r2, [r1, #12]
 800ef7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ef80:	d032      	beq.n	800efe8 <__ssputs_r+0x80>
 800ef82:	6825      	ldr	r5, [r4, #0]
 800ef84:	6909      	ldr	r1, [r1, #16]
 800ef86:	eba5 0901 	sub.w	r9, r5, r1
 800ef8a:	6965      	ldr	r5, [r4, #20]
 800ef8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ef90:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ef94:	3301      	adds	r3, #1
 800ef96:	444b      	add	r3, r9
 800ef98:	106d      	asrs	r5, r5, #1
 800ef9a:	429d      	cmp	r5, r3
 800ef9c:	bf38      	it	cc
 800ef9e:	461d      	movcc	r5, r3
 800efa0:	0553      	lsls	r3, r2, #21
 800efa2:	d531      	bpl.n	800f008 <__ssputs_r+0xa0>
 800efa4:	4629      	mov	r1, r5
 800efa6:	f7ff ff2f 	bl	800ee08 <_malloc_r>
 800efaa:	4606      	mov	r6, r0
 800efac:	b950      	cbnz	r0, 800efc4 <__ssputs_r+0x5c>
 800efae:	230c      	movs	r3, #12
 800efb0:	f8ca 3000 	str.w	r3, [sl]
 800efb4:	89a3      	ldrh	r3, [r4, #12]
 800efb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800efba:	81a3      	strh	r3, [r4, #12]
 800efbc:	f04f 30ff 	mov.w	r0, #4294967295
 800efc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efc4:	6921      	ldr	r1, [r4, #16]
 800efc6:	464a      	mov	r2, r9
 800efc8:	f000 fac0 	bl	800f54c <memcpy>
 800efcc:	89a3      	ldrh	r3, [r4, #12]
 800efce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800efd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800efd6:	81a3      	strh	r3, [r4, #12]
 800efd8:	6126      	str	r6, [r4, #16]
 800efda:	6165      	str	r5, [r4, #20]
 800efdc:	444e      	add	r6, r9
 800efde:	eba5 0509 	sub.w	r5, r5, r9
 800efe2:	6026      	str	r6, [r4, #0]
 800efe4:	60a5      	str	r5, [r4, #8]
 800efe6:	463e      	mov	r6, r7
 800efe8:	42be      	cmp	r6, r7
 800efea:	d900      	bls.n	800efee <__ssputs_r+0x86>
 800efec:	463e      	mov	r6, r7
 800efee:	6820      	ldr	r0, [r4, #0]
 800eff0:	4632      	mov	r2, r6
 800eff2:	4641      	mov	r1, r8
 800eff4:	f000 fab8 	bl	800f568 <memmove>
 800eff8:	68a3      	ldr	r3, [r4, #8]
 800effa:	1b9b      	subs	r3, r3, r6
 800effc:	60a3      	str	r3, [r4, #8]
 800effe:	6823      	ldr	r3, [r4, #0]
 800f000:	4433      	add	r3, r6
 800f002:	6023      	str	r3, [r4, #0]
 800f004:	2000      	movs	r0, #0
 800f006:	e7db      	b.n	800efc0 <__ssputs_r+0x58>
 800f008:	462a      	mov	r2, r5
 800f00a:	f000 fac7 	bl	800f59c <_realloc_r>
 800f00e:	4606      	mov	r6, r0
 800f010:	2800      	cmp	r0, #0
 800f012:	d1e1      	bne.n	800efd8 <__ssputs_r+0x70>
 800f014:	6921      	ldr	r1, [r4, #16]
 800f016:	4650      	mov	r0, sl
 800f018:	f7ff fe8a 	bl	800ed30 <_free_r>
 800f01c:	e7c7      	b.n	800efae <__ssputs_r+0x46>
	...

0800f020 <_svfiprintf_r>:
 800f020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f024:	4698      	mov	r8, r3
 800f026:	898b      	ldrh	r3, [r1, #12]
 800f028:	061b      	lsls	r3, r3, #24
 800f02a:	b09d      	sub	sp, #116	; 0x74
 800f02c:	4607      	mov	r7, r0
 800f02e:	460d      	mov	r5, r1
 800f030:	4614      	mov	r4, r2
 800f032:	d50e      	bpl.n	800f052 <_svfiprintf_r+0x32>
 800f034:	690b      	ldr	r3, [r1, #16]
 800f036:	b963      	cbnz	r3, 800f052 <_svfiprintf_r+0x32>
 800f038:	2140      	movs	r1, #64	; 0x40
 800f03a:	f7ff fee5 	bl	800ee08 <_malloc_r>
 800f03e:	6028      	str	r0, [r5, #0]
 800f040:	6128      	str	r0, [r5, #16]
 800f042:	b920      	cbnz	r0, 800f04e <_svfiprintf_r+0x2e>
 800f044:	230c      	movs	r3, #12
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	f04f 30ff 	mov.w	r0, #4294967295
 800f04c:	e0d1      	b.n	800f1f2 <_svfiprintf_r+0x1d2>
 800f04e:	2340      	movs	r3, #64	; 0x40
 800f050:	616b      	str	r3, [r5, #20]
 800f052:	2300      	movs	r3, #0
 800f054:	9309      	str	r3, [sp, #36]	; 0x24
 800f056:	2320      	movs	r3, #32
 800f058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f05c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f060:	2330      	movs	r3, #48	; 0x30
 800f062:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f20c <_svfiprintf_r+0x1ec>
 800f066:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f06a:	f04f 0901 	mov.w	r9, #1
 800f06e:	4623      	mov	r3, r4
 800f070:	469a      	mov	sl, r3
 800f072:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f076:	b10a      	cbz	r2, 800f07c <_svfiprintf_r+0x5c>
 800f078:	2a25      	cmp	r2, #37	; 0x25
 800f07a:	d1f9      	bne.n	800f070 <_svfiprintf_r+0x50>
 800f07c:	ebba 0b04 	subs.w	fp, sl, r4
 800f080:	d00b      	beq.n	800f09a <_svfiprintf_r+0x7a>
 800f082:	465b      	mov	r3, fp
 800f084:	4622      	mov	r2, r4
 800f086:	4629      	mov	r1, r5
 800f088:	4638      	mov	r0, r7
 800f08a:	f7ff ff6d 	bl	800ef68 <__ssputs_r>
 800f08e:	3001      	adds	r0, #1
 800f090:	f000 80aa 	beq.w	800f1e8 <_svfiprintf_r+0x1c8>
 800f094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f096:	445a      	add	r2, fp
 800f098:	9209      	str	r2, [sp, #36]	; 0x24
 800f09a:	f89a 3000 	ldrb.w	r3, [sl]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	f000 80a2 	beq.w	800f1e8 <_svfiprintf_r+0x1c8>
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	f04f 32ff 	mov.w	r2, #4294967295
 800f0aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f0ae:	f10a 0a01 	add.w	sl, sl, #1
 800f0b2:	9304      	str	r3, [sp, #16]
 800f0b4:	9307      	str	r3, [sp, #28]
 800f0b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f0ba:	931a      	str	r3, [sp, #104]	; 0x68
 800f0bc:	4654      	mov	r4, sl
 800f0be:	2205      	movs	r2, #5
 800f0c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f0c4:	4851      	ldr	r0, [pc, #324]	; (800f20c <_svfiprintf_r+0x1ec>)
 800f0c6:	f7f1 f90b 	bl	80002e0 <memchr>
 800f0ca:	9a04      	ldr	r2, [sp, #16]
 800f0cc:	b9d8      	cbnz	r0, 800f106 <_svfiprintf_r+0xe6>
 800f0ce:	06d0      	lsls	r0, r2, #27
 800f0d0:	bf44      	itt	mi
 800f0d2:	2320      	movmi	r3, #32
 800f0d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0d8:	0711      	lsls	r1, r2, #28
 800f0da:	bf44      	itt	mi
 800f0dc:	232b      	movmi	r3, #43	; 0x2b
 800f0de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f0e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f0e6:	2b2a      	cmp	r3, #42	; 0x2a
 800f0e8:	d015      	beq.n	800f116 <_svfiprintf_r+0xf6>
 800f0ea:	9a07      	ldr	r2, [sp, #28]
 800f0ec:	4654      	mov	r4, sl
 800f0ee:	2000      	movs	r0, #0
 800f0f0:	f04f 0c0a 	mov.w	ip, #10
 800f0f4:	4621      	mov	r1, r4
 800f0f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f0fa:	3b30      	subs	r3, #48	; 0x30
 800f0fc:	2b09      	cmp	r3, #9
 800f0fe:	d94e      	bls.n	800f19e <_svfiprintf_r+0x17e>
 800f100:	b1b0      	cbz	r0, 800f130 <_svfiprintf_r+0x110>
 800f102:	9207      	str	r2, [sp, #28]
 800f104:	e014      	b.n	800f130 <_svfiprintf_r+0x110>
 800f106:	eba0 0308 	sub.w	r3, r0, r8
 800f10a:	fa09 f303 	lsl.w	r3, r9, r3
 800f10e:	4313      	orrs	r3, r2
 800f110:	9304      	str	r3, [sp, #16]
 800f112:	46a2      	mov	sl, r4
 800f114:	e7d2      	b.n	800f0bc <_svfiprintf_r+0x9c>
 800f116:	9b03      	ldr	r3, [sp, #12]
 800f118:	1d19      	adds	r1, r3, #4
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	9103      	str	r1, [sp, #12]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	bfbb      	ittet	lt
 800f122:	425b      	neglt	r3, r3
 800f124:	f042 0202 	orrlt.w	r2, r2, #2
 800f128:	9307      	strge	r3, [sp, #28]
 800f12a:	9307      	strlt	r3, [sp, #28]
 800f12c:	bfb8      	it	lt
 800f12e:	9204      	strlt	r2, [sp, #16]
 800f130:	7823      	ldrb	r3, [r4, #0]
 800f132:	2b2e      	cmp	r3, #46	; 0x2e
 800f134:	d10c      	bne.n	800f150 <_svfiprintf_r+0x130>
 800f136:	7863      	ldrb	r3, [r4, #1]
 800f138:	2b2a      	cmp	r3, #42	; 0x2a
 800f13a:	d135      	bne.n	800f1a8 <_svfiprintf_r+0x188>
 800f13c:	9b03      	ldr	r3, [sp, #12]
 800f13e:	1d1a      	adds	r2, r3, #4
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	9203      	str	r2, [sp, #12]
 800f144:	2b00      	cmp	r3, #0
 800f146:	bfb8      	it	lt
 800f148:	f04f 33ff 	movlt.w	r3, #4294967295
 800f14c:	3402      	adds	r4, #2
 800f14e:	9305      	str	r3, [sp, #20]
 800f150:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f21c <_svfiprintf_r+0x1fc>
 800f154:	7821      	ldrb	r1, [r4, #0]
 800f156:	2203      	movs	r2, #3
 800f158:	4650      	mov	r0, sl
 800f15a:	f7f1 f8c1 	bl	80002e0 <memchr>
 800f15e:	b140      	cbz	r0, 800f172 <_svfiprintf_r+0x152>
 800f160:	2340      	movs	r3, #64	; 0x40
 800f162:	eba0 000a 	sub.w	r0, r0, sl
 800f166:	fa03 f000 	lsl.w	r0, r3, r0
 800f16a:	9b04      	ldr	r3, [sp, #16]
 800f16c:	4303      	orrs	r3, r0
 800f16e:	3401      	adds	r4, #1
 800f170:	9304      	str	r3, [sp, #16]
 800f172:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f176:	4826      	ldr	r0, [pc, #152]	; (800f210 <_svfiprintf_r+0x1f0>)
 800f178:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f17c:	2206      	movs	r2, #6
 800f17e:	f7f1 f8af 	bl	80002e0 <memchr>
 800f182:	2800      	cmp	r0, #0
 800f184:	d038      	beq.n	800f1f8 <_svfiprintf_r+0x1d8>
 800f186:	4b23      	ldr	r3, [pc, #140]	; (800f214 <_svfiprintf_r+0x1f4>)
 800f188:	bb1b      	cbnz	r3, 800f1d2 <_svfiprintf_r+0x1b2>
 800f18a:	9b03      	ldr	r3, [sp, #12]
 800f18c:	3307      	adds	r3, #7
 800f18e:	f023 0307 	bic.w	r3, r3, #7
 800f192:	3308      	adds	r3, #8
 800f194:	9303      	str	r3, [sp, #12]
 800f196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f198:	4433      	add	r3, r6
 800f19a:	9309      	str	r3, [sp, #36]	; 0x24
 800f19c:	e767      	b.n	800f06e <_svfiprintf_r+0x4e>
 800f19e:	fb0c 3202 	mla	r2, ip, r2, r3
 800f1a2:	460c      	mov	r4, r1
 800f1a4:	2001      	movs	r0, #1
 800f1a6:	e7a5      	b.n	800f0f4 <_svfiprintf_r+0xd4>
 800f1a8:	2300      	movs	r3, #0
 800f1aa:	3401      	adds	r4, #1
 800f1ac:	9305      	str	r3, [sp, #20]
 800f1ae:	4619      	mov	r1, r3
 800f1b0:	f04f 0c0a 	mov.w	ip, #10
 800f1b4:	4620      	mov	r0, r4
 800f1b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f1ba:	3a30      	subs	r2, #48	; 0x30
 800f1bc:	2a09      	cmp	r2, #9
 800f1be:	d903      	bls.n	800f1c8 <_svfiprintf_r+0x1a8>
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d0c5      	beq.n	800f150 <_svfiprintf_r+0x130>
 800f1c4:	9105      	str	r1, [sp, #20]
 800f1c6:	e7c3      	b.n	800f150 <_svfiprintf_r+0x130>
 800f1c8:	fb0c 2101 	mla	r1, ip, r1, r2
 800f1cc:	4604      	mov	r4, r0
 800f1ce:	2301      	movs	r3, #1
 800f1d0:	e7f0      	b.n	800f1b4 <_svfiprintf_r+0x194>
 800f1d2:	ab03      	add	r3, sp, #12
 800f1d4:	9300      	str	r3, [sp, #0]
 800f1d6:	462a      	mov	r2, r5
 800f1d8:	4b0f      	ldr	r3, [pc, #60]	; (800f218 <_svfiprintf_r+0x1f8>)
 800f1da:	a904      	add	r1, sp, #16
 800f1dc:	4638      	mov	r0, r7
 800f1de:	f3af 8000 	nop.w
 800f1e2:	1c42      	adds	r2, r0, #1
 800f1e4:	4606      	mov	r6, r0
 800f1e6:	d1d6      	bne.n	800f196 <_svfiprintf_r+0x176>
 800f1e8:	89ab      	ldrh	r3, [r5, #12]
 800f1ea:	065b      	lsls	r3, r3, #25
 800f1ec:	f53f af2c 	bmi.w	800f048 <_svfiprintf_r+0x28>
 800f1f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f1f2:	b01d      	add	sp, #116	; 0x74
 800f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f8:	ab03      	add	r3, sp, #12
 800f1fa:	9300      	str	r3, [sp, #0]
 800f1fc:	462a      	mov	r2, r5
 800f1fe:	4b06      	ldr	r3, [pc, #24]	; (800f218 <_svfiprintf_r+0x1f8>)
 800f200:	a904      	add	r1, sp, #16
 800f202:	4638      	mov	r0, r7
 800f204:	f000 f87a 	bl	800f2fc <_printf_i>
 800f208:	e7eb      	b.n	800f1e2 <_svfiprintf_r+0x1c2>
 800f20a:	bf00      	nop
 800f20c:	08010fb8 	.word	0x08010fb8
 800f210:	08010fc2 	.word	0x08010fc2
 800f214:	00000000 	.word	0x00000000
 800f218:	0800ef69 	.word	0x0800ef69
 800f21c:	08010fbe 	.word	0x08010fbe

0800f220 <_printf_common>:
 800f220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f224:	4616      	mov	r6, r2
 800f226:	4699      	mov	r9, r3
 800f228:	688a      	ldr	r2, [r1, #8]
 800f22a:	690b      	ldr	r3, [r1, #16]
 800f22c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f230:	4293      	cmp	r3, r2
 800f232:	bfb8      	it	lt
 800f234:	4613      	movlt	r3, r2
 800f236:	6033      	str	r3, [r6, #0]
 800f238:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f23c:	4607      	mov	r7, r0
 800f23e:	460c      	mov	r4, r1
 800f240:	b10a      	cbz	r2, 800f246 <_printf_common+0x26>
 800f242:	3301      	adds	r3, #1
 800f244:	6033      	str	r3, [r6, #0]
 800f246:	6823      	ldr	r3, [r4, #0]
 800f248:	0699      	lsls	r1, r3, #26
 800f24a:	bf42      	ittt	mi
 800f24c:	6833      	ldrmi	r3, [r6, #0]
 800f24e:	3302      	addmi	r3, #2
 800f250:	6033      	strmi	r3, [r6, #0]
 800f252:	6825      	ldr	r5, [r4, #0]
 800f254:	f015 0506 	ands.w	r5, r5, #6
 800f258:	d106      	bne.n	800f268 <_printf_common+0x48>
 800f25a:	f104 0a19 	add.w	sl, r4, #25
 800f25e:	68e3      	ldr	r3, [r4, #12]
 800f260:	6832      	ldr	r2, [r6, #0]
 800f262:	1a9b      	subs	r3, r3, r2
 800f264:	42ab      	cmp	r3, r5
 800f266:	dc26      	bgt.n	800f2b6 <_printf_common+0x96>
 800f268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f26c:	1e13      	subs	r3, r2, #0
 800f26e:	6822      	ldr	r2, [r4, #0]
 800f270:	bf18      	it	ne
 800f272:	2301      	movne	r3, #1
 800f274:	0692      	lsls	r2, r2, #26
 800f276:	d42b      	bmi.n	800f2d0 <_printf_common+0xb0>
 800f278:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f27c:	4649      	mov	r1, r9
 800f27e:	4638      	mov	r0, r7
 800f280:	47c0      	blx	r8
 800f282:	3001      	adds	r0, #1
 800f284:	d01e      	beq.n	800f2c4 <_printf_common+0xa4>
 800f286:	6823      	ldr	r3, [r4, #0]
 800f288:	68e5      	ldr	r5, [r4, #12]
 800f28a:	6832      	ldr	r2, [r6, #0]
 800f28c:	f003 0306 	and.w	r3, r3, #6
 800f290:	2b04      	cmp	r3, #4
 800f292:	bf08      	it	eq
 800f294:	1aad      	subeq	r5, r5, r2
 800f296:	68a3      	ldr	r3, [r4, #8]
 800f298:	6922      	ldr	r2, [r4, #16]
 800f29a:	bf0c      	ite	eq
 800f29c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f2a0:	2500      	movne	r5, #0
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	bfc4      	itt	gt
 800f2a6:	1a9b      	subgt	r3, r3, r2
 800f2a8:	18ed      	addgt	r5, r5, r3
 800f2aa:	2600      	movs	r6, #0
 800f2ac:	341a      	adds	r4, #26
 800f2ae:	42b5      	cmp	r5, r6
 800f2b0:	d11a      	bne.n	800f2e8 <_printf_common+0xc8>
 800f2b2:	2000      	movs	r0, #0
 800f2b4:	e008      	b.n	800f2c8 <_printf_common+0xa8>
 800f2b6:	2301      	movs	r3, #1
 800f2b8:	4652      	mov	r2, sl
 800f2ba:	4649      	mov	r1, r9
 800f2bc:	4638      	mov	r0, r7
 800f2be:	47c0      	blx	r8
 800f2c0:	3001      	adds	r0, #1
 800f2c2:	d103      	bne.n	800f2cc <_printf_common+0xac>
 800f2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2cc:	3501      	adds	r5, #1
 800f2ce:	e7c6      	b.n	800f25e <_printf_common+0x3e>
 800f2d0:	18e1      	adds	r1, r4, r3
 800f2d2:	1c5a      	adds	r2, r3, #1
 800f2d4:	2030      	movs	r0, #48	; 0x30
 800f2d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f2da:	4422      	add	r2, r4
 800f2dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f2e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f2e4:	3302      	adds	r3, #2
 800f2e6:	e7c7      	b.n	800f278 <_printf_common+0x58>
 800f2e8:	2301      	movs	r3, #1
 800f2ea:	4622      	mov	r2, r4
 800f2ec:	4649      	mov	r1, r9
 800f2ee:	4638      	mov	r0, r7
 800f2f0:	47c0      	blx	r8
 800f2f2:	3001      	adds	r0, #1
 800f2f4:	d0e6      	beq.n	800f2c4 <_printf_common+0xa4>
 800f2f6:	3601      	adds	r6, #1
 800f2f8:	e7d9      	b.n	800f2ae <_printf_common+0x8e>
	...

0800f2fc <_printf_i>:
 800f2fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f300:	7e0f      	ldrb	r7, [r1, #24]
 800f302:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f304:	2f78      	cmp	r7, #120	; 0x78
 800f306:	4691      	mov	r9, r2
 800f308:	4680      	mov	r8, r0
 800f30a:	460c      	mov	r4, r1
 800f30c:	469a      	mov	sl, r3
 800f30e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f312:	d807      	bhi.n	800f324 <_printf_i+0x28>
 800f314:	2f62      	cmp	r7, #98	; 0x62
 800f316:	d80a      	bhi.n	800f32e <_printf_i+0x32>
 800f318:	2f00      	cmp	r7, #0
 800f31a:	f000 80d8 	beq.w	800f4ce <_printf_i+0x1d2>
 800f31e:	2f58      	cmp	r7, #88	; 0x58
 800f320:	f000 80a3 	beq.w	800f46a <_printf_i+0x16e>
 800f324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f328:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f32c:	e03a      	b.n	800f3a4 <_printf_i+0xa8>
 800f32e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f332:	2b15      	cmp	r3, #21
 800f334:	d8f6      	bhi.n	800f324 <_printf_i+0x28>
 800f336:	a101      	add	r1, pc, #4	; (adr r1, 800f33c <_printf_i+0x40>)
 800f338:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f33c:	0800f395 	.word	0x0800f395
 800f340:	0800f3a9 	.word	0x0800f3a9
 800f344:	0800f325 	.word	0x0800f325
 800f348:	0800f325 	.word	0x0800f325
 800f34c:	0800f325 	.word	0x0800f325
 800f350:	0800f325 	.word	0x0800f325
 800f354:	0800f3a9 	.word	0x0800f3a9
 800f358:	0800f325 	.word	0x0800f325
 800f35c:	0800f325 	.word	0x0800f325
 800f360:	0800f325 	.word	0x0800f325
 800f364:	0800f325 	.word	0x0800f325
 800f368:	0800f4b5 	.word	0x0800f4b5
 800f36c:	0800f3d9 	.word	0x0800f3d9
 800f370:	0800f497 	.word	0x0800f497
 800f374:	0800f325 	.word	0x0800f325
 800f378:	0800f325 	.word	0x0800f325
 800f37c:	0800f4d7 	.word	0x0800f4d7
 800f380:	0800f325 	.word	0x0800f325
 800f384:	0800f3d9 	.word	0x0800f3d9
 800f388:	0800f325 	.word	0x0800f325
 800f38c:	0800f325 	.word	0x0800f325
 800f390:	0800f49f 	.word	0x0800f49f
 800f394:	682b      	ldr	r3, [r5, #0]
 800f396:	1d1a      	adds	r2, r3, #4
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	602a      	str	r2, [r5, #0]
 800f39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f3a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f3a4:	2301      	movs	r3, #1
 800f3a6:	e0a3      	b.n	800f4f0 <_printf_i+0x1f4>
 800f3a8:	6820      	ldr	r0, [r4, #0]
 800f3aa:	6829      	ldr	r1, [r5, #0]
 800f3ac:	0606      	lsls	r6, r0, #24
 800f3ae:	f101 0304 	add.w	r3, r1, #4
 800f3b2:	d50a      	bpl.n	800f3ca <_printf_i+0xce>
 800f3b4:	680e      	ldr	r6, [r1, #0]
 800f3b6:	602b      	str	r3, [r5, #0]
 800f3b8:	2e00      	cmp	r6, #0
 800f3ba:	da03      	bge.n	800f3c4 <_printf_i+0xc8>
 800f3bc:	232d      	movs	r3, #45	; 0x2d
 800f3be:	4276      	negs	r6, r6
 800f3c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f3c4:	485e      	ldr	r0, [pc, #376]	; (800f540 <_printf_i+0x244>)
 800f3c6:	230a      	movs	r3, #10
 800f3c8:	e019      	b.n	800f3fe <_printf_i+0x102>
 800f3ca:	680e      	ldr	r6, [r1, #0]
 800f3cc:	602b      	str	r3, [r5, #0]
 800f3ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f3d2:	bf18      	it	ne
 800f3d4:	b236      	sxthne	r6, r6
 800f3d6:	e7ef      	b.n	800f3b8 <_printf_i+0xbc>
 800f3d8:	682b      	ldr	r3, [r5, #0]
 800f3da:	6820      	ldr	r0, [r4, #0]
 800f3dc:	1d19      	adds	r1, r3, #4
 800f3de:	6029      	str	r1, [r5, #0]
 800f3e0:	0601      	lsls	r1, r0, #24
 800f3e2:	d501      	bpl.n	800f3e8 <_printf_i+0xec>
 800f3e4:	681e      	ldr	r6, [r3, #0]
 800f3e6:	e002      	b.n	800f3ee <_printf_i+0xf2>
 800f3e8:	0646      	lsls	r6, r0, #25
 800f3ea:	d5fb      	bpl.n	800f3e4 <_printf_i+0xe8>
 800f3ec:	881e      	ldrh	r6, [r3, #0]
 800f3ee:	4854      	ldr	r0, [pc, #336]	; (800f540 <_printf_i+0x244>)
 800f3f0:	2f6f      	cmp	r7, #111	; 0x6f
 800f3f2:	bf0c      	ite	eq
 800f3f4:	2308      	moveq	r3, #8
 800f3f6:	230a      	movne	r3, #10
 800f3f8:	2100      	movs	r1, #0
 800f3fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f3fe:	6865      	ldr	r5, [r4, #4]
 800f400:	60a5      	str	r5, [r4, #8]
 800f402:	2d00      	cmp	r5, #0
 800f404:	bfa2      	ittt	ge
 800f406:	6821      	ldrge	r1, [r4, #0]
 800f408:	f021 0104 	bicge.w	r1, r1, #4
 800f40c:	6021      	strge	r1, [r4, #0]
 800f40e:	b90e      	cbnz	r6, 800f414 <_printf_i+0x118>
 800f410:	2d00      	cmp	r5, #0
 800f412:	d04d      	beq.n	800f4b0 <_printf_i+0x1b4>
 800f414:	4615      	mov	r5, r2
 800f416:	fbb6 f1f3 	udiv	r1, r6, r3
 800f41a:	fb03 6711 	mls	r7, r3, r1, r6
 800f41e:	5dc7      	ldrb	r7, [r0, r7]
 800f420:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f424:	4637      	mov	r7, r6
 800f426:	42bb      	cmp	r3, r7
 800f428:	460e      	mov	r6, r1
 800f42a:	d9f4      	bls.n	800f416 <_printf_i+0x11a>
 800f42c:	2b08      	cmp	r3, #8
 800f42e:	d10b      	bne.n	800f448 <_printf_i+0x14c>
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	07de      	lsls	r6, r3, #31
 800f434:	d508      	bpl.n	800f448 <_printf_i+0x14c>
 800f436:	6923      	ldr	r3, [r4, #16]
 800f438:	6861      	ldr	r1, [r4, #4]
 800f43a:	4299      	cmp	r1, r3
 800f43c:	bfde      	ittt	le
 800f43e:	2330      	movle	r3, #48	; 0x30
 800f440:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f444:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f448:	1b52      	subs	r2, r2, r5
 800f44a:	6122      	str	r2, [r4, #16]
 800f44c:	f8cd a000 	str.w	sl, [sp]
 800f450:	464b      	mov	r3, r9
 800f452:	aa03      	add	r2, sp, #12
 800f454:	4621      	mov	r1, r4
 800f456:	4640      	mov	r0, r8
 800f458:	f7ff fee2 	bl	800f220 <_printf_common>
 800f45c:	3001      	adds	r0, #1
 800f45e:	d14c      	bne.n	800f4fa <_printf_i+0x1fe>
 800f460:	f04f 30ff 	mov.w	r0, #4294967295
 800f464:	b004      	add	sp, #16
 800f466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f46a:	4835      	ldr	r0, [pc, #212]	; (800f540 <_printf_i+0x244>)
 800f46c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f470:	6829      	ldr	r1, [r5, #0]
 800f472:	6823      	ldr	r3, [r4, #0]
 800f474:	f851 6b04 	ldr.w	r6, [r1], #4
 800f478:	6029      	str	r1, [r5, #0]
 800f47a:	061d      	lsls	r5, r3, #24
 800f47c:	d514      	bpl.n	800f4a8 <_printf_i+0x1ac>
 800f47e:	07df      	lsls	r7, r3, #31
 800f480:	bf44      	itt	mi
 800f482:	f043 0320 	orrmi.w	r3, r3, #32
 800f486:	6023      	strmi	r3, [r4, #0]
 800f488:	b91e      	cbnz	r6, 800f492 <_printf_i+0x196>
 800f48a:	6823      	ldr	r3, [r4, #0]
 800f48c:	f023 0320 	bic.w	r3, r3, #32
 800f490:	6023      	str	r3, [r4, #0]
 800f492:	2310      	movs	r3, #16
 800f494:	e7b0      	b.n	800f3f8 <_printf_i+0xfc>
 800f496:	6823      	ldr	r3, [r4, #0]
 800f498:	f043 0320 	orr.w	r3, r3, #32
 800f49c:	6023      	str	r3, [r4, #0]
 800f49e:	2378      	movs	r3, #120	; 0x78
 800f4a0:	4828      	ldr	r0, [pc, #160]	; (800f544 <_printf_i+0x248>)
 800f4a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f4a6:	e7e3      	b.n	800f470 <_printf_i+0x174>
 800f4a8:	0659      	lsls	r1, r3, #25
 800f4aa:	bf48      	it	mi
 800f4ac:	b2b6      	uxthmi	r6, r6
 800f4ae:	e7e6      	b.n	800f47e <_printf_i+0x182>
 800f4b0:	4615      	mov	r5, r2
 800f4b2:	e7bb      	b.n	800f42c <_printf_i+0x130>
 800f4b4:	682b      	ldr	r3, [r5, #0]
 800f4b6:	6826      	ldr	r6, [r4, #0]
 800f4b8:	6961      	ldr	r1, [r4, #20]
 800f4ba:	1d18      	adds	r0, r3, #4
 800f4bc:	6028      	str	r0, [r5, #0]
 800f4be:	0635      	lsls	r5, r6, #24
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	d501      	bpl.n	800f4c8 <_printf_i+0x1cc>
 800f4c4:	6019      	str	r1, [r3, #0]
 800f4c6:	e002      	b.n	800f4ce <_printf_i+0x1d2>
 800f4c8:	0670      	lsls	r0, r6, #25
 800f4ca:	d5fb      	bpl.n	800f4c4 <_printf_i+0x1c8>
 800f4cc:	8019      	strh	r1, [r3, #0]
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	6123      	str	r3, [r4, #16]
 800f4d2:	4615      	mov	r5, r2
 800f4d4:	e7ba      	b.n	800f44c <_printf_i+0x150>
 800f4d6:	682b      	ldr	r3, [r5, #0]
 800f4d8:	1d1a      	adds	r2, r3, #4
 800f4da:	602a      	str	r2, [r5, #0]
 800f4dc:	681d      	ldr	r5, [r3, #0]
 800f4de:	6862      	ldr	r2, [r4, #4]
 800f4e0:	2100      	movs	r1, #0
 800f4e2:	4628      	mov	r0, r5
 800f4e4:	f7f0 fefc 	bl	80002e0 <memchr>
 800f4e8:	b108      	cbz	r0, 800f4ee <_printf_i+0x1f2>
 800f4ea:	1b40      	subs	r0, r0, r5
 800f4ec:	6060      	str	r0, [r4, #4]
 800f4ee:	6863      	ldr	r3, [r4, #4]
 800f4f0:	6123      	str	r3, [r4, #16]
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f4f8:	e7a8      	b.n	800f44c <_printf_i+0x150>
 800f4fa:	6923      	ldr	r3, [r4, #16]
 800f4fc:	462a      	mov	r2, r5
 800f4fe:	4649      	mov	r1, r9
 800f500:	4640      	mov	r0, r8
 800f502:	47d0      	blx	sl
 800f504:	3001      	adds	r0, #1
 800f506:	d0ab      	beq.n	800f460 <_printf_i+0x164>
 800f508:	6823      	ldr	r3, [r4, #0]
 800f50a:	079b      	lsls	r3, r3, #30
 800f50c:	d413      	bmi.n	800f536 <_printf_i+0x23a>
 800f50e:	68e0      	ldr	r0, [r4, #12]
 800f510:	9b03      	ldr	r3, [sp, #12]
 800f512:	4298      	cmp	r0, r3
 800f514:	bfb8      	it	lt
 800f516:	4618      	movlt	r0, r3
 800f518:	e7a4      	b.n	800f464 <_printf_i+0x168>
 800f51a:	2301      	movs	r3, #1
 800f51c:	4632      	mov	r2, r6
 800f51e:	4649      	mov	r1, r9
 800f520:	4640      	mov	r0, r8
 800f522:	47d0      	blx	sl
 800f524:	3001      	adds	r0, #1
 800f526:	d09b      	beq.n	800f460 <_printf_i+0x164>
 800f528:	3501      	adds	r5, #1
 800f52a:	68e3      	ldr	r3, [r4, #12]
 800f52c:	9903      	ldr	r1, [sp, #12]
 800f52e:	1a5b      	subs	r3, r3, r1
 800f530:	42ab      	cmp	r3, r5
 800f532:	dcf2      	bgt.n	800f51a <_printf_i+0x21e>
 800f534:	e7eb      	b.n	800f50e <_printf_i+0x212>
 800f536:	2500      	movs	r5, #0
 800f538:	f104 0619 	add.w	r6, r4, #25
 800f53c:	e7f5      	b.n	800f52a <_printf_i+0x22e>
 800f53e:	bf00      	nop
 800f540:	08010fc9 	.word	0x08010fc9
 800f544:	08010fda 	.word	0x08010fda

0800f548 <__retarget_lock_acquire_recursive>:
 800f548:	4770      	bx	lr

0800f54a <__retarget_lock_release_recursive>:
 800f54a:	4770      	bx	lr

0800f54c <memcpy>:
 800f54c:	440a      	add	r2, r1
 800f54e:	4291      	cmp	r1, r2
 800f550:	f100 33ff 	add.w	r3, r0, #4294967295
 800f554:	d100      	bne.n	800f558 <memcpy+0xc>
 800f556:	4770      	bx	lr
 800f558:	b510      	push	{r4, lr}
 800f55a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f55e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f562:	4291      	cmp	r1, r2
 800f564:	d1f9      	bne.n	800f55a <memcpy+0xe>
 800f566:	bd10      	pop	{r4, pc}

0800f568 <memmove>:
 800f568:	4288      	cmp	r0, r1
 800f56a:	b510      	push	{r4, lr}
 800f56c:	eb01 0402 	add.w	r4, r1, r2
 800f570:	d902      	bls.n	800f578 <memmove+0x10>
 800f572:	4284      	cmp	r4, r0
 800f574:	4623      	mov	r3, r4
 800f576:	d807      	bhi.n	800f588 <memmove+0x20>
 800f578:	1e43      	subs	r3, r0, #1
 800f57a:	42a1      	cmp	r1, r4
 800f57c:	d008      	beq.n	800f590 <memmove+0x28>
 800f57e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f582:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f586:	e7f8      	b.n	800f57a <memmove+0x12>
 800f588:	4402      	add	r2, r0
 800f58a:	4601      	mov	r1, r0
 800f58c:	428a      	cmp	r2, r1
 800f58e:	d100      	bne.n	800f592 <memmove+0x2a>
 800f590:	bd10      	pop	{r4, pc}
 800f592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f59a:	e7f7      	b.n	800f58c <memmove+0x24>

0800f59c <_realloc_r>:
 800f59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a0:	4680      	mov	r8, r0
 800f5a2:	4614      	mov	r4, r2
 800f5a4:	460e      	mov	r6, r1
 800f5a6:	b921      	cbnz	r1, 800f5b2 <_realloc_r+0x16>
 800f5a8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5ac:	4611      	mov	r1, r2
 800f5ae:	f7ff bc2b 	b.w	800ee08 <_malloc_r>
 800f5b2:	b92a      	cbnz	r2, 800f5c0 <_realloc_r+0x24>
 800f5b4:	f7ff fbbc 	bl	800ed30 <_free_r>
 800f5b8:	4625      	mov	r5, r4
 800f5ba:	4628      	mov	r0, r5
 800f5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c0:	f000 f81b 	bl	800f5fa <_malloc_usable_size_r>
 800f5c4:	4284      	cmp	r4, r0
 800f5c6:	4607      	mov	r7, r0
 800f5c8:	d802      	bhi.n	800f5d0 <_realloc_r+0x34>
 800f5ca:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f5ce:	d812      	bhi.n	800f5f6 <_realloc_r+0x5a>
 800f5d0:	4621      	mov	r1, r4
 800f5d2:	4640      	mov	r0, r8
 800f5d4:	f7ff fc18 	bl	800ee08 <_malloc_r>
 800f5d8:	4605      	mov	r5, r0
 800f5da:	2800      	cmp	r0, #0
 800f5dc:	d0ed      	beq.n	800f5ba <_realloc_r+0x1e>
 800f5de:	42bc      	cmp	r4, r7
 800f5e0:	4622      	mov	r2, r4
 800f5e2:	4631      	mov	r1, r6
 800f5e4:	bf28      	it	cs
 800f5e6:	463a      	movcs	r2, r7
 800f5e8:	f7ff ffb0 	bl	800f54c <memcpy>
 800f5ec:	4631      	mov	r1, r6
 800f5ee:	4640      	mov	r0, r8
 800f5f0:	f7ff fb9e 	bl	800ed30 <_free_r>
 800f5f4:	e7e1      	b.n	800f5ba <_realloc_r+0x1e>
 800f5f6:	4635      	mov	r5, r6
 800f5f8:	e7df      	b.n	800f5ba <_realloc_r+0x1e>

0800f5fa <_malloc_usable_size_r>:
 800f5fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f5fe:	1f18      	subs	r0, r3, #4
 800f600:	2b00      	cmp	r3, #0
 800f602:	bfbc      	itt	lt
 800f604:	580b      	ldrlt	r3, [r1, r0]
 800f606:	18c0      	addlt	r0, r0, r3
 800f608:	4770      	bx	lr
	...

0800f60c <_init>:
 800f60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f60e:	bf00      	nop
 800f610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f612:	bc08      	pop	{r3}
 800f614:	469e      	mov	lr, r3
 800f616:	4770      	bx	lr

0800f618 <_fini>:
 800f618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f61a:	bf00      	nop
 800f61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f61e:	bc08      	pop	{r3}
 800f620:	469e      	mov	lr, r3
 800f622:	4770      	bx	lr
