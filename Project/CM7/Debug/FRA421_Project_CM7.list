
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a194  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  0800a42c  0800a42c  0001a42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a4e4  0800a4e4  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a4e4  0800a4e4  0001a4e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a4ec  0800a4ec  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a4ec  0800a4ec  0001a4ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a4f0  0800a4f0  0001a4f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  0800a4f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  0800a504  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800a564  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b5c  240000d0  0800a5c4  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000c2c  0800a5c4  00020c2c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f0f5  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003487  00000000  00000000  0003f1f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000013f8  00000000  00000000  00042680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000012e8  00000000  00000000  00043a78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c0af  00000000  00000000  00044d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001aff2  00000000  00000000  00080e0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00186bc0  00000000  00000000  0009be01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  002229c1  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000054ec  00000000  00000000  00222a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	0800a414 	.word	0x0800a414

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	0800a414 	.word	0x0800a414

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781a      	ldrb	r2, [r3, #0]
 80005f2:	683b      	ldr	r3, [r7, #0]
 80005f4:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	789a      	ldrb	r2, [r3, #2]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	785a      	ldrb	r2, [r3, #1]
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	78da      	ldrb	r2, [r3, #3]
 800060a:	683b      	ldr	r3, [r7, #0]
 800060c:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791a      	ldrb	r2, [r3, #4]
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	795a      	ldrb	r2, [r3, #5]
 800061a:	683b      	ldr	r3, [r7, #0]
 800061c:	715a      	strb	r2, [r3, #5]
	dst->actionPositon = src->actionPositon;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	799a      	ldrb	r2, [r3, #6]
 8000622:	683b      	ldr	r3, [r7, #0]
 8000624:	719a      	strb	r2, [r3, #6]
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr

08000632 <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 8000632:	b580      	push	{r7, lr}
 8000634:	b088      	sub	sp, #32
 8000636:	af00      	add	r7, sp, #0
 8000638:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	3314      	adds	r3, #20
 800064a:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 800064c:	2300      	movs	r3, #0
 800064e:	76fb      	strb	r3, [r7, #27]
 8000650:	e00b      	b.n	800066a <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000652:	f107 030c 	add.w	r3, r7, #12
 8000656:	69f9      	ldr	r1, [r7, #28]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff ffbf 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800065e:	69fb      	ldr	r3, [r7, #28]
 8000660:	330c      	adds	r3, #12
 8000662:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000664:	7efb      	ldrb	r3, [r7, #27]
 8000666:	3301      	adds	r3, #1
 8000668:	76fb      	strb	r3, [r7, #27]
 800066a:	7efb      	ldrb	r3, [r7, #27]
 800066c:	2b03      	cmp	r3, #3
 800066e:	d9f0      	bls.n	8000652 <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000670:	bf00      	nop
 8000672:	bf00      	nop
 8000674:	3720      	adds	r7, #32
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}

0800067a <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800067a:	b580      	push	{r7, lr}
 800067c:	b088      	sub	sp, #32
 800067e:	af00      	add	r7, sp, #0
 8000680:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000694:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000696:	2300      	movs	r3, #0
 8000698:	76fb      	strb	r3, [r7, #27]
 800069a:	e00b      	b.n	80006b4 <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800069c:	f107 030c 	add.w	r3, r7, #12
 80006a0:	69f9      	ldr	r1, [r7, #28]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff ff9a 	bl	80005dc <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80006a8:	69fb      	ldr	r3, [r7, #28]
 80006aa:	330c      	adds	r3, #12
 80006ac:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 80006ae:	7efb      	ldrb	r3, [r7, #27]
 80006b0:	3301      	adds	r3, #1
 80006b2:	76fb      	strb	r3, [r7, #27]
 80006b4:	7efb      	ldrb	r3, [r7, #27]
 80006b6:	2b05      	cmp	r3, #5
 80006b8:	d9f0      	bls.n	800069c <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	3720      	adds	r7, #32
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}

080006c4 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b086      	sub	sp, #24
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80006d2:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80006da:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80006e2:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80006ea:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80006ec:	2306      	movs	r3, #6
 80006ee:	60fb      	str	r3, [r7, #12]
 80006f0:	e00c      	b.n	800070c <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80006f2:	6939      	ldr	r1, [r7, #16]
 80006f4:	6978      	ldr	r0, [r7, #20]
 80006f6:	f7ff ff71 	bl	80005dc <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	3b0c      	subs	r3, #12
 80006fe:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	3b0c      	subs	r3, #12
 8000704:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	3b01      	subs	r3, #1
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	2b00      	cmp	r3, #0
 8000710:	dcef      	bgt.n	80006f2 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 8000712:	bf00      	nop
 8000714:	bf00      	nop
 8000716:	3718      	adds	r7, #24
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	3304      	adds	r3, #4
 800072a:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	3304      	adds	r3, #4
 8000730:	613b      	str	r3, [r7, #16]
	ptrPlayer1 = &state_game->player[0];
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	3304      	adds	r3, #4
 8000736:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 800073e:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000746:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 8000748:	7bfb      	ldrb	r3, [r7, #15]
 800074a:	2b02      	cmp	r3, #2
 800074c:	d023      	beq.n	8000796 <GAME_PLAY_Management+0x7a>
 800074e:	2b02      	cmp	r3, #2
 8000750:	dc26      	bgt.n	80007a0 <GAME_PLAY_Management+0x84>
 8000752:	2b00      	cmp	r3, #0
 8000754:	d002      	beq.n	800075c <GAME_PLAY_Management+0x40>
 8000756:	2b01      	cmp	r3, #1
 8000758:	d019      	beq.n	800078e <GAME_PLAY_Management+0x72>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
	case second_player:
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 800075a:	e021      	b.n	80007a0 <GAME_PLAY_Management+0x84>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 800075c:	2108      	movs	r1, #8
 800075e:	4812      	ldr	r0, [pc, #72]	; (80007a8 <GAME_PLAY_Management+0x8c>)
 8000760:	f004 fcfe 	bl	8005160 <HAL_GPIO_ReadPin>
 8000764:	4603      	mov	r3, r0
 8000766:	2b00      	cmp	r3, #0
 8000768:	d10c      	bne.n	8000784 <GAME_PLAY_Management+0x68>
			ptrPlayer1->life_point = 4000;
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000770:	801a      	strh	r2, [r3, #0]
			ptrPlayer2->life_point = 4000;
 8000772:	693b      	ldr	r3, [r7, #16]
 8000774:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000778:	801a      	strh	r2, [r3, #0]
			state_game->player_state = first_player;
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	2201      	movs	r2, #1
 800077e:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000782:	e00d      	b.n	80007a0 <GAME_PLAY_Management+0x84>
			state_game->test = 98;
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2262      	movs	r2, #98	; 0x62
 8000788:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 800078c:	e008      	b.n	80007a0 <GAME_PLAY_Management+0x84>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 800078e:	6839      	ldr	r1, [r7, #0]
 8000790:	6878      	ldr	r0, [r7, #4]
 8000792:	f000 f80b 	bl	80007ac <GAME_PLAY_Phase_Management>
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000796:	6839      	ldr	r1, [r7, #0]
 8000798:	6878      	ldr	r0, [r7, #4]
 800079a:	f000 f807 	bl	80007ac <GAME_PLAY_Phase_Management>
		break;
 800079e:	bf00      	nop
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	58020000 	.word	0x58020000

080007ac <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 80007b6:	683b      	ldr	r3, [r7, #0]
 80007b8:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 80007bc:	76bb      	strb	r3, [r7, #26]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect
	} MAIN;
	MAIN = state_game->MAIN;
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 80007c4:	767b      	strb	r3, [r7, #25]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	3304      	adds	r3, #4
 80007ca:	61fb      	str	r3, [r7, #28]
	Player *ptrPlayerDef = state_game->player;
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	3304      	adds	r3, #4
 80007d0:	617b      	str	r3, [r7, #20]

	if (state_game->player_state == first_player) {
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007d8:	2b01      	cmp	r3, #1
 80007da:	d107      	bne.n	80007ec <GAME_PLAY_Phase_Management+0x40>
		ptrPlayerAtk = &state_game->player[0];
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	61fb      	str	r3, [r7, #28]
		ptrPlayerDef = &state_game->player[1];
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007e8:	617b      	str	r3, [r7, #20]
 80007ea:	e00b      	b.n	8000804 <GAME_PLAY_Phase_Management+0x58>
	} else if (state_game->player_state == first_player) {
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d106      	bne.n	8000804 <GAME_PLAY_Phase_Management+0x58>
		ptrPlayerAtk = &state_game->player[1];
 80007f6:	683b      	ldr	r3, [r7, #0]
 80007f8:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007fc:	61fb      	str	r3, [r7, #28]
		ptrPlayerDef = &state_game->player[0];
 80007fe:	683b      	ldr	r3, [r7, #0]
 8000800:	3304      	adds	r3, #4
 8000802:	617b      	str	r3, [r7, #20]

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000804:	7ebb      	ldrb	r3, [r7, #26]
 8000806:	2b03      	cmp	r3, #3
 8000808:	f200 81ad 	bhi.w	8000b66 <GAME_PLAY_Phase_Management+0x3ba>
 800080c:	a201      	add	r2, pc, #4	; (adr r2, 8000814 <GAME_PLAY_Phase_Management+0x68>)
 800080e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000812:	bf00      	nop
 8000814:	08000825 	.word	0x08000825
 8000818:	0800084d 	.word	0x0800084d
 800081c:	08000b5d 	.word	0x08000b5d
 8000820:	08000b5d 	.word	0x08000b5d
	case Drawn_Phase:
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000824:	2101      	movs	r1, #1
 8000826:	4899      	ldr	r0, [pc, #612]	; (8000a8c <GAME_PLAY_Phase_Management+0x2e0>)
 8000828:	f004 fc9a 	bl	8005160 <HAL_GPIO_ReadPin>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	f040 8196 	bne.w	8000b60 <GAME_PLAY_Phase_Management+0x3b4>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	2201      	movs	r2, #1
 8000838:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	2200      	movs	r2, #0
 8000840:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
		}
		break;
 800084a:	e189      	b.n	8000b60 <GAME_PLAY_Phase_Management+0x3b4>
	case Main_Phase:

		switch (MAIN)
 800084c:	7e7b      	ldrb	r3, [r7, #25]
 800084e:	2b04      	cmp	r3, #4
 8000850:	f200 8188 	bhi.w	8000b64 <GAME_PLAY_Phase_Management+0x3b8>
 8000854:	a201      	add	r2, pc, #4	; (adr r2, 800085c <GAME_PLAY_Phase_Management+0xb0>)
 8000856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085a:	bf00      	nop
 800085c:	08000871 	.word	0x08000871
 8000860:	08000899 	.word	0x08000899
 8000864:	08000965 	.word	0x08000965
 8000868:	08000a5d 	.word	0x08000a5d
 800086c:	08000b49 	.word	0x08000b49
		{
		case await:
			if (state_game->action == 0)
 8000870:	683b      	ldr	r3, [r7, #0]
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b00      	cmp	r3, #0
 8000876:	d105      	bne.n	8000884 <GAME_PLAY_Phase_Management+0xd8>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000878:	69fa      	ldr	r2, [r7, #28]
 800087a:	6839      	ldr	r1, [r7, #0]
 800087c:	6878      	ldr	r0, [r7, #4]
 800087e:	f000 f979 	bl	8000b74 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000882:	e163      	b.n	8000b4c <GAME_PLAY_Phase_Management+0x3a0>
			else if (state_game->action == 1)
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	2b01      	cmp	r3, #1
 800088a:	f040 815f 	bne.w	8000b4c <GAME_PLAY_Phase_Management+0x3a0>
				state_game->MAIN = select_position;
 800088e:	683b      	ldr	r3, [r7, #0]
 8000890:	2201      	movs	r2, #1
 8000892:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000896:	e159      	b.n	8000b4c <GAME_PLAY_Phase_Management+0x3a0>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000898:	69fb      	ldr	r3, [r7, #28]
 800089a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800089e:	613b      	str	r3, [r7, #16]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 80008a0:	69fb      	ldr	r3, [r7, #28]
 80008a2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80008a6:	60fb      	str	r3, [r7, #12]

			if (state_game->action == 1)
 80008a8:	683b      	ldr	r3, [r7, #0]
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	2b01      	cmp	r3, #1
 80008ae:	d145      	bne.n	800093c <GAME_PLAY_Phase_Management+0x190>
			{
				if (state_game->player_state == first_player)
 80008b0:	683b      	ldr	r3, [r7, #0]
 80008b2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80008b6:	2b01      	cmp	r3, #1
 80008b8:	d11c      	bne.n	80008f4 <GAME_PLAY_Phase_Management+0x148>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 80008ba:	2108      	movs	r1, #8
 80008bc:	4873      	ldr	r0, [pc, #460]	; (8000a8c <GAME_PLAY_Phase_Management+0x2e0>)
 80008be:	f004 fc4f 	bl	8005160 <HAL_GPIO_ReadPin>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d106      	bne.n	80008d6 <GAME_PLAY_Phase_Management+0x12a>
					{
						ptrYugiohCard_src->cardState = 1;
 80008c8:	693b      	ldr	r3, [r7, #16]
 80008ca:	2201      	movs	r2, #1
 80008cc:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	2202      	movs	r2, #2
 80008d2:	701a      	strb	r2, [r3, #0]
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 80008d4:	e13c      	b.n	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 80008d6:	2102      	movs	r1, #2
 80008d8:	486d      	ldr	r0, [pc, #436]	; (8000a90 <GAME_PLAY_Phase_Management+0x2e4>)
 80008da:	f004 fc41 	bl	8005160 <HAL_GPIO_ReadPin>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	f040 8135 	bne.w	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
						ptrYugiohCard_src->cardState = 0;
 80008e6:	693b      	ldr	r3, [r7, #16]
 80008e8:	2200      	movs	r2, #0
 80008ea:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 80008ec:	683b      	ldr	r3, [r7, #0]
 80008ee:	2202      	movs	r2, #2
 80008f0:	701a      	strb	r2, [r3, #0]
			break;
 80008f2:	e12d      	b.n	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
				else if (state_game->player_state == second_player)
 80008f4:	683b      	ldr	r3, [r7, #0]
 80008f6:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80008fa:	2b02      	cmp	r3, #2
 80008fc:	f040 8128 	bne.w	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000900:	2104      	movs	r1, #4
 8000902:	4862      	ldr	r0, [pc, #392]	; (8000a8c <GAME_PLAY_Phase_Management+0x2e0>)
 8000904:	f004 fc2c 	bl	8005160 <HAL_GPIO_ReadPin>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d106      	bne.n	800091c <GAME_PLAY_Phase_Management+0x170>
						ptrYugiohCard_src->cardState = 1;
 800090e:	693b      	ldr	r3, [r7, #16]
 8000910:	2201      	movs	r2, #1
 8000912:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	2202      	movs	r2, #2
 8000918:	701a      	strb	r2, [r3, #0]
			break;
 800091a:	e119      	b.n	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 800091c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000920:	485c      	ldr	r0, [pc, #368]	; (8000a94 <GAME_PLAY_Phase_Management+0x2e8>)
 8000922:	f004 fc1d 	bl	8005160 <HAL_GPIO_ReadPin>
 8000926:	4603      	mov	r3, r0
 8000928:	2b00      	cmp	r3, #0
 800092a:	f040 8111 	bne.w	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
						ptrYugiohCard_src->cardState = 0;
 800092e:	693b      	ldr	r3, [r7, #16]
 8000930:	2200      	movs	r2, #0
 8000932:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	2202      	movs	r2, #2
 8000938:	701a      	strb	r2, [r3, #0]
			break;
 800093a:	e109      	b.n	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
			else if (state_game->action == 2)
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	2b02      	cmp	r3, #2
 8000942:	f040 8105 	bne.w	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000946:	68f9      	ldr	r1, [r7, #12]
 8000948:	6938      	ldr	r0, [r7, #16]
 800094a:	f7ff fe47 	bl	80005dc <YUGIOH_card_copy>
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800094e:	69f8      	ldr	r0, [r7, #28]
 8000950:	f7ff fe93 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
				state_game->action = 3;
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	2203      	movs	r2, #3
 8000958:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 800095a:	683b      	ldr	r3, [r7, #0]
 800095c:	2202      	movs	r2, #2
 800095e:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000962:	e0f5      	b.n	8000b50 <GAME_PLAY_Phase_Management+0x3a4>
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000964:	69fb      	ldr	r3, [r7, #28]
 8000966:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 800096a:	613b      	str	r3, [r7, #16]

			if (state_game->action == 3)
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b03      	cmp	r3, #3
 8000972:	f040 80ef 	bne.w	8000b54 <GAME_PLAY_Phase_Management+0x3a8>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000976:	693b      	ldr	r3, [r7, #16]
 8000978:	785b      	ldrb	r3, [r3, #1]
 800097a:	2b03      	cmp	r3, #3
 800097c:	d12a      	bne.n	80009d4 <GAME_PLAY_Phase_Management+0x228>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 800097e:	693b      	ldr	r3, [r7, #16]
 8000980:	799a      	ldrb	r2, [r3, #6]
 8000982:	4b45      	ldr	r3, [pc, #276]	; (8000a98 <GAME_PLAY_Phase_Management+0x2ec>)
 8000984:	fba3 1302 	umull	r1, r3, r3, r2
 8000988:	0899      	lsrs	r1, r3, #2
 800098a:	460b      	mov	r3, r1
 800098c:	005b      	lsls	r3, r3, #1
 800098e:	440b      	add	r3, r1
 8000990:	005b      	lsls	r3, r3, #1
 8000992:	1ad3      	subs	r3, r2, r3
 8000994:	727b      	strb	r3, [r7, #9]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000996:	7a7a      	ldrb	r2, [r7, #9]
 8000998:	4613      	mov	r3, r2
 800099a:	005b      	lsls	r3, r3, #1
 800099c:	4413      	add	r3, r2
 800099e:	009b      	lsls	r3, r3, #2
 80009a0:	69fa      	ldr	r2, [r7, #28]
 80009a2:	4413      	add	r3, r2
 80009a4:	3304      	adds	r3, #4
 80009a6:	60fb      	str	r3, [r7, #12]

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80009a8:	68f9      	ldr	r1, [r7, #12]
 80009aa:	6938      	ldr	r0, [r7, #16]
 80009ac:	f7ff fe16 	bl	80005dc <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80009b0:	69f8      	ldr	r0, [r7, #28]
 80009b2:	f7ff fe62 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80009bc:	6939      	ldr	r1, [r7, #16]
 80009be:	4618      	mov	r0, r3
 80009c0:	f7ff fe0c 	bl	80005dc <YUGIOH_card_copy>

					state_game->action = 0;
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	2200      	movs	r2, #0
 80009c8:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	2200      	movs	r2, #0
 80009ce:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 80009d2:	e0bf      	b.n	8000b54 <GAME_PLAY_Phase_Management+0x3a8>
				else if (ptrYugiohCard_src->cardType == 2)
 80009d4:	693b      	ldr	r3, [r7, #16]
 80009d6:	785b      	ldrb	r3, [r3, #1]
 80009d8:	2b02      	cmp	r3, #2
 80009da:	f000 80bb 	beq.w	8000b54 <GAME_PLAY_Phase_Management+0x3a8>
				else if (ptrYugiohCard_src->cardType == 1)
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	785b      	ldrb	r3, [r3, #1]
 80009e2:	2b01      	cmp	r3, #1
 80009e4:	f040 80b6 	bne.w	8000b54 <GAME_PLAY_Phase_Management+0x3a8>
					if (ptrYugiohCard_src->cardLevel < 7)
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	78db      	ldrb	r3, [r3, #3]
 80009ec:	2b06      	cmp	r3, #6
 80009ee:	d82a      	bhi.n	8000a46 <GAME_PLAY_Phase_Management+0x29a>
						uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 80009f0:	693b      	ldr	r3, [r7, #16]
 80009f2:	799a      	ldrb	r2, [r3, #6]
 80009f4:	4b28      	ldr	r3, [pc, #160]	; (8000a98 <GAME_PLAY_Phase_Management+0x2ec>)
 80009f6:	fba3 1302 	umull	r1, r3, r3, r2
 80009fa:	0899      	lsrs	r1, r3, #2
 80009fc:	460b      	mov	r3, r1
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	440b      	add	r3, r1
 8000a02:	005b      	lsls	r3, r3, #1
 8000a04:	1ad3      	subs	r3, r2, r3
 8000a06:	72bb      	strb	r3, [r7, #10]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000a08:	7aba      	ldrb	r2, [r7, #10]
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	4413      	add	r3, r2
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	69fa      	ldr	r2, [r7, #28]
 8000a14:	4413      	add	r3, r2
 8000a16:	3304      	adds	r3, #4
 8000a18:	60fb      	str	r3, [r7, #12]
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000a1a:	68f9      	ldr	r1, [r7, #12]
 8000a1c:	6938      	ldr	r0, [r7, #16]
 8000a1e:	f7ff fddd 	bl	80005dc <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000a22:	69f8      	ldr	r0, [r7, #28]
 8000a24:	f7ff fe29 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000a28:	69fb      	ldr	r3, [r7, #28]
 8000a2a:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000a2e:	6939      	ldr	r1, [r7, #16]
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff fdd3 	bl	80005dc <YUGIOH_card_copy>
						state_game->action = 0;
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000a44:	e086      	b.n	8000b54 <GAME_PLAY_Phase_Management+0x3a8>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000a46:	69f8      	ldr	r0, [r7, #28]
 8000a48:	f7ff fe17 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	2204      	movs	r2, #4
 8000a50:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2203      	movs	r2, #3
 8000a56:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000a5a:	e07b      	b.n	8000b54 <GAME_PLAY_Phase_Management+0x3a8>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000a62:	613b      	str	r3, [r7, #16]

			if (state_game->action == 4)
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	2b04      	cmp	r3, #4
 8000a6a:	d105      	bne.n	8000a78 <GAME_PLAY_Phase_Management+0x2cc>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000a6c:	69fa      	ldr	r2, [r7, #28]
 8000a6e:	6839      	ldr	r1, [r7, #0]
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f000 f87f 	bl	8000b74 <Player_Reading_Card>

			else

			break;
		case activate_effect:
			break;
 8000a76:	e067      	b.n	8000b48 <GAME_PLAY_Phase_Management+0x39c>
			else if (state_game->action == 5)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b05      	cmp	r3, #5
 8000a7e:	d10d      	bne.n	8000a9c <GAME_PLAY_Phase_Management+0x2f0>
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	6839      	ldr	r1, [r7, #0]
 8000a84:	6878      	ldr	r0, [r7, #4]
 8000a86:	f000 f875 	bl	8000b74 <Player_Reading_Card>
			break;
 8000a8a:	e05d      	b.n	8000b48 <GAME_PLAY_Phase_Management+0x39c>
 8000a8c:	58020800 	.word	0x58020800
 8000a90:	58020400 	.word	0x58020400
 8000a94:	58021400 	.word	0x58021400
 8000a98:	aaaaaaab 	.word	0xaaaaaaab
			else if (state_game->action == 6)
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	2b06      	cmp	r3, #6
 8000aa2:	d159      	bne.n	8000b58 <GAME_PLAY_Phase_Management+0x3ac>
				uint8_t monsterflag = 0 ;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8000aa8:	69fb      	ldr	r3, [r7, #28]
 8000aaa:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000aae:	60fb      	str	r3, [r7, #12]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	78db      	ldrb	r3, [r3, #3]
 8000ab4:	2b04      	cmp	r3, #4
 8000ab6:	d802      	bhi.n	8000abe <GAME_PLAY_Phase_Management+0x312>
					monsterflag += 1;
 8000ab8:	7efb      	ldrb	r3, [r7, #27]
 8000aba:	3301      	adds	r3, #1
 8000abc:	76fb      	strb	r3, [r7, #27]
				ptrYugiohCard_dst++;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	330c      	adds	r3, #12
 8000ac2:	60fb      	str	r3, [r7, #12]
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	78db      	ldrb	r3, [r3, #3]
 8000ac8:	2b04      	cmp	r3, #4
 8000aca:	d802      	bhi.n	8000ad2 <GAME_PLAY_Phase_Management+0x326>
					monsterflag += 1;
 8000acc:	7efb      	ldrb	r3, [r7, #27]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	76fb      	strb	r3, [r7, #27]
				if (monsterflag == 2)
 8000ad2:	7efb      	ldrb	r3, [r7, #27]
 8000ad4:	2b02      	cmp	r3, #2
 8000ad6:	d12a      	bne.n	8000b2e <GAME_PLAY_Phase_Management+0x382>
					uint8_t idx = ptrYugiohCard_src->actionPositon % 6;
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	799a      	ldrb	r2, [r3, #6]
 8000adc:	4b24      	ldr	r3, [pc, #144]	; (8000b70 <GAME_PLAY_Phase_Management+0x3c4>)
 8000ade:	fba3 1302 	umull	r1, r3, r3, r2
 8000ae2:	0899      	lsrs	r1, r3, #2
 8000ae4:	460b      	mov	r3, r1
 8000ae6:	005b      	lsls	r3, r3, #1
 8000ae8:	440b      	add	r3, r1
 8000aea:	005b      	lsls	r3, r3, #1
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	72fb      	strb	r3, [r7, #11]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8000af0:	7afa      	ldrb	r2, [r7, #11]
 8000af2:	4613      	mov	r3, r2
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	4413      	add	r3, r2
 8000af8:	009b      	lsls	r3, r3, #2
 8000afa:	69fa      	ldr	r2, [r7, #28]
 8000afc:	4413      	add	r3, r2
 8000afe:	3304      	adds	r3, #4
 8000b00:	60fb      	str	r3, [r7, #12]
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000b02:	68f9      	ldr	r1, [r7, #12]
 8000b04:	6938      	ldr	r0, [r7, #16]
 8000b06:	f7ff fd69 	bl	80005dc <YUGIOH_card_copy>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000b0a:	69f8      	ldr	r0, [r7, #28]
 8000b0c:	f7ff fdb5 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8000b10:	69fb      	ldr	r3, [r7, #28]
 8000b12:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000b16:	6939      	ldr	r1, [r7, #16]
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f7ff fd5f 	bl	80005dc <YUGIOH_card_copy>
					state_game->action = 0;
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	2200      	movs	r2, #0
 8000b28:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000b2c:	e00c      	b.n	8000b48 <GAME_PLAY_Phase_Management+0x39c>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8000b2e:	69f8      	ldr	r0, [r7, #28]
 8000b30:	f7ff fda3 	bl	800067a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000b40:	4619      	mov	r1, r3
 8000b42:	4610      	mov	r0, r2
 8000b44:	f7ff fd4a 	bl	80005dc <YUGIOH_card_copy>
			break;
 8000b48:	bf00      	nop
 8000b4a:	e00b      	b.n	8000b64 <GAME_PLAY_Phase_Management+0x3b8>
			break;
 8000b4c:	bf00      	nop
 8000b4e:	e009      	b.n	8000b64 <GAME_PLAY_Phase_Management+0x3b8>
			break;
 8000b50:	bf00      	nop
 8000b52:	e007      	b.n	8000b64 <GAME_PLAY_Phase_Management+0x3b8>
			break;
 8000b54:	bf00      	nop
 8000b56:	e005      	b.n	8000b64 <GAME_PLAY_Phase_Management+0x3b8>
			break;
 8000b58:	bf00      	nop
		}
		break;
 8000b5a:	e003      	b.n	8000b64 <GAME_PLAY_Phase_Management+0x3b8>
		case Battle_Phase:
			break;
 8000b5c:	bf00      	nop
 8000b5e:	e002      	b.n	8000b66 <GAME_PLAY_Phase_Management+0x3ba>
		break;
 8000b60:	bf00      	nop
 8000b62:	e000      	b.n	8000b66 <GAME_PLAY_Phase_Management+0x3ba>
		break;
 8000b64:	bf00      	nop
		case Chain_Phase:
			break;

	}
}
 8000b66:	bf00      	nop
 8000b68:	3720      	adds	r7, #32
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	aaaaaaab 	.word	0xaaaaaaab

08000b74 <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b088      	sub	sp, #32
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	60f8      	str	r0, [r7, #12]
 8000b7c:	60b9      	str	r1, [r7, #8]
 8000b7e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	3328      	adds	r3, #40	; 0x28
 8000b84:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	881b      	ldrh	r3, [r3, #0]
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	4613      	mov	r3, r2
 8000b8e:	011b      	lsls	r3, r3, #4
 8000b90:	4413      	add	r3, r2
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	3328      	adds	r3, #40	; 0x28
 8000b96:	68fa      	ldr	r2, [r7, #12]
 8000b98:	4413      	add	r3, r2
 8000b9a:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 8000b9c:	69fb      	ldr	r3, [r7, #28]
 8000b9e:	3314      	adds	r3, #20
 8000ba0:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000ba8:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 8000baa:	69fb      	ldr	r3, [r7, #28]
 8000bac:	78db      	ldrb	r3, [r3, #3]
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d112      	bne.n	8000bd8 <Player_Reading_Card+0x64>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff fd86 	bl	80006c4 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000bb8:	6979      	ldr	r1, [r7, #20]
 8000bba:	69b8      	ldr	r0, [r7, #24]
 8000bbc:	f7ff fd0e 	bl	80005dc <YUGIOH_card_copy>

		RFID_Clear_Card_Bufffer(ptrRFID);
 8000bc0:	69f8      	ldr	r0, [r7, #28]
 8000bc2:	f7ff fd36 	bl	8000632 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	2200      	movs	r2, #0
 8000bca:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	68bb      	ldr	r3, [r7, #8]
 8000bd6:	701a      	strb	r2, [r3, #0]
	}
}
 8000bd8:	bf00      	nop
 8000bda:	3720      	adds	r7, #32
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000be4:	4b3d      	ldr	r3, [pc, #244]	; (8000cdc <SystemInit+0xfc>)
 8000be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bea:	4a3c      	ldr	r2, [pc, #240]	; (8000cdc <SystemInit+0xfc>)
 8000bec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bf0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000bf4:	4b39      	ldr	r3, [pc, #228]	; (8000cdc <SystemInit+0xfc>)
 8000bf6:	691b      	ldr	r3, [r3, #16]
 8000bf8:	4a38      	ldr	r2, [pc, #224]	; (8000cdc <SystemInit+0xfc>)
 8000bfa:	f043 0310 	orr.w	r3, r3, #16
 8000bfe:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c00:	4b37      	ldr	r3, [pc, #220]	; (8000ce0 <SystemInit+0x100>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f003 030f 	and.w	r3, r3, #15
 8000c08:	2b06      	cmp	r3, #6
 8000c0a:	d807      	bhi.n	8000c1c <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c0c:	4b34      	ldr	r3, [pc, #208]	; (8000ce0 <SystemInit+0x100>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	f023 030f 	bic.w	r3, r3, #15
 8000c14:	4a32      	ldr	r2, [pc, #200]	; (8000ce0 <SystemInit+0x100>)
 8000c16:	f043 0307 	orr.w	r3, r3, #7
 8000c1a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000c1c:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <SystemInit+0x104>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <SystemInit+0x104>)
 8000c22:	f043 0301 	orr.w	r3, r3, #1
 8000c26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c28:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <SystemInit+0x104>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000c2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ce4 <SystemInit+0x104>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	492c      	ldr	r1, [pc, #176]	; (8000ce4 <SystemInit+0x104>)
 8000c34:	4b2c      	ldr	r3, [pc, #176]	; (8000ce8 <SystemInit+0x108>)
 8000c36:	4013      	ands	r3, r2
 8000c38:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <SystemInit+0x100>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d007      	beq.n	8000c56 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000c46:	4b26      	ldr	r3, [pc, #152]	; (8000ce0 <SystemInit+0x100>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f023 030f 	bic.w	r3, r3, #15
 8000c4e:	4a24      	ldr	r2, [pc, #144]	; (8000ce0 <SystemInit+0x100>)
 8000c50:	f043 0307 	orr.w	r3, r3, #7
 8000c54:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000c56:	4b23      	ldr	r3, [pc, #140]	; (8000ce4 <SystemInit+0x104>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000c5c:	4b21      	ldr	r3, [pc, #132]	; (8000ce4 <SystemInit+0x104>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000c62:	4b20      	ldr	r3, [pc, #128]	; (8000ce4 <SystemInit+0x104>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000c68:	4b1e      	ldr	r3, [pc, #120]	; (8000ce4 <SystemInit+0x104>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	; (8000cec <SystemInit+0x10c>)
 8000c6c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000c6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ce4 <SystemInit+0x104>)
 8000c70:	4a1f      	ldr	r2, [pc, #124]	; (8000cf0 <SystemInit+0x110>)
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000c74:	4b1b      	ldr	r3, [pc, #108]	; (8000ce4 <SystemInit+0x104>)
 8000c76:	4a1f      	ldr	r2, [pc, #124]	; (8000cf4 <SystemInit+0x114>)
 8000c78:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000c7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ce4 <SystemInit+0x104>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000c80:	4b18      	ldr	r3, [pc, #96]	; (8000ce4 <SystemInit+0x104>)
 8000c82:	4a1c      	ldr	r2, [pc, #112]	; (8000cf4 <SystemInit+0x114>)
 8000c84:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000c86:	4b17      	ldr	r3, [pc, #92]	; (8000ce4 <SystemInit+0x104>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000c8c:	4b15      	ldr	r3, [pc, #84]	; (8000ce4 <SystemInit+0x104>)
 8000c8e:	4a19      	ldr	r2, [pc, #100]	; (8000cf4 <SystemInit+0x114>)
 8000c90:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000c92:	4b14      	ldr	r3, [pc, #80]	; (8000ce4 <SystemInit+0x104>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <SystemInit+0x104>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a11      	ldr	r2, [pc, #68]	; (8000ce4 <SystemInit+0x104>)
 8000c9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ca2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <SystemInit+0x104>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000caa:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <SystemInit+0x118>)
 8000cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <SystemInit+0x118>)
 8000cb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cb4:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <SystemInit+0x11c>)
 8000cb8:	681a      	ldr	r2, [r3, #0]
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <SystemInit+0x120>)
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cc2:	d202      	bcs.n	8000cca <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000cc4:	4b0f      	ldr	r3, [pc, #60]	; (8000d04 <SystemInit+0x124>)
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000cca:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <SystemInit+0x128>)
 8000ccc:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000cd0:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000cd2:	bf00      	nop
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00
 8000ce0:	52002000 	.word	0x52002000
 8000ce4:	58024400 	.word	0x58024400
 8000ce8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000cec:	02020200 	.word	0x02020200
 8000cf0:	01ff0000 	.word	0x01ff0000
 8000cf4:	01010280 	.word	0x01010280
 8000cf8:	580000c0 	.word	0x580000c0
 8000cfc:	5c001000 	.word	0x5c001000
 8000d00:	ffff0000 	.word	0xffff0000
 8000d04:	51008108 	.word	0x51008108
 8000d08:	52004000 	.word	0x52004000

08000d0c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
	int32_t timeout;
	/* USER CODE END Boot_Mode_Sequence_0 */

	/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8000d12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d16:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000d18:	bf00      	nop
 8000d1a:	4b35      	ldr	r3, [pc, #212]	; (8000df0 <main+0xe4>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d004      	beq.n	8000d30 <main+0x24>
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	1e5a      	subs	r2, r3, #1
 8000d2a:	607a      	str	r2, [r7, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	dcf4      	bgt.n	8000d1a <main+0xe>
	if ( timeout < 0 )
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	da01      	bge.n	8000d3a <main+0x2e>
	{
		Error_Handler();
 8000d36:	f000 fb95 	bl	8001464 <Error_Handler>
	}
	/* USER CODE END Boot_Mode_Sequence_1 */
	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000d3a:	f001 f831 	bl	8001da0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000d3e:	f000 f85f 	bl	8000e00 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 8000d42:	f000 f8e1 	bl	8000f08 <PeriphCommonClock_Config>
	/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000d46:	4b2a      	ldr	r3, [pc, #168]	; (8000df0 <main+0xe4>)
 8000d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4c:	4a28      	ldr	r2, [pc, #160]	; (8000df0 <main+0xe4>)
 8000d4e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d52:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d56:	4b26      	ldr	r3, [pc, #152]	; (8000df0 <main+0xe4>)
 8000d58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d60:	603b      	str	r3, [r7, #0]
 8000d62:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000d64:	2000      	movs	r0, #0
 8000d66:	f004 fa47 	bl	80051f8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000d6a:	2100      	movs	r1, #0
 8000d6c:	2000      	movs	r0, #0
 8000d6e:	f004 fa5d 	bl	800522c <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8000d72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d76:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d78:	bf00      	nop
 8000d7a:	4b1d      	ldr	r3, [pc, #116]	; (8000df0 <main+0xe4>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d104      	bne.n	8000d90 <main+0x84>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	1e5a      	subs	r2, r3, #1
 8000d8a:	607a      	str	r2, [r7, #4]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	dcf4      	bgt.n	8000d7a <main+0x6e>
	if ( timeout < 0 )
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	da01      	bge.n	8000d9a <main+0x8e>
	{
		Error_Handler();
 8000d96:	f000 fb65 	bl	8001464 <Error_Handler>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000d9a:	f000 fa33 	bl	8001204 <MX_GPIO_Init>
	MX_ETH_Init();
 8000d9e:	f000 f8e5 	bl	8000f6c <MX_ETH_Init>
	MX_USART3_UART_Init();
 8000da2:	f000 f987 	bl	80010b4 <MX_USART3_UART_Init>
	MX_DMA_Init();
 8000da6:	f000 fa05 	bl	80011b4 <MX_DMA_Init>
	MX_USB_OTG_FS_PCD_Init();
 8000daa:	f000 f9d1 	bl	8001150 <MX_USB_OTG_FS_PCD_Init>
	MX_SPI3_Init();
 8000dae:	f000 f929 	bl	8001004 <MX_SPI3_Init>
	/* USER CODE BEGIN 2 */
	ST7735_Init();
 8000db2:	f000 fc5f 	bl	8001674 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 8000db6:	2000      	movs	r0, #0
 8000db8:	f000 fcee 	bl	8001798 <ST7735_FillScreen>
	/* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8000dbc:	f001 f876 	bl	8001eac <HAL_GetTick>
 8000dc0:	4602      	mov	r2, r0
 8000dc2:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <main+0xe8>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	2bc8      	cmp	r3, #200	; 0xc8
 8000dca:	d9f7      	bls.n	8000dbc <main+0xb0>
		{
			timemsM7_LED = HAL_GetTick();
 8000dcc:	f001 f86e 	bl	8001eac <HAL_GetTick>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	4a08      	ldr	r2, [pc, #32]	; (8000df4 <main+0xe8>)
 8000dd4:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000dd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dda:	4807      	ldr	r0, [pc, #28]	; (8000df8 <main+0xec>)
 8000ddc:	f004 f9f1 	bl	80051c2 <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8000de0:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8000de4:	4905      	ldr	r1, [pc, #20]	; (8000dfc <main+0xf0>)
 8000de6:	4618      	mov	r0, r3
 8000de8:	f7ff fc98 	bl	800071c <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8000dec:	e7e6      	b.n	8000dbc <main+0xb0>
 8000dee:	bf00      	nop
 8000df0:	58024400 	.word	0x58024400
 8000df4:	24000c1c 	.word	0x24000c1c
 8000df8:	58020400 	.word	0x58020400
 8000dfc:	240008e8 	.word	0x240008e8

08000e00 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b09c      	sub	sp, #112	; 0x70
 8000e04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e06:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e0a:	224c      	movs	r2, #76	; 0x4c
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f009 faf8 	bl	800a404 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2220      	movs	r2, #32
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f009 faf2 	bl	800a404 <memset>

	/** Supply configuration update enable
	 */
	HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000e20:	2004      	movs	r0, #4
 8000e22:	f004 fb5f 	bl	80054e4 <HAL_PWREx_ConfigSupply>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000e26:	2300      	movs	r3, #0
 8000e28:	603b      	str	r3, [r7, #0]
 8000e2a:	4b34      	ldr	r3, [pc, #208]	; (8000efc <SystemClock_Config+0xfc>)
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	4a33      	ldr	r2, [pc, #204]	; (8000efc <SystemClock_Config+0xfc>)
 8000e30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000e34:	6193      	str	r3, [r2, #24]
 8000e36:	4b31      	ldr	r3, [pc, #196]	; (8000efc <SystemClock_Config+0xfc>)
 8000e38:	699b      	ldr	r3, [r3, #24]
 8000e3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e3e:	603b      	str	r3, [r7, #0]
 8000e40:	4b2f      	ldr	r3, [pc, #188]	; (8000f00 <SystemClock_Config+0x100>)
 8000e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e44:	4a2e      	ldr	r2, [pc, #184]	; (8000f00 <SystemClock_Config+0x100>)
 8000e46:	f043 0301 	orr.w	r3, r3, #1
 8000e4a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000e4c:	4b2c      	ldr	r3, [pc, #176]	; (8000f00 <SystemClock_Config+0x100>)
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	683b      	ldr	r3, [r7, #0]

	while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000e58:	bf00      	nop
 8000e5a:	4b28      	ldr	r3, [pc, #160]	; (8000efc <SystemClock_Config+0xfc>)
 8000e5c:	699b      	ldr	r3, [r3, #24]
 8000e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000e62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000e66:	d1f8      	bne.n	8000e5a <SystemClock_Config+0x5a>

	/** Macro to configure the PLL clock source
	 */
	__HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000e68:	4b26      	ldr	r3, [pc, #152]	; (8000f04 <SystemClock_Config+0x104>)
 8000e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e6c:	f023 0303 	bic.w	r3, r3, #3
 8000e70:	4a24      	ldr	r2, [pc, #144]	; (8000f04 <SystemClock_Config+0x104>)
 8000e72:	f043 0302 	orr.w	r3, r3, #2
 8000e76:	6293      	str	r3, [r2, #40]	; 0x28

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e78:	2301      	movs	r3, #1
 8000e7a:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000e7c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000e80:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e82:	2302      	movs	r3, #2
 8000e84:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e86:	2302      	movs	r3, #2
 8000e88:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLM = 1;
 8000e8a:	2301      	movs	r3, #1
 8000e8c:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLN = 120;
 8000e8e:	2378      	movs	r3, #120	; 0x78
 8000e90:	657b      	str	r3, [r7, #84]	; 0x54
	RCC_OscInitStruct.PLL.PLLP = 2;
 8000e92:	2302      	movs	r3, #2
 8000e94:	65bb      	str	r3, [r7, #88]	; 0x58
	RCC_OscInitStruct.PLL.PLLQ = 2;
 8000e96:	2302      	movs	r3, #2
 8000e98:	65fb      	str	r3, [r7, #92]	; 0x5c
	RCC_OscInitStruct.PLL.PLLR = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	663b      	str	r3, [r7, #96]	; 0x60
	RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000e9e:	230c      	movs	r3, #12
 8000ea0:	667b      	str	r3, [r7, #100]	; 0x64
	RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	66bb      	str	r3, [r7, #104]	; 0x68
	RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f004 fb82 	bl	80055b8 <HAL_RCC_OscConfig>
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d001      	beq.n	8000ebe <SystemClock_Config+0xbe>
	{
		Error_Handler();
 8000eba:	f000 fad3 	bl	8001464 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ebe:	233f      	movs	r3, #63	; 0x3f
 8000ec0:	607b      	str	r3, [r7, #4]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
			|RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ec2:	2303      	movs	r3, #3
 8000ec4:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000eca:	2308      	movs	r3, #8
 8000ecc:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000ece:	2340      	movs	r3, #64	; 0x40
 8000ed0:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000ed2:	2340      	movs	r3, #64	; 0x40
 8000ed4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000ed6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000eda:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000edc:	2340      	movs	r3, #64	; 0x40
 8000ede:	623b      	str	r3, [r7, #32]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ee0:	1d3b      	adds	r3, r7, #4
 8000ee2:	2104      	movs	r1, #4
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f004 ff95 	bl	8005e14 <HAL_RCC_ClockConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <SystemClock_Config+0xf4>
	{
		Error_Handler();
 8000ef0:	f000 fab8 	bl	8001464 <Error_Handler>
	}
}
 8000ef4:	bf00      	nop
 8000ef6:	3770      	adds	r7, #112	; 0x70
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	58024800 	.word	0x58024800
 8000f00:	58000400 	.word	0x58000400
 8000f04:	58024400 	.word	0x58024400

08000f08 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b0b0      	sub	sp, #192	; 0xc0
 8000f0c:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f0e:	1d3b      	adds	r3, r7, #4
 8000f10:	22bc      	movs	r2, #188	; 0xbc
 8000f12:	2100      	movs	r1, #0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f009 fa75 	bl	800a404 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8000f1a:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000f1e:	607b      	str	r3, [r7, #4]
			|RCC_PERIPHCLK_SPI1;
	PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000f20:	2301      	movs	r3, #1
 8000f22:	62bb      	str	r3, [r7, #40]	; 0x28
	PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000f24:	2318      	movs	r3, #24
 8000f26:	62fb      	str	r3, [r7, #44]	; 0x2c
	PeriphClkInitStruct.PLL3.PLL3P = 2;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
	PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000f2c:	2304      	movs	r3, #4
 8000f2e:	637b      	str	r3, [r7, #52]	; 0x34
	PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
	PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000f34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000f38:	63fb      	str	r3, [r7, #60]	; 0x3c
	PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	643b      	str	r3, [r7, #64]	; 0x40
	PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
	PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000f42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f46:	663b      	str	r3, [r7, #96]	; 0x60
	PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8000f48:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000f4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f50:	1d3b      	adds	r3, r7, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f005 faea 	bl	800652c <HAL_RCCEx_PeriphCLKConfig>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <PeriphCommonClock_Config+0x5a>
	{
		Error_Handler();
 8000f5e:	f000 fa81 	bl	8001464 <Error_Handler>
	}
}
 8000f62:	bf00      	nop
 8000f64:	37c0      	adds	r7, #192	; 0xc0
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <MX_ETH_Init>:
 * @brief ETH Initialization Function
 * @param None
 * @retval None
 */
static void MX_ETH_Init(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
	static uint8_t MACAddr[6];

	/* USER CODE BEGIN ETH_Init 1 */

	/* USER CODE END ETH_Init 1 */
	heth.Instance = ETH;
 8000f70:	4b1e      	ldr	r3, [pc, #120]	; (8000fec <MX_ETH_Init+0x80>)
 8000f72:	4a1f      	ldr	r2, [pc, #124]	; (8000ff0 <MX_ETH_Init+0x84>)
 8000f74:	601a      	str	r2, [r3, #0]
	MACAddr[0] = 0x00;
 8000f76:	4b1f      	ldr	r3, [pc, #124]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	MACAddr[1] = 0x80;
 8000f7c:	4b1d      	ldr	r3, [pc, #116]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f7e:	2280      	movs	r2, #128	; 0x80
 8000f80:	705a      	strb	r2, [r3, #1]
	MACAddr[2] = 0xE1;
 8000f82:	4b1c      	ldr	r3, [pc, #112]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f84:	22e1      	movs	r2, #225	; 0xe1
 8000f86:	709a      	strb	r2, [r3, #2]
	MACAddr[3] = 0x00;
 8000f88:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	70da      	strb	r2, [r3, #3]
	MACAddr[4] = 0x00;
 8000f8e:	4b19      	ldr	r3, [pc, #100]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	711a      	strb	r2, [r3, #4]
	MACAddr[5] = 0x00;
 8000f94:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	715a      	strb	r2, [r3, #5]
	heth.Init.MACAddr = &MACAddr[0];
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <MX_ETH_Init+0x80>)
 8000f9c:	4a15      	ldr	r2, [pc, #84]	; (8000ff4 <MX_ETH_Init+0x88>)
 8000f9e:	605a      	str	r2, [r3, #4]
	heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000fa0:	4b12      	ldr	r3, [pc, #72]	; (8000fec <MX_ETH_Init+0x80>)
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	721a      	strb	r2, [r3, #8]
	heth.Init.TxDesc = DMATxDscrTab;
 8000fa6:	4b11      	ldr	r3, [pc, #68]	; (8000fec <MX_ETH_Init+0x80>)
 8000fa8:	4a13      	ldr	r2, [pc, #76]	; (8000ff8 <MX_ETH_Init+0x8c>)
 8000faa:	60da      	str	r2, [r3, #12]
	heth.Init.RxDesc = DMARxDscrTab;
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <MX_ETH_Init+0x80>)
 8000fae:	4a13      	ldr	r2, [pc, #76]	; (8000ffc <MX_ETH_Init+0x90>)
 8000fb0:	611a      	str	r2, [r3, #16]
	heth.Init.RxBuffLen = 1524;
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	; (8000fec <MX_ETH_Init+0x80>)
 8000fb4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000fb8:	615a      	str	r2, [r3, #20]

	/* USER CODE BEGIN MACADDRESS */

	/* USER CODE END MACADDRESS */

	if (HAL_ETH_Init(&heth) != HAL_OK)
 8000fba:	480c      	ldr	r0, [pc, #48]	; (8000fec <MX_ETH_Init+0x80>)
 8000fbc:	f003 fafc 	bl	80045b8 <HAL_ETH_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ETH_Init+0x5e>
	{
		Error_Handler();
 8000fc6:	f000 fa4d 	bl	8001464 <Error_Handler>
	}

	memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000fca:	2238      	movs	r2, #56	; 0x38
 8000fcc:	2100      	movs	r1, #0
 8000fce:	480c      	ldr	r0, [pc, #48]	; (8001000 <MX_ETH_Init+0x94>)
 8000fd0:	f009 fa18 	bl	800a404 <memset>
	TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000fd4:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <MX_ETH_Init+0x94>)
 8000fd6:	2221      	movs	r2, #33	; 0x21
 8000fd8:	601a      	str	r2, [r3, #0]
	TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000fda:	4b09      	ldr	r3, [pc, #36]	; (8001000 <MX_ETH_Init+0x94>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	615a      	str	r2, [r3, #20]
	TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000fe2:	4b07      	ldr	r3, [pc, #28]	; (8001000 <MX_ETH_Init+0x94>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN ETH_Init 2 */

	/* USER CODE END ETH_Init 2 */

}
 8000fe8:	bf00      	nop
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	24000124 	.word	0x24000124
 8000ff0:	40028000 	.word	0x40028000
 8000ff4:	24000c20 	.word	0x24000c20
 8000ff8:	24000070 	.word	0x24000070
 8000ffc:	24000010 	.word	0x24000010
 8001000:	240000ec 	.word	0x240000ec

08001004 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <MX_SPI3_Init+0xa8>)
 800100a:	4a29      	ldr	r2, [pc, #164]	; (80010b0 <MX_SPI3_Init+0xac>)
 800100c:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 800100e:	4b27      	ldr	r3, [pc, #156]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001010:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001014:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001016:	4b25      	ldr	r3, [pc, #148]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001018:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800101c:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800101e:	4b23      	ldr	r3, [pc, #140]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001020:	2207      	movs	r2, #7
 8001022:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001024:	4b21      	ldr	r3, [pc, #132]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001026:	2200      	movs	r2, #0
 8001028:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800102a:	4b20      	ldr	r3, [pc, #128]	; (80010ac <MX_SPI3_Init+0xa8>)
 800102c:	2200      	movs	r2, #0
 800102e:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8001030:	4b1e      	ldr	r3, [pc, #120]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001032:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001036:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001038:	4b1c      	ldr	r3, [pc, #112]	; (80010ac <MX_SPI3_Init+0xa8>)
 800103a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800103e:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001040:	4b1a      	ldr	r3, [pc, #104]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001042:	2200      	movs	r2, #0
 8001044:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001046:	4b19      	ldr	r3, [pc, #100]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001048:	2200      	movs	r2, #0
 800104a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800104c:	4b17      	ldr	r3, [pc, #92]	; (80010ac <MX_SPI3_Init+0xa8>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
	hspi3.Init.CRCPolynomial = 0x0;
 8001052:	4b16      	ldr	r3, [pc, #88]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001058:	4b14      	ldr	r3, [pc, #80]	; (80010ac <MX_SPI3_Init+0xa8>)
 800105a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800105e:	635a      	str	r2, [r3, #52]	; 0x34
	hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001062:	2200      	movs	r2, #0
 8001064:	639a      	str	r2, [r3, #56]	; 0x38
	hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001066:	4b11      	ldr	r3, [pc, #68]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001068:	2200      	movs	r2, #0
 800106a:	63da      	str	r2, [r3, #60]	; 0x3c
	hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 800106c:	4b0f      	ldr	r3, [pc, #60]	; (80010ac <MX_SPI3_Init+0xa8>)
 800106e:	2200      	movs	r2, #0
 8001070:	641a      	str	r2, [r3, #64]	; 0x40
	hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001072:	4b0e      	ldr	r3, [pc, #56]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001074:	2200      	movs	r2, #0
 8001076:	645a      	str	r2, [r3, #68]	; 0x44
	hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001078:	4b0c      	ldr	r3, [pc, #48]	; (80010ac <MX_SPI3_Init+0xa8>)
 800107a:	2200      	movs	r2, #0
 800107c:	649a      	str	r2, [r3, #72]	; 0x48
	hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 800107e:	4b0b      	ldr	r3, [pc, #44]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001080:	2200      	movs	r2, #0
 8001082:	64da      	str	r2, [r3, #76]	; 0x4c
	hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001084:	4b09      	ldr	r3, [pc, #36]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001086:	2200      	movs	r2, #0
 8001088:	651a      	str	r2, [r3, #80]	; 0x50
	hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 800108a:	4b08      	ldr	r3, [pc, #32]	; (80010ac <MX_SPI3_Init+0xa8>)
 800108c:	2200      	movs	r2, #0
 800108e:	655a      	str	r2, [r3, #84]	; 0x54
	hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001092:	2200      	movs	r2, #0
 8001094:	659a      	str	r2, [r3, #88]	; 0x58
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001096:	4805      	ldr	r0, [pc, #20]	; (80010ac <MX_SPI3_Init+0xa8>)
 8001098:	f006 fdb0 	bl	8007bfc <HAL_SPI_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_SPI3_Init+0xa2>
	{
		Error_Handler();
 80010a2:	f000 f9df 	bl	8001464 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80010a6:	bf00      	nop
 80010a8:	bd80      	pop	{r7, pc}
 80010aa:	bf00      	nop
 80010ac:	240001d4 	.word	0x240001d4
 80010b0:	40003c00 	.word	0x40003c00

080010b4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010ba:	4a23      	ldr	r2, [pc, #140]	; (8001148 <MX_USART3_UART_Init+0x94>)
 80010bc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 384000;
 80010be:	4b21      	ldr	r3, [pc, #132]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010c0:	4a22      	ldr	r2, [pc, #136]	; (800114c <MX_USART3_UART_Init+0x98>)
 80010c2:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010c4:	4b1f      	ldr	r3, [pc, #124]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80010d0:	4b1c      	ldr	r3, [pc, #112]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80010d6:	4b1b      	ldr	r3, [pc, #108]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010d8:	220c      	movs	r2, #12
 80010da:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010dc:	4b19      	ldr	r3, [pc, #100]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010e2:	4b18      	ldr	r3, [pc, #96]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010e8:	4b16      	ldr	r3, [pc, #88]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	621a      	str	r2, [r3, #32]
	huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010ee:	4b15      	ldr	r3, [pc, #84]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	625a      	str	r2, [r3, #36]	; 0x24
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	629a      	str	r2, [r3, #40]	; 0x28
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80010fa:	4812      	ldr	r0, [pc, #72]	; (8001144 <MX_USART3_UART_Init+0x90>)
 80010fc:	f007 f95f 	bl	80083be <HAL_UART_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART3_UART_Init+0x56>
	{
		Error_Handler();
 8001106:	f000 f9ad 	bl	8001464 <Error_Handler>
	}
	if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	480d      	ldr	r0, [pc, #52]	; (8001144 <MX_USART3_UART_Init+0x90>)
 800110e:	f008 fd81 	bl	8009c14 <HAL_UARTEx_SetTxFifoThreshold>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART3_UART_Init+0x68>
	{
		Error_Handler();
 8001118:	f000 f9a4 	bl	8001464 <Error_Handler>
	}
	if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800111c:	2100      	movs	r1, #0
 800111e:	4809      	ldr	r0, [pc, #36]	; (8001144 <MX_USART3_UART_Init+0x90>)
 8001120:	f008 fdb6 	bl	8009c90 <HAL_UARTEx_SetRxFifoThreshold>
 8001124:	4603      	mov	r3, r0
 8001126:	2b00      	cmp	r3, #0
 8001128:	d001      	beq.n	800112e <MX_USART3_UART_Init+0x7a>
	{
		Error_Handler();
 800112a:	f000 f99b 	bl	8001464 <Error_Handler>
	}
	if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 800112e:	4805      	ldr	r0, [pc, #20]	; (8001144 <MX_USART3_UART_Init+0x90>)
 8001130:	f008 fd37 	bl	8009ba2 <HAL_UARTEx_DisableFifoMode>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_USART3_UART_Init+0x8a>
	{
		Error_Handler();
 800113a:	f000 f993 	bl	8001464 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2400025c 	.word	0x2400025c
 8001148:	40004800 	.word	0x40004800
 800114c:	0005dc00 	.word	0x0005dc00

08001150 <MX_USB_OTG_FS_PCD_Init>:
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
	/* USER CODE END USB_OTG_FS_Init 0 */

	/* USER CODE BEGIN USB_OTG_FS_Init 1 */

	/* USER CODE END USB_OTG_FS_Init 1 */
	hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001154:	4b15      	ldr	r3, [pc, #84]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001156:	4a16      	ldr	r2, [pc, #88]	; (80011b0 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001158:	601a      	str	r2, [r3, #0]
	hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800115a:	4b14      	ldr	r3, [pc, #80]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800115c:	2209      	movs	r2, #9
 800115e:	605a      	str	r2, [r3, #4]
	hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001162:	2202      	movs	r2, #2
 8001164:	60da      	str	r2, [r3, #12]
	hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001166:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001168:	2200      	movs	r2, #0
 800116a:	611a      	str	r2, [r3, #16]
	hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800116c:	4b0f      	ldr	r3, [pc, #60]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800116e:	2202      	movs	r2, #2
 8001170:	619a      	str	r2, [r3, #24]
	hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001174:	2200      	movs	r2, #0
 8001176:	61da      	str	r2, [r3, #28]
	hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
	hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	; 0x24
	hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001186:	2201      	movs	r2, #1
 8001188:	629a      	str	r2, [r3, #40]	; 0x28
	hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800118c:	2201      	movs	r2, #1
 800118e:	62da      	str	r2, [r3, #44]	; 0x2c
	hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001192:	2200      	movs	r2, #0
 8001194:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001198:	f004 f85c 	bl	8005254 <HAL_PCD_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USB_OTG_FS_PCD_Init+0x56>
	{
		Error_Handler();
 80011a2:	f000 f95f 	bl	8001464 <Error_Handler>
	}
	/* USER CODE BEGIN USB_OTG_FS_Init 2 */

	/* USER CODE END USB_OTG_FS_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	240003dc 	.word	0x240003dc
 80011b0:	40080000 	.word	0x40080000

080011b4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 80011ba:	4b11      	ldr	r3, [pc, #68]	; (8001200 <MX_DMA_Init+0x4c>)
 80011bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011c0:	4a0f      	ldr	r2, [pc, #60]	; (8001200 <MX_DMA_Init+0x4c>)
 80011c2:	f043 0301 	orr.w	r3, r3, #1
 80011c6:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80011ca:	4b0d      	ldr	r3, [pc, #52]	; (8001200 <MX_DMA_Init+0x4c>)
 80011cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80011d0:	f003 0301 	and.w	r3, r3, #1
 80011d4:	607b      	str	r3, [r7, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80011d8:	2200      	movs	r2, #0
 80011da:	2100      	movs	r1, #0
 80011dc:	200c      	movs	r0, #12
 80011de:	f000 ff90 	bl	8002102 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80011e2:	200c      	movs	r0, #12
 80011e4:	f000 ffa7 	bl	8002136 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011e8:	2200      	movs	r2, #0
 80011ea:	2100      	movs	r1, #0
 80011ec:	200f      	movs	r0, #15
 80011ee:	f000 ff88 	bl	8002102 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 ff9f 	bl	8002136 <HAL_NVIC_EnableIRQ>

}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	58024400 	.word	0x58024400

08001204 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b08e      	sub	sp, #56	; 0x38
 8001208:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800120a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
 8001212:	605a      	str	r2, [r3, #4]
 8001214:	609a      	str	r2, [r3, #8]
 8001216:	60da      	str	r2, [r3, #12]
 8001218:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800121a:	4b8a      	ldr	r3, [pc, #552]	; (8001444 <MX_GPIO_Init+0x240>)
 800121c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001220:	4a88      	ldr	r2, [pc, #544]	; (8001444 <MX_GPIO_Init+0x240>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800122a:	4b86      	ldr	r3, [pc, #536]	; (8001444 <MX_GPIO_Init+0x240>)
 800122c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	623b      	str	r3, [r7, #32]
 8001236:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001238:	4b82      	ldr	r3, [pc, #520]	; (8001444 <MX_GPIO_Init+0x240>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800123e:	4a81      	ldr	r2, [pc, #516]	; (8001444 <MX_GPIO_Init+0x240>)
 8001240:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001244:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001248:	4b7e      	ldr	r3, [pc, #504]	; (8001444 <MX_GPIO_Init+0x240>)
 800124a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800124e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001252:	61fb      	str	r3, [r7, #28]
 8001254:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001256:	4b7b      	ldr	r3, [pc, #492]	; (8001444 <MX_GPIO_Init+0x240>)
 8001258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800125c:	4a79      	ldr	r2, [pc, #484]	; (8001444 <MX_GPIO_Init+0x240>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001266:	4b77      	ldr	r3, [pc, #476]	; (8001444 <MX_GPIO_Init+0x240>)
 8001268:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	61bb      	str	r3, [r7, #24]
 8001272:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001274:	4b73      	ldr	r3, [pc, #460]	; (8001444 <MX_GPIO_Init+0x240>)
 8001276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800127a:	4a72      	ldr	r2, [pc, #456]	; (8001444 <MX_GPIO_Init+0x240>)
 800127c:	f043 0302 	orr.w	r3, r3, #2
 8001280:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001284:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <MX_GPIO_Init+0x240>)
 8001286:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800128a:	f003 0302 	and.w	r3, r3, #2
 800128e:	617b      	str	r3, [r7, #20]
 8001290:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <MX_GPIO_Init+0x240>)
 8001294:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001298:	4a6a      	ldr	r2, [pc, #424]	; (8001444 <MX_GPIO_Init+0x240>)
 800129a:	f043 0320 	orr.w	r3, r3, #32
 800129e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012a2:	4b68      	ldr	r3, [pc, #416]	; (8001444 <MX_GPIO_Init+0x240>)
 80012a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012a8:	f003 0320 	and.w	r3, r3, #32
 80012ac:	613b      	str	r3, [r7, #16]
 80012ae:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80012b0:	4b64      	ldr	r3, [pc, #400]	; (8001444 <MX_GPIO_Init+0x240>)
 80012b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012b6:	4a63      	ldr	r2, [pc, #396]	; (8001444 <MX_GPIO_Init+0x240>)
 80012b8:	f043 0310 	orr.w	r3, r3, #16
 80012bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012c0:	4b60      	ldr	r3, [pc, #384]	; (8001444 <MX_GPIO_Init+0x240>)
 80012c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012c6:	f003 0310 	and.w	r3, r3, #16
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	4b5d      	ldr	r3, [pc, #372]	; (8001444 <MX_GPIO_Init+0x240>)
 80012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012d4:	4a5b      	ldr	r2, [pc, #364]	; (8001444 <MX_GPIO_Init+0x240>)
 80012d6:	f043 0308 	orr.w	r3, r3, #8
 80012da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012de:	4b59      	ldr	r3, [pc, #356]	; (8001444 <MX_GPIO_Init+0x240>)
 80012e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80012ec:	4b55      	ldr	r3, [pc, #340]	; (8001444 <MX_GPIO_Init+0x240>)
 80012ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80012f2:	4a54      	ldr	r2, [pc, #336]	; (8001444 <MX_GPIO_Init+0x240>)
 80012f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012f8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80012fc:	4b51      	ldr	r3, [pc, #324]	; (8001444 <MX_GPIO_Init+0x240>)
 80012fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 800130a:	2201      	movs	r2, #1
 800130c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8001310:	484d      	ldr	r0, [pc, #308]	; (8001448 <MX_GPIO_Init+0x244>)
 8001312:	f003 ff3d 	bl	8005190 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8001316:	2200      	movs	r2, #0
 8001318:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800131c:	484a      	ldr	r0, [pc, #296]	; (8001448 <MX_GPIO_Init+0x244>)
 800131e:	f003 ff37 	bl	8005190 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001328:	4848      	ldr	r0, [pc, #288]	; (800144c <MX_GPIO_Init+0x248>)
 800132a:	f003 ff31 	bl	8005190 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001334:	4846      	ldr	r0, [pc, #280]	; (8001450 <MX_GPIO_Init+0x24c>)
 8001336:	f003 ff2b 	bl	8005190 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800133a:	2201      	movs	r2, #1
 800133c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001340:	4844      	ldr	r0, [pc, #272]	; (8001454 <MX_GPIO_Init+0x250>)
 8001342:	f003 ff25 	bl	8005190 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : TURN_BUTTON_Pin YES1_Pin */
	GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES1_Pin;
 8001346:	2309      	movs	r3, #9
 8001348:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800134a:	2300      	movs	r3, #0
 800134c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001352:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001356:	4619      	mov	r1, r3
 8001358:	483f      	ldr	r0, [pc, #252]	; (8001458 <MX_GPIO_Init+0x254>)
 800135a:	f003 fd51 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : START_BUTTON_Pin */
	GPIO_InitStruct.Pin = START_BUTTON_Pin;
 800135e:	2308      	movs	r3, #8
 8001360:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001362:	2300      	movs	r3, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001366:	2300      	movs	r3, #0
 8001368:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 800136a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136e:	4619      	mov	r1, r3
 8001370:	483a      	ldr	r0, [pc, #232]	; (800145c <MX_GPIO_Init+0x258>)
 8001372:	f003 fd45 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : NO1_Pin */
	GPIO_InitStruct.Pin = NO1_Pin;
 8001376:	2302      	movs	r3, #2
 8001378:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800137a:	2300      	movs	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 8001382:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001386:	4619      	mov	r1, r3
 8001388:	4830      	ldr	r0, [pc, #192]	; (800144c <MX_GPIO_Init+0x248>)
 800138a:	f003 fd39 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : NO2_Pin */
	GPIO_InitStruct.Pin = NO2_Pin;
 800138e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001394:	2300      	movs	r3, #0
 8001396:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	482f      	ldr	r0, [pc, #188]	; (8001460 <MX_GPIO_Init+0x25c>)
 80013a4:	f003 fd2c 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 80013a8:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ae:	2301      	movs	r3, #1
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4821      	ldr	r0, [pc, #132]	; (8001448 <MX_GPIO_Init+0x244>)
 80013c2:	f003 fd1d 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD3_Pin */
	GPIO_InitStruct.Pin = LD3_Pin;
 80013c6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80013ca:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013cc:	2301      	movs	r3, #1
 80013ce:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013dc:	4619      	mov	r1, r3
 80013de:	481b      	ldr	r0, [pc, #108]	; (800144c <MX_GPIO_Init+0x248>)
 80013e0:	f003 fd0e 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 80013e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013e8:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80013f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fa:	4619      	mov	r1, r3
 80013fc:	4814      	ldr	r0, [pc, #80]	; (8001450 <MX_GPIO_Init+0x24c>)
 80013fe:	f003 fcff 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
	GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001402:	2380      	movs	r3, #128	; 0x80
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001406:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <MX_GPIO_Init+0x250>)
 8001418:	f003 fcf2 	bl	8004e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_DC_Pin */
	GPIO_InitStruct.Pin = LCD_DC_Pin;
 800141c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4807      	ldr	r0, [pc, #28]	; (8001454 <MX_GPIO_Init+0x250>)
 8001436:	f003 fce3 	bl	8004e00 <HAL_GPIO_Init>

}
 800143a:	bf00      	nop
 800143c:	3738      	adds	r7, #56	; 0x38
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
 8001442:	bf00      	nop
 8001444:	58024400 	.word	0x58024400
 8001448:	58021000 	.word	0x58021000
 800144c:	58020400 	.word	0x58020400
 8001450:	58020c00 	.word	0x58020c00
 8001454:	58021800 	.word	0x58021800
 8001458:	58020800 	.word	0x58020800
 800145c:	58020000 	.word	0x58020000
 8001460:	58021400 	.word	0x58021400

08001464 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001468:	b672      	cpsid	i
}
 800146a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800146c:	e7fe      	b.n	800146c <Error_Handler+0x8>
	...

08001470 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 8001474:	2200      	movs	r2, #0
 8001476:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800147a:	4802      	ldr	r0, [pc, #8]	; (8001484 <ST7735_Select+0x14>)
 800147c:	f003 fe88 	bl	8005190 <HAL_GPIO_WritePin>
}
 8001480:	bf00      	nop
 8001482:	bd80      	pop	{r7, pc}
 8001484:	58021000 	.word	0x58021000

08001488 <ST7735_Unselect>:

void ST7735_Unselect() {
 8001488:	b580      	push	{r7, lr}
 800148a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 800148c:	2201      	movs	r2, #1
 800148e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001492:	4802      	ldr	r0, [pc, #8]	; (800149c <ST7735_Unselect+0x14>)
 8001494:	f003 fe7c 	bl	8005190 <HAL_GPIO_WritePin>
}
 8001498:	bf00      	nop
 800149a:	bd80      	pop	{r7, pc}
 800149c:	58021000 	.word	0x58021000

080014a0 <ST7735_Select1>:
static void ST7735_Select1() {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014aa:	4802      	ldr	r0, [pc, #8]	; (80014b4 <ST7735_Select1+0x14>)
 80014ac:	f003 fe70 	bl	8005190 <HAL_GPIO_WritePin>
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	58021000 	.word	0x58021000

080014b8 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 80014bc:	2201      	movs	r2, #1
 80014be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80014c2:	4802      	ldr	r0, [pc, #8]	; (80014cc <ST7735_Unselect1+0x14>)
 80014c4:	f003 fe64 	bl	8005190 <HAL_GPIO_WritePin>
}
 80014c8:	bf00      	nop
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	58021000 	.word	0x58021000

080014d0 <ST7735_Reset>:

static void ST7735_Reset() {
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 80014d4:	2200      	movs	r2, #0
 80014d6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014da:	4807      	ldr	r0, [pc, #28]	; (80014f8 <ST7735_Reset+0x28>)
 80014dc:	f003 fe58 	bl	8005190 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80014e0:	2005      	movs	r0, #5
 80014e2:	f000 fcef 	bl	8001ec4 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 80014e6:	2201      	movs	r2, #1
 80014e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014ec:	4802      	ldr	r0, [pc, #8]	; (80014f8 <ST7735_Reset+0x28>)
 80014ee:	f003 fe4f 	bl	8005190 <HAL_GPIO_WritePin>
}
 80014f2:	bf00      	nop
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	58021000 	.word	0x58021000

080014fc <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b082      	sub	sp, #8
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8001506:	2200      	movs	r2, #0
 8001508:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800150c:	4806      	ldr	r0, [pc, #24]	; (8001528 <ST7735_WriteCommand+0x2c>)
 800150e:	f003 fe3f 	bl	8005190 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8001512:	1df9      	adds	r1, r7, #7
 8001514:	f04f 33ff 	mov.w	r3, #4294967295
 8001518:	2201      	movs	r2, #1
 800151a:	4804      	ldr	r0, [pc, #16]	; (800152c <ST7735_WriteCommand+0x30>)
 800151c:	f006 fc74 	bl	8007e08 <HAL_SPI_Transmit>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	58021800 	.word	0x58021800
 800152c:	240001d4 	.word	0x240001d4

08001530 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800153a:	2201      	movs	r2, #1
 800153c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001540:	4807      	ldr	r0, [pc, #28]	; (8001560 <ST7735_WriteData+0x30>)
 8001542:	f003 fe25 	bl	8005190 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	b29a      	uxth	r2, r3
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	6879      	ldr	r1, [r7, #4]
 8001550:	4804      	ldr	r0, [pc, #16]	; (8001564 <ST7735_WriteData+0x34>)
 8001552:	f006 fc59 	bl	8007e08 <HAL_SPI_Transmit>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	58021800 	.word	0x58021800
 8001564:	240001d4 	.word	0x240001d4

08001568 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	1c5a      	adds	r2, r3, #1
 8001574:	607a      	str	r2, [r7, #4]
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 800157a:	e034      	b.n	80015e6 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	1c5a      	adds	r2, r3, #1
 8001580:	607a      	str	r2, [r7, #4]
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 8001586:	7afb      	ldrb	r3, [r7, #11]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ffb7 	bl	80014fc <ST7735_WriteCommand>

        numArgs = *addr++;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	1c5a      	adds	r2, r3, #1
 8001592:	607a      	str	r2, [r7, #4]
 8001594:	781b      	ldrb	r3, [r3, #0]
 8001596:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 8001598:	7abb      	ldrb	r3, [r7, #10]
 800159a:	b29b      	uxth	r3, r3
 800159c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015a0:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 80015a2:	7abb      	ldrb	r3, [r7, #10]
 80015a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80015a8:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 80015aa:	7abb      	ldrb	r3, [r7, #10]
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d008      	beq.n	80015c2 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 80015b0:	7abb      	ldrb	r3, [r7, #10]
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f7ff ffbb 	bl	8001530 <ST7735_WriteData>
            addr += numArgs;
 80015ba:	7abb      	ldrb	r3, [r7, #10]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	4413      	add	r3, r2
 80015c0:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 80015c2:	89bb      	ldrh	r3, [r7, #12]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d00e      	beq.n	80015e6 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	1c5a      	adds	r2, r3, #1
 80015cc:	607a      	str	r2, [r7, #4]
 80015ce:	781b      	ldrb	r3, [r3, #0]
 80015d0:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 80015d2:	89bb      	ldrh	r3, [r7, #12]
 80015d4:	2bff      	cmp	r3, #255	; 0xff
 80015d6:	d102      	bne.n	80015de <ST7735_ExecuteCommandList+0x76>
 80015d8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80015dc:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 80015de:	89bb      	ldrh	r3, [r7, #12]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fc6f 	bl	8001ec4 <HAL_Delay>
    while(numCommands--) {
 80015e6:	7bfb      	ldrb	r3, [r7, #15]
 80015e8:	1e5a      	subs	r2, r3, #1
 80015ea:	73fa      	strb	r2, [r7, #15]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d1c5      	bne.n	800157c <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 80015f0:	bf00      	nop
 80015f2:	bf00      	nop
 80015f4:	3710      	adds	r7, #16
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}

080015fa <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 80015fa:	b590      	push	{r4, r7, lr}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	4604      	mov	r4, r0
 8001602:	4608      	mov	r0, r1
 8001604:	4611      	mov	r1, r2
 8001606:	461a      	mov	r2, r3
 8001608:	4623      	mov	r3, r4
 800160a:	71fb      	strb	r3, [r7, #7]
 800160c:	4603      	mov	r3, r0
 800160e:	71bb      	strb	r3, [r7, #6]
 8001610:	460b      	mov	r3, r1
 8001612:	717b      	strb	r3, [r7, #5]
 8001614:	4613      	mov	r3, r2
 8001616:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8001618:	202a      	movs	r0, #42	; 0x2a
 800161a:	f7ff ff6f 	bl	80014fc <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800161e:	2300      	movs	r3, #0
 8001620:	733b      	strb	r3, [r7, #12]
 8001622:	79fb      	ldrb	r3, [r7, #7]
 8001624:	3302      	adds	r3, #2
 8001626:	b2db      	uxtb	r3, r3
 8001628:	737b      	strb	r3, [r7, #13]
 800162a:	2300      	movs	r3, #0
 800162c:	73bb      	strb	r3, [r7, #14]
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	3302      	adds	r3, #2
 8001632:	b2db      	uxtb	r3, r3
 8001634:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2104      	movs	r1, #4
 800163c:	4618      	mov	r0, r3
 800163e:	f7ff ff77 	bl	8001530 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 8001642:	202b      	movs	r0, #43	; 0x2b
 8001644:	f7ff ff5a 	bl	80014fc <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 8001648:	79bb      	ldrb	r3, [r7, #6]
 800164a:	3301      	adds	r3, #1
 800164c:	b2db      	uxtb	r3, r3
 800164e:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 8001650:	793b      	ldrb	r3, [r7, #4]
 8001652:	3301      	adds	r3, #1
 8001654:	b2db      	uxtb	r3, r3
 8001656:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2104      	movs	r1, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff ff66 	bl	8001530 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 8001664:	202c      	movs	r0, #44	; 0x2c
 8001666:	f7ff ff49 	bl	80014fc <ST7735_WriteCommand>
}
 800166a:	bf00      	nop
 800166c:	3714      	adds	r7, #20
 800166e:	46bd      	mov	sp, r7
 8001670:	bd90      	pop	{r4, r7, pc}
	...

08001674 <ST7735_Init>:

void ST7735_Init() {
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
    ST7735_Select();
 8001678:	f7ff fefa 	bl	8001470 <ST7735_Select>
    ST7735_Select1();
 800167c:	f7ff ff10 	bl	80014a0 <ST7735_Select1>
    ST7735_Reset();
 8001680:	f7ff ff26 	bl	80014d0 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 8001684:	4807      	ldr	r0, [pc, #28]	; (80016a4 <ST7735_Init+0x30>)
 8001686:	f7ff ff6f 	bl	8001568 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 800168a:	4807      	ldr	r0, [pc, #28]	; (80016a8 <ST7735_Init+0x34>)
 800168c:	f7ff ff6c 	bl	8001568 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 8001690:	4806      	ldr	r0, [pc, #24]	; (80016ac <ST7735_Init+0x38>)
 8001692:	f7ff ff69 	bl	8001568 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 8001696:	f7ff fef7 	bl	8001488 <ST7735_Unselect>
    ST7735_Unselect1();
 800169a:	f7ff ff0d 	bl	80014b8 <ST7735_Unselect1>
}
 800169e:	bf00      	nop
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	0800a43c 	.word	0x0800a43c
 80016a8:	0800a478 	.word	0x0800a478
 80016ac:	0800a488 	.word	0x0800a488

080016b0 <ST7735_FillRectangle>:
    }

    ST7735_Unselect1();
}

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	4604      	mov	r4, r0
 80016b8:	4608      	mov	r0, r1
 80016ba:	4611      	mov	r1, r2
 80016bc:	461a      	mov	r2, r3
 80016be:	4623      	mov	r3, r4
 80016c0:	80fb      	strh	r3, [r7, #6]
 80016c2:	4603      	mov	r3, r0
 80016c4:	80bb      	strh	r3, [r7, #4]
 80016c6:	460b      	mov	r3, r1
 80016c8:	807b      	strh	r3, [r7, #2]
 80016ca:	4613      	mov	r3, r2
 80016cc:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80016ce:	88fb      	ldrh	r3, [r7, #6]
 80016d0:	2b7f      	cmp	r3, #127	; 0x7f
 80016d2:	d858      	bhi.n	8001786 <ST7735_FillRectangle+0xd6>
 80016d4:	88bb      	ldrh	r3, [r7, #4]
 80016d6:	2b7f      	cmp	r3, #127	; 0x7f
 80016d8:	d855      	bhi.n	8001786 <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80016da:	88fa      	ldrh	r2, [r7, #6]
 80016dc:	887b      	ldrh	r3, [r7, #2]
 80016de:	4413      	add	r3, r2
 80016e0:	2b80      	cmp	r3, #128	; 0x80
 80016e2:	dd03      	ble.n	80016ec <ST7735_FillRectangle+0x3c>
 80016e4:	88fb      	ldrh	r3, [r7, #6]
 80016e6:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80016ea:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 80016ec:	88ba      	ldrh	r2, [r7, #4]
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	4413      	add	r3, r2
 80016f2:	2b80      	cmp	r3, #128	; 0x80
 80016f4:	dd03      	ble.n	80016fe <ST7735_FillRectangle+0x4e>
 80016f6:	88bb      	ldrh	r3, [r7, #4]
 80016f8:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80016fc:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 80016fe:	f7ff feb7 	bl	8001470 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8001702:	88fb      	ldrh	r3, [r7, #6]
 8001704:	b2d8      	uxtb	r0, r3
 8001706:	88bb      	ldrh	r3, [r7, #4]
 8001708:	b2d9      	uxtb	r1, r3
 800170a:	88fb      	ldrh	r3, [r7, #6]
 800170c:	b2da      	uxtb	r2, r3
 800170e:	887b      	ldrh	r3, [r7, #2]
 8001710:	b2db      	uxtb	r3, r3
 8001712:	4413      	add	r3, r2
 8001714:	b2db      	uxtb	r3, r3
 8001716:	3b01      	subs	r3, #1
 8001718:	b2dc      	uxtb	r4, r3
 800171a:	88bb      	ldrh	r3, [r7, #4]
 800171c:	b2da      	uxtb	r2, r3
 800171e:	883b      	ldrh	r3, [r7, #0]
 8001720:	b2db      	uxtb	r3, r3
 8001722:	4413      	add	r3, r2
 8001724:	b2db      	uxtb	r3, r3
 8001726:	3b01      	subs	r3, #1
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4622      	mov	r2, r4
 800172c:	f7ff ff65 	bl	80015fa <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8001730:	8c3b      	ldrh	r3, [r7, #32]
 8001732:	0a1b      	lsrs	r3, r3, #8
 8001734:	b29b      	uxth	r3, r3
 8001736:	b2db      	uxtb	r3, r3
 8001738:	733b      	strb	r3, [r7, #12]
 800173a:	8c3b      	ldrh	r3, [r7, #32]
 800173c:	b2db      	uxtb	r3, r3
 800173e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 8001740:	2201      	movs	r2, #1
 8001742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001746:	4812      	ldr	r0, [pc, #72]	; (8001790 <ST7735_FillRectangle+0xe0>)
 8001748:	f003 fd22 	bl	8005190 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 800174c:	883b      	ldrh	r3, [r7, #0]
 800174e:	80bb      	strh	r3, [r7, #4]
 8001750:	e013      	b.n	800177a <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 8001752:	887b      	ldrh	r3, [r7, #2]
 8001754:	80fb      	strh	r3, [r7, #6]
 8001756:	e00a      	b.n	800176e <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001758:	f107 010c 	add.w	r1, r7, #12
 800175c:	f04f 33ff 	mov.w	r3, #4294967295
 8001760:	2202      	movs	r2, #2
 8001762:	480c      	ldr	r0, [pc, #48]	; (8001794 <ST7735_FillRectangle+0xe4>)
 8001764:	f006 fb50 	bl	8007e08 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001768:	88fb      	ldrh	r3, [r7, #6]
 800176a:	3b01      	subs	r3, #1
 800176c:	80fb      	strh	r3, [r7, #6]
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f1      	bne.n	8001758 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 8001774:	88bb      	ldrh	r3, [r7, #4]
 8001776:	3b01      	subs	r3, #1
 8001778:	80bb      	strh	r3, [r7, #4]
 800177a:	88bb      	ldrh	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d1e8      	bne.n	8001752 <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 8001780:	f7ff fe82 	bl	8001488 <ST7735_Unselect>
 8001784:	e000      	b.n	8001788 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8001786:	bf00      	nop
}
 8001788:	3714      	adds	r7, #20
 800178a:	46bd      	mov	sp, r7
 800178c:	bd90      	pop	{r4, r7, pc}
 800178e:	bf00      	nop
 8001790:	58021800 	.word	0x58021800
 8001794:	240001d4 	.word	0x240001d4

08001798 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 8001798:	b580      	push	{r7, lr}
 800179a:	b084      	sub	sp, #16
 800179c:	af02      	add	r7, sp, #8
 800179e:	4603      	mov	r3, r0
 80017a0:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80017a2:	88fb      	ldrh	r3, [r7, #6]
 80017a4:	9300      	str	r3, [sp, #0]
 80017a6:	2380      	movs	r3, #128	; 0x80
 80017a8:	2280      	movs	r2, #128	; 0x80
 80017aa:	2100      	movs	r1, #0
 80017ac:	2000      	movs	r0, #0
 80017ae:	f7ff ff7f 	bl	80016b0 <ST7735_FillRectangle>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b0a      	ldr	r3, [pc, #40]	; (80017ec <HAL_MspInit+0x30>)
 80017c4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017c8:	4a08      	ldr	r2, [pc, #32]	; (80017ec <HAL_MspInit+0x30>)
 80017ca:	f043 0302 	orr.w	r3, r3, #2
 80017ce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80017d2:	4b06      	ldr	r3, [pc, #24]	; (80017ec <HAL_MspInit+0x30>)
 80017d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	607b      	str	r3, [r7, #4]
 80017de:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	58024400 	.word	0x58024400

080017f0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b08e      	sub	sp, #56	; 0x38
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	605a      	str	r2, [r3, #4]
 8001802:	609a      	str	r2, [r3, #8]
 8001804:	60da      	str	r2, [r3, #12]
 8001806:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a59      	ldr	r2, [pc, #356]	; (8001974 <HAL_ETH_MspInit+0x184>)
 800180e:	4293      	cmp	r3, r2
 8001810:	f040 80ab 	bne.w	800196a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001814:	4b58      	ldr	r3, [pc, #352]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001816:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800181a:	4a57      	ldr	r2, [pc, #348]	; (8001978 <HAL_ETH_MspInit+0x188>)
 800181c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001820:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001824:	4b54      	ldr	r3, [pc, #336]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001826:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800182a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800182e:	623b      	str	r3, [r7, #32]
 8001830:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8001832:	4b51      	ldr	r3, [pc, #324]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001834:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001838:	4a4f      	ldr	r2, [pc, #316]	; (8001978 <HAL_ETH_MspInit+0x188>)
 800183a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800183e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001842:	4b4d      	ldr	r3, [pc, #308]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001844:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800184c:	61fb      	str	r3, [r7, #28]
 800184e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8001850:	4b49      	ldr	r3, [pc, #292]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001852:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001856:	4a48      	ldr	r2, [pc, #288]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001860:	4b45      	ldr	r3, [pc, #276]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001862:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800186a:	61bb      	str	r3, [r7, #24]
 800186c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800186e:	4b42      	ldr	r3, [pc, #264]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001874:	4a40      	ldr	r2, [pc, #256]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800187e:	4b3e      	ldr	r3, [pc, #248]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	617b      	str	r3, [r7, #20]
 800188a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188c:	4b3a      	ldr	r3, [pc, #232]	; (8001978 <HAL_ETH_MspInit+0x188>)
 800188e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001892:	4a39      	ldr	r2, [pc, #228]	; (8001978 <HAL_ETH_MspInit+0x188>)
 8001894:	f043 0301 	orr.w	r3, r3, #1
 8001898:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800189c:	4b36      	ldr	r3, [pc, #216]	; (8001978 <HAL_ETH_MspInit+0x188>)
 800189e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018aa:	4b33      	ldr	r3, [pc, #204]	; (8001978 <HAL_ETH_MspInit+0x188>)
 80018ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018b0:	4a31      	ldr	r2, [pc, #196]	; (8001978 <HAL_ETH_MspInit+0x188>)
 80018b2:	f043 0302 	orr.w	r3, r3, #2
 80018b6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018ba:	4b2f      	ldr	r3, [pc, #188]	; (8001978 <HAL_ETH_MspInit+0x188>)
 80018bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018c0:	f003 0302 	and.w	r3, r3, #2
 80018c4:	60fb      	str	r3, [r7, #12]
 80018c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80018c8:	4b2b      	ldr	r3, [pc, #172]	; (8001978 <HAL_ETH_MspInit+0x188>)
 80018ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018ce:	4a2a      	ldr	r2, [pc, #168]	; (8001978 <HAL_ETH_MspInit+0x188>)
 80018d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80018d4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80018d8:	4b27      	ldr	r3, [pc, #156]	; (8001978 <HAL_ETH_MspInit+0x188>)
 80018da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80018e6:	2332      	movs	r3, #50	; 0x32
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80018f6:	230b      	movs	r3, #11
 80018f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018fe:	4619      	mov	r1, r3
 8001900:	481e      	ldr	r0, [pc, #120]	; (800197c <HAL_ETH_MspInit+0x18c>)
 8001902:	f003 fa7d 	bl	8004e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8001906:	2386      	movs	r3, #134	; 0x86
 8001908:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001912:	2300      	movs	r3, #0
 8001914:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001916:	230b      	movs	r3, #11
 8001918:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800191e:	4619      	mov	r1, r3
 8001920:	4817      	ldr	r0, [pc, #92]	; (8001980 <HAL_ETH_MspInit+0x190>)
 8001922:	f003 fa6d 	bl	8004e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800192a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001938:	230b      	movs	r3, #11
 800193a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800193c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001940:	4619      	mov	r1, r3
 8001942:	4810      	ldr	r0, [pc, #64]	; (8001984 <HAL_ETH_MspInit+0x194>)
 8001944:	f003 fa5c 	bl	8004e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8001948:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194e:	2302      	movs	r3, #2
 8001950:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001956:	2300      	movs	r3, #0
 8001958:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800195a:	230b      	movs	r3, #11
 800195c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800195e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001962:	4619      	mov	r1, r3
 8001964:	4808      	ldr	r0, [pc, #32]	; (8001988 <HAL_ETH_MspInit+0x198>)
 8001966:	f003 fa4b 	bl	8004e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3738      	adds	r7, #56	; 0x38
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40028000 	.word	0x40028000
 8001978:	58024400 	.word	0x58024400
 800197c:	58020800 	.word	0x58020800
 8001980:	58020000 	.word	0x58020000
 8001984:	58020400 	.word	0x58020400
 8001988:	58021800 	.word	0x58021800

0800198c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b08a      	sub	sp, #40	; 0x28
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001994:	f107 0314 	add.w	r3, r7, #20
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a2a      	ldr	r2, [pc, #168]	; (8001a54 <HAL_SPI_MspInit+0xc8>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d14d      	bne.n	8001a4a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019ae:	4b2a      	ldr	r3, [pc, #168]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019b4:	4a28      	ldr	r2, [pc, #160]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80019be:	4b26      	ldr	r3, [pc, #152]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80019c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019c8:	613b      	str	r3, [r7, #16]
 80019ca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b22      	ldr	r3, [pc, #136]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019d2:	4a21      	ldr	r2, [pc, #132]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019dc:	4b1e      	ldr	r3, [pc, #120]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80019f0:	4a19      	ldr	r2, [pc, #100]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019f2:	f043 0304 	orr.w	r3, r3, #4
 80019f6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80019fa:	4b17      	ldr	r3, [pc, #92]	; (8001a58 <HAL_SPI_MspInit+0xcc>)
 80019fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	60bb      	str	r3, [r7, #8]
 8001a06:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a08:	2304      	movs	r3, #4
 8001a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a10:	2302      	movs	r3, #2
 8001a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a14:	2300      	movs	r3, #0
 8001a16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001a18:	2307      	movs	r3, #7
 8001a1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a1c:	f107 0314 	add.w	r3, r7, #20
 8001a20:	4619      	mov	r1, r3
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <HAL_SPI_MspInit+0xd0>)
 8001a24:	f003 f9ec 	bl	8004e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a2e:	2302      	movs	r3, #2
 8001a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a36:	2300      	movs	r3, #0
 8001a38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a3a:	2306      	movs	r3, #6
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4619      	mov	r1, r3
 8001a44:	4806      	ldr	r0, [pc, #24]	; (8001a60 <HAL_SPI_MspInit+0xd4>)
 8001a46:	f003 f9db 	bl	8004e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001a4a:	bf00      	nop
 8001a4c:	3728      	adds	r7, #40	; 0x28
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40003c00 	.word	0x40003c00
 8001a58:	58024400 	.word	0x58024400
 8001a5c:	58020400 	.word	0x58020400
 8001a60:	58020800 	.word	0x58020800

08001a64 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b0b8      	sub	sp, #224	; 0xe0
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a6c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
 8001a76:	609a      	str	r2, [r3, #8]
 8001a78:	60da      	str	r2, [r3, #12]
 8001a7a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a7c:	f107 0310 	add.w	r3, r7, #16
 8001a80:	22bc      	movs	r2, #188	; 0xbc
 8001a82:	2100      	movs	r1, #0
 8001a84:	4618      	mov	r0, r3
 8001a86:	f008 fcbd 	bl	800a404 <memset>
  if(huart->Instance==USART3)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a57      	ldr	r2, [pc, #348]	; (8001bec <HAL_UART_MspInit+0x188>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	f040 80a6 	bne.w	8001be2 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001a96:	2302      	movs	r3, #2
 8001a98:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f004 fd41 	bl	800652c <HAL_RCCEx_PeriphCLKConfig>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d001      	beq.n	8001ab4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8001ab0:	f7ff fcd8 	bl	8001464 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ab4:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <HAL_UART_MspInit+0x18c>)
 8001ab6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aba:	4a4d      	ldr	r2, [pc, #308]	; (8001bf0 <HAL_UART_MspInit+0x18c>)
 8001abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ac0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001ac4:	4b4a      	ldr	r3, [pc, #296]	; (8001bf0 <HAL_UART_MspInit+0x18c>)
 8001ac6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8001aca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ad2:	4b47      	ldr	r3, [pc, #284]	; (8001bf0 <HAL_UART_MspInit+0x18c>)
 8001ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ad8:	4a45      	ldr	r2, [pc, #276]	; (8001bf0 <HAL_UART_MspInit+0x18c>)
 8001ada:	f043 0308 	orr.w	r3, r3, #8
 8001ade:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ae2:	4b43      	ldr	r3, [pc, #268]	; (8001bf0 <HAL_UART_MspInit+0x18c>)
 8001ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ae8:	f003 0308 	and.w	r3, r3, #8
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8001af0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001af4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af8:	2302      	movs	r3, #2
 8001afa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b04:	2300      	movs	r3, #0
 8001b06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001b0a:	2307      	movs	r3, #7
 8001b0c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b10:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001b14:	4619      	mov	r1, r3
 8001b16:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <HAL_UART_MspInit+0x190>)
 8001b18:	f003 f972 	bl	8004e00 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001b1c:	4b36      	ldr	r3, [pc, #216]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b1e:	4a37      	ldr	r2, [pc, #220]	; (8001bfc <HAL_UART_MspInit+0x198>)
 8001b20:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001b22:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b24:	222d      	movs	r2, #45	; 0x2d
 8001b26:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b28:	4b33      	ldr	r3, [pc, #204]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b2e:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b36:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b3a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001b48:	4b2b      	ldr	r3, [pc, #172]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b4e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b50:	4b29      	ldr	r3, [pc, #164]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b56:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001b5c:	4826      	ldr	r0, [pc, #152]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b5e:	f000 fb05 	bl	800216c <HAL_DMA_Init>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d001      	beq.n	8001b6c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001b68:	f7ff fc7c 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	4a22      	ldr	r2, [pc, #136]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b70:	67da      	str	r2, [r3, #124]	; 0x7c
 8001b72:	4a21      	ldr	r2, [pc, #132]	; (8001bf8 <HAL_UART_MspInit+0x194>)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001b7a:	4a22      	ldr	r2, [pc, #136]	; (8001c04 <HAL_UART_MspInit+0x1a0>)
 8001b7c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8001b7e:	4b20      	ldr	r3, [pc, #128]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001b80:	222e      	movs	r2, #46	; 0x2e
 8001b82:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001b86:	2240      	movs	r2, #64	; 0x40
 8001b88:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001b92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b96:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b98:	4b19      	ldr	r3, [pc, #100]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bb0:	4b13      	ldr	r3, [pc, #76]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8001bb6:	4812      	ldr	r0, [pc, #72]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001bb8:	f000 fad8 	bl	800216c <HAL_DMA_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8001bc2:	f7ff fc4f 	bl	8001464 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001bca:	679a      	str	r2, [r3, #120]	; 0x78
 8001bcc:	4a0c      	ldr	r2, [pc, #48]	; (8001c00 <HAL_UART_MspInit+0x19c>)
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	2100      	movs	r1, #0
 8001bd6:	2027      	movs	r0, #39	; 0x27
 8001bd8:	f000 fa93 	bl	8002102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001bdc:	2027      	movs	r0, #39	; 0x27
 8001bde:	f000 faaa 	bl	8002136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001be2:	bf00      	nop
 8001be4:	37e0      	adds	r7, #224	; 0xe0
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	40004800 	.word	0x40004800
 8001bf0:	58024400 	.word	0x58024400
 8001bf4:	58020c00 	.word	0x58020c00
 8001bf8:	240002ec 	.word	0x240002ec
 8001bfc:	40020028 	.word	0x40020028
 8001c00:	24000364 	.word	0x24000364
 8001c04:	40020070 	.word	0x40020070

08001c08 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	b08a      	sub	sp, #40	; 0x28
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	2200      	movs	r2, #0
 8001c16:	601a      	str	r2, [r3, #0]
 8001c18:	605a      	str	r2, [r3, #4]
 8001c1a:	609a      	str	r2, [r3, #8]
 8001c1c:	60da      	str	r2, [r3, #12]
 8001c1e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4a22      	ldr	r2, [pc, #136]	; (8001cb0 <HAL_PCD_MspInit+0xa8>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d13d      	bne.n	8001ca6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8001c2a:	f003 fcb5 	bl	8005598 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c2e:	4b21      	ldr	r3, [pc, #132]	; (8001cb4 <HAL_PCD_MspInit+0xac>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c34:	4a1f      	ldr	r2, [pc, #124]	; (8001cb4 <HAL_PCD_MspInit+0xac>)
 8001c36:	f043 0301 	orr.w	r3, r3, #1
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001c3e:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <HAL_PCD_MspInit+0xac>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	613b      	str	r3, [r7, #16]
 8001c4a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001c4c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001c50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c52:	2302      	movs	r3, #2
 8001c54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001c5e:	230a      	movs	r3, #10
 8001c60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c62:	f107 0314 	add.w	r3, r7, #20
 8001c66:	4619      	mov	r1, r3
 8001c68:	4813      	ldr	r0, [pc, #76]	; (8001cb8 <HAL_PCD_MspInit+0xb0>)
 8001c6a:	f003 f8c9 	bl	8004e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001c6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c74:	2300      	movs	r3, #0
 8001c76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c7c:	f107 0314 	add.w	r3, r7, #20
 8001c80:	4619      	mov	r1, r3
 8001c82:	480d      	ldr	r0, [pc, #52]	; (8001cb8 <HAL_PCD_MspInit+0xb0>)
 8001c84:	f003 f8bc 	bl	8004e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001c88:	4b0a      	ldr	r3, [pc, #40]	; (8001cb4 <HAL_PCD_MspInit+0xac>)
 8001c8a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c8e:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_PCD_MspInit+0xac>)
 8001c90:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001c94:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_PCD_MspInit+0xac>)
 8001c9a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001c9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001ca6:	bf00      	nop
 8001ca8:	3728      	adds	r7, #40	; 0x28
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	40080000 	.word	0x40080000
 8001cb4:	58024400 	.word	0x58024400
 8001cb8:	58020000 	.word	0x58020000

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f8bc 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA1_Stream1_IRQHandler+0x10>)
 8001d16:	f001 fae9 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	240002ec 	.word	0x240002ec

08001d24 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA1_Stream4_IRQHandler+0x10>)
 8001d2a:	f001 fadf 	bl	80032ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	24000364 	.word	0x24000364

08001d38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <USART3_IRQHandler+0x10>)
 8001d3e:	f006 fb8f 	bl	8008460 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	2400025c 	.word	0x2400025c

08001d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001d50:	f7fe ff46 	bl	8000be0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d54:	480c      	ldr	r0, [pc, #48]	; (8001d88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d56:	490d      	ldr	r1, [pc, #52]	; (8001d8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d5c:	e002      	b.n	8001d64 <LoopCopyDataInit>

08001d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d62:	3304      	adds	r3, #4

08001d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d68:	d3f9      	bcc.n	8001d5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001d6c:	4c0a      	ldr	r4, [pc, #40]	; (8001d98 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d70:	e001      	b.n	8001d76 <LoopFillZerobss>

08001d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d74:	3204      	adds	r2, #4

08001d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d78:	d3fb      	bcc.n	8001d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001d7a:	f008 fb1f 	bl	800a3bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7e:	f7fe ffc5 	bl	8000d0c <main>
  bx  lr
 8001d82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001d84:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001d88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001d8c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001d90:	0800a4f4 	.word	0x0800a4f4
  ldr r2, =_sbss
 8001d94:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001d98:	24000c2c 	.word	0x24000c2c

08001d9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d9c:	e7fe      	b.n	8001d9c <ADC3_IRQHandler>
	...

08001da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001da6:	2003      	movs	r0, #3
 8001da8:	f000 f9a0 	bl	80020ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001dac:	f004 f9e8 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b15      	ldr	r3, [pc, #84]	; (8001e08 <HAL_Init+0x68>)
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	4913      	ldr	r1, [pc, #76]	; (8001e0c <HAL_Init+0x6c>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8001dc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_Init+0x68>)
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	f003 030f 	and.w	r3, r3, #15
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_Init+0x6c>)
 8001dd4:	5cd3      	ldrb	r3, [r2, r3]
 8001dd6:	f003 031f 	and.w	r3, r3, #31
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	fa22 f303 	lsr.w	r3, r2, r3
 8001de0:	4a0b      	ldr	r2, [pc, #44]	; (8001e10 <HAL_Init+0x70>)
 8001de2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001de4:	4a0b      	ldr	r2, [pc, #44]	; (8001e14 <HAL_Init+0x74>)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001dea:	2000      	movs	r0, #0
 8001dec:	f000 f814 	bl	8001e18 <HAL_InitTick>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e002      	b.n	8001e00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001dfa:	f7ff fcdf 	bl	80017bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}
 8001e08:	58024400 	.word	0x58024400
 8001e0c:	0800a42c 	.word	0x0800a42c
 8001e10:	24000004 	.word	0x24000004
 8001e14:	24000000 	.word	0x24000000

08001e18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001e20:	4b15      	ldr	r3, [pc, #84]	; (8001e78 <HAL_InitTick+0x60>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e021      	b.n	8001e70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001e2c:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <HAL_InitTick+0x64>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b11      	ldr	r3, [pc, #68]	; (8001e78 <HAL_InitTick+0x60>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f985 	bl	8002152 <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001e60:	f000 f94f 	bl	8002102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	; (8001e80 <HAL_InitTick+0x68>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	2400000c 	.word	0x2400000c
 8001e7c:	24000000 	.word	0x24000000
 8001e80:	24000008 	.word	0x24000008

08001e84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001e88:	4b06      	ldr	r3, [pc, #24]	; (8001ea4 <HAL_IncTick+0x20>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a04      	ldr	r2, [pc, #16]	; (8001ea8 <HAL_IncTick+0x24>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	2400000c 	.word	0x2400000c
 8001ea8:	24000c28 	.word	0x24000c28

08001eac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eac:	b480      	push	{r7}
 8001eae:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb0:	4b03      	ldr	r3, [pc, #12]	; (8001ec0 <HAL_GetTick+0x14>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	24000c28 	.word	0x24000c28

08001ec4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b084      	sub	sp, #16
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ecc:	f7ff ffee 	bl	8001eac <HAL_GetTick>
 8001ed0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001edc:	d005      	beq.n	8001eea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ede:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <HAL_Delay+0x44>)
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	4413      	add	r3, r2
 8001ee8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001eea:	bf00      	nop
 8001eec:	f7ff ffde 	bl	8001eac <HAL_GetTick>
 8001ef0:	4602      	mov	r2, r0
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	1ad3      	subs	r3, r2, r3
 8001ef6:	68fa      	ldr	r2, [r7, #12]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d8f7      	bhi.n	8001eec <HAL_Delay+0x28>
  {
  }
}
 8001efc:	bf00      	nop
 8001efe:	bf00      	nop
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	2400000c 	.word	0x2400000c

08001f0c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001f10:	4b03      	ldr	r3, [pc, #12]	; (8001f20 <HAL_GetREVID+0x14>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	0c1b      	lsrs	r3, r3, #16
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	5c001000 	.word	0x5c001000

08001f24 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b083      	sub	sp, #12
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001f2c:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001f34:	4904      	ldr	r1, [pc, #16]	; (8001f48 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4313      	orrs	r3, r2
 8001f3a:	604b      	str	r3, [r1, #4]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr
 8001f48:	58000400 	.word	0x58000400

08001f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b085      	sub	sp, #20
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f003 0307 	and.w	r3, r3, #7
 8001f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f5c:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <__NVIC_SetPriorityGrouping+0x40>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f62:	68ba      	ldr	r2, [r7, #8]
 8001f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001f68:	4013      	ands	r3, r2
 8001f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <__NVIC_SetPriorityGrouping+0x44>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f7a:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <__NVIC_SetPriorityGrouping+0x40>)
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	60d3      	str	r3, [r2, #12]
}
 8001f80:	bf00      	nop
 8001f82:	3714      	adds	r7, #20
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr
 8001f8c:	e000ed00 	.word	0xe000ed00
 8001f90:	05fa0000 	.word	0x05fa0000

08001f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f98:	4b04      	ldr	r3, [pc, #16]	; (8001fac <__NVIC_GetPriorityGrouping+0x18>)
 8001f9a:	68db      	ldr	r3, [r3, #12]
 8001f9c:	0a1b      	lsrs	r3, r3, #8
 8001f9e:	f003 0307 	and.w	r3, r3, #7
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b083      	sub	sp, #12
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001fba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	db0b      	blt.n	8001fda <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fc2:	88fb      	ldrh	r3, [r7, #6]
 8001fc4:	f003 021f 	and.w	r2, r3, #31
 8001fc8:	4907      	ldr	r1, [pc, #28]	; (8001fe8 <__NVIC_EnableIRQ+0x38>)
 8001fca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001fce:	095b      	lsrs	r3, r3, #5
 8001fd0:	2001      	movs	r0, #1
 8001fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8001fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001fda:	bf00      	nop
 8001fdc:	370c      	adds	r7, #12
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe4:	4770      	bx	lr
 8001fe6:	bf00      	nop
 8001fe8:	e000e100 	.word	0xe000e100

08001fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	6039      	str	r1, [r7, #0]
 8001ff6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001ff8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	db0a      	blt.n	8002016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	b2da      	uxtb	r2, r3
 8002004:	490c      	ldr	r1, [pc, #48]	; (8002038 <__NVIC_SetPriority+0x4c>)
 8002006:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800200a:	0112      	lsls	r2, r2, #4
 800200c:	b2d2      	uxtb	r2, r2
 800200e:	440b      	add	r3, r1
 8002010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002014:	e00a      	b.n	800202c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	b2da      	uxtb	r2, r3
 800201a:	4908      	ldr	r1, [pc, #32]	; (800203c <__NVIC_SetPriority+0x50>)
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	f003 030f 	and.w	r3, r3, #15
 8002022:	3b04      	subs	r3, #4
 8002024:	0112      	lsls	r2, r2, #4
 8002026:	b2d2      	uxtb	r2, r2
 8002028:	440b      	add	r3, r1
 800202a:	761a      	strb	r2, [r3, #24]
}
 800202c:	bf00      	nop
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	e000e100 	.word	0xe000e100
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002040:	b480      	push	{r7}
 8002042:	b089      	sub	sp, #36	; 0x24
 8002044:	af00      	add	r7, sp, #0
 8002046:	60f8      	str	r0, [r7, #12]
 8002048:	60b9      	str	r1, [r7, #8]
 800204a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0307 	rsb	r3, r3, #7
 800205a:	2b04      	cmp	r3, #4
 800205c:	bf28      	it	cs
 800205e:	2304      	movcs	r3, #4
 8002060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	3304      	adds	r3, #4
 8002066:	2b06      	cmp	r3, #6
 8002068:	d902      	bls.n	8002070 <NVIC_EncodePriority+0x30>
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	3b03      	subs	r3, #3
 800206e:	e000      	b.n	8002072 <NVIC_EncodePriority+0x32>
 8002070:	2300      	movs	r3, #0
 8002072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002074:	f04f 32ff 	mov.w	r2, #4294967295
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	401a      	ands	r2, r3
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002088:	f04f 31ff 	mov.w	r1, #4294967295
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43d9      	mvns	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002098:	4313      	orrs	r3, r2
         );
}
 800209a:	4618      	mov	r0, r3
 800209c:	3724      	adds	r7, #36	; 0x24
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
	...

080020a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b082      	sub	sp, #8
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	3b01      	subs	r3, #1
 80020b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020b8:	d301      	bcc.n	80020be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020ba:	2301      	movs	r3, #1
 80020bc:	e00f      	b.n	80020de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020be:	4a0a      	ldr	r2, [pc, #40]	; (80020e8 <SysTick_Config+0x40>)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3b01      	subs	r3, #1
 80020c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020c6:	210f      	movs	r1, #15
 80020c8:	f04f 30ff 	mov.w	r0, #4294967295
 80020cc:	f7ff ff8e 	bl	8001fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <SysTick_Config+0x40>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020d6:	4b04      	ldr	r3, [pc, #16]	; (80020e8 <SysTick_Config+0x40>)
 80020d8:	2207      	movs	r2, #7
 80020da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3708      	adds	r7, #8
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	e000e010 	.word	0xe000e010

080020ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ff29 	bl	8001f4c <__NVIC_SetPriorityGrouping>
}
 80020fa:	bf00      	nop
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
 800210e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002110:	f7ff ff40 	bl	8001f94 <__NVIC_GetPriorityGrouping>
 8002114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002116:	687a      	ldr	r2, [r7, #4]
 8002118:	68b9      	ldr	r1, [r7, #8]
 800211a:	6978      	ldr	r0, [r7, #20]
 800211c:	f7ff ff90 	bl	8002040 <NVIC_EncodePriority>
 8002120:	4602      	mov	r2, r0
 8002122:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002126:	4611      	mov	r1, r2
 8002128:	4618      	mov	r0, r3
 800212a:	f7ff ff5f 	bl	8001fec <__NVIC_SetPriority>
}
 800212e:	bf00      	nop
 8002130:	3718      	adds	r7, #24
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}

08002136 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002136:	b580      	push	{r7, lr}
 8002138:	b082      	sub	sp, #8
 800213a:	af00      	add	r7, sp, #0
 800213c:	4603      	mov	r3, r0
 800213e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002140:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002144:	4618      	mov	r0, r3
 8002146:	f7ff ff33 	bl	8001fb0 <__NVIC_EnableIRQ>
}
 800214a:	bf00      	nop
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}

08002152 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800215a:	6878      	ldr	r0, [r7, #4]
 800215c:	f7ff ffa4 	bl	80020a8 <SysTick_Config>
 8002160:	4603      	mov	r3, r0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3708      	adds	r7, #8
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
	...

0800216c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8002174:	f7ff fe9a 	bl	8001eac <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d101      	bne.n	8002184 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e316      	b.n	80027b2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a66      	ldr	r2, [pc, #408]	; (8002324 <HAL_DMA_Init+0x1b8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d04a      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a65      	ldr	r2, [pc, #404]	; (8002328 <HAL_DMA_Init+0x1bc>)
 8002194:	4293      	cmp	r3, r2
 8002196:	d045      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a63      	ldr	r2, [pc, #396]	; (800232c <HAL_DMA_Init+0x1c0>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d040      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a62      	ldr	r2, [pc, #392]	; (8002330 <HAL_DMA_Init+0x1c4>)
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d03b      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	4a60      	ldr	r2, [pc, #384]	; (8002334 <HAL_DMA_Init+0x1c8>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d036      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a5f      	ldr	r2, [pc, #380]	; (8002338 <HAL_DMA_Init+0x1cc>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d031      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a5d      	ldr	r2, [pc, #372]	; (800233c <HAL_DMA_Init+0x1d0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d02c      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4a5c      	ldr	r2, [pc, #368]	; (8002340 <HAL_DMA_Init+0x1d4>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d027      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a5a      	ldr	r2, [pc, #360]	; (8002344 <HAL_DMA_Init+0x1d8>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d022      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a59      	ldr	r2, [pc, #356]	; (8002348 <HAL_DMA_Init+0x1dc>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d01d      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a57      	ldr	r2, [pc, #348]	; (800234c <HAL_DMA_Init+0x1e0>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d018      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a56      	ldr	r2, [pc, #344]	; (8002350 <HAL_DMA_Init+0x1e4>)
 80021f8:	4293      	cmp	r3, r2
 80021fa:	d013      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a54      	ldr	r2, [pc, #336]	; (8002354 <HAL_DMA_Init+0x1e8>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d00e      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	4a53      	ldr	r2, [pc, #332]	; (8002358 <HAL_DMA_Init+0x1ec>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d009      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a51      	ldr	r2, [pc, #324]	; (800235c <HAL_DMA_Init+0x1f0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d004      	beq.n	8002224 <HAL_DMA_Init+0xb8>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a50      	ldr	r2, [pc, #320]	; (8002360 <HAL_DMA_Init+0x1f4>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d101      	bne.n	8002228 <HAL_DMA_Init+0xbc>
 8002224:	2301      	movs	r3, #1
 8002226:	e000      	b.n	800222a <HAL_DMA_Init+0xbe>
 8002228:	2300      	movs	r3, #0
 800222a:	2b00      	cmp	r3, #0
 800222c:	f000 813b 	beq.w	80024a6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2202      	movs	r2, #2
 8002234:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a37      	ldr	r2, [pc, #220]	; (8002324 <HAL_DMA_Init+0x1b8>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d04a      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a36      	ldr	r2, [pc, #216]	; (8002328 <HAL_DMA_Init+0x1bc>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d045      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_DMA_Init+0x1c0>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d040      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a33      	ldr	r2, [pc, #204]	; (8002330 <HAL_DMA_Init+0x1c4>)
 8002264:	4293      	cmp	r3, r2
 8002266:	d03b      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a31      	ldr	r2, [pc, #196]	; (8002334 <HAL_DMA_Init+0x1c8>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d036      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a30      	ldr	r2, [pc, #192]	; (8002338 <HAL_DMA_Init+0x1cc>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d031      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a2e      	ldr	r2, [pc, #184]	; (800233c <HAL_DMA_Init+0x1d0>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d02c      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a2d      	ldr	r2, [pc, #180]	; (8002340 <HAL_DMA_Init+0x1d4>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d027      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a2b      	ldr	r2, [pc, #172]	; (8002344 <HAL_DMA_Init+0x1d8>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d022      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a2a      	ldr	r2, [pc, #168]	; (8002348 <HAL_DMA_Init+0x1dc>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d01d      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a28      	ldr	r2, [pc, #160]	; (800234c <HAL_DMA_Init+0x1e0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d018      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a27      	ldr	r2, [pc, #156]	; (8002350 <HAL_DMA_Init+0x1e4>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d013      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a25      	ldr	r2, [pc, #148]	; (8002354 <HAL_DMA_Init+0x1e8>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d00e      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a24      	ldr	r2, [pc, #144]	; (8002358 <HAL_DMA_Init+0x1ec>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d009      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a22      	ldr	r2, [pc, #136]	; (800235c <HAL_DMA_Init+0x1f0>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d004      	beq.n	80022e0 <HAL_DMA_Init+0x174>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a21      	ldr	r2, [pc, #132]	; (8002360 <HAL_DMA_Init+0x1f4>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d108      	bne.n	80022f2 <HAL_DMA_Init+0x186>
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0201 	bic.w	r2, r2, #1
 80022ee:	601a      	str	r2, [r3, #0]
 80022f0:	e007      	b.n	8002302 <HAL_DMA_Init+0x196>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	681a      	ldr	r2, [r3, #0]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f022 0201 	bic.w	r2, r2, #1
 8002300:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002302:	e02f      	b.n	8002364 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002304:	f7ff fdd2 	bl	8001eac <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b05      	cmp	r3, #5
 8002310:	d928      	bls.n	8002364 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2203      	movs	r2, #3
 800231c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	e246      	b.n	80027b2 <HAL_DMA_Init+0x646>
 8002324:	40020010 	.word	0x40020010
 8002328:	40020028 	.word	0x40020028
 800232c:	40020040 	.word	0x40020040
 8002330:	40020058 	.word	0x40020058
 8002334:	40020070 	.word	0x40020070
 8002338:	40020088 	.word	0x40020088
 800233c:	400200a0 	.word	0x400200a0
 8002340:	400200b8 	.word	0x400200b8
 8002344:	40020410 	.word	0x40020410
 8002348:	40020428 	.word	0x40020428
 800234c:	40020440 	.word	0x40020440
 8002350:	40020458 	.word	0x40020458
 8002354:	40020470 	.word	0x40020470
 8002358:	40020488 	.word	0x40020488
 800235c:	400204a0 	.word	0x400204a0
 8002360:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	d1c8      	bne.n	8002304 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4b83      	ldr	r3, [pc, #524]	; (800258c <HAL_DMA_Init+0x420>)
 800237e:	4013      	ands	r3, r2
 8002380:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800238a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002396:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	699b      	ldr	r3, [r3, #24]
 800239c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a1b      	ldr	r3, [r3, #32]
 80023a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80023aa:	697a      	ldr	r2, [r7, #20]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d107      	bne.n	80023c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023c0:	4313      	orrs	r3, r2
 80023c2:	697a      	ldr	r2, [r7, #20]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80023c8:	4b71      	ldr	r3, [pc, #452]	; (8002590 <HAL_DMA_Init+0x424>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b71      	ldr	r3, [pc, #452]	; (8002594 <HAL_DMA_Init+0x428>)
 80023ce:	4013      	ands	r3, r2
 80023d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d4:	d328      	bcc.n	8002428 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	2b28      	cmp	r3, #40	; 0x28
 80023dc:	d903      	bls.n	80023e6 <HAL_DMA_Init+0x27a>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b2e      	cmp	r3, #46	; 0x2e
 80023e4:	d917      	bls.n	8002416 <HAL_DMA_Init+0x2aa>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2b3e      	cmp	r3, #62	; 0x3e
 80023ec:	d903      	bls.n	80023f6 <HAL_DMA_Init+0x28a>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	2b42      	cmp	r3, #66	; 0x42
 80023f4:	d90f      	bls.n	8002416 <HAL_DMA_Init+0x2aa>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b46      	cmp	r3, #70	; 0x46
 80023fc:	d903      	bls.n	8002406 <HAL_DMA_Init+0x29a>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b48      	cmp	r3, #72	; 0x48
 8002404:	d907      	bls.n	8002416 <HAL_DMA_Init+0x2aa>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b4e      	cmp	r3, #78	; 0x4e
 800240c:	d905      	bls.n	800241a <HAL_DMA_Init+0x2ae>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b52      	cmp	r3, #82	; 0x52
 8002414:	d801      	bhi.n	800241a <HAL_DMA_Init+0x2ae>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <HAL_DMA_Init+0x2b0>
 800241a:	2300      	movs	r3, #0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002426:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	697a      	ldr	r2, [r7, #20]
 800242e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	f023 0307 	bic.w	r3, r3, #7
 800243e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002444:	697a      	ldr	r2, [r7, #20]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800244e:	2b04      	cmp	r3, #4
 8002450:	d117      	bne.n	8002482 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	4313      	orrs	r3, r2
 800245a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00e      	beq.n	8002482 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f001 ff1d 	bl	80042a4 <DMA_CheckFifoParam>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d008      	beq.n	8002482 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2240      	movs	r2, #64	; 0x40
 8002474:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2201      	movs	r2, #1
 800247a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e197      	b.n	80027b2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800248a:	6878      	ldr	r0, [r7, #4]
 800248c:	f001 fe58 	bl	8004140 <DMA_CalcBaseAndBitshift>
 8002490:	4603      	mov	r3, r0
 8002492:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	f003 031f 	and.w	r3, r3, #31
 800249c:	223f      	movs	r2, #63	; 0x3f
 800249e:	409a      	lsls	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	609a      	str	r2, [r3, #8]
 80024a4:	e0cd      	b.n	8002642 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a3b      	ldr	r2, [pc, #236]	; (8002598 <HAL_DMA_Init+0x42c>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d022      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a39      	ldr	r2, [pc, #228]	; (800259c <HAL_DMA_Init+0x430>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d01d      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a38      	ldr	r2, [pc, #224]	; (80025a0 <HAL_DMA_Init+0x434>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d018      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a36      	ldr	r2, [pc, #216]	; (80025a4 <HAL_DMA_Init+0x438>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d013      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a35      	ldr	r2, [pc, #212]	; (80025a8 <HAL_DMA_Init+0x43c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d00e      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a33      	ldr	r2, [pc, #204]	; (80025ac <HAL_DMA_Init+0x440>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d009      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a32      	ldr	r2, [pc, #200]	; (80025b0 <HAL_DMA_Init+0x444>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d004      	beq.n	80024f6 <HAL_DMA_Init+0x38a>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a30      	ldr	r2, [pc, #192]	; (80025b4 <HAL_DMA_Init+0x448>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d101      	bne.n	80024fa <HAL_DMA_Init+0x38e>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <HAL_DMA_Init+0x390>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	f000 8097 	beq.w	8002630 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a24      	ldr	r2, [pc, #144]	; (8002598 <HAL_DMA_Init+0x42c>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d021      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a22      	ldr	r2, [pc, #136]	; (800259c <HAL_DMA_Init+0x430>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d01c      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	4a21      	ldr	r2, [pc, #132]	; (80025a0 <HAL_DMA_Init+0x434>)
 800251c:	4293      	cmp	r3, r2
 800251e:	d017      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a1f      	ldr	r2, [pc, #124]	; (80025a4 <HAL_DMA_Init+0x438>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d012      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a1e      	ldr	r2, [pc, #120]	; (80025a8 <HAL_DMA_Init+0x43c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00d      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	4a1c      	ldr	r2, [pc, #112]	; (80025ac <HAL_DMA_Init+0x440>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d008      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a1b      	ldr	r2, [pc, #108]	; (80025b0 <HAL_DMA_Init+0x444>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d003      	beq.n	8002550 <HAL_DMA_Init+0x3e4>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a19      	ldr	r2, [pc, #100]	; (80025b4 <HAL_DMA_Init+0x448>)
 800254e:	4293      	cmp	r3, r2
 8002550:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800256a:	697a      	ldr	r2, [r7, #20]
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <HAL_DMA_Init+0x44c>)
 800256e:	4013      	ands	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d020      	beq.n	80025bc <HAL_DMA_Init+0x450>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b80      	cmp	r3, #128	; 0x80
 8002580:	d102      	bne.n	8002588 <HAL_DMA_Init+0x41c>
 8002582:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002586:	e01a      	b.n	80025be <HAL_DMA_Init+0x452>
 8002588:	2300      	movs	r3, #0
 800258a:	e018      	b.n	80025be <HAL_DMA_Init+0x452>
 800258c:	fe10803f 	.word	0xfe10803f
 8002590:	5c001000 	.word	0x5c001000
 8002594:	ffff0000 	.word	0xffff0000
 8002598:	58025408 	.word	0x58025408
 800259c:	5802541c 	.word	0x5802541c
 80025a0:	58025430 	.word	0x58025430
 80025a4:	58025444 	.word	0x58025444
 80025a8:	58025458 	.word	0x58025458
 80025ac:	5802546c 	.word	0x5802546c
 80025b0:	58025480 	.word	0x58025480
 80025b4:	58025494 	.word	0x58025494
 80025b8:	fffe000f 	.word	0xfffe000f
 80025bc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68d2      	ldr	r2, [r2, #12]
 80025c2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025c4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	691b      	ldr	r3, [r3, #16]
 80025ca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80025cc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	695b      	ldr	r3, [r3, #20]
 80025d2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80025d4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	699b      	ldr	r3, [r3, #24]
 80025da:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80025dc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	69db      	ldr	r3, [r3, #28]
 80025e2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80025e4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80025ec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80025ee:	697a      	ldr	r2, [r7, #20]
 80025f0:	4313      	orrs	r3, r2
 80025f2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b6e      	ldr	r3, [pc, #440]	; (80027bc <HAL_DMA_Init+0x650>)
 8002604:	4413      	add	r3, r2
 8002606:	4a6e      	ldr	r2, [pc, #440]	; (80027c0 <HAL_DMA_Init+0x654>)
 8002608:	fba2 2303 	umull	r2, r3, r2, r3
 800260c:	091b      	lsrs	r3, r3, #4
 800260e:	009a      	lsls	r2, r3, #2
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f001 fd93 	bl	8004140 <DMA_CalcBaseAndBitshift>
 800261a:	4603      	mov	r3, r0
 800261c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2201      	movs	r2, #1
 8002628:	409a      	lsls	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	605a      	str	r2, [r3, #4]
 800262e:	e008      	b.n	8002642 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2240      	movs	r2, #64	; 0x40
 8002634:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2203      	movs	r2, #3
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e0b7      	b.n	80027b2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a5f      	ldr	r2, [pc, #380]	; (80027c4 <HAL_DMA_Init+0x658>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d072      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a5d      	ldr	r2, [pc, #372]	; (80027c8 <HAL_DMA_Init+0x65c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d06d      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a5c      	ldr	r2, [pc, #368]	; (80027cc <HAL_DMA_Init+0x660>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d068      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <HAL_DMA_Init+0x664>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d063      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a59      	ldr	r2, [pc, #356]	; (80027d4 <HAL_DMA_Init+0x668>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d05e      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a57      	ldr	r2, [pc, #348]	; (80027d8 <HAL_DMA_Init+0x66c>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d059      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a56      	ldr	r2, [pc, #344]	; (80027dc <HAL_DMA_Init+0x670>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d054      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a54      	ldr	r2, [pc, #336]	; (80027e0 <HAL_DMA_Init+0x674>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d04f      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a53      	ldr	r2, [pc, #332]	; (80027e4 <HAL_DMA_Init+0x678>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d04a      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a51      	ldr	r2, [pc, #324]	; (80027e8 <HAL_DMA_Init+0x67c>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d045      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a50      	ldr	r2, [pc, #320]	; (80027ec <HAL_DMA_Init+0x680>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d040      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a4e      	ldr	r2, [pc, #312]	; (80027f0 <HAL_DMA_Init+0x684>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d03b      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a4d      	ldr	r2, [pc, #308]	; (80027f4 <HAL_DMA_Init+0x688>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d036      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a4b      	ldr	r2, [pc, #300]	; (80027f8 <HAL_DMA_Init+0x68c>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d031      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a4a      	ldr	r2, [pc, #296]	; (80027fc <HAL_DMA_Init+0x690>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d02c      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a48      	ldr	r2, [pc, #288]	; (8002800 <HAL_DMA_Init+0x694>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d027      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a47      	ldr	r2, [pc, #284]	; (8002804 <HAL_DMA_Init+0x698>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d022      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a45      	ldr	r2, [pc, #276]	; (8002808 <HAL_DMA_Init+0x69c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d01d      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a44      	ldr	r2, [pc, #272]	; (800280c <HAL_DMA_Init+0x6a0>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d018      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a42      	ldr	r2, [pc, #264]	; (8002810 <HAL_DMA_Init+0x6a4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d013      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a41      	ldr	r2, [pc, #260]	; (8002814 <HAL_DMA_Init+0x6a8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00e      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a3f      	ldr	r2, [pc, #252]	; (8002818 <HAL_DMA_Init+0x6ac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d009      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a3e      	ldr	r2, [pc, #248]	; (800281c <HAL_DMA_Init+0x6b0>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_Init+0x5c6>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a3c      	ldr	r2, [pc, #240]	; (8002820 <HAL_DMA_Init+0x6b4>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d101      	bne.n	8002736 <HAL_DMA_Init+0x5ca>
 8002732:	2301      	movs	r3, #1
 8002734:	e000      	b.n	8002738 <HAL_DMA_Init+0x5cc>
 8002736:	2300      	movs	r3, #0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d032      	beq.n	80027a2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800273c:	6878      	ldr	r0, [r7, #4]
 800273e:	f001 fe2d 	bl	800439c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	2b80      	cmp	r3, #128	; 0x80
 8002748:	d102      	bne.n	8002750 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002758:	b2d2      	uxtb	r2, r2
 800275a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002760:	687a      	ldr	r2, [r7, #4]
 8002762:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002764:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d010      	beq.n	8002790 <HAL_DMA_Init+0x624>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b08      	cmp	r3, #8
 8002774:	d80c      	bhi.n	8002790 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f001 feaa 	bl	80044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800278c:	605a      	str	r2, [r3, #4]
 800278e:	e008      	b.n	80027a2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2201      	movs	r2, #1
 80027ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027b0:	2300      	movs	r3, #0
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3718      	adds	r7, #24
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	a7fdabf8 	.word	0xa7fdabf8
 80027c0:	cccccccd 	.word	0xcccccccd
 80027c4:	40020010 	.word	0x40020010
 80027c8:	40020028 	.word	0x40020028
 80027cc:	40020040 	.word	0x40020040
 80027d0:	40020058 	.word	0x40020058
 80027d4:	40020070 	.word	0x40020070
 80027d8:	40020088 	.word	0x40020088
 80027dc:	400200a0 	.word	0x400200a0
 80027e0:	400200b8 	.word	0x400200b8
 80027e4:	40020410 	.word	0x40020410
 80027e8:	40020428 	.word	0x40020428
 80027ec:	40020440 	.word	0x40020440
 80027f0:	40020458 	.word	0x40020458
 80027f4:	40020470 	.word	0x40020470
 80027f8:	40020488 	.word	0x40020488
 80027fc:	400204a0 	.word	0x400204a0
 8002800:	400204b8 	.word	0x400204b8
 8002804:	58025408 	.word	0x58025408
 8002808:	5802541c 	.word	0x5802541c
 800280c:	58025430 	.word	0x58025430
 8002810:	58025444 	.word	0x58025444
 8002814:	58025458 	.word	0x58025458
 8002818:	5802546c 	.word	0x5802546c
 800281c:	58025480 	.word	0x58025480
 8002820:	58025494 	.word	0x58025494

08002824 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800282c:	f7ff fb3e 	bl	8001eac <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d101      	bne.n	800283c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e2dc      	b.n	8002df6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002842:	b2db      	uxtb	r3, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d008      	beq.n	800285a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2280      	movs	r2, #128	; 0x80
 800284c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2200      	movs	r2, #0
 8002852:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e2cd      	b.n	8002df6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a76      	ldr	r2, [pc, #472]	; (8002a38 <HAL_DMA_Abort+0x214>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d04a      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a74      	ldr	r2, [pc, #464]	; (8002a3c <HAL_DMA_Abort+0x218>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d045      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a73      	ldr	r2, [pc, #460]	; (8002a40 <HAL_DMA_Abort+0x21c>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d040      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a71      	ldr	r2, [pc, #452]	; (8002a44 <HAL_DMA_Abort+0x220>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d03b      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a70      	ldr	r2, [pc, #448]	; (8002a48 <HAL_DMA_Abort+0x224>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d036      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a6e      	ldr	r2, [pc, #440]	; (8002a4c <HAL_DMA_Abort+0x228>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d031      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a6d      	ldr	r2, [pc, #436]	; (8002a50 <HAL_DMA_Abort+0x22c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d02c      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a6b      	ldr	r2, [pc, #428]	; (8002a54 <HAL_DMA_Abort+0x230>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d027      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6a      	ldr	r2, [pc, #424]	; (8002a58 <HAL_DMA_Abort+0x234>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d022      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a68      	ldr	r2, [pc, #416]	; (8002a5c <HAL_DMA_Abort+0x238>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d01d      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a67      	ldr	r2, [pc, #412]	; (8002a60 <HAL_DMA_Abort+0x23c>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d018      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a65      	ldr	r2, [pc, #404]	; (8002a64 <HAL_DMA_Abort+0x240>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d013      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a64      	ldr	r2, [pc, #400]	; (8002a68 <HAL_DMA_Abort+0x244>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00e      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a62      	ldr	r2, [pc, #392]	; (8002a6c <HAL_DMA_Abort+0x248>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d009      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a61      	ldr	r2, [pc, #388]	; (8002a70 <HAL_DMA_Abort+0x24c>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d004      	beq.n	80028fa <HAL_DMA_Abort+0xd6>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <HAL_DMA_Abort+0x250>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d101      	bne.n	80028fe <HAL_DMA_Abort+0xda>
 80028fa:	2301      	movs	r3, #1
 80028fc:	e000      	b.n	8002900 <HAL_DMA_Abort+0xdc>
 80028fe:	2300      	movs	r3, #0
 8002900:	2b00      	cmp	r3, #0
 8002902:	d013      	beq.n	800292c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	681a      	ldr	r2, [r3, #0]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f022 021e 	bic.w	r2, r2, #30
 8002912:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695a      	ldr	r2, [r3, #20]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002922:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	617b      	str	r3, [r7, #20]
 800292a:	e00a      	b.n	8002942 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 020e 	bic.w	r2, r2, #14
 800293a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a3c      	ldr	r2, [pc, #240]	; (8002a38 <HAL_DMA_Abort+0x214>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d072      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a3a      	ldr	r2, [pc, #232]	; (8002a3c <HAL_DMA_Abort+0x218>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d06d      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a39      	ldr	r2, [pc, #228]	; (8002a40 <HAL_DMA_Abort+0x21c>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d068      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a37      	ldr	r2, [pc, #220]	; (8002a44 <HAL_DMA_Abort+0x220>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d063      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a36      	ldr	r2, [pc, #216]	; (8002a48 <HAL_DMA_Abort+0x224>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d05e      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a34      	ldr	r2, [pc, #208]	; (8002a4c <HAL_DMA_Abort+0x228>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d059      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a33      	ldr	r2, [pc, #204]	; (8002a50 <HAL_DMA_Abort+0x22c>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d054      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a31      	ldr	r2, [pc, #196]	; (8002a54 <HAL_DMA_Abort+0x230>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d04f      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	4a30      	ldr	r2, [pc, #192]	; (8002a58 <HAL_DMA_Abort+0x234>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d04a      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a2e      	ldr	r2, [pc, #184]	; (8002a5c <HAL_DMA_Abort+0x238>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d045      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a2d      	ldr	r2, [pc, #180]	; (8002a60 <HAL_DMA_Abort+0x23c>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d040      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2b      	ldr	r2, [pc, #172]	; (8002a64 <HAL_DMA_Abort+0x240>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d03b      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a2a      	ldr	r2, [pc, #168]	; (8002a68 <HAL_DMA_Abort+0x244>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d036      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a28      	ldr	r2, [pc, #160]	; (8002a6c <HAL_DMA_Abort+0x248>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d031      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a27      	ldr	r2, [pc, #156]	; (8002a70 <HAL_DMA_Abort+0x24c>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d02c      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	4a25      	ldr	r2, [pc, #148]	; (8002a74 <HAL_DMA_Abort+0x250>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d027      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a24      	ldr	r2, [pc, #144]	; (8002a78 <HAL_DMA_Abort+0x254>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a22      	ldr	r2, [pc, #136]	; (8002a7c <HAL_DMA_Abort+0x258>)
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d01d      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a21      	ldr	r2, [pc, #132]	; (8002a80 <HAL_DMA_Abort+0x25c>)
 80029fc:	4293      	cmp	r3, r2
 80029fe:	d018      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a1f      	ldr	r2, [pc, #124]	; (8002a84 <HAL_DMA_Abort+0x260>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d013      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a1e      	ldr	r2, [pc, #120]	; (8002a88 <HAL_DMA_Abort+0x264>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d00e      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a1c      	ldr	r2, [pc, #112]	; (8002a8c <HAL_DMA_Abort+0x268>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d009      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a1b      	ldr	r2, [pc, #108]	; (8002a90 <HAL_DMA_Abort+0x26c>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d004      	beq.n	8002a32 <HAL_DMA_Abort+0x20e>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a19      	ldr	r2, [pc, #100]	; (8002a94 <HAL_DMA_Abort+0x270>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d132      	bne.n	8002a98 <HAL_DMA_Abort+0x274>
 8002a32:	2301      	movs	r3, #1
 8002a34:	e031      	b.n	8002a9a <HAL_DMA_Abort+0x276>
 8002a36:	bf00      	nop
 8002a38:	40020010 	.word	0x40020010
 8002a3c:	40020028 	.word	0x40020028
 8002a40:	40020040 	.word	0x40020040
 8002a44:	40020058 	.word	0x40020058
 8002a48:	40020070 	.word	0x40020070
 8002a4c:	40020088 	.word	0x40020088
 8002a50:	400200a0 	.word	0x400200a0
 8002a54:	400200b8 	.word	0x400200b8
 8002a58:	40020410 	.word	0x40020410
 8002a5c:	40020428 	.word	0x40020428
 8002a60:	40020440 	.word	0x40020440
 8002a64:	40020458 	.word	0x40020458
 8002a68:	40020470 	.word	0x40020470
 8002a6c:	40020488 	.word	0x40020488
 8002a70:	400204a0 	.word	0x400204a0
 8002a74:	400204b8 	.word	0x400204b8
 8002a78:	58025408 	.word	0x58025408
 8002a7c:	5802541c 	.word	0x5802541c
 8002a80:	58025430 	.word	0x58025430
 8002a84:	58025444 	.word	0x58025444
 8002a88:	58025458 	.word	0x58025458
 8002a8c:	5802546c 	.word	0x5802546c
 8002a90:	58025480 	.word	0x58025480
 8002a94:	58025494 	.word	0x58025494
 8002a98:	2300      	movs	r3, #0
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d007      	beq.n	8002aae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aa8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002aac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a6d      	ldr	r2, [pc, #436]	; (8002c68 <HAL_DMA_Abort+0x444>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d04a      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a6b      	ldr	r2, [pc, #428]	; (8002c6c <HAL_DMA_Abort+0x448>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d045      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a6a      	ldr	r2, [pc, #424]	; (8002c70 <HAL_DMA_Abort+0x44c>)
 8002ac8:	4293      	cmp	r3, r2
 8002aca:	d040      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a68      	ldr	r2, [pc, #416]	; (8002c74 <HAL_DMA_Abort+0x450>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d03b      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4a67      	ldr	r2, [pc, #412]	; (8002c78 <HAL_DMA_Abort+0x454>)
 8002adc:	4293      	cmp	r3, r2
 8002ade:	d036      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a65      	ldr	r2, [pc, #404]	; (8002c7c <HAL_DMA_Abort+0x458>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d031      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a64      	ldr	r2, [pc, #400]	; (8002c80 <HAL_DMA_Abort+0x45c>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d02c      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	4a62      	ldr	r2, [pc, #392]	; (8002c84 <HAL_DMA_Abort+0x460>)
 8002afa:	4293      	cmp	r3, r2
 8002afc:	d027      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	4a61      	ldr	r2, [pc, #388]	; (8002c88 <HAL_DMA_Abort+0x464>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d022      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a5f      	ldr	r2, [pc, #380]	; (8002c8c <HAL_DMA_Abort+0x468>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d01d      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4a5e      	ldr	r2, [pc, #376]	; (8002c90 <HAL_DMA_Abort+0x46c>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d018      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a5c      	ldr	r2, [pc, #368]	; (8002c94 <HAL_DMA_Abort+0x470>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d013      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4a5b      	ldr	r2, [pc, #364]	; (8002c98 <HAL_DMA_Abort+0x474>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d00e      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a59      	ldr	r2, [pc, #356]	; (8002c9c <HAL_DMA_Abort+0x478>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d009      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_DMA_Abort+0x47c>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d004      	beq.n	8002b4e <HAL_DMA_Abort+0x32a>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a56      	ldr	r2, [pc, #344]	; (8002ca4 <HAL_DMA_Abort+0x480>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d108      	bne.n	8002b60 <HAL_DMA_Abort+0x33c>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f022 0201 	bic.w	r2, r2, #1
 8002b5c:	601a      	str	r2, [r3, #0]
 8002b5e:	e007      	b.n	8002b70 <HAL_DMA_Abort+0x34c>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681a      	ldr	r2, [r3, #0]
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f022 0201 	bic.w	r2, r2, #1
 8002b6e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b70:	e013      	b.n	8002b9a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b72:	f7ff f99b 	bl	8001eac <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b05      	cmp	r3, #5
 8002b7e:	d90c      	bls.n	8002b9a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2203      	movs	r2, #3
 8002b8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e12d      	b.n	8002df6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1e5      	bne.n	8002b72 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a2f      	ldr	r2, [pc, #188]	; (8002c68 <HAL_DMA_Abort+0x444>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d04a      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a2d      	ldr	r2, [pc, #180]	; (8002c6c <HAL_DMA_Abort+0x448>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d045      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a2c      	ldr	r2, [pc, #176]	; (8002c70 <HAL_DMA_Abort+0x44c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d040      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	; (8002c74 <HAL_DMA_Abort+0x450>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d03b      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a29      	ldr	r2, [pc, #164]	; (8002c78 <HAL_DMA_Abort+0x454>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d036      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a27      	ldr	r2, [pc, #156]	; (8002c7c <HAL_DMA_Abort+0x458>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d031      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a26      	ldr	r2, [pc, #152]	; (8002c80 <HAL_DMA_Abort+0x45c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d02c      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a24      	ldr	r2, [pc, #144]	; (8002c84 <HAL_DMA_Abort+0x460>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d027      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a23      	ldr	r2, [pc, #140]	; (8002c88 <HAL_DMA_Abort+0x464>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d022      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a21      	ldr	r2, [pc, #132]	; (8002c8c <HAL_DMA_Abort+0x468>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d01d      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a20      	ldr	r2, [pc, #128]	; (8002c90 <HAL_DMA_Abort+0x46c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d018      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_DMA_Abort+0x470>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a1d      	ldr	r2, [pc, #116]	; (8002c98 <HAL_DMA_Abort+0x474>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d00e      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a1b      	ldr	r2, [pc, #108]	; (8002c9c <HAL_DMA_Abort+0x478>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d009      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a1a      	ldr	r2, [pc, #104]	; (8002ca0 <HAL_DMA_Abort+0x47c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d004      	beq.n	8002c46 <HAL_DMA_Abort+0x422>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a18      	ldr	r2, [pc, #96]	; (8002ca4 <HAL_DMA_Abort+0x480>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d101      	bne.n	8002c4a <HAL_DMA_Abort+0x426>
 8002c46:	2301      	movs	r3, #1
 8002c48:	e000      	b.n	8002c4c <HAL_DMA_Abort+0x428>
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d02b      	beq.n	8002ca8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c5a:	f003 031f 	and.w	r3, r3, #31
 8002c5e:	223f      	movs	r2, #63	; 0x3f
 8002c60:	409a      	lsls	r2, r3
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	609a      	str	r2, [r3, #8]
 8002c66:	e02a      	b.n	8002cbe <HAL_DMA_Abort+0x49a>
 8002c68:	40020010 	.word	0x40020010
 8002c6c:	40020028 	.word	0x40020028
 8002c70:	40020040 	.word	0x40020040
 8002c74:	40020058 	.word	0x40020058
 8002c78:	40020070 	.word	0x40020070
 8002c7c:	40020088 	.word	0x40020088
 8002c80:	400200a0 	.word	0x400200a0
 8002c84:	400200b8 	.word	0x400200b8
 8002c88:	40020410 	.word	0x40020410
 8002c8c:	40020428 	.word	0x40020428
 8002c90:	40020440 	.word	0x40020440
 8002c94:	40020458 	.word	0x40020458
 8002c98:	40020470 	.word	0x40020470
 8002c9c:	40020488 	.word	0x40020488
 8002ca0:	400204a0 	.word	0x400204a0
 8002ca4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002cac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cb2:	f003 031f 	and.w	r3, r3, #31
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	409a      	lsls	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a4f      	ldr	r2, [pc, #316]	; (8002e00 <HAL_DMA_Abort+0x5dc>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d072      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a4d      	ldr	r2, [pc, #308]	; (8002e04 <HAL_DMA_Abort+0x5e0>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d06d      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a4c      	ldr	r2, [pc, #304]	; (8002e08 <HAL_DMA_Abort+0x5e4>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d068      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4a      	ldr	r2, [pc, #296]	; (8002e0c <HAL_DMA_Abort+0x5e8>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d063      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a49      	ldr	r2, [pc, #292]	; (8002e10 <HAL_DMA_Abort+0x5ec>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d05e      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <HAL_DMA_Abort+0x5f0>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d059      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a46      	ldr	r2, [pc, #280]	; (8002e18 <HAL_DMA_Abort+0x5f4>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d054      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a44      	ldr	r2, [pc, #272]	; (8002e1c <HAL_DMA_Abort+0x5f8>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d04f      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a43      	ldr	r2, [pc, #268]	; (8002e20 <HAL_DMA_Abort+0x5fc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d04a      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a41      	ldr	r2, [pc, #260]	; (8002e24 <HAL_DMA_Abort+0x600>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d045      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a40      	ldr	r2, [pc, #256]	; (8002e28 <HAL_DMA_Abort+0x604>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d040      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a3e      	ldr	r2, [pc, #248]	; (8002e2c <HAL_DMA_Abort+0x608>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d03b      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <HAL_DMA_Abort+0x60c>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d036      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a3b      	ldr	r2, [pc, #236]	; (8002e34 <HAL_DMA_Abort+0x610>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d031      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a3a      	ldr	r2, [pc, #232]	; (8002e38 <HAL_DMA_Abort+0x614>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d02c      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a38      	ldr	r2, [pc, #224]	; (8002e3c <HAL_DMA_Abort+0x618>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d027      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a37      	ldr	r2, [pc, #220]	; (8002e40 <HAL_DMA_Abort+0x61c>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d022      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a35      	ldr	r2, [pc, #212]	; (8002e44 <HAL_DMA_Abort+0x620>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d01d      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a34      	ldr	r2, [pc, #208]	; (8002e48 <HAL_DMA_Abort+0x624>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d018      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a32      	ldr	r2, [pc, #200]	; (8002e4c <HAL_DMA_Abort+0x628>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a31      	ldr	r2, [pc, #196]	; (8002e50 <HAL_DMA_Abort+0x62c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d00e      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a2f      	ldr	r2, [pc, #188]	; (8002e54 <HAL_DMA_Abort+0x630>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d009      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a2e      	ldr	r2, [pc, #184]	; (8002e58 <HAL_DMA_Abort+0x634>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d004      	beq.n	8002dae <HAL_DMA_Abort+0x58a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a2c      	ldr	r2, [pc, #176]	; (8002e5c <HAL_DMA_Abort+0x638>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d101      	bne.n	8002db2 <HAL_DMA_Abort+0x58e>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_DMA_Abort+0x590>
 8002db2:	2300      	movs	r3, #0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d015      	beq.n	8002de4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002dbc:	687a      	ldr	r2, [r7, #4]
 8002dbe:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002dc0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00c      	beq.n	8002de4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002dd8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002de2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3718      	adds	r7, #24
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40020010 	.word	0x40020010
 8002e04:	40020028 	.word	0x40020028
 8002e08:	40020040 	.word	0x40020040
 8002e0c:	40020058 	.word	0x40020058
 8002e10:	40020070 	.word	0x40020070
 8002e14:	40020088 	.word	0x40020088
 8002e18:	400200a0 	.word	0x400200a0
 8002e1c:	400200b8 	.word	0x400200b8
 8002e20:	40020410 	.word	0x40020410
 8002e24:	40020428 	.word	0x40020428
 8002e28:	40020440 	.word	0x40020440
 8002e2c:	40020458 	.word	0x40020458
 8002e30:	40020470 	.word	0x40020470
 8002e34:	40020488 	.word	0x40020488
 8002e38:	400204a0 	.word	0x400204a0
 8002e3c:	400204b8 	.word	0x400204b8
 8002e40:	58025408 	.word	0x58025408
 8002e44:	5802541c 	.word	0x5802541c
 8002e48:	58025430 	.word	0x58025430
 8002e4c:	58025444 	.word	0x58025444
 8002e50:	58025458 	.word	0x58025458
 8002e54:	5802546c 	.word	0x5802546c
 8002e58:	58025480 	.word	0x58025480
 8002e5c:	58025494 	.word	0x58025494

08002e60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d101      	bne.n	8002e72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002e6e:	2301      	movs	r3, #1
 8002e70:	e237      	b.n	80032e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d004      	beq.n	8002e88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2280      	movs	r2, #128	; 0x80
 8002e82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e22c      	b.n	80032e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a5c      	ldr	r2, [pc, #368]	; (8003000 <HAL_DMA_Abort_IT+0x1a0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d04a      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a5b      	ldr	r2, [pc, #364]	; (8003004 <HAL_DMA_Abort_IT+0x1a4>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d045      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a59      	ldr	r2, [pc, #356]	; (8003008 <HAL_DMA_Abort_IT+0x1a8>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d040      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a58      	ldr	r2, [pc, #352]	; (800300c <HAL_DMA_Abort_IT+0x1ac>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d03b      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a56      	ldr	r2, [pc, #344]	; (8003010 <HAL_DMA_Abort_IT+0x1b0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d036      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a55      	ldr	r2, [pc, #340]	; (8003014 <HAL_DMA_Abort_IT+0x1b4>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d031      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a53      	ldr	r2, [pc, #332]	; (8003018 <HAL_DMA_Abort_IT+0x1b8>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d02c      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a52      	ldr	r2, [pc, #328]	; (800301c <HAL_DMA_Abort_IT+0x1bc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d027      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a50      	ldr	r2, [pc, #320]	; (8003020 <HAL_DMA_Abort_IT+0x1c0>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d022      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a4f      	ldr	r2, [pc, #316]	; (8003024 <HAL_DMA_Abort_IT+0x1c4>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d01d      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a4d      	ldr	r2, [pc, #308]	; (8003028 <HAL_DMA_Abort_IT+0x1c8>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d018      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a4c      	ldr	r2, [pc, #304]	; (800302c <HAL_DMA_Abort_IT+0x1cc>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d013      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a4a      	ldr	r2, [pc, #296]	; (8003030 <HAL_DMA_Abort_IT+0x1d0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d00e      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a49      	ldr	r2, [pc, #292]	; (8003034 <HAL_DMA_Abort_IT+0x1d4>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d009      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a47      	ldr	r2, [pc, #284]	; (8003038 <HAL_DMA_Abort_IT+0x1d8>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d004      	beq.n	8002f28 <HAL_DMA_Abort_IT+0xc8>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a46      	ldr	r2, [pc, #280]	; (800303c <HAL_DMA_Abort_IT+0x1dc>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d101      	bne.n	8002f2c <HAL_DMA_Abort_IT+0xcc>
 8002f28:	2301      	movs	r3, #1
 8002f2a:	e000      	b.n	8002f2e <HAL_DMA_Abort_IT+0xce>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	f000 8086 	beq.w	8003040 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2204      	movs	r2, #4
 8002f38:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a2f      	ldr	r2, [pc, #188]	; (8003000 <HAL_DMA_Abort_IT+0x1a0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d04a      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a2e      	ldr	r2, [pc, #184]	; (8003004 <HAL_DMA_Abort_IT+0x1a4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d045      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2c      	ldr	r2, [pc, #176]	; (8003008 <HAL_DMA_Abort_IT+0x1a8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d040      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a2b      	ldr	r2, [pc, #172]	; (800300c <HAL_DMA_Abort_IT+0x1ac>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d03b      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	4a29      	ldr	r2, [pc, #164]	; (8003010 <HAL_DMA_Abort_IT+0x1b0>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d036      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4a28      	ldr	r2, [pc, #160]	; (8003014 <HAL_DMA_Abort_IT+0x1b4>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d031      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a26      	ldr	r2, [pc, #152]	; (8003018 <HAL_DMA_Abort_IT+0x1b8>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d02c      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a25      	ldr	r2, [pc, #148]	; (800301c <HAL_DMA_Abort_IT+0x1bc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d027      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a23      	ldr	r2, [pc, #140]	; (8003020 <HAL_DMA_Abort_IT+0x1c0>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d022      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a22      	ldr	r2, [pc, #136]	; (8003024 <HAL_DMA_Abort_IT+0x1c4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d01d      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a20      	ldr	r2, [pc, #128]	; (8003028 <HAL_DMA_Abort_IT+0x1c8>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d018      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a1f      	ldr	r2, [pc, #124]	; (800302c <HAL_DMA_Abort_IT+0x1cc>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d013      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a1d      	ldr	r2, [pc, #116]	; (8003030 <HAL_DMA_Abort_IT+0x1d0>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d00e      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1c      	ldr	r2, [pc, #112]	; (8003034 <HAL_DMA_Abort_IT+0x1d4>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d009      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a1a      	ldr	r2, [pc, #104]	; (8003038 <HAL_DMA_Abort_IT+0x1d8>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d004      	beq.n	8002fdc <HAL_DMA_Abort_IT+0x17c>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	4a19      	ldr	r2, [pc, #100]	; (800303c <HAL_DMA_Abort_IT+0x1dc>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d108      	bne.n	8002fee <HAL_DMA_Abort_IT+0x18e>
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f022 0201 	bic.w	r2, r2, #1
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	e178      	b.n	80032e0 <HAL_DMA_Abort_IT+0x480>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	681a      	ldr	r2, [r3, #0]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f022 0201 	bic.w	r2, r2, #1
 8002ffc:	601a      	str	r2, [r3, #0]
 8002ffe:	e16f      	b.n	80032e0 <HAL_DMA_Abort_IT+0x480>
 8003000:	40020010 	.word	0x40020010
 8003004:	40020028 	.word	0x40020028
 8003008:	40020040 	.word	0x40020040
 800300c:	40020058 	.word	0x40020058
 8003010:	40020070 	.word	0x40020070
 8003014:	40020088 	.word	0x40020088
 8003018:	400200a0 	.word	0x400200a0
 800301c:	400200b8 	.word	0x400200b8
 8003020:	40020410 	.word	0x40020410
 8003024:	40020428 	.word	0x40020428
 8003028:	40020440 	.word	0x40020440
 800302c:	40020458 	.word	0x40020458
 8003030:	40020470 	.word	0x40020470
 8003034:	40020488 	.word	0x40020488
 8003038:	400204a0 	.word	0x400204a0
 800303c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681a      	ldr	r2, [r3, #0]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 020e 	bic.w	r2, r2, #14
 800304e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6c      	ldr	r2, [pc, #432]	; (8003208 <HAL_DMA_Abort_IT+0x3a8>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d04a      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4a6b      	ldr	r2, [pc, #428]	; (800320c <HAL_DMA_Abort_IT+0x3ac>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d045      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a69      	ldr	r2, [pc, #420]	; (8003210 <HAL_DMA_Abort_IT+0x3b0>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d040      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a68      	ldr	r2, [pc, #416]	; (8003214 <HAL_DMA_Abort_IT+0x3b4>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d03b      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a66      	ldr	r2, [pc, #408]	; (8003218 <HAL_DMA_Abort_IT+0x3b8>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d036      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a65      	ldr	r2, [pc, #404]	; (800321c <HAL_DMA_Abort_IT+0x3bc>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d031      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a63      	ldr	r2, [pc, #396]	; (8003220 <HAL_DMA_Abort_IT+0x3c0>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d02c      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a62      	ldr	r2, [pc, #392]	; (8003224 <HAL_DMA_Abort_IT+0x3c4>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d027      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a60      	ldr	r2, [pc, #384]	; (8003228 <HAL_DMA_Abort_IT+0x3c8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d022      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a5f      	ldr	r2, [pc, #380]	; (800322c <HAL_DMA_Abort_IT+0x3cc>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d01d      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a5d      	ldr	r2, [pc, #372]	; (8003230 <HAL_DMA_Abort_IT+0x3d0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d018      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a5c      	ldr	r2, [pc, #368]	; (8003234 <HAL_DMA_Abort_IT+0x3d4>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d013      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a5a      	ldr	r2, [pc, #360]	; (8003238 <HAL_DMA_Abort_IT+0x3d8>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00e      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a59      	ldr	r2, [pc, #356]	; (800323c <HAL_DMA_Abort_IT+0x3dc>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d009      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	4a57      	ldr	r2, [pc, #348]	; (8003240 <HAL_DMA_Abort_IT+0x3e0>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d004      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x290>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a56      	ldr	r2, [pc, #344]	; (8003244 <HAL_DMA_Abort_IT+0x3e4>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d108      	bne.n	8003102 <HAL_DMA_Abort_IT+0x2a2>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	681a      	ldr	r2, [r3, #0]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f022 0201 	bic.w	r2, r2, #1
 80030fe:	601a      	str	r2, [r3, #0]
 8003100:	e007      	b.n	8003112 <HAL_DMA_Abort_IT+0x2b2>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0201 	bic.w	r2, r2, #1
 8003110:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a3c      	ldr	r2, [pc, #240]	; (8003208 <HAL_DMA_Abort_IT+0x3a8>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d072      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a3a      	ldr	r2, [pc, #232]	; (800320c <HAL_DMA_Abort_IT+0x3ac>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d06d      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a39      	ldr	r2, [pc, #228]	; (8003210 <HAL_DMA_Abort_IT+0x3b0>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d068      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a37      	ldr	r2, [pc, #220]	; (8003214 <HAL_DMA_Abort_IT+0x3b4>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d063      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a36      	ldr	r2, [pc, #216]	; (8003218 <HAL_DMA_Abort_IT+0x3b8>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d05e      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a34      	ldr	r2, [pc, #208]	; (800321c <HAL_DMA_Abort_IT+0x3bc>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d059      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a33      	ldr	r2, [pc, #204]	; (8003220 <HAL_DMA_Abort_IT+0x3c0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d054      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a31      	ldr	r2, [pc, #196]	; (8003224 <HAL_DMA_Abort_IT+0x3c4>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d04f      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a30      	ldr	r2, [pc, #192]	; (8003228 <HAL_DMA_Abort_IT+0x3c8>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d04a      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4a2e      	ldr	r2, [pc, #184]	; (800322c <HAL_DMA_Abort_IT+0x3cc>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d045      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a2d      	ldr	r2, [pc, #180]	; (8003230 <HAL_DMA_Abort_IT+0x3d0>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d040      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a2b      	ldr	r2, [pc, #172]	; (8003234 <HAL_DMA_Abort_IT+0x3d4>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d03b      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <HAL_DMA_Abort_IT+0x3d8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d036      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	4a28      	ldr	r2, [pc, #160]	; (800323c <HAL_DMA_Abort_IT+0x3dc>)
 800319a:	4293      	cmp	r3, r2
 800319c:	d031      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4a27      	ldr	r2, [pc, #156]	; (8003240 <HAL_DMA_Abort_IT+0x3e0>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d02c      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a25      	ldr	r2, [pc, #148]	; (8003244 <HAL_DMA_Abort_IT+0x3e4>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d027      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	4a24      	ldr	r2, [pc, #144]	; (8003248 <HAL_DMA_Abort_IT+0x3e8>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d022      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	4a22      	ldr	r2, [pc, #136]	; (800324c <HAL_DMA_Abort_IT+0x3ec>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d01d      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4a21      	ldr	r2, [pc, #132]	; (8003250 <HAL_DMA_Abort_IT+0x3f0>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d018      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a1f      	ldr	r2, [pc, #124]	; (8003254 <HAL_DMA_Abort_IT+0x3f4>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d013      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <HAL_DMA_Abort_IT+0x3f8>)
 80031e0:	4293      	cmp	r3, r2
 80031e2:	d00e      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a1c      	ldr	r2, [pc, #112]	; (800325c <HAL_DMA_Abort_IT+0x3fc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d009      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4a1b      	ldr	r2, [pc, #108]	; (8003260 <HAL_DMA_Abort_IT+0x400>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d004      	beq.n	8003202 <HAL_DMA_Abort_IT+0x3a2>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4a19      	ldr	r2, [pc, #100]	; (8003264 <HAL_DMA_Abort_IT+0x404>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d132      	bne.n	8003268 <HAL_DMA_Abort_IT+0x408>
 8003202:	2301      	movs	r3, #1
 8003204:	e031      	b.n	800326a <HAL_DMA_Abort_IT+0x40a>
 8003206:	bf00      	nop
 8003208:	40020010 	.word	0x40020010
 800320c:	40020028 	.word	0x40020028
 8003210:	40020040 	.word	0x40020040
 8003214:	40020058 	.word	0x40020058
 8003218:	40020070 	.word	0x40020070
 800321c:	40020088 	.word	0x40020088
 8003220:	400200a0 	.word	0x400200a0
 8003224:	400200b8 	.word	0x400200b8
 8003228:	40020410 	.word	0x40020410
 800322c:	40020428 	.word	0x40020428
 8003230:	40020440 	.word	0x40020440
 8003234:	40020458 	.word	0x40020458
 8003238:	40020470 	.word	0x40020470
 800323c:	40020488 	.word	0x40020488
 8003240:	400204a0 	.word	0x400204a0
 8003244:	400204b8 	.word	0x400204b8
 8003248:	58025408 	.word	0x58025408
 800324c:	5802541c 	.word	0x5802541c
 8003250:	58025430 	.word	0x58025430
 8003254:	58025444 	.word	0x58025444
 8003258:	58025458 	.word	0x58025458
 800325c:	5802546c 	.word	0x5802546c
 8003260:	58025480 	.word	0x58025480
 8003264:	58025494 	.word	0x58025494
 8003268:	2300      	movs	r3, #0
 800326a:	2b00      	cmp	r3, #0
 800326c:	d028      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003272:	681a      	ldr	r2, [r3, #0]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003278:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800327c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003282:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2201      	movs	r2, #1
 800328e:	409a      	lsls	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800329c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d00c      	beq.n	80032c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ba:	687a      	ldr	r2, [r7, #4]
 80032bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80032be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80032e0:	2300      	movs	r3, #0
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop

080032ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b08a      	sub	sp, #40	; 0x28
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80032f8:	4b67      	ldr	r3, [pc, #412]	; (8003498 <HAL_DMA_IRQHandler+0x1ac>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a67      	ldr	r2, [pc, #412]	; (800349c <HAL_DMA_IRQHandler+0x1b0>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	0a9b      	lsrs	r3, r3, #10
 8003304:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800330a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003310:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003312:	6a3b      	ldr	r3, [r7, #32]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a5f      	ldr	r2, [pc, #380]	; (80034a0 <HAL_DMA_IRQHandler+0x1b4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d04a      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a5d      	ldr	r2, [pc, #372]	; (80034a4 <HAL_DMA_IRQHandler+0x1b8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d045      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a5c      	ldr	r2, [pc, #368]	; (80034a8 <HAL_DMA_IRQHandler+0x1bc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d040      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a5a      	ldr	r2, [pc, #360]	; (80034ac <HAL_DMA_IRQHandler+0x1c0>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d03b      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a59      	ldr	r2, [pc, #356]	; (80034b0 <HAL_DMA_IRQHandler+0x1c4>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d036      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a57      	ldr	r2, [pc, #348]	; (80034b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d031      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a56      	ldr	r2, [pc, #344]	; (80034b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d02c      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a54      	ldr	r2, [pc, #336]	; (80034bc <HAL_DMA_IRQHandler+0x1d0>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d027      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a53      	ldr	r2, [pc, #332]	; (80034c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003374:	4293      	cmp	r3, r2
 8003376:	d022      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a51      	ldr	r2, [pc, #324]	; (80034c4 <HAL_DMA_IRQHandler+0x1d8>)
 800337e:	4293      	cmp	r3, r2
 8003380:	d01d      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4a50      	ldr	r2, [pc, #320]	; (80034c8 <HAL_DMA_IRQHandler+0x1dc>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d018      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a4e      	ldr	r2, [pc, #312]	; (80034cc <HAL_DMA_IRQHandler+0x1e0>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d013      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a4d      	ldr	r2, [pc, #308]	; (80034d0 <HAL_DMA_IRQHandler+0x1e4>)
 800339c:	4293      	cmp	r3, r2
 800339e:	d00e      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a4b      	ldr	r2, [pc, #300]	; (80034d4 <HAL_DMA_IRQHandler+0x1e8>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d009      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	4a4a      	ldr	r2, [pc, #296]	; (80034d8 <HAL_DMA_IRQHandler+0x1ec>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d004      	beq.n	80033be <HAL_DMA_IRQHandler+0xd2>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a48      	ldr	r2, [pc, #288]	; (80034dc <HAL_DMA_IRQHandler+0x1f0>)
 80033ba:	4293      	cmp	r3, r2
 80033bc:	d101      	bne.n	80033c2 <HAL_DMA_IRQHandler+0xd6>
 80033be:	2301      	movs	r3, #1
 80033c0:	e000      	b.n	80033c4 <HAL_DMA_IRQHandler+0xd8>
 80033c2:	2300      	movs	r3, #0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	f000 842b 	beq.w	8003c20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ce:	f003 031f 	and.w	r3, r3, #31
 80033d2:	2208      	movs	r2, #8
 80033d4:	409a      	lsls	r2, r3
 80033d6:	69bb      	ldr	r3, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f000 80a2 	beq.w	8003524 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a2e      	ldr	r2, [pc, #184]	; (80034a0 <HAL_DMA_IRQHandler+0x1b4>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d04a      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a2d      	ldr	r2, [pc, #180]	; (80034a4 <HAL_DMA_IRQHandler+0x1b8>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d045      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a2b      	ldr	r2, [pc, #172]	; (80034a8 <HAL_DMA_IRQHandler+0x1bc>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d040      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a2a      	ldr	r2, [pc, #168]	; (80034ac <HAL_DMA_IRQHandler+0x1c0>)
 8003404:	4293      	cmp	r3, r2
 8003406:	d03b      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a28      	ldr	r2, [pc, #160]	; (80034b0 <HAL_DMA_IRQHandler+0x1c4>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d036      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a27      	ldr	r2, [pc, #156]	; (80034b4 <HAL_DMA_IRQHandler+0x1c8>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d031      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <HAL_DMA_IRQHandler+0x1cc>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d02c      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a24      	ldr	r2, [pc, #144]	; (80034bc <HAL_DMA_IRQHandler+0x1d0>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d027      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a22      	ldr	r2, [pc, #136]	; (80034c0 <HAL_DMA_IRQHandler+0x1d4>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d022      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a21      	ldr	r2, [pc, #132]	; (80034c4 <HAL_DMA_IRQHandler+0x1d8>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d01d      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4a1f      	ldr	r2, [pc, #124]	; (80034c8 <HAL_DMA_IRQHandler+0x1dc>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d018      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a1e      	ldr	r2, [pc, #120]	; (80034cc <HAL_DMA_IRQHandler+0x1e0>)
 8003454:	4293      	cmp	r3, r2
 8003456:	d013      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a1c      	ldr	r2, [pc, #112]	; (80034d0 <HAL_DMA_IRQHandler+0x1e4>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d00e      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a1b      	ldr	r2, [pc, #108]	; (80034d4 <HAL_DMA_IRQHandler+0x1e8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d009      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a19      	ldr	r2, [pc, #100]	; (80034d8 <HAL_DMA_IRQHandler+0x1ec>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d004      	beq.n	8003480 <HAL_DMA_IRQHandler+0x194>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a18      	ldr	r2, [pc, #96]	; (80034dc <HAL_DMA_IRQHandler+0x1f0>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d12f      	bne.n	80034e0 <HAL_DMA_IRQHandler+0x1f4>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b00      	cmp	r3, #0
 800348c:	bf14      	ite	ne
 800348e:	2301      	movne	r3, #1
 8003490:	2300      	moveq	r3, #0
 8003492:	b2db      	uxtb	r3, r3
 8003494:	e02e      	b.n	80034f4 <HAL_DMA_IRQHandler+0x208>
 8003496:	bf00      	nop
 8003498:	24000000 	.word	0x24000000
 800349c:	1b4e81b5 	.word	0x1b4e81b5
 80034a0:	40020010 	.word	0x40020010
 80034a4:	40020028 	.word	0x40020028
 80034a8:	40020040 	.word	0x40020040
 80034ac:	40020058 	.word	0x40020058
 80034b0:	40020070 	.word	0x40020070
 80034b4:	40020088 	.word	0x40020088
 80034b8:	400200a0 	.word	0x400200a0
 80034bc:	400200b8 	.word	0x400200b8
 80034c0:	40020410 	.word	0x40020410
 80034c4:	40020428 	.word	0x40020428
 80034c8:	40020440 	.word	0x40020440
 80034cc:	40020458 	.word	0x40020458
 80034d0:	40020470 	.word	0x40020470
 80034d4:	40020488 	.word	0x40020488
 80034d8:	400204a0 	.word	0x400204a0
 80034dc:	400204b8 	.word	0x400204b8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	bf14      	ite	ne
 80034ee:	2301      	movne	r3, #1
 80034f0:	2300      	moveq	r3, #0
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d015      	beq.n	8003524 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f022 0204 	bic.w	r2, r2, #4
 8003506:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800350c:	f003 031f 	and.w	r3, r3, #31
 8003510:	2208      	movs	r2, #8
 8003512:	409a      	lsls	r2, r3
 8003514:	6a3b      	ldr	r3, [r7, #32]
 8003516:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800351c:	f043 0201 	orr.w	r2, r3, #1
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003528:	f003 031f 	and.w	r3, r3, #31
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	fa22 f303 	lsr.w	r3, r2, r3
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	2b00      	cmp	r3, #0
 8003538:	d06e      	beq.n	8003618 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a69      	ldr	r2, [pc, #420]	; (80036e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d04a      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a67      	ldr	r2, [pc, #412]	; (80036e8 <HAL_DMA_IRQHandler+0x3fc>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d045      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a66      	ldr	r2, [pc, #408]	; (80036ec <HAL_DMA_IRQHandler+0x400>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d040      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a64      	ldr	r2, [pc, #400]	; (80036f0 <HAL_DMA_IRQHandler+0x404>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d03b      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a63      	ldr	r2, [pc, #396]	; (80036f4 <HAL_DMA_IRQHandler+0x408>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d036      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a61      	ldr	r2, [pc, #388]	; (80036f8 <HAL_DMA_IRQHandler+0x40c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d031      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	4a60      	ldr	r2, [pc, #384]	; (80036fc <HAL_DMA_IRQHandler+0x410>)
 800357c:	4293      	cmp	r3, r2
 800357e:	d02c      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	4a5e      	ldr	r2, [pc, #376]	; (8003700 <HAL_DMA_IRQHandler+0x414>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d027      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	4a5d      	ldr	r2, [pc, #372]	; (8003704 <HAL_DMA_IRQHandler+0x418>)
 8003590:	4293      	cmp	r3, r2
 8003592:	d022      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a5b      	ldr	r2, [pc, #364]	; (8003708 <HAL_DMA_IRQHandler+0x41c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d01d      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a5a      	ldr	r2, [pc, #360]	; (800370c <HAL_DMA_IRQHandler+0x420>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d018      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	4a58      	ldr	r2, [pc, #352]	; (8003710 <HAL_DMA_IRQHandler+0x424>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d013      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4a57      	ldr	r2, [pc, #348]	; (8003714 <HAL_DMA_IRQHandler+0x428>)
 80035b8:	4293      	cmp	r3, r2
 80035ba:	d00e      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a55      	ldr	r2, [pc, #340]	; (8003718 <HAL_DMA_IRQHandler+0x42c>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d009      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4a54      	ldr	r2, [pc, #336]	; (800371c <HAL_DMA_IRQHandler+0x430>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d004      	beq.n	80035da <HAL_DMA_IRQHandler+0x2ee>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a52      	ldr	r2, [pc, #328]	; (8003720 <HAL_DMA_IRQHandler+0x434>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d10a      	bne.n	80035f0 <HAL_DMA_IRQHandler+0x304>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	bf14      	ite	ne
 80035e8:	2301      	movne	r3, #1
 80035ea:	2300      	moveq	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	e003      	b.n	80035f8 <HAL_DMA_IRQHandler+0x30c>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00d      	beq.n	8003618 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003600:	f003 031f 	and.w	r3, r3, #31
 8003604:	2201      	movs	r2, #1
 8003606:	409a      	lsls	r2, r3
 8003608:	6a3b      	ldr	r3, [r7, #32]
 800360a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003610:	f043 0202 	orr.w	r2, r3, #2
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800361c:	f003 031f 	and.w	r3, r3, #31
 8003620:	2204      	movs	r2, #4
 8003622:	409a      	lsls	r2, r3
 8003624:	69bb      	ldr	r3, [r7, #24]
 8003626:	4013      	ands	r3, r2
 8003628:	2b00      	cmp	r3, #0
 800362a:	f000 808f 	beq.w	800374c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a2c      	ldr	r2, [pc, #176]	; (80036e4 <HAL_DMA_IRQHandler+0x3f8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d04a      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a2a      	ldr	r2, [pc, #168]	; (80036e8 <HAL_DMA_IRQHandler+0x3fc>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d045      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a29      	ldr	r2, [pc, #164]	; (80036ec <HAL_DMA_IRQHandler+0x400>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d040      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4a27      	ldr	r2, [pc, #156]	; (80036f0 <HAL_DMA_IRQHandler+0x404>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d03b      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a26      	ldr	r2, [pc, #152]	; (80036f4 <HAL_DMA_IRQHandler+0x408>)
 800365c:	4293      	cmp	r3, r2
 800365e:	d036      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a24      	ldr	r2, [pc, #144]	; (80036f8 <HAL_DMA_IRQHandler+0x40c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d031      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a23      	ldr	r2, [pc, #140]	; (80036fc <HAL_DMA_IRQHandler+0x410>)
 8003670:	4293      	cmp	r3, r2
 8003672:	d02c      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a21      	ldr	r2, [pc, #132]	; (8003700 <HAL_DMA_IRQHandler+0x414>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d027      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a20      	ldr	r2, [pc, #128]	; (8003704 <HAL_DMA_IRQHandler+0x418>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d022      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	4a1e      	ldr	r2, [pc, #120]	; (8003708 <HAL_DMA_IRQHandler+0x41c>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d01d      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a1d      	ldr	r2, [pc, #116]	; (800370c <HAL_DMA_IRQHandler+0x420>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d018      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_DMA_IRQHandler+0x424>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_DMA_IRQHandler+0x428>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d00e      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a18      	ldr	r2, [pc, #96]	; (8003718 <HAL_DMA_IRQHandler+0x42c>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d009      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a17      	ldr	r2, [pc, #92]	; (800371c <HAL_DMA_IRQHandler+0x430>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d004      	beq.n	80036ce <HAL_DMA_IRQHandler+0x3e2>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a15      	ldr	r2, [pc, #84]	; (8003720 <HAL_DMA_IRQHandler+0x434>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d12a      	bne.n	8003724 <HAL_DMA_IRQHandler+0x438>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0302 	and.w	r3, r3, #2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	bf14      	ite	ne
 80036dc:	2301      	movne	r3, #1
 80036de:	2300      	moveq	r3, #0
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	e023      	b.n	800372c <HAL_DMA_IRQHandler+0x440>
 80036e4:	40020010 	.word	0x40020010
 80036e8:	40020028 	.word	0x40020028
 80036ec:	40020040 	.word	0x40020040
 80036f0:	40020058 	.word	0x40020058
 80036f4:	40020070 	.word	0x40020070
 80036f8:	40020088 	.word	0x40020088
 80036fc:	400200a0 	.word	0x400200a0
 8003700:	400200b8 	.word	0x400200b8
 8003704:	40020410 	.word	0x40020410
 8003708:	40020428 	.word	0x40020428
 800370c:	40020440 	.word	0x40020440
 8003710:	40020458 	.word	0x40020458
 8003714:	40020470 	.word	0x40020470
 8003718:	40020488 	.word	0x40020488
 800371c:	400204a0 	.word	0x400204a0
 8003720:	400204b8 	.word	0x400204b8
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2300      	movs	r3, #0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d00d      	beq.n	800374c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003734:	f003 031f 	and.w	r3, r3, #31
 8003738:	2204      	movs	r2, #4
 800373a:	409a      	lsls	r2, r3
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003744:	f043 0204 	orr.w	r2, r3, #4
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003750:	f003 031f 	and.w	r3, r3, #31
 8003754:	2210      	movs	r2, #16
 8003756:	409a      	lsls	r2, r3
 8003758:	69bb      	ldr	r3, [r7, #24]
 800375a:	4013      	ands	r3, r2
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 80a6 	beq.w	80038ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a85      	ldr	r2, [pc, #532]	; (800397c <HAL_DMA_IRQHandler+0x690>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d04a      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a83      	ldr	r2, [pc, #524]	; (8003980 <HAL_DMA_IRQHandler+0x694>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d045      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a82      	ldr	r2, [pc, #520]	; (8003984 <HAL_DMA_IRQHandler+0x698>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d040      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a80      	ldr	r2, [pc, #512]	; (8003988 <HAL_DMA_IRQHandler+0x69c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d03b      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a7f      	ldr	r2, [pc, #508]	; (800398c <HAL_DMA_IRQHandler+0x6a0>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d036      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a7d      	ldr	r2, [pc, #500]	; (8003990 <HAL_DMA_IRQHandler+0x6a4>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d031      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a7c      	ldr	r2, [pc, #496]	; (8003994 <HAL_DMA_IRQHandler+0x6a8>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d02c      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a7a      	ldr	r2, [pc, #488]	; (8003998 <HAL_DMA_IRQHandler+0x6ac>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d027      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a79      	ldr	r2, [pc, #484]	; (800399c <HAL_DMA_IRQHandler+0x6b0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d022      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a77      	ldr	r2, [pc, #476]	; (80039a0 <HAL_DMA_IRQHandler+0x6b4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d01d      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a76      	ldr	r2, [pc, #472]	; (80039a4 <HAL_DMA_IRQHandler+0x6b8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d018      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a74      	ldr	r2, [pc, #464]	; (80039a8 <HAL_DMA_IRQHandler+0x6bc>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d013      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a73      	ldr	r2, [pc, #460]	; (80039ac <HAL_DMA_IRQHandler+0x6c0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d00e      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a71      	ldr	r2, [pc, #452]	; (80039b0 <HAL_DMA_IRQHandler+0x6c4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d009      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a70      	ldr	r2, [pc, #448]	; (80039b4 <HAL_DMA_IRQHandler+0x6c8>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d004      	beq.n	8003802 <HAL_DMA_IRQHandler+0x516>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a6e      	ldr	r2, [pc, #440]	; (80039b8 <HAL_DMA_IRQHandler+0x6cc>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d10a      	bne.n	8003818 <HAL_DMA_IRQHandler+0x52c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 0308 	and.w	r3, r3, #8
 800380c:	2b00      	cmp	r3, #0
 800380e:	bf14      	ite	ne
 8003810:	2301      	movne	r3, #1
 8003812:	2300      	moveq	r3, #0
 8003814:	b2db      	uxtb	r3, r3
 8003816:	e009      	b.n	800382c <HAL_DMA_IRQHandler+0x540>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0304 	and.w	r3, r3, #4
 8003822:	2b00      	cmp	r3, #0
 8003824:	bf14      	ite	ne
 8003826:	2301      	movne	r3, #1
 8003828:	2300      	moveq	r3, #0
 800382a:	b2db      	uxtb	r3, r3
 800382c:	2b00      	cmp	r3, #0
 800382e:	d03e      	beq.n	80038ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	f003 031f 	and.w	r3, r3, #31
 8003838:	2210      	movs	r2, #16
 800383a:	409a      	lsls	r2, r3
 800383c:	6a3b      	ldr	r3, [r7, #32]
 800383e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800384a:	2b00      	cmp	r3, #0
 800384c:	d018      	beq.n	8003880 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003858:	2b00      	cmp	r3, #0
 800385a:	d108      	bne.n	800386e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003860:	2b00      	cmp	r3, #0
 8003862:	d024      	beq.n	80038ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	4798      	blx	r3
 800386c:	e01f      	b.n	80038ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003872:	2b00      	cmp	r3, #0
 8003874:	d01b      	beq.n	80038ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	4798      	blx	r3
 800387e:	e016      	b.n	80038ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800388a:	2b00      	cmp	r3, #0
 800388c:	d107      	bne.n	800389e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681a      	ldr	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f022 0208 	bic.w	r2, r2, #8
 800389c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d003      	beq.n	80038ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b2:	f003 031f 	and.w	r3, r3, #31
 80038b6:	2220      	movs	r2, #32
 80038b8:	409a      	lsls	r2, r3
 80038ba:	69bb      	ldr	r3, [r7, #24]
 80038bc:	4013      	ands	r3, r2
 80038be:	2b00      	cmp	r3, #0
 80038c0:	f000 8110 	beq.w	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2c      	ldr	r2, [pc, #176]	; (800397c <HAL_DMA_IRQHandler+0x690>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d04a      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2b      	ldr	r2, [pc, #172]	; (8003980 <HAL_DMA_IRQHandler+0x694>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d045      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_DMA_IRQHandler+0x698>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d040      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a28      	ldr	r2, [pc, #160]	; (8003988 <HAL_DMA_IRQHandler+0x69c>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d03b      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	4a26      	ldr	r2, [pc, #152]	; (800398c <HAL_DMA_IRQHandler+0x6a0>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d036      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4a25      	ldr	r2, [pc, #148]	; (8003990 <HAL_DMA_IRQHandler+0x6a4>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d031      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a23      	ldr	r2, [pc, #140]	; (8003994 <HAL_DMA_IRQHandler+0x6a8>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d02c      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a22      	ldr	r2, [pc, #136]	; (8003998 <HAL_DMA_IRQHandler+0x6ac>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d027      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a20      	ldr	r2, [pc, #128]	; (800399c <HAL_DMA_IRQHandler+0x6b0>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d022      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a1f      	ldr	r2, [pc, #124]	; (80039a0 <HAL_DMA_IRQHandler+0x6b4>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d01d      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4a1d      	ldr	r2, [pc, #116]	; (80039a4 <HAL_DMA_IRQHandler+0x6b8>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d018      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a1c      	ldr	r2, [pc, #112]	; (80039a8 <HAL_DMA_IRQHandler+0x6bc>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d013      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a1a      	ldr	r2, [pc, #104]	; (80039ac <HAL_DMA_IRQHandler+0x6c0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00e      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a19      	ldr	r2, [pc, #100]	; (80039b0 <HAL_DMA_IRQHandler+0x6c4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d009      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a17      	ldr	r2, [pc, #92]	; (80039b4 <HAL_DMA_IRQHandler+0x6c8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d004      	beq.n	8003964 <HAL_DMA_IRQHandler+0x678>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_DMA_IRQHandler+0x6cc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d12b      	bne.n	80039bc <HAL_DMA_IRQHandler+0x6d0>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0310 	and.w	r3, r3, #16
 800396e:	2b00      	cmp	r3, #0
 8003970:	bf14      	ite	ne
 8003972:	2301      	movne	r3, #1
 8003974:	2300      	moveq	r3, #0
 8003976:	b2db      	uxtb	r3, r3
 8003978:	e02a      	b.n	80039d0 <HAL_DMA_IRQHandler+0x6e4>
 800397a:	bf00      	nop
 800397c:	40020010 	.word	0x40020010
 8003980:	40020028 	.word	0x40020028
 8003984:	40020040 	.word	0x40020040
 8003988:	40020058 	.word	0x40020058
 800398c:	40020070 	.word	0x40020070
 8003990:	40020088 	.word	0x40020088
 8003994:	400200a0 	.word	0x400200a0
 8003998:	400200b8 	.word	0x400200b8
 800399c:	40020410 	.word	0x40020410
 80039a0:	40020428 	.word	0x40020428
 80039a4:	40020440 	.word	0x40020440
 80039a8:	40020458 	.word	0x40020458
 80039ac:	40020470 	.word	0x40020470
 80039b0:	40020488 	.word	0x40020488
 80039b4:	400204a0 	.word	0x400204a0
 80039b8:	400204b8 	.word	0x400204b8
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	bf14      	ite	ne
 80039ca:	2301      	movne	r3, #1
 80039cc:	2300      	moveq	r3, #0
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 8087 	beq.w	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	2220      	movs	r2, #32
 80039e0:	409a      	lsls	r2, r3
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	2b04      	cmp	r3, #4
 80039f0:	d139      	bne.n	8003a66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	681a      	ldr	r2, [r3, #0]
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f022 0216 	bic.w	r2, r2, #22
 8003a00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	695a      	ldr	r2, [r3, #20]
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d103      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x736>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f022 0208 	bic.w	r2, r2, #8
 8003a30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a36:	f003 031f 	and.w	r3, r3, #31
 8003a3a:	223f      	movs	r2, #63	; 0x3f
 8003a3c:	409a      	lsls	r2, r3
 8003a3e:	6a3b      	ldr	r3, [r7, #32]
 8003a40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	f000 834a 	beq.w	80040f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4798      	blx	r3
          }
          return;
 8003a64:	e344      	b.n	80040f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d018      	beq.n	8003aa6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d108      	bne.n	8003a94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d02c      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	4798      	blx	r3
 8003a92:	e027      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d023      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4798      	blx	r3
 8003aa4:	e01e      	b.n	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d10f      	bne.n	8003ad4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f022 0210 	bic.w	r2, r2, #16
 8003ac2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d003      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	f000 8306 	beq.w	80040fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	f000 8088 	beq.w	8003c0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2204      	movs	r2, #4
 8003b00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a7a      	ldr	r2, [pc, #488]	; (8003cf4 <HAL_DMA_IRQHandler+0xa08>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d04a      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a79      	ldr	r2, [pc, #484]	; (8003cf8 <HAL_DMA_IRQHandler+0xa0c>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d045      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	4a77      	ldr	r2, [pc, #476]	; (8003cfc <HAL_DMA_IRQHandler+0xa10>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d040      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a76      	ldr	r2, [pc, #472]	; (8003d00 <HAL_DMA_IRQHandler+0xa14>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d03b      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a74      	ldr	r2, [pc, #464]	; (8003d04 <HAL_DMA_IRQHandler+0xa18>)
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d036      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4a73      	ldr	r2, [pc, #460]	; (8003d08 <HAL_DMA_IRQHandler+0xa1c>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d031      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4a71      	ldr	r2, [pc, #452]	; (8003d0c <HAL_DMA_IRQHandler+0xa20>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d02c      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a70      	ldr	r2, [pc, #448]	; (8003d10 <HAL_DMA_IRQHandler+0xa24>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d027      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a6e      	ldr	r2, [pc, #440]	; (8003d14 <HAL_DMA_IRQHandler+0xa28>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d022      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a6d      	ldr	r2, [pc, #436]	; (8003d18 <HAL_DMA_IRQHandler+0xa2c>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d01d      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a6b      	ldr	r2, [pc, #428]	; (8003d1c <HAL_DMA_IRQHandler+0xa30>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d018      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	4a6a      	ldr	r2, [pc, #424]	; (8003d20 <HAL_DMA_IRQHandler+0xa34>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d013      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a68      	ldr	r2, [pc, #416]	; (8003d24 <HAL_DMA_IRQHandler+0xa38>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d00e      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a67      	ldr	r2, [pc, #412]	; (8003d28 <HAL_DMA_IRQHandler+0xa3c>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d009      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a65      	ldr	r2, [pc, #404]	; (8003d2c <HAL_DMA_IRQHandler+0xa40>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d004      	beq.n	8003ba4 <HAL_DMA_IRQHandler+0x8b8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a64      	ldr	r2, [pc, #400]	; (8003d30 <HAL_DMA_IRQHandler+0xa44>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d108      	bne.n	8003bb6 <HAL_DMA_IRQHandler+0x8ca>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f022 0201 	bic.w	r2, r2, #1
 8003bb2:	601a      	str	r2, [r3, #0]
 8003bb4:	e007      	b.n	8003bc6 <HAL_DMA_IRQHandler+0x8da>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f022 0201 	bic.w	r2, r2, #1
 8003bc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	60fb      	str	r3, [r7, #12]
 8003bcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bce:	429a      	cmp	r2, r3
 8003bd0:	d307      	bcc.n	8003be2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0301 	and.w	r3, r3, #1
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f2      	bne.n	8003bc6 <HAL_DMA_IRQHandler+0x8da>
 8003be0:	e000      	b.n	8003be4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003be2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0301 	and.w	r3, r3, #1
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d004      	beq.n	8003bfc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2203      	movs	r2, #3
 8003bf6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003bfa:	e003      	b.n	8003c04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 8272 	beq.w	80040fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	4798      	blx	r3
 8003c1e:	e26c      	b.n	80040fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_DMA_IRQHandler+0xa48>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d022      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	4a42      	ldr	r2, [pc, #264]	; (8003d38 <HAL_DMA_IRQHandler+0xa4c>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d01d      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a40      	ldr	r2, [pc, #256]	; (8003d3c <HAL_DMA_IRQHandler+0xa50>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d018      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3f      	ldr	r2, [pc, #252]	; (8003d40 <HAL_DMA_IRQHandler+0xa54>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d013      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3d      	ldr	r2, [pc, #244]	; (8003d44 <HAL_DMA_IRQHandler+0xa58>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d00e      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a3c      	ldr	r2, [pc, #240]	; (8003d48 <HAL_DMA_IRQHandler+0xa5c>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d009      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a3a      	ldr	r2, [pc, #232]	; (8003d4c <HAL_DMA_IRQHandler+0xa60>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d004      	beq.n	8003c70 <HAL_DMA_IRQHandler+0x984>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a39      	ldr	r2, [pc, #228]	; (8003d50 <HAL_DMA_IRQHandler+0xa64>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d101      	bne.n	8003c74 <HAL_DMA_IRQHandler+0x988>
 8003c70:	2301      	movs	r3, #1
 8003c72:	e000      	b.n	8003c76 <HAL_DMA_IRQHandler+0x98a>
 8003c74:	2300      	movs	r3, #0
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	f000 823f 	beq.w	80040fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c88:	f003 031f 	and.w	r3, r3, #31
 8003c8c:	2204      	movs	r2, #4
 8003c8e:	409a      	lsls	r2, r3
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	4013      	ands	r3, r2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80cd 	beq.w	8003e34 <HAL_DMA_IRQHandler+0xb48>
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f003 0304 	and.w	r3, r3, #4
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	f000 80c7 	beq.w	8003e34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003caa:	f003 031f 	and.w	r3, r3, #31
 8003cae:	2204      	movs	r2, #4
 8003cb0:	409a      	lsls	r2, r3
 8003cb2:	69fb      	ldr	r3, [r7, #28]
 8003cb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d049      	beq.n	8003d54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d109      	bne.n	8003cde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 8210 	beq.w	80040f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cdc:	e20a      	b.n	80040f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f000 8206 	beq.w	80040f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003cf0:	e200      	b.n	80040f4 <HAL_DMA_IRQHandler+0xe08>
 8003cf2:	bf00      	nop
 8003cf4:	40020010 	.word	0x40020010
 8003cf8:	40020028 	.word	0x40020028
 8003cfc:	40020040 	.word	0x40020040
 8003d00:	40020058 	.word	0x40020058
 8003d04:	40020070 	.word	0x40020070
 8003d08:	40020088 	.word	0x40020088
 8003d0c:	400200a0 	.word	0x400200a0
 8003d10:	400200b8 	.word	0x400200b8
 8003d14:	40020410 	.word	0x40020410
 8003d18:	40020428 	.word	0x40020428
 8003d1c:	40020440 	.word	0x40020440
 8003d20:	40020458 	.word	0x40020458
 8003d24:	40020470 	.word	0x40020470
 8003d28:	40020488 	.word	0x40020488
 8003d2c:	400204a0 	.word	0x400204a0
 8003d30:	400204b8 	.word	0x400204b8
 8003d34:	58025408 	.word	0x58025408
 8003d38:	5802541c 	.word	0x5802541c
 8003d3c:	58025430 	.word	0x58025430
 8003d40:	58025444 	.word	0x58025444
 8003d44:	58025458 	.word	0x58025458
 8003d48:	5802546c 	.word	0x5802546c
 8003d4c:	58025480 	.word	0x58025480
 8003d50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	f003 0320 	and.w	r3, r3, #32
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d160      	bne.n	8003e20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a7f      	ldr	r2, [pc, #508]	; (8003f60 <HAL_DMA_IRQHandler+0xc74>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d04a      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a7d      	ldr	r2, [pc, #500]	; (8003f64 <HAL_DMA_IRQHandler+0xc78>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d045      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a7c      	ldr	r2, [pc, #496]	; (8003f68 <HAL_DMA_IRQHandler+0xc7c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d040      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a7a      	ldr	r2, [pc, #488]	; (8003f6c <HAL_DMA_IRQHandler+0xc80>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d03b      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a79      	ldr	r2, [pc, #484]	; (8003f70 <HAL_DMA_IRQHandler+0xc84>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d036      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a77      	ldr	r2, [pc, #476]	; (8003f74 <HAL_DMA_IRQHandler+0xc88>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d031      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a76      	ldr	r2, [pc, #472]	; (8003f78 <HAL_DMA_IRQHandler+0xc8c>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d02c      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a74      	ldr	r2, [pc, #464]	; (8003f7c <HAL_DMA_IRQHandler+0xc90>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d027      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a73      	ldr	r2, [pc, #460]	; (8003f80 <HAL_DMA_IRQHandler+0xc94>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d022      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a71      	ldr	r2, [pc, #452]	; (8003f84 <HAL_DMA_IRQHandler+0xc98>)
 8003dbe:	4293      	cmp	r3, r2
 8003dc0:	d01d      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a70      	ldr	r2, [pc, #448]	; (8003f88 <HAL_DMA_IRQHandler+0xc9c>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d018      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a6e      	ldr	r2, [pc, #440]	; (8003f8c <HAL_DMA_IRQHandler+0xca0>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d013      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a6d      	ldr	r2, [pc, #436]	; (8003f90 <HAL_DMA_IRQHandler+0xca4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d00e      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	4a6b      	ldr	r2, [pc, #428]	; (8003f94 <HAL_DMA_IRQHandler+0xca8>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d009      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4a6a      	ldr	r2, [pc, #424]	; (8003f98 <HAL_DMA_IRQHandler+0xcac>)
 8003df0:	4293      	cmp	r3, r2
 8003df2:	d004      	beq.n	8003dfe <HAL_DMA_IRQHandler+0xb12>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a68      	ldr	r2, [pc, #416]	; (8003f9c <HAL_DMA_IRQHandler+0xcb0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d108      	bne.n	8003e10 <HAL_DMA_IRQHandler+0xb24>
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f022 0208 	bic.w	r2, r2, #8
 8003e0c:	601a      	str	r2, [r3, #0]
 8003e0e:	e007      	b.n	8003e20 <HAL_DMA_IRQHandler+0xb34>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	681a      	ldr	r2, [r3, #0]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f022 0204 	bic.w	r2, r2, #4
 8003e1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	f000 8165 	beq.w	80040f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e32:	e15f      	b.n	80040f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e38:	f003 031f 	and.w	r3, r3, #31
 8003e3c:	2202      	movs	r2, #2
 8003e3e:	409a      	lsls	r2, r3
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	4013      	ands	r3, r2
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	f000 80c5 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xce8>
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f003 0302 	and.w	r3, r3, #2
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80bf 	beq.w	8003fd4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e5a:	f003 031f 	and.w	r3, r3, #31
 8003e5e:	2202      	movs	r2, #2
 8003e60:	409a      	lsls	r2, r3
 8003e62:	69fb      	ldr	r3, [r7, #28]
 8003e64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d018      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d109      	bne.n	8003e8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 813a 	beq.w	80040f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e8c:	e134      	b.n	80040f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	f000 8130 	beq.w	80040f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003ea0:	e12a      	b.n	80040f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0320 	and.w	r3, r3, #32
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 8089 	bne.w	8003fc0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a2b      	ldr	r2, [pc, #172]	; (8003f60 <HAL_DMA_IRQHandler+0xc74>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d04a      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	4a29      	ldr	r2, [pc, #164]	; (8003f64 <HAL_DMA_IRQHandler+0xc78>)
 8003ebe:	4293      	cmp	r3, r2
 8003ec0:	d045      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a28      	ldr	r2, [pc, #160]	; (8003f68 <HAL_DMA_IRQHandler+0xc7c>)
 8003ec8:	4293      	cmp	r3, r2
 8003eca:	d040      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_DMA_IRQHandler+0xc80>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d03b      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4a25      	ldr	r2, [pc, #148]	; (8003f70 <HAL_DMA_IRQHandler+0xc84>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d036      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <HAL_DMA_IRQHandler+0xc88>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d031      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a22      	ldr	r2, [pc, #136]	; (8003f78 <HAL_DMA_IRQHandler+0xc8c>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d02c      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a20      	ldr	r2, [pc, #128]	; (8003f7c <HAL_DMA_IRQHandler+0xc90>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d027      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1f      	ldr	r2, [pc, #124]	; (8003f80 <HAL_DMA_IRQHandler+0xc94>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d022      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a1d      	ldr	r2, [pc, #116]	; (8003f84 <HAL_DMA_IRQHandler+0xc98>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d01d      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a1c      	ldr	r2, [pc, #112]	; (8003f88 <HAL_DMA_IRQHandler+0xc9c>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d018      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1a      	ldr	r2, [pc, #104]	; (8003f8c <HAL_DMA_IRQHandler+0xca0>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d013      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4a19      	ldr	r2, [pc, #100]	; (8003f90 <HAL_DMA_IRQHandler+0xca4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d00e      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <HAL_DMA_IRQHandler+0xca8>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d009      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	4a16      	ldr	r2, [pc, #88]	; (8003f98 <HAL_DMA_IRQHandler+0xcac>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d004      	beq.n	8003f4e <HAL_DMA_IRQHandler+0xc62>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a14      	ldr	r2, [pc, #80]	; (8003f9c <HAL_DMA_IRQHandler+0xcb0>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d128      	bne.n	8003fa0 <HAL_DMA_IRQHandler+0xcb4>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f022 0214 	bic.w	r2, r2, #20
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	e027      	b.n	8003fb0 <HAL_DMA_IRQHandler+0xcc4>
 8003f60:	40020010 	.word	0x40020010
 8003f64:	40020028 	.word	0x40020028
 8003f68:	40020040 	.word	0x40020040
 8003f6c:	40020058 	.word	0x40020058
 8003f70:	40020070 	.word	0x40020070
 8003f74:	40020088 	.word	0x40020088
 8003f78:	400200a0 	.word	0x400200a0
 8003f7c:	400200b8 	.word	0x400200b8
 8003f80:	40020410 	.word	0x40020410
 8003f84:	40020428 	.word	0x40020428
 8003f88:	40020440 	.word	0x40020440
 8003f8c:	40020458 	.word	0x40020458
 8003f90:	40020470 	.word	0x40020470
 8003f94:	40020488 	.word	0x40020488
 8003f98:	400204a0 	.word	0x400204a0
 8003f9c:	400204b8 	.word	0x400204b8
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 020a 	bic.w	r2, r2, #10
 8003fae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8097 	beq.w	80040f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fd2:	e091      	b.n	80040f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd8:	f003 031f 	and.w	r3, r3, #31
 8003fdc:	2208      	movs	r2, #8
 8003fde:	409a      	lsls	r2, r3
 8003fe0:	697b      	ldr	r3, [r7, #20]
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	f000 8088 	beq.w	80040fa <HAL_DMA_IRQHandler+0xe0e>
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	f000 8082 	beq.w	80040fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a41      	ldr	r2, [pc, #260]	; (8004100 <HAL_DMA_IRQHandler+0xe14>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d04a      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a3f      	ldr	r2, [pc, #252]	; (8004104 <HAL_DMA_IRQHandler+0xe18>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d045      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a3e      	ldr	r2, [pc, #248]	; (8004108 <HAL_DMA_IRQHandler+0xe1c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d040      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a3c      	ldr	r2, [pc, #240]	; (800410c <HAL_DMA_IRQHandler+0xe20>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d03b      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <HAL_DMA_IRQHandler+0xe24>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d036      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a39      	ldr	r2, [pc, #228]	; (8004114 <HAL_DMA_IRQHandler+0xe28>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d031      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a38      	ldr	r2, [pc, #224]	; (8004118 <HAL_DMA_IRQHandler+0xe2c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d02c      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a36      	ldr	r2, [pc, #216]	; (800411c <HAL_DMA_IRQHandler+0xe30>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d027      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a35      	ldr	r2, [pc, #212]	; (8004120 <HAL_DMA_IRQHandler+0xe34>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d022      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a33      	ldr	r2, [pc, #204]	; (8004124 <HAL_DMA_IRQHandler+0xe38>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d01d      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a32      	ldr	r2, [pc, #200]	; (8004128 <HAL_DMA_IRQHandler+0xe3c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d018      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a30      	ldr	r2, [pc, #192]	; (800412c <HAL_DMA_IRQHandler+0xe40>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d013      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a2f      	ldr	r2, [pc, #188]	; (8004130 <HAL_DMA_IRQHandler+0xe44>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d00e      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a2d      	ldr	r2, [pc, #180]	; (8004134 <HAL_DMA_IRQHandler+0xe48>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d009      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a2c      	ldr	r2, [pc, #176]	; (8004138 <HAL_DMA_IRQHandler+0xe4c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d004      	beq.n	8004096 <HAL_DMA_IRQHandler+0xdaa>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a2a      	ldr	r2, [pc, #168]	; (800413c <HAL_DMA_IRQHandler+0xe50>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d108      	bne.n	80040a8 <HAL_DMA_IRQHandler+0xdbc>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f022 021c 	bic.w	r2, r2, #28
 80040a4:	601a      	str	r2, [r3, #0]
 80040a6:	e007      	b.n	80040b8 <HAL_DMA_IRQHandler+0xdcc>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f022 020e 	bic.w	r2, r2, #14
 80040b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040bc:	f003 031f 	and.w	r3, r3, #31
 80040c0:	2201      	movs	r2, #1
 80040c2:	409a      	lsls	r2, r3
 80040c4:	69fb      	ldr	r3, [r7, #28]
 80040c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2201      	movs	r2, #1
 80040d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	4798      	blx	r3
 80040ee:	e004      	b.n	80040fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80040f0:	bf00      	nop
 80040f2:	e002      	b.n	80040fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f4:	bf00      	nop
 80040f6:	e000      	b.n	80040fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80040fa:	3728      	adds	r7, #40	; 0x28
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40020010 	.word	0x40020010
 8004104:	40020028 	.word	0x40020028
 8004108:	40020040 	.word	0x40020040
 800410c:	40020058 	.word	0x40020058
 8004110:	40020070 	.word	0x40020070
 8004114:	40020088 	.word	0x40020088
 8004118:	400200a0 	.word	0x400200a0
 800411c:	400200b8 	.word	0x400200b8
 8004120:	40020410 	.word	0x40020410
 8004124:	40020428 	.word	0x40020428
 8004128:	40020440 	.word	0x40020440
 800412c:	40020458 	.word	0x40020458
 8004130:	40020470 	.word	0x40020470
 8004134:	40020488 	.word	0x40020488
 8004138:	400204a0 	.word	0x400204a0
 800413c:	400204b8 	.word	0x400204b8

08004140 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004140:	b480      	push	{r7}
 8004142:	b085      	sub	sp, #20
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a42      	ldr	r2, [pc, #264]	; (8004258 <DMA_CalcBaseAndBitshift+0x118>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d04a      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a41      	ldr	r2, [pc, #260]	; (800425c <DMA_CalcBaseAndBitshift+0x11c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d045      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a3f      	ldr	r2, [pc, #252]	; (8004260 <DMA_CalcBaseAndBitshift+0x120>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d040      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a3e      	ldr	r2, [pc, #248]	; (8004264 <DMA_CalcBaseAndBitshift+0x124>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d03b      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <DMA_CalcBaseAndBitshift+0x128>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d036      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a3b      	ldr	r2, [pc, #236]	; (800426c <DMA_CalcBaseAndBitshift+0x12c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d031      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a39      	ldr	r2, [pc, #228]	; (8004270 <DMA_CalcBaseAndBitshift+0x130>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d02c      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a38      	ldr	r2, [pc, #224]	; (8004274 <DMA_CalcBaseAndBitshift+0x134>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d027      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a36      	ldr	r2, [pc, #216]	; (8004278 <DMA_CalcBaseAndBitshift+0x138>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d022      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a35      	ldr	r2, [pc, #212]	; (800427c <DMA_CalcBaseAndBitshift+0x13c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d01d      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a33      	ldr	r2, [pc, #204]	; (8004280 <DMA_CalcBaseAndBitshift+0x140>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d018      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4a32      	ldr	r2, [pc, #200]	; (8004284 <DMA_CalcBaseAndBitshift+0x144>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d013      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a30      	ldr	r2, [pc, #192]	; (8004288 <DMA_CalcBaseAndBitshift+0x148>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d00e      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2f      	ldr	r2, [pc, #188]	; (800428c <DMA_CalcBaseAndBitshift+0x14c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d009      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a2d      	ldr	r2, [pc, #180]	; (8004290 <DMA_CalcBaseAndBitshift+0x150>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d004      	beq.n	80041e8 <DMA_CalcBaseAndBitshift+0xa8>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	4a2c      	ldr	r2, [pc, #176]	; (8004294 <DMA_CalcBaseAndBitshift+0x154>)
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d101      	bne.n	80041ec <DMA_CalcBaseAndBitshift+0xac>
 80041e8:	2301      	movs	r3, #1
 80041ea:	e000      	b.n	80041ee <DMA_CalcBaseAndBitshift+0xae>
 80041ec:	2300      	movs	r3, #0
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d024      	beq.n	800423c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	3b10      	subs	r3, #16
 80041fa:	4a27      	ldr	r2, [pc, #156]	; (8004298 <DMA_CalcBaseAndBitshift+0x158>)
 80041fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004200:	091b      	lsrs	r3, r3, #4
 8004202:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f003 0307 	and.w	r3, r3, #7
 800420a:	4a24      	ldr	r2, [pc, #144]	; (800429c <DMA_CalcBaseAndBitshift+0x15c>)
 800420c:	5cd3      	ldrb	r3, [r2, r3]
 800420e:	461a      	mov	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2b03      	cmp	r3, #3
 8004218:	d908      	bls.n	800422c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	461a      	mov	r2, r3
 8004220:	4b1f      	ldr	r3, [pc, #124]	; (80042a0 <DMA_CalcBaseAndBitshift+0x160>)
 8004222:	4013      	ands	r3, r2
 8004224:	1d1a      	adds	r2, r3, #4
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	659a      	str	r2, [r3, #88]	; 0x58
 800422a:	e00d      	b.n	8004248 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	461a      	mov	r2, r3
 8004232:	4b1b      	ldr	r3, [pc, #108]	; (80042a0 <DMA_CalcBaseAndBitshift+0x160>)
 8004234:	4013      	ands	r3, r2
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	6593      	str	r3, [r2, #88]	; 0x58
 800423a:	e005      	b.n	8004248 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800424c:	4618      	mov	r0, r3
 800424e:	3714      	adds	r7, #20
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr
 8004258:	40020010 	.word	0x40020010
 800425c:	40020028 	.word	0x40020028
 8004260:	40020040 	.word	0x40020040
 8004264:	40020058 	.word	0x40020058
 8004268:	40020070 	.word	0x40020070
 800426c:	40020088 	.word	0x40020088
 8004270:	400200a0 	.word	0x400200a0
 8004274:	400200b8 	.word	0x400200b8
 8004278:	40020410 	.word	0x40020410
 800427c:	40020428 	.word	0x40020428
 8004280:	40020440 	.word	0x40020440
 8004284:	40020458 	.word	0x40020458
 8004288:	40020470 	.word	0x40020470
 800428c:	40020488 	.word	0x40020488
 8004290:	400204a0 	.word	0x400204a0
 8004294:	400204b8 	.word	0x400204b8
 8004298:	aaaaaaab 	.word	0xaaaaaaab
 800429c:	0800a4b4 	.word	0x0800a4b4
 80042a0:	fffffc00 	.word	0xfffffc00

080042a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	699b      	ldr	r3, [r3, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d120      	bne.n	80042fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	2b03      	cmp	r3, #3
 80042be:	d858      	bhi.n	8004372 <DMA_CheckFifoParam+0xce>
 80042c0:	a201      	add	r2, pc, #4	; (adr r2, 80042c8 <DMA_CheckFifoParam+0x24>)
 80042c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c6:	bf00      	nop
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042eb 	.word	0x080042eb
 80042d0:	080042d9 	.word	0x080042d9
 80042d4:	08004373 	.word	0x08004373
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d048      	beq.n	8004376 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042e8:	e045      	b.n	8004376 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80042f2:	d142      	bne.n	800437a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80042f8:	e03f      	b.n	800437a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004302:	d123      	bne.n	800434c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004308:	2b03      	cmp	r3, #3
 800430a:	d838      	bhi.n	800437e <DMA_CheckFifoParam+0xda>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <DMA_CheckFifoParam+0x70>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	08004325 	.word	0x08004325
 8004318:	0800432b 	.word	0x0800432b
 800431c:	08004325 	.word	0x08004325
 8004320:	0800433d 	.word	0x0800433d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8004324:	2301      	movs	r3, #1
 8004326:	73fb      	strb	r3, [r7, #15]
        break;
 8004328:	e030      	b.n	800438c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004332:	2b00      	cmp	r3, #0
 8004334:	d025      	beq.n	8004382 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800433a:	e022      	b.n	8004382 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004340:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004344:	d11f      	bne.n	8004386 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8004346:	2301      	movs	r3, #1
 8004348:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800434a:	e01c      	b.n	8004386 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004350:	2b02      	cmp	r3, #2
 8004352:	d902      	bls.n	800435a <DMA_CheckFifoParam+0xb6>
 8004354:	2b03      	cmp	r3, #3
 8004356:	d003      	beq.n	8004360 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8004358:	e018      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	73fb      	strb	r3, [r7, #15]
        break;
 800435e:	e015      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004364:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004368:	2b00      	cmp	r3, #0
 800436a:	d00e      	beq.n	800438a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	73fb      	strb	r3, [r7, #15]
    break;
 8004370:	e00b      	b.n	800438a <DMA_CheckFifoParam+0xe6>
        break;
 8004372:	bf00      	nop
 8004374:	e00a      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        break;
 8004376:	bf00      	nop
 8004378:	e008      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        break;
 800437a:	bf00      	nop
 800437c:	e006      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        break;
 800437e:	bf00      	nop
 8004380:	e004      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        break;
 8004382:	bf00      	nop
 8004384:	e002      	b.n	800438c <DMA_CheckFifoParam+0xe8>
        break;
 8004386:	bf00      	nop
 8004388:	e000      	b.n	800438c <DMA_CheckFifoParam+0xe8>
    break;
 800438a:	bf00      	nop
    }
  }

  return status;
 800438c:	7bfb      	ldrb	r3, [r7, #15]
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop

0800439c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800439c:	b480      	push	{r7}
 800439e:	b085      	sub	sp, #20
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4a38      	ldr	r2, [pc, #224]	; (8004490 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d022      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a36      	ldr	r2, [pc, #216]	; (8004494 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01d      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a35      	ldr	r2, [pc, #212]	; (8004498 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d018      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a33      	ldr	r2, [pc, #204]	; (800449c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80043ce:	4293      	cmp	r3, r2
 80043d0:	d013      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a32      	ldr	r2, [pc, #200]	; (80044a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d00e      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a30      	ldr	r2, [pc, #192]	; (80044a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d009      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2f      	ldr	r2, [pc, #188]	; (80044a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d004      	beq.n	80043fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a2d      	ldr	r2, [pc, #180]	; (80044ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d101      	bne.n	80043fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01a      	beq.n	800443a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	b2db      	uxtb	r3, r3
 800440a:	3b08      	subs	r3, #8
 800440c:	4a28      	ldr	r2, [pc, #160]	; (80044b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800440e:	fba2 2303 	umull	r2, r3, r2, r3
 8004412:	091b      	lsrs	r3, r3, #4
 8004414:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8004416:	68fa      	ldr	r2, [r7, #12]
 8004418:	4b26      	ldr	r3, [pc, #152]	; (80044b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800441a:	4413      	add	r3, r2
 800441c:	009b      	lsls	r3, r3, #2
 800441e:	461a      	mov	r2, r3
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	4a24      	ldr	r2, [pc, #144]	; (80044b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8004428:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	f003 031f 	and.w	r3, r3, #31
 8004430:	2201      	movs	r2, #1
 8004432:	409a      	lsls	r2, r3
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8004438:	e024      	b.n	8004484 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	b2db      	uxtb	r3, r3
 8004440:	3b10      	subs	r3, #16
 8004442:	4a1e      	ldr	r2, [pc, #120]	; (80044bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8004444:	fba2 2303 	umull	r2, r3, r2, r3
 8004448:	091b      	lsrs	r3, r3, #4
 800444a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4a1c      	ldr	r2, [pc, #112]	; (80044c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d806      	bhi.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8004454:	68bb      	ldr	r3, [r7, #8]
 8004456:	4a1b      	ldr	r2, [pc, #108]	; (80044c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d902      	bls.n	8004462 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3308      	adds	r3, #8
 8004460:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	4b18      	ldr	r3, [pc, #96]	; (80044c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8004466:	4413      	add	r3, r2
 8004468:	009b      	lsls	r3, r3, #2
 800446a:	461a      	mov	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a16      	ldr	r2, [pc, #88]	; (80044cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8004474:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f003 031f 	and.w	r3, r3, #31
 800447c:	2201      	movs	r2, #1
 800447e:	409a      	lsls	r2, r3
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004484:	bf00      	nop
 8004486:	3714      	adds	r7, #20
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	58025408 	.word	0x58025408
 8004494:	5802541c 	.word	0x5802541c
 8004498:	58025430 	.word	0x58025430
 800449c:	58025444 	.word	0x58025444
 80044a0:	58025458 	.word	0x58025458
 80044a4:	5802546c 	.word	0x5802546c
 80044a8:	58025480 	.word	0x58025480
 80044ac:	58025494 	.word	0x58025494
 80044b0:	cccccccd 	.word	0xcccccccd
 80044b4:	16009600 	.word	0x16009600
 80044b8:	58025880 	.word	0x58025880
 80044bc:	aaaaaaab 	.word	0xaaaaaaab
 80044c0:	400204b8 	.word	0x400204b8
 80044c4:	4002040f 	.word	0x4002040f
 80044c8:	10008200 	.word	0x10008200
 80044cc:	40020880 	.word	0x40020880

080044d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b085      	sub	sp, #20
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d04a      	beq.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d847      	bhi.n	800457c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a25      	ldr	r2, [pc, #148]	; (8004588 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d022      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a24      	ldr	r2, [pc, #144]	; (800458c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d01d      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a22      	ldr	r2, [pc, #136]	; (8004590 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d018      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a21      	ldr	r2, [pc, #132]	; (8004594 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d013      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a1f      	ldr	r2, [pc, #124]	; (8004598 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d00e      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	4a1e      	ldr	r2, [pc, #120]	; (800459c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d009      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a1c      	ldr	r2, [pc, #112]	; (80045a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d004      	beq.n	800453c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a1b      	ldr	r2, [pc, #108]	; (80045a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8004538:	4293      	cmp	r3, r2
 800453a:	d101      	bne.n	8004540 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800453c:	2301      	movs	r3, #1
 800453e:	e000      	b.n	8004542 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8004540:	2300      	movs	r3, #0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00a      	beq.n	800455c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	4b17      	ldr	r3, [pc, #92]	; (80045a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800454a:	4413      	add	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	461a      	mov	r2, r3
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	4a15      	ldr	r2, [pc, #84]	; (80045ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8004558:	671a      	str	r2, [r3, #112]	; 0x70
 800455a:	e009      	b.n	8004570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	4b14      	ldr	r3, [pc, #80]	; (80045b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8004560:	4413      	add	r3, r2
 8004562:	009b      	lsls	r3, r3, #2
 8004564:	461a      	mov	r2, r3
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a11      	ldr	r2, [pc, #68]	; (80045b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800456e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	3b01      	subs	r3, #1
 8004574:	2201      	movs	r2, #1
 8004576:	409a      	lsls	r2, r3
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 800457c:	bf00      	nop
 800457e:	3714      	adds	r7, #20
 8004580:	46bd      	mov	sp, r7
 8004582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004586:	4770      	bx	lr
 8004588:	58025408 	.word	0x58025408
 800458c:	5802541c 	.word	0x5802541c
 8004590:	58025430 	.word	0x58025430
 8004594:	58025444 	.word	0x58025444
 8004598:	58025458 	.word	0x58025458
 800459c:	5802546c 	.word	0x5802546c
 80045a0:	58025480 	.word	0x58025480
 80045a4:	58025494 	.word	0x58025494
 80045a8:	1600963f 	.word	0x1600963f
 80045ac:	58025940 	.word	0x58025940
 80045b0:	1000823f 	.word	0x1000823f
 80045b4:	40020940 	.word	0x40020940

080045b8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b084      	sub	sp, #16
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d101      	bne.n	80045ca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80045c6:	2301      	movs	r3, #1
 80045c8:	e0cf      	b.n	800476a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d106      	bne.n	80045e2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2223      	movs	r2, #35	; 0x23
 80045d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80045dc:	6878      	ldr	r0, [r7, #4]
 80045de:	f7fd f907 	bl	80017f0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e2:	4b64      	ldr	r3, [pc, #400]	; (8004774 <HAL_ETH_Init+0x1bc>)
 80045e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045e8:	4a62      	ldr	r2, [pc, #392]	; (8004774 <HAL_ETH_Init+0x1bc>)
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80045f2:	4b60      	ldr	r3, [pc, #384]	; (8004774 <HAL_ETH_Init+0x1bc>)
 80045f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	60bb      	str	r3, [r7, #8]
 80045fe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	7a1b      	ldrb	r3, [r3, #8]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d103      	bne.n	8004610 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004608:	2000      	movs	r0, #0
 800460a:	f7fd fc8b 	bl	8001f24 <HAL_SYSCFG_ETHInterfaceSelect>
 800460e:	e003      	b.n	8004618 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004610:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004614:	f7fd fc86 	bl	8001f24 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004618:	4b57      	ldr	r3, [pc, #348]	; (8004778 <HAL_ETH_Init+0x1c0>)
 800461a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	6812      	ldr	r2, [r2, #0]
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004632:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004634:	f7fd fc3a 	bl	8001eac <HAL_GetTick>
 8004638:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800463a:	e011      	b.n	8004660 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800463c:	f7fd fc36 	bl	8001eac <HAL_GetTick>
 8004640:	4602      	mov	r2, r0
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	1ad3      	subs	r3, r2, r3
 8004646:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800464a:	d909      	bls.n	8004660 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2204      	movs	r2, #4
 8004650:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	22e0      	movs	r2, #224	; 0xe0
 8004658:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e084      	b.n	800476a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0301 	and.w	r3, r3, #1
 800466e:	2b00      	cmp	r3, #0
 8004670:	d1e4      	bne.n	800463c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f886 	bl	8004784 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004678:	f001 fefc 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 800467c:	4603      	mov	r3, r0
 800467e:	4a3f      	ldr	r2, [pc, #252]	; (800477c <HAL_ETH_Init+0x1c4>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	0c9a      	lsrs	r2, r3, #18
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	3a01      	subs	r2, #1
 800468c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fa71 	bl	8004b78 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800469e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80046a2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	6812      	ldr	r2, [r2, #0]
 80046aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046ae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046b2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	695b      	ldr	r3, [r3, #20]
 80046ba:	f003 0303 	and.w	r3, r3, #3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d009      	beq.n	80046d6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	2201      	movs	r2, #1
 80046c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	22e0      	movs	r2, #224	; 0xe0
 80046ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80046d2:	2301      	movs	r3, #1
 80046d4:	e049      	b.n	800476a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046de:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80046e2:	4b27      	ldr	r3, [pc, #156]	; (8004780 <HAL_ETH_Init+0x1c8>)
 80046e4:	4013      	ands	r3, r2
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	6952      	ldr	r2, [r2, #20]
 80046ea:	0051      	lsls	r1, r2, #1
 80046ec:	687a      	ldr	r2, [r7, #4]
 80046ee:	6812      	ldr	r2, [r2, #0]
 80046f0:	430b      	orrs	r3, r1
 80046f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046f6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f000 fad9 	bl	8004cb2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004700:	6878      	ldr	r0, [r7, #4]
 8004702:	f000 fb1f 	bl	8004d44 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	685b      	ldr	r3, [r3, #4]
 800470a:	3305      	adds	r3, #5
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	021a      	lsls	r2, r3, #8
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	3304      	adds	r3, #4
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	4619      	mov	r1, r3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	430a      	orrs	r2, r1
 8004720:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	3303      	adds	r3, #3
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	061a      	lsls	r2, r3, #24
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	3302      	adds	r3, #2
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	685b      	ldr	r3, [r3, #4]
 800473e:	3301      	adds	r3, #1
 8004740:	781b      	ldrb	r3, [r3, #0]
 8004742:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004744:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8004752:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8004754:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2210      	movs	r2, #16
 8004764:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004768:	2300      	movs	r3, #0
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	58024400 	.word	0x58024400
 8004778:	58000400 	.word	0x58000400
 800477c:	431bde83 	.word	0x431bde83
 8004780:	ffff8001 	.word	0xffff8001

08004784 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b084      	sub	sp, #16
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004794:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800479c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800479e:	f001 fe69 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 80047a2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	4a1e      	ldr	r2, [pc, #120]	; (8004820 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80047a8:	4293      	cmp	r3, r2
 80047aa:	d908      	bls.n	80047be <HAL_ETH_SetMDIOClockRange+0x3a>
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	4a1d      	ldr	r2, [pc, #116]	; (8004824 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d804      	bhi.n	80047be <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047ba:	60fb      	str	r3, [r7, #12]
 80047bc:	e027      	b.n	800480e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	4a18      	ldr	r2, [pc, #96]	; (8004824 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d908      	bls.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x54>
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a17      	ldr	r2, [pc, #92]	; (8004828 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d204      	bcs.n	80047d8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	e01a      	b.n	800480e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	4a13      	ldr	r2, [pc, #76]	; (8004828 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d303      	bcc.n	80047e8 <HAL_ETH_SetMDIOClockRange+0x64>
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	4a12      	ldr	r2, [pc, #72]	; (800482c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d911      	bls.n	800480c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	4a10      	ldr	r2, [pc, #64]	; (800482c <HAL_ETH_SetMDIOClockRange+0xa8>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d908      	bls.n	8004802 <HAL_ETH_SetMDIOClockRange+0x7e>
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	4a0f      	ldr	r2, [pc, #60]	; (8004830 <HAL_ETH_SetMDIOClockRange+0xac>)
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d804      	bhi.n	8004802 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	60fb      	str	r3, [r7, #12]
 8004800:	e005      	b.n	800480e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004808:	60fb      	str	r3, [r7, #12]
 800480a:	e000      	b.n	800480e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800480c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	68fa      	ldr	r2, [r7, #12]
 8004814:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8004818:	bf00      	nop
 800481a:	3710      	adds	r7, #16
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	01312cff 	.word	0x01312cff
 8004824:	02160ebf 	.word	0x02160ebf
 8004828:	03938700 	.word	0x03938700
 800482c:	05f5e0ff 	.word	0x05f5e0ff
 8004830:	08f0d17f 	.word	0x08f0d17f

08004834 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8004834:	b480      	push	{r7}
 8004836:	b085      	sub	sp, #20
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8004842:	683b      	ldr	r3, [r7, #0]
 8004844:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8004846:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	791b      	ldrb	r3, [r3, #4]
 800484c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800484e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	7b1b      	ldrb	r3, [r3, #12]
 8004854:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8004856:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	7b5b      	ldrb	r3, [r3, #13]
 800485c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800485e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	7b9b      	ldrb	r3, [r3, #14]
 8004864:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8004866:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	7bdb      	ldrb	r3, [r3, #15]
 800486c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800486e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004870:	683a      	ldr	r2, [r7, #0]
 8004872:	7c12      	ldrb	r2, [r2, #16]
 8004874:	2a00      	cmp	r2, #0
 8004876:	d102      	bne.n	800487e <ETH_SetMACConfig+0x4a>
 8004878:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800487c:	e000      	b.n	8004880 <ETH_SetMACConfig+0x4c>
 800487e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8004880:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8004882:	683a      	ldr	r2, [r7, #0]
 8004884:	7c52      	ldrb	r2, [r2, #17]
 8004886:	2a00      	cmp	r2, #0
 8004888:	d102      	bne.n	8004890 <ETH_SetMACConfig+0x5c>
 800488a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800488e:	e000      	b.n	8004892 <ETH_SetMACConfig+0x5e>
 8004890:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8004892:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	7c9b      	ldrb	r3, [r3, #18]
 8004898:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800489a:	431a      	orrs	r2, r3
               macconf->Speed |
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80048a0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80048a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	7f1b      	ldrb	r3, [r3, #28]
 80048ac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80048ae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80048b0:	683b      	ldr	r3, [r7, #0]
 80048b2:	7f5b      	ldrb	r3, [r3, #29]
 80048b4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80048b6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80048b8:	683a      	ldr	r2, [r7, #0]
 80048ba:	7f92      	ldrb	r2, [r2, #30]
 80048bc:	2a00      	cmp	r2, #0
 80048be:	d102      	bne.n	80048c6 <ETH_SetMACConfig+0x92>
 80048c0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048c4:	e000      	b.n	80048c8 <ETH_SetMACConfig+0x94>
 80048c6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80048c8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	7fdb      	ldrb	r3, [r3, #31]
 80048ce:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80048d0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80048d2:	683a      	ldr	r2, [r7, #0]
 80048d4:	f892 2020 	ldrb.w	r2, [r2, #32]
 80048d8:	2a00      	cmp	r2, #0
 80048da:	d102      	bne.n	80048e2 <ETH_SetMACConfig+0xae>
 80048dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e0:	e000      	b.n	80048e4 <ETH_SetMACConfig+0xb0>
 80048e2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80048e4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80048ea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048f2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80048f4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80048fa:	4313      	orrs	r3, r2
 80048fc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	4b56      	ldr	r3, [pc, #344]	; (8004a60 <ETH_SetMACConfig+0x22c>)
 8004906:	4013      	ands	r3, r2
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6812      	ldr	r2, [r2, #0]
 800490c:	68f9      	ldr	r1, [r7, #12]
 800490e:	430b      	orrs	r3, r1
 8004910:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004916:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800491e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8004920:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004928:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800492a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8004932:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8004934:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800493c:	2a00      	cmp	r2, #0
 800493e:	d102      	bne.n	8004946 <ETH_SetMACConfig+0x112>
 8004940:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004944:	e000      	b.n	8004948 <ETH_SetMACConfig+0x114>
 8004946:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8004948:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800494e:	4313      	orrs	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	685a      	ldr	r2, [r3, #4]
 8004958:	4b42      	ldr	r3, [pc, #264]	; (8004a64 <ETH_SetMACConfig+0x230>)
 800495a:	4013      	ands	r3, r2
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6812      	ldr	r2, [r2, #0]
 8004960:	68f9      	ldr	r1, [r7, #12]
 8004962:	430b      	orrs	r3, r1
 8004964:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800496c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8004972:	4313      	orrs	r3, r2
 8004974:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	4b3a      	ldr	r3, [pc, #232]	; (8004a68 <ETH_SetMACConfig+0x234>)
 800497e:	4013      	ands	r3, r2
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	6812      	ldr	r2, [r2, #0]
 8004984:	68f9      	ldr	r1, [r7, #12]
 8004986:	430b      	orrs	r3, r1
 8004988:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004990:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8004996:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8004998:	683a      	ldr	r2, [r7, #0]
 800499a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800499e:	2a00      	cmp	r2, #0
 80049a0:	d101      	bne.n	80049a6 <ETH_SetMACConfig+0x172>
 80049a2:	2280      	movs	r2, #128	; 0x80
 80049a4:	e000      	b.n	80049a8 <ETH_SetMACConfig+0x174>
 80049a6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80049a8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049ae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80049ba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80049be:	4013      	ands	r3, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	68f9      	ldr	r1, [r7, #12]
 80049c6:	430b      	orrs	r3, r1
 80049c8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80049d0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80049d8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80049da:	4313      	orrs	r3, r2
 80049dc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f023 0103 	bic.w	r1, r3, #3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	430a      	orrs	r2, r1
 80049f2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80049fe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	430a      	orrs	r2, r1
 8004a0c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a14:	683a      	ldr	r2, [r7, #0]
 8004a16:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8004a1a:	2a00      	cmp	r2, #0
 8004a1c:	d101      	bne.n	8004a22 <ETH_SetMACConfig+0x1ee>
 8004a1e:	2240      	movs	r2, #64	; 0x40
 8004a20:	e000      	b.n	8004a24 <ETH_SetMACConfig+0x1f0>
 8004a22:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004a24:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8004a2c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004a2e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004a36:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004a44:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	430a      	orrs	r2, r1
 8004a50:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004a54:	bf00      	nop
 8004a56:	3714      	adds	r7, #20
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5e:	4770      	bx	lr
 8004a60:	00048083 	.word	0x00048083
 8004a64:	c0f88000 	.word	0xc0f88000
 8004a68:	fffffef0 	.word	0xfffffef0

08004a6c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
 8004a74:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7e:	681a      	ldr	r2, [r3, #0]
 8004a80:	4b38      	ldr	r3, [pc, #224]	; (8004b64 <ETH_SetDMAConfig+0xf8>)
 8004a82:	4013      	ands	r3, r2
 8004a84:	683a      	ldr	r2, [r7, #0]
 8004a86:	6811      	ldr	r1, [r2, #0]
 8004a88:	687a      	ldr	r2, [r7, #4]
 8004a8a:	6812      	ldr	r2, [r2, #0]
 8004a8c:	430b      	orrs	r3, r1
 8004a8e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004a92:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	791b      	ldrb	r3, [r3, #4]
 8004a98:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004a9e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	7b1b      	ldrb	r3, [r3, #12]
 8004aa4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab2:	685a      	ldr	r2, [r3, #4]
 8004ab4:	4b2c      	ldr	r3, [pc, #176]	; (8004b68 <ETH_SetDMAConfig+0xfc>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6812      	ldr	r2, [r2, #0]
 8004abc:	68f9      	ldr	r1, [r7, #12]
 8004abe:	430b      	orrs	r3, r1
 8004ac0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ac4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	7b5b      	ldrb	r3, [r3, #13]
 8004aca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004adc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8004ae0:	4b22      	ldr	r3, [pc, #136]	; (8004b6c <ETH_SetDMAConfig+0x100>)
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	6812      	ldr	r2, [r2, #0]
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	430b      	orrs	r3, r1
 8004aec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004af0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	7d1b      	ldrb	r3, [r3, #20]
 8004afc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8004afe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	7f5b      	ldrb	r3, [r3, #29]
 8004b04:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004b16:	4b16      	ldr	r3, [pc, #88]	; (8004b70 <ETH_SetDMAConfig+0x104>)
 8004b18:	4013      	ands	r3, r2
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6812      	ldr	r2, [r2, #0]
 8004b1e:	68f9      	ldr	r1, [r7, #12]
 8004b20:	430b      	orrs	r3, r1
 8004b22:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b26:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	7f1b      	ldrb	r3, [r3, #28]
 8004b2e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004b30:	683b      	ldr	r3, [r7, #0]
 8004b32:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004b34:	4313      	orrs	r3, r2
 8004b36:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b40:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004b44:	4b0b      	ldr	r3, [pc, #44]	; (8004b74 <ETH_SetDMAConfig+0x108>)
 8004b46:	4013      	ands	r3, r2
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	6812      	ldr	r2, [r2, #0]
 8004b4c:	68f9      	ldr	r1, [r7, #12]
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004b54:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004b58:	bf00      	nop
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	ffff87fd 	.word	0xffff87fd
 8004b68:	ffff2ffe 	.word	0xffff2ffe
 8004b6c:	fffec000 	.word	0xfffec000
 8004b70:	ffc0efef 	.word	0xffc0efef
 8004b74:	7fc0ffff 	.word	0x7fc0ffff

08004b78 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b0a4      	sub	sp, #144	; 0x90
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004b80:	2301      	movs	r3, #1
 8004b82:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004b86:	2300      	movs	r3, #0
 8004b88:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8004bb4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004bb8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8004bc4:	2300      	movs	r3, #0
 8004bc6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8004bd0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8004bd4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8004bdc:	2300      	movs	r3, #0
 8004bde:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8004be0:	2301      	movs	r3, #1
 8004be2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8004be6:	2300      	movs	r3, #0
 8004be8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8004bec:	2300      	movs	r3, #0
 8004bee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004c04:	2300      	movs	r3, #0
 8004c06:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004c10:	2320      	movs	r3, #32
 8004c12:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004c22:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004c28:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004c2c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004c34:	2302      	movs	r3, #2
 8004c36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004c40:	2300      	movs	r3, #0
 8004c42:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004c46:	2300      	movs	r3, #0
 8004c48:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004c52:	2300      	movs	r3, #0
 8004c54:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8004c5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004c60:	4619      	mov	r1, r3
 8004c62:	6878      	ldr	r0, [r7, #4]
 8004c64:	f7ff fde6 	bl	8004834 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004c82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c86:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8004c8c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c90:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004c92:	2300      	movs	r3, #0
 8004c94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004c98:	f44f 7306 	mov.w	r3, #536	; 0x218
 8004c9c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8004c9e:	f107 0308 	add.w	r3, r7, #8
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff fee1 	bl	8004a6c <ETH_SetDMAConfig>
}
 8004caa:	bf00      	nop
 8004cac:	3790      	adds	r7, #144	; 0x90
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}

08004cb2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8004cb2:	b480      	push	{r7}
 8004cb4:	b085      	sub	sp, #20
 8004cb6:	af00      	add	r7, sp, #0
 8004cb8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	e01d      	b.n	8004cfc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	68d9      	ldr	r1, [r3, #12]
 8004cc4:	68fa      	ldr	r2, [r7, #12]
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	005b      	lsls	r3, r3, #1
 8004cca:	4413      	add	r3, r2
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	440b      	add	r3, r1
 8004cd0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8004cea:	68b9      	ldr	r1, [r7, #8]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	68fa      	ldr	r2, [r7, #12]
 8004cf0:	3206      	adds	r2, #6
 8004cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	60fb      	str	r3, [r7, #12]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b03      	cmp	r3, #3
 8004d00:	d9de      	bls.n	8004cc0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d10:	461a      	mov	r2, r3
 8004d12:	2303      	movs	r3, #3
 8004d14:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d24:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d34:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004d38:	bf00      	nop
 8004d3a:	3714      	adds	r7, #20
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr

08004d44 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004d44:	b480      	push	{r7}
 8004d46:	b085      	sub	sp, #20
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	e023      	b.n	8004d9a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6919      	ldr	r1, [r3, #16]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	005b      	lsls	r3, r3, #1
 8004d5c:	4413      	add	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	440b      	add	r3, r1
 8004d62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2200      	movs	r2, #0
 8004d68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	2200      	movs	r2, #0
 8004d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	2200      	movs	r2, #0
 8004d86:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004d88:	68b9      	ldr	r1, [r7, #8]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	68fa      	ldr	r2, [r7, #12]
 8004d8e:	3212      	adds	r2, #18
 8004d90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	3301      	adds	r3, #1
 8004d98:	60fb      	str	r3, [r7, #12]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d9d8      	bls.n	8004d52 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2200      	movs	r2, #0
 8004db6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc6:	461a      	mov	r2, r3
 8004dc8:	2303      	movs	r3, #3
 8004dca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	691a      	ldr	r2, [r3, #16]
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dda:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8004df2:	bf00      	nop
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
	...

08004e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b089      	sub	sp, #36	; 0x24
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8004e0e:	4b89      	ldr	r3, [pc, #548]	; (8005034 <HAL_GPIO_Init+0x234>)
 8004e10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004e12:	e194      	b.n	800513e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	681a      	ldr	r2, [r3, #0]
 8004e18:	2101      	movs	r1, #1
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8004e20:	4013      	ands	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 8186 	beq.w	8005138 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	f003 0303 	and.w	r3, r3, #3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d005      	beq.n	8004e44 <HAL_GPIO_Init+0x44>
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d130      	bne.n	8004ea6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e4a:	69fb      	ldr	r3, [r7, #28]
 8004e4c:	005b      	lsls	r3, r3, #1
 8004e4e:	2203      	movs	r2, #3
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	43db      	mvns	r3, r3
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	4013      	ands	r3, r2
 8004e5a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	68da      	ldr	r2, [r3, #12]
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	005b      	lsls	r3, r3, #1
 8004e64:	fa02 f303 	lsl.w	r3, r2, r3
 8004e68:	69ba      	ldr	r2, [r7, #24]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	69ba      	ldr	r2, [r7, #24]
 8004e72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4013      	ands	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	091b      	lsrs	r3, r3, #4
 8004e90:	f003 0201 	and.w	r2, r3, #1
 8004e94:	69fb      	ldr	r3, [r7, #28]
 8004e96:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9a:	69ba      	ldr	r2, [r7, #24]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	69ba      	ldr	r2, [r7, #24]
 8004ea4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	f003 0303 	and.w	r3, r3, #3
 8004eae:	2b03      	cmp	r3, #3
 8004eb0:	d017      	beq.n	8004ee2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004eb8:	69fb      	ldr	r3, [r7, #28]
 8004eba:	005b      	lsls	r3, r3, #1
 8004ebc:	2203      	movs	r2, #3
 8004ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec2:	43db      	mvns	r3, r3
 8004ec4:	69ba      	ldr	r2, [r7, #24]
 8004ec6:	4013      	ands	r3, r2
 8004ec8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	689a      	ldr	r2, [r3, #8]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	005b      	lsls	r3, r3, #1
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	4313      	orrs	r3, r2
 8004eda:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	69ba      	ldr	r2, [r7, #24]
 8004ee0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d123      	bne.n	8004f36 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	08da      	lsrs	r2, r3, #3
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	3208      	adds	r2, #8
 8004ef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004efa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f003 0307 	and.w	r3, r3, #7
 8004f02:	009b      	lsls	r3, r3, #2
 8004f04:	220f      	movs	r2, #15
 8004f06:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0a:	43db      	mvns	r3, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4013      	ands	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	691a      	ldr	r2, [r3, #16]
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f22:	69ba      	ldr	r2, [r7, #24]
 8004f24:	4313      	orrs	r3, r2
 8004f26:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	08da      	lsrs	r2, r3, #3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	3208      	adds	r2, #8
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	2203      	movs	r2, #3
 8004f42:	fa02 f303 	lsl.w	r3, r2, r3
 8004f46:	43db      	mvns	r3, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4013      	ands	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f003 0203 	and.w	r2, r3, #3
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	005b      	lsls	r3, r3, #1
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	4313      	orrs	r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	f000 80e0 	beq.w	8005138 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f78:	4b2f      	ldr	r3, [pc, #188]	; (8005038 <HAL_GPIO_Init+0x238>)
 8004f7a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f7e:	4a2e      	ldr	r2, [pc, #184]	; (8005038 <HAL_GPIO_Init+0x238>)
 8004f80:	f043 0302 	orr.w	r3, r3, #2
 8004f84:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f88:	4b2b      	ldr	r3, [pc, #172]	; (8005038 <HAL_GPIO_Init+0x238>)
 8004f8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f8e:	f003 0302 	and.w	r3, r3, #2
 8004f92:	60fb      	str	r3, [r7, #12]
 8004f94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f96:	4a29      	ldr	r2, [pc, #164]	; (800503c <HAL_GPIO_Init+0x23c>)
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	089b      	lsrs	r3, r3, #2
 8004f9c:	3302      	adds	r3, #2
 8004f9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004fa4:	69fb      	ldr	r3, [r7, #28]
 8004fa6:	f003 0303 	and.w	r3, r3, #3
 8004faa:	009b      	lsls	r3, r3, #2
 8004fac:	220f      	movs	r2, #15
 8004fae:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	4a20      	ldr	r2, [pc, #128]	; (8005040 <HAL_GPIO_Init+0x240>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d052      	beq.n	8005068 <HAL_GPIO_Init+0x268>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	4a1f      	ldr	r2, [pc, #124]	; (8005044 <HAL_GPIO_Init+0x244>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d031      	beq.n	800502e <HAL_GPIO_Init+0x22e>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	4a1e      	ldr	r2, [pc, #120]	; (8005048 <HAL_GPIO_Init+0x248>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d02b      	beq.n	800502a <HAL_GPIO_Init+0x22a>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	4a1d      	ldr	r2, [pc, #116]	; (800504c <HAL_GPIO_Init+0x24c>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d025      	beq.n	8005026 <HAL_GPIO_Init+0x226>
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4a1c      	ldr	r2, [pc, #112]	; (8005050 <HAL_GPIO_Init+0x250>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d01f      	beq.n	8005022 <HAL_GPIO_Init+0x222>
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	4a1b      	ldr	r2, [pc, #108]	; (8005054 <HAL_GPIO_Init+0x254>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d019      	beq.n	800501e <HAL_GPIO_Init+0x21e>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a1a      	ldr	r2, [pc, #104]	; (8005058 <HAL_GPIO_Init+0x258>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d013      	beq.n	800501a <HAL_GPIO_Init+0x21a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_GPIO_Init+0x25c>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d00d      	beq.n	8005016 <HAL_GPIO_Init+0x216>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_GPIO_Init+0x260>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d007      	beq.n	8005012 <HAL_GPIO_Init+0x212>
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a17      	ldr	r2, [pc, #92]	; (8005064 <HAL_GPIO_Init+0x264>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d101      	bne.n	800500e <HAL_GPIO_Init+0x20e>
 800500a:	2309      	movs	r3, #9
 800500c:	e02d      	b.n	800506a <HAL_GPIO_Init+0x26a>
 800500e:	230a      	movs	r3, #10
 8005010:	e02b      	b.n	800506a <HAL_GPIO_Init+0x26a>
 8005012:	2308      	movs	r3, #8
 8005014:	e029      	b.n	800506a <HAL_GPIO_Init+0x26a>
 8005016:	2307      	movs	r3, #7
 8005018:	e027      	b.n	800506a <HAL_GPIO_Init+0x26a>
 800501a:	2306      	movs	r3, #6
 800501c:	e025      	b.n	800506a <HAL_GPIO_Init+0x26a>
 800501e:	2305      	movs	r3, #5
 8005020:	e023      	b.n	800506a <HAL_GPIO_Init+0x26a>
 8005022:	2304      	movs	r3, #4
 8005024:	e021      	b.n	800506a <HAL_GPIO_Init+0x26a>
 8005026:	2303      	movs	r3, #3
 8005028:	e01f      	b.n	800506a <HAL_GPIO_Init+0x26a>
 800502a:	2302      	movs	r3, #2
 800502c:	e01d      	b.n	800506a <HAL_GPIO_Init+0x26a>
 800502e:	2301      	movs	r3, #1
 8005030:	e01b      	b.n	800506a <HAL_GPIO_Init+0x26a>
 8005032:	bf00      	nop
 8005034:	58000080 	.word	0x58000080
 8005038:	58024400 	.word	0x58024400
 800503c:	58000400 	.word	0x58000400
 8005040:	58020000 	.word	0x58020000
 8005044:	58020400 	.word	0x58020400
 8005048:	58020800 	.word	0x58020800
 800504c:	58020c00 	.word	0x58020c00
 8005050:	58021000 	.word	0x58021000
 8005054:	58021400 	.word	0x58021400
 8005058:	58021800 	.word	0x58021800
 800505c:	58021c00 	.word	0x58021c00
 8005060:	58022000 	.word	0x58022000
 8005064:	58022400 	.word	0x58022400
 8005068:	2300      	movs	r3, #0
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	f002 0203 	and.w	r2, r2, #3
 8005070:	0092      	lsls	r2, r2, #2
 8005072:	4093      	lsls	r3, r2
 8005074:	69ba      	ldr	r2, [r7, #24]
 8005076:	4313      	orrs	r3, r2
 8005078:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800507a:	4938      	ldr	r1, [pc, #224]	; (800515c <HAL_GPIO_Init+0x35c>)
 800507c:	69fb      	ldr	r3, [r7, #28]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	3302      	adds	r3, #2
 8005082:	69ba      	ldr	r2, [r7, #24]
 8005084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	43db      	mvns	r3, r3
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	4013      	ands	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d003      	beq.n	80050ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80050a6:	69ba      	ldr	r2, [r7, #24]
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80050ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80050b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	43db      	mvns	r3, r3
 80050c2:	69ba      	ldr	r2, [r7, #24]
 80050c4:	4013      	ands	r3, r2
 80050c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050c8:	683b      	ldr	r3, [r7, #0]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d003      	beq.n	80050dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	4313      	orrs	r3, r2
 80050da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80050dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80050e0:	69bb      	ldr	r3, [r7, #24]
 80050e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80050e4:	697b      	ldr	r3, [r7, #20]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	43db      	mvns	r3, r3
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	4013      	ands	r3, r2
 80050f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d003      	beq.n	8005108 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005100:	69ba      	ldr	r2, [r7, #24]
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	4313      	orrs	r3, r2
 8005106:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005114:	693b      	ldr	r3, [r7, #16]
 8005116:	43db      	mvns	r3, r3
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	4013      	ands	r3, r2
 800511c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005126:	2b00      	cmp	r3, #0
 8005128:	d003      	beq.n	8005132 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800512a:	69ba      	ldr	r2, [r7, #24]
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8005138:	69fb      	ldr	r3, [r7, #28]
 800513a:	3301      	adds	r3, #1
 800513c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800513e:	683b      	ldr	r3, [r7, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
 8005148:	2b00      	cmp	r3, #0
 800514a:	f47f ae63 	bne.w	8004e14 <HAL_GPIO_Init+0x14>
  }
}
 800514e:	bf00      	nop
 8005150:	bf00      	nop
 8005152:	3724      	adds	r7, #36	; 0x24
 8005154:	46bd      	mov	sp, r7
 8005156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515a:	4770      	bx	lr
 800515c:	58000400 	.word	0x58000400

08005160 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	460b      	mov	r3, r1
 800516a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	887b      	ldrh	r3, [r7, #2]
 8005172:	4013      	ands	r3, r2
 8005174:	2b00      	cmp	r3, #0
 8005176:	d002      	beq.n	800517e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005178:	2301      	movs	r3, #1
 800517a:	73fb      	strb	r3, [r7, #15]
 800517c:	e001      	b.n	8005182 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800517e:	2300      	movs	r3, #0
 8005180:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005182:	7bfb      	ldrb	r3, [r7, #15]
}
 8005184:	4618      	mov	r0, r3
 8005186:	3714      	adds	r7, #20
 8005188:	46bd      	mov	sp, r7
 800518a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518e:	4770      	bx	lr

08005190 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005190:	b480      	push	{r7}
 8005192:	b083      	sub	sp, #12
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	460b      	mov	r3, r1
 800519a:	807b      	strh	r3, [r7, #2]
 800519c:	4613      	mov	r3, r2
 800519e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051a0:	787b      	ldrb	r3, [r7, #1]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d003      	beq.n	80051ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051a6:	887a      	ldrh	r2, [r7, #2]
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80051ac:	e003      	b.n	80051b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80051ae:	887b      	ldrh	r3, [r7, #2]
 80051b0:	041a      	lsls	r2, r3, #16
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	619a      	str	r2, [r3, #24]
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr

080051c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80051c2:	b480      	push	{r7}
 80051c4:	b085      	sub	sp, #20
 80051c6:	af00      	add	r7, sp, #0
 80051c8:	6078      	str	r0, [r7, #4]
 80051ca:	460b      	mov	r3, r1
 80051cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051d4:	887a      	ldrh	r2, [r7, #2]
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	4013      	ands	r3, r2
 80051da:	041a      	lsls	r2, r3, #16
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	43d9      	mvns	r1, r3
 80051e0:	887b      	ldrh	r3, [r7, #2]
 80051e2:	400b      	ands	r3, r1
 80051e4:	431a      	orrs	r2, r3
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	619a      	str	r2, [r3, #24]
}
 80051ea:	bf00      	nop
 80051ec:	3714      	adds	r7, #20
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr
	...

080051f8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8005200:	4a08      	ldr	r2, [pc, #32]	; (8005224 <HAL_HSEM_FastTake+0x2c>)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	3320      	adds	r3, #32
 8005206:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800520a:	4a07      	ldr	r2, [pc, #28]	; (8005228 <HAL_HSEM_FastTake+0x30>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d101      	bne.n	8005214 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8005210:	2300      	movs	r3, #0
 8005212:	e000      	b.n	8005216 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8005214:	2301      	movs	r3, #1
}
 8005216:	4618      	mov	r0, r3
 8005218:	370c      	adds	r7, #12
 800521a:	46bd      	mov	sp, r7
 800521c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005220:	4770      	bx	lr
 8005222:	bf00      	nop
 8005224:	58026400 	.word	0x58026400
 8005228:	80000300 	.word	0x80000300

0800522c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800522c:	b480      	push	{r7}
 800522e:	b083      	sub	sp, #12
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8005236:	4906      	ldr	r1, [pc, #24]	; (8005250 <HAL_HSEM_Release+0x24>)
 8005238:	683b      	ldr	r3, [r7, #0]
 800523a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr
 8005250:	58026400 	.word	0x58026400

08005254 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005256:	b08f      	sub	sp, #60	; 0x3c
 8005258:	af0a      	add	r7, sp, #40	; 0x28
 800525a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d101      	bne.n	8005266 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005262:	2301      	movs	r3, #1
 8005264:	e116      	b.n	8005494 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005272:	b2db      	uxtb	r3, r3
 8005274:	2b00      	cmp	r3, #0
 8005276:	d106      	bne.n	8005286 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2200      	movs	r2, #0
 800527c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005280:	6878      	ldr	r0, [r7, #4]
 8005282:	f7fc fcc1 	bl	8001c08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	2203      	movs	r2, #3
 800528a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	2b00      	cmp	r3, #0
 8005298:	d102      	bne.n	80052a0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2200      	movs	r2, #0
 800529e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4618      	mov	r0, r3
 80052a6:	f004 fded 	bl	8009e84 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	603b      	str	r3, [r7, #0]
 80052b0:	687e      	ldr	r6, [r7, #4]
 80052b2:	466d      	mov	r5, sp
 80052b4:	f106 0410 	add.w	r4, r6, #16
 80052b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80052be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80052c0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80052c4:	e885 0003 	stmia.w	r5, {r0, r1}
 80052c8:	1d33      	adds	r3, r6, #4
 80052ca:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052cc:	6838      	ldr	r0, [r7, #0]
 80052ce:	f004 fd6b 	bl	8009da8 <USB_CoreInit>
 80052d2:	4603      	mov	r3, r0
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d005      	beq.n	80052e4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2202      	movs	r2, #2
 80052dc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0d7      	b.n	8005494 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	2100      	movs	r1, #0
 80052ea:	4618      	mov	r0, r3
 80052ec:	f004 fddb 	bl	8009ea6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f0:	2300      	movs	r3, #0
 80052f2:	73fb      	strb	r3, [r7, #15]
 80052f4:	e04a      	b.n	800538c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80052f6:	7bfa      	ldrb	r2, [r7, #15]
 80052f8:	6879      	ldr	r1, [r7, #4]
 80052fa:	4613      	mov	r3, r2
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4413      	add	r3, r2
 8005300:	009b      	lsls	r3, r3, #2
 8005302:	440b      	add	r3, r1
 8005304:	333d      	adds	r3, #61	; 0x3d
 8005306:	2201      	movs	r2, #1
 8005308:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	333c      	adds	r3, #60	; 0x3c
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800531e:	7bfa      	ldrb	r2, [r7, #15]
 8005320:	7bfb      	ldrb	r3, [r7, #15]
 8005322:	b298      	uxth	r0, r3
 8005324:	6879      	ldr	r1, [r7, #4]
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	4413      	add	r3, r2
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	440b      	add	r3, r1
 8005330:	3344      	adds	r3, #68	; 0x44
 8005332:	4602      	mov	r2, r0
 8005334:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005336:	7bfa      	ldrb	r2, [r7, #15]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	3340      	adds	r3, #64	; 0x40
 8005346:	2200      	movs	r2, #0
 8005348:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800534a:	7bfa      	ldrb	r2, [r7, #15]
 800534c:	6879      	ldr	r1, [r7, #4]
 800534e:	4613      	mov	r3, r2
 8005350:	00db      	lsls	r3, r3, #3
 8005352:	4413      	add	r3, r2
 8005354:	009b      	lsls	r3, r3, #2
 8005356:	440b      	add	r3, r1
 8005358:	3348      	adds	r3, #72	; 0x48
 800535a:	2200      	movs	r2, #0
 800535c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800535e:	7bfa      	ldrb	r2, [r7, #15]
 8005360:	6879      	ldr	r1, [r7, #4]
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	440b      	add	r3, r1
 800536c:	334c      	adds	r3, #76	; 0x4c
 800536e:	2200      	movs	r2, #0
 8005370:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005372:	7bfa      	ldrb	r2, [r7, #15]
 8005374:	6879      	ldr	r1, [r7, #4]
 8005376:	4613      	mov	r3, r2
 8005378:	00db      	lsls	r3, r3, #3
 800537a:	4413      	add	r3, r2
 800537c:	009b      	lsls	r3, r3, #2
 800537e:	440b      	add	r3, r1
 8005380:	3354      	adds	r3, #84	; 0x54
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005386:	7bfb      	ldrb	r3, [r7, #15]
 8005388:	3301      	adds	r3, #1
 800538a:	73fb      	strb	r3, [r7, #15]
 800538c:	7bfa      	ldrb	r2, [r7, #15]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	429a      	cmp	r2, r3
 8005394:	d3af      	bcc.n	80052f6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005396:	2300      	movs	r3, #0
 8005398:	73fb      	strb	r3, [r7, #15]
 800539a:	e044      	b.n	8005426 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800539c:	7bfa      	ldrb	r2, [r7, #15]
 800539e:	6879      	ldr	r1, [r7, #4]
 80053a0:	4613      	mov	r3, r2
 80053a2:	00db      	lsls	r3, r3, #3
 80053a4:	4413      	add	r3, r2
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80053b2:	7bfa      	ldrb	r2, [r7, #15]
 80053b4:	6879      	ldr	r1, [r7, #4]
 80053b6:	4613      	mov	r3, r2
 80053b8:	00db      	lsls	r3, r3, #3
 80053ba:	4413      	add	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	440b      	add	r3, r1
 80053c0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80053c4:	7bfa      	ldrb	r2, [r7, #15]
 80053c6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80053c8:	7bfa      	ldrb	r2, [r7, #15]
 80053ca:	6879      	ldr	r1, [r7, #4]
 80053cc:	4613      	mov	r3, r2
 80053ce:	00db      	lsls	r3, r3, #3
 80053d0:	4413      	add	r3, r2
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	440b      	add	r3, r1
 80053d6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80053da:	2200      	movs	r2, #0
 80053dc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80053de:	7bfa      	ldrb	r2, [r7, #15]
 80053e0:	6879      	ldr	r1, [r7, #4]
 80053e2:	4613      	mov	r3, r2
 80053e4:	00db      	lsls	r3, r3, #3
 80053e6:	4413      	add	r3, r2
 80053e8:	009b      	lsls	r3, r3, #2
 80053ea:	440b      	add	r3, r1
 80053ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80053f0:	2200      	movs	r2, #0
 80053f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80053f4:	7bfa      	ldrb	r2, [r7, #15]
 80053f6:	6879      	ldr	r1, [r7, #4]
 80053f8:	4613      	mov	r3, r2
 80053fa:	00db      	lsls	r3, r3, #3
 80053fc:	4413      	add	r3, r2
 80053fe:	009b      	lsls	r3, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005406:	2200      	movs	r2, #0
 8005408:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800540a:	7bfa      	ldrb	r2, [r7, #15]
 800540c:	6879      	ldr	r1, [r7, #4]
 800540e:	4613      	mov	r3, r2
 8005410:	00db      	lsls	r3, r3, #3
 8005412:	4413      	add	r3, r2
 8005414:	009b      	lsls	r3, r3, #2
 8005416:	440b      	add	r3, r1
 8005418:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	3301      	adds	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
 8005426:	7bfa      	ldrb	r2, [r7, #15]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	429a      	cmp	r2, r3
 800542e:	d3b5      	bcc.n	800539c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	603b      	str	r3, [r7, #0]
 8005436:	687e      	ldr	r6, [r7, #4]
 8005438:	466d      	mov	r5, sp
 800543a:	f106 0410 	add.w	r4, r6, #16
 800543e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005440:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005442:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005444:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005446:	e894 0003 	ldmia.w	r4, {r0, r1}
 800544a:	e885 0003 	stmia.w	r5, {r0, r1}
 800544e:	1d33      	adds	r3, r6, #4
 8005450:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005452:	6838      	ldr	r0, [r7, #0]
 8005454:	f004 fd74 	bl	8009f40 <USB_DevInit>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2202      	movs	r2, #2
 8005462:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e014      	b.n	8005494 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2201      	movs	r2, #1
 8005476:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	2b01      	cmp	r3, #1
 8005480:	d102      	bne.n	8005488 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	f000 f80a 	bl	800549c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f004 ff32 	bl	800a2f6 <USB_DevDisconnect>

  return HAL_OK;
 8005492:	2300      	movs	r3, #0
}
 8005494:	4618      	mov	r0, r3
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800549c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800549c:	b480      	push	{r7}
 800549e:	b085      	sub	sp, #20
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2201      	movs	r2, #1
 80054ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ca:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80054cc:	4313      	orrs	r3, r2
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80054d2:	2300      	movs	r3, #0
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3714      	adds	r7, #20
 80054d8:	46bd      	mov	sp, r7
 80054da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054de:	4770      	bx	lr
 80054e0:	10000003 	.word	0x10000003

080054e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80054ec:	4b29      	ldr	r3, [pc, #164]	; (8005594 <HAL_PWREx_ConfigSupply+0xb0>)
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0307 	and.w	r3, r3, #7
 80054f4:	2b06      	cmp	r3, #6
 80054f6:	d00a      	beq.n	800550e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80054f8:	4b26      	ldr	r3, [pc, #152]	; (8005594 <HAL_PWREx_ConfigSupply+0xb0>)
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	429a      	cmp	r2, r3
 8005504:	d001      	beq.n	800550a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e040      	b.n	800558c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800550a:	2300      	movs	r3, #0
 800550c:	e03e      	b.n	800558c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800550e:	4b21      	ldr	r3, [pc, #132]	; (8005594 <HAL_PWREx_ConfigSupply+0xb0>)
 8005510:	68db      	ldr	r3, [r3, #12]
 8005512:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8005516:	491f      	ldr	r1, [pc, #124]	; (8005594 <HAL_PWREx_ConfigSupply+0xb0>)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4313      	orrs	r3, r2
 800551c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800551e:	f7fc fcc5 	bl	8001eac <HAL_GetTick>
 8005522:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8005524:	e009      	b.n	800553a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005526:	f7fc fcc1 	bl	8001eac <HAL_GetTick>
 800552a:	4602      	mov	r2, r0
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	1ad3      	subs	r3, r2, r3
 8005530:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005534:	d901      	bls.n	800553a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8005536:	2301      	movs	r3, #1
 8005538:	e028      	b.n	800558c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800553a:	4b16      	ldr	r3, [pc, #88]	; (8005594 <HAL_PWREx_ConfigSupply+0xb0>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005546:	d1ee      	bne.n	8005526 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2b1e      	cmp	r3, #30
 800554c:	d008      	beq.n	8005560 <HAL_PWREx_ConfigSupply+0x7c>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b2e      	cmp	r3, #46	; 0x2e
 8005552:	d005      	beq.n	8005560 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2b1d      	cmp	r3, #29
 8005558:	d002      	beq.n	8005560 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2b2d      	cmp	r3, #45	; 0x2d
 800555e:	d114      	bne.n	800558a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8005560:	f7fc fca4 	bl	8001eac <HAL_GetTick>
 8005564:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8005566:	e009      	b.n	800557c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8005568:	f7fc fca0 	bl	8001eac <HAL_GetTick>
 800556c:	4602      	mov	r2, r0
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1ad3      	subs	r3, r2, r3
 8005572:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005576:	d901      	bls.n	800557c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e007      	b.n	800558c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800557c:	4b05      	ldr	r3, [pc, #20]	; (8005594 <HAL_PWREx_ConfigSupply+0xb0>)
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005584:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005588:	d1ee      	bne.n	8005568 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}
 8005594:	58024800 	.word	0x58024800

08005598 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8005598:	b480      	push	{r7}
 800559a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800559c:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800559e:	68db      	ldr	r3, [r3, #12]
 80055a0:	4a04      	ldr	r2, [pc, #16]	; (80055b4 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 80055a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80055a6:	60d3      	str	r3, [r2, #12]
}
 80055a8:	bf00      	nop
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	58024800 	.word	0x58024800

080055b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b08c      	sub	sp, #48	; 0x30
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d102      	bne.n	80055cc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80055c6:	2301      	movs	r3, #1
 80055c8:	f000 bc1d 	b.w	8005e06 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	f000 8087 	beq.w	80056e8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055da:	4b99      	ldr	r3, [pc, #612]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80055dc:	691b      	ldr	r3, [r3, #16]
 80055de:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80055e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80055e4:	4b96      	ldr	r3, [pc, #600]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80055e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80055ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055ec:	2b10      	cmp	r3, #16
 80055ee:	d007      	beq.n	8005600 <HAL_RCC_OscConfig+0x48>
 80055f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055f2:	2b18      	cmp	r3, #24
 80055f4:	d110      	bne.n	8005618 <HAL_RCC_OscConfig+0x60>
 80055f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f8:	f003 0303 	and.w	r3, r3, #3
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d10b      	bne.n	8005618 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005600:	4b8f      	ldr	r3, [pc, #572]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005608:	2b00      	cmp	r3, #0
 800560a:	d06c      	beq.n	80056e6 <HAL_RCC_OscConfig+0x12e>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d168      	bne.n	80056e6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e3f6      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005620:	d106      	bne.n	8005630 <HAL_RCC_OscConfig+0x78>
 8005622:	4b87      	ldr	r3, [pc, #540]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a86      	ldr	r2, [pc, #536]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800562c:	6013      	str	r3, [r2, #0]
 800562e:	e02e      	b.n	800568e <HAL_RCC_OscConfig+0xd6>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10c      	bne.n	8005652 <HAL_RCC_OscConfig+0x9a>
 8005638:	4b81      	ldr	r3, [pc, #516]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a80      	ldr	r2, [pc, #512]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800563e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005642:	6013      	str	r3, [r2, #0]
 8005644:	4b7e      	ldr	r3, [pc, #504]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a7d      	ldr	r2, [pc, #500]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800564a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800564e:	6013      	str	r3, [r2, #0]
 8005650:	e01d      	b.n	800568e <HAL_RCC_OscConfig+0xd6>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800565a:	d10c      	bne.n	8005676 <HAL_RCC_OscConfig+0xbe>
 800565c:	4b78      	ldr	r3, [pc, #480]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a77      	ldr	r2, [pc, #476]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005662:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005666:	6013      	str	r3, [r2, #0]
 8005668:	4b75      	ldr	r3, [pc, #468]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a74      	ldr	r2, [pc, #464]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800566e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005672:	6013      	str	r3, [r2, #0]
 8005674:	e00b      	b.n	800568e <HAL_RCC_OscConfig+0xd6>
 8005676:	4b72      	ldr	r3, [pc, #456]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4a71      	ldr	r2, [pc, #452]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800567c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005680:	6013      	str	r3, [r2, #0]
 8005682:	4b6f      	ldr	r3, [pc, #444]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4a6e      	ldr	r2, [pc, #440]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005688:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800568c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	2b00      	cmp	r3, #0
 8005694:	d013      	beq.n	80056be <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005696:	f7fc fc09 	bl	8001eac <HAL_GetTick>
 800569a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800569c:	e008      	b.n	80056b0 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800569e:	f7fc fc05 	bl	8001eac <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	2b64      	cmp	r3, #100	; 0x64
 80056aa:	d901      	bls.n	80056b0 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e3aa      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80056b0:	4b63      	ldr	r3, [pc, #396]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d0f0      	beq.n	800569e <HAL_RCC_OscConfig+0xe6>
 80056bc:	e014      	b.n	80056e8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056be:	f7fc fbf5 	bl	8001eac <HAL_GetTick>
 80056c2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056c4:	e008      	b.n	80056d8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80056c6:	f7fc fbf1 	bl	8001eac <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b64      	cmp	r3, #100	; 0x64
 80056d2:	d901      	bls.n	80056d8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80056d4:	2303      	movs	r3, #3
 80056d6:	e396      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80056d8:	4b59      	ldr	r3, [pc, #356]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d1f0      	bne.n	80056c6 <HAL_RCC_OscConfig+0x10e>
 80056e4:	e000      	b.n	80056e8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80056e6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80cb 	beq.w	800588c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056f6:	4b52      	ldr	r3, [pc, #328]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80056f8:	691b      	ldr	r3, [r3, #16]
 80056fa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80056fe:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8005700:	4b4f      	ldr	r3, [pc, #316]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005704:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8005706:	6a3b      	ldr	r3, [r7, #32]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d007      	beq.n	800571c <HAL_RCC_OscConfig+0x164>
 800570c:	6a3b      	ldr	r3, [r7, #32]
 800570e:	2b18      	cmp	r3, #24
 8005710:	d156      	bne.n	80057c0 <HAL_RCC_OscConfig+0x208>
 8005712:	69fb      	ldr	r3, [r7, #28]
 8005714:	f003 0303 	and.w	r3, r3, #3
 8005718:	2b00      	cmp	r3, #0
 800571a:	d151      	bne.n	80057c0 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800571c:	4b48      	ldr	r3, [pc, #288]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f003 0304 	and.w	r3, r3, #4
 8005724:	2b00      	cmp	r3, #0
 8005726:	d005      	beq.n	8005734 <HAL_RCC_OscConfig+0x17c>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d101      	bne.n	8005734 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8005730:	2301      	movs	r3, #1
 8005732:	e368      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8005734:	4b42      	ldr	r3, [pc, #264]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f023 0219 	bic.w	r2, r3, #25
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	493f      	ldr	r1, [pc, #252]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005742:	4313      	orrs	r3, r2
 8005744:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005746:	f7fc fbb1 	bl	8001eac <HAL_GetTick>
 800574a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800574c:	e008      	b.n	8005760 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800574e:	f7fc fbad 	bl	8001eac <HAL_GetTick>
 8005752:	4602      	mov	r2, r0
 8005754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005756:	1ad3      	subs	r3, r2, r3
 8005758:	2b02      	cmp	r3, #2
 800575a:	d901      	bls.n	8005760 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800575c:	2303      	movs	r3, #3
 800575e:	e352      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005760:	4b37      	ldr	r3, [pc, #220]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f003 0304 	and.w	r3, r3, #4
 8005768:	2b00      	cmp	r3, #0
 800576a:	d0f0      	beq.n	800574e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800576c:	f7fc fbce 	bl	8001f0c <HAL_GetREVID>
 8005770:	4603      	mov	r3, r0
 8005772:	f241 0203 	movw	r2, #4099	; 0x1003
 8005776:	4293      	cmp	r3, r2
 8005778:	d817      	bhi.n	80057aa <HAL_RCC_OscConfig+0x1f2>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	691b      	ldr	r3, [r3, #16]
 800577e:	2b40      	cmp	r3, #64	; 0x40
 8005780:	d108      	bne.n	8005794 <HAL_RCC_OscConfig+0x1dc>
 8005782:	4b2f      	ldr	r3, [pc, #188]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800578a:	4a2d      	ldr	r2, [pc, #180]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800578c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005790:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005792:	e07b      	b.n	800588c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005794:	4b2a      	ldr	r3, [pc, #168]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	031b      	lsls	r3, r3, #12
 80057a2:	4927      	ldr	r1, [pc, #156]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80057a4:	4313      	orrs	r3, r2
 80057a6:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057a8:	e070      	b.n	800588c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80057aa:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80057ac:	685b      	ldr	r3, [r3, #4]
 80057ae:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	691b      	ldr	r3, [r3, #16]
 80057b6:	061b      	lsls	r3, r3, #24
 80057b8:	4921      	ldr	r1, [pc, #132]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80057ba:	4313      	orrs	r3, r2
 80057bc:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80057be:	e065      	b.n	800588c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d048      	beq.n	800585a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f023 0219 	bic.w	r2, r3, #25
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	491a      	ldr	r1, [pc, #104]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80057d6:	4313      	orrs	r3, r2
 80057d8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057da:	f7fc fb67 	bl	8001eac <HAL_GetTick>
 80057de:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057e0:	e008      	b.n	80057f4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80057e2:	f7fc fb63 	bl	8001eac <HAL_GetTick>
 80057e6:	4602      	mov	r2, r0
 80057e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ea:	1ad3      	subs	r3, r2, r3
 80057ec:	2b02      	cmp	r3, #2
 80057ee:	d901      	bls.n	80057f4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e308      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80057f4:	4b12      	ldr	r3, [pc, #72]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d0f0      	beq.n	80057e2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005800:	f7fc fb84 	bl	8001f0c <HAL_GetREVID>
 8005804:	4603      	mov	r3, r0
 8005806:	f241 0203 	movw	r2, #4099	; 0x1003
 800580a:	4293      	cmp	r3, r2
 800580c:	d81a      	bhi.n	8005844 <HAL_RCC_OscConfig+0x28c>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	691b      	ldr	r3, [r3, #16]
 8005812:	2b40      	cmp	r3, #64	; 0x40
 8005814:	d108      	bne.n	8005828 <HAL_RCC_OscConfig+0x270>
 8005816:	4b0a      	ldr	r3, [pc, #40]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800581e:	4a08      	ldr	r2, [pc, #32]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005824:	6053      	str	r3, [r2, #4]
 8005826:	e031      	b.n	800588c <HAL_RCC_OscConfig+0x2d4>
 8005828:	4b05      	ldr	r3, [pc, #20]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	031b      	lsls	r3, r3, #12
 8005836:	4902      	ldr	r1, [pc, #8]	; (8005840 <HAL_RCC_OscConfig+0x288>)
 8005838:	4313      	orrs	r3, r2
 800583a:	604b      	str	r3, [r1, #4]
 800583c:	e026      	b.n	800588c <HAL_RCC_OscConfig+0x2d4>
 800583e:	bf00      	nop
 8005840:	58024400 	.word	0x58024400
 8005844:	4b9a      	ldr	r3, [pc, #616]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	691b      	ldr	r3, [r3, #16]
 8005850:	061b      	lsls	r3, r3, #24
 8005852:	4997      	ldr	r1, [pc, #604]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005854:	4313      	orrs	r3, r2
 8005856:	604b      	str	r3, [r1, #4]
 8005858:	e018      	b.n	800588c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800585a:	4b95      	ldr	r3, [pc, #596]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a94      	ldr	r2, [pc, #592]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005860:	f023 0301 	bic.w	r3, r3, #1
 8005864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005866:	f7fc fb21 	bl	8001eac <HAL_GetTick>
 800586a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800586c:	e008      	b.n	8005880 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800586e:	f7fc fb1d 	bl	8001eac <HAL_GetTick>
 8005872:	4602      	mov	r2, r0
 8005874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005876:	1ad3      	subs	r3, r2, r3
 8005878:	2b02      	cmp	r3, #2
 800587a:	d901      	bls.n	8005880 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800587c:	2303      	movs	r3, #3
 800587e:	e2c2      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8005880:	4b8b      	ldr	r3, [pc, #556]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f003 0304 	and.w	r3, r3, #4
 8005888:	2b00      	cmp	r3, #0
 800588a:	d1f0      	bne.n	800586e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 0310 	and.w	r3, r3, #16
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 80a9 	beq.w	80059ec <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800589a:	4b85      	ldr	r3, [pc, #532]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 800589c:	691b      	ldr	r3, [r3, #16]
 800589e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80058a2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80058a4:	4b82      	ldr	r3, [pc, #520]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80058a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a8:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80058aa:	69bb      	ldr	r3, [r7, #24]
 80058ac:	2b08      	cmp	r3, #8
 80058ae:	d007      	beq.n	80058c0 <HAL_RCC_OscConfig+0x308>
 80058b0:	69bb      	ldr	r3, [r7, #24]
 80058b2:	2b18      	cmp	r3, #24
 80058b4:	d13a      	bne.n	800592c <HAL_RCC_OscConfig+0x374>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f003 0303 	and.w	r3, r3, #3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d135      	bne.n	800592c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058c0:	4b7b      	ldr	r3, [pc, #492]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d005      	beq.n	80058d8 <HAL_RCC_OscConfig+0x320>
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	2b80      	cmp	r3, #128	; 0x80
 80058d2:	d001      	beq.n	80058d8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e296      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80058d8:	f7fc fb18 	bl	8001f0c <HAL_GetREVID>
 80058dc:	4603      	mov	r3, r0
 80058de:	f241 0203 	movw	r2, #4099	; 0x1003
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d817      	bhi.n	8005916 <HAL_RCC_OscConfig+0x35e>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	2b20      	cmp	r3, #32
 80058ec:	d108      	bne.n	8005900 <HAL_RCC_OscConfig+0x348>
 80058ee:	4b70      	ldr	r3, [pc, #448]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80058f6:	4a6e      	ldr	r2, [pc, #440]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80058f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058fc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80058fe:	e075      	b.n	80059ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005900:	4b6b      	ldr	r3, [pc, #428]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	6a1b      	ldr	r3, [r3, #32]
 800590c:	069b      	lsls	r3, r3, #26
 800590e:	4968      	ldr	r1, [pc, #416]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005910:	4313      	orrs	r3, r2
 8005912:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8005914:	e06a      	b.n	80059ec <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005916:	4b66      	ldr	r3, [pc, #408]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	061b      	lsls	r3, r3, #24
 8005924:	4962      	ldr	r1, [pc, #392]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005926:	4313      	orrs	r3, r2
 8005928:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800592a:	e05f      	b.n	80059ec <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	69db      	ldr	r3, [r3, #28]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d042      	beq.n	80059ba <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8005934:	4b5e      	ldr	r3, [pc, #376]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a5d      	ldr	r2, [pc, #372]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 800593a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005940:	f7fc fab4 	bl	8001eac <HAL_GetTick>
 8005944:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8005948:	f7fc fab0 	bl	8001eac <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e255      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800595a:	4b55      	ldr	r3, [pc, #340]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005962:	2b00      	cmp	r3, #0
 8005964:	d0f0      	beq.n	8005948 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8005966:	f7fc fad1 	bl	8001f0c <HAL_GetREVID>
 800596a:	4603      	mov	r3, r0
 800596c:	f241 0203 	movw	r2, #4099	; 0x1003
 8005970:	4293      	cmp	r3, r2
 8005972:	d817      	bhi.n	80059a4 <HAL_RCC_OscConfig+0x3ec>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a1b      	ldr	r3, [r3, #32]
 8005978:	2b20      	cmp	r3, #32
 800597a:	d108      	bne.n	800598e <HAL_RCC_OscConfig+0x3d6>
 800597c:	4b4c      	ldr	r3, [pc, #304]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8005984:	4a4a      	ldr	r2, [pc, #296]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005986:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800598a:	6053      	str	r3, [r2, #4]
 800598c:	e02e      	b.n	80059ec <HAL_RCC_OscConfig+0x434>
 800598e:	4b48      	ldr	r3, [pc, #288]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	069b      	lsls	r3, r3, #26
 800599c:	4944      	ldr	r1, [pc, #272]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 800599e:	4313      	orrs	r3, r2
 80059a0:	604b      	str	r3, [r1, #4]
 80059a2:	e023      	b.n	80059ec <HAL_RCC_OscConfig+0x434>
 80059a4:	4b42      	ldr	r3, [pc, #264]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80059a6:	68db      	ldr	r3, [r3, #12]
 80059a8:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	061b      	lsls	r3, r3, #24
 80059b2:	493f      	ldr	r1, [pc, #252]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60cb      	str	r3, [r1, #12]
 80059b8:	e018      	b.n	80059ec <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80059ba:	4b3d      	ldr	r3, [pc, #244]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a3c      	ldr	r2, [pc, #240]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80059c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059c6:	f7fc fa71 	bl	8001eac <HAL_GetTick>
 80059ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059cc:	e008      	b.n	80059e0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80059ce:	f7fc fa6d 	bl	8001eac <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d901      	bls.n	80059e0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	e212      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80059e0:	4b33      	ldr	r3, [pc, #204]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d1f0      	bne.n	80059ce <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d036      	beq.n	8005a66 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	695b      	ldr	r3, [r3, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d019      	beq.n	8005a34 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a00:	4b2b      	ldr	r3, [pc, #172]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a04:	4a2a      	ldr	r2, [pc, #168]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a06:	f043 0301 	orr.w	r3, r3, #1
 8005a0a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a0c:	f7fc fa4e 	bl	8001eac <HAL_GetTick>
 8005a10:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a12:	e008      	b.n	8005a26 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a14:	f7fc fa4a 	bl	8001eac <HAL_GetTick>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	2b02      	cmp	r3, #2
 8005a20:	d901      	bls.n	8005a26 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e1ef      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8005a26:	4b22      	ldr	r3, [pc, #136]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a2a:	f003 0302 	and.w	r3, r3, #2
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d0f0      	beq.n	8005a14 <HAL_RCC_OscConfig+0x45c>
 8005a32:	e018      	b.n	8005a66 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a34:	4b1e      	ldr	r3, [pc, #120]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a40:	f7fc fa34 	bl	8001eac <HAL_GetTick>
 8005a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a46:	e008      	b.n	8005a5a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a48:	f7fc fa30 	bl	8001eac <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d901      	bls.n	8005a5a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e1d5      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005a5a:	4b15      	ldr	r3, [pc, #84]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a5e:	f003 0302 	and.w	r3, r3, #2
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d1f0      	bne.n	8005a48 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 0320 	and.w	r3, r3, #32
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d039      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d01c      	beq.n	8005ab4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005a7a:	4b0d      	ldr	r3, [pc, #52]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a0c      	ldr	r2, [pc, #48]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005a80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005a84:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005a86:	f7fc fa11 	bl	8001eac <HAL_GetTick>
 8005a8a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005a8c:	e008      	b.n	8005aa0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005a8e:	f7fc fa0d 	bl	8001eac <HAL_GetTick>
 8005a92:	4602      	mov	r2, r0
 8005a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a96:	1ad3      	subs	r3, r2, r3
 8005a98:	2b02      	cmp	r3, #2
 8005a9a:	d901      	bls.n	8005aa0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8005a9c:	2303      	movs	r3, #3
 8005a9e:	e1b2      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005aa0:	4b03      	ldr	r3, [pc, #12]	; (8005ab0 <HAL_RCC_OscConfig+0x4f8>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d0f0      	beq.n	8005a8e <HAL_RCC_OscConfig+0x4d6>
 8005aac:	e01b      	b.n	8005ae6 <HAL_RCC_OscConfig+0x52e>
 8005aae:	bf00      	nop
 8005ab0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005ab4:	4b9b      	ldr	r3, [pc, #620]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a9a      	ldr	r2, [pc, #616]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005aba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005abe:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005ac0:	f7fc f9f4 	bl	8001eac <HAL_GetTick>
 8005ac4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ac6:	e008      	b.n	8005ada <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005ac8:	f7fc f9f0 	bl	8001eac <HAL_GetTick>
 8005acc:	4602      	mov	r2, r0
 8005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d901      	bls.n	8005ada <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8005ad6:	2303      	movs	r3, #3
 8005ad8:	e195      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005ada:	4b92      	ldr	r3, [pc, #584]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d1f0      	bne.n	8005ac8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f003 0304 	and.w	r3, r3, #4
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	f000 8081 	beq.w	8005bf6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005af4:	4b8c      	ldr	r3, [pc, #560]	; (8005d28 <HAL_RCC_OscConfig+0x770>)
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	4a8b      	ldr	r2, [pc, #556]	; (8005d28 <HAL_RCC_OscConfig+0x770>)
 8005afa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b00:	f7fc f9d4 	bl	8001eac <HAL_GetTick>
 8005b04:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b06:	e008      	b.n	8005b1a <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005b08:	f7fc f9d0 	bl	8001eac <HAL_GetTick>
 8005b0c:	4602      	mov	r2, r0
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	1ad3      	subs	r3, r2, r3
 8005b12:	2b64      	cmp	r3, #100	; 0x64
 8005b14:	d901      	bls.n	8005b1a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e175      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005b1a:	4b83      	ldr	r3, [pc, #524]	; (8005d28 <HAL_RCC_OscConfig+0x770>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d0f0      	beq.n	8005b08 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d106      	bne.n	8005b3c <HAL_RCC_OscConfig+0x584>
 8005b2e:	4b7d      	ldr	r3, [pc, #500]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a7c      	ldr	r2, [pc, #496]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	e02d      	b.n	8005b98 <HAL_RCC_OscConfig+0x5e0>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	689b      	ldr	r3, [r3, #8]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d10c      	bne.n	8005b5e <HAL_RCC_OscConfig+0x5a6>
 8005b44:	4b77      	ldr	r3, [pc, #476]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b48:	4a76      	ldr	r2, [pc, #472]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b4a:	f023 0301 	bic.w	r3, r3, #1
 8005b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005b50:	4b74      	ldr	r3, [pc, #464]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b54:	4a73      	ldr	r2, [pc, #460]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b56:	f023 0304 	bic.w	r3, r3, #4
 8005b5a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b5c:	e01c      	b.n	8005b98 <HAL_RCC_OscConfig+0x5e0>
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	2b05      	cmp	r3, #5
 8005b64:	d10c      	bne.n	8005b80 <HAL_RCC_OscConfig+0x5c8>
 8005b66:	4b6f      	ldr	r3, [pc, #444]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b6a:	4a6e      	ldr	r2, [pc, #440]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b6c:	f043 0304 	orr.w	r3, r3, #4
 8005b70:	6713      	str	r3, [r2, #112]	; 0x70
 8005b72:	4b6c      	ldr	r3, [pc, #432]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b76:	4a6b      	ldr	r2, [pc, #428]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b78:	f043 0301 	orr.w	r3, r3, #1
 8005b7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b7e:	e00b      	b.n	8005b98 <HAL_RCC_OscConfig+0x5e0>
 8005b80:	4b68      	ldr	r3, [pc, #416]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b84:	4a67      	ldr	r2, [pc, #412]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b86:	f023 0301 	bic.w	r3, r3, #1
 8005b8a:	6713      	str	r3, [r2, #112]	; 0x70
 8005b8c:	4b65      	ldr	r3, [pc, #404]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b90:	4a64      	ldr	r2, [pc, #400]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005b92:	f023 0304 	bic.w	r3, r3, #4
 8005b96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d015      	beq.n	8005bcc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ba0:	f7fc f984 	bl	8001eac <HAL_GetTick>
 8005ba4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005ba6:	e00a      	b.n	8005bbe <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ba8:	f7fc f980 	bl	8001eac <HAL_GetTick>
 8005bac:	4602      	mov	r2, r0
 8005bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bb0:	1ad3      	subs	r3, r2, r3
 8005bb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d901      	bls.n	8005bbe <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8005bba:	2303      	movs	r3, #3
 8005bbc:	e123      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005bbe:	4b59      	ldr	r3, [pc, #356]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bc2:	f003 0302 	and.w	r3, r3, #2
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d0ee      	beq.n	8005ba8 <HAL_RCC_OscConfig+0x5f0>
 8005bca:	e014      	b.n	8005bf6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005bcc:	f7fc f96e 	bl	8001eac <HAL_GetTick>
 8005bd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bd2:	e00a      	b.n	8005bea <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005bd4:	f7fc f96a 	bl	8001eac <HAL_GetTick>
 8005bd8:	4602      	mov	r2, r0
 8005bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bdc:	1ad3      	subs	r3, r2, r3
 8005bde:	f241 3288 	movw	r2, #5000	; 0x1388
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d901      	bls.n	8005bea <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e10d      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8005bea:	4b4e      	ldr	r3, [pc, #312]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1ee      	bne.n	8005bd4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 8102 	beq.w	8005e04 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8005c00:	4b48      	ldr	r3, [pc, #288]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005c08:	2b18      	cmp	r3, #24
 8005c0a:	f000 80bd 	beq.w	8005d88 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	f040 809e 	bne.w	8005d54 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c18:	4b42      	ldr	r3, [pc, #264]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a41      	ldr	r2, [pc, #260]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c24:	f7fc f942 	bl	8001eac <HAL_GetTick>
 8005c28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7fc f93e 	bl	8001eac <HAL_GetTick>
 8005c30:	4602      	mov	r2, r0
 8005c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e0e3      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005c3e:	4b39      	ldr	r3, [pc, #228]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005c4a:	4b36      	ldr	r3, [pc, #216]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005c4e:	4b37      	ldr	r3, [pc, #220]	; (8005d2c <HAL_RCC_OscConfig+0x774>)
 8005c50:	4013      	ands	r3, r2
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005c5a:	0112      	lsls	r2, r2, #4
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	4931      	ldr	r1, [pc, #196]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c60:	4313      	orrs	r3, r2
 8005c62:	628b      	str	r3, [r1, #40]	; 0x28
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c68:	3b01      	subs	r3, #1
 8005c6a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c72:	3b01      	subs	r3, #1
 8005c74:	025b      	lsls	r3, r3, #9
 8005c76:	b29b      	uxth	r3, r3
 8005c78:	431a      	orrs	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	041b      	lsls	r3, r3, #16
 8005c82:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005c86:	431a      	orrs	r2, r3
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	061b      	lsls	r3, r3, #24
 8005c90:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005c94:	4923      	ldr	r1, [pc, #140]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c96:	4313      	orrs	r3, r2
 8005c98:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8005c9a:	4b22      	ldr	r3, [pc, #136]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c9e:	4a21      	ldr	r2, [pc, #132]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005ca0:	f023 0301 	bic.w	r3, r3, #1
 8005ca4:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005ca6:	4b1f      	ldr	r3, [pc, #124]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005ca8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005caa:	4b21      	ldr	r3, [pc, #132]	; (8005d30 <HAL_RCC_OscConfig+0x778>)
 8005cac:	4013      	ands	r3, r2
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005cb2:	00d2      	lsls	r2, r2, #3
 8005cb4:	491b      	ldr	r1, [pc, #108]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8005cba:	4b1a      	ldr	r3, [pc, #104]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cbe:	f023 020c 	bic.w	r2, r3, #12
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	4917      	ldr	r1, [pc, #92]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8005ccc:	4b15      	ldr	r3, [pc, #84]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd0:	f023 0202 	bic.w	r2, r3, #2
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd8:	4912      	ldr	r1, [pc, #72]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8005cde:	4b11      	ldr	r3, [pc, #68]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ce2:	4a10      	ldr	r2, [pc, #64]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cea:	4b0e      	ldr	r3, [pc, #56]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cee:	4a0d      	ldr	r2, [pc, #52]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cf4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8005cf6:	4b0b      	ldr	r3, [pc, #44]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfa:	4a0a      	ldr	r2, [pc, #40]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005cfc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d00:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8005d02:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	4a07      	ldr	r2, [pc, #28]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005d08:	f043 0301 	orr.w	r3, r3, #1
 8005d0c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	4a04      	ldr	r2, [pc, #16]	; (8005d24 <HAL_RCC_OscConfig+0x76c>)
 8005d14:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005d18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d1a:	f7fc f8c7 	bl	8001eac <HAL_GetTick>
 8005d1e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d20:	e011      	b.n	8005d46 <HAL_RCC_OscConfig+0x78e>
 8005d22:	bf00      	nop
 8005d24:	58024400 	.word	0x58024400
 8005d28:	58024800 	.word	0x58024800
 8005d2c:	fffffc0c 	.word	0xfffffc0c
 8005d30:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d34:	f7fc f8ba 	bl	8001eac <HAL_GetTick>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d3c:	1ad3      	subs	r3, r2, r3
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d901      	bls.n	8005d46 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005d42:	2303      	movs	r3, #3
 8005d44:	e05f      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005d46:	4b32      	ldr	r3, [pc, #200]	; (8005e10 <HAL_RCC_OscConfig+0x858>)
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d0f0      	beq.n	8005d34 <HAL_RCC_OscConfig+0x77c>
 8005d52:	e057      	b.n	8005e04 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005d54:	4b2e      	ldr	r3, [pc, #184]	; (8005e10 <HAL_RCC_OscConfig+0x858>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a2d      	ldr	r2, [pc, #180]	; (8005e10 <HAL_RCC_OscConfig+0x858>)
 8005d5a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d60:	f7fc f8a4 	bl	8001eac <HAL_GetTick>
 8005d64:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d66:	e008      	b.n	8005d7a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005d68:	f7fc f8a0 	bl	8001eac <HAL_GetTick>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d70:	1ad3      	subs	r3, r2, r3
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d901      	bls.n	8005d7a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005d76:	2303      	movs	r3, #3
 8005d78:	e045      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005d7a:	4b25      	ldr	r3, [pc, #148]	; (8005e10 <HAL_RCC_OscConfig+0x858>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d1f0      	bne.n	8005d68 <HAL_RCC_OscConfig+0x7b0>
 8005d86:	e03d      	b.n	8005e04 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <HAL_RCC_OscConfig+0x858>)
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8005d8e:	4b20      	ldr	r3, [pc, #128]	; (8005e10 <HAL_RCC_OscConfig+0x858>)
 8005d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d92:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d031      	beq.n	8005e00 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	f003 0203 	and.w	r2, r3, #3
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d12a      	bne.n	8005e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	091b      	lsrs	r3, r3, #4
 8005dae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d122      	bne.n	8005e00 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc4:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d11a      	bne.n	8005e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	0a5b      	lsrs	r3, r3, #9
 8005dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005dd6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d111      	bne.n	8005e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	0c1b      	lsrs	r3, r3, #16
 8005de0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005de8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d108      	bne.n	8005e00 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	0e1b      	lsrs	r3, r3, #24
 8005df2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dfa:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d001      	beq.n	8005e04 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	e000      	b.n	8005e06 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3730      	adds	r7, #48	; 0x30
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	bf00      	nop
 8005e10:	58024400 	.word	0x58024400

08005e14 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b086      	sub	sp, #24
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d101      	bne.n	8005e28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	e19c      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005e28:	4b8a      	ldr	r3, [pc, #552]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 030f 	and.w	r3, r3, #15
 8005e30:	683a      	ldr	r2, [r7, #0]
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d910      	bls.n	8005e58 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e36:	4b87      	ldr	r3, [pc, #540]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f023 020f 	bic.w	r2, r3, #15
 8005e3e:	4985      	ldr	r1, [pc, #532]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e46:	4b83      	ldr	r3, [pc, #524]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f003 030f 	and.w	r3, r3, #15
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d001      	beq.n	8005e58 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	e184      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f003 0304 	and.w	r3, r3, #4
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d010      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	691a      	ldr	r2, [r3, #16]
 8005e68:	4b7b      	ldr	r3, [pc, #492]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005e6a:	699b      	ldr	r3, [r3, #24]
 8005e6c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d908      	bls.n	8005e86 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005e74:	4b78      	ldr	r3, [pc, #480]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005e76:	699b      	ldr	r3, [r3, #24]
 8005e78:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691b      	ldr	r3, [r3, #16]
 8005e80:	4975      	ldr	r1, [pc, #468]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d010      	beq.n	8005eb4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	695a      	ldr	r2, [r3, #20]
 8005e96:	4b70      	ldr	r3, [pc, #448]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005e98:	69db      	ldr	r3, [r3, #28]
 8005e9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d908      	bls.n	8005eb4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005ea2:	4b6d      	ldr	r3, [pc, #436]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005ea4:	69db      	ldr	r3, [r3, #28]
 8005ea6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	496a      	ldr	r1, [pc, #424]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f003 0310 	and.w	r3, r3, #16
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d010      	beq.n	8005ee2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	699a      	ldr	r2, [r3, #24]
 8005ec4:	4b64      	ldr	r3, [pc, #400]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005ec6:	69db      	ldr	r3, [r3, #28]
 8005ec8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d908      	bls.n	8005ee2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8005ed0:	4b61      	ldr	r3, [pc, #388]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005ed2:	69db      	ldr	r3, [r3, #28]
 8005ed4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	699b      	ldr	r3, [r3, #24]
 8005edc:	495e      	ldr	r1, [pc, #376]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f003 0320 	and.w	r3, r3, #32
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d010      	beq.n	8005f10 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	69da      	ldr	r2, [r3, #28]
 8005ef2:	4b59      	ldr	r3, [pc, #356]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005ef4:	6a1b      	ldr	r3, [r3, #32]
 8005ef6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005efa:	429a      	cmp	r2, r3
 8005efc:	d908      	bls.n	8005f10 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8005efe:	4b56      	ldr	r3, [pc, #344]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f00:	6a1b      	ldr	r3, [r3, #32]
 8005f02:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	69db      	ldr	r3, [r3, #28]
 8005f0a:	4953      	ldr	r1, [pc, #332]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0302 	and.w	r3, r3, #2
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d010      	beq.n	8005f3e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68da      	ldr	r2, [r3, #12]
 8005f20:	4b4d      	ldr	r3, [pc, #308]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	f003 030f 	and.w	r3, r3, #15
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d908      	bls.n	8005f3e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005f2c:	4b4a      	ldr	r3, [pc, #296]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	f023 020f 	bic.w	r2, r3, #15
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68db      	ldr	r3, [r3, #12]
 8005f38:	4947      	ldr	r1, [pc, #284]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d055      	beq.n	8005ff6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8005f4a:	4b43      	ldr	r3, [pc, #268]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f4c:	699b      	ldr	r3, [r3, #24]
 8005f4e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	4940      	ldr	r1, [pc, #256]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	2b02      	cmp	r3, #2
 8005f62:	d107      	bne.n	8005f74 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005f64:	4b3c      	ldr	r3, [pc, #240]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d121      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f70:	2301      	movs	r3, #1
 8005f72:	e0f6      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	685b      	ldr	r3, [r3, #4]
 8005f78:	2b03      	cmp	r3, #3
 8005f7a:	d107      	bne.n	8005f8c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005f7c:	4b36      	ldr	r3, [pc, #216]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d115      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e0ea      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d107      	bne.n	8005fa4 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005f94:	4b30      	ldr	r3, [pc, #192]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d109      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fa0:	2301      	movs	r3, #1
 8005fa2:	e0de      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005fa4:	4b2c      	ldr	r3, [pc, #176]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f003 0304 	and.w	r3, r3, #4
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d101      	bne.n	8005fb4 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	e0d6      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005fb4:	4b28      	ldr	r3, [pc, #160]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	f023 0207 	bic.w	r2, r3, #7
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4925      	ldr	r1, [pc, #148]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005fc2:	4313      	orrs	r3, r2
 8005fc4:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc6:	f7fb ff71 	bl	8001eac <HAL_GetTick>
 8005fca:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fcc:	e00a      	b.n	8005fe4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005fce:	f7fb ff6d 	bl	8001eac <HAL_GetTick>
 8005fd2:	4602      	mov	r2, r0
 8005fd4:	697b      	ldr	r3, [r7, #20]
 8005fd6:	1ad3      	subs	r3, r2, r3
 8005fd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d901      	bls.n	8005fe4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	e0be      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005fe4:	4b1c      	ldr	r3, [pc, #112]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8005fe6:	691b      	ldr	r3, [r3, #16]
 8005fe8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	00db      	lsls	r3, r3, #3
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d1eb      	bne.n	8005fce <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d010      	beq.n	8006024 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	68da      	ldr	r2, [r3, #12]
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	429a      	cmp	r2, r3
 8006010:	d208      	bcs.n	8006024 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006012:	4b11      	ldr	r3, [pc, #68]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8006014:	699b      	ldr	r3, [r3, #24]
 8006016:	f023 020f 	bic.w	r2, r3, #15
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	68db      	ldr	r3, [r3, #12]
 800601e:	490e      	ldr	r1, [pc, #56]	; (8006058 <HAL_RCC_ClockConfig+0x244>)
 8006020:	4313      	orrs	r3, r2
 8006022:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006024:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 030f 	and.w	r3, r3, #15
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	429a      	cmp	r2, r3
 8006030:	d214      	bcs.n	800605c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	f023 020f 	bic.w	r2, r3, #15
 800603a:	4906      	ldr	r1, [pc, #24]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	4313      	orrs	r3, r2
 8006040:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006042:	4b04      	ldr	r3, [pc, #16]	; (8006054 <HAL_RCC_ClockConfig+0x240>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	683a      	ldr	r2, [r7, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	d005      	beq.n	800605c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e086      	b.n	8006162 <HAL_RCC_ClockConfig+0x34e>
 8006054:	52002000 	.word	0x52002000
 8006058:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f003 0304 	and.w	r3, r3, #4
 8006064:	2b00      	cmp	r3, #0
 8006066:	d010      	beq.n	800608a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	691a      	ldr	r2, [r3, #16]
 800606c:	4b3f      	ldr	r3, [pc, #252]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 800606e:	699b      	ldr	r3, [r3, #24]
 8006070:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006074:	429a      	cmp	r2, r3
 8006076:	d208      	bcs.n	800608a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006078:	4b3c      	ldr	r3, [pc, #240]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 800607a:	699b      	ldr	r3, [r3, #24]
 800607c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	691b      	ldr	r3, [r3, #16]
 8006084:	4939      	ldr	r1, [pc, #228]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 8006086:	4313      	orrs	r3, r2
 8006088:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f003 0308 	and.w	r3, r3, #8
 8006092:	2b00      	cmp	r3, #0
 8006094:	d010      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	4b34      	ldr	r3, [pc, #208]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 800609c:	69db      	ldr	r3, [r3, #28]
 800609e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d208      	bcs.n	80060b8 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80060a6:	4b31      	ldr	r3, [pc, #196]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 80060a8:	69db      	ldr	r3, [r3, #28]
 80060aa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	695b      	ldr	r3, [r3, #20]
 80060b2:	492e      	ldr	r1, [pc, #184]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 0310 	and.w	r3, r3, #16
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d010      	beq.n	80060e6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	699a      	ldr	r2, [r3, #24]
 80060c8:	4b28      	ldr	r3, [pc, #160]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d208      	bcs.n	80060e6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80060d4:	4b25      	ldr	r3, [pc, #148]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 80060d6:	69db      	ldr	r3, [r3, #28]
 80060d8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	699b      	ldr	r3, [r3, #24]
 80060e0:	4922      	ldr	r1, [pc, #136]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 80060e2:	4313      	orrs	r3, r2
 80060e4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d010      	beq.n	8006114 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	69da      	ldr	r2, [r3, #28]
 80060f6:	4b1d      	ldr	r3, [pc, #116]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 80060f8:	6a1b      	ldr	r3, [r3, #32]
 80060fa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80060fe:	429a      	cmp	r2, r3
 8006100:	d208      	bcs.n	8006114 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006102:	4b1a      	ldr	r3, [pc, #104]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	69db      	ldr	r3, [r3, #28]
 800610e:	4917      	ldr	r1, [pc, #92]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 8006110:	4313      	orrs	r3, r2
 8006112:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006114:	f000 f834 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 8006118:	4602      	mov	r2, r0
 800611a:	4b14      	ldr	r3, [pc, #80]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	0a1b      	lsrs	r3, r3, #8
 8006120:	f003 030f 	and.w	r3, r3, #15
 8006124:	4912      	ldr	r1, [pc, #72]	; (8006170 <HAL_RCC_ClockConfig+0x35c>)
 8006126:	5ccb      	ldrb	r3, [r1, r3]
 8006128:	f003 031f 	and.w	r3, r3, #31
 800612c:	fa22 f303 	lsr.w	r3, r2, r3
 8006130:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006132:	4b0e      	ldr	r3, [pc, #56]	; (800616c <HAL_RCC_ClockConfig+0x358>)
 8006134:	699b      	ldr	r3, [r3, #24]
 8006136:	f003 030f 	and.w	r3, r3, #15
 800613a:	4a0d      	ldr	r2, [pc, #52]	; (8006170 <HAL_RCC_ClockConfig+0x35c>)
 800613c:	5cd3      	ldrb	r3, [r2, r3]
 800613e:	f003 031f 	and.w	r3, r3, #31
 8006142:	693a      	ldr	r2, [r7, #16]
 8006144:	fa22 f303 	lsr.w	r3, r2, r3
 8006148:	4a0a      	ldr	r2, [pc, #40]	; (8006174 <HAL_RCC_ClockConfig+0x360>)
 800614a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800614c:	4a0a      	ldr	r2, [pc, #40]	; (8006178 <HAL_RCC_ClockConfig+0x364>)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8006152:	4b0a      	ldr	r3, [pc, #40]	; (800617c <HAL_RCC_ClockConfig+0x368>)
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4618      	mov	r0, r3
 8006158:	f7fb fe5e 	bl	8001e18 <HAL_InitTick>
 800615c:	4603      	mov	r3, r0
 800615e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8006160:	7bfb      	ldrb	r3, [r7, #15]
}
 8006162:	4618      	mov	r0, r3
 8006164:	3718      	adds	r7, #24
 8006166:	46bd      	mov	sp, r7
 8006168:	bd80      	pop	{r7, pc}
 800616a:	bf00      	nop
 800616c:	58024400 	.word	0x58024400
 8006170:	0800a42c 	.word	0x0800a42c
 8006174:	24000004 	.word	0x24000004
 8006178:	24000000 	.word	0x24000000
 800617c:	24000008 	.word	0x24000008

08006180 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006180:	b480      	push	{r7}
 8006182:	b089      	sub	sp, #36	; 0x24
 8006184:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006186:	4bb3      	ldr	r3, [pc, #716]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800618e:	2b18      	cmp	r3, #24
 8006190:	f200 8155 	bhi.w	800643e <HAL_RCC_GetSysClockFreq+0x2be>
 8006194:	a201      	add	r2, pc, #4	; (adr r2, 800619c <HAL_RCC_GetSysClockFreq+0x1c>)
 8006196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800619a:	bf00      	nop
 800619c:	08006201 	.word	0x08006201
 80061a0:	0800643f 	.word	0x0800643f
 80061a4:	0800643f 	.word	0x0800643f
 80061a8:	0800643f 	.word	0x0800643f
 80061ac:	0800643f 	.word	0x0800643f
 80061b0:	0800643f 	.word	0x0800643f
 80061b4:	0800643f 	.word	0x0800643f
 80061b8:	0800643f 	.word	0x0800643f
 80061bc:	08006227 	.word	0x08006227
 80061c0:	0800643f 	.word	0x0800643f
 80061c4:	0800643f 	.word	0x0800643f
 80061c8:	0800643f 	.word	0x0800643f
 80061cc:	0800643f 	.word	0x0800643f
 80061d0:	0800643f 	.word	0x0800643f
 80061d4:	0800643f 	.word	0x0800643f
 80061d8:	0800643f 	.word	0x0800643f
 80061dc:	0800622d 	.word	0x0800622d
 80061e0:	0800643f 	.word	0x0800643f
 80061e4:	0800643f 	.word	0x0800643f
 80061e8:	0800643f 	.word	0x0800643f
 80061ec:	0800643f 	.word	0x0800643f
 80061f0:	0800643f 	.word	0x0800643f
 80061f4:	0800643f 	.word	0x0800643f
 80061f8:	0800643f 	.word	0x0800643f
 80061fc:	08006233 	.word	0x08006233
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006200:	4b94      	ldr	r3, [pc, #592]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0320 	and.w	r3, r3, #32
 8006208:	2b00      	cmp	r3, #0
 800620a:	d009      	beq.n	8006220 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800620c:	4b91      	ldr	r3, [pc, #580]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	08db      	lsrs	r3, r3, #3
 8006212:	f003 0303 	and.w	r3, r3, #3
 8006216:	4a90      	ldr	r2, [pc, #576]	; (8006458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006218:	fa22 f303 	lsr.w	r3, r2, r3
 800621c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800621e:	e111      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8006220:	4b8d      	ldr	r3, [pc, #564]	; (8006458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8006222:	61bb      	str	r3, [r7, #24]
    break;
 8006224:	e10e      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8006226:	4b8d      	ldr	r3, [pc, #564]	; (800645c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006228:	61bb      	str	r3, [r7, #24]
    break;
 800622a:	e10b      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800622c:	4b8c      	ldr	r3, [pc, #560]	; (8006460 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800622e:	61bb      	str	r3, [r7, #24]
    break;
 8006230:	e108      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006232:	4b88      	ldr	r3, [pc, #544]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800623c:	4b85      	ldr	r3, [pc, #532]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800623e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006240:	091b      	lsrs	r3, r3, #4
 8006242:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006246:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8006248:	4b82      	ldr	r3, [pc, #520]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800624a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800624c:	f003 0301 	and.w	r3, r3, #1
 8006250:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8006252:	4b80      	ldr	r3, [pc, #512]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	08db      	lsrs	r3, r3, #3
 8006258:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800625c:	68fa      	ldr	r2, [r7, #12]
 800625e:	fb02 f303 	mul.w	r3, r2, r3
 8006262:	ee07 3a90 	vmov	s15, r3
 8006266:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800626a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	2b00      	cmp	r3, #0
 8006272:	f000 80e1 	beq.w	8006438 <HAL_RCC_GetSysClockFreq+0x2b8>
 8006276:	697b      	ldr	r3, [r7, #20]
 8006278:	2b02      	cmp	r3, #2
 800627a:	f000 8083 	beq.w	8006384 <HAL_RCC_GetSysClockFreq+0x204>
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	2b02      	cmp	r3, #2
 8006282:	f200 80a1 	bhi.w	80063c8 <HAL_RCC_GetSysClockFreq+0x248>
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_RCC_GetSysClockFreq+0x114>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	2b01      	cmp	r3, #1
 8006290:	d056      	beq.n	8006340 <HAL_RCC_GetSysClockFreq+0x1c0>
 8006292:	e099      	b.n	80063c8 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006294:	4b6f      	ldr	r3, [pc, #444]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	f003 0320 	and.w	r3, r3, #32
 800629c:	2b00      	cmp	r3, #0
 800629e:	d02d      	beq.n	80062fc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80062a0:	4b6c      	ldr	r3, [pc, #432]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	08db      	lsrs	r3, r3, #3
 80062a6:	f003 0303 	and.w	r3, r3, #3
 80062aa:	4a6b      	ldr	r2, [pc, #428]	; (8006458 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80062ac:	fa22 f303 	lsr.w	r3, r2, r3
 80062b0:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	ee07 3a90 	vmov	s15, r3
 80062b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	ee07 3a90 	vmov	s15, r3
 80062c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062ca:	4b62      	ldr	r3, [pc, #392]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80062cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d2:	ee07 3a90 	vmov	s15, r3
 80062d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062da:	ed97 6a02 	vldr	s12, [r7, #8]
 80062de:	eddf 5a61 	vldr	s11, [pc, #388]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2e4>
 80062e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80062fa:	e087      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	ee07 3a90 	vmov	s15, r3
 8006302:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006306:	eddf 6a58 	vldr	s13, [pc, #352]	; 8006468 <HAL_RCC_GetSysClockFreq+0x2e8>
 800630a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800630e:	4b51      	ldr	r3, [pc, #324]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006316:	ee07 3a90 	vmov	s15, r3
 800631a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800631e:	ed97 6a02 	vldr	s12, [r7, #8]
 8006322:	eddf 5a50 	vldr	s11, [pc, #320]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2e4>
 8006326:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800632a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800632e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006332:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006336:	ee67 7a27 	vmul.f32	s15, s14, s15
 800633a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800633e:	e065      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	ee07 3a90 	vmov	s15, r3
 8006346:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800634a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800646c <HAL_RCC_GetSysClockFreq+0x2ec>
 800634e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006352:	4b40      	ldr	r3, [pc, #256]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006356:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800635a:	ee07 3a90 	vmov	s15, r3
 800635e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006362:	ed97 6a02 	vldr	s12, [r7, #8]
 8006366:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2e4>
 800636a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800636e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006372:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006376:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800637a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800637e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006382:	e043      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	ee07 3a90 	vmov	s15, r3
 800638a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800638e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8006470 <HAL_RCC_GetSysClockFreq+0x2f0>
 8006392:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006396:	4b2f      	ldr	r3, [pc, #188]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8006398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800639a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800639e:	ee07 3a90 	vmov	s15, r3
 80063a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80063aa:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063c6:	e021      	b.n	800640c <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	ee07 3a90 	vmov	s15, r3
 80063ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063d2:	eddf 6a26 	vldr	s13, [pc, #152]	; 800646c <HAL_RCC_GetSysClockFreq+0x2ec>
 80063d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063da:	4b1e      	ldr	r3, [pc, #120]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80063dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063e2:	ee07 3a90 	vmov	s15, r3
 80063e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80063ee:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8006464 <HAL_RCC_GetSysClockFreq+0x2e4>
 80063f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800640a:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800640c:	4b11      	ldr	r3, [pc, #68]	; (8006454 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800640e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006410:	0a5b      	lsrs	r3, r3, #9
 8006412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006416:	3301      	adds	r3, #1
 8006418:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	ee07 3a90 	vmov	s15, r3
 8006420:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006424:	edd7 6a07 	vldr	s13, [r7, #28]
 8006428:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800642c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006430:	ee17 3a90 	vmov	r3, s15
 8006434:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8006436:	e005      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8006438:	2300      	movs	r3, #0
 800643a:	61bb      	str	r3, [r7, #24]
    break;
 800643c:	e002      	b.n	8006444 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8006440:	61bb      	str	r3, [r7, #24]
    break;
 8006442:	bf00      	nop
  }

  return sysclockfreq;
 8006444:	69bb      	ldr	r3, [r7, #24]
}
 8006446:	4618      	mov	r0, r3
 8006448:	3724      	adds	r7, #36	; 0x24
 800644a:	46bd      	mov	sp, r7
 800644c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	58024400 	.word	0x58024400
 8006458:	03d09000 	.word	0x03d09000
 800645c:	003d0900 	.word	0x003d0900
 8006460:	007a1200 	.word	0x007a1200
 8006464:	46000000 	.word	0x46000000
 8006468:	4c742400 	.word	0x4c742400
 800646c:	4a742400 	.word	0x4a742400
 8006470:	4af42400 	.word	0x4af42400

08006474 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b082      	sub	sp, #8
 8006478:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800647a:	f7ff fe81 	bl	8006180 <HAL_RCC_GetSysClockFreq>
 800647e:	4602      	mov	r2, r0
 8006480:	4b10      	ldr	r3, [pc, #64]	; (80064c4 <HAL_RCC_GetHCLKFreq+0x50>)
 8006482:	699b      	ldr	r3, [r3, #24]
 8006484:	0a1b      	lsrs	r3, r3, #8
 8006486:	f003 030f 	and.w	r3, r3, #15
 800648a:	490f      	ldr	r1, [pc, #60]	; (80064c8 <HAL_RCC_GetHCLKFreq+0x54>)
 800648c:	5ccb      	ldrb	r3, [r1, r3]
 800648e:	f003 031f 	and.w	r3, r3, #31
 8006492:	fa22 f303 	lsr.w	r3, r2, r3
 8006496:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006498:	4b0a      	ldr	r3, [pc, #40]	; (80064c4 <HAL_RCC_GetHCLKFreq+0x50>)
 800649a:	699b      	ldr	r3, [r3, #24]
 800649c:	f003 030f 	and.w	r3, r3, #15
 80064a0:	4a09      	ldr	r2, [pc, #36]	; (80064c8 <HAL_RCC_GetHCLKFreq+0x54>)
 80064a2:	5cd3      	ldrb	r3, [r2, r3]
 80064a4:	f003 031f 	and.w	r3, r3, #31
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	fa22 f303 	lsr.w	r3, r2, r3
 80064ae:	4a07      	ldr	r2, [pc, #28]	; (80064cc <HAL_RCC_GetHCLKFreq+0x58>)
 80064b0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80064b2:	4a07      	ldr	r2, [pc, #28]	; (80064d0 <HAL_RCC_GetHCLKFreq+0x5c>)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80064b8:	4b04      	ldr	r3, [pc, #16]	; (80064cc <HAL_RCC_GetHCLKFreq+0x58>)
 80064ba:	681b      	ldr	r3, [r3, #0]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}
 80064c4:	58024400 	.word	0x58024400
 80064c8:	0800a42c 	.word	0x0800a42c
 80064cc:	24000004 	.word	0x24000004
 80064d0:	24000000 	.word	0x24000000

080064d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80064d8:	f7ff ffcc 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 80064dc:	4602      	mov	r2, r0
 80064de:	4b06      	ldr	r3, [pc, #24]	; (80064f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80064e0:	69db      	ldr	r3, [r3, #28]
 80064e2:	091b      	lsrs	r3, r3, #4
 80064e4:	f003 0307 	and.w	r3, r3, #7
 80064e8:	4904      	ldr	r1, [pc, #16]	; (80064fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80064ea:	5ccb      	ldrb	r3, [r1, r3]
 80064ec:	f003 031f 	and.w	r3, r3, #31
 80064f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80064f4:	4618      	mov	r0, r3
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	58024400 	.word	0x58024400
 80064fc:	0800a42c 	.word	0x0800a42c

08006500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8006504:	f7ff ffb6 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 8006508:	4602      	mov	r2, r0
 800650a:	4b06      	ldr	r3, [pc, #24]	; (8006524 <HAL_RCC_GetPCLK2Freq+0x24>)
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	f003 0307 	and.w	r3, r3, #7
 8006514:	4904      	ldr	r1, [pc, #16]	; (8006528 <HAL_RCC_GetPCLK2Freq+0x28>)
 8006516:	5ccb      	ldrb	r3, [r1, r3]
 8006518:	f003 031f 	and.w	r3, r3, #31
 800651c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8006520:	4618      	mov	r0, r3
 8006522:	bd80      	pop	{r7, pc}
 8006524:	58024400 	.word	0x58024400
 8006528:	0800a42c 	.word	0x0800a42c

0800652c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006534:	2300      	movs	r3, #0
 8006536:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006538:	2300      	movs	r3, #0
 800653a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006544:	2b00      	cmp	r3, #0
 8006546:	d03f      	beq.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800654c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006550:	d02a      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8006552:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006556:	d824      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006558:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800655c:	d018      	beq.n	8006590 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800655e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006562:	d81e      	bhi.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8006564:	2b00      	cmp	r3, #0
 8006566:	d003      	beq.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8006568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800656c:	d007      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0x52>
 800656e:	e018      	b.n	80065a2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006570:	4ba3      	ldr	r3, [pc, #652]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006574:	4aa2      	ldr	r2, [pc, #648]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006576:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800657a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800657c:	e015      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3304      	adds	r3, #4
 8006582:	2102      	movs	r1, #2
 8006584:	4618      	mov	r0, r3
 8006586:	f001 f9d5 	bl	8007934 <RCCEx_PLL2_Config>
 800658a:	4603      	mov	r3, r0
 800658c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800658e:	e00c      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3324      	adds	r3, #36	; 0x24
 8006594:	2102      	movs	r1, #2
 8006596:	4618      	mov	r0, r3
 8006598:	f001 fa7e 	bl	8007a98 <RCCEx_PLL3_Config>
 800659c:	4603      	mov	r3, r0
 800659e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 80065a0:	e003      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	75fb      	strb	r3, [r7, #23]
      break;
 80065a6:	e000      	b.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80065a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80065aa:	7dfb      	ldrb	r3, [r7, #23]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d109      	bne.n	80065c4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80065b0:	4b93      	ldr	r3, [pc, #588]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80065bc:	4990      	ldr	r1, [pc, #576]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065be:	4313      	orrs	r3, r2
 80065c0:	650b      	str	r3, [r1, #80]	; 0x50
 80065c2:	e001      	b.n	80065c8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065c4:	7dfb      	ldrb	r3, [r7, #23]
 80065c6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d03d      	beq.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80065d8:	2b04      	cmp	r3, #4
 80065da:	d826      	bhi.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80065dc:	a201      	add	r2, pc, #4	; (adr r2, 80065e4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80065de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e2:	bf00      	nop
 80065e4:	080065f9 	.word	0x080065f9
 80065e8:	08006607 	.word	0x08006607
 80065ec:	08006619 	.word	0x08006619
 80065f0:	08006631 	.word	0x08006631
 80065f4:	08006631 	.word	0x08006631
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80065f8:	4b81      	ldr	r3, [pc, #516]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a80      	ldr	r2, [pc, #512]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80065fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006602:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006604:	e015      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3304      	adds	r3, #4
 800660a:	2100      	movs	r1, #0
 800660c:	4618      	mov	r0, r3
 800660e:	f001 f991 	bl	8007934 <RCCEx_PLL2_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006616:	e00c      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3324      	adds	r3, #36	; 0x24
 800661c:	2100      	movs	r1, #0
 800661e:	4618      	mov	r0, r3
 8006620:	f001 fa3a 	bl	8007a98 <RCCEx_PLL3_Config>
 8006624:	4603      	mov	r3, r0
 8006626:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006628:	e003      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800662a:	2301      	movs	r3, #1
 800662c:	75fb      	strb	r3, [r7, #23]
      break;
 800662e:	e000      	b.n	8006632 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8006630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006632:	7dfb      	ldrb	r3, [r7, #23]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d109      	bne.n	800664c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006638:	4b71      	ldr	r3, [pc, #452]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800663a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800663c:	f023 0207 	bic.w	r2, r3, #7
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006644:	496e      	ldr	r1, [pc, #440]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006646:	4313      	orrs	r3, r2
 8006648:	650b      	str	r3, [r1, #80]	; 0x50
 800664a:	e001      	b.n	8006650 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800664c:	7dfb      	ldrb	r3, [r7, #23]
 800664e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006658:	2b00      	cmp	r3, #0
 800665a:	d042      	beq.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006664:	d02b      	beq.n	80066be <HAL_RCCEx_PeriphCLKConfig+0x192>
 8006666:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800666a:	d825      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800666c:	2bc0      	cmp	r3, #192	; 0xc0
 800666e:	d028      	beq.n	80066c2 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006670:	2bc0      	cmp	r3, #192	; 0xc0
 8006672:	d821      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8006674:	2b80      	cmp	r3, #128	; 0x80
 8006676:	d016      	beq.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8006678:	2b80      	cmp	r3, #128	; 0x80
 800667a:	d81d      	bhi.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800667c:	2b00      	cmp	r3, #0
 800667e:	d002      	beq.n	8006686 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8006680:	2b40      	cmp	r3, #64	; 0x40
 8006682:	d007      	beq.n	8006694 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8006684:	e018      	b.n	80066b8 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006686:	4b5e      	ldr	r3, [pc, #376]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800668a:	4a5d      	ldr	r2, [pc, #372]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800668c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006690:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8006692:	e017      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	3304      	adds	r3, #4
 8006698:	2100      	movs	r1, #0
 800669a:	4618      	mov	r0, r3
 800669c:	f001 f94a 	bl	8007934 <RCCEx_PLL2_Config>
 80066a0:	4603      	mov	r3, r0
 80066a2:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066a4:	e00e      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2100      	movs	r1, #0
 80066ac:	4618      	mov	r0, r3
 80066ae:	f001 f9f3 	bl	8007a98 <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80066b6:	e005      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75fb      	strb	r3, [r7, #23]
      break;
 80066bc:	e002      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80066c2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80066c4:	7dfb      	ldrb	r3, [r7, #23]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80066ca:	4b4d      	ldr	r3, [pc, #308]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ce:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066d6:	494a      	ldr	r1, [pc, #296]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80066d8:	4313      	orrs	r3, r2
 80066da:	650b      	str	r3, [r1, #80]	; 0x50
 80066dc:	e001      	b.n	80066e2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066de:	7dfb      	ldrb	r3, [r7, #23]
 80066e0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d049      	beq.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80066f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066f8:	d030      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x230>
 80066fa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80066fe:	d82a      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006700:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8006704:	d02c      	beq.n	8006760 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8006706:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800670a:	d824      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800670c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006710:	d018      	beq.n	8006744 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8006712:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006716:	d81e      	bhi.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d003      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800671c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006720:	d007      	beq.n	8006732 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8006722:	e018      	b.n	8006756 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006724:	4b36      	ldr	r3, [pc, #216]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	4a35      	ldr	r2, [pc, #212]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800672a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800672e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006730:	e017      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	3304      	adds	r3, #4
 8006736:	2100      	movs	r1, #0
 8006738:	4618      	mov	r0, r3
 800673a:	f001 f8fb 	bl	8007934 <RCCEx_PLL2_Config>
 800673e:	4603      	mov	r3, r0
 8006740:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8006742:	e00e      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	3324      	adds	r3, #36	; 0x24
 8006748:	2100      	movs	r1, #0
 800674a:	4618      	mov	r0, r3
 800674c:	f001 f9a4 	bl	8007a98 <RCCEx_PLL3_Config>
 8006750:	4603      	mov	r3, r0
 8006752:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8006754:	e005      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8006756:	2301      	movs	r3, #1
 8006758:	75fb      	strb	r3, [r7, #23]
      break;
 800675a:	e002      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800675c:	bf00      	nop
 800675e:	e000      	b.n	8006762 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8006760:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006762:	7dfb      	ldrb	r3, [r7, #23]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10a      	bne.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8006768:	4b25      	ldr	r3, [pc, #148]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800676a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800676c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8006776:	4922      	ldr	r1, [pc, #136]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8006778:	4313      	orrs	r3, r2
 800677a:	658b      	str	r3, [r1, #88]	; 0x58
 800677c:	e001      	b.n	8006782 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800677e:	7dfb      	ldrb	r3, [r7, #23]
 8006780:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800678a:	2b00      	cmp	r3, #0
 800678c:	d04b      	beq.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8006794:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8006798:	d030      	beq.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800679a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800679e:	d82a      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067a0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067a4:	d02e      	beq.n	8006804 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 80067a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80067aa:	d824      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b0:	d018      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 80067b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067b6:	d81e      	bhi.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d003      	beq.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80067bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80067c0:	d007      	beq.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80067c2:	e018      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067c4:	4b0e      	ldr	r3, [pc, #56]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	4a0d      	ldr	r2, [pc, #52]	; (8006800 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80067ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067d0:	e019      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	3304      	adds	r3, #4
 80067d6:	2100      	movs	r1, #0
 80067d8:	4618      	mov	r0, r3
 80067da:	f001 f8ab 	bl	8007934 <RCCEx_PLL2_Config>
 80067de:	4603      	mov	r3, r0
 80067e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80067e2:	e010      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3324      	adds	r3, #36	; 0x24
 80067e8:	2100      	movs	r1, #0
 80067ea:	4618      	mov	r0, r3
 80067ec:	f001 f954 	bl	8007a98 <RCCEx_PLL3_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80067f4:	e007      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
      break;
 80067fa:	e004      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80067fc:	bf00      	nop
 80067fe:	e002      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8006800:	58024400 	.word	0x58024400
      break;
 8006804:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006806:	7dfb      	ldrb	r3, [r7, #23]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10a      	bne.n	8006822 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800680c:	4b99      	ldr	r3, [pc, #612]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800680e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006810:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800681a:	4996      	ldr	r1, [pc, #600]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800681c:	4313      	orrs	r3, r2
 800681e:	658b      	str	r3, [r1, #88]	; 0x58
 8006820:	e001      	b.n	8006826 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800682e:	2b00      	cmp	r3, #0
 8006830:	d032      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006836:	2b30      	cmp	r3, #48	; 0x30
 8006838:	d01c      	beq.n	8006874 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800683a:	2b30      	cmp	r3, #48	; 0x30
 800683c:	d817      	bhi.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x342>
 800683e:	2b20      	cmp	r3, #32
 8006840:	d00c      	beq.n	800685c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8006842:	2b20      	cmp	r3, #32
 8006844:	d813      	bhi.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8006846:	2b00      	cmp	r3, #0
 8006848:	d016      	beq.n	8006878 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800684a:	2b10      	cmp	r3, #16
 800684c:	d10f      	bne.n	800686e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800684e:	4b89      	ldr	r3, [pc, #548]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006852:	4a88      	ldr	r2, [pc, #544]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006854:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006858:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800685a:	e00e      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	3304      	adds	r3, #4
 8006860:	2102      	movs	r1, #2
 8006862:	4618      	mov	r0, r3
 8006864:	f001 f866 	bl	8007934 <RCCEx_PLL2_Config>
 8006868:	4603      	mov	r3, r0
 800686a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800686c:	e005      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800686e:	2301      	movs	r3, #1
 8006870:	75fb      	strb	r3, [r7, #23]
      break;
 8006872:	e002      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006874:	bf00      	nop
 8006876:	e000      	b.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8006878:	bf00      	nop
    }

    if(ret == HAL_OK)
 800687a:	7dfb      	ldrb	r3, [r7, #23]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d109      	bne.n	8006894 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006880:	4b7c      	ldr	r3, [pc, #496]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006882:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006884:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800688c:	4979      	ldr	r1, [pc, #484]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800688e:	4313      	orrs	r3, r2
 8006890:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006892:	e001      	b.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006894:	7dfb      	ldrb	r3, [r7, #23]
 8006896:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d047      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068ac:	d030      	beq.n	8006910 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80068ae:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068b2:	d82a      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80068b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068b8:	d02c      	beq.n	8006914 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80068ba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80068be:	d824      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80068c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068c4:	d018      	beq.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80068c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068ca:	d81e      	bhi.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d003      	beq.n	80068d8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80068d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068d4:	d007      	beq.n	80068e6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80068d6:	e018      	b.n	800690a <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80068d8:	4b66      	ldr	r3, [pc, #408]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068dc:	4a65      	ldr	r2, [pc, #404]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80068de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80068e2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068e4:	e017      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	3304      	adds	r3, #4
 80068ea:	2100      	movs	r1, #0
 80068ec:	4618      	mov	r0, r3
 80068ee:	f001 f821 	bl	8007934 <RCCEx_PLL2_Config>
 80068f2:	4603      	mov	r3, r0
 80068f4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80068f6:	e00e      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	3324      	adds	r3, #36	; 0x24
 80068fc:	2100      	movs	r1, #0
 80068fe:	4618      	mov	r0, r3
 8006900:	f001 f8ca 	bl	8007a98 <RCCEx_PLL3_Config>
 8006904:	4603      	mov	r3, r0
 8006906:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8006908:	e005      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800690a:	2301      	movs	r3, #1
 800690c:	75fb      	strb	r3, [r7, #23]
      break;
 800690e:	e002      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006910:	bf00      	nop
 8006912:	e000      	b.n	8006916 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8006914:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006916:	7dfb      	ldrb	r3, [r7, #23]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800691c:	4b55      	ldr	r3, [pc, #340]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800691e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006920:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006928:	4952      	ldr	r1, [pc, #328]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800692a:	4313      	orrs	r3, r2
 800692c:	650b      	str	r3, [r1, #80]	; 0x50
 800692e:	e001      	b.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006930:	7dfb      	ldrb	r3, [r7, #23]
 8006932:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800693c:	2b00      	cmp	r3, #0
 800693e:	d049      	beq.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006948:	d02e      	beq.n	80069a8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800694a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800694e:	d828      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006950:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006954:	d02a      	beq.n	80069ac <HAL_RCCEx_PeriphCLKConfig+0x480>
 8006956:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800695a:	d822      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 800695c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006960:	d026      	beq.n	80069b0 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8006962:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006966:	d81c      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006968:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800696c:	d010      	beq.n	8006990 <HAL_RCCEx_PeriphCLKConfig+0x464>
 800696e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006972:	d816      	bhi.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d01d      	beq.n	80069b4 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697c:	d111      	bne.n	80069a2 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	3304      	adds	r3, #4
 8006982:	2101      	movs	r1, #1
 8006984:	4618      	mov	r0, r3
 8006986:	f000 ffd5 	bl	8007934 <RCCEx_PLL2_Config>
 800698a:	4603      	mov	r3, r0
 800698c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800698e:	e012      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	3324      	adds	r3, #36	; 0x24
 8006994:	2101      	movs	r1, #1
 8006996:	4618      	mov	r0, r3
 8006998:	f001 f87e 	bl	8007a98 <RCCEx_PLL3_Config>
 800699c:	4603      	mov	r3, r0
 800699e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 80069a0:	e009      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80069a2:	2301      	movs	r3, #1
 80069a4:	75fb      	strb	r3, [r7, #23]
      break;
 80069a6:	e006      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069a8:	bf00      	nop
 80069aa:	e004      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069ac:	bf00      	nop
 80069ae:	e002      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069b0:	bf00      	nop
 80069b2:	e000      	b.n	80069b6 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 80069b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d109      	bne.n	80069d0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80069bc:	4b2d      	ldr	r3, [pc, #180]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069c0:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c8:	492a      	ldr	r1, [pc, #168]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80069ca:	4313      	orrs	r3, r2
 80069cc:	650b      	str	r3, [r1, #80]	; 0x50
 80069ce:	e001      	b.n	80069d4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80069d0:	7dfb      	ldrb	r3, [r7, #23]
 80069d2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d04d      	beq.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80069e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069ea:	d02e      	beq.n	8006a4a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 80069ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80069f0:	d828      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80069f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f6:	d02a      	beq.n	8006a4e <HAL_RCCEx_PeriphCLKConfig+0x522>
 80069f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069fc:	d822      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 80069fe:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a02:	d026      	beq.n	8006a52 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8006a04:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006a08:	d81c      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006a0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a0e:	d010      	beq.n	8006a32 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8006a10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a14:	d816      	bhi.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d01d      	beq.n	8006a56 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8006a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a1e:	d111      	bne.n	8006a44 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	3304      	adds	r3, #4
 8006a24:	2101      	movs	r1, #1
 8006a26:	4618      	mov	r0, r3
 8006a28:	f000 ff84 	bl	8007934 <RCCEx_PLL2_Config>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a30:	e012      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3324      	adds	r3, #36	; 0x24
 8006a36:	2101      	movs	r1, #1
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f001 f82d 	bl	8007a98 <RCCEx_PLL3_Config>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006a42:	e009      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	75fb      	strb	r3, [r7, #23]
      break;
 8006a48:	e006      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a4a:	bf00      	nop
 8006a4c:	e004      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a4e:	bf00      	nop
 8006a50:	e002      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a52:	bf00      	nop
 8006a54:	e000      	b.n	8006a58 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006a56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006a58:	7dfb      	ldrb	r3, [r7, #23]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10c      	bne.n	8006a78 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8006a5e:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a62:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8006a6c:	4901      	ldr	r1, [pc, #4]	; (8006a74 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	658b      	str	r3, [r1, #88]	; 0x58
 8006a72:	e003      	b.n	8006a7c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006a74:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006a78:	7dfb      	ldrb	r3, [r7, #23]
 8006a7a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02f      	beq.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006a8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a90:	d00e      	beq.n	8006ab0 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006a96:	d814      	bhi.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d015      	beq.n	8006ac8 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8006a9c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006aa0:	d10f      	bne.n	8006ac2 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006aa2:	4baf      	ldr	r3, [pc, #700]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa6:	4aae      	ldr	r2, [pc, #696]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006aa8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006aae:	e00c      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	3304      	adds	r3, #4
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f000 ff3c 	bl	8007934 <RCCEx_PLL2_Config>
 8006abc:	4603      	mov	r3, r0
 8006abe:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006ac0:	e003      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	75fb      	strb	r3, [r7, #23]
      break;
 8006ac6:	e000      	b.n	8006aca <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006ac8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006aca:	7dfb      	ldrb	r3, [r7, #23]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d109      	bne.n	8006ae4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006ad0:	4ba3      	ldr	r3, [pc, #652]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ad2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ad4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006adc:	49a0      	ldr	r1, [pc, #640]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	650b      	str	r3, [r1, #80]	; 0x50
 8006ae2:	e001      	b.n	8006ae8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006ae4:	7dfb      	ldrb	r3, [r7, #23]
 8006ae6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d032      	beq.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	2b03      	cmp	r3, #3
 8006afa:	d81b      	bhi.n	8006b34 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8006afc:	a201      	add	r2, pc, #4	; (adr r2, 8006b04 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8006afe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b02:	bf00      	nop
 8006b04:	08006b3b 	.word	0x08006b3b
 8006b08:	08006b15 	.word	0x08006b15
 8006b0c:	08006b23 	.word	0x08006b23
 8006b10:	08006b3b 	.word	0x08006b3b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006b14:	4b92      	ldr	r3, [pc, #584]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b18:	4a91      	ldr	r2, [pc, #580]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b1e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b20:	e00c      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	3304      	adds	r3, #4
 8006b26:	2102      	movs	r1, #2
 8006b28:	4618      	mov	r0, r3
 8006b2a:	f000 ff03 	bl	8007934 <RCCEx_PLL2_Config>
 8006b2e:	4603      	mov	r3, r0
 8006b30:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006b32:	e003      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006b34:	2301      	movs	r3, #1
 8006b36:	75fb      	strb	r3, [r7, #23]
      break;
 8006b38:	e000      	b.n	8006b3c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8006b3a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d109      	bne.n	8006b56 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006b42:	4b87      	ldr	r3, [pc, #540]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b46:	f023 0203 	bic.w	r2, r3, #3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b4e:	4984      	ldr	r1, [pc, #528]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006b50:	4313      	orrs	r3, r2
 8006b52:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006b54:	e001      	b.n	8006b5a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006b56:	7dfb      	ldrb	r3, [r7, #23]
 8006b58:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	f000 8086 	beq.w	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006b68:	4b7e      	ldr	r3, [pc, #504]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a7d      	ldr	r2, [pc, #500]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006b74:	f7fb f99a 	bl	8001eac <HAL_GetTick>
 8006b78:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b7a:	e009      	b.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b7c:	f7fb f996 	bl	8001eac <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b64      	cmp	r3, #100	; 0x64
 8006b88:	d902      	bls.n	8006b90 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	75fb      	strb	r3, [r7, #23]
        break;
 8006b8e:	e005      	b.n	8006b9c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006b90:	4b74      	ldr	r3, [pc, #464]	; (8006d64 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d0ef      	beq.n	8006b7c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8006b9c:	7dfb      	ldrb	r3, [r7, #23]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d166      	bne.n	8006c70 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006ba2:	4b6f      	ldr	r3, [pc, #444]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006ba4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006bac:	4053      	eors	r3, r2
 8006bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d013      	beq.n	8006bde <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006bb6:	4b6a      	ldr	r3, [pc, #424]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bbe:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006bc0:	4b67      	ldr	r3, [pc, #412]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc4:	4a66      	ldr	r2, [pc, #408]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006bca:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006bcc:	4b64      	ldr	r3, [pc, #400]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd0:	4a63      	ldr	r2, [pc, #396]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bd2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006bd6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8006bd8:	4a61      	ldr	r2, [pc, #388]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006be8:	d115      	bne.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bea:	f7fb f95f 	bl	8001eac <HAL_GetTick>
 8006bee:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006bf0:	e00b      	b.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006bf2:	f7fb f95b 	bl	8001eac <HAL_GetTick>
 8006bf6:	4602      	mov	r2, r0
 8006bf8:	693b      	ldr	r3, [r7, #16]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d902      	bls.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8006c04:	2303      	movs	r3, #3
 8006c06:	75fb      	strb	r3, [r7, #23]
            break;
 8006c08:	e005      	b.n	8006c16 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c0a:	4b55      	ldr	r3, [pc, #340]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c0e:	f003 0302 	and.w	r3, r3, #2
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d0ed      	beq.n	8006bf2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8006c16:	7dfb      	ldrb	r3, [r7, #23]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d126      	bne.n	8006c6a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006c2a:	d10d      	bne.n	8006c48 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8006c2c:	4b4c      	ldr	r3, [pc, #304]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c2e:	691b      	ldr	r3, [r3, #16]
 8006c30:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c3a:	0919      	lsrs	r1, r3, #4
 8006c3c:	4b4a      	ldr	r3, [pc, #296]	; (8006d68 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8006c3e:	400b      	ands	r3, r1
 8006c40:	4947      	ldr	r1, [pc, #284]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	610b      	str	r3, [r1, #16]
 8006c46:	e005      	b.n	8006c54 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006c48:	4b45      	ldr	r3, [pc, #276]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	4a44      	ldr	r2, [pc, #272]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c4e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006c52:	6113      	str	r3, [r2, #16]
 8006c54:	4b42      	ldr	r3, [pc, #264]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8006c5e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006c62:	493f      	ldr	r1, [pc, #252]	; (8006d60 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	670b      	str	r3, [r1, #112]	; 0x70
 8006c68:	e004      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	75bb      	strb	r3, [r7, #22]
 8006c6e:	e001      	b.n	8006c74 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006c70:	7dfb      	ldrb	r3, [r7, #23]
 8006c72:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f003 0301 	and.w	r3, r3, #1
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	f000 8085 	beq.w	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006c86:	2b28      	cmp	r3, #40	; 0x28
 8006c88:	d866      	bhi.n	8006d58 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8006c8a:	a201      	add	r2, pc, #4	; (adr r2, 8006c90 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8006c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c90:	08006d6d 	.word	0x08006d6d
 8006c94:	08006d59 	.word	0x08006d59
 8006c98:	08006d59 	.word	0x08006d59
 8006c9c:	08006d59 	.word	0x08006d59
 8006ca0:	08006d59 	.word	0x08006d59
 8006ca4:	08006d59 	.word	0x08006d59
 8006ca8:	08006d59 	.word	0x08006d59
 8006cac:	08006d59 	.word	0x08006d59
 8006cb0:	08006d35 	.word	0x08006d35
 8006cb4:	08006d59 	.word	0x08006d59
 8006cb8:	08006d59 	.word	0x08006d59
 8006cbc:	08006d59 	.word	0x08006d59
 8006cc0:	08006d59 	.word	0x08006d59
 8006cc4:	08006d59 	.word	0x08006d59
 8006cc8:	08006d59 	.word	0x08006d59
 8006ccc:	08006d59 	.word	0x08006d59
 8006cd0:	08006d47 	.word	0x08006d47
 8006cd4:	08006d59 	.word	0x08006d59
 8006cd8:	08006d59 	.word	0x08006d59
 8006cdc:	08006d59 	.word	0x08006d59
 8006ce0:	08006d59 	.word	0x08006d59
 8006ce4:	08006d59 	.word	0x08006d59
 8006ce8:	08006d59 	.word	0x08006d59
 8006cec:	08006d59 	.word	0x08006d59
 8006cf0:	08006d6d 	.word	0x08006d6d
 8006cf4:	08006d59 	.word	0x08006d59
 8006cf8:	08006d59 	.word	0x08006d59
 8006cfc:	08006d59 	.word	0x08006d59
 8006d00:	08006d59 	.word	0x08006d59
 8006d04:	08006d59 	.word	0x08006d59
 8006d08:	08006d59 	.word	0x08006d59
 8006d0c:	08006d59 	.word	0x08006d59
 8006d10:	08006d6d 	.word	0x08006d6d
 8006d14:	08006d59 	.word	0x08006d59
 8006d18:	08006d59 	.word	0x08006d59
 8006d1c:	08006d59 	.word	0x08006d59
 8006d20:	08006d59 	.word	0x08006d59
 8006d24:	08006d59 	.word	0x08006d59
 8006d28:	08006d59 	.word	0x08006d59
 8006d2c:	08006d59 	.word	0x08006d59
 8006d30:	08006d6d 	.word	0x08006d6d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	3304      	adds	r3, #4
 8006d38:	2101      	movs	r1, #1
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 fdfa 	bl	8007934 <RCCEx_PLL2_Config>
 8006d40:	4603      	mov	r3, r0
 8006d42:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d44:	e013      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	3324      	adds	r3, #36	; 0x24
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fea3 	bl	8007a98 <RCCEx_PLL3_Config>
 8006d52:	4603      	mov	r3, r0
 8006d54:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006d56:	e00a      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	75fb      	strb	r3, [r7, #23]
      break;
 8006d5c:	e007      	b.n	8006d6e <HAL_RCCEx_PeriphCLKConfig+0x842>
 8006d5e:	bf00      	nop
 8006d60:	58024400 	.word	0x58024400
 8006d64:	58024800 	.word	0x58024800
 8006d68:	00ffffcf 	.word	0x00ffffcf
      break;
 8006d6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d109      	bne.n	8006d88 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006d74:	4b96      	ldr	r3, [pc, #600]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d78:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d80:	4993      	ldr	r1, [pc, #588]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	654b      	str	r3, [r1, #84]	; 0x54
 8006d86:	e001      	b.n	8006d8c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006d88:	7dfb      	ldrb	r3, [r7, #23]
 8006d8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0302 	and.w	r3, r3, #2
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d038      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006d9c:	2b05      	cmp	r3, #5
 8006d9e:	d821      	bhi.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006da0:	a201      	add	r2, pc, #4	; (adr r2, 8006da8 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006da6:	bf00      	nop
 8006da8:	08006deb 	.word	0x08006deb
 8006dac:	08006dc1 	.word	0x08006dc1
 8006db0:	08006dd3 	.word	0x08006dd3
 8006db4:	08006deb 	.word	0x08006deb
 8006db8:	08006deb 	.word	0x08006deb
 8006dbc:	08006deb 	.word	0x08006deb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	3304      	adds	r3, #4
 8006dc4:	2101      	movs	r1, #1
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	f000 fdb4 	bl	8007934 <RCCEx_PLL2_Config>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006dd0:	e00c      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	3324      	adds	r3, #36	; 0x24
 8006dd6:	2101      	movs	r1, #1
 8006dd8:	4618      	mov	r0, r3
 8006dda:	f000 fe5d 	bl	8007a98 <RCCEx_PLL3_Config>
 8006dde:	4603      	mov	r3, r0
 8006de0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8006de2:	e003      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006de4:	2301      	movs	r3, #1
 8006de6:	75fb      	strb	r3, [r7, #23]
      break;
 8006de8:	e000      	b.n	8006dec <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8006dea:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006dec:	7dfb      	ldrb	r3, [r7, #23]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d109      	bne.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8006df2:	4b77      	ldr	r3, [pc, #476]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006df4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df6:	f023 0207 	bic.w	r2, r3, #7
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006dfe:	4974      	ldr	r1, [pc, #464]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	654b      	str	r3, [r1, #84]	; 0x54
 8006e04:	e001      	b.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e06:	7dfb      	ldrb	r3, [r7, #23]
 8006e08:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f003 0304 	and.w	r3, r3, #4
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d03a      	beq.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e1c:	2b05      	cmp	r3, #5
 8006e1e:	d821      	bhi.n	8006e64 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8006e20:	a201      	add	r2, pc, #4	; (adr r2, 8006e28 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8006e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e26:	bf00      	nop
 8006e28:	08006e6b 	.word	0x08006e6b
 8006e2c:	08006e41 	.word	0x08006e41
 8006e30:	08006e53 	.word	0x08006e53
 8006e34:	08006e6b 	.word	0x08006e6b
 8006e38:	08006e6b 	.word	0x08006e6b
 8006e3c:	08006e6b 	.word	0x08006e6b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	3304      	adds	r3, #4
 8006e44:	2101      	movs	r1, #1
 8006e46:	4618      	mov	r0, r3
 8006e48:	f000 fd74 	bl	8007934 <RCCEx_PLL2_Config>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e50:	e00c      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	3324      	adds	r3, #36	; 0x24
 8006e56:	2101      	movs	r1, #1
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f000 fe1d 	bl	8007a98 <RCCEx_PLL3_Config>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006e62:	e003      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006e64:	2301      	movs	r3, #1
 8006e66:	75fb      	strb	r3, [r7, #23]
      break;
 8006e68:	e000      	b.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8006e6a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006e6c:	7dfb      	ldrb	r3, [r7, #23]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d10a      	bne.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006e72:	4b57      	ldr	r3, [pc, #348]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	f023 0207 	bic.w	r2, r3, #7
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e80:	4953      	ldr	r1, [pc, #332]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	658b      	str	r3, [r1, #88]	; 0x58
 8006e86:	e001      	b.n	8006e8c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006e88:	7dfb      	ldrb	r3, [r7, #23]
 8006e8a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0320 	and.w	r3, r3, #32
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d04b      	beq.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e9e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ea2:	d02e      	beq.n	8006f02 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006ea4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006ea8:	d828      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eae:	d02a      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006eb4:	d822      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006eb6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006eba:	d026      	beq.n	8006f0a <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8006ebc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006ec0:	d81c      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006ec2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ec6:	d010      	beq.n	8006eea <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006ec8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006ecc:	d816      	bhi.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d01d      	beq.n	8006f0e <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8006ed2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed6:	d111      	bne.n	8006efc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3304      	adds	r3, #4
 8006edc:	2100      	movs	r1, #0
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 fd28 	bl	8007934 <RCCEx_PLL2_Config>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006ee8:	e012      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	3324      	adds	r3, #36	; 0x24
 8006eee:	2102      	movs	r1, #2
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f000 fdd1 	bl	8007a98 <RCCEx_PLL3_Config>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8006efa:	e009      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006efc:	2301      	movs	r3, #1
 8006efe:	75fb      	strb	r3, [r7, #23]
      break;
 8006f00:	e006      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f02:	bf00      	nop
 8006f04:	e004      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f06:	bf00      	nop
 8006f08:	e002      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f0a:	bf00      	nop
 8006f0c:	e000      	b.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8006f0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006f10:	7dfb      	ldrb	r3, [r7, #23]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d10a      	bne.n	8006f2c <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f16:	4b2e      	ldr	r3, [pc, #184]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f1a:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f24:	492a      	ldr	r1, [pc, #168]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006f26:	4313      	orrs	r3, r2
 8006f28:	654b      	str	r3, [r1, #84]	; 0x54
 8006f2a:	e001      	b.n	8006f30 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f2c:	7dfb      	ldrb	r3, [r7, #23]
 8006f2e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d04d      	beq.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006f42:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f46:	d02e      	beq.n	8006fa6 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006f48:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006f4c:	d828      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f52:	d02a      	beq.n	8006faa <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006f54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f58:	d822      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f5a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f5e:	d026      	beq.n	8006fae <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006f60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006f64:	d81c      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f6a:	d010      	beq.n	8006f8e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8006f6c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f70:	d816      	bhi.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d01d      	beq.n	8006fb2 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006f76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f7a:	d111      	bne.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	3304      	adds	r3, #4
 8006f80:	2100      	movs	r1, #0
 8006f82:	4618      	mov	r0, r3
 8006f84:	f000 fcd6 	bl	8007934 <RCCEx_PLL2_Config>
 8006f88:	4603      	mov	r3, r0
 8006f8a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f8c:	e012      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	3324      	adds	r3, #36	; 0x24
 8006f92:	2102      	movs	r1, #2
 8006f94:	4618      	mov	r0, r3
 8006f96:	f000 fd7f 	bl	8007a98 <RCCEx_PLL3_Config>
 8006f9a:	4603      	mov	r3, r0
 8006f9c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8006f9e:	e009      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	75fb      	strb	r3, [r7, #23]
      break;
 8006fa4:	e006      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fa6:	bf00      	nop
 8006fa8:	e004      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006faa:	bf00      	nop
 8006fac:	e002      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fae:	bf00      	nop
 8006fb0:	e000      	b.n	8006fb4 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006fb2:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d10c      	bne.n	8006fd4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fbe:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006fc8:	4901      	ldr	r1, [pc, #4]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	658b      	str	r3, [r1, #88]	; 0x58
 8006fce:	e003      	b.n	8006fd8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 8006fd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006fd4:	7dfb      	ldrb	r3, [r7, #23]
 8006fd6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d04b      	beq.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006fea:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006fee:	d02e      	beq.n	800704e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8006ff0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8006ff4:	d828      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8006ff6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ffa:	d02a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 8006ffc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007000:	d822      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8007002:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8007006:	d026      	beq.n	8007056 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 8007008:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800700c:	d81c      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800700e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007012:	d010      	beq.n	8007036 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8007014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007018:	d816      	bhi.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800701a:	2b00      	cmp	r3, #0
 800701c:	d01d      	beq.n	800705a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800701e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007022:	d111      	bne.n	8007048 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	3304      	adds	r3, #4
 8007028:	2100      	movs	r1, #0
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fc82 	bl	8007934 <RCCEx_PLL2_Config>
 8007030:	4603      	mov	r3, r0
 8007032:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007034:	e012      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	3324      	adds	r3, #36	; 0x24
 800703a:	2102      	movs	r1, #2
 800703c:	4618      	mov	r0, r3
 800703e:	f000 fd2b 	bl	8007a98 <RCCEx_PLL3_Config>
 8007042:	4603      	mov	r3, r0
 8007044:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8007046:	e009      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007048:	2301      	movs	r3, #1
 800704a:	75fb      	strb	r3, [r7, #23]
      break;
 800704c:	e006      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800704e:	bf00      	nop
 8007050:	e004      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007052:	bf00      	nop
 8007054:	e002      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8007056:	bf00      	nop
 8007058:	e000      	b.n	800705c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800705a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800705c:	7dfb      	ldrb	r3, [r7, #23]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d10a      	bne.n	8007078 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8007062:	4b9d      	ldr	r3, [pc, #628]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007066:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8007070:	4999      	ldr	r1, [pc, #612]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007072:	4313      	orrs	r3, r2
 8007074:	658b      	str	r3, [r1, #88]	; 0x58
 8007076:	e001      	b.n	800707c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007078:	7dfb      	ldrb	r3, [r7, #23]
 800707a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f003 0308 	and.w	r3, r3, #8
 8007084:	2b00      	cmp	r3, #0
 8007086:	d01a      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800708e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007092:	d10a      	bne.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	3324      	adds	r3, #36	; 0x24
 8007098:	2102      	movs	r1, #2
 800709a:	4618      	mov	r0, r3
 800709c:	f000 fcfc 	bl	8007a98 <RCCEx_PLL3_Config>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d001      	beq.n	80070aa <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80070aa:	4b8b      	ldr	r3, [pc, #556]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b8:	4987      	ldr	r1, [pc, #540]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070ba:	4313      	orrs	r3, r2
 80070bc:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 0310 	and.w	r3, r3, #16
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01a      	beq.n	8007100 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070d4:	d10a      	bne.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	3324      	adds	r3, #36	; 0x24
 80070da:	2102      	movs	r1, #2
 80070dc:	4618      	mov	r0, r3
 80070de:	f000 fcdb 	bl	8007a98 <RCCEx_PLL3_Config>
 80070e2:	4603      	mov	r3, r0
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d001      	beq.n	80070ec <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80070e8:	2301      	movs	r3, #1
 80070ea:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80070ec:	4b7a      	ldr	r3, [pc, #488]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070fa:	4977      	ldr	r1, [pc, #476]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80070fc:	4313      	orrs	r3, r2
 80070fe:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007108:	2b00      	cmp	r3, #0
 800710a:	d034      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007112:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007116:	d01d      	beq.n	8007154 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8007118:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800711c:	d817      	bhi.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800711e:	2b00      	cmp	r3, #0
 8007120:	d003      	beq.n	800712a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 8007122:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007126:	d009      	beq.n	800713c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8007128:	e011      	b.n	800714e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	3304      	adds	r3, #4
 800712e:	2100      	movs	r1, #0
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fbff 	bl	8007934 <RCCEx_PLL2_Config>
 8007136:	4603      	mov	r3, r0
 8007138:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800713a:	e00c      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	3324      	adds	r3, #36	; 0x24
 8007140:	2102      	movs	r1, #2
 8007142:	4618      	mov	r0, r3
 8007144:	f000 fca8 	bl	8007a98 <RCCEx_PLL3_Config>
 8007148:	4603      	mov	r3, r0
 800714a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800714c:	e003      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800714e:	2301      	movs	r3, #1
 8007150:	75fb      	strb	r3, [r7, #23]
      break;
 8007152:	e000      	b.n	8007156 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8007154:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007156:	7dfb      	ldrb	r3, [r7, #23]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800715c:	4b5e      	ldr	r3, [pc, #376]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800715e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007160:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800716a:	495b      	ldr	r1, [pc, #364]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800716c:	4313      	orrs	r3, r2
 800716e:	658b      	str	r3, [r1, #88]	; 0x58
 8007170:	e001      	b.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007172:	7dfb      	ldrb	r3, [r7, #23]
 8007174:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800717e:	2b00      	cmp	r3, #0
 8007180:	d033      	beq.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007188:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800718c:	d01c      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800718e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007192:	d816      	bhi.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8007194:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007198:	d003      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800719a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800719e:	d007      	beq.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 80071a0:	e00f      	b.n	80071c2 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80071a2:	4b4d      	ldr	r3, [pc, #308]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071a6:	4a4c      	ldr	r2, [pc, #304]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80071ac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 80071ae:	e00c      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	3324      	adds	r3, #36	; 0x24
 80071b4:	2101      	movs	r1, #1
 80071b6:	4618      	mov	r0, r3
 80071b8:	f000 fc6e 	bl	8007a98 <RCCEx_PLL3_Config>
 80071bc:	4603      	mov	r3, r0
 80071be:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80071c0:	e003      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80071c2:	2301      	movs	r3, #1
 80071c4:	75fb      	strb	r3, [r7, #23]
      break;
 80071c6:	e000      	b.n	80071ca <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80071c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80071ca:	7dfb      	ldrb	r3, [r7, #23]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80071d0:	4b41      	ldr	r3, [pc, #260]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80071d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071de:	493e      	ldr	r1, [pc, #248]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80071e0:	4313      	orrs	r3, r2
 80071e2:	654b      	str	r3, [r1, #84]	; 0x54
 80071e4:	e001      	b.n	80071ea <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e6:	7dfb      	ldrb	r3, [r7, #23]
 80071e8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d029      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d003      	beq.n	8007206 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80071fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007202:	d007      	beq.n	8007214 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 8007204:	e00f      	b.n	8007226 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007206:	4b34      	ldr	r3, [pc, #208]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800720a:	4a33      	ldr	r2, [pc, #204]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800720c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007210:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007212:	e00b      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	3304      	adds	r3, #4
 8007218:	2102      	movs	r1, #2
 800721a:	4618      	mov	r0, r3
 800721c:	f000 fb8a 	bl	8007934 <RCCEx_PLL2_Config>
 8007220:	4603      	mov	r3, r0
 8007222:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8007224:	e002      	b.n	800722c <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8007226:	2301      	movs	r3, #1
 8007228:	75fb      	strb	r3, [r7, #23]
      break;
 800722a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800722c:	7dfb      	ldrb	r3, [r7, #23]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d109      	bne.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8007232:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800723e:	4926      	ldr	r1, [pc, #152]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8007240:	4313      	orrs	r3, r2
 8007242:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007244:	e001      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007246:	7dfb      	ldrb	r3, [r7, #23]
 8007248:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007252:	2b00      	cmp	r3, #0
 8007254:	d00a      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	3324      	adds	r3, #36	; 0x24
 800725a:	2102      	movs	r1, #2
 800725c:	4618      	mov	r0, r3
 800725e:	f000 fc1b 	bl	8007a98 <RCCEx_PLL3_Config>
 8007262:	4603      	mov	r3, r0
 8007264:	2b00      	cmp	r3, #0
 8007266:	d001      	beq.n	800726c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007274:	2b00      	cmp	r3, #0
 8007276:	d033      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800727c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007280:	d017      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8007282:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007286:	d811      	bhi.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007288:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800728c:	d013      	beq.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800728e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007292:	d80b      	bhi.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8007294:	2b00      	cmp	r3, #0
 8007296:	d010      	beq.n	80072ba <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8007298:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800729c:	d106      	bne.n	80072ac <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800729e:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072a2:	4a0d      	ldr	r2, [pc, #52]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80072a8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 80072aa:	e007      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80072ac:	2301      	movs	r3, #1
 80072ae:	75fb      	strb	r3, [r7, #23]
      break;
 80072b0:	e004      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80072b2:	bf00      	nop
 80072b4:	e002      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80072b6:	bf00      	nop
 80072b8:	e000      	b.n	80072bc <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80072ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80072bc:	7dfb      	ldrb	r3, [r7, #23]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d10c      	bne.n	80072dc <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80072ce:	4902      	ldr	r1, [pc, #8]	; (80072d8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80072d0:	4313      	orrs	r3, r2
 80072d2:	654b      	str	r3, [r1, #84]	; 0x54
 80072d4:	e004      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80072d6:	bf00      	nop
 80072d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80072dc:	7dfb      	ldrb	r3, [r7, #23]
 80072de:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d008      	beq.n	80072fe <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80072ec:	4b31      	ldr	r3, [pc, #196]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80072ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072f0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f8:	492e      	ldr	r1, [pc, #184]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80072fa:	4313      	orrs	r3, r2
 80072fc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007306:	2b00      	cmp	r3, #0
 8007308:	d009      	beq.n	800731e <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800730a:	4b2a      	ldr	r3, [pc, #168]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800730c:	691b      	ldr	r3, [r3, #16]
 800730e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007318:	4926      	ldr	r1, [pc, #152]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800731a:	4313      	orrs	r3, r2
 800731c:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007326:	2b00      	cmp	r3, #0
 8007328:	d008      	beq.n	800733c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800732a:	4b22      	ldr	r3, [pc, #136]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800732c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800732e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007336:	491f      	ldr	r1, [pc, #124]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007338:	4313      	orrs	r3, r2
 800733a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007344:	2b00      	cmp	r3, #0
 8007346:	d00d      	beq.n	8007364 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007348:	4b1a      	ldr	r3, [pc, #104]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800734e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007352:	6113      	str	r3, [r2, #16]
 8007354:	4b17      	ldr	r3, [pc, #92]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007356:	691a      	ldr	r2, [r3, #16]
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800735e:	4915      	ldr	r1, [pc, #84]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8007360:	4313      	orrs	r3, r2
 8007362:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	2b00      	cmp	r3, #0
 800736a:	da08      	bge.n	800737e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800736c:	4b11      	ldr	r3, [pc, #68]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800736e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007370:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	490e      	ldr	r1, [pc, #56]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800737a:	4313      	orrs	r3, r2
 800737c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007386:	2b00      	cmp	r3, #0
 8007388:	d009      	beq.n	800739e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800738a:	4b0a      	ldr	r3, [pc, #40]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800738c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007398:	4906      	ldr	r1, [pc, #24]	; (80073b4 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800739a:	4313      	orrs	r3, r2
 800739c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800739e:	7dbb      	ldrb	r3, [r7, #22]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d101      	bne.n	80073a8 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 80073a4:	2300      	movs	r3, #0
 80073a6:	e000      	b.n	80073aa <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 80073a8:	2301      	movs	r3, #1
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3718      	adds	r7, #24
 80073ae:	46bd      	mov	sp, r7
 80073b0:	bd80      	pop	{r7, pc}
 80073b2:	bf00      	nop
 80073b4:	58024400 	.word	0x58024400

080073b8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80073bc:	f7ff f85a 	bl	8006474 <HAL_RCC_GetHCLKFreq>
 80073c0:	4602      	mov	r2, r0
 80073c2:	4b06      	ldr	r3, [pc, #24]	; (80073dc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80073c4:	6a1b      	ldr	r3, [r3, #32]
 80073c6:	091b      	lsrs	r3, r3, #4
 80073c8:	f003 0307 	and.w	r3, r3, #7
 80073cc:	4904      	ldr	r1, [pc, #16]	; (80073e0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80073ce:	5ccb      	ldrb	r3, [r1, r3]
 80073d0:	f003 031f 	and.w	r3, r3, #31
 80073d4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80073d8:	4618      	mov	r0, r3
 80073da:	bd80      	pop	{r7, pc}
 80073dc:	58024400 	.word	0x58024400
 80073e0:	0800a42c 	.word	0x0800a42c

080073e4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80073e4:	b480      	push	{r7}
 80073e6:	b089      	sub	sp, #36	; 0x24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80073ec:	4ba1      	ldr	r3, [pc, #644]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f0:	f003 0303 	and.w	r3, r3, #3
 80073f4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80073f6:	4b9f      	ldr	r3, [pc, #636]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80073f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073fa:	0b1b      	lsrs	r3, r3, #12
 80073fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007400:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8007402:	4b9c      	ldr	r3, [pc, #624]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007406:	091b      	lsrs	r3, r3, #4
 8007408:	f003 0301 	and.w	r3, r3, #1
 800740c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800740e:	4b99      	ldr	r3, [pc, #612]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007410:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007412:	08db      	lsrs	r3, r3, #3
 8007414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007418:	693a      	ldr	r2, [r7, #16]
 800741a:	fb02 f303 	mul.w	r3, r2, r3
 800741e:	ee07 3a90 	vmov	s15, r3
 8007422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007426:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	2b00      	cmp	r3, #0
 800742e:	f000 8111 	beq.w	8007654 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b02      	cmp	r3, #2
 8007436:	f000 8083 	beq.w	8007540 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800743a:	69bb      	ldr	r3, [r7, #24]
 800743c:	2b02      	cmp	r3, #2
 800743e:	f200 80a1 	bhi.w	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8007442:	69bb      	ldr	r3, [r7, #24]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d003      	beq.n	8007450 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	2b01      	cmp	r3, #1
 800744c:	d056      	beq.n	80074fc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800744e:	e099      	b.n	8007584 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007450:	4b88      	ldr	r3, [pc, #544]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0320 	and.w	r3, r3, #32
 8007458:	2b00      	cmp	r3, #0
 800745a:	d02d      	beq.n	80074b8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800745c:	4b85      	ldr	r3, [pc, #532]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	08db      	lsrs	r3, r3, #3
 8007462:	f003 0303 	and.w	r3, r3, #3
 8007466:	4a84      	ldr	r2, [pc, #528]	; (8007678 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8007468:	fa22 f303 	lsr.w	r3, r2, r3
 800746c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	ee07 3a90 	vmov	s15, r3
 8007474:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	ee07 3a90 	vmov	s15, r3
 800747e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007486:	4b7b      	ldr	r3, [pc, #492]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800748a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748e:	ee07 3a90 	vmov	s15, r3
 8007492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007496:	ed97 6a03 	vldr	s12, [r7, #12]
 800749a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800749e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074b2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80074b6:	e087      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074b8:	697b      	ldr	r3, [r7, #20]
 80074ba:	ee07 3a90 	vmov	s15, r3
 80074be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074c2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007680 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80074c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074ca:	4b6a      	ldr	r3, [pc, #424]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80074cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074d2:	ee07 3a90 	vmov	s15, r3
 80074d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074da:	ed97 6a03 	vldr	s12, [r7, #12]
 80074de:	eddf 5a67 	vldr	s11, [pc, #412]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80074e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80074fa:	e065      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	ee07 3a90 	vmov	s15, r3
 8007502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007506:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800750a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800750e:	4b59      	ldr	r3, [pc, #356]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007516:	ee07 3a90 	vmov	s15, r3
 800751a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800751e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007522:	eddf 5a56 	vldr	s11, [pc, #344]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8007526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800752a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800752e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007536:	ee67 7a27 	vmul.f32	s15, s14, s15
 800753a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800753e:	e043      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007540:	697b      	ldr	r3, [r7, #20]
 8007542:	ee07 3a90 	vmov	s15, r3
 8007546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800754a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007688 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800754e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007552:	4b48      	ldr	r3, [pc, #288]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800755a:	ee07 3a90 	vmov	s15, r3
 800755e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007562:	ed97 6a03 	vldr	s12, [r7, #12]
 8007566:	eddf 5a45 	vldr	s11, [pc, #276]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800756a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800756e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007572:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800757a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800757e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8007582:	e021      	b.n	80075c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	ee07 3a90 	vmov	s15, r3
 800758a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800758e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8007684 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8007592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800759e:	ee07 3a90 	vmov	s15, r3
 80075a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80075a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80075aa:	eddf 5a34 	vldr	s11, [pc, #208]	; 800767c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80075ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80075b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80075b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80075ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80075be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075c2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80075c6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80075c8:	4b2a      	ldr	r3, [pc, #168]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075cc:	0a5b      	lsrs	r3, r3, #9
 80075ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075d2:	ee07 3a90 	vmov	s15, r3
 80075d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80075da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80075de:	ee37 7a87 	vadd.f32	s14, s15, s14
 80075e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80075e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80075ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80075ee:	ee17 2a90 	vmov	r2, s15
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80075f6:	4b1f      	ldr	r3, [pc, #124]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80075f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fa:	0c1b      	lsrs	r3, r3, #16
 80075fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007600:	ee07 3a90 	vmov	s15, r3
 8007604:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007608:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800760c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007610:	edd7 6a07 	vldr	s13, [r7, #28]
 8007614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007618:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800761c:	ee17 2a90 	vmov	r2, s15
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8007624:	4b13      	ldr	r3, [pc, #76]	; (8007674 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8007626:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007628:	0e1b      	lsrs	r3, r3, #24
 800762a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800762e:	ee07 3a90 	vmov	s15, r3
 8007632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007636:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800763a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800763e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007642:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007646:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800764a:	ee17 2a90 	vmov	r2, s15
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007652:	e008      	b.n	8007666 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2200      	movs	r2, #0
 8007658:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	2200      	movs	r2, #0
 800765e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2200      	movs	r2, #0
 8007664:	609a      	str	r2, [r3, #8]
}
 8007666:	bf00      	nop
 8007668:	3724      	adds	r7, #36	; 0x24
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr
 8007672:	bf00      	nop
 8007674:	58024400 	.word	0x58024400
 8007678:	03d09000 	.word	0x03d09000
 800767c:	46000000 	.word	0x46000000
 8007680:	4c742400 	.word	0x4c742400
 8007684:	4a742400 	.word	0x4a742400
 8007688:	4af42400 	.word	0x4af42400

0800768c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	; 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8007694:	4ba1      	ldr	r3, [pc, #644]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007698:	f003 0303 	and.w	r3, r3, #3
 800769c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800769e:	4b9f      	ldr	r3, [pc, #636]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076a2:	0d1b      	lsrs	r3, r3, #20
 80076a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076a8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80076aa:	4b9c      	ldr	r3, [pc, #624]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ae:	0a1b      	lsrs	r3, r3, #8
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80076b6:	4b99      	ldr	r3, [pc, #612]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076ba:	08db      	lsrs	r3, r3, #3
 80076bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	fb02 f303 	mul.w	r3, r2, r3
 80076c6:	ee07 3a90 	vmov	s15, r3
 80076ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80076ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80076d2:	697b      	ldr	r3, [r7, #20]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	f000 8111 	beq.w	80078fc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b02      	cmp	r3, #2
 80076de:	f000 8083 	beq.w	80077e8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80076e2:	69bb      	ldr	r3, [r7, #24]
 80076e4:	2b02      	cmp	r3, #2
 80076e6:	f200 80a1 	bhi.w	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d003      	beq.n	80076f8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	2b01      	cmp	r3, #1
 80076f4:	d056      	beq.n	80077a4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80076f6:	e099      	b.n	800782c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80076f8:	4b88      	ldr	r3, [pc, #544]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	f003 0320 	and.w	r3, r3, #32
 8007700:	2b00      	cmp	r3, #0
 8007702:	d02d      	beq.n	8007760 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8007704:	4b85      	ldr	r3, [pc, #532]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	08db      	lsrs	r3, r3, #3
 800770a:	f003 0303 	and.w	r3, r3, #3
 800770e:	4a84      	ldr	r2, [pc, #528]	; (8007920 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8007710:	fa22 f303 	lsr.w	r3, r2, r3
 8007714:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007716:	68bb      	ldr	r3, [r7, #8]
 8007718:	ee07 3a90 	vmov	s15, r3
 800771c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	ee07 3a90 	vmov	s15, r3
 8007726:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800772a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800772e:	4b7b      	ldr	r3, [pc, #492]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007732:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007736:	ee07 3a90 	vmov	s15, r3
 800773a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800773e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007742:	eddf 5a78 	vldr	s11, [pc, #480]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007746:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800774a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800774e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007756:	ee67 7a27 	vmul.f32	s15, s14, s15
 800775a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800775e:	e087      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8007760:	697b      	ldr	r3, [r7, #20]
 8007762:	ee07 3a90 	vmov	s15, r3
 8007766:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800776a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8007928 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800776e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007772:	4b6a      	ldr	r3, [pc, #424]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800777a:	ee07 3a90 	vmov	s15, r3
 800777e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007782:	ed97 6a03 	vldr	s12, [r7, #12]
 8007786:	eddf 5a67 	vldr	s11, [pc, #412]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800778a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800778e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007792:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800779a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800779e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077a2:	e065      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077a4:	697b      	ldr	r3, [r7, #20]
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80077b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077b6:	4b59      	ldr	r3, [pc, #356]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077be:	ee07 3a90 	vmov	s15, r3
 80077c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80077c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80077ca:	eddf 5a56 	vldr	s11, [pc, #344]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80077ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80077d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80077d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80077da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80077de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80077e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80077e6:	e043      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	ee07 3a90 	vmov	s15, r3
 80077ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077f2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8007930 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80077f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077fa:	4b48      	ldr	r3, [pc, #288]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80077fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007802:	ee07 3a90 	vmov	s15, r3
 8007806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800780a:	ed97 6a03 	vldr	s12, [r7, #12]
 800780e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800781a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800781e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007822:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007826:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800782a:	e021      	b.n	8007870 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	ee07 3a90 	vmov	s15, r3
 8007832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007836:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800792c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800783a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800783e:	4b37      	ldr	r3, [pc, #220]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007846:	ee07 3a90 	vmov	s15, r3
 800784a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784e:	ed97 6a03 	vldr	s12, [r7, #12]
 8007852:	eddf 5a34 	vldr	s11, [pc, #208]	; 8007924 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8007856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800785a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800785e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007866:	ee67 7a27 	vmul.f32	s15, s14, s15
 800786a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800786e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8007870:	4b2a      	ldr	r3, [pc, #168]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8007872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007874:	0a5b      	lsrs	r3, r3, #9
 8007876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800787a:	ee07 3a90 	vmov	s15, r3
 800787e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007886:	ee37 7a87 	vadd.f32	s14, s15, s14
 800788a:	edd7 6a07 	vldr	s13, [r7, #28]
 800788e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007896:	ee17 2a90 	vmov	r2, s15
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800789e:	4b1f      	ldr	r3, [pc, #124]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078a2:	0c1b      	lsrs	r3, r3, #16
 80078a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078a8:	ee07 3a90 	vmov	s15, r3
 80078ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078b0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078b4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078b8:	edd7 6a07 	vldr	s13, [r7, #28]
 80078bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078c4:	ee17 2a90 	vmov	r2, s15
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80078cc:	4b13      	ldr	r3, [pc, #76]	; (800791c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80078ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078d0:	0e1b      	lsrs	r3, r3, #24
 80078d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078de:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80078e2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80078e6:	edd7 6a07 	vldr	s13, [r7, #28]
 80078ea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80078ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80078f2:	ee17 2a90 	vmov	r2, s15
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80078fa:	e008      	b.n	800790e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	609a      	str	r2, [r3, #8]
}
 800790e:	bf00      	nop
 8007910:	3724      	adds	r7, #36	; 0x24
 8007912:	46bd      	mov	sp, r7
 8007914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007918:	4770      	bx	lr
 800791a:	bf00      	nop
 800791c:	58024400 	.word	0x58024400
 8007920:	03d09000 	.word	0x03d09000
 8007924:	46000000 	.word	0x46000000
 8007928:	4c742400 	.word	0x4c742400
 800792c:	4a742400 	.word	0x4a742400
 8007930:	4af42400 	.word	0x4af42400

08007934 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800793e:	2300      	movs	r3, #0
 8007940:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007942:	4b53      	ldr	r3, [pc, #332]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007946:	f003 0303 	and.w	r3, r3, #3
 800794a:	2b03      	cmp	r3, #3
 800794c:	d101      	bne.n	8007952 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800794e:	2301      	movs	r3, #1
 8007950:	e099      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8007952:	4b4f      	ldr	r3, [pc, #316]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a4e      	ldr	r2, [pc, #312]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007958:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800795c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800795e:	f7fa faa5 	bl	8001eac <HAL_GetTick>
 8007962:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007964:	e008      	b.n	8007978 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007966:	f7fa faa1 	bl	8001eac <HAL_GetTick>
 800796a:	4602      	mov	r2, r0
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	2b02      	cmp	r3, #2
 8007972:	d901      	bls.n	8007978 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007974:	2303      	movs	r3, #3
 8007976:	e086      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8007978:	4b45      	ldr	r3, [pc, #276]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007980:	2b00      	cmp	r3, #0
 8007982:	d1f0      	bne.n	8007966 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8007984:	4b42      	ldr	r3, [pc, #264]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007988:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	031b      	lsls	r3, r3, #12
 8007992:	493f      	ldr	r1, [pc, #252]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007994:	4313      	orrs	r3, r2
 8007996:	628b      	str	r3, [r1, #40]	; 0x28
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	025b      	lsls	r3, r3, #9
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	431a      	orrs	r2, r3
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	3b01      	subs	r3, #1
 80079b4:	041b      	lsls	r3, r3, #16
 80079b6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80079ba:	431a      	orrs	r2, r3
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	691b      	ldr	r3, [r3, #16]
 80079c0:	3b01      	subs	r3, #1
 80079c2:	061b      	lsls	r3, r3, #24
 80079c4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80079c8:	4931      	ldr	r1, [pc, #196]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079ca:	4313      	orrs	r3, r2
 80079cc:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80079ce:	4b30      	ldr	r3, [pc, #192]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	695b      	ldr	r3, [r3, #20]
 80079da:	492d      	ldr	r1, [pc, #180]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079dc:	4313      	orrs	r3, r2
 80079de:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80079e0:	4b2b      	ldr	r3, [pc, #172]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079e4:	f023 0220 	bic.w	r2, r3, #32
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	699b      	ldr	r3, [r3, #24]
 80079ec:	4928      	ldr	r1, [pc, #160]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079ee:	4313      	orrs	r3, r2
 80079f0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80079f2:	4b27      	ldr	r3, [pc, #156]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079f6:	4a26      	ldr	r2, [pc, #152]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 80079f8:	f023 0310 	bic.w	r3, r3, #16
 80079fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80079fe:	4b24      	ldr	r3, [pc, #144]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a00:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007a02:	4b24      	ldr	r3, [pc, #144]	; (8007a94 <RCCEx_PLL2_Config+0x160>)
 8007a04:	4013      	ands	r3, r2
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	69d2      	ldr	r2, [r2, #28]
 8007a0a:	00d2      	lsls	r2, r2, #3
 8007a0c:	4920      	ldr	r1, [pc, #128]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8007a12:	4b1f      	ldr	r3, [pc, #124]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a16:	4a1e      	ldr	r2, [pc, #120]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a18:	f043 0310 	orr.w	r3, r3, #16
 8007a1c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d106      	bne.n	8007a32 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8007a24:	4b1a      	ldr	r3, [pc, #104]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a28:	4a19      	ldr	r2, [pc, #100]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007a2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a30:	e00f      	b.n	8007a52 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	2b01      	cmp	r3, #1
 8007a36:	d106      	bne.n	8007a46 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007a38:	4b15      	ldr	r3, [pc, #84]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a3c:	4a14      	ldr	r2, [pc, #80]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a3e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007a42:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007a44:	e005      	b.n	8007a52 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007a46:	4b12      	ldr	r3, [pc, #72]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a4a:	4a11      	ldr	r2, [pc, #68]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007a50:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007a52:	4b0f      	ldr	r3, [pc, #60]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a0e      	ldr	r2, [pc, #56]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007a5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007a5e:	f7fa fa25 	bl	8001eac <HAL_GetTick>
 8007a62:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a64:	e008      	b.n	8007a78 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007a66:	f7fa fa21 	bl	8001eac <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	2b02      	cmp	r3, #2
 8007a72:	d901      	bls.n	8007a78 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007a74:	2303      	movs	r3, #3
 8007a76:	e006      	b.n	8007a86 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007a78:	4b05      	ldr	r3, [pc, #20]	; (8007a90 <RCCEx_PLL2_Config+0x15c>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d0f0      	beq.n	8007a66 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007a84:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}
 8007a8e:	bf00      	nop
 8007a90:	58024400 	.word	0x58024400
 8007a94:	ffff0007 	.word	0xffff0007

08007a98 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007aa6:	4b53      	ldr	r3, [pc, #332]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aaa:	f003 0303 	and.w	r3, r3, #3
 8007aae:	2b03      	cmp	r3, #3
 8007ab0:	d101      	bne.n	8007ab6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e099      	b.n	8007bea <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007ab6:	4b4f      	ldr	r3, [pc, #316]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a4e      	ldr	r2, [pc, #312]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007abc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ac0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007ac2:	f7fa f9f3 	bl	8001eac <HAL_GetTick>
 8007ac6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007ac8:	e008      	b.n	8007adc <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007aca:	f7fa f9ef 	bl	8001eac <HAL_GetTick>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	1ad3      	subs	r3, r2, r3
 8007ad4:	2b02      	cmp	r3, #2
 8007ad6:	d901      	bls.n	8007adc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	e086      	b.n	8007bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007adc:	4b45      	ldr	r3, [pc, #276]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d1f0      	bne.n	8007aca <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8007ae8:	4b42      	ldr	r3, [pc, #264]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007aec:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	051b      	lsls	r3, r3, #20
 8007af6:	493f      	ldr	r1, [pc, #252]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007af8:	4313      	orrs	r3, r2
 8007afa:	628b      	str	r3, [r1, #40]	; 0x28
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	3b01      	subs	r3, #1
 8007b02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	689b      	ldr	r3, [r3, #8]
 8007b0a:	3b01      	subs	r3, #1
 8007b0c:	025b      	lsls	r3, r3, #9
 8007b0e:	b29b      	uxth	r3, r3
 8007b10:	431a      	orrs	r2, r3
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	68db      	ldr	r3, [r3, #12]
 8007b16:	3b01      	subs	r3, #1
 8007b18:	041b      	lsls	r3, r3, #16
 8007b1a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8007b1e:	431a      	orrs	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	691b      	ldr	r3, [r3, #16]
 8007b24:	3b01      	subs	r3, #1
 8007b26:	061b      	lsls	r3, r3, #24
 8007b28:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8007b2c:	4931      	ldr	r1, [pc, #196]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007b32:	4b30      	ldr	r3, [pc, #192]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b36:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	695b      	ldr	r3, [r3, #20]
 8007b3e:	492d      	ldr	r1, [pc, #180]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007b44:	4b2b      	ldr	r3, [pc, #172]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	4928      	ldr	r1, [pc, #160]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b52:	4313      	orrs	r3, r2
 8007b54:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007b56:	4b27      	ldr	r3, [pc, #156]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b5a:	4a26      	ldr	r2, [pc, #152]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007b62:	4b24      	ldr	r3, [pc, #144]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b66:	4b24      	ldr	r3, [pc, #144]	; (8007bf8 <RCCEx_PLL3_Config+0x160>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	69d2      	ldr	r2, [r2, #28]
 8007b6e:	00d2      	lsls	r2, r2, #3
 8007b70:	4920      	ldr	r1, [pc, #128]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b72:	4313      	orrs	r3, r2
 8007b74:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007b76:	4b1f      	ldr	r3, [pc, #124]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b7a:	4a1e      	ldr	r2, [pc, #120]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b80:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d106      	bne.n	8007b96 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007b88:	4b1a      	ldr	r3, [pc, #104]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4a19      	ldr	r2, [pc, #100]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b8e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007b92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007b94:	e00f      	b.n	8007bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d106      	bne.n	8007baa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8007b9c:	4b15      	ldr	r3, [pc, #84]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ba0:	4a14      	ldr	r2, [pc, #80]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007ba2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007ba6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007ba8:	e005      	b.n	8007bb6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8007baa:	4b12      	ldr	r3, [pc, #72]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bae:	4a11      	ldr	r2, [pc, #68]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007bb4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007bb6:	4b0f      	ldr	r3, [pc, #60]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a0e      	ldr	r2, [pc, #56]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bc0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007bc2:	f7fa f973 	bl	8001eac <HAL_GetTick>
 8007bc6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bc8:	e008      	b.n	8007bdc <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8007bca:	f7fa f96f 	bl	8001eac <HAL_GetTick>
 8007bce:	4602      	mov	r2, r0
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	1ad3      	subs	r3, r2, r3
 8007bd4:	2b02      	cmp	r3, #2
 8007bd6:	d901      	bls.n	8007bdc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007bd8:	2303      	movs	r3, #3
 8007bda:	e006      	b.n	8007bea <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007bdc:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <RCCEx_PLL3_Config+0x15c>)
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d0f0      	beq.n	8007bca <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8007be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bea:	4618      	mov	r0, r3
 8007bec:	3710      	adds	r7, #16
 8007bee:	46bd      	mov	sp, r7
 8007bf0:	bd80      	pop	{r7, pc}
 8007bf2:	bf00      	nop
 8007bf4:	58024400 	.word	0x58024400
 8007bf8:	ffff0007 	.word	0xffff0007

08007bfc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b084      	sub	sp, #16
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d101      	bne.n	8007c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007c0a:	2301      	movs	r3, #1
 8007c0c:	e0f1      	b.n	8007df2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4a78      	ldr	r2, [pc, #480]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d00f      	beq.n	8007c3e <HAL_SPI_Init+0x42>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	4a77      	ldr	r2, [pc, #476]	; (8007e00 <HAL_SPI_Init+0x204>)
 8007c24:	4293      	cmp	r3, r2
 8007c26:	d00a      	beq.n	8007c3e <HAL_SPI_Init+0x42>
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a75      	ldr	r2, [pc, #468]	; (8007e04 <HAL_SPI_Init+0x208>)
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d005      	beq.n	8007c3e <HAL_SPI_Init+0x42>
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	2b0f      	cmp	r3, #15
 8007c38:	d901      	bls.n	8007c3e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e0d9      	b.n	8007df2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fba2 	bl	8008388 <SPI_GetPacketSize>
 8007c44:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	4a6c      	ldr	r2, [pc, #432]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c4c:	4293      	cmp	r3, r2
 8007c4e:	d00c      	beq.n	8007c6a <HAL_SPI_Init+0x6e>
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	4a6a      	ldr	r2, [pc, #424]	; (8007e00 <HAL_SPI_Init+0x204>)
 8007c56:	4293      	cmp	r3, r2
 8007c58:	d007      	beq.n	8007c6a <HAL_SPI_Init+0x6e>
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	4a69      	ldr	r2, [pc, #420]	; (8007e04 <HAL_SPI_Init+0x208>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d002      	beq.n	8007c6a <HAL_SPI_Init+0x6e>
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2b08      	cmp	r3, #8
 8007c68:	d811      	bhi.n	8007c8e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007c6e:	4a63      	ldr	r2, [pc, #396]	; (8007dfc <HAL_SPI_Init+0x200>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d009      	beq.n	8007c88 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	4a61      	ldr	r2, [pc, #388]	; (8007e00 <HAL_SPI_Init+0x204>)
 8007c7a:	4293      	cmp	r3, r2
 8007c7c:	d004      	beq.n	8007c88 <HAL_SPI_Init+0x8c>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a60      	ldr	r2, [pc, #384]	; (8007e04 <HAL_SPI_Init+0x208>)
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d104      	bne.n	8007c92 <HAL_SPI_Init+0x96>
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	2b10      	cmp	r3, #16
 8007c8c:	d901      	bls.n	8007c92 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8007c8e:	2301      	movs	r3, #1
 8007c90:	e0af      	b.n	8007df2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d106      	bne.n	8007cac <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7f9 fe70 	bl	800198c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	2202      	movs	r2, #2
 8007cb0:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	681a      	ldr	r2, [r3, #0]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0201 	bic.w	r2, r2, #1
 8007cc2:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8007cce:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	699b      	ldr	r3, [r3, #24]
 8007cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd8:	d119      	bne.n	8007d0e <HAL_SPI_Init+0x112>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ce2:	d103      	bne.n	8007cec <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d10c      	bne.n	8007d0e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8007cf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007cfc:	d107      	bne.n	8007d0e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	681a      	ldr	r2, [r3, #0]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d0c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	69da      	ldr	r2, [r3, #28]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d16:	431a      	orrs	r2, r3
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	431a      	orrs	r2, r3
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d20:	ea42 0103 	orr.w	r1, r2, r3
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	68da      	ldr	r2, [r3, #12]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	430a      	orrs	r2, r1
 8007d2e:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d38:	431a      	orrs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d3e:	431a      	orrs	r2, r3
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	699b      	ldr	r3, [r3, #24]
 8007d44:	431a      	orrs	r2, r3
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	691b      	ldr	r3, [r3, #16]
 8007d4a:	431a      	orrs	r2, r3
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	431a      	orrs	r2, r3
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	6a1b      	ldr	r3, [r3, #32]
 8007d56:	431a      	orrs	r2, r3
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	431a      	orrs	r2, r3
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d62:	431a      	orrs	r2, r3
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	689b      	ldr	r3, [r3, #8]
 8007d68:	431a      	orrs	r2, r3
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6e:	ea42 0103 	orr.w	r1, r2, r3
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	430a      	orrs	r2, r1
 8007d7c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	685b      	ldr	r3, [r3, #4]
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d113      	bne.n	8007dae <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d98:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689b      	ldr	r3, [r3, #8]
 8007da0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007dac:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f022 0201 	bic.w	r2, r2, #1
 8007dbc:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d00a      	beq.n	8007de0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	68db      	ldr	r3, [r3, #12]
 8007dd0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	430a      	orrs	r2, r1
 8007dde:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	2200      	movs	r2, #0
 8007de4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	2201      	movs	r2, #1
 8007dec:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8007df0:	2300      	movs	r3, #0
}
 8007df2:	4618      	mov	r0, r3
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	40013000 	.word	0x40013000
 8007e00:	40003800 	.word	0x40003800
 8007e04:	40003c00 	.word	0x40003c00

08007e08 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007e08:	b580      	push	{r7, lr}
 8007e0a:	b08a      	sub	sp, #40	; 0x28
 8007e0c:	af02      	add	r7, sp, #8
 8007e0e:	60f8      	str	r0, [r7, #12]
 8007e10:	60b9      	str	r1, [r7, #8]
 8007e12:	603b      	str	r3, [r7, #0]
 8007e14:	4613      	mov	r3, r2
 8007e16:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	3320      	adds	r3, #32
 8007e1e:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8007e20:	2300      	movs	r3, #0
 8007e22:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e2a:	2b01      	cmp	r3, #1
 8007e2c:	d101      	bne.n	8007e32 <HAL_SPI_Transmit+0x2a>
 8007e2e:	2302      	movs	r3, #2
 8007e30:	e1d7      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2201      	movs	r2, #1
 8007e36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007e3a:	f7fa f837 	bl	8001eac <HAL_GetTick>
 8007e3e:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007e46:	b2db      	uxtb	r3, r3
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d007      	beq.n	8007e5c <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e58:	7efb      	ldrb	r3, [r7, #27]
 8007e5a:	e1c2      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d002      	beq.n	8007e68 <HAL_SPI_Transmit+0x60>
 8007e62:	88fb      	ldrh	r3, [r7, #6]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d107      	bne.n	8007e78 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8007e74:	7efb      	ldrb	r3, [r7, #27]
 8007e76:	e1b4      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2203      	movs	r2, #3
 8007e7c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	2200      	movs	r2, #0
 8007e84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	88fa      	ldrh	r2, [r7, #6]
 8007e92:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	88fa      	ldrh	r2, [r7, #6]
 8007e9a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	2200      	movs	r2, #0
 8007eb0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	2200      	movs	r2, #0
 8007ebe:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	689b      	ldr	r3, [r3, #8]
 8007ec4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8007ec8:	d107      	bne.n	8007eda <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681a      	ldr	r2, [r3, #0]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ed8:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	4b96      	ldr	r3, [pc, #600]	; (800813c <HAL_SPI_Transmit+0x334>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	88f9      	ldrh	r1, [r7, #6]
 8007ee6:	68fa      	ldr	r2, [r7, #12]
 8007ee8:	6812      	ldr	r2, [r2, #0]
 8007eea:	430b      	orrs	r3, r1
 8007eec:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	f042 0201 	orr.w	r2, r2, #1
 8007efc:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	685b      	ldr	r3, [r3, #4]
 8007f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007f06:	d107      	bne.n	8007f18 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	68db      	ldr	r3, [r3, #12]
 8007f1c:	2b0f      	cmp	r3, #15
 8007f1e:	d947      	bls.n	8007fb0 <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007f20:	e03f      	b.n	8007fa2 <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	695b      	ldr	r3, [r3, #20]
 8007f28:	f003 0302 	and.w	r3, r3, #2
 8007f2c:	2b02      	cmp	r3, #2
 8007f2e:	d114      	bne.n	8007f5a <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	6812      	ldr	r2, [r2, #0]
 8007f3a:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007f40:	1d1a      	adds	r2, r3, #4
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	b29a      	uxth	r2, r3
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8007f58:	e023      	b.n	8007fa2 <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007f5a:	f7f9 ffa7 	bl	8001eac <HAL_GetTick>
 8007f5e:	4602      	mov	r2, r0
 8007f60:	697b      	ldr	r3, [r7, #20]
 8007f62:	1ad3      	subs	r3, r2, r3
 8007f64:	683a      	ldr	r2, [r7, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d803      	bhi.n	8007f72 <HAL_SPI_Transmit+0x16a>
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f70:	d102      	bne.n	8007f78 <HAL_SPI_Transmit+0x170>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d114      	bne.n	8007fa2 <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8007f78:	68f8      	ldr	r0, [r7, #12]
 8007f7a:	f000 f937 	bl	80081ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	2200      	movs	r2, #0
 8007f82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f8c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8007f9e:	2303      	movs	r3, #3
 8007fa0:	e11f      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fa8:	b29b      	uxth	r3, r3
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d1b9      	bne.n	8007f22 <HAL_SPI_Transmit+0x11a>
 8007fae:	e0f2      	b.n	8008196 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	68db      	ldr	r3, [r3, #12]
 8007fb4:	2b07      	cmp	r3, #7
 8007fb6:	f240 80e7 	bls.w	8008188 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 8007fba:	e05d      	b.n	8008078 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	695b      	ldr	r3, [r3, #20]
 8007fc2:	f003 0302 	and.w	r3, r3, #2
 8007fc6:	2b02      	cmp	r3, #2
 8007fc8:	d132      	bne.n	8008030 <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007fd0:	b29b      	uxth	r3, r3
 8007fd2:	2b01      	cmp	r3, #1
 8007fd4:	d918      	bls.n	8008008 <HAL_SPI_Transmit+0x200>
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	d014      	beq.n	8008008 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	6812      	ldr	r2, [r2, #0]
 8007fe8:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fee:	1d1a      	adds	r2, r3, #4
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8007ffa:	b29b      	uxth	r3, r3
 8007ffc:	3b02      	subs	r3, #2
 8007ffe:	b29a      	uxth	r2, r3
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008006:	e037      	b.n	8008078 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800800c:	881a      	ldrh	r2, [r3, #0]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008016:	1c9a      	adds	r2, r3, #2
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008022:	b29b      	uxth	r3, r3
 8008024:	3b01      	subs	r3, #1
 8008026:	b29a      	uxth	r2, r3
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800802e:	e023      	b.n	8008078 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008030:	f7f9 ff3c 	bl	8001eac <HAL_GetTick>
 8008034:	4602      	mov	r2, r0
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	1ad3      	subs	r3, r2, r3
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	429a      	cmp	r2, r3
 800803e:	d803      	bhi.n	8008048 <HAL_SPI_Transmit+0x240>
 8008040:	683b      	ldr	r3, [r7, #0]
 8008042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008046:	d102      	bne.n	800804e <HAL_SPI_Transmit+0x246>
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d114      	bne.n	8008078 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800804e:	68f8      	ldr	r0, [r7, #12]
 8008050:	f000 f8cc 	bl	80081ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008062:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008074:	2303      	movs	r3, #3
 8008076:	e0b4      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800807e:	b29b      	uxth	r3, r3
 8008080:	2b00      	cmp	r3, #0
 8008082:	d19b      	bne.n	8007fbc <HAL_SPI_Transmit+0x1b4>
 8008084:	e087      	b.n	8008196 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	695b      	ldr	r3, [r3, #20]
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b02      	cmp	r3, #2
 8008092:	d155      	bne.n	8008140 <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800809a:	b29b      	uxth	r3, r3
 800809c:	2b03      	cmp	r3, #3
 800809e:	d918      	bls.n	80080d2 <HAL_SPI_Transmit+0x2ca>
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d914      	bls.n	80080d2 <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	6812      	ldr	r2, [r2, #0]
 80080b2:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080b8:	1d1a      	adds	r2, r3, #4
 80080ba:	68fb      	ldr	r3, [r7, #12]
 80080bc:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	3b04      	subs	r3, #4
 80080c8:	b29a      	uxth	r2, r3
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80080d0:	e05a      	b.n	8008188 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80080d8:	b29b      	uxth	r3, r3
 80080da:	2b01      	cmp	r3, #1
 80080dc:	d917      	bls.n	800810e <HAL_SPI_Transmit+0x306>
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d013      	beq.n	800810e <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080ea:	881a      	ldrh	r2, [r3, #0]
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80080f4:	1c9a      	adds	r2, r3, #2
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8008100:	b29b      	uxth	r3, r3
 8008102:	3b02      	subs	r3, #2
 8008104:	b29a      	uxth	r2, r3
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800810c:	e03c      	b.n	8008188 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	3320      	adds	r3, #32
 8008118:	7812      	ldrb	r2, [r2, #0]
 800811a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008120:	1c5a      	adds	r2, r3, #1
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800812c:	b29b      	uxth	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	b29a      	uxth	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8008138:	e026      	b.n	8008188 <HAL_SPI_Transmit+0x380>
 800813a:	bf00      	nop
 800813c:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008140:	f7f9 feb4 	bl	8001eac <HAL_GetTick>
 8008144:	4602      	mov	r2, r0
 8008146:	697b      	ldr	r3, [r7, #20]
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	429a      	cmp	r2, r3
 800814e:	d803      	bhi.n	8008158 <HAL_SPI_Transmit+0x350>
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008156:	d102      	bne.n	800815e <HAL_SPI_Transmit+0x356>
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d114      	bne.n	8008188 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f000 f844 	bl	80081ec <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	2200      	movs	r2, #0
 8008168:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008172:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	2201      	movs	r2, #1
 8008180:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8008184:	2303      	movs	r3, #3
 8008186:	e02c      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800818e:	b29b      	uxth	r3, r3
 8008190:	2b00      	cmp	r3, #0
 8008192:	f47f af78 	bne.w	8008086 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	9300      	str	r3, [sp, #0]
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	2200      	movs	r2, #0
 800819e:	2108      	movs	r1, #8
 80081a0:	68f8      	ldr	r0, [r7, #12]
 80081a2:	f000 f8c3 	bl	800832c <SPI_WaitOnFlagUntilTimeout>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d007      	beq.n	80081bc <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b2:	f043 0220 	orr.w	r2, r3, #32
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80081bc:	68f8      	ldr	r0, [r7, #12]
 80081be:	f000 f815 	bl	80081ec <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80081dc:	2301      	movs	r3, #1
 80081de:	e000      	b.n	80081e2 <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80081e0:	7efb      	ldrb	r3, [r7, #27]
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3720      	adds	r7, #32
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}
 80081ea:	bf00      	nop

080081ec <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80081ec:	b480      	push	{r7}
 80081ee:	b085      	sub	sp, #20
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	695b      	ldr	r3, [r3, #20]
 80081fa:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	699a      	ldr	r2, [r3, #24]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f042 0208 	orr.w	r2, r2, #8
 800820a:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	699a      	ldr	r2, [r3, #24]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f042 0210 	orr.w	r2, r2, #16
 800821a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	681a      	ldr	r2, [r3, #0]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f022 0201 	bic.w	r2, r2, #1
 800822a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	6919      	ldr	r1, [r3, #16]
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681a      	ldr	r2, [r3, #0]
 8008236:	4b3c      	ldr	r3, [pc, #240]	; (8008328 <SPI_CloseTransfer+0x13c>)
 8008238:	400b      	ands	r3, r1
 800823a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	689a      	ldr	r2, [r3, #8]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800824a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b04      	cmp	r3, #4
 8008256:	d014      	beq.n	8008282 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f003 0320 	and.w	r3, r3, #32
 800825e:	2b00      	cmp	r3, #0
 8008260:	d00f      	beq.n	8008282 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008268:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	699a      	ldr	r2, [r3, #24]
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	f042 0220 	orr.w	r2, r2, #32
 8008280:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008288:	b2db      	uxtb	r3, r3
 800828a:	2b03      	cmp	r3, #3
 800828c:	d014      	beq.n	80082b8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008294:	2b00      	cmp	r3, #0
 8008296:	d00f      	beq.n	80082b8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800829e:	f043 0204 	orr.w	r2, r3, #4
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	699a      	ldr	r2, [r3, #24]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082b6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d00f      	beq.n	80082e2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082c8:	f043 0201 	orr.w	r2, r3, #1
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	699a      	ldr	r2, [r3, #24]
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80082e0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d00f      	beq.n	800830c <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f2:	f043 0208 	orr.w	r2, r3, #8
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	699a      	ldr	r2, [r3, #24]
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800830a:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	2200      	movs	r2, #0
 8008310:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800831c:	bf00      	nop
 800831e:	3714      	adds	r7, #20
 8008320:	46bd      	mov	sp, r7
 8008322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008326:	4770      	bx	lr
 8008328:	fffffc90 	.word	0xfffffc90

0800832c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 800832c:	b580      	push	{r7, lr}
 800832e:	b084      	sub	sp, #16
 8008330:	af00      	add	r7, sp, #0
 8008332:	60f8      	str	r0, [r7, #12]
 8008334:	60b9      	str	r1, [r7, #8]
 8008336:	603b      	str	r3, [r7, #0]
 8008338:	4613      	mov	r3, r2
 800833a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800833c:	e010      	b.n	8008360 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800833e:	f7f9 fdb5 	bl	8001eac <HAL_GetTick>
 8008342:	4602      	mov	r2, r0
 8008344:	683b      	ldr	r3, [r7, #0]
 8008346:	1ad3      	subs	r3, r2, r3
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	429a      	cmp	r2, r3
 800834c:	d803      	bhi.n	8008356 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008354:	d102      	bne.n	800835c <SPI_WaitOnFlagUntilTimeout+0x30>
 8008356:	69bb      	ldr	r3, [r7, #24]
 8008358:	2b00      	cmp	r3, #0
 800835a:	d101      	bne.n	8008360 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800835c:	2303      	movs	r3, #3
 800835e:	e00f      	b.n	8008380 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	695a      	ldr	r2, [r3, #20]
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	4013      	ands	r3, r2
 800836a:	68ba      	ldr	r2, [r7, #8]
 800836c:	429a      	cmp	r2, r3
 800836e:	bf0c      	ite	eq
 8008370:	2301      	moveq	r3, #1
 8008372:	2300      	movne	r3, #0
 8008374:	b2db      	uxtb	r3, r3
 8008376:	461a      	mov	r2, r3
 8008378:	79fb      	ldrb	r3, [r7, #7]
 800837a:	429a      	cmp	r2, r3
 800837c:	d0df      	beq.n	800833e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800837e:	2300      	movs	r3, #0
}
 8008380:	4618      	mov	r0, r3
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8008388:	b480      	push	{r7}
 800838a:	b085      	sub	sp, #20
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008394:	095b      	lsrs	r3, r3, #5
 8008396:	3301      	adds	r3, #1
 8008398:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	3301      	adds	r3, #1
 80083a0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	3307      	adds	r3, #7
 80083a6:	08db      	lsrs	r3, r3, #3
 80083a8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	68fa      	ldr	r2, [r7, #12]
 80083ae:	fb02 f303 	mul.w	r3, r2, r3
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b082      	sub	sp, #8
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d101      	bne.n	80083d0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80083cc:	2301      	movs	r3, #1
 80083ce:	e042      	b.n	8008456 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d106      	bne.n	80083e8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f7f9 fb3e 	bl	8001a64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2224      	movs	r2, #36	; 0x24
 80083ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008400:	6878      	ldr	r0, [r7, #4]
 8008402:	f000 fbeb 	bl	8008bdc <UART_SetConfig>
 8008406:	4603      	mov	r3, r0
 8008408:	2b01      	cmp	r3, #1
 800840a:	d101      	bne.n	8008410 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800840c:	2301      	movs	r3, #1
 800840e:	e022      	b.n	8008456 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008414:	2b00      	cmp	r3, #0
 8008416:	d002      	beq.n	800841e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8008418:	6878      	ldr	r0, [r7, #4]
 800841a:	f001 f947 	bl	80096ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	685a      	ldr	r2, [r3, #4]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800842c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800843c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	f042 0201 	orr.w	r2, r2, #1
 800844c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f001 f9ce 	bl	80097f0 <UART_CheckIdleState>
 8008454:	4603      	mov	r3, r0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3708      	adds	r7, #8
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}
	...

08008460 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b0ba      	sub	sp, #232	; 0xe8
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	69db      	ldr	r3, [r3, #28]
 800846e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	689b      	ldr	r3, [r3, #8]
 8008482:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8008486:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800848a:	f640 030f 	movw	r3, #2063	; 0x80f
 800848e:	4013      	ands	r3, r2
 8008490:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8008494:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008498:	2b00      	cmp	r3, #0
 800849a:	d11b      	bne.n	80084d4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800849c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084a0:	f003 0320 	and.w	r3, r3, #32
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d015      	beq.n	80084d4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80084a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084ac:	f003 0320 	and.w	r3, r3, #32
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d105      	bne.n	80084c0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80084b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d009      	beq.n	80084d4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	f000 835a 	beq.w	8008b7e <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
      }
      return;
 80084d2:	e354      	b.n	8008b7e <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80084d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80084d8:	2b00      	cmp	r3, #0
 80084da:	f000 811f 	beq.w	800871c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80084de:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80084e2:	4b8b      	ldr	r3, [pc, #556]	; (8008710 <HAL_UART_IRQHandler+0x2b0>)
 80084e4:	4013      	ands	r3, r2
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d106      	bne.n	80084f8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80084ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80084ee:	4b89      	ldr	r3, [pc, #548]	; (8008714 <HAL_UART_IRQHandler+0x2b4>)
 80084f0:	4013      	ands	r3, r2
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	f000 8112 	beq.w	800871c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80084f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084fc:	f003 0301 	and.w	r3, r3, #1
 8008500:	2b00      	cmp	r3, #0
 8008502:	d011      	beq.n	8008528 <HAL_UART_IRQHandler+0xc8>
 8008504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00b      	beq.n	8008528 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2201      	movs	r2, #1
 8008516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800851e:	f043 0201 	orr.w	r2, r3, #1
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800852c:	f003 0302 	and.w	r3, r3, #2
 8008530:	2b00      	cmp	r3, #0
 8008532:	d011      	beq.n	8008558 <HAL_UART_IRQHandler+0xf8>
 8008534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00b      	beq.n	8008558 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2202      	movs	r2, #2
 8008546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800854e:	f043 0204 	orr.w	r2, r3, #4
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800855c:	f003 0304 	and.w	r3, r3, #4
 8008560:	2b00      	cmp	r3, #0
 8008562:	d011      	beq.n	8008588 <HAL_UART_IRQHandler+0x128>
 8008564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008568:	f003 0301 	and.w	r3, r3, #1
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00b      	beq.n	8008588 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2204      	movs	r2, #4
 8008576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800857e:	f043 0202 	orr.w	r2, r3, #2
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800858c:	f003 0308 	and.w	r3, r3, #8
 8008590:	2b00      	cmp	r3, #0
 8008592:	d017      	beq.n	80085c4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008598:	f003 0320 	and.w	r3, r3, #32
 800859c:	2b00      	cmp	r3, #0
 800859e:	d105      	bne.n	80085ac <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80085a0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80085a4:	4b5a      	ldr	r3, [pc, #360]	; (8008710 <HAL_UART_IRQHandler+0x2b0>)
 80085a6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d00b      	beq.n	80085c4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	2208      	movs	r2, #8
 80085b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ba:	f043 0208 	orr.w	r2, r3, #8
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80085c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80085c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d012      	beq.n	80085f6 <HAL_UART_IRQHandler+0x196>
 80085d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80085d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d00c      	beq.n	80085f6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80085e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085ec:	f043 0220 	orr.w	r2, r3, #32
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	f000 82c0 	beq.w	8008b82 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8008602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008606:	f003 0320 	and.w	r3, r3, #32
 800860a:	2b00      	cmp	r3, #0
 800860c:	d013      	beq.n	8008636 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800860e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008612:	f003 0320 	and.w	r3, r3, #32
 8008616:	2b00      	cmp	r3, #0
 8008618:	d105      	bne.n	8008626 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800861a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800861e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008622:	2b00      	cmp	r3, #0
 8008624:	d007      	beq.n	8008636 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800862a:	2b00      	cmp	r3, #0
 800862c:	d003      	beq.n	8008636 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008632:	6878      	ldr	r0, [r7, #4]
 8008634:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800863c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	689b      	ldr	r3, [r3, #8]
 8008646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800864a:	2b40      	cmp	r3, #64	; 0x40
 800864c:	d005      	beq.n	800865a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800864e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008652:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008656:	2b00      	cmp	r3, #0
 8008658:	d04f      	beq.n	80086fa <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f001 f9dc 	bl	8009a18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800866a:	2b40      	cmp	r3, #64	; 0x40
 800866c:	d141      	bne.n	80086f2 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008678:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800867c:	e853 3f00 	ldrex	r3, [r3]
 8008680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008684:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008688:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800868c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	3308      	adds	r3, #8
 8008696:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800869a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800869e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80086a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80086aa:	e841 2300 	strex	r3, r2, [r1]
 80086ae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80086b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1d9      	bne.n	800866e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d013      	beq.n	80086ea <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c6:	4a14      	ldr	r2, [pc, #80]	; (8008718 <HAL_UART_IRQHandler+0x2b8>)
 80086c8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fa fbc6 	bl	8002e60 <HAL_DMA_Abort_IT>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d017      	beq.n	800870a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e0:	687a      	ldr	r2, [r7, #4]
 80086e2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80086e4:	4610      	mov	r0, r2
 80086e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086e8:	e00f      	b.n	800870a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80086ea:	6878      	ldr	r0, [r7, #4]
 80086ec:	f000 fa60 	bl	8008bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f0:	e00b      	b.n	800870a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80086f2:	6878      	ldr	r0, [r7, #4]
 80086f4:	f000 fa5c 	bl	8008bb0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086f8:	e007      	b.n	800870a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80086fa:	6878      	ldr	r0, [r7, #4]
 80086fc:	f000 fa58 	bl	8008bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2200      	movs	r2, #0
 8008704:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8008708:	e23b      	b.n	8008b82 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800870a:	bf00      	nop
    return;
 800870c:	e239      	b.n	8008b82 <HAL_UART_IRQHandler+0x722>
 800870e:	bf00      	nop
 8008710:	10000001 	.word	0x10000001
 8008714:	04000120 	.word	0x04000120
 8008718:	08009ae5 	.word	0x08009ae5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008720:	2b01      	cmp	r3, #1
 8008722:	f040 81ce 	bne.w	8008ac2 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8008726:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800872a:	f003 0310 	and.w	r3, r3, #16
 800872e:	2b00      	cmp	r3, #0
 8008730:	f000 81c7 	beq.w	8008ac2 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8008734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008738:	f003 0310 	and.w	r3, r3, #16
 800873c:	2b00      	cmp	r3, #0
 800873e:	f000 81c0 	beq.w	8008ac2 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2210      	movs	r2, #16
 8008748:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	689b      	ldr	r3, [r3, #8]
 8008750:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008754:	2b40      	cmp	r3, #64	; 0x40
 8008756:	f040 813b 	bne.w	80089d0 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	4a8b      	ldr	r2, [pc, #556]	; (8008990 <HAL_UART_IRQHandler+0x530>)
 8008762:	4293      	cmp	r3, r2
 8008764:	d059      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a89      	ldr	r2, [pc, #548]	; (8008994 <HAL_UART_IRQHandler+0x534>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d053      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a87      	ldr	r2, [pc, #540]	; (8008998 <HAL_UART_IRQHandler+0x538>)
 800877a:	4293      	cmp	r3, r2
 800877c:	d04d      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a85      	ldr	r2, [pc, #532]	; (800899c <HAL_UART_IRQHandler+0x53c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d047      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	4a83      	ldr	r2, [pc, #524]	; (80089a0 <HAL_UART_IRQHandler+0x540>)
 8008792:	4293      	cmp	r3, r2
 8008794:	d041      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a81      	ldr	r2, [pc, #516]	; (80089a4 <HAL_UART_IRQHandler+0x544>)
 800879e:	4293      	cmp	r3, r2
 80087a0:	d03b      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a7f      	ldr	r2, [pc, #508]	; (80089a8 <HAL_UART_IRQHandler+0x548>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d035      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a7d      	ldr	r2, [pc, #500]	; (80089ac <HAL_UART_IRQHandler+0x54c>)
 80087b6:	4293      	cmp	r3, r2
 80087b8:	d02f      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	4a7b      	ldr	r2, [pc, #492]	; (80089b0 <HAL_UART_IRQHandler+0x550>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d029      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a79      	ldr	r2, [pc, #484]	; (80089b4 <HAL_UART_IRQHandler+0x554>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d023      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	4a77      	ldr	r2, [pc, #476]	; (80089b8 <HAL_UART_IRQHandler+0x558>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d01d      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a75      	ldr	r2, [pc, #468]	; (80089bc <HAL_UART_IRQHandler+0x55c>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d017      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	4a73      	ldr	r2, [pc, #460]	; (80089c0 <HAL_UART_IRQHandler+0x560>)
 80087f2:	4293      	cmp	r3, r2
 80087f4:	d011      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	4a71      	ldr	r2, [pc, #452]	; (80089c4 <HAL_UART_IRQHandler+0x564>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d00b      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a6f      	ldr	r2, [pc, #444]	; (80089c8 <HAL_UART_IRQHandler+0x568>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d005      	beq.n	800881a <HAL_UART_IRQHandler+0x3ba>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	4a6d      	ldr	r2, [pc, #436]	; (80089cc <HAL_UART_IRQHandler+0x56c>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d105      	bne.n	8008826 <HAL_UART_IRQHandler+0x3c6>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	b29b      	uxth	r3, r3
 8008824:	e004      	b.n	8008830 <HAL_UART_IRQHandler+0x3d0>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	b29b      	uxth	r3, r3
 8008830:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008834:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008838:	2b00      	cmp	r3, #0
 800883a:	f000 81a4 	beq.w	8008b86 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008844:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008848:	429a      	cmp	r2, r3
 800884a:	f080 819c 	bcs.w	8008b86 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008854:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800885c:	69db      	ldr	r3, [r3, #28]
 800885e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008862:	f000 8086 	beq.w	8008972 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008872:	e853 3f00 	ldrex	r3, [r3]
 8008876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800887a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800887e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008882:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	461a      	mov	r2, r3
 800888c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008890:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008894:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008898:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800889c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80088a0:	e841 2300 	strex	r3, r2, [r1]
 80088a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80088a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d1da      	bne.n	8008866 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	3308      	adds	r3, #8
 80088b6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ba:	e853 3f00 	ldrex	r3, [r3]
 80088be:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80088c0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80088c2:	f023 0301 	bic.w	r3, r3, #1
 80088c6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	3308      	adds	r3, #8
 80088d0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80088d4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80088d8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088da:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80088dc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80088e0:	e841 2300 	strex	r3, r2, [r1]
 80088e4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80088e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d1e1      	bne.n	80088b0 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	3308      	adds	r3, #8
 80088f2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80088f6:	e853 3f00 	ldrex	r3, [r3]
 80088fa:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80088fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80088fe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008902:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	3308      	adds	r3, #8
 800890c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008910:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008912:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008914:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008916:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008918:	e841 2300 	strex	r3, r2, [r1]
 800891c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800891e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008920:	2b00      	cmp	r3, #0
 8008922:	d1e3      	bne.n	80088ec <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2220      	movs	r2, #32
 8008928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	2200      	movs	r2, #0
 8008930:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008938:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800893a:	e853 3f00 	ldrex	r3, [r3]
 800893e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008942:	f023 0310 	bic.w	r3, r3, #16
 8008946:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	461a      	mov	r2, r3
 8008950:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008954:	65bb      	str	r3, [r7, #88]	; 0x58
 8008956:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008958:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800895a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800895c:	e841 2300 	strex	r3, r2, [r1]
 8008960:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008964:	2b00      	cmp	r3, #0
 8008966:	d1e4      	bne.n	8008932 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800896c:	4618      	mov	r0, r3
 800896e:	f7f9 ff59 	bl	8002824 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800897e:	b29b      	uxth	r3, r3
 8008980:	1ad3      	subs	r3, r2, r3
 8008982:	b29b      	uxth	r3, r3
 8008984:	4619      	mov	r1, r3
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f000 f91c 	bl	8008bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800898c:	e0fb      	b.n	8008b86 <HAL_UART_IRQHandler+0x726>
 800898e:	bf00      	nop
 8008990:	40020010 	.word	0x40020010
 8008994:	40020028 	.word	0x40020028
 8008998:	40020040 	.word	0x40020040
 800899c:	40020058 	.word	0x40020058
 80089a0:	40020070 	.word	0x40020070
 80089a4:	40020088 	.word	0x40020088
 80089a8:	400200a0 	.word	0x400200a0
 80089ac:	400200b8 	.word	0x400200b8
 80089b0:	40020410 	.word	0x40020410
 80089b4:	40020428 	.word	0x40020428
 80089b8:	40020440 	.word	0x40020440
 80089bc:	40020458 	.word	0x40020458
 80089c0:	40020470 	.word	0x40020470
 80089c4:	40020488 	.word	0x40020488
 80089c8:	400204a0 	.word	0x400204a0
 80089cc:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089dc:	b29b      	uxth	r3, r3
 80089de:	1ad3      	subs	r3, r2, r3
 80089e0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80089ea:	b29b      	uxth	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	f000 80cc 	beq.w	8008b8a <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 80089f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	f000 80c7 	beq.w	8008b8a <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a04:	e853 3f00 	ldrex	r3, [r3]
 8008a08:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008a0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a10:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	461a      	mov	r2, r3
 8008a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008a1e:	647b      	str	r3, [r7, #68]	; 0x44
 8008a20:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a22:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008a24:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a26:	e841 2300 	strex	r3, r2, [r1]
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008a2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1e4      	bne.n	80089fc <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	3308      	adds	r3, #8
 8008a38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a3c:	e853 3f00 	ldrex	r3, [r3]
 8008a40:	623b      	str	r3, [r7, #32]
   return(result);
 8008a42:	6a3a      	ldr	r2, [r7, #32]
 8008a44:	4b54      	ldr	r3, [pc, #336]	; (8008b98 <HAL_UART_IRQHandler+0x738>)
 8008a46:	4013      	ands	r3, r2
 8008a48:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3308      	adds	r3, #8
 8008a52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a56:	633a      	str	r2, [r7, #48]	; 0x30
 8008a58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e3      	bne.n	8008a32 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2200      	movs	r2, #0
 8008a76:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	e853 3f00 	ldrex	r3, [r3]
 8008a8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	f023 0310 	bic.w	r3, r3, #16
 8008a92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	461a      	mov	r2, r3
 8008a9c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008aa0:	61fb      	str	r3, [r7, #28]
 8008aa2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008aa4:	69b9      	ldr	r1, [r7, #24]
 8008aa6:	69fa      	ldr	r2, [r7, #28]
 8008aa8:	e841 2300 	strex	r3, r2, [r1]
 8008aac:	617b      	str	r3, [r7, #20]
   return(result);
 8008aae:	697b      	ldr	r3, [r7, #20]
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d1e4      	bne.n	8008a7e <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008ab4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008ab8:	4619      	mov	r1, r3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	f000 f882 	bl	8008bc4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008ac0:	e063      	b.n	8008b8a <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00e      	beq.n	8008aec <HAL_UART_IRQHandler+0x68c>
 8008ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008ad2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d008      	beq.n	8008aec <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008ae2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f001 f83e 	bl	8009b66 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008aea:	e051      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008aec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008af0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d014      	beq.n	8008b22 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8008af8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008afc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d105      	bne.n	8008b10 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8008b04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008b08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d008      	beq.n	8008b22 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b14:	2b00      	cmp	r3, #0
 8008b16:	d03a      	beq.n	8008b8e <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b1c:	6878      	ldr	r0, [r7, #4]
 8008b1e:	4798      	blx	r3
    }
    return;
 8008b20:	e035      	b.n	8008b8e <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8008b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d009      	beq.n	8008b42 <HAL_UART_IRQHandler+0x6e2>
 8008b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d003      	beq.n	8008b42 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8008b3a:	6878      	ldr	r0, [r7, #4]
 8008b3c:	f000 ffe8 	bl	8009b10 <UART_EndTransmit_IT>
    return;
 8008b40:	e026      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8008b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d009      	beq.n	8008b62 <HAL_UART_IRQHandler+0x702>
 8008b4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b52:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d003      	beq.n	8008b62 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f001 f817 	bl	8009b8e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b60:	e016      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d010      	beq.n	8008b90 <HAL_UART_IRQHandler+0x730>
 8008b6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	da0c      	bge.n	8008b90 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008b76:	6878      	ldr	r0, [r7, #4]
 8008b78:	f000 ffff 	bl	8009b7a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008b7c:	e008      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
      return;
 8008b7e:	bf00      	nop
 8008b80:	e006      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
    return;
 8008b82:	bf00      	nop
 8008b84:	e004      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
      return;
 8008b86:	bf00      	nop
 8008b88:	e002      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
      return;
 8008b8a:	bf00      	nop
 8008b8c:	e000      	b.n	8008b90 <HAL_UART_IRQHandler+0x730>
    return;
 8008b8e:	bf00      	nop
  }
}
 8008b90:	37e8      	adds	r7, #232	; 0xe8
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	effffffe 	.word	0xeffffffe

08008b9c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008b9c:	b480      	push	{r7}
 8008b9e:	b083      	sub	sp, #12
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008ba4:	bf00      	nop
 8008ba6:	370c      	adds	r7, #12
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr

08008bb0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008bb0:	b480      	push	{r7}
 8008bb2:	b083      	sub	sp, #12
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008bb8:	bf00      	nop
 8008bba:	370c      	adds	r7, #12
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b083      	sub	sp, #12
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	460b      	mov	r3, r1
 8008bce:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008bd0:	bf00      	nop
 8008bd2:	370c      	adds	r7, #12
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bda:	4770      	bx	lr

08008bdc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008bdc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008be0:	b092      	sub	sp, #72	; 0x48
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008be6:	2300      	movs	r3, #0
 8008be8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	689a      	ldr	r2, [r3, #8]
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	431a      	orrs	r2, r3
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	695b      	ldr	r3, [r3, #20]
 8008bfa:	431a      	orrs	r2, r3
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	69db      	ldr	r3, [r3, #28]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008c04:	697b      	ldr	r3, [r7, #20]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	681a      	ldr	r2, [r3, #0]
 8008c0a:	4bbe      	ldr	r3, [pc, #760]	; (8008f04 <UART_SetConfig+0x328>)
 8008c0c:	4013      	ands	r3, r2
 8008c0e:	697a      	ldr	r2, [r7, #20]
 8008c10:	6812      	ldr	r2, [r2, #0]
 8008c12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c14:	430b      	orrs	r3, r1
 8008c16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008c18:	697b      	ldr	r3, [r7, #20]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	685b      	ldr	r3, [r3, #4]
 8008c1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008c22:	697b      	ldr	r3, [r7, #20]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	430a      	orrs	r2, r1
 8008c2c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008c34:	697b      	ldr	r3, [r7, #20]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	4ab3      	ldr	r2, [pc, #716]	; (8008f08 <UART_SetConfig+0x32c>)
 8008c3a:	4293      	cmp	r3, r2
 8008c3c:	d004      	beq.n	8008c48 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008c3e:	697b      	ldr	r3, [r7, #20]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c44:	4313      	orrs	r3, r2
 8008c46:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	689a      	ldr	r2, [r3, #8]
 8008c4e:	4baf      	ldr	r3, [pc, #700]	; (8008f0c <UART_SetConfig+0x330>)
 8008c50:	4013      	ands	r3, r2
 8008c52:	697a      	ldr	r2, [r7, #20]
 8008c54:	6812      	ldr	r2, [r2, #0]
 8008c56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008c58:	430b      	orrs	r3, r1
 8008c5a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008c5c:	697b      	ldr	r3, [r7, #20]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c62:	f023 010f 	bic.w	r1, r3, #15
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	430a      	orrs	r2, r1
 8008c70:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008c72:	697b      	ldr	r3, [r7, #20]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	4aa6      	ldr	r2, [pc, #664]	; (8008f10 <UART_SetConfig+0x334>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d177      	bne.n	8008d6c <UART_SetConfig+0x190>
 8008c7c:	4ba5      	ldr	r3, [pc, #660]	; (8008f14 <UART_SetConfig+0x338>)
 8008c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c80:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008c84:	2b28      	cmp	r3, #40	; 0x28
 8008c86:	d86d      	bhi.n	8008d64 <UART_SetConfig+0x188>
 8008c88:	a201      	add	r2, pc, #4	; (adr r2, 8008c90 <UART_SetConfig+0xb4>)
 8008c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c8e:	bf00      	nop
 8008c90:	08008d35 	.word	0x08008d35
 8008c94:	08008d65 	.word	0x08008d65
 8008c98:	08008d65 	.word	0x08008d65
 8008c9c:	08008d65 	.word	0x08008d65
 8008ca0:	08008d65 	.word	0x08008d65
 8008ca4:	08008d65 	.word	0x08008d65
 8008ca8:	08008d65 	.word	0x08008d65
 8008cac:	08008d65 	.word	0x08008d65
 8008cb0:	08008d3d 	.word	0x08008d3d
 8008cb4:	08008d65 	.word	0x08008d65
 8008cb8:	08008d65 	.word	0x08008d65
 8008cbc:	08008d65 	.word	0x08008d65
 8008cc0:	08008d65 	.word	0x08008d65
 8008cc4:	08008d65 	.word	0x08008d65
 8008cc8:	08008d65 	.word	0x08008d65
 8008ccc:	08008d65 	.word	0x08008d65
 8008cd0:	08008d45 	.word	0x08008d45
 8008cd4:	08008d65 	.word	0x08008d65
 8008cd8:	08008d65 	.word	0x08008d65
 8008cdc:	08008d65 	.word	0x08008d65
 8008ce0:	08008d65 	.word	0x08008d65
 8008ce4:	08008d65 	.word	0x08008d65
 8008ce8:	08008d65 	.word	0x08008d65
 8008cec:	08008d65 	.word	0x08008d65
 8008cf0:	08008d4d 	.word	0x08008d4d
 8008cf4:	08008d65 	.word	0x08008d65
 8008cf8:	08008d65 	.word	0x08008d65
 8008cfc:	08008d65 	.word	0x08008d65
 8008d00:	08008d65 	.word	0x08008d65
 8008d04:	08008d65 	.word	0x08008d65
 8008d08:	08008d65 	.word	0x08008d65
 8008d0c:	08008d65 	.word	0x08008d65
 8008d10:	08008d55 	.word	0x08008d55
 8008d14:	08008d65 	.word	0x08008d65
 8008d18:	08008d65 	.word	0x08008d65
 8008d1c:	08008d65 	.word	0x08008d65
 8008d20:	08008d65 	.word	0x08008d65
 8008d24:	08008d65 	.word	0x08008d65
 8008d28:	08008d65 	.word	0x08008d65
 8008d2c:	08008d65 	.word	0x08008d65
 8008d30:	08008d5d 	.word	0x08008d5d
 8008d34:	2301      	movs	r3, #1
 8008d36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d3a:	e222      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d3c:	2304      	movs	r3, #4
 8008d3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d42:	e21e      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d44:	2308      	movs	r3, #8
 8008d46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d4a:	e21a      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d52:	e216      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d54:	2320      	movs	r3, #32
 8008d56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d5a:	e212      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d5c:	2340      	movs	r3, #64	; 0x40
 8008d5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d62:	e20e      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d64:	2380      	movs	r3, #128	; 0x80
 8008d66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008d6a:	e20a      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	4a69      	ldr	r2, [pc, #420]	; (8008f18 <UART_SetConfig+0x33c>)
 8008d72:	4293      	cmp	r3, r2
 8008d74:	d130      	bne.n	8008dd8 <UART_SetConfig+0x1fc>
 8008d76:	4b67      	ldr	r3, [pc, #412]	; (8008f14 <UART_SetConfig+0x338>)
 8008d78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b05      	cmp	r3, #5
 8008d80:	d826      	bhi.n	8008dd0 <UART_SetConfig+0x1f4>
 8008d82:	a201      	add	r2, pc, #4	; (adr r2, 8008d88 <UART_SetConfig+0x1ac>)
 8008d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d88:	08008da1 	.word	0x08008da1
 8008d8c:	08008da9 	.word	0x08008da9
 8008d90:	08008db1 	.word	0x08008db1
 8008d94:	08008db9 	.word	0x08008db9
 8008d98:	08008dc1 	.word	0x08008dc1
 8008d9c:	08008dc9 	.word	0x08008dc9
 8008da0:	2300      	movs	r3, #0
 8008da2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008da6:	e1ec      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008da8:	2304      	movs	r3, #4
 8008daa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dae:	e1e8      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008db0:	2308      	movs	r3, #8
 8008db2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008db6:	e1e4      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008db8:	2310      	movs	r3, #16
 8008dba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dbe:	e1e0      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008dc0:	2320      	movs	r3, #32
 8008dc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dc6:	e1dc      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008dc8:	2340      	movs	r3, #64	; 0x40
 8008dca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dce:	e1d8      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008dd0:	2380      	movs	r3, #128	; 0x80
 8008dd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008dd6:	e1d4      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008dd8:	697b      	ldr	r3, [r7, #20]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	4a4f      	ldr	r2, [pc, #316]	; (8008f1c <UART_SetConfig+0x340>)
 8008dde:	4293      	cmp	r3, r2
 8008de0:	d130      	bne.n	8008e44 <UART_SetConfig+0x268>
 8008de2:	4b4c      	ldr	r3, [pc, #304]	; (8008f14 <UART_SetConfig+0x338>)
 8008de4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008de6:	f003 0307 	and.w	r3, r3, #7
 8008dea:	2b05      	cmp	r3, #5
 8008dec:	d826      	bhi.n	8008e3c <UART_SetConfig+0x260>
 8008dee:	a201      	add	r2, pc, #4	; (adr r2, 8008df4 <UART_SetConfig+0x218>)
 8008df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008df4:	08008e0d 	.word	0x08008e0d
 8008df8:	08008e15 	.word	0x08008e15
 8008dfc:	08008e1d 	.word	0x08008e1d
 8008e00:	08008e25 	.word	0x08008e25
 8008e04:	08008e2d 	.word	0x08008e2d
 8008e08:	08008e35 	.word	0x08008e35
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e12:	e1b6      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e14:	2304      	movs	r3, #4
 8008e16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e1a:	e1b2      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e1c:	2308      	movs	r3, #8
 8008e1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e22:	e1ae      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e24:	2310      	movs	r3, #16
 8008e26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e2a:	e1aa      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e2c:	2320      	movs	r3, #32
 8008e2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e32:	e1a6      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e34:	2340      	movs	r3, #64	; 0x40
 8008e36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e3a:	e1a2      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e3c:	2380      	movs	r3, #128	; 0x80
 8008e3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e42:	e19e      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	4a35      	ldr	r2, [pc, #212]	; (8008f20 <UART_SetConfig+0x344>)
 8008e4a:	4293      	cmp	r3, r2
 8008e4c:	d130      	bne.n	8008eb0 <UART_SetConfig+0x2d4>
 8008e4e:	4b31      	ldr	r3, [pc, #196]	; (8008f14 <UART_SetConfig+0x338>)
 8008e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e52:	f003 0307 	and.w	r3, r3, #7
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	d826      	bhi.n	8008ea8 <UART_SetConfig+0x2cc>
 8008e5a:	a201      	add	r2, pc, #4	; (adr r2, 8008e60 <UART_SetConfig+0x284>)
 8008e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e60:	08008e79 	.word	0x08008e79
 8008e64:	08008e81 	.word	0x08008e81
 8008e68:	08008e89 	.word	0x08008e89
 8008e6c:	08008e91 	.word	0x08008e91
 8008e70:	08008e99 	.word	0x08008e99
 8008e74:	08008ea1 	.word	0x08008ea1
 8008e78:	2300      	movs	r3, #0
 8008e7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e7e:	e180      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e80:	2304      	movs	r3, #4
 8008e82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e86:	e17c      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e88:	2308      	movs	r3, #8
 8008e8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e8e:	e178      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e90:	2310      	movs	r3, #16
 8008e92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e96:	e174      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008e98:	2320      	movs	r3, #32
 8008e9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008e9e:	e170      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008ea0:	2340      	movs	r3, #64	; 0x40
 8008ea2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ea6:	e16c      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008ea8:	2380      	movs	r3, #128	; 0x80
 8008eaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eae:	e168      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008eb0:	697b      	ldr	r3, [r7, #20]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	4a1b      	ldr	r2, [pc, #108]	; (8008f24 <UART_SetConfig+0x348>)
 8008eb6:	4293      	cmp	r3, r2
 8008eb8:	d142      	bne.n	8008f40 <UART_SetConfig+0x364>
 8008eba:	4b16      	ldr	r3, [pc, #88]	; (8008f14 <UART_SetConfig+0x338>)
 8008ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	2b05      	cmp	r3, #5
 8008ec4:	d838      	bhi.n	8008f38 <UART_SetConfig+0x35c>
 8008ec6:	a201      	add	r2, pc, #4	; (adr r2, 8008ecc <UART_SetConfig+0x2f0>)
 8008ec8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ecc:	08008ee5 	.word	0x08008ee5
 8008ed0:	08008eed 	.word	0x08008eed
 8008ed4:	08008ef5 	.word	0x08008ef5
 8008ed8:	08008efd 	.word	0x08008efd
 8008edc:	08008f29 	.word	0x08008f29
 8008ee0:	08008f31 	.word	0x08008f31
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008eea:	e14a      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008eec:	2304      	movs	r3, #4
 8008eee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008ef2:	e146      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008efa:	e142      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008efc:	2310      	movs	r3, #16
 8008efe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f02:	e13e      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008f04:	cfff69f3 	.word	0xcfff69f3
 8008f08:	58000c00 	.word	0x58000c00
 8008f0c:	11fff4ff 	.word	0x11fff4ff
 8008f10:	40011000 	.word	0x40011000
 8008f14:	58024400 	.word	0x58024400
 8008f18:	40004400 	.word	0x40004400
 8008f1c:	40004800 	.word	0x40004800
 8008f20:	40004c00 	.word	0x40004c00
 8008f24:	40005000 	.word	0x40005000
 8008f28:	2320      	movs	r3, #32
 8008f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f2e:	e128      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008f30:	2340      	movs	r3, #64	; 0x40
 8008f32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f36:	e124      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008f3e:	e120      	b.n	8009182 <UART_SetConfig+0x5a6>
 8008f40:	697b      	ldr	r3, [r7, #20]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4acb      	ldr	r2, [pc, #812]	; (8009274 <UART_SetConfig+0x698>)
 8008f46:	4293      	cmp	r3, r2
 8008f48:	d176      	bne.n	8009038 <UART_SetConfig+0x45c>
 8008f4a:	4bcb      	ldr	r3, [pc, #812]	; (8009278 <UART_SetConfig+0x69c>)
 8008f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008f4e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008f52:	2b28      	cmp	r3, #40	; 0x28
 8008f54:	d86c      	bhi.n	8009030 <UART_SetConfig+0x454>
 8008f56:	a201      	add	r2, pc, #4	; (adr r2, 8008f5c <UART_SetConfig+0x380>)
 8008f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f5c:	08009001 	.word	0x08009001
 8008f60:	08009031 	.word	0x08009031
 8008f64:	08009031 	.word	0x08009031
 8008f68:	08009031 	.word	0x08009031
 8008f6c:	08009031 	.word	0x08009031
 8008f70:	08009031 	.word	0x08009031
 8008f74:	08009031 	.word	0x08009031
 8008f78:	08009031 	.word	0x08009031
 8008f7c:	08009009 	.word	0x08009009
 8008f80:	08009031 	.word	0x08009031
 8008f84:	08009031 	.word	0x08009031
 8008f88:	08009031 	.word	0x08009031
 8008f8c:	08009031 	.word	0x08009031
 8008f90:	08009031 	.word	0x08009031
 8008f94:	08009031 	.word	0x08009031
 8008f98:	08009031 	.word	0x08009031
 8008f9c:	08009011 	.word	0x08009011
 8008fa0:	08009031 	.word	0x08009031
 8008fa4:	08009031 	.word	0x08009031
 8008fa8:	08009031 	.word	0x08009031
 8008fac:	08009031 	.word	0x08009031
 8008fb0:	08009031 	.word	0x08009031
 8008fb4:	08009031 	.word	0x08009031
 8008fb8:	08009031 	.word	0x08009031
 8008fbc:	08009019 	.word	0x08009019
 8008fc0:	08009031 	.word	0x08009031
 8008fc4:	08009031 	.word	0x08009031
 8008fc8:	08009031 	.word	0x08009031
 8008fcc:	08009031 	.word	0x08009031
 8008fd0:	08009031 	.word	0x08009031
 8008fd4:	08009031 	.word	0x08009031
 8008fd8:	08009031 	.word	0x08009031
 8008fdc:	08009021 	.word	0x08009021
 8008fe0:	08009031 	.word	0x08009031
 8008fe4:	08009031 	.word	0x08009031
 8008fe8:	08009031 	.word	0x08009031
 8008fec:	08009031 	.word	0x08009031
 8008ff0:	08009031 	.word	0x08009031
 8008ff4:	08009031 	.word	0x08009031
 8008ff8:	08009031 	.word	0x08009031
 8008ffc:	08009029 	.word	0x08009029
 8009000:	2301      	movs	r3, #1
 8009002:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009006:	e0bc      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009008:	2304      	movs	r3, #4
 800900a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800900e:	e0b8      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009010:	2308      	movs	r3, #8
 8009012:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009016:	e0b4      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009018:	2310      	movs	r3, #16
 800901a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800901e:	e0b0      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009020:	2320      	movs	r3, #32
 8009022:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009026:	e0ac      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009028:	2340      	movs	r3, #64	; 0x40
 800902a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800902e:	e0a8      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009030:	2380      	movs	r3, #128	; 0x80
 8009032:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009036:	e0a4      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009038:	697b      	ldr	r3, [r7, #20]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	4a8f      	ldr	r2, [pc, #572]	; (800927c <UART_SetConfig+0x6a0>)
 800903e:	4293      	cmp	r3, r2
 8009040:	d130      	bne.n	80090a4 <UART_SetConfig+0x4c8>
 8009042:	4b8d      	ldr	r3, [pc, #564]	; (8009278 <UART_SetConfig+0x69c>)
 8009044:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009046:	f003 0307 	and.w	r3, r3, #7
 800904a:	2b05      	cmp	r3, #5
 800904c:	d826      	bhi.n	800909c <UART_SetConfig+0x4c0>
 800904e:	a201      	add	r2, pc, #4	; (adr r2, 8009054 <UART_SetConfig+0x478>)
 8009050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009054:	0800906d 	.word	0x0800906d
 8009058:	08009075 	.word	0x08009075
 800905c:	0800907d 	.word	0x0800907d
 8009060:	08009085 	.word	0x08009085
 8009064:	0800908d 	.word	0x0800908d
 8009068:	08009095 	.word	0x08009095
 800906c:	2300      	movs	r3, #0
 800906e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009072:	e086      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009074:	2304      	movs	r3, #4
 8009076:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800907a:	e082      	b.n	8009182 <UART_SetConfig+0x5a6>
 800907c:	2308      	movs	r3, #8
 800907e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009082:	e07e      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009084:	2310      	movs	r3, #16
 8009086:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800908a:	e07a      	b.n	8009182 <UART_SetConfig+0x5a6>
 800908c:	2320      	movs	r3, #32
 800908e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009092:	e076      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009094:	2340      	movs	r3, #64	; 0x40
 8009096:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800909a:	e072      	b.n	8009182 <UART_SetConfig+0x5a6>
 800909c:	2380      	movs	r3, #128	; 0x80
 800909e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090a2:	e06e      	b.n	8009182 <UART_SetConfig+0x5a6>
 80090a4:	697b      	ldr	r3, [r7, #20]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	4a75      	ldr	r2, [pc, #468]	; (8009280 <UART_SetConfig+0x6a4>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d130      	bne.n	8009110 <UART_SetConfig+0x534>
 80090ae:	4b72      	ldr	r3, [pc, #456]	; (8009278 <UART_SetConfig+0x69c>)
 80090b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80090b2:	f003 0307 	and.w	r3, r3, #7
 80090b6:	2b05      	cmp	r3, #5
 80090b8:	d826      	bhi.n	8009108 <UART_SetConfig+0x52c>
 80090ba:	a201      	add	r2, pc, #4	; (adr r2, 80090c0 <UART_SetConfig+0x4e4>)
 80090bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090c0:	080090d9 	.word	0x080090d9
 80090c4:	080090e1 	.word	0x080090e1
 80090c8:	080090e9 	.word	0x080090e9
 80090cc:	080090f1 	.word	0x080090f1
 80090d0:	080090f9 	.word	0x080090f9
 80090d4:	08009101 	.word	0x08009101
 80090d8:	2300      	movs	r3, #0
 80090da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090de:	e050      	b.n	8009182 <UART_SetConfig+0x5a6>
 80090e0:	2304      	movs	r3, #4
 80090e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090e6:	e04c      	b.n	8009182 <UART_SetConfig+0x5a6>
 80090e8:	2308      	movs	r3, #8
 80090ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090ee:	e048      	b.n	8009182 <UART_SetConfig+0x5a6>
 80090f0:	2310      	movs	r3, #16
 80090f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090f6:	e044      	b.n	8009182 <UART_SetConfig+0x5a6>
 80090f8:	2320      	movs	r3, #32
 80090fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80090fe:	e040      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009100:	2340      	movs	r3, #64	; 0x40
 8009102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009106:	e03c      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009108:	2380      	movs	r3, #128	; 0x80
 800910a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800910e:	e038      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009110:	697b      	ldr	r3, [r7, #20]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	4a5b      	ldr	r2, [pc, #364]	; (8009284 <UART_SetConfig+0x6a8>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d130      	bne.n	800917c <UART_SetConfig+0x5a0>
 800911a:	4b57      	ldr	r3, [pc, #348]	; (8009278 <UART_SetConfig+0x69c>)
 800911c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800911e:	f003 0307 	and.w	r3, r3, #7
 8009122:	2b05      	cmp	r3, #5
 8009124:	d826      	bhi.n	8009174 <UART_SetConfig+0x598>
 8009126:	a201      	add	r2, pc, #4	; (adr r2, 800912c <UART_SetConfig+0x550>)
 8009128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800912c:	08009145 	.word	0x08009145
 8009130:	0800914d 	.word	0x0800914d
 8009134:	08009155 	.word	0x08009155
 8009138:	0800915d 	.word	0x0800915d
 800913c:	08009165 	.word	0x08009165
 8009140:	0800916d 	.word	0x0800916d
 8009144:	2302      	movs	r3, #2
 8009146:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800914a:	e01a      	b.n	8009182 <UART_SetConfig+0x5a6>
 800914c:	2304      	movs	r3, #4
 800914e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009152:	e016      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009154:	2308      	movs	r3, #8
 8009156:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800915a:	e012      	b.n	8009182 <UART_SetConfig+0x5a6>
 800915c:	2310      	movs	r3, #16
 800915e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009162:	e00e      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009164:	2320      	movs	r3, #32
 8009166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800916a:	e00a      	b.n	8009182 <UART_SetConfig+0x5a6>
 800916c:	2340      	movs	r3, #64	; 0x40
 800916e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009172:	e006      	b.n	8009182 <UART_SetConfig+0x5a6>
 8009174:	2380      	movs	r3, #128	; 0x80
 8009176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800917a:	e002      	b.n	8009182 <UART_SetConfig+0x5a6>
 800917c:	2380      	movs	r3, #128	; 0x80
 800917e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009182:	697b      	ldr	r3, [r7, #20]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	4a3f      	ldr	r2, [pc, #252]	; (8009284 <UART_SetConfig+0x6a8>)
 8009188:	4293      	cmp	r3, r2
 800918a:	f040 80f8 	bne.w	800937e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800918e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009192:	2b20      	cmp	r3, #32
 8009194:	dc46      	bgt.n	8009224 <UART_SetConfig+0x648>
 8009196:	2b02      	cmp	r3, #2
 8009198:	f2c0 8082 	blt.w	80092a0 <UART_SetConfig+0x6c4>
 800919c:	3b02      	subs	r3, #2
 800919e:	2b1e      	cmp	r3, #30
 80091a0:	d87e      	bhi.n	80092a0 <UART_SetConfig+0x6c4>
 80091a2:	a201      	add	r2, pc, #4	; (adr r2, 80091a8 <UART_SetConfig+0x5cc>)
 80091a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091a8:	0800922b 	.word	0x0800922b
 80091ac:	080092a1 	.word	0x080092a1
 80091b0:	08009233 	.word	0x08009233
 80091b4:	080092a1 	.word	0x080092a1
 80091b8:	080092a1 	.word	0x080092a1
 80091bc:	080092a1 	.word	0x080092a1
 80091c0:	08009243 	.word	0x08009243
 80091c4:	080092a1 	.word	0x080092a1
 80091c8:	080092a1 	.word	0x080092a1
 80091cc:	080092a1 	.word	0x080092a1
 80091d0:	080092a1 	.word	0x080092a1
 80091d4:	080092a1 	.word	0x080092a1
 80091d8:	080092a1 	.word	0x080092a1
 80091dc:	080092a1 	.word	0x080092a1
 80091e0:	08009253 	.word	0x08009253
 80091e4:	080092a1 	.word	0x080092a1
 80091e8:	080092a1 	.word	0x080092a1
 80091ec:	080092a1 	.word	0x080092a1
 80091f0:	080092a1 	.word	0x080092a1
 80091f4:	080092a1 	.word	0x080092a1
 80091f8:	080092a1 	.word	0x080092a1
 80091fc:	080092a1 	.word	0x080092a1
 8009200:	080092a1 	.word	0x080092a1
 8009204:	080092a1 	.word	0x080092a1
 8009208:	080092a1 	.word	0x080092a1
 800920c:	080092a1 	.word	0x080092a1
 8009210:	080092a1 	.word	0x080092a1
 8009214:	080092a1 	.word	0x080092a1
 8009218:	080092a1 	.word	0x080092a1
 800921c:	080092a1 	.word	0x080092a1
 8009220:	08009293 	.word	0x08009293
 8009224:	2b40      	cmp	r3, #64	; 0x40
 8009226:	d037      	beq.n	8009298 <UART_SetConfig+0x6bc>
 8009228:	e03a      	b.n	80092a0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800922a:	f7fe f8c5 	bl	80073b8 <HAL_RCCEx_GetD3PCLK1Freq>
 800922e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009230:	e03c      	b.n	80092ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009236:	4618      	mov	r0, r3
 8009238:	f7fe f8d4 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800923c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800923e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009240:	e034      	b.n	80092ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009242:	f107 0318 	add.w	r3, r7, #24
 8009246:	4618      	mov	r0, r3
 8009248:	f7fe fa20 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800924c:	69fb      	ldr	r3, [r7, #28]
 800924e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009250:	e02c      	b.n	80092ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009252:	4b09      	ldr	r3, [pc, #36]	; (8009278 <UART_SetConfig+0x69c>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0320 	and.w	r3, r3, #32
 800925a:	2b00      	cmp	r3, #0
 800925c:	d016      	beq.n	800928c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800925e:	4b06      	ldr	r3, [pc, #24]	; (8009278 <UART_SetConfig+0x69c>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	08db      	lsrs	r3, r3, #3
 8009264:	f003 0303 	and.w	r3, r3, #3
 8009268:	4a07      	ldr	r2, [pc, #28]	; (8009288 <UART_SetConfig+0x6ac>)
 800926a:	fa22 f303 	lsr.w	r3, r2, r3
 800926e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009270:	e01c      	b.n	80092ac <UART_SetConfig+0x6d0>
 8009272:	bf00      	nop
 8009274:	40011400 	.word	0x40011400
 8009278:	58024400 	.word	0x58024400
 800927c:	40007800 	.word	0x40007800
 8009280:	40007c00 	.word	0x40007c00
 8009284:	58000c00 	.word	0x58000c00
 8009288:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800928c:	4b9d      	ldr	r3, [pc, #628]	; (8009504 <UART_SetConfig+0x928>)
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009290:	e00c      	b.n	80092ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009292:	4b9d      	ldr	r3, [pc, #628]	; (8009508 <UART_SetConfig+0x92c>)
 8009294:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009296:	e009      	b.n	80092ac <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009298:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800929c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800929e:	e005      	b.n	80092ac <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80092a0:	2300      	movs	r3, #0
 80092a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80092a4:	2301      	movs	r3, #1
 80092a6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80092aa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80092ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	f000 81de 	beq.w	8009670 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092b8:	4a94      	ldr	r2, [pc, #592]	; (800950c <UART_SetConfig+0x930>)
 80092ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092be:	461a      	mov	r2, r3
 80092c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80092c6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	685a      	ldr	r2, [r3, #4]
 80092cc:	4613      	mov	r3, r2
 80092ce:	005b      	lsls	r3, r3, #1
 80092d0:	4413      	add	r3, r2
 80092d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d305      	bcc.n	80092e4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80092d8:	697b      	ldr	r3, [r7, #20]
 80092da:	685b      	ldr	r3, [r3, #4]
 80092dc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80092de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d903      	bls.n	80092ec <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80092ea:	e1c1      	b.n	8009670 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80092ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80092ee:	2200      	movs	r2, #0
 80092f0:	60bb      	str	r3, [r7, #8]
 80092f2:	60fa      	str	r2, [r7, #12]
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092f8:	4a84      	ldr	r2, [pc, #528]	; (800950c <UART_SetConfig+0x930>)
 80092fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80092fe:	b29b      	uxth	r3, r3
 8009300:	2200      	movs	r2, #0
 8009302:	603b      	str	r3, [r7, #0]
 8009304:	607a      	str	r2, [r7, #4]
 8009306:	e9d7 2300 	ldrd	r2, r3, [r7]
 800930a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800930e:	f7f6 ffe3 	bl	80002d8 <__aeabi_uldivmod>
 8009312:	4602      	mov	r2, r0
 8009314:	460b      	mov	r3, r1
 8009316:	4610      	mov	r0, r2
 8009318:	4619      	mov	r1, r3
 800931a:	f04f 0200 	mov.w	r2, #0
 800931e:	f04f 0300 	mov.w	r3, #0
 8009322:	020b      	lsls	r3, r1, #8
 8009324:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8009328:	0202      	lsls	r2, r0, #8
 800932a:	6979      	ldr	r1, [r7, #20]
 800932c:	6849      	ldr	r1, [r1, #4]
 800932e:	0849      	lsrs	r1, r1, #1
 8009330:	2000      	movs	r0, #0
 8009332:	460c      	mov	r4, r1
 8009334:	4605      	mov	r5, r0
 8009336:	eb12 0804 	adds.w	r8, r2, r4
 800933a:	eb43 0905 	adc.w	r9, r3, r5
 800933e:	697b      	ldr	r3, [r7, #20]
 8009340:	685b      	ldr	r3, [r3, #4]
 8009342:	2200      	movs	r2, #0
 8009344:	469a      	mov	sl, r3
 8009346:	4693      	mov	fp, r2
 8009348:	4652      	mov	r2, sl
 800934a:	465b      	mov	r3, fp
 800934c:	4640      	mov	r0, r8
 800934e:	4649      	mov	r1, r9
 8009350:	f7f6 ffc2 	bl	80002d8 <__aeabi_uldivmod>
 8009354:	4602      	mov	r2, r0
 8009356:	460b      	mov	r3, r1
 8009358:	4613      	mov	r3, r2
 800935a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800935c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800935e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009362:	d308      	bcc.n	8009376 <UART_SetConfig+0x79a>
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800936a:	d204      	bcs.n	8009376 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800936c:	697b      	ldr	r3, [r7, #20]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009372:	60da      	str	r2, [r3, #12]
 8009374:	e17c      	b.n	8009670 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800937c:	e178      	b.n	8009670 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800937e:	697b      	ldr	r3, [r7, #20]
 8009380:	69db      	ldr	r3, [r3, #28]
 8009382:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009386:	f040 80c5 	bne.w	8009514 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800938a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800938e:	2b20      	cmp	r3, #32
 8009390:	dc48      	bgt.n	8009424 <UART_SetConfig+0x848>
 8009392:	2b00      	cmp	r3, #0
 8009394:	db7b      	blt.n	800948e <UART_SetConfig+0x8b2>
 8009396:	2b20      	cmp	r3, #32
 8009398:	d879      	bhi.n	800948e <UART_SetConfig+0x8b2>
 800939a:	a201      	add	r2, pc, #4	; (adr r2, 80093a0 <UART_SetConfig+0x7c4>)
 800939c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093a0:	0800942b 	.word	0x0800942b
 80093a4:	08009433 	.word	0x08009433
 80093a8:	0800948f 	.word	0x0800948f
 80093ac:	0800948f 	.word	0x0800948f
 80093b0:	0800943b 	.word	0x0800943b
 80093b4:	0800948f 	.word	0x0800948f
 80093b8:	0800948f 	.word	0x0800948f
 80093bc:	0800948f 	.word	0x0800948f
 80093c0:	0800944b 	.word	0x0800944b
 80093c4:	0800948f 	.word	0x0800948f
 80093c8:	0800948f 	.word	0x0800948f
 80093cc:	0800948f 	.word	0x0800948f
 80093d0:	0800948f 	.word	0x0800948f
 80093d4:	0800948f 	.word	0x0800948f
 80093d8:	0800948f 	.word	0x0800948f
 80093dc:	0800948f 	.word	0x0800948f
 80093e0:	0800945b 	.word	0x0800945b
 80093e4:	0800948f 	.word	0x0800948f
 80093e8:	0800948f 	.word	0x0800948f
 80093ec:	0800948f 	.word	0x0800948f
 80093f0:	0800948f 	.word	0x0800948f
 80093f4:	0800948f 	.word	0x0800948f
 80093f8:	0800948f 	.word	0x0800948f
 80093fc:	0800948f 	.word	0x0800948f
 8009400:	0800948f 	.word	0x0800948f
 8009404:	0800948f 	.word	0x0800948f
 8009408:	0800948f 	.word	0x0800948f
 800940c:	0800948f 	.word	0x0800948f
 8009410:	0800948f 	.word	0x0800948f
 8009414:	0800948f 	.word	0x0800948f
 8009418:	0800948f 	.word	0x0800948f
 800941c:	0800948f 	.word	0x0800948f
 8009420:	08009481 	.word	0x08009481
 8009424:	2b40      	cmp	r3, #64	; 0x40
 8009426:	d02e      	beq.n	8009486 <UART_SetConfig+0x8aa>
 8009428:	e031      	b.n	800948e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800942a:	f7fd f853 	bl	80064d4 <HAL_RCC_GetPCLK1Freq>
 800942e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009430:	e033      	b.n	800949a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009432:	f7fd f865 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 8009436:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8009438:	e02f      	b.n	800949a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800943a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800943e:	4618      	mov	r0, r3
 8009440:	f7fd ffd0 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8009444:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009446:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009448:	e027      	b.n	800949a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800944a:	f107 0318 	add.w	r3, r7, #24
 800944e:	4618      	mov	r0, r3
 8009450:	f7fe f91c 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8009454:	69fb      	ldr	r3, [r7, #28]
 8009456:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009458:	e01f      	b.n	800949a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800945a:	4b2d      	ldr	r3, [pc, #180]	; (8009510 <UART_SetConfig+0x934>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	f003 0320 	and.w	r3, r3, #32
 8009462:	2b00      	cmp	r3, #0
 8009464:	d009      	beq.n	800947a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8009466:	4b2a      	ldr	r3, [pc, #168]	; (8009510 <UART_SetConfig+0x934>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	08db      	lsrs	r3, r3, #3
 800946c:	f003 0303 	and.w	r3, r3, #3
 8009470:	4a24      	ldr	r2, [pc, #144]	; (8009504 <UART_SetConfig+0x928>)
 8009472:	fa22 f303 	lsr.w	r3, r2, r3
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009478:	e00f      	b.n	800949a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800947a:	4b22      	ldr	r3, [pc, #136]	; (8009504 <UART_SetConfig+0x928>)
 800947c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800947e:	e00c      	b.n	800949a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8009480:	4b21      	ldr	r3, [pc, #132]	; (8009508 <UART_SetConfig+0x92c>)
 8009482:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009484:	e009      	b.n	800949a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800948a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800948c:	e005      	b.n	800949a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800948e:	2300      	movs	r3, #0
 8009490:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009498:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800949a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800949c:	2b00      	cmp	r3, #0
 800949e:	f000 80e7 	beq.w	8009670 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80094a2:	697b      	ldr	r3, [r7, #20]
 80094a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094a6:	4a19      	ldr	r2, [pc, #100]	; (800950c <UART_SetConfig+0x930>)
 80094a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80094ac:	461a      	mov	r2, r3
 80094ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80094b4:	005a      	lsls	r2, r3, #1
 80094b6:	697b      	ldr	r3, [r7, #20]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	085b      	lsrs	r3, r3, #1
 80094bc:	441a      	add	r2, r3
 80094be:	697b      	ldr	r3, [r7, #20]
 80094c0:	685b      	ldr	r3, [r3, #4]
 80094c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80094c6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ca:	2b0f      	cmp	r3, #15
 80094cc:	d916      	bls.n	80094fc <UART_SetConfig+0x920>
 80094ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094d4:	d212      	bcs.n	80094fc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80094d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d8:	b29b      	uxth	r3, r3
 80094da:	f023 030f 	bic.w	r3, r3, #15
 80094de:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80094e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094e2:	085b      	lsrs	r3, r3, #1
 80094e4:	b29b      	uxth	r3, r3
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	b29a      	uxth	r2, r3
 80094ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80094ee:	4313      	orrs	r3, r2
 80094f0:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80094f2:	697b      	ldr	r3, [r7, #20]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80094f8:	60da      	str	r2, [r3, #12]
 80094fa:	e0b9      	b.n	8009670 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80094fc:	2301      	movs	r3, #1
 80094fe:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8009502:	e0b5      	b.n	8009670 <UART_SetConfig+0xa94>
 8009504:	03d09000 	.word	0x03d09000
 8009508:	003d0900 	.word	0x003d0900
 800950c:	0800a4bc 	.word	0x0800a4bc
 8009510:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8009514:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8009518:	2b20      	cmp	r3, #32
 800951a:	dc49      	bgt.n	80095b0 <UART_SetConfig+0x9d4>
 800951c:	2b00      	cmp	r3, #0
 800951e:	db7c      	blt.n	800961a <UART_SetConfig+0xa3e>
 8009520:	2b20      	cmp	r3, #32
 8009522:	d87a      	bhi.n	800961a <UART_SetConfig+0xa3e>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <UART_SetConfig+0x950>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	080095b7 	.word	0x080095b7
 8009530:	080095bf 	.word	0x080095bf
 8009534:	0800961b 	.word	0x0800961b
 8009538:	0800961b 	.word	0x0800961b
 800953c:	080095c7 	.word	0x080095c7
 8009540:	0800961b 	.word	0x0800961b
 8009544:	0800961b 	.word	0x0800961b
 8009548:	0800961b 	.word	0x0800961b
 800954c:	080095d7 	.word	0x080095d7
 8009550:	0800961b 	.word	0x0800961b
 8009554:	0800961b 	.word	0x0800961b
 8009558:	0800961b 	.word	0x0800961b
 800955c:	0800961b 	.word	0x0800961b
 8009560:	0800961b 	.word	0x0800961b
 8009564:	0800961b 	.word	0x0800961b
 8009568:	0800961b 	.word	0x0800961b
 800956c:	080095e7 	.word	0x080095e7
 8009570:	0800961b 	.word	0x0800961b
 8009574:	0800961b 	.word	0x0800961b
 8009578:	0800961b 	.word	0x0800961b
 800957c:	0800961b 	.word	0x0800961b
 8009580:	0800961b 	.word	0x0800961b
 8009584:	0800961b 	.word	0x0800961b
 8009588:	0800961b 	.word	0x0800961b
 800958c:	0800961b 	.word	0x0800961b
 8009590:	0800961b 	.word	0x0800961b
 8009594:	0800961b 	.word	0x0800961b
 8009598:	0800961b 	.word	0x0800961b
 800959c:	0800961b 	.word	0x0800961b
 80095a0:	0800961b 	.word	0x0800961b
 80095a4:	0800961b 	.word	0x0800961b
 80095a8:	0800961b 	.word	0x0800961b
 80095ac:	0800960d 	.word	0x0800960d
 80095b0:	2b40      	cmp	r3, #64	; 0x40
 80095b2:	d02e      	beq.n	8009612 <UART_SetConfig+0xa36>
 80095b4:	e031      	b.n	800961a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095b6:	f7fc ff8d 	bl	80064d4 <HAL_RCC_GetPCLK1Freq>
 80095ba:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095bc:	e033      	b.n	8009626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095be:	f7fc ff9f 	bl	8006500 <HAL_RCC_GetPCLK2Freq>
 80095c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80095c4:	e02f      	b.n	8009626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80095c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80095ca:	4618      	mov	r0, r3
 80095cc:	f7fd ff0a 	bl	80073e4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80095d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095d4:	e027      	b.n	8009626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80095d6:	f107 0318 	add.w	r3, r7, #24
 80095da:	4618      	mov	r0, r3
 80095dc:	f7fe f856 	bl	800768c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80095e4:	e01f      	b.n	8009626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80095e6:	4b2d      	ldr	r3, [pc, #180]	; (800969c <UART_SetConfig+0xac0>)
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f003 0320 	and.w	r3, r3, #32
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d009      	beq.n	8009606 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80095f2:	4b2a      	ldr	r3, [pc, #168]	; (800969c <UART_SetConfig+0xac0>)
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	08db      	lsrs	r3, r3, #3
 80095f8:	f003 0303 	and.w	r3, r3, #3
 80095fc:	4a28      	ldr	r2, [pc, #160]	; (80096a0 <UART_SetConfig+0xac4>)
 80095fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009602:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8009604:	e00f      	b.n	8009626 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8009606:	4b26      	ldr	r3, [pc, #152]	; (80096a0 <UART_SetConfig+0xac4>)
 8009608:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800960a:	e00c      	b.n	8009626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800960c:	4b25      	ldr	r3, [pc, #148]	; (80096a4 <UART_SetConfig+0xac8>)
 800960e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009610:	e009      	b.n	8009626 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009616:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8009618:	e005      	b.n	8009626 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800961a:	2300      	movs	r3, #0
 800961c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800961e:	2301      	movs	r3, #1
 8009620:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8009624:	bf00      	nop
    }

    if (pclk != 0U)
 8009626:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009628:	2b00      	cmp	r3, #0
 800962a:	d021      	beq.n	8009670 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800962c:	697b      	ldr	r3, [r7, #20]
 800962e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009630:	4a1d      	ldr	r2, [pc, #116]	; (80096a8 <UART_SetConfig+0xacc>)
 8009632:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8009636:	461a      	mov	r2, r3
 8009638:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800963a:	fbb3 f2f2 	udiv	r2, r3, r2
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	685b      	ldr	r3, [r3, #4]
 8009642:	085b      	lsrs	r3, r3, #1
 8009644:	441a      	add	r2, r3
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	685b      	ldr	r3, [r3, #4]
 800964a:	fbb2 f3f3 	udiv	r3, r2, r3
 800964e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009652:	2b0f      	cmp	r3, #15
 8009654:	d909      	bls.n	800966a <UART_SetConfig+0xa8e>
 8009656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800965c:	d205      	bcs.n	800966a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800965e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009660:	b29a      	uxth	r2, r3
 8009662:	697b      	ldr	r3, [r7, #20]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	60da      	str	r2, [r3, #12]
 8009668:	e002      	b.n	8009670 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800966a:	2301      	movs	r3, #1
 800966c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8009670:	697b      	ldr	r3, [r7, #20]
 8009672:	2201      	movs	r2, #1
 8009674:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8009678:	697b      	ldr	r3, [r7, #20]
 800967a:	2201      	movs	r2, #1
 800967c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009680:	697b      	ldr	r3, [r7, #20]
 8009682:	2200      	movs	r2, #0
 8009684:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	2200      	movs	r2, #0
 800968a:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800968c:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8009690:	4618      	mov	r0, r3
 8009692:	3748      	adds	r7, #72	; 0x48
 8009694:	46bd      	mov	sp, r7
 8009696:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800969a:	bf00      	nop
 800969c:	58024400 	.word	0x58024400
 80096a0:	03d09000 	.word	0x03d09000
 80096a4:	003d0900 	.word	0x003d0900
 80096a8:	0800a4bc 	.word	0x0800a4bc

080096ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80096ac:	b480      	push	{r7}
 80096ae:	b083      	sub	sp, #12
 80096b0:	af00      	add	r7, sp, #0
 80096b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d00a      	beq.n	80096d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	685b      	ldr	r3, [r3, #4]
 80096c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	430a      	orrs	r2, r1
 80096d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096da:	f003 0302 	and.w	r3, r3, #2
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d00a      	beq.n	80096f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	430a      	orrs	r2, r1
 80096f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fc:	f003 0304 	and.w	r3, r3, #4
 8009700:	2b00      	cmp	r3, #0
 8009702:	d00a      	beq.n	800971a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	430a      	orrs	r2, r1
 8009718:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800971e:	f003 0308 	and.w	r3, r3, #8
 8009722:	2b00      	cmp	r3, #0
 8009724:	d00a      	beq.n	800973c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	685b      	ldr	r3, [r3, #4]
 800972c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	430a      	orrs	r2, r1
 800973a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009740:	f003 0310 	and.w	r3, r3, #16
 8009744:	2b00      	cmp	r3, #0
 8009746:	d00a      	beq.n	800975e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	430a      	orrs	r2, r1
 800975c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b00      	cmp	r3, #0
 8009768:	d00a      	beq.n	8009780 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	430a      	orrs	r2, r1
 800977e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009788:	2b00      	cmp	r3, #0
 800978a:	d01a      	beq.n	80097c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	430a      	orrs	r2, r1
 80097a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80097a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80097aa:	d10a      	bne.n	80097c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	685b      	ldr	r3, [r3, #4]
 80097b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	430a      	orrs	r2, r1
 80097c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d00a      	beq.n	80097e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	685b      	ldr	r3, [r3, #4]
 80097d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	430a      	orrs	r2, r1
 80097e2:	605a      	str	r2, [r3, #4]
  }
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr

080097f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b086      	sub	sp, #24
 80097f4:	af02      	add	r7, sp, #8
 80097f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009800:	f7f8 fb54 	bl	8001eac <HAL_GetTick>
 8009804:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	f003 0308 	and.w	r3, r3, #8
 8009810:	2b08      	cmp	r3, #8
 8009812:	d10e      	bne.n	8009832 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009814:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009818:	9300      	str	r3, [sp, #0]
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009822:	6878      	ldr	r0, [r7, #4]
 8009824:	f000 f82f 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 8009828:	4603      	mov	r3, r0
 800982a:	2b00      	cmp	r3, #0
 800982c:	d001      	beq.n	8009832 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800982e:	2303      	movs	r3, #3
 8009830:	e025      	b.n	800987e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 0304 	and.w	r3, r3, #4
 800983c:	2b04      	cmp	r3, #4
 800983e:	d10e      	bne.n	800985e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009840:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009844:	9300      	str	r3, [sp, #0]
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2200      	movs	r2, #0
 800984a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800984e:	6878      	ldr	r0, [r7, #4]
 8009850:	f000 f819 	bl	8009886 <UART_WaitOnFlagUntilTimeout>
 8009854:	4603      	mov	r3, r0
 8009856:	2b00      	cmp	r3, #0
 8009858:	d001      	beq.n	800985e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800985a:	2303      	movs	r3, #3
 800985c:	e00f      	b.n	800987e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2220      	movs	r2, #32
 8009862:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2200      	movs	r2, #0
 8009872:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	2200      	movs	r2, #0
 8009878:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800987c:	2300      	movs	r3, #0
}
 800987e:	4618      	mov	r0, r3
 8009880:	3710      	adds	r7, #16
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}

08009886 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009886:	b580      	push	{r7, lr}
 8009888:	b09c      	sub	sp, #112	; 0x70
 800988a:	af00      	add	r7, sp, #0
 800988c:	60f8      	str	r0, [r7, #12]
 800988e:	60b9      	str	r1, [r7, #8]
 8009890:	603b      	str	r3, [r7, #0]
 8009892:	4613      	mov	r3, r2
 8009894:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009896:	e0a9      	b.n	80099ec <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009898:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800989a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800989e:	f000 80a5 	beq.w	80099ec <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80098a2:	f7f8 fb03 	bl	8001eac <HAL_GetTick>
 80098a6:	4602      	mov	r2, r0
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	1ad3      	subs	r3, r2, r3
 80098ac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80098ae:	429a      	cmp	r2, r3
 80098b0:	d302      	bcc.n	80098b8 <UART_WaitOnFlagUntilTimeout+0x32>
 80098b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80098b4:	2b00      	cmp	r3, #0
 80098b6:	d140      	bne.n	800993a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80098c0:	e853 3f00 	ldrex	r3, [r3]
 80098c4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80098c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80098c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098cc:	667b      	str	r3, [r7, #100]	; 0x64
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	461a      	mov	r2, r3
 80098d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80098d6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80098d8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80098da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80098dc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80098de:	e841 2300 	strex	r3, r2, [r1]
 80098e2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80098e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80098e6:	2b00      	cmp	r3, #0
 80098e8:	d1e6      	bne.n	80098b8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	3308      	adds	r3, #8
 80098f0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80098f4:	e853 3f00 	ldrex	r3, [r3]
 80098f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80098fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80098fc:	f023 0301 	bic.w	r3, r3, #1
 8009900:	663b      	str	r3, [r7, #96]	; 0x60
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	3308      	adds	r3, #8
 8009908:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800990a:	64ba      	str	r2, [r7, #72]	; 0x48
 800990c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009910:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009912:	e841 2300 	strex	r3, r2, [r1]
 8009916:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009918:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800991a:	2b00      	cmp	r3, #0
 800991c:	d1e5      	bne.n	80098ea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	2220      	movs	r2, #32
 8009922:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	2220      	movs	r2, #32
 800992a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	2200      	movs	r2, #0
 8009932:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8009936:	2303      	movs	r3, #3
 8009938:	e069      	b.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	f003 0304 	and.w	r3, r3, #4
 8009944:	2b00      	cmp	r3, #0
 8009946:	d051      	beq.n	80099ec <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	69db      	ldr	r3, [r3, #28]
 800994e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009952:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009956:	d149      	bne.n	80099ec <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009960:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800996a:	e853 3f00 	ldrex	r3, [r3]
 800996e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009972:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009976:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	461a      	mov	r2, r3
 800997e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009980:	637b      	str	r3, [r7, #52]	; 0x34
 8009982:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009986:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009988:	e841 2300 	strex	r3, r2, [r1]
 800998c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800998e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009990:	2b00      	cmp	r3, #0
 8009992:	d1e6      	bne.n	8009962 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	3308      	adds	r3, #8
 800999a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800999c:	697b      	ldr	r3, [r7, #20]
 800999e:	e853 3f00 	ldrex	r3, [r3]
 80099a2:	613b      	str	r3, [r7, #16]
   return(result);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f023 0301 	bic.w	r3, r3, #1
 80099aa:	66bb      	str	r3, [r7, #104]	; 0x68
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3308      	adds	r3, #8
 80099b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80099b4:	623a      	str	r2, [r7, #32]
 80099b6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b8:	69f9      	ldr	r1, [r7, #28]
 80099ba:	6a3a      	ldr	r2, [r7, #32]
 80099bc:	e841 2300 	strex	r3, r2, [r1]
 80099c0:	61bb      	str	r3, [r7, #24]
   return(result);
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1e5      	bne.n	8009994 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2220      	movs	r2, #32
 80099cc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	2220      	movs	r2, #32
 80099d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	2220      	movs	r2, #32
 80099dc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2200      	movs	r2, #0
 80099e4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 80099e8:	2303      	movs	r3, #3
 80099ea:	e010      	b.n	8009a0e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	69da      	ldr	r2, [r3, #28]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	4013      	ands	r3, r2
 80099f6:	68ba      	ldr	r2, [r7, #8]
 80099f8:	429a      	cmp	r2, r3
 80099fa:	bf0c      	ite	eq
 80099fc:	2301      	moveq	r3, #1
 80099fe:	2300      	movne	r3, #0
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	461a      	mov	r2, r3
 8009a04:	79fb      	ldrb	r3, [r7, #7]
 8009a06:	429a      	cmp	r2, r3
 8009a08:	f43f af46 	beq.w	8009898 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3770      	adds	r7, #112	; 0x70
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
	...

08009a18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009a18:	b480      	push	{r7}
 8009a1a:	b095      	sub	sp, #84	; 0x54
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a28:	e853 3f00 	ldrex	r3, [r3]
 8009a2c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a3e:	643b      	str	r3, [r7, #64]	; 0x40
 8009a40:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a42:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009a44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009a46:	e841 2300 	strex	r3, r2, [r1]
 8009a4a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1e6      	bne.n	8009a20 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	3308      	adds	r3, #8
 8009a58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a5a:	6a3b      	ldr	r3, [r7, #32]
 8009a5c:	e853 3f00 	ldrex	r3, [r3]
 8009a60:	61fb      	str	r3, [r7, #28]
   return(result);
 8009a62:	69fa      	ldr	r2, [r7, #28]
 8009a64:	4b1e      	ldr	r3, [pc, #120]	; (8009ae0 <UART_EndRxTransfer+0xc8>)
 8009a66:	4013      	ands	r3, r2
 8009a68:	64bb      	str	r3, [r7, #72]	; 0x48
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	3308      	adds	r3, #8
 8009a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009a72:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009a74:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a76:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009a78:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009a7a:	e841 2300 	strex	r3, r2, [r1]
 8009a7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d1e5      	bne.n	8009a52 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a8a:	2b01      	cmp	r3, #1
 8009a8c:	d118      	bne.n	8009ac0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	e853 3f00 	ldrex	r3, [r3]
 8009a9a:	60bb      	str	r3, [r7, #8]
   return(result);
 8009a9c:	68bb      	ldr	r3, [r7, #8]
 8009a9e:	f023 0310 	bic.w	r3, r3, #16
 8009aa2:	647b      	str	r3, [r7, #68]	; 0x44
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	461a      	mov	r2, r3
 8009aaa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009aac:	61bb      	str	r3, [r7, #24]
 8009aae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ab0:	6979      	ldr	r1, [r7, #20]
 8009ab2:	69ba      	ldr	r2, [r7, #24]
 8009ab4:	e841 2300 	strex	r3, r2, [r1]
 8009ab8:	613b      	str	r3, [r7, #16]
   return(result);
 8009aba:	693b      	ldr	r3, [r7, #16]
 8009abc:	2b00      	cmp	r3, #0
 8009abe:	d1e6      	bne.n	8009a8e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2220      	movs	r2, #32
 8009ac4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2200      	movs	r2, #0
 8009acc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8009ad4:	bf00      	nop
 8009ad6:	3754      	adds	r7, #84	; 0x54
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ade:	4770      	bx	lr
 8009ae0:	effffffe 	.word	0xeffffffe

08009ae4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b084      	sub	sp, #16
 8009ae8:	af00      	add	r7, sp, #0
 8009aea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009af0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	2200      	movs	r2, #0
 8009af6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2200      	movs	r2, #0
 8009afe:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f7ff f854 	bl	8008bb0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b08:	bf00      	nop
 8009b0a:	3710      	adds	r7, #16
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	bd80      	pop	{r7, pc}

08009b10 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009b10:	b580      	push	{r7, lr}
 8009b12:	b088      	sub	sp, #32
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	e853 3f00 	ldrex	r3, [r3]
 8009b24:	60bb      	str	r3, [r7, #8]
   return(result);
 8009b26:	68bb      	ldr	r3, [r7, #8]
 8009b28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b2c:	61fb      	str	r3, [r7, #28]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	461a      	mov	r2, r3
 8009b34:	69fb      	ldr	r3, [r7, #28]
 8009b36:	61bb      	str	r3, [r7, #24]
 8009b38:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b3a:	6979      	ldr	r1, [r7, #20]
 8009b3c:	69ba      	ldr	r2, [r7, #24]
 8009b3e:	e841 2300 	strex	r3, r2, [r1]
 8009b42:	613b      	str	r3, [r7, #16]
   return(result);
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d1e6      	bne.n	8009b18 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2220      	movs	r2, #32
 8009b4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f7ff f81f 	bl	8008b9c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009b5e:	bf00      	nop
 8009b60:	3720      	adds	r7, #32
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}

08009b66 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b66:	b480      	push	{r7}
 8009b68:	b083      	sub	sp, #12
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b6e:	bf00      	nop
 8009b70:	370c      	adds	r7, #12
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr

08009b7a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b7a:	b480      	push	{r7}
 8009b7c:	b083      	sub	sp, #12
 8009b7e:	af00      	add	r7, sp, #0
 8009b80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b82:	bf00      	nop
 8009b84:	370c      	adds	r7, #12
 8009b86:	46bd      	mov	sp, r7
 8009b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8c:	4770      	bx	lr

08009b8e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b8e:	b480      	push	{r7}
 8009b90:	b083      	sub	sp, #12
 8009b92:	af00      	add	r7, sp, #0
 8009b94:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b96:	bf00      	nop
 8009b98:	370c      	adds	r7, #12
 8009b9a:	46bd      	mov	sp, r7
 8009b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba0:	4770      	bx	lr

08009ba2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009ba2:	b480      	push	{r7}
 8009ba4:	b085      	sub	sp, #20
 8009ba6:	af00      	add	r7, sp, #0
 8009ba8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d101      	bne.n	8009bb8 <HAL_UARTEx_DisableFifoMode+0x16>
 8009bb4:	2302      	movs	r3, #2
 8009bb6:	e027      	b.n	8009c08 <HAL_UARTEx_DisableFifoMode+0x66>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2201      	movs	r2, #1
 8009bbc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2224      	movs	r2, #36	; 0x24
 8009bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	f022 0201 	bic.w	r2, r2, #1
 8009bde:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009be6:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	68fa      	ldr	r2, [r7, #12]
 8009bf4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	2200      	movs	r2, #0
 8009c02:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c06:	2300      	movs	r3, #0
}
 8009c08:	4618      	mov	r0, r3
 8009c0a:	3714      	adds	r7, #20
 8009c0c:	46bd      	mov	sp, r7
 8009c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c12:	4770      	bx	lr

08009c14 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c14:	b580      	push	{r7, lr}
 8009c16:	b084      	sub	sp, #16
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e02d      	b.n	8009c88 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2224      	movs	r2, #36	; 0x24
 8009c38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	681a      	ldr	r2, [r3, #0]
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f022 0201 	bic.w	r2, r2, #1
 8009c52:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	683a      	ldr	r2, [r7, #0]
 8009c64:	430a      	orrs	r2, r1
 8009c66:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c68:	6878      	ldr	r0, [r7, #4]
 8009c6a:	f000 f84f 	bl	8009d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	68fa      	ldr	r2, [r7, #12]
 8009c74:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	2220      	movs	r2, #32
 8009c7a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c86:	2300      	movs	r3, #0
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3710      	adds	r7, #16
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	bd80      	pop	{r7, pc}

08009c90 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c90:	b580      	push	{r7, lr}
 8009c92:	b084      	sub	sp, #16
 8009c94:	af00      	add	r7, sp, #0
 8009c96:	6078      	str	r0, [r7, #4]
 8009c98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009ca0:	2b01      	cmp	r3, #1
 8009ca2:	d101      	bne.n	8009ca8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009ca4:	2302      	movs	r3, #2
 8009ca6:	e02d      	b.n	8009d04 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2201      	movs	r2, #1
 8009cac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2224      	movs	r2, #36	; 0x24
 8009cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	681a      	ldr	r2, [r3, #0]
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f022 0201 	bic.w	r2, r2, #1
 8009cce:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	689b      	ldr	r3, [r3, #8]
 8009cd6:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	430a      	orrs	r2, r1
 8009ce2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009ce4:	6878      	ldr	r0, [r7, #4]
 8009ce6:	f000 f811 	bl	8009d0c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	68fa      	ldr	r2, [r7, #12]
 8009cf0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2220      	movs	r2, #32
 8009cf6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cfa:	687b      	ldr	r3, [r7, #4]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009d02:	2300      	movs	r3, #0
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3710      	adds	r7, #16
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009d0c:	b480      	push	{r7}
 8009d0e:	b085      	sub	sp, #20
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d108      	bne.n	8009d2e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2201      	movs	r2, #1
 8009d20:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2201      	movs	r2, #1
 8009d28:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d2c:	e031      	b.n	8009d92 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d2e:	2310      	movs	r3, #16
 8009d30:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d32:	2310      	movs	r3, #16
 8009d34:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	689b      	ldr	r3, [r3, #8]
 8009d3c:	0e5b      	lsrs	r3, r3, #25
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	689b      	ldr	r3, [r3, #8]
 8009d4c:	0f5b      	lsrs	r3, r3, #29
 8009d4e:	b2db      	uxtb	r3, r3
 8009d50:	f003 0307 	and.w	r3, r3, #7
 8009d54:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d56:	7bbb      	ldrb	r3, [r7, #14]
 8009d58:	7b3a      	ldrb	r2, [r7, #12]
 8009d5a:	4911      	ldr	r1, [pc, #68]	; (8009da0 <UARTEx_SetNbDataToProcess+0x94>)
 8009d5c:	5c8a      	ldrb	r2, [r1, r2]
 8009d5e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d62:	7b3a      	ldrb	r2, [r7, #12]
 8009d64:	490f      	ldr	r1, [pc, #60]	; (8009da4 <UARTEx_SetNbDataToProcess+0x98>)
 8009d66:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d68:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d6c:	b29a      	uxth	r2, r3
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d74:	7bfb      	ldrb	r3, [r7, #15]
 8009d76:	7b7a      	ldrb	r2, [r7, #13]
 8009d78:	4909      	ldr	r1, [pc, #36]	; (8009da0 <UARTEx_SetNbDataToProcess+0x94>)
 8009d7a:	5c8a      	ldrb	r2, [r1, r2]
 8009d7c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d80:	7b7a      	ldrb	r2, [r7, #13]
 8009d82:	4908      	ldr	r1, [pc, #32]	; (8009da4 <UARTEx_SetNbDataToProcess+0x98>)
 8009d84:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d86:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d8a:	b29a      	uxth	r2, r3
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d92:	bf00      	nop
 8009d94:	3714      	adds	r7, #20
 8009d96:	46bd      	mov	sp, r7
 8009d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	0800a4d4 	.word	0x0800a4d4
 8009da4:	0800a4dc 	.word	0x0800a4dc

08009da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009da8:	b084      	sub	sp, #16
 8009daa:	b580      	push	{r7, lr}
 8009dac:	b084      	sub	sp, #16
 8009dae:	af00      	add	r7, sp, #0
 8009db0:	6078      	str	r0, [r7, #4]
 8009db2:	f107 001c 	add.w	r0, r7, #28
 8009db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d120      	bne.n	8009e02 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	68da      	ldr	r2, [r3, #12]
 8009dd0:	4b2a      	ldr	r3, [pc, #168]	; (8009e7c <USB_CoreInit+0xd4>)
 8009dd2:	4013      	ands	r3, r2
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	68db      	ldr	r3, [r3, #12]
 8009ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009de6:	2b01      	cmp	r3, #1
 8009de8:	d105      	bne.n	8009df6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	68db      	ldr	r3, [r3, #12]
 8009dee:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009df6:	6878      	ldr	r0, [r7, #4]
 8009df8:	f000 faac 	bl	800a354 <USB_CoreReset>
 8009dfc:	4603      	mov	r3, r0
 8009dfe:	73fb      	strb	r3, [r7, #15]
 8009e00:	e01a      	b.n	8009e38 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	68db      	ldr	r3, [r3, #12]
 8009e06:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 faa0 	bl	800a354 <USB_CoreReset>
 8009e14:	4603      	mov	r3, r0
 8009e16:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009e18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d106      	bne.n	8009e2c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e22:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	639a      	str	r2, [r3, #56]	; 0x38
 8009e2a:	e005      	b.n	8009e38 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009e30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009e38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e3a:	2b01      	cmp	r3, #1
 8009e3c:	d116      	bne.n	8009e6c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009e42:	b29a      	uxth	r2, r3
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009e4c:	4b0c      	ldr	r3, [pc, #48]	; (8009e80 <USB_CoreInit+0xd8>)
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	687a      	ldr	r2, [r7, #4]
 8009e52:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	689b      	ldr	r3, [r3, #8]
 8009e58:	f043 0206 	orr.w	r2, r3, #6
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	689b      	ldr	r3, [r3, #8]
 8009e64:	f043 0220 	orr.w	r2, r3, #32
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009e6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3710      	adds	r7, #16
 8009e72:	46bd      	mov	sp, r7
 8009e74:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e78:	b004      	add	sp, #16
 8009e7a:	4770      	bx	lr
 8009e7c:	ffbdffbf 	.word	0xffbdffbf
 8009e80:	03ee0000 	.word	0x03ee0000

08009e84 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009e84:	b480      	push	{r7}
 8009e86:	b083      	sub	sp, #12
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	689b      	ldr	r3, [r3, #8]
 8009e90:	f023 0201 	bic.w	r2, r3, #1
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009e98:	2300      	movs	r3, #0
}
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	370c      	adds	r7, #12
 8009e9e:	46bd      	mov	sp, r7
 8009ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea4:	4770      	bx	lr

08009ea6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
 8009eae:	460b      	mov	r3, r1
 8009eb0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	68db      	ldr	r3, [r3, #12]
 8009eba:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009ec2:	78fb      	ldrb	r3, [r7, #3]
 8009ec4:	2b01      	cmp	r3, #1
 8009ec6:	d115      	bne.n	8009ef4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	68db      	ldr	r3, [r3, #12]
 8009ecc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009ed4:	2001      	movs	r0, #1
 8009ed6:	f7f7 fff5 	bl	8001ec4 <HAL_Delay>
      ms++;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	3301      	adds	r3, #1
 8009ede:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fa29 	bl	800a338 <USB_GetMode>
 8009ee6:	4603      	mov	r3, r0
 8009ee8:	2b01      	cmp	r3, #1
 8009eea:	d01e      	beq.n	8009f2a <USB_SetCurrentMode+0x84>
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	2b31      	cmp	r3, #49	; 0x31
 8009ef0:	d9f0      	bls.n	8009ed4 <USB_SetCurrentMode+0x2e>
 8009ef2:	e01a      	b.n	8009f2a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009ef4:	78fb      	ldrb	r3, [r7, #3]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d115      	bne.n	8009f26 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	68db      	ldr	r3, [r3, #12]
 8009efe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8009f06:	2001      	movs	r0, #1
 8009f08:	f7f7 ffdc 	bl	8001ec4 <HAL_Delay>
      ms++;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8009f12:	6878      	ldr	r0, [r7, #4]
 8009f14:	f000 fa10 	bl	800a338 <USB_GetMode>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d005      	beq.n	8009f2a <USB_SetCurrentMode+0x84>
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	2b31      	cmp	r3, #49	; 0x31
 8009f22:	d9f0      	bls.n	8009f06 <USB_SetCurrentMode+0x60>
 8009f24:	e001      	b.n	8009f2a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e005      	b.n	8009f36 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8009f2a:	68fb      	ldr	r3, [r7, #12]
 8009f2c:	2b32      	cmp	r3, #50	; 0x32
 8009f2e:	d101      	bne.n	8009f34 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009f30:	2301      	movs	r3, #1
 8009f32:	e000      	b.n	8009f36 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009f34:	2300      	movs	r3, #0
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3710      	adds	r7, #16
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
	...

08009f40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009f40:	b084      	sub	sp, #16
 8009f42:	b580      	push	{r7, lr}
 8009f44:	b086      	sub	sp, #24
 8009f46:	af00      	add	r7, sp, #0
 8009f48:	6078      	str	r0, [r7, #4]
 8009f4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8009f4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009f52:	2300      	movs	r3, #0
 8009f54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8009f5a:	2300      	movs	r3, #0
 8009f5c:	613b      	str	r3, [r7, #16]
 8009f5e:	e009      	b.n	8009f74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8009f60:	687a      	ldr	r2, [r7, #4]
 8009f62:	693b      	ldr	r3, [r7, #16]
 8009f64:	3340      	adds	r3, #64	; 0x40
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	4413      	add	r3, r2
 8009f6a:	2200      	movs	r2, #0
 8009f6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8009f6e:	693b      	ldr	r3, [r7, #16]
 8009f70:	3301      	adds	r3, #1
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	693b      	ldr	r3, [r7, #16]
 8009f76:	2b0e      	cmp	r3, #14
 8009f78:	d9f2      	bls.n	8009f60 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8009f7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d11c      	bne.n	8009fba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009f86:	685b      	ldr	r3, [r3, #4]
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009f8e:	f043 0302 	orr.w	r3, r3, #2
 8009f92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	601a      	str	r2, [r3, #0]
 8009fb8:	e005      	b.n	8009fc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009fcc:	461a      	mov	r2, r3
 8009fce:	2300      	movs	r3, #0
 8009fd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fd8:	4619      	mov	r1, r3
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009fe0:	461a      	mov	r2, r3
 8009fe2:	680b      	ldr	r3, [r1, #0]
 8009fe4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009fe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d10c      	bne.n	800a006 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d104      	bne.n	8009ffc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	6878      	ldr	r0, [r7, #4]
 8009ff6:	f000 f965 	bl	800a2c4 <USB_SetDevSpeed>
 8009ffa:	e008      	b.n	800a00e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009ffc:	2101      	movs	r1, #1
 8009ffe:	6878      	ldr	r0, [r7, #4]
 800a000:	f000 f960 	bl	800a2c4 <USB_SetDevSpeed>
 800a004:	e003      	b.n	800a00e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a006:	2103      	movs	r1, #3
 800a008:	6878      	ldr	r0, [r7, #4]
 800a00a:	f000 f95b 	bl	800a2c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a00e:	2110      	movs	r1, #16
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	f000 f8f3 	bl	800a1fc <USB_FlushTxFifo>
 800a016:	4603      	mov	r3, r0
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d001      	beq.n	800a020 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a01c:	2301      	movs	r3, #1
 800a01e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a020:	6878      	ldr	r0, [r7, #4]
 800a022:	f000 f91f 	bl	800a264 <USB_FlushRxFifo>
 800a026:	4603      	mov	r3, r0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d001      	beq.n	800a030 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a02c:	2301      	movs	r3, #1
 800a02e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a036:	461a      	mov	r2, r3
 800a038:	2300      	movs	r3, #0
 800a03a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a042:	461a      	mov	r2, r3
 800a044:	2300      	movs	r3, #0
 800a046:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a04e:	461a      	mov	r2, r3
 800a050:	2300      	movs	r3, #0
 800a052:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a054:	2300      	movs	r3, #0
 800a056:	613b      	str	r3, [r7, #16]
 800a058:	e043      	b.n	800a0e2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a05a:	693b      	ldr	r3, [r7, #16]
 800a05c:	015a      	lsls	r2, r3, #5
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	4413      	add	r3, r2
 800a062:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a06c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a070:	d118      	bne.n	800a0a4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a072:	693b      	ldr	r3, [r7, #16]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d10a      	bne.n	800a08e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a078:	693b      	ldr	r3, [r7, #16]
 800a07a:	015a      	lsls	r2, r3, #5
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	4413      	add	r3, r2
 800a080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a084:	461a      	mov	r2, r3
 800a086:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a08a:	6013      	str	r3, [r2, #0]
 800a08c:	e013      	b.n	800a0b6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	015a      	lsls	r2, r3, #5
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4413      	add	r3, r2
 800a096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a09a:	461a      	mov	r2, r3
 800a09c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a0a0:	6013      	str	r3, [r2, #0]
 800a0a2:	e008      	b.n	800a0b6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	015a      	lsls	r2, r3, #5
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	4413      	add	r3, r2
 800a0ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0b0:	461a      	mov	r2, r3
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	015a      	lsls	r2, r3, #5
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	4413      	add	r3, r2
 800a0be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	015a      	lsls	r2, r3, #5
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	4413      	add	r3, r2
 800a0d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a0d4:	461a      	mov	r2, r3
 800a0d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a0da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0dc:	693b      	ldr	r3, [r7, #16]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	613b      	str	r3, [r7, #16]
 800a0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0e4:	693a      	ldr	r2, [r7, #16]
 800a0e6:	429a      	cmp	r2, r3
 800a0e8:	d3b7      	bcc.n	800a05a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	613b      	str	r3, [r7, #16]
 800a0ee:	e043      	b.n	800a178 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a102:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a106:	d118      	bne.n	800a13a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a108:	693b      	ldr	r3, [r7, #16]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d10a      	bne.n	800a124 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a10e:	693b      	ldr	r3, [r7, #16]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a11a:	461a      	mov	r2, r3
 800a11c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a120:	6013      	str	r3, [r2, #0]
 800a122:	e013      	b.n	800a14c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	015a      	lsls	r2, r3, #5
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	4413      	add	r3, r2
 800a12c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a130:	461a      	mov	r2, r3
 800a132:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a136:	6013      	str	r3, [r2, #0]
 800a138:	e008      	b.n	800a14c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	015a      	lsls	r2, r3, #5
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	4413      	add	r3, r2
 800a142:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a146:	461a      	mov	r2, r3
 800a148:	2300      	movs	r3, #0
 800a14a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a14c:	693b      	ldr	r3, [r7, #16]
 800a14e:	015a      	lsls	r2, r3, #5
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	4413      	add	r3, r2
 800a154:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a158:	461a      	mov	r2, r3
 800a15a:	2300      	movs	r3, #0
 800a15c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a16a:	461a      	mov	r2, r3
 800a16c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a170:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	3301      	adds	r3, #1
 800a176:	613b      	str	r3, [r7, #16]
 800a178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17a:	693a      	ldr	r2, [r7, #16]
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d3b7      	bcc.n	800a0f0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a186:	691b      	ldr	r3, [r3, #16]
 800a188:	68fa      	ldr	r2, [r7, #12]
 800a18a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a18e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a192:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2200      	movs	r2, #0
 800a198:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800a1a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800a1a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d105      	bne.n	800a1b4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	699b      	ldr	r3, [r3, #24]
 800a1ac:	f043 0210 	orr.w	r2, r3, #16
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	699a      	ldr	r2, [r3, #24]
 800a1b8:	4b0e      	ldr	r3, [pc, #56]	; (800a1f4 <USB_DevInit+0x2b4>)
 800a1ba:	4313      	orrs	r3, r2
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	f043 0208 	orr.w	r2, r3, #8
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800a1d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a1d4:	2b01      	cmp	r3, #1
 800a1d6:	d105      	bne.n	800a1e4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	699a      	ldr	r2, [r3, #24]
 800a1dc:	4b06      	ldr	r3, [pc, #24]	; (800a1f8 <USB_DevInit+0x2b8>)
 800a1de:	4313      	orrs	r3, r2
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800a1e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3718      	adds	r7, #24
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a1f0:	b004      	add	sp, #16
 800a1f2:	4770      	bx	lr
 800a1f4:	803c3800 	.word	0x803c3800
 800a1f8:	40000004 	.word	0x40000004

0800a1fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800a1fc:	b480      	push	{r7}
 800a1fe:	b085      	sub	sp, #20
 800a200:	af00      	add	r7, sp, #0
 800a202:	6078      	str	r0, [r7, #4]
 800a204:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a206:	2300      	movs	r3, #0
 800a208:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3301      	adds	r3, #1
 800a20e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	4a13      	ldr	r2, [pc, #76]	; (800a260 <USB_FlushTxFifo+0x64>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d901      	bls.n	800a21c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800a218:	2303      	movs	r3, #3
 800a21a:	e01b      	b.n	800a254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	691b      	ldr	r3, [r3, #16]
 800a220:	2b00      	cmp	r3, #0
 800a222:	daf2      	bge.n	800a20a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800a224:	2300      	movs	r3, #0
 800a226:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	019b      	lsls	r3, r3, #6
 800a22c:	f043 0220 	orr.w	r2, r3, #32
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	3301      	adds	r3, #1
 800a238:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	4a08      	ldr	r2, [pc, #32]	; (800a260 <USB_FlushTxFifo+0x64>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d901      	bls.n	800a246 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e006      	b.n	800a254 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	691b      	ldr	r3, [r3, #16]
 800a24a:	f003 0320 	and.w	r3, r3, #32
 800a24e:	2b20      	cmp	r3, #32
 800a250:	d0f0      	beq.n	800a234 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800a252:	2300      	movs	r3, #0
}
 800a254:	4618      	mov	r0, r3
 800a256:	3714      	adds	r7, #20
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr
 800a260:	00030d40 	.word	0x00030d40

0800a264 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a26c:	2300      	movs	r3, #0
 800a26e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	3301      	adds	r3, #1
 800a274:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	4a11      	ldr	r2, [pc, #68]	; (800a2c0 <USB_FlushRxFifo+0x5c>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d901      	bls.n	800a282 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800a27e:	2303      	movs	r3, #3
 800a280:	e018      	b.n	800a2b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	691b      	ldr	r3, [r3, #16]
 800a286:	2b00      	cmp	r3, #0
 800a288:	daf2      	bge.n	800a270 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800a28a:	2300      	movs	r3, #0
 800a28c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2210      	movs	r2, #16
 800a292:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	3301      	adds	r3, #1
 800a298:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	4a08      	ldr	r2, [pc, #32]	; (800a2c0 <USB_FlushRxFifo+0x5c>)
 800a29e:	4293      	cmp	r3, r2
 800a2a0:	d901      	bls.n	800a2a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800a2a2:	2303      	movs	r3, #3
 800a2a4:	e006      	b.n	800a2b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	f003 0310 	and.w	r3, r3, #16
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d0f0      	beq.n	800a294 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800a2b2:	2300      	movs	r3, #0
}
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr
 800a2c0:	00030d40 	.word	0x00030d40

0800a2c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800a2c4:	b480      	push	{r7}
 800a2c6:	b085      	sub	sp, #20
 800a2c8:	af00      	add	r7, sp, #0
 800a2ca:	6078      	str	r0, [r7, #4]
 800a2cc:	460b      	mov	r3, r1
 800a2ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	78fb      	ldrb	r3, [r7, #3]
 800a2de:	68f9      	ldr	r1, [r7, #12]
 800a2e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800a2e8:	2300      	movs	r3, #0
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	3714      	adds	r7, #20
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b085      	sub	sp, #20
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	68fa      	ldr	r2, [r7, #12]
 800a30c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a310:	f023 0303 	bic.w	r3, r3, #3
 800a314:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	68fa      	ldr	r2, [r7, #12]
 800a320:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a324:	f043 0302 	orr.w	r3, r3, #2
 800a328:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a32a:	2300      	movs	r3, #0
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a336:	4770      	bx	lr

0800a338 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a338:	b480      	push	{r7}
 800a33a:	b083      	sub	sp, #12
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	695b      	ldr	r3, [r3, #20]
 800a344:	f003 0301 	and.w	r3, r3, #1
}
 800a348:	4618      	mov	r0, r3
 800a34a:	370c      	adds	r7, #12
 800a34c:	46bd      	mov	sp, r7
 800a34e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a352:	4770      	bx	lr

0800a354 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a354:	b480      	push	{r7}
 800a356:	b085      	sub	sp, #20
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a35c:	2300      	movs	r3, #0
 800a35e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	3301      	adds	r3, #1
 800a364:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	4a13      	ldr	r2, [pc, #76]	; (800a3b8 <USB_CoreReset+0x64>)
 800a36a:	4293      	cmp	r3, r2
 800a36c:	d901      	bls.n	800a372 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a36e:	2303      	movs	r3, #3
 800a370:	e01b      	b.n	800a3aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	691b      	ldr	r3, [r3, #16]
 800a376:	2b00      	cmp	r3, #0
 800a378:	daf2      	bge.n	800a360 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a37a:	2300      	movs	r3, #0
 800a37c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	691b      	ldr	r3, [r3, #16]
 800a382:	f043 0201 	orr.w	r2, r3, #1
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	3301      	adds	r3, #1
 800a38e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	4a09      	ldr	r2, [pc, #36]	; (800a3b8 <USB_CoreReset+0x64>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d901      	bls.n	800a39c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a398:	2303      	movs	r3, #3
 800a39a:	e006      	b.n	800a3aa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	691b      	ldr	r3, [r3, #16]
 800a3a0:	f003 0301 	and.w	r3, r3, #1
 800a3a4:	2b01      	cmp	r3, #1
 800a3a6:	d0f0      	beq.n	800a38a <USB_CoreReset+0x36>

  return HAL_OK;
 800a3a8:	2300      	movs	r3, #0
}
 800a3aa:	4618      	mov	r0, r3
 800a3ac:	3714      	adds	r7, #20
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b4:	4770      	bx	lr
 800a3b6:	bf00      	nop
 800a3b8:	00030d40 	.word	0x00030d40

0800a3bc <__libc_init_array>:
 800a3bc:	b570      	push	{r4, r5, r6, lr}
 800a3be:	4d0d      	ldr	r5, [pc, #52]	; (800a3f4 <__libc_init_array+0x38>)
 800a3c0:	4c0d      	ldr	r4, [pc, #52]	; (800a3f8 <__libc_init_array+0x3c>)
 800a3c2:	1b64      	subs	r4, r4, r5
 800a3c4:	10a4      	asrs	r4, r4, #2
 800a3c6:	2600      	movs	r6, #0
 800a3c8:	42a6      	cmp	r6, r4
 800a3ca:	d109      	bne.n	800a3e0 <__libc_init_array+0x24>
 800a3cc:	4d0b      	ldr	r5, [pc, #44]	; (800a3fc <__libc_init_array+0x40>)
 800a3ce:	4c0c      	ldr	r4, [pc, #48]	; (800a400 <__libc_init_array+0x44>)
 800a3d0:	f000 f820 	bl	800a414 <_init>
 800a3d4:	1b64      	subs	r4, r4, r5
 800a3d6:	10a4      	asrs	r4, r4, #2
 800a3d8:	2600      	movs	r6, #0
 800a3da:	42a6      	cmp	r6, r4
 800a3dc:	d105      	bne.n	800a3ea <__libc_init_array+0x2e>
 800a3de:	bd70      	pop	{r4, r5, r6, pc}
 800a3e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3e4:	4798      	blx	r3
 800a3e6:	3601      	adds	r6, #1
 800a3e8:	e7ee      	b.n	800a3c8 <__libc_init_array+0xc>
 800a3ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800a3ee:	4798      	blx	r3
 800a3f0:	3601      	adds	r6, #1
 800a3f2:	e7f2      	b.n	800a3da <__libc_init_array+0x1e>
 800a3f4:	0800a4ec 	.word	0x0800a4ec
 800a3f8:	0800a4ec 	.word	0x0800a4ec
 800a3fc:	0800a4ec 	.word	0x0800a4ec
 800a400:	0800a4f0 	.word	0x0800a4f0

0800a404 <memset>:
 800a404:	4402      	add	r2, r0
 800a406:	4603      	mov	r3, r0
 800a408:	4293      	cmp	r3, r2
 800a40a:	d100      	bne.n	800a40e <memset+0xa>
 800a40c:	4770      	bx	lr
 800a40e:	f803 1b01 	strb.w	r1, [r3], #1
 800a412:	e7f9      	b.n	800a408 <memset+0x4>

0800a414 <_init>:
 800a414:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a416:	bf00      	nop
 800a418:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a41a:	bc08      	pop	{r3}
 800a41c:	469e      	mov	lr, r3
 800a41e:	4770      	bx	lr

0800a420 <_fini>:
 800a420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a422:	bf00      	nop
 800a424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a426:	bc08      	pop	{r3}
 800a428:	469e      	mov	lr, r3
 800a42a:	4770      	bx	lr
