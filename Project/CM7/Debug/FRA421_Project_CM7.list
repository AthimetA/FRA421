
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bb60  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000169c  0800be00  0800be00  0001be00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d49c  0800d49c  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  0800d49c  0800d49c  0001d49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d4a4  0800d4a4  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d4a4  0800d4a4  0001d4a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d4a8  0800d4a8  0001d4a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  24000000  0800d4ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000084  0800d530  00020084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000e4  0800d590  000200e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000b78  24000144  0800d5f0  00020144  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  24000cbc  0800d5f0  00020cbc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f95d  00000000  00000000  00020172  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000036dd  00000000  00000000  0003facf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001450  00000000  00000000  000431b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001348  00000000  00000000  00044600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003c561  00000000  00000000  00045948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001bd12  00000000  00000000  00081ea9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018726d  00000000  00000000  0009dbbb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00224e28  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000059c8  00000000  00000000  00224e78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000144 	.word	0x24000144
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800bde8 	.word	0x0800bde8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000148 	.word	0x24000148
 80002dc:	0800bde8 	.word	0x0800bde8

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b974 	b.w	8000680 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	4604      	mov	r4, r0
 80003b8:	468e      	mov	lr, r1
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d14d      	bne.n	800045a <__udivmoddi4+0xaa>
 80003be:	428a      	cmp	r2, r1
 80003c0:	4694      	mov	ip, r2
 80003c2:	d969      	bls.n	8000498 <__udivmoddi4+0xe8>
 80003c4:	fab2 f282 	clz	r2, r2
 80003c8:	b152      	cbz	r2, 80003e0 <__udivmoddi4+0x30>
 80003ca:	fa01 f302 	lsl.w	r3, r1, r2
 80003ce:	f1c2 0120 	rsb	r1, r2, #32
 80003d2:	fa20 f101 	lsr.w	r1, r0, r1
 80003d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003da:	ea41 0e03 	orr.w	lr, r1, r3
 80003de:	4094      	lsls	r4, r2
 80003e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003e4:	0c21      	lsrs	r1, r4, #16
 80003e6:	fbbe f6f8 	udiv	r6, lr, r8
 80003ea:	fa1f f78c 	uxth.w	r7, ip
 80003ee:	fb08 e316 	mls	r3, r8, r6, lr
 80003f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80003f6:	fb06 f107 	mul.w	r1, r6, r7
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f106 30ff 	add.w	r0, r6, #4294967295
 8000406:	f080 811f 	bcs.w	8000648 <__udivmoddi4+0x298>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 811c 	bls.w	8000648 <__udivmoddi4+0x298>
 8000410:	3e02      	subs	r6, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb3 f0f8 	udiv	r0, r3, r8
 800041c:	fb08 3310 	mls	r3, r8, r0, r3
 8000420:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000424:	fb00 f707 	mul.w	r7, r0, r7
 8000428:	42a7      	cmp	r7, r4
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x92>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 33ff 	add.w	r3, r0, #4294967295
 8000434:	f080 810a 	bcs.w	800064c <__udivmoddi4+0x29c>
 8000438:	42a7      	cmp	r7, r4
 800043a:	f240 8107 	bls.w	800064c <__udivmoddi4+0x29c>
 800043e:	4464      	add	r4, ip
 8000440:	3802      	subs	r0, #2
 8000442:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000446:	1be4      	subs	r4, r4, r7
 8000448:	2600      	movs	r6, #0
 800044a:	b11d      	cbz	r5, 8000454 <__udivmoddi4+0xa4>
 800044c:	40d4      	lsrs	r4, r2
 800044e:	2300      	movs	r3, #0
 8000450:	e9c5 4300 	strd	r4, r3, [r5]
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d909      	bls.n	8000472 <__udivmoddi4+0xc2>
 800045e:	2d00      	cmp	r5, #0
 8000460:	f000 80ef 	beq.w	8000642 <__udivmoddi4+0x292>
 8000464:	2600      	movs	r6, #0
 8000466:	e9c5 0100 	strd	r0, r1, [r5]
 800046a:	4630      	mov	r0, r6
 800046c:	4631      	mov	r1, r6
 800046e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000472:	fab3 f683 	clz	r6, r3
 8000476:	2e00      	cmp	r6, #0
 8000478:	d14a      	bne.n	8000510 <__udivmoddi4+0x160>
 800047a:	428b      	cmp	r3, r1
 800047c:	d302      	bcc.n	8000484 <__udivmoddi4+0xd4>
 800047e:	4282      	cmp	r2, r0
 8000480:	f200 80f9 	bhi.w	8000676 <__udivmoddi4+0x2c6>
 8000484:	1a84      	subs	r4, r0, r2
 8000486:	eb61 0303 	sbc.w	r3, r1, r3
 800048a:	2001      	movs	r0, #1
 800048c:	469e      	mov	lr, r3
 800048e:	2d00      	cmp	r5, #0
 8000490:	d0e0      	beq.n	8000454 <__udivmoddi4+0xa4>
 8000492:	e9c5 4e00 	strd	r4, lr, [r5]
 8000496:	e7dd      	b.n	8000454 <__udivmoddi4+0xa4>
 8000498:	b902      	cbnz	r2, 800049c <__udivmoddi4+0xec>
 800049a:	deff      	udf	#255	; 0xff
 800049c:	fab2 f282 	clz	r2, r2
 80004a0:	2a00      	cmp	r2, #0
 80004a2:	f040 8092 	bne.w	80005ca <__udivmoddi4+0x21a>
 80004a6:	eba1 010c 	sub.w	r1, r1, ip
 80004aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004ae:	fa1f fe8c 	uxth.w	lr, ip
 80004b2:	2601      	movs	r6, #1
 80004b4:	0c20      	lsrs	r0, r4, #16
 80004b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ba:	fb07 1113 	mls	r1, r7, r3, r1
 80004be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004c2:	fb0e f003 	mul.w	r0, lr, r3
 80004c6:	4288      	cmp	r0, r1
 80004c8:	d908      	bls.n	80004dc <__udivmoddi4+0x12c>
 80004ca:	eb1c 0101 	adds.w	r1, ip, r1
 80004ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80004d2:	d202      	bcs.n	80004da <__udivmoddi4+0x12a>
 80004d4:	4288      	cmp	r0, r1
 80004d6:	f200 80cb 	bhi.w	8000670 <__udivmoddi4+0x2c0>
 80004da:	4643      	mov	r3, r8
 80004dc:	1a09      	subs	r1, r1, r0
 80004de:	b2a4      	uxth	r4, r4
 80004e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e4:	fb07 1110 	mls	r1, r7, r0, r1
 80004e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004ec:	fb0e fe00 	mul.w	lr, lr, r0
 80004f0:	45a6      	cmp	lr, r4
 80004f2:	d908      	bls.n	8000506 <__udivmoddi4+0x156>
 80004f4:	eb1c 0404 	adds.w	r4, ip, r4
 80004f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80004fc:	d202      	bcs.n	8000504 <__udivmoddi4+0x154>
 80004fe:	45a6      	cmp	lr, r4
 8000500:	f200 80bb 	bhi.w	800067a <__udivmoddi4+0x2ca>
 8000504:	4608      	mov	r0, r1
 8000506:	eba4 040e 	sub.w	r4, r4, lr
 800050a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800050e:	e79c      	b.n	800044a <__udivmoddi4+0x9a>
 8000510:	f1c6 0720 	rsb	r7, r6, #32
 8000514:	40b3      	lsls	r3, r6
 8000516:	fa22 fc07 	lsr.w	ip, r2, r7
 800051a:	ea4c 0c03 	orr.w	ip, ip, r3
 800051e:	fa20 f407 	lsr.w	r4, r0, r7
 8000522:	fa01 f306 	lsl.w	r3, r1, r6
 8000526:	431c      	orrs	r4, r3
 8000528:	40f9      	lsrs	r1, r7
 800052a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800052e:	fa00 f306 	lsl.w	r3, r0, r6
 8000532:	fbb1 f8f9 	udiv	r8, r1, r9
 8000536:	0c20      	lsrs	r0, r4, #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fb09 1118 	mls	r1, r9, r8, r1
 8000540:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000544:	fb08 f00e 	mul.w	r0, r8, lr
 8000548:	4288      	cmp	r0, r1
 800054a:	fa02 f206 	lsl.w	r2, r2, r6
 800054e:	d90b      	bls.n	8000568 <__udivmoddi4+0x1b8>
 8000550:	eb1c 0101 	adds.w	r1, ip, r1
 8000554:	f108 3aff 	add.w	sl, r8, #4294967295
 8000558:	f080 8088 	bcs.w	800066c <__udivmoddi4+0x2bc>
 800055c:	4288      	cmp	r0, r1
 800055e:	f240 8085 	bls.w	800066c <__udivmoddi4+0x2bc>
 8000562:	f1a8 0802 	sub.w	r8, r8, #2
 8000566:	4461      	add	r1, ip
 8000568:	1a09      	subs	r1, r1, r0
 800056a:	b2a4      	uxth	r4, r4
 800056c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000570:	fb09 1110 	mls	r1, r9, r0, r1
 8000574:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000578:	fb00 fe0e 	mul.w	lr, r0, lr
 800057c:	458e      	cmp	lr, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x1e2>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f100 34ff 	add.w	r4, r0, #4294967295
 8000588:	d26c      	bcs.n	8000664 <__udivmoddi4+0x2b4>
 800058a:	458e      	cmp	lr, r1
 800058c:	d96a      	bls.n	8000664 <__udivmoddi4+0x2b4>
 800058e:	3802      	subs	r0, #2
 8000590:	4461      	add	r1, ip
 8000592:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000596:	fba0 9402 	umull	r9, r4, r0, r2
 800059a:	eba1 010e 	sub.w	r1, r1, lr
 800059e:	42a1      	cmp	r1, r4
 80005a0:	46c8      	mov	r8, r9
 80005a2:	46a6      	mov	lr, r4
 80005a4:	d356      	bcc.n	8000654 <__udivmoddi4+0x2a4>
 80005a6:	d053      	beq.n	8000650 <__udivmoddi4+0x2a0>
 80005a8:	b15d      	cbz	r5, 80005c2 <__udivmoddi4+0x212>
 80005aa:	ebb3 0208 	subs.w	r2, r3, r8
 80005ae:	eb61 010e 	sbc.w	r1, r1, lr
 80005b2:	fa01 f707 	lsl.w	r7, r1, r7
 80005b6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ba:	40f1      	lsrs	r1, r6
 80005bc:	431f      	orrs	r7, r3
 80005be:	e9c5 7100 	strd	r7, r1, [r5]
 80005c2:	2600      	movs	r6, #0
 80005c4:	4631      	mov	r1, r6
 80005c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	40d8      	lsrs	r0, r3
 80005d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005d4:	fa21 f303 	lsr.w	r3, r1, r3
 80005d8:	4091      	lsls	r1, r2
 80005da:	4301      	orrs	r1, r0
 80005dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e0:	fa1f fe8c 	uxth.w	lr, ip
 80005e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005e8:	fb07 3610 	mls	r6, r7, r0, r3
 80005ec:	0c0b      	lsrs	r3, r1, #16
 80005ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80005f2:	fb00 f60e 	mul.w	r6, r0, lr
 80005f6:	429e      	cmp	r6, r3
 80005f8:	fa04 f402 	lsl.w	r4, r4, r2
 80005fc:	d908      	bls.n	8000610 <__udivmoddi4+0x260>
 80005fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000602:	f100 38ff 	add.w	r8, r0, #4294967295
 8000606:	d22f      	bcs.n	8000668 <__udivmoddi4+0x2b8>
 8000608:	429e      	cmp	r6, r3
 800060a:	d92d      	bls.n	8000668 <__udivmoddi4+0x2b8>
 800060c:	3802      	subs	r0, #2
 800060e:	4463      	add	r3, ip
 8000610:	1b9b      	subs	r3, r3, r6
 8000612:	b289      	uxth	r1, r1
 8000614:	fbb3 f6f7 	udiv	r6, r3, r7
 8000618:	fb07 3316 	mls	r3, r7, r6, r3
 800061c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000620:	fb06 f30e 	mul.w	r3, r6, lr
 8000624:	428b      	cmp	r3, r1
 8000626:	d908      	bls.n	800063a <__udivmoddi4+0x28a>
 8000628:	eb1c 0101 	adds.w	r1, ip, r1
 800062c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000630:	d216      	bcs.n	8000660 <__udivmoddi4+0x2b0>
 8000632:	428b      	cmp	r3, r1
 8000634:	d914      	bls.n	8000660 <__udivmoddi4+0x2b0>
 8000636:	3e02      	subs	r6, #2
 8000638:	4461      	add	r1, ip
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000640:	e738      	b.n	80004b4 <__udivmoddi4+0x104>
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e705      	b.n	8000454 <__udivmoddi4+0xa4>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e3      	b.n	8000414 <__udivmoddi4+0x64>
 800064c:	4618      	mov	r0, r3
 800064e:	e6f8      	b.n	8000442 <__udivmoddi4+0x92>
 8000650:	454b      	cmp	r3, r9
 8000652:	d2a9      	bcs.n	80005a8 <__udivmoddi4+0x1f8>
 8000654:	ebb9 0802 	subs.w	r8, r9, r2
 8000658:	eb64 0e0c 	sbc.w	lr, r4, ip
 800065c:	3801      	subs	r0, #1
 800065e:	e7a3      	b.n	80005a8 <__udivmoddi4+0x1f8>
 8000660:	4646      	mov	r6, r8
 8000662:	e7ea      	b.n	800063a <__udivmoddi4+0x28a>
 8000664:	4620      	mov	r0, r4
 8000666:	e794      	b.n	8000592 <__udivmoddi4+0x1e2>
 8000668:	4640      	mov	r0, r8
 800066a:	e7d1      	b.n	8000610 <__udivmoddi4+0x260>
 800066c:	46d0      	mov	r8, sl
 800066e:	e77b      	b.n	8000568 <__udivmoddi4+0x1b8>
 8000670:	3b02      	subs	r3, #2
 8000672:	4461      	add	r1, ip
 8000674:	e732      	b.n	80004dc <__udivmoddi4+0x12c>
 8000676:	4630      	mov	r0, r6
 8000678:	e709      	b.n	800048e <__udivmoddi4+0xde>
 800067a:	4464      	add	r4, ip
 800067c:	3802      	subs	r0, #2
 800067e:	e742      	b.n	8000506 <__udivmoddi4+0x156>

08000680 <__aeabi_idiv0>:
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop

08000684 <YUGIOH_card_copy>:
		ptrRFID->action = 0;
		RFID_Clear_Card_Bufffer(ptrRFID);
	}
}

void YUGIOH_card_copy(YUGIOH_Card *src, YUGIOH_Card *dst) {
 8000684:	b480      	push	{r7}
 8000686:	b083      	sub	sp, #12
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
 800068c:	6039      	str	r1, [r7, #0]
	dst->cardData = src->cardData;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	689a      	ldr	r2, [r3, #8]
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	609a      	str	r2, [r3, #8]
	dst->cardSignature = src->cardSignature;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	781a      	ldrb	r2, [r3, #0]
 800069a:	683b      	ldr	r3, [r7, #0]
 800069c:	701a      	strb	r2, [r3, #0]
	dst->cardState = src->cardState;
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	789a      	ldrb	r2, [r3, #2]
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	709a      	strb	r2, [r3, #2]
	dst->cardType = src->cardType;
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	785a      	ldrb	r2, [r3, #1]
 80006aa:	683b      	ldr	r3, [r7, #0]
 80006ac:	705a      	strb	r2, [r3, #1]
	dst->cardLevel = src->cardLevel;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	78da      	ldrb	r2, [r3, #3]
 80006b2:	683b      	ldr	r3, [r7, #0]
 80006b4:	70da      	strb	r2, [r3, #3]
	dst->cardAtk = src->cardAtk;
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	791a      	ldrb	r2, [r3, #4]
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	711a      	strb	r2, [r3, #4]
	dst->cardDef = src->cardDef;
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	795a      	ldrb	r2, [r3, #5]
 80006c2:	683b      	ldr	r3, [r7, #0]
 80006c4:	715a      	strb	r2, [r3, #5]
	dst->standPosition = src->standPosition;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	799a      	ldrb	r2, [r3, #6]
 80006ca:	683b      	ldr	r3, [r7, #0]
 80006cc:	719a      	strb	r2, [r3, #6]
	dst->targetPosition = src->targetPosition;
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	79da      	ldrb	r2, [r3, #7]
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	71da      	strb	r2, [r3, #7]
}
 80006d6:	bf00      	nop
 80006d8:	370c      	adds	r7, #12
 80006da:	46bd      	mov	sp, r7
 80006dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e0:	4770      	bx	lr

080006e2 <RFID_Clear_Card_Bufffer>:
void RFID_Clear_Card_Bufffer(RFID *rfid) {
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b088      	sub	sp, #32
 80006e6:	af00      	add	r7, sp, #0
 80006e8:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80006ea:	f107 030c 	add.w	r3, r7, #12
 80006ee:	2200      	movs	r2, #0
 80006f0:	601a      	str	r2, [r3, #0]
 80006f2:	605a      	str	r2, [r3, #4]
 80006f4:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = rfid->bufferCard;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	3314      	adds	r3, #20
 80006fa:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	76fb      	strb	r3, [r7, #27]
 8000700:	e00b      	b.n	800071a <RFID_Clear_Card_Bufffer+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	69f9      	ldr	r1, [r7, #28]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ffbb 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	330c      	adds	r3, #12
 8000712:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CARD_BUFF_LEN; ++i) {
 8000714:	7efb      	ldrb	r3, [r7, #27]
 8000716:	3301      	adds	r3, #1
 8000718:	76fb      	strb	r3, [r7, #27]
 800071a:	7efb      	ldrb	r3, [r7, #27]
 800071c:	2b03      	cmp	r3, #3
 800071e:	d9f0      	bls.n	8000702 <RFID_Clear_Card_Bufffer+0x20>
	}
}
 8000720:	bf00      	nop
 8000722:	bf00      	nop
 8000724:	3720      	adds	r7, #32
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}

0800072a <YUGIOH_Clear_Card_Bufffer_Player>:
	card->cardLevel = archive_yugioh_card_level[idx];
	card->cardAtk = archive_yugioh_card_atk[idx];
	card->cardDef = archive_yugioh_card_def[idx];
}

void YUGIOH_Clear_Card_Bufffer_Player(Player *player) {
 800072a:	b580      	push	{r7, lr}
 800072c:	b088      	sub	sp, #32
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	2200      	movs	r2, #0
 8000738:	601a      	str	r2, [r3, #0]
 800073a:	605a      	str	r2, [r3, #4]
 800073c:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard = player->ChainBuffer;
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000744:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 8000746:	2300      	movs	r3, #0
 8000748:	76fb      	strb	r3, [r7, #27]
 800074a:	e00b      	b.n	8000764 <YUGIOH_Clear_Card_Bufffer_Player+0x3a>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 800074c:	f107 030c 	add.w	r3, r7, #12
 8000750:	69f9      	ldr	r1, [r7, #28]
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff96 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 8000758:	69fb      	ldr	r3, [r7, #28]
 800075a:	330c      	adds	r3, #12
 800075c:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < CHAIN_BUFF_LEN; ++i) {
 800075e:	7efb      	ldrb	r3, [r7, #27]
 8000760:	3301      	adds	r3, #1
 8000762:	76fb      	strb	r3, [r7, #27]
 8000764:	7efb      	ldrb	r3, [r7, #27]
 8000766:	2b05      	cmp	r3, #5
 8000768:	d9f0      	bls.n	800074c <YUGIOH_Clear_Card_Bufffer_Player+0x22>
	}
}
 800076a:	bf00      	nop
 800076c:	bf00      	nop
 800076e:	3720      	adds	r7, #32
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}

08000774 <YUGIOH_card_Buffer_Update_Player>:

void YUGIOH_card_Buffer_Update_Player(Player *player) {
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->ChainBuffer;
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000782:	617b      	str	r3, [r7, #20]
	ptrYugiohCard_Buffer_src = &player->ChainBuffer[CHAIN_BUFF_LEN - 2];
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800078a:	617b      	str	r3, [r7, #20]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->ChainBuffer;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000792:	613b      	str	r3, [r7, #16]
	ptrYugiohCard_Buffer_dst = &player->ChainBuffer[CHAIN_BUFF_LEN - 1];
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800079a:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 800079c:	2306      	movs	r3, #6
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	e00c      	b.n	80007bc <YUGIOH_card_Buffer_Update_Player+0x48>
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80007a2:	6939      	ldr	r1, [r7, #16]
 80007a4:	6978      	ldr	r0, [r7, #20]
 80007a6:	f7ff ff6d 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3b0c      	subs	r3, #12
 80007ae:	617b      	str	r3, [r7, #20]
		ptrYugiohCard_Buffer_dst--;
 80007b0:	693b      	ldr	r3, [r7, #16]
 80007b2:	3b0c      	subs	r3, #12
 80007b4:	613b      	str	r3, [r7, #16]
	for (int i = CHAIN_BUFF_LEN; i >= 1; i--) {
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	3b01      	subs	r3, #1
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	2b00      	cmp	r3, #0
 80007c0:	dcef      	bgt.n	80007a2 <YUGIOH_card_Buffer_Update_Player+0x2e>
	}
}
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	3718      	adds	r7, #24
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}

080007cc <GAME_PLAY_Management>:


void GAME_PLAY_Management(RFIDHandle *RFIDmain, State_game *state_game) {
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b08a      	sub	sp, #40	; 0x28
 80007d0:	af04      	add	r7, sp, #16
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	6039      	str	r1, [r7, #0]

	Player *ptrPlayer1 = state_game->player;
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	3304      	adds	r3, #4
 80007da:	617b      	str	r3, [r7, #20]
	Player *ptrPlayer2 = state_game->player;
 80007dc:	683b      	ldr	r3, [r7, #0]
 80007de:	3304      	adds	r3, #4
 80007e0:	613b      	str	r3, [r7, #16]

	ptrPlayer1 = &state_game->player[0];
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	3304      	adds	r3, #4
 80007e6:	617b      	str	r3, [r7, #20]
	ptrPlayer2 = &state_game->player[1];
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 80007ee:	613b      	str	r3, [r7, #16]

	enum _player_state {
		ready, first_player, second_player
	} player_state;
	player_state = state_game->player_state;
 80007f0:	683b      	ldr	r3, [r7, #0]
 80007f2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 80007f6:	73fb      	strb	r3, [r7, #15]

	switch (player_state) {
 80007f8:	7bfb      	ldrb	r3, [r7, #15]
 80007fa:	2b02      	cmp	r3, #2
 80007fc:	f000 820b 	beq.w	8000c16 <GAME_PLAY_Management+0x44a>
 8000800:	2b02      	cmp	r3, #2
 8000802:	f300 8238 	bgt.w	8000c76 <GAME_PLAY_Management+0x4aa>
 8000806:	2b00      	cmp	r3, #0
 8000808:	d003      	beq.n	8000812 <GAME_PLAY_Management+0x46>
 800080a:	2b01      	cmp	r3, #1
 800080c:	f000 81d3 	beq.w	8000bb6 <GAME_PLAY_Management+0x3ea>
			state_game->F_flag = 0;
		}
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
		break;
	}
}
 8000810:	e231      	b.n	8000c76 <GAME_PLAY_Management+0x4aa>
		ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000812:	4baa      	ldr	r3, [pc, #680]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000814:	2200      	movs	r2, #0
 8000816:	9202      	str	r2, [sp, #8]
 8000818:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800081c:	9201      	str	r2, [sp, #4]
 800081e:	685a      	ldr	r2, [r3, #4]
 8000820:	9200      	str	r2, [sp, #0]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	4aa6      	ldr	r2, [pc, #664]	; (8000ac0 <GAME_PLAY_Management+0x2f4>)
 8000826:	2105      	movs	r1, #5
 8000828:	2005      	movs	r0, #5
 800082a:	f001 fe68 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800082e:	4ba3      	ldr	r3, [pc, #652]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000830:	2200      	movs	r2, #0
 8000832:	9202      	str	r2, [sp, #8]
 8000834:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000838:	9201      	str	r2, [sp, #4]
 800083a:	685a      	ldr	r2, [r3, #4]
 800083c:	9200      	str	r2, [sp, #0]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	4aa0      	ldr	r2, [pc, #640]	; (8000ac4 <GAME_PLAY_Management+0x2f8>)
 8000842:	210f      	movs	r1, #15
 8000844:	2000      	movs	r0, #0
 8000846:	f001 fe5a 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 800084a:	4b9f      	ldr	r3, [pc, #636]	; (8000ac8 <GAME_PLAY_Management+0x2fc>)
 800084c:	2200      	movs	r2, #0
 800084e:	9202      	str	r2, [sp, #8]
 8000850:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000854:	9201      	str	r2, [sp, #4]
 8000856:	685a      	ldr	r2, [r3, #4]
 8000858:	9200      	str	r2, [sp, #0]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a9b      	ldr	r2, [pc, #620]	; (8000acc <GAME_PLAY_Management+0x300>)
 800085e:	2123      	movs	r1, #35	; 0x23
 8000860:	2008      	movs	r0, #8
 8000862:	f001 fe4c 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(25, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000866:	4b98      	ldr	r3, [pc, #608]	; (8000ac8 <GAME_PLAY_Management+0x2fc>)
 8000868:	2200      	movs	r2, #0
 800086a:	9202      	str	r2, [sp, #8]
 800086c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000870:	9201      	str	r2, [sp, #4]
 8000872:	685a      	ldr	r2, [r3, #4]
 8000874:	9200      	str	r2, [sp, #0]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a95      	ldr	r2, [pc, #596]	; (8000ad0 <GAME_PLAY_Management+0x304>)
 800087a:	213c      	movs	r1, #60	; 0x3c
 800087c:	2019      	movs	r0, #25
 800087e:	f001 fe3e 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000882:	4b8e      	ldr	r3, [pc, #568]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000884:	2200      	movs	r2, #0
 8000886:	9202      	str	r2, [sp, #8]
 8000888:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088c:	9201      	str	r2, [sp, #4]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	9200      	str	r2, [sp, #0]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a8b      	ldr	r2, [pc, #556]	; (8000ac4 <GAME_PLAY_Management+0x2f8>)
 8000896:	214b      	movs	r1, #75	; 0x4b
 8000898:	2000      	movs	r0, #0
 800089a:	f001 fe30 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800089e:	4b87      	ldr	r3, [pc, #540]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	9202      	str	r2, [sp, #8]
 80008a4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008a8:	9201      	str	r2, [sp, #4]
 80008aa:	685a      	ldr	r2, [r3, #4]
 80008ac:	9200      	str	r2, [sp, #0]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a88      	ldr	r2, [pc, #544]	; (8000ad4 <GAME_PLAY_Management+0x308>)
 80008b2:	215a      	movs	r1, #90	; 0x5a
 80008b4:	2000      	movs	r0, #0
 80008b6:	f001 fe22 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008ba:	4b80      	ldr	r3, [pc, #512]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80008bc:	2200      	movs	r2, #0
 80008be:	9202      	str	r2, [sp, #8]
 80008c0:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008c4:	9201      	str	r2, [sp, #4]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a82      	ldr	r2, [pc, #520]	; (8000ad8 <GAME_PLAY_Management+0x30c>)
 80008ce:	215a      	movs	r1, #90	; 0x5a
 80008d0:	205d      	movs	r0, #93	; 0x5d
 80008d2:	f001 fe14 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(0, 105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80008d6:	4b79      	ldr	r3, [pc, #484]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80008d8:	2200      	movs	r2, #0
 80008da:	9202      	str	r2, [sp, #8]
 80008dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008e0:	9201      	str	r2, [sp, #4]
 80008e2:	685a      	ldr	r2, [r3, #4]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	4a7c      	ldr	r2, [pc, #496]	; (8000adc <GAME_PLAY_Management+0x310>)
 80008ea:	2169      	movs	r1, #105	; 0x69
 80008ec:	2000      	movs	r0, #0
 80008ee:	f001 fe06 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80008f2:	4b72      	ldr	r3, [pc, #456]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	9202      	str	r2, [sp, #8]
 80008f8:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80008fc:	9201      	str	r2, [sp, #4]
 80008fe:	685a      	ldr	r2, [r3, #4]
 8000900:	9200      	str	r2, [sp, #0]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a76      	ldr	r2, [pc, #472]	; (8000ae0 <GAME_PLAY_Management+0x314>)
 8000906:	2169      	movs	r1, #105	; 0x69
 8000908:	2064      	movs	r0, #100	; 0x64
 800090a:	f001 fdf8 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800090e:	4b6b      	ldr	r3, [pc, #428]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000910:	2200      	movs	r2, #0
 8000912:	9202      	str	r2, [sp, #8]
 8000914:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000918:	9201      	str	r2, [sp, #4]
 800091a:	685a      	ldr	r2, [r3, #4]
 800091c:	9200      	str	r2, [sp, #0]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a70      	ldr	r2, [pc, #448]	; (8000ae4 <GAME_PLAY_Management+0x318>)
 8000922:	2105      	movs	r1, #5
 8000924:	2005      	movs	r0, #5
 8000926:	f001 fe34 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800092a:	4b64      	ldr	r3, [pc, #400]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 800092c:	2200      	movs	r2, #0
 800092e:	9202      	str	r2, [sp, #8]
 8000930:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000934:	9201      	str	r2, [sp, #4]
 8000936:	685a      	ldr	r2, [r3, #4]
 8000938:	9200      	str	r2, [sp, #0]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a61      	ldr	r2, [pc, #388]	; (8000ac4 <GAME_PLAY_Management+0x2f8>)
 800093e:	210f      	movs	r1, #15
 8000940:	2000      	movs	r0, #0
 8000942:	f001 fe26 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(8, 35, "Hit button", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000946:	4b60      	ldr	r3, [pc, #384]	; (8000ac8 <GAME_PLAY_Management+0x2fc>)
 8000948:	2200      	movs	r2, #0
 800094a:	9202      	str	r2, [sp, #8]
 800094c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000950:	9201      	str	r2, [sp, #4]
 8000952:	685a      	ldr	r2, [r3, #4]
 8000954:	9200      	str	r2, [sp, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a5c      	ldr	r2, [pc, #368]	; (8000acc <GAME_PLAY_Management+0x300>)
 800095a:	2123      	movs	r1, #35	; 0x23
 800095c:	2008      	movs	r0, #8
 800095e:	f001 fe18 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(20, 60, "to DUEL", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000962:	4b59      	ldr	r3, [pc, #356]	; (8000ac8 <GAME_PLAY_Management+0x2fc>)
 8000964:	2200      	movs	r2, #0
 8000966:	9202      	str	r2, [sp, #8]
 8000968:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 800096c:	9201      	str	r2, [sp, #4]
 800096e:	685a      	ldr	r2, [r3, #4]
 8000970:	9200      	str	r2, [sp, #0]
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	4a56      	ldr	r2, [pc, #344]	; (8000ad0 <GAME_PLAY_Management+0x304>)
 8000976:	213c      	movs	r1, #60	; 0x3c
 8000978:	2014      	movs	r0, #20
 800097a:	f001 fe0a 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800097e:	4b4f      	ldr	r3, [pc, #316]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000980:	2200      	movs	r2, #0
 8000982:	9202      	str	r2, [sp, #8]
 8000984:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000988:	9201      	str	r2, [sp, #4]
 800098a:	685a      	ldr	r2, [r3, #4]
 800098c:	9200      	str	r2, [sp, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a4c      	ldr	r2, [pc, #304]	; (8000ac4 <GAME_PLAY_Management+0x2f8>)
 8000992:	214b      	movs	r1, #75	; 0x4b
 8000994:	2000      	movs	r0, #0
 8000996:	f001 fdfc 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(0, 90, "Initial LP: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800099a:	4b48      	ldr	r3, [pc, #288]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 800099c:	2200      	movs	r2, #0
 800099e:	9202      	str	r2, [sp, #8]
 80009a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a4:	9201      	str	r2, [sp, #4]
 80009a6:	685a      	ldr	r2, [r3, #4]
 80009a8:	9200      	str	r2, [sp, #0]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a49      	ldr	r2, [pc, #292]	; (8000ad4 <GAME_PLAY_Management+0x308>)
 80009ae:	215a      	movs	r1, #90	; 0x5a
 80009b0:	2000      	movs	r0, #0
 80009b2:	f001 fdee 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(93, 90, "4000", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009b6:	4b41      	ldr	r3, [pc, #260]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	9202      	str	r2, [sp, #8]
 80009bc:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009c0:	9201      	str	r2, [sp, #4]
 80009c2:	685a      	ldr	r2, [r3, #4]
 80009c4:	9200      	str	r2, [sp, #0]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a43      	ldr	r2, [pc, #268]	; (8000ad8 <GAME_PLAY_Management+0x30c>)
 80009ca:	215a      	movs	r1, #90	; 0x5a
 80009cc:	205d      	movs	r0, #93	; 0x5d
 80009ce:	f001 fde0 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(0,105, "Initial Timer: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80009d2:	4b3a      	ldr	r3, [pc, #232]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	9202      	str	r2, [sp, #8]
 80009d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009dc:	9201      	str	r2, [sp, #4]
 80009de:	685a      	ldr	r2, [r3, #4]
 80009e0:	9200      	str	r2, [sp, #0]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a3d      	ldr	r2, [pc, #244]	; (8000adc <GAME_PLAY_Management+0x310>)
 80009e6:	2169      	movs	r1, #105	; 0x69
 80009e8:	2000      	movs	r0, #0
 80009ea:	f001 fdd2 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(100, 105, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 80009ee:	4b33      	ldr	r3, [pc, #204]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	9202      	str	r2, [sp, #8]
 80009f4:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 80009f8:	9201      	str	r2, [sp, #4]
 80009fa:	685a      	ldr	r2, [r3, #4]
 80009fc:	9200      	str	r2, [sp, #0]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a37      	ldr	r2, [pc, #220]	; (8000ae0 <GAME_PLAY_Management+0x314>)
 8000a02:	2169      	movs	r1, #105	; 0x69
 8000a04:	2064      	movs	r0, #100	; 0x64
 8000a06:	f001 fdc4 	bl	8002592 <ST7735_WriteString1>
		if (HAL_GPIO_ReadPin(START_BUTTON_PORT, START_BUTTON_PIN)
 8000a0a:	2108      	movs	r1, #8
 8000a0c:	4836      	ldr	r0, [pc, #216]	; (8000ae8 <GAME_PLAY_Management+0x31c>)
 8000a0e:	f005 fc1d 	bl	800624c <HAL_GPIO_ReadPin>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	f040 80c9 	bne.w	8000bac <GAME_PLAY_Management+0x3e0>
			ptrPlayer1->life_point = 4000;
 8000a1a:	697b      	ldr	r3, [r7, #20]
 8000a1c:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a20:	805a      	strh	r2, [r3, #2]
			ptrPlayer2->life_point = 4000;
 8000a22:	693b      	ldr	r3, [r7, #16]
 8000a24:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8000a28:	805a      	strh	r2, [r3, #2]
			ST7735_FillScreen(ST7735_BLACK);
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f001 fee4 	bl	80027f8 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000a30:	2000      	movs	r0, #0
 8000a32:	f001 fef2 	bl	800281a <ST7735_FillScreen1>
			ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	9202      	str	r2, [sp, #8]
 8000a3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a40:	9201      	str	r2, [sp, #4]
 8000a42:	685a      	ldr	r2, [r3, #4]
 8000a44:	9200      	str	r2, [sp, #0]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a1d      	ldr	r2, [pc, #116]	; (8000ac0 <GAME_PLAY_Management+0x2f4>)
 8000a4a:	2105      	movs	r1, #5
 8000a4c:	2005      	movs	r0, #5
 8000a4e:	f001 fd56 	bl	80024fe <ST7735_WriteString>
			ST7735_WriteString(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000a52:	4b1a      	ldr	r3, [pc, #104]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	9202      	str	r2, [sp, #8]
 8000a58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5c:	9201      	str	r2, [sp, #4]
 8000a5e:	685a      	ldr	r2, [r3, #4]
 8000a60:	9200      	str	r2, [sp, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a17      	ldr	r2, [pc, #92]	; (8000ac4 <GAME_PLAY_Management+0x2f8>)
 8000a66:	210f      	movs	r1, #15
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f001 fd48 	bl	80024fe <ST7735_WriteString>
			ST7735_WriteString(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000a6e:	4b16      	ldr	r3, [pc, #88]	; (8000ac8 <GAME_PLAY_Management+0x2fc>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	9202      	str	r2, [sp, #8]
 8000a74:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000a78:	9201      	str	r2, [sp, #4]
 8000a7a:	685a      	ldr	r2, [r3, #4]
 8000a7c:	9200      	str	r2, [sp, #0]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a1a      	ldr	r2, [pc, #104]	; (8000aec <GAME_PLAY_Management+0x320>)
 8000a82:	2123      	movs	r1, #35	; 0x23
 8000a84:	2019      	movs	r0, #25
 8000a86:	f001 fd3a 	bl	80024fe <ST7735_WriteString>
			ST7735_WriteString(33, 60, "SECOND", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000a8a:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <GAME_PLAY_Management+0x2fc>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	9202      	str	r2, [sp, #8]
 8000a90:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000a94:	9201      	str	r2, [sp, #4]
 8000a96:	685a      	ldr	r2, [r3, #4]
 8000a98:	9200      	str	r2, [sp, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a14      	ldr	r2, [pc, #80]	; (8000af0 <GAME_PLAY_Management+0x324>)
 8000a9e:	213c      	movs	r1, #60	; 0x3c
 8000aa0:	2021      	movs	r0, #33	; 0x21
 8000aa2:	f001 fd2c 	bl	80024fe <ST7735_WriteString>
			ST7735_WriteString(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000aa6:	4b05      	ldr	r3, [pc, #20]	; (8000abc <GAME_PLAY_Management+0x2f0>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	9202      	str	r2, [sp, #8]
 8000aac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ab0:	9201      	str	r2, [sp, #4]
 8000ab2:	685a      	ldr	r2, [r3, #4]
 8000ab4:	9200      	str	r2, [sp, #0]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	e01c      	b.n	8000af4 <GAME_PLAY_Management+0x328>
 8000aba:	bf00      	nop
 8000abc:	24000008 	.word	0x24000008
 8000ac0:	0800be00 	.word	0x0800be00
 8000ac4:	0800be0c 	.word	0x0800be0c
 8000ac8:	24000010 	.word	0x24000010
 8000acc:	0800be20 	.word	0x0800be20
 8000ad0:	0800be2c 	.word	0x0800be2c
 8000ad4:	0800be34 	.word	0x0800be34
 8000ad8:	0800be44 	.word	0x0800be44
 8000adc:	0800be4c 	.word	0x0800be4c
 8000ae0:	0800be5c 	.word	0x0800be5c
 8000ae4:	0800be60 	.word	0x0800be60
 8000ae8:	58020000 	.word	0x58020000
 8000aec:	0800be6c 	.word	0x0800be6c
 8000af0:	0800be74 	.word	0x0800be74
 8000af4:	4a62      	ldr	r2, [pc, #392]	; (8000c80 <GAME_PLAY_Management+0x4b4>)
 8000af6:	214b      	movs	r1, #75	; 0x4b
 8000af8:	2000      	movs	r0, #0
 8000afa:	f001 fd00 	bl	80024fe <ST7735_WriteString>
			ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000afe:	4b61      	ldr	r3, [pc, #388]	; (8000c84 <GAME_PLAY_Management+0x4b8>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	9202      	str	r2, [sp, #8]
 8000b04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b08:	9201      	str	r2, [sp, #4]
 8000b0a:	685a      	ldr	r2, [r3, #4]
 8000b0c:	9200      	str	r2, [sp, #0]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a5d      	ldr	r2, [pc, #372]	; (8000c88 <GAME_PLAY_Management+0x4bc>)
 8000b12:	2105      	movs	r1, #5
 8000b14:	2005      	movs	r0, #5
 8000b16:	f001 fd3c 	bl	8002592 <ST7735_WriteString1>
			ST7735_WriteString1(0, 15, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b1a:	4b5a      	ldr	r3, [pc, #360]	; (8000c84 <GAME_PLAY_Management+0x4b8>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	9202      	str	r2, [sp, #8]
 8000b20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b24:	9201      	str	r2, [sp, #4]
 8000b26:	685a      	ldr	r2, [r3, #4]
 8000b28:	9200      	str	r2, [sp, #0]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a54      	ldr	r2, [pc, #336]	; (8000c80 <GAME_PLAY_Management+0x4b4>)
 8000b2e:	210f      	movs	r1, #15
 8000b30:	2000      	movs	r0, #0
 8000b32:	f001 fd2e 	bl	8002592 <ST7735_WriteString1>
			ST7735_WriteString1(25, 35, "You are", Font_11x18, ST7735_MAGENTA, ST7735_BLACK);
 8000b36:	4b55      	ldr	r3, [pc, #340]	; (8000c8c <GAME_PLAY_Management+0x4c0>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	9202      	str	r2, [sp, #8]
 8000b3c:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8000b40:	9201      	str	r2, [sp, #4]
 8000b42:	685a      	ldr	r2, [r3, #4]
 8000b44:	9200      	str	r2, [sp, #0]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a51      	ldr	r2, [pc, #324]	; (8000c90 <GAME_PLAY_Management+0x4c4>)
 8000b4a:	2123      	movs	r1, #35	; 0x23
 8000b4c:	2019      	movs	r0, #25
 8000b4e:	f001 fd20 	bl	8002592 <ST7735_WriteString1>
			ST7735_WriteString1(37, 60, "FIRST", Font_11x18, ST7735_CYAN, ST7735_BLACK);
 8000b52:	4b4e      	ldr	r3, [pc, #312]	; (8000c8c <GAME_PLAY_Management+0x4c0>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	9202      	str	r2, [sp, #8]
 8000b58:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000b5c:	9201      	str	r2, [sp, #4]
 8000b5e:	685a      	ldr	r2, [r3, #4]
 8000b60:	9200      	str	r2, [sp, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a4b      	ldr	r2, [pc, #300]	; (8000c94 <GAME_PLAY_Management+0x4c8>)
 8000b66:	213c      	movs	r1, #60	; 0x3c
 8000b68:	2025      	movs	r0, #37	; 0x25
 8000b6a:	f001 fd12 	bl	8002592 <ST7735_WriteString1>
			ST7735_WriteString1(0, 75, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000b6e:	4b45      	ldr	r3, [pc, #276]	; (8000c84 <GAME_PLAY_Management+0x4b8>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	9202      	str	r2, [sp, #8]
 8000b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b78:	9201      	str	r2, [sp, #4]
 8000b7a:	685a      	ldr	r2, [r3, #4]
 8000b7c:	9200      	str	r2, [sp, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a3f      	ldr	r2, [pc, #252]	; (8000c80 <GAME_PLAY_Management+0x4b4>)
 8000b82:	214b      	movs	r1, #75	; 0x4b
 8000b84:	2000      	movs	r0, #0
 8000b86:	f001 fd04 	bl	8002592 <ST7735_WriteString1>
			HAL_Delay(3000);
 8000b8a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b8e:	f002 fa0f 	bl	8002fb0 <HAL_Delay>
			ST7735_FillScreen(ST7735_BLACK);
 8000b92:	2000      	movs	r0, #0
 8000b94:	f001 fe30 	bl	80027f8 <ST7735_FillScreen>
			ST7735_FillScreen1(ST7735_BLACK);
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f001 fe3e 	bl	800281a <ST7735_FillScreen1>
			MainGUI();
 8000b9e:	f000 fe2d 	bl	80017fc <MainGUI>
			state_game->player_state = first_player;
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	f883 232c 	strb.w	r2, [r3, #812]	; 0x32c
		break;
 8000baa:	e064      	b.n	8000c76 <GAME_PLAY_Management+0x4aa>
			state_game->test = 98;
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2262      	movs	r2, #98	; 0x62
 8000bb0:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
		break;
 8000bb4:	e05f      	b.n	8000c76 <GAME_PLAY_Management+0x4aa>
		if (state_game -> F_flag == 0){
 8000bb6:	683b      	ldr	r3, [r7, #0]
 8000bb8:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d125      	bne.n	8000c0c <GAME_PLAY_Management+0x440>
			ST7735_WriteString1(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000bc0:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <GAME_PLAY_Management+0x4c0>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	9202      	str	r2, [sp, #8]
 8000bc6:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000bca:	9201      	str	r2, [sp, #4]
 8000bcc:	685a      	ldr	r2, [r3, #4]
 8000bce:	9200      	str	r2, [sp, #0]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a31      	ldr	r2, [pc, #196]	; (8000c98 <GAME_PLAY_Management+0x4cc>)
 8000bd4:	215a      	movs	r1, #90	; 0x5a
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f001 fcdb 	bl	8002592 <ST7735_WriteString1>
			HAL_Delay(2000);
 8000bdc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000be0:	f002 f9e6 	bl	8002fb0 <HAL_Delay>
			ST7735_FillRectangle1(0, 90, 128,128-90,ST7735_BLACK);
 8000be4:	2300      	movs	r3, #0
 8000be6:	9300      	str	r3, [sp, #0]
 8000be8:	2326      	movs	r3, #38	; 0x26
 8000bea:	2280      	movs	r2, #128	; 0x80
 8000bec:	215a      	movs	r1, #90	; 0x5a
 8000bee:	2000      	movs	r0, #0
 8000bf0:	f001 fd8e 	bl	8002710 <ST7735_FillRectangle1>
			state_game->F_flag += 1;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	f893 3331 	ldrb.w	r3, [r3, #817]	; 0x331
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
			state_game->S_flag = 0;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2200      	movs	r2, #0
 8000c08:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000c0c:	6839      	ldr	r1, [r7, #0]
 8000c0e:	6878      	ldr	r0, [r7, #4]
 8000c10:	f000 f844 	bl	8000c9c <GAME_PLAY_Phase_Management>
		break;
 8000c14:	e02f      	b.n	8000c76 <GAME_PLAY_Management+0x4aa>
		if (state_game -> S_flag == 0){
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d125      	bne.n	8000c6c <GAME_PLAY_Management+0x4a0>
			ST7735_WriteString(15, 90, "Your TURN", Font_11x18, ST7735_YELLOW, ST7735_BLACK);
 8000c20:	4b1a      	ldr	r3, [pc, #104]	; (8000c8c <GAME_PLAY_Management+0x4c0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	9202      	str	r2, [sp, #8]
 8000c26:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c2a:	9201      	str	r2, [sp, #4]
 8000c2c:	685a      	ldr	r2, [r3, #4]
 8000c2e:	9200      	str	r2, [sp, #0]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	4a19      	ldr	r2, [pc, #100]	; (8000c98 <GAME_PLAY_Management+0x4cc>)
 8000c34:	215a      	movs	r1, #90	; 0x5a
 8000c36:	200f      	movs	r0, #15
 8000c38:	f001 fc61 	bl	80024fe <ST7735_WriteString>
			HAL_Delay(2000);
 8000c3c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000c40:	f002 f9b6 	bl	8002fb0 <HAL_Delay>
			ST7735_FillRectangle(0, 90, 128,128-90,ST7735_BLACK);
 8000c44:	2300      	movs	r3, #0
 8000c46:	9300      	str	r3, [sp, #0]
 8000c48:	2326      	movs	r3, #38	; 0x26
 8000c4a:	2280      	movs	r2, #128	; 0x80
 8000c4c:	215a      	movs	r1, #90	; 0x5a
 8000c4e:	2000      	movs	r0, #0
 8000c50:	f001 fcea 	bl	8002628 <ST7735_FillRectangle>
			state_game->S_flag += 1;
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	f893 3332 	ldrb.w	r3, [r3, #818]	; 0x332
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	b2da      	uxtb	r2, r3
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	f883 2332 	strb.w	r2, [r3, #818]	; 0x332
			state_game->F_flag = 0;
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	2200      	movs	r2, #0
 8000c68:	f883 2331 	strb.w	r2, [r3, #817]	; 0x331
		GAME_PLAY_Phase_Management(RFIDmain,state_game);
 8000c6c:	6839      	ldr	r1, [r7, #0]
 8000c6e:	6878      	ldr	r0, [r7, #4]
 8000c70:	f000 f814 	bl	8000c9c <GAME_PLAY_Phase_Management>
		break;
 8000c74:	bf00      	nop
}
 8000c76:	bf00      	nop
 8000c78:	3718      	adds	r7, #24
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	0800be0c 	.word	0x0800be0c
 8000c84:	24000008 	.word	0x24000008
 8000c88:	0800be60 	.word	0x0800be60
 8000c8c:	24000010 	.word	0x24000010
 8000c90:	0800be6c 	.word	0x0800be6c
 8000c94:	0800be7c 	.word	0x0800be7c
 8000c98:	0800be84 	.word	0x0800be84

08000c9c <GAME_PLAY_Phase_Management>:

void GAME_PLAY_Phase_Management(RFIDHandle *RFIDmain, State_game *state_game)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b090      	sub	sp, #64	; 0x40
 8000ca0:	af04      	add	r7, sp, #16
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	6039      	str	r1, [r7, #0]
	enum _STATE {
		Drawn_Phase, Main_Phase, Battle_Phase, Chain_Phase
	} STATE;
	STATE = state_game->STATE;
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	f893 332d 	ldrb.w	r3, [r3, #813]	; 0x32d
 8000cac:	76bb      	strb	r3, [r7, #26]

	enum _MAIN {
		await,select_position, check_card_type, advance_summon, activate_effect,chaining_main_ATK,chaining_main_DEF
	} MAIN;
	MAIN = state_game->MAIN;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f893 332f 	ldrb.w	r3, [r3, #815]	; 0x32f
 8000cb4:	767b      	strb	r3, [r7, #25]

    enum _BATTLE {
    	selection, counter_ATK,counter_DEF, chain_effect,calculate_damage, after_calculate
    } BATTLE;
    BATTLE = state_game->BATTLE;
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	f893 332e 	ldrb.w	r3, [r3, #814]	; 0x32e
 8000cbc:	763b      	strb	r3, [r7, #24]

	// Player
	Player *ptrPlayerAtk = state_game->player;
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	3304      	adds	r3, #4
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
	Player *ptrPlayerDef = state_game->player;
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	3304      	adds	r3, #4
 8000cc8:	62bb      	str	r3, [r7, #40]	; 0x28

	if (state_game->player_state == first_player) {
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d107      	bne.n	8000ce4 <GAME_PLAY_Phase_Management+0x48>
		ptrPlayerAtk = &state_game->player[0];
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[1];
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ce2:	e00b      	b.n	8000cfc <GAME_PLAY_Phase_Management+0x60>
	} else if (state_game->player_state == first_player) {
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d106      	bne.n	8000cfc <GAME_PLAY_Phase_Management+0x60>
		ptrPlayerAtk = &state_game->player[1];
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	f503 73cc 	add.w	r3, r3, #408	; 0x198
 8000cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
		ptrPlayerDef = &state_game->player[0];
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	3304      	adds	r3, #4
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28

	// Card PTR
	YUGIOH_Card *ptrYugiohCard_src;
	YUGIOH_Card *ptrYugiohCard_dst;

	switch (STATE) {
 8000cfc:	7ebb      	ldrb	r3, [r7, #26]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	f200 84a4 	bhi.w	800164c <GAME_PLAY_Phase_Management+0x9b0>
 8000d04:	a201      	add	r2, pc, #4	; (adr r2, 8000d0c <GAME_PLAY_Phase_Management+0x70>)
 8000d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d0a:	bf00      	nop
 8000d0c:	08000d1d 	.word	0x08000d1d
 8000d10:	08000e49 	.word	0x08000e49
 8000d14:	08001409 	.word	0x08001409
 8000d18:	08001643 	.word	0x08001643
	case Drawn_Phase:
		//		ST7735_FillScreen(ST7735_BLACK);
		//		ST7735_FillScreen1(ST7735_BLACK);
		//		// MAIN display for draw phase state
		sprintf(C_LP2, "%d",ptrPlayerDef -> life_point);
 8000d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d1e:	885b      	ldrh	r3, [r3, #2]
 8000d20:	461a      	mov	r2, r3
 8000d22:	49a3      	ldr	r1, [pc, #652]	; (8000fb0 <GAME_PLAY_Phase_Management+0x314>)
 8000d24:	48a3      	ldr	r0, [pc, #652]	; (8000fb4 <GAME_PLAY_Phase_Management+0x318>)
 8000d26:	f00a fce1 	bl	800b6ec <siprintf>
		ST7735_WriteString( 90, 20, C_LP2, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d2a:	4ba3      	ldr	r3, [pc, #652]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	9202      	str	r2, [sp, #8]
 8000d30:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d34:	9201      	str	r2, [sp, #4]
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	9200      	str	r2, [sp, #0]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a9d      	ldr	r2, [pc, #628]	; (8000fb4 <GAME_PLAY_Phase_Management+0x318>)
 8000d3e:	2114      	movs	r1, #20
 8000d40:	205a      	movs	r0, #90	; 0x5a
 8000d42:	f001 fbdc 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000d46:	4b9c      	ldr	r3, [pc, #624]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	9202      	str	r2, [sp, #8]
 8000d4c:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000d50:	9201      	str	r2, [sp, #4]
 8000d52:	685a      	ldr	r2, [r3, #4]
 8000d54:	9200      	str	r2, [sp, #0]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a98      	ldr	r2, [pc, #608]	; (8000fbc <GAME_PLAY_Phase_Management+0x320>)
 8000d5a:	2123      	movs	r1, #35	; 0x23
 8000d5c:	203c      	movs	r0, #60	; 0x3c
 8000d5e:	f001 fbce 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000d62:	4b95      	ldr	r3, [pc, #596]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	9202      	str	r2, [sp, #8]
 8000d68:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000d6c:	9201      	str	r2, [sp, #4]
 8000d6e:	685a      	ldr	r2, [r3, #4]
 8000d70:	9200      	str	r2, [sp, #0]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a92      	ldr	r2, [pc, #584]	; (8000fc0 <GAME_PLAY_Phase_Management+0x324>)
 8000d76:	2132      	movs	r1, #50	; 0x32
 8000d78:	2069      	movs	r0, #105	; 0x69
 8000d7a:	f001 fbc0 	bl	80024fe <ST7735_WriteString>
		ST7735_WriteString(5, 90, "Wait a minute", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000d7e:	4b8e      	ldr	r3, [pc, #568]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	9202      	str	r2, [sp, #8]
 8000d84:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d88:	9201      	str	r2, [sp, #4]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	9200      	str	r2, [sp, #0]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a8c      	ldr	r2, [pc, #560]	; (8000fc4 <GAME_PLAY_Phase_Management+0x328>)
 8000d92:	215a      	movs	r1, #90	; 0x5a
 8000d94:	2005      	movs	r0, #5
 8000d96:	f001 fbb2 	bl	80024fe <ST7735_WriteString>
		sprintf(C_LP1, "%d",ptrPlayerAtk -> life_point);
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	885b      	ldrh	r3, [r3, #2]
 8000d9e:	461a      	mov	r2, r3
 8000da0:	4983      	ldr	r1, [pc, #524]	; (8000fb0 <GAME_PLAY_Phase_Management+0x314>)
 8000da2:	4889      	ldr	r0, [pc, #548]	; (8000fc8 <GAME_PLAY_Phase_Management+0x32c>)
 8000da4:	f00a fca2 	bl	800b6ec <siprintf>
		ST7735_WriteString1( 90, 20, C_LP1, Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000da8:	4b83      	ldr	r3, [pc, #524]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	9202      	str	r2, [sp, #8]
 8000dae:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000db2:	9201      	str	r2, [sp, #4]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	9200      	str	r2, [sp, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	4a83      	ldr	r2, [pc, #524]	; (8000fc8 <GAME_PLAY_Phase_Management+0x32c>)
 8000dbc:	2114      	movs	r1, #20
 8000dbe:	205a      	movs	r0, #90	; 0x5a
 8000dc0:	f001 fbe7 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(60, 35, "|Phase:DP", Font_7x10, ST7735_CYAN, ST7735_BLACK);
 8000dc4:	4b7c      	ldr	r3, [pc, #496]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	9202      	str	r2, [sp, #8]
 8000dca:	f64f 72e0 	movw	r2, #65504	; 0xffe0
 8000dce:	9201      	str	r2, [sp, #4]
 8000dd0:	685a      	ldr	r2, [r3, #4]
 8000dd2:	9200      	str	r2, [sp, #0]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	4a79      	ldr	r2, [pc, #484]	; (8000fbc <GAME_PLAY_Phase_Management+0x320>)
 8000dd8:	2123      	movs	r1, #35	; 0x23
 8000dda:	203c      	movs	r0, #60	; 0x3c
 8000ddc:	f001 fbd9 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1( 105, 50, "180", Font_7x10, ST7735_GREEN, ST7735_BLACK);
 8000de0:	4b75      	ldr	r3, [pc, #468]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	9202      	str	r2, [sp, #8]
 8000de6:	f44f 62fc 	mov.w	r2, #2016	; 0x7e0
 8000dea:	9201      	str	r2, [sp, #4]
 8000dec:	685a      	ldr	r2, [r3, #4]
 8000dee:	9200      	str	r2, [sp, #0]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a73      	ldr	r2, [pc, #460]	; (8000fc0 <GAME_PLAY_Phase_Management+0x324>)
 8000df4:	2132      	movs	r1, #50	; 0x32
 8000df6:	2069      	movs	r0, #105	; 0x69
 8000df8:	f001 fbcb 	bl	8002592 <ST7735_WriteString1>
		ST7735_WriteString1(5, 90, "Draw a CARD", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8000dfc:	4b6e      	ldr	r3, [pc, #440]	; (8000fb8 <GAME_PLAY_Phase_Management+0x31c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	9202      	str	r2, [sp, #8]
 8000e02:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e06:	9201      	str	r2, [sp, #4]
 8000e08:	685a      	ldr	r2, [r3, #4]
 8000e0a:	9200      	str	r2, [sp, #0]
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	4a6f      	ldr	r2, [pc, #444]	; (8000fcc <GAME_PLAY_Phase_Management+0x330>)
 8000e10:	215a      	movs	r1, #90	; 0x5a
 8000e12:	2005      	movs	r0, #5
 8000e14:	f001 fbbd 	bl	8002592 <ST7735_WriteString1>
		// END display for draw phase state
		if (HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000e18:	2101      	movs	r1, #1
 8000e1a:	486d      	ldr	r0, [pc, #436]	; (8000fd0 <GAME_PLAY_Phase_Management+0x334>)
 8000e1c:	f005 fa16 	bl	800624c <HAL_GPIO_ReadPin>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	f040 840f 	bne.w	8001646 <GAME_PLAY_Phase_Management+0x9aa>
				== GPIO_PIN_RESET) {
			state_game->STATE = Main_Phase;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	2201      	movs	r2, #1
 8000e2c:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
			state_game->MAIN = await;
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			// Wait for card to be read State = 0 Mean AFK
			state_game->action = 0;
 8000e38:	683b      	ldr	r3, [r7, #0]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	701a      	strb	r2, [r3, #0]
			HAL_Delay(1500);
 8000e3e:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8000e42:	f002 f8b5 	bl	8002fb0 <HAL_Delay>
		}
		break;
 8000e46:	e3fe      	b.n	8001646 <GAME_PLAY_Phase_Management+0x9aa>
	case Main_Phase:

		switch (MAIN)
 8000e48:	7e7b      	ldrb	r3, [r7, #25]
 8000e4a:	2b06      	cmp	r3, #6
 8000e4c:	f200 83fd 	bhi.w	800164a <GAME_PLAY_Phase_Management+0x9ae>
 8000e50:	a201      	add	r2, pc, #4	; (adr r2, 8000e58 <GAME_PLAY_Phase_Management+0x1bc>)
 8000e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e56:	bf00      	nop
 8000e58:	08000e75 	.word	0x08000e75
 8000e5c:	08000eb9 	.word	0x08000eb9
 8000e60:	08000fdd 	.word	0x08000fdd
 8000e64:	080011a3 	.word	0x080011a3
 8000e68:	08001363 	.word	0x08001363
 8000e6c:	08001315 	.word	0x08001315
 8000e70:	080012b1 	.word	0x080012b1
		{
		case await:
			if (state_game->action == 0)
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d113      	bne.n	8000ea4 <GAME_PLAY_Phase_Management+0x208>
			{
				// Reading Until RFID action = 1 Mean Card Detected
				if(HAL_GPIO_ReadPin(TURN_BUTTON_PORT, TURN_BUTTON_PIN)
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	4854      	ldr	r0, [pc, #336]	; (8000fd0 <GAME_PLAY_Phase_Management+0x334>)
 8000e80:	f005 f9e4 	bl	800624c <HAL_GPIO_ReadPin>
 8000e84:	4603      	mov	r3, r0
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d106      	bne.n	8000e98 <GAME_PLAY_Phase_Management+0x1fc>
						== GPIO_PIN_RESET){
					state_game->action =50;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	2232      	movs	r2, #50	; 0x32
 8000e8e:	701a      	strb	r2, [r3, #0]
					state_game->STATE = Battle_Phase;
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	2202      	movs	r2, #2
 8000e94:	f883 232d 	strb.w	r2, [r3, #813]	; 0x32d
				}
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 8000e98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e9a:	6839      	ldr	r1, [r7, #0]
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f000 fbd9 	bl	8001654 <Player_Reading_Card>
			}
			else if (state_game->action == 1)
			{
				state_game->MAIN = select_position;
			}
			break;
 8000ea2:	e2a3      	b.n	80013ec <GAME_PLAY_Phase_Management+0x750>
			else if (state_game->action == 1)
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	f040 829f 	bne.w	80013ec <GAME_PLAY_Phase_Management+0x750>
				state_game->MAIN = select_position;
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2201      	movs	r2, #1
 8000eb2:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000eb6:	e299      	b.n	80013ec <GAME_PLAY_Phase_Management+0x750>
		case select_position:

			// Current state_game->action = 1
			ptrYugiohCard_src = &ptrPlayerAtk->ChainBuffer[0];
 8000eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eba:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8000ebe:	617b      	str	r3, [r7, #20]
			ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8000ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec2:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000ec6:	627b      	str	r3, [r7, #36]	; 0x24

			if (state_game->action == 1)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d15e      	bne.n	8000f8e <GAME_PLAY_Phase_Management+0x2f2>
			{
				if (state_game->player_state == first_player)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000ed6:	2b01      	cmp	r3, #1
 8000ed8:	d135      	bne.n	8000f46 <GAME_PLAY_Phase_Management+0x2aa>
				{
					if(HAL_GPIO_ReadPin(YES1_PORT, YES1_PIN) == GPIO_PIN_RESET)
 8000eda:	2108      	movs	r1, #8
 8000edc:	483c      	ldr	r0, [pc, #240]	; (8000fd0 <GAME_PLAY_Phase_Management+0x334>)
 8000ede:	f005 f9b5 	bl	800624c <HAL_GPIO_ReadPin>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d106      	bne.n	8000ef6 <GAME_PLAY_Phase_Management+0x25a>
					{
						ptrYugiohCard_src->cardState = 1;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	2201      	movs	r2, #1
 8000eec:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	701a      	strb	r2, [r3, #0]
			{
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
				state_game->action = 3;
				state_game->MAIN = check_card_type;
			}
			break;
 8000ef4:	e27c      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET)
 8000ef6:	2102      	movs	r1, #2
 8000ef8:	4836      	ldr	r0, [pc, #216]	; (8000fd4 <GAME_PLAY_Phase_Management+0x338>)
 8000efa:	f005 f9a7 	bl	800624c <HAL_GPIO_ReadPin>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d106      	bne.n	8000f12 <GAME_PLAY_Phase_Management+0x276>
						ptrYugiohCard_src->cardState = 0;
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	2200      	movs	r2, #0
 8000f08:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	701a      	strb	r2, [r3, #0]
			break;
 8000f10:	e26e      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000f12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f16:	4830      	ldr	r0, [pc, #192]	; (8000fd8 <GAME_PLAY_Phase_Management+0x33c>)
 8000f18:	f005 f998 	bl	800624c <HAL_GPIO_ReadPin>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d104      	bne.n	8000f2c <GAME_PLAY_Phase_Management+0x290>
						state_game->test = 22;
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	2216      	movs	r2, #22
 8000f26:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000f2a:	e261      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000f2c:	2104      	movs	r1, #4
 8000f2e:	4828      	ldr	r0, [pc, #160]	; (8000fd0 <GAME_PLAY_Phase_Management+0x334>)
 8000f30:	f005 f98c 	bl	800624c <HAL_GPIO_ReadPin>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	f040 825a 	bne.w	80013f0 <GAME_PLAY_Phase_Management+0x754>
						state_game->test = 33;
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	2221      	movs	r2, #33	; 0x21
 8000f40:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			break;
 8000f44:	e254      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
				else if (state_game->player_state == second_player)
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	f893 332c 	ldrb.w	r3, [r3, #812]	; 0x32c
 8000f4c:	2b02      	cmp	r3, #2
 8000f4e:	f040 824f 	bne.w	80013f0 <GAME_PLAY_Phase_Management+0x754>
					if(HAL_GPIO_ReadPin(YES2_PORT, YES2_PIN) == GPIO_PIN_RESET)
 8000f52:	2104      	movs	r1, #4
 8000f54:	481e      	ldr	r0, [pc, #120]	; (8000fd0 <GAME_PLAY_Phase_Management+0x334>)
 8000f56:	f005 f979 	bl	800624c <HAL_GPIO_ReadPin>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d106      	bne.n	8000f6e <GAME_PLAY_Phase_Management+0x2d2>
						ptrYugiohCard_src->cardState = 1;
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	2201      	movs	r2, #1
 8000f64:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	2202      	movs	r2, #2
 8000f6a:	701a      	strb	r2, [r3, #0]
			break;
 8000f6c:	e240      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
					else if (HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET)
 8000f6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f72:	4819      	ldr	r0, [pc, #100]	; (8000fd8 <GAME_PLAY_Phase_Management+0x33c>)
 8000f74:	f005 f96a 	bl	800624c <HAL_GPIO_ReadPin>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	f040 8238 	bne.w	80013f0 <GAME_PLAY_Phase_Management+0x754>
						ptrYugiohCard_src->cardState = 0;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	2200      	movs	r2, #0
 8000f84:	709a      	strb	r2, [r3, #2]
						state_game->action = 2;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	2202      	movs	r2, #2
 8000f8a:	701a      	strb	r2, [r3, #0]
			break;
 8000f8c:	e230      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
			else if (state_game->action == 2)
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	781b      	ldrb	r3, [r3, #0]
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	f040 822c 	bne.w	80013f0 <GAME_PLAY_Phase_Management+0x754>
				YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8000f98:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f9a:	6978      	ldr	r0, [r7, #20]
 8000f9c:	f7ff fb72 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 3;
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = check_card_type;
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	2202      	movs	r2, #2
 8000faa:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8000fae:	e21f      	b.n	80013f0 <GAME_PLAY_Phase_Management+0x754>
 8000fb0:	0800be90 	.word	0x0800be90
 8000fb4:	24000164 	.word	0x24000164
 8000fb8:	24000008 	.word	0x24000008
 8000fbc:	0800be94 	.word	0x0800be94
 8000fc0:	0800be5c 	.word	0x0800be5c
 8000fc4:	0800bea0 	.word	0x0800bea0
 8000fc8:	24000160 	.word	0x24000160
 8000fcc:	0800beb0 	.word	0x0800beb0
 8000fd0:	58020800 	.word	0x58020800
 8000fd4:	58020400 	.word	0x58020400
 8000fd8:	58021400 	.word	0x58021400
		case check_card_type:
			// Current state_game->action = 3

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 8000fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fde:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8000fe2:	617b      	str	r3, [r7, #20]

			if (state_game->action == 3)
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	781b      	ldrb	r3, [r3, #0]
 8000fe8:	2b03      	cmp	r3, #3
 8000fea:	f040 8203 	bne.w	80013f4 <GAME_PLAY_Phase_Management+0x758>
			{
				if (ptrYugiohCard_src->cardType == 3)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	785b      	ldrb	r3, [r3, #1]
 8000ff2:	2b03      	cmp	r3, #3
 8000ff4:	d12a      	bne.n	800104c <GAME_PLAY_Phase_Management+0x3b0>
				{
					// Add card to board
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8000ff6:	697b      	ldr	r3, [r7, #20]
 8000ff8:	799a      	ldrb	r2, [r3, #6]
 8000ffa:	4bac      	ldr	r3, [pc, #688]	; (80012ac <GAME_PLAY_Phase_Management+0x610>)
 8000ffc:	fba3 1302 	umull	r1, r3, r3, r2
 8001000:	0899      	lsrs	r1, r3, #2
 8001002:	460b      	mov	r3, r1
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	440b      	add	r3, r1
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	1ad3      	subs	r3, r2, r3
 800100c:	72fb      	strb	r3, [r7, #11]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 800100e:	7afa      	ldrb	r2, [r7, #11]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800101a:	4413      	add	r3, r2
 800101c:	3304      	adds	r3, #4
 800101e:	627b      	str	r3, [r7, #36]	; 0x24

					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001022:	6978      	ldr	r0, [r7, #20]
 8001024:	f7ff fb2e 	bl	8000684 <YUGIOH_card_copy>

					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001028:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800102a:	f7ff fb7e 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 800102e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001030:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001034:	6979      	ldr	r1, [r7, #20]
 8001036:	4618      	mov	r0, r3
 8001038:	f7ff fb24 	bl	8000684 <YUGIOH_card_copy>

					state_game->action = 0;
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	2200      	movs	r2, #0
 8001040:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	2200      	movs	r2, #0
 8001046:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
						state_game->action = 4;
						state_game->MAIN = advance_summon;
					}
				}
			}
			break;
 800104a:	e1d3      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x758>
				else if (ptrYugiohCard_src->cardType == 2)
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	785b      	ldrb	r3, [r3, #1]
 8001050:	2b02      	cmp	r3, #2
 8001052:	d144      	bne.n	80010de <GAME_PLAY_Phase_Management+0x442>
					state_game->count_chain = 1;
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	705a      	strb	r2, [r3, #1]
					if(ptrYugiohCard_src->standPosition == 1){
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	799b      	ldrb	r3, [r3, #6]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d112      	bne.n	8001088 <GAME_PLAY_Phase_Management+0x3ec>
						state_game->test = 33;
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	2221      	movs	r2, #33	; 0x21
 8001066:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800106a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800106c:	f7ff fb5d 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2204      	movs	r2, #4
 8001074:	701a      	strb	r2, [r3, #0]
						ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8001076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001078:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 800107c:	627b      	str	r3, [r7, #36]	; 0x24
						state_game->MAIN = chaining_main_DEF;
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	2206      	movs	r2, #6
 8001082:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 8001086:	e1b5      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x758>
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	799a      	ldrb	r2, [r3, #6]
 800108c:	4b87      	ldr	r3, [pc, #540]	; (80012ac <GAME_PLAY_Phase_Management+0x610>)
 800108e:	fba3 1302 	umull	r1, r3, r3, r2
 8001092:	0899      	lsrs	r1, r3, #2
 8001094:	460b      	mov	r3, r1
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	440b      	add	r3, r1
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	1ad3      	subs	r3, r2, r3
 800109e:	733b      	strb	r3, [r7, #12]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 80010a0:	7b3a      	ldrb	r2, [r7, #12]
 80010a2:	4613      	mov	r3, r2
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	4413      	add	r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ac:	4413      	add	r3, r2
 80010ae:	3304      	adds	r3, #4
 80010b0:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 80010b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80010b4:	6978      	ldr	r0, [r7, #20]
 80010b6:	f7ff fae5 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80010ba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80010bc:	f7ff fb35 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80010c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80010c2:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80010c6:	6979      	ldr	r1, [r7, #20]
 80010c8:	4618      	mov	r0, r3
 80010ca:	f7ff fadb 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	2200      	movs	r2, #0
 80010d2:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	2200      	movs	r2, #0
 80010d8:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 80010dc:	e18a      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x758>
				else if (ptrYugiohCard_src->cardType == 1)
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	785b      	ldrb	r3, [r3, #1]
 80010e2:	2b01      	cmp	r3, #1
 80010e4:	f040 8186 	bne.w	80013f4 <GAME_PLAY_Phase_Management+0x758>
					state_game->test = 2;
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	2202      	movs	r2, #2
 80010ec:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
					if (ptrYugiohCard_src->cardLevel < 7)
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	78db      	ldrb	r3, [r3, #3]
 80010f4:	2b06      	cmp	r3, #6
 80010f6:	d849      	bhi.n	800118c <GAME_PLAY_Phase_Management+0x4f0>
						state_game->test = 1;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	2201      	movs	r2, #1
 80010fc:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	799a      	ldrb	r2, [r3, #6]
 8001104:	4b69      	ldr	r3, [pc, #420]	; (80012ac <GAME_PLAY_Phase_Management+0x610>)
 8001106:	fba3 1302 	umull	r1, r3, r3, r2
 800110a:	0899      	lsrs	r1, r3, #2
 800110c:	460b      	mov	r3, r1
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	440b      	add	r3, r1
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	737b      	strb	r3, [r7, #13]
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001118:	7b7a      	ldrb	r2, [r7, #13]
 800111a:	4613      	mov	r3, r2
 800111c:	005b      	lsls	r3, r3, #1
 800111e:	4413      	add	r3, r2
 8001120:	009b      	lsls	r3, r3, #2
 8001122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001124:	4413      	add	r3, r2
 8001126:	3304      	adds	r3, #4
 8001128:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 800112a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800112c:	6978      	ldr	r0, [r7, #20]
 800112e:	f7ff faa9 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[4];
 8001132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001134:	3334      	adds	r3, #52	; 0x34
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff faa2 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[idx];
 8001140:	7b7a      	ldrb	r2, [r7, #13]
 8001142:	4613      	mov	r3, r2
 8001144:	005b      	lsls	r3, r3, #1
 8001146:	4413      	add	r3, r2
 8001148:	009b      	lsls	r3, r3, #2
 800114a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800114c:	4413      	add	r3, r2
 800114e:	3304      	adds	r3, #4
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001152:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001154:	6978      	ldr	r0, [r7, #20]
 8001156:	f7ff fa95 	bl	8000684 <YUGIOH_card_copy>
						ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[4];
 800115a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800115c:	3334      	adds	r3, #52	; 0x34
 800115e:	627b      	str	r3, [r7, #36]	; 0x24
						YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001162:	6978      	ldr	r0, [r7, #20]
 8001164:	f7ff fa8e 	bl	8000684 <YUGIOH_card_copy>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 8001168:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800116a:	f7ff fade 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 800116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001170:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001174:	6979      	ldr	r1, [r7, #20]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fa84 	bl	8000684 <YUGIOH_card_copy>
						state_game->action = 0;
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	2200      	movs	r2, #0
 8001180:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = await;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2200      	movs	r2, #0
 8001186:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 800118a:	e133      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x758>
						YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800118c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800118e:	f7ff facc 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
						state_game->action = 4;
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	2204      	movs	r2, #4
 8001196:	701a      	strb	r2, [r3, #0]
						state_game->MAIN = advance_summon;
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	2203      	movs	r2, #3
 800119c:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			break;
 80011a0:	e128      	b.n	80013f4 <GAME_PLAY_Phase_Management+0x758>
		case advance_summon:
			// Current state_game->action = 4

			ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 80011a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011a4:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80011a8:	617b      	str	r3, [r7, #20]

			if (state_game->action == 4)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d105      	bne.n	80011be <GAME_PLAY_Phase_Management+0x522>
			{
				// Reading Until RFID action += 1 Mean Card Detected
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80011b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011b4:	6839      	ldr	r1, [r7, #0]
 80011b6:	6878      	ldr	r0, [r7, #4]
 80011b8:	f000 fa4c 	bl	8001654 <Player_Reading_Card>
				{
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
				}
			}
				break;
 80011bc:	e11c      	b.n	80013f8 <GAME_PLAY_Phase_Management+0x75c>
			else if (state_game->action == 5)
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	781b      	ldrb	r3, [r3, #0]
 80011c2:	2b05      	cmp	r3, #5
 80011c4:	d105      	bne.n	80011d2 <GAME_PLAY_Phase_Management+0x536>
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80011c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80011c8:	6839      	ldr	r1, [r7, #0]
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 fa42 	bl	8001654 <Player_Reading_Card>
				break;
 80011d0:	e112      	b.n	80013f8 <GAME_PLAY_Phase_Management+0x75c>
			else if (state_game->action == 6)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b06      	cmp	r3, #6
 80011d8:	f040 810e 	bne.w	80013f8 <GAME_PLAY_Phase_Management+0x75c>
				uint8_t monsterflag = 0 ;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 80011e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011e4:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80011e8:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 80011ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ec:	78db      	ldrb	r3, [r3, #3]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d804      	bhi.n	80011fc <GAME_PLAY_Phase_Management+0x560>
					monsterflag += 1;
 80011f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80011f6:	3301      	adds	r3, #1
 80011f8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				ptrYugiohCard_dst++;
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	330c      	adds	r3, #12
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
				if (ptrYugiohCard_dst->cardLevel <= 4)
 8001202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001204:	78db      	ldrb	r3, [r3, #3]
 8001206:	2b04      	cmp	r3, #4
 8001208:	d804      	bhi.n	8001214 <GAME_PLAY_Phase_Management+0x578>
					monsterflag += 1;
 800120a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800120e:	3301      	adds	r3, #1
 8001210:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
				if (monsterflag == 2)
 8001214:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001218:	2b02      	cmp	r3, #2
 800121a:	d138      	bne.n	800128e <GAME_PLAY_Phase_Management+0x5f2>
					uint8_t idx = ptrYugiohCard_src->standPosition % 6;
 800121c:	697b      	ldr	r3, [r7, #20]
 800121e:	799a      	ldrb	r2, [r3, #6]
 8001220:	4b22      	ldr	r3, [pc, #136]	; (80012ac <GAME_PLAY_Phase_Management+0x610>)
 8001222:	fba3 1302 	umull	r1, r3, r3, r2
 8001226:	0899      	lsrs	r1, r3, #2
 8001228:	460b      	mov	r3, r1
 800122a:	005b      	lsls	r3, r3, #1
 800122c:	440b      	add	r3, r1
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	73bb      	strb	r3, [r7, #14]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[idx];
 8001234:	7bba      	ldrb	r2, [r7, #14]
 8001236:	4613      	mov	r3, r2
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	4413      	add	r3, r2
 800123c:	009b      	lsls	r3, r3, #2
 800123e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001240:	4413      	add	r3, r2
 8001242:	3304      	adds	r3, #4
 8001244:	627b      	str	r3, [r7, #36]	; 0x24
					YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001246:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001248:	6978      	ldr	r0, [r7, #20]
 800124a:	f7ff fa1b 	bl	8000684 <YUGIOH_card_copy>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[0]);
 800124e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001250:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001254:	4619      	mov	r1, r3
 8001256:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001258:	f000 fa90 	bl	800177c <YUGIOH_To_GY>
					YUGIOH_To_GY(ptrPlayerAtk,&ptrPlayerAtk->ChainBuffer[1]);
 800125c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800125e:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8001262:	4619      	mov	r1, r3
 8001264:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001266:	f000 fa89 	bl	800177c <YUGIOH_To_GY>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800126a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800126c:	f7ff fa5d 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 8001270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001272:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001276:	6979      	ldr	r1, [r7, #20]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff fa03 	bl	8000684 <YUGIOH_card_copy>
					state_game->action = 0;
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	2200      	movs	r2, #0
 8001282:	701a      	strb	r2, [r3, #0]
					state_game->MAIN = await;
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				break;
 800128c:	e0b4      	b.n	80013f8 <GAME_PLAY_Phase_Management+0x75c>
					YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 800128e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001290:	f7ff fa4b 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
					YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], &ptrPlayerAtk->CardInPlayed);
 8001294:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001296:	f503 729e 	add.w	r2, r3, #316	; 0x13c
 800129a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800129c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80012a0:	4619      	mov	r1, r3
 80012a2:	4610      	mov	r0, r2
 80012a4:	f7ff f9ee 	bl	8000684 <YUGIOH_card_copy>
				break;
 80012a8:	e0a6      	b.n	80013f8 <GAME_PLAY_Phase_Management+0x75c>
 80012aa:	bf00      	nop
 80012ac:	aaaaaaab 	.word	0xaaaaaaab
		case chaining_main_DEF:
			state_game->test = 34;
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	2222      	movs	r2, #34	; 0x22
 80012b4:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
			if(state_game->action == 4)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d116      	bne.n	80012ee <GAME_PLAY_Phase_Management+0x652>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80012c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012c2:	6839      	ldr	r1, [r7, #0]
 80012c4:	6878      	ldr	r0, [r7, #4]
 80012c6:	f000 f9c5 	bl	8001654 <Player_Reading_Card>
				state_game->test = 35;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	2223      	movs	r2, #35	; 0x23
 80012ce:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
				if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 80012d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012d6:	48a3      	ldr	r0, [pc, #652]	; (8001564 <GAME_PLAY_Phase_Management+0x8c8>)
 80012d8:	f004 ffb8 	bl	800624c <HAL_GPIO_ReadPin>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	f040 808c 	bne.w	80013fc <GAME_PLAY_Phase_Management+0x760>
					state_game->MAIN = activate_effect;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2204      	movs	r2, #4
 80012e8:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				//				ptrYugiohCard_dst++;
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_ATK;
				state_game->action = 4;
			}
			break;
 80012ec:	e086      	b.n	80013fc <GAME_PLAY_Phase_Management+0x760>
			else if ((state_game->action == 5 )){
 80012ee:	683b      	ldr	r3, [r7, #0]
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	2b05      	cmp	r3, #5
 80012f4:	f040 8082 	bne.w	80013fc <GAME_PLAY_Phase_Management+0x760>
				state_game->count_chain += 1;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	785b      	ldrb	r3, [r3, #1]
 80012fc:	3301      	adds	r3, #1
 80012fe:	b2da      	uxtb	r2, r3
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_ATK;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	2205      	movs	r2, #5
 8001308:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	2204      	movs	r2, #4
 8001310:	701a      	strb	r2, [r3, #0]
			break;
 8001312:	e073      	b.n	80013fc <GAME_PLAY_Phase_Management+0x760>
		case chaining_main_ATK:
			if(state_game->action == 4)
 8001314:	683b      	ldr	r3, [r7, #0]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b04      	cmp	r3, #4
 800131a:	d110      	bne.n	800133e <GAME_PLAY_Phase_Management+0x6a2>
			{
				Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 800131c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800131e:	6839      	ldr	r1, [r7, #0]
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f997 	bl	8001654 <Player_Reading_Card>
				if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 8001326:	2102      	movs	r1, #2
 8001328:	488f      	ldr	r0, [pc, #572]	; (8001568 <GAME_PLAY_Phase_Management+0x8cc>)
 800132a:	f004 ff8f 	bl	800624c <HAL_GPIO_ReadPin>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d165      	bne.n	8001400 <GAME_PLAY_Phase_Management+0x764>
					state_game->MAIN = activate_effect;
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	2204      	movs	r2, #4
 8001338:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			else if ((state_game->action == 5 )){
				state_game->count_chain += 1;
				state_game->MAIN = chaining_main_DEF;
				state_game->action = 4;
			}
			break;
 800133c:	e060      	b.n	8001400 <GAME_PLAY_Phase_Management+0x764>
			else if ((state_game->action == 5 )){
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	781b      	ldrb	r3, [r3, #0]
 8001342:	2b05      	cmp	r3, #5
 8001344:	d15c      	bne.n	8001400 <GAME_PLAY_Phase_Management+0x764>
				state_game->count_chain += 1;
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	785b      	ldrb	r3, [r3, #1]
 800134a:	3301      	adds	r3, #1
 800134c:	b2da      	uxtb	r2, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	705a      	strb	r2, [r3, #1]
				state_game->MAIN = chaining_main_DEF;
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	2206      	movs	r2, #6
 8001356:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
				state_game->action = 4;
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	2204      	movs	r2, #4
 800135e:	701a      	strb	r2, [r3, #0]
			break;
 8001360:	e04e      	b.n	8001400 <GAME_PLAY_Phase_Management+0x764>
		case activate_effect:
			ptrYugiohCard_dst = &ptrPlayerAtk->ChainBuffer[0];
 8001362:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001364:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
			if(state_game->count_chain%2 == 0){
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	785b      	ldrb	r3, [r3, #1]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	b2db      	uxtb	r3, r3
 8001374:	2b00      	cmp	r3, #0
 8001376:	d145      	bne.n	8001404 <GAME_PLAY_Phase_Management+0x768>
				uint8_t counthing = state_game->count_chain;
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	785b      	ldrb	r3, [r3, #1]
 800137c:	73fb      	strb	r3, [r7, #15]
				for (int i = 0; i <= counthing; i++) {
 800137e:	2300      	movs	r3, #0
 8001380:	61fb      	str	r3, [r7, #28]
 8001382:	e01d      	b.n	80013c0 <GAME_PLAY_Phase_Management+0x724>
					if(ptrYugiohCard_dst->cardSignature == 11){
 8001384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001386:	781b      	ldrb	r3, [r3, #0]
 8001388:	2b0b      	cmp	r3, #11
 800138a:	d107      	bne.n	800139c <GAME_PLAY_Phase_Management+0x700>
						state_game->test = 11;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	220b      	movs	r2, #11
 8001390:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Raigeki(ptrPlayerAtk);
 8001394:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001396:	f000 f996 	bl	80016c6 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>
 800139a:	e00b      	b.n	80013b4 <GAME_PLAY_Phase_Management+0x718>
					}
					else if(ptrYugiohCard_dst->cardSignature == 12){
 800139c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800139e:	781b      	ldrb	r3, [r3, #0]
 80013a0:	2b0c      	cmp	r3, #12
 80013a2:	d107      	bne.n	80013b4 <GAME_PLAY_Phase_Management+0x718>
						state_game->test = 12;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	220c      	movs	r2, #12
 80013a8:	f883 2330 	strb.w	r2, [r3, #816]	; 0x330
						YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(ptrPlayerAtk,ptrPlayerDef);
 80013ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80013ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013b0:	f000 f9ad 	bl	800170e <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>
					}
					//					else if()
					ptrYugiohCard_dst++;
 80013b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013b6:	330c      	adds	r3, #12
 80013b8:	627b      	str	r3, [r7, #36]	; 0x24
				for (int i = 0; i <= counthing; i++) {
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	3301      	adds	r3, #1
 80013be:	61fb      	str	r3, [r7, #28]
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	69fa      	ldr	r2, [r7, #28]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	dddd      	ble.n	8001384 <GAME_PLAY_Phase_Management+0x6e8>
				}
				YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerAtk);
 80013c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80013ca:	f7ff f9ae 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
				YUGIOH_card_copy(&ptrPlayerAtk->ChainBuffer[0], ptrYugiohCard_src);
 80013ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d0:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 80013d4:	6979      	ldr	r1, [r7, #20]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff f954 	bl	8000684 <YUGIOH_card_copy>
				state_game->action = 0;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	2200      	movs	r2, #0
 80013e0:	701a      	strb	r2, [r3, #0]
				state_game->MAIN = await;
 80013e2:	683b      	ldr	r3, [r7, #0]
 80013e4:	2200      	movs	r2, #0
 80013e6:	f883 232f 	strb.w	r2, [r3, #815]	; 0x32f
			}
			break;
 80013ea:	e00b      	b.n	8001404 <GAME_PLAY_Phase_Management+0x768>
			break;
 80013ec:	bf00      	nop
 80013ee:	e12c      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
			break;
 80013f0:	bf00      	nop
 80013f2:	e12a      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
			break;
 80013f4:	bf00      	nop
 80013f6:	e128      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
				break;
 80013f8:	bf00      	nop
 80013fa:	e126      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
			break;
 80013fc:	bf00      	nop
 80013fe:	e124      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
			break;
 8001400:	bf00      	nop
 8001402:	e122      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
			break;
 8001404:	bf00      	nop
		}
		break;
 8001406:	e120      	b.n	800164a <GAME_PLAY_Phase_Management+0x9ae>
		case Battle_Phase:

			switch(BATTLE){
 8001408:	7e3b      	ldrb	r3, [r7, #24]
 800140a:	2b04      	cmp	r3, #4
 800140c:	f200 8119 	bhi.w	8001642 <GAME_PLAY_Phase_Management+0x9a6>
 8001410:	a201      	add	r2, pc, #4	; (adr r2, 8001418 <GAME_PLAY_Phase_Management+0x77c>)
 8001412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001416:	bf00      	nop
 8001418:	0800142d 	.word	0x0800142d
 800141c:	08001513 	.word	0x08001513
 8001420:	080014bf 	.word	0x080014bf
 8001424:	08001631 	.word	0x08001631
 8001428:	0800156d 	.word	0x0800156d
			case selection:
				//ATK action 50
				if(state_game->action == 50){
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b32      	cmp	r3, #50	; 0x32
 8001432:	d105      	bne.n	8001440 <GAME_PLAY_Phase_Management+0x7a4>
					Player_Reading_Card(RFIDmain, state_game, ptrPlayerDef);
 8001434:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001436:	6839      	ldr	r1, [r7, #0]
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f000 f90b 	bl	8001654 <Player_Reading_Card>
							break;
						}
						ptrYugiohCard_dst++;
					}
					}
			break;
 800143e:	e0f9      	b.n	8001634 <GAME_PLAY_Phase_Management+0x998>
				else if(state_game->action == 51){
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	2b33      	cmp	r3, #51	; 0x33
 8001446:	f040 80f5 	bne.w	8001634 <GAME_PLAY_Phase_Management+0x998>
					ptrYugiohCard_src = &ptrPlayerDef->ChainBuffer[0];
 800144a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800144c:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001450:	617b      	str	r3, [r7, #20]
					ptrYugiohCard_dst = &ptrPlayerAtk->cardOnBoard[3];
 8001452:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001454:	3328      	adds	r3, #40	; 0x28
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 8001458:	2300      	movs	r3, #0
 800145a:	76fb      	strb	r3, [r7, #27]
 800145c:	e029      	b.n	80014b2 <GAME_PLAY_Phase_Management+0x816>
						if(ptrYugiohCard_src->cardData == ptrYugiohCard_dst->cardData){
 800145e:	697b      	ldr	r3, [r7, #20]
 8001460:	689a      	ldr	r2, [r3, #8]
 8001462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	429a      	cmp	r2, r3
 8001468:	d11d      	bne.n	80014a6 <GAME_PLAY_Phase_Management+0x80a>
							if(ptrYugiohCard_dst->cardState == 1){
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	789b      	ldrb	r3, [r3, #2]
 800146e:	2b01      	cmp	r3, #1
 8001470:	d123      	bne.n	80014ba <GAME_PLAY_Phase_Management+0x81e>
								YUGIOH_card_copy(ptrYugiohCard_dst, &ptrPlayerAtk->CardInPlayed);
 8001472:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001474:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001478:	4619      	mov	r1, r3
 800147a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800147c:	f7ff f902 	bl	8000684 <YUGIOH_card_copy>
								ptrYugiohCard_dst = &ptrPlayerAtk->CardInPlayed;
 8001480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001482:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001486:	627b      	str	r3, [r7, #36]	; 0x24
								ptrYugiohCard_dst->targetPosition = ptrYugiohCard_src->standPosition;
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	799a      	ldrb	r2, [r3, #6]
 800148c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148e:	71da      	strb	r2, [r3, #7]
								YUGIOH_Clear_Card_Bufffer_Player(ptrPlayerDef);
 8001490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001492:	f7ff f94a 	bl	800072a <YUGIOH_Clear_Card_Bufffer_Player>
								state_game->action = 52;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	2234      	movs	r2, #52	; 0x34
 800149a:	701a      	strb	r2, [r3, #0]
								state_game->BATTLE = counter_DEF;
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2202      	movs	r2, #2
 80014a0:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
							break;
 80014a4:	e009      	b.n	80014ba <GAME_PLAY_Phase_Management+0x81e>
						ptrYugiohCard_dst++;
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	330c      	adds	r3, #12
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
					for (uint8_t i = 0;i < 3; ++i) {
 80014ac:	7efb      	ldrb	r3, [r7, #27]
 80014ae:	3301      	adds	r3, #1
 80014b0:	76fb      	strb	r3, [r7, #27]
 80014b2:	7efb      	ldrb	r3, [r7, #27]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d9d2      	bls.n	800145e <GAME_PLAY_Phase_Management+0x7c2>
			break;
 80014b8:	e0bc      	b.n	8001634 <GAME_PLAY_Phase_Management+0x998>
							break;
 80014ba:	bf00      	nop
			break;
 80014bc:	e0ba      	b.n	8001634 <GAME_PLAY_Phase_Management+0x998>
			case counter_DEF:
				//action 52
//				state_game->test = 34;
				if(state_game->action == 52)
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b34      	cmp	r3, #52	; 0x34
 80014c4:	d112      	bne.n	80014ec <GAME_PLAY_Phase_Management+0x850>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 80014c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80014c8:	6839      	ldr	r1, [r7, #0]
 80014ca:	6878      	ldr	r0, [r7, #4]
 80014cc:	f000 f8c2 	bl	8001654 <Player_Reading_Card>
//					state_game->test = 35;
					if(HAL_GPIO_ReadPin(NO2_PORT, NO2_PIN) == GPIO_PIN_RESET){
 80014d0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80014d4:	4823      	ldr	r0, [pc, #140]	; (8001564 <GAME_PLAY_Phase_Management+0x8c8>)
 80014d6:	f004 feb9 	bl	800624c <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f040 80ab 	bne.w	8001638 <GAME_PLAY_Phase_Management+0x99c>
						state_game->BATTLE = calculate_damage;
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	2204      	movs	r2, #4
 80014e6:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					//				ptrYugiohCard_dst++;
					state_game->count_chain += 1;
					state_game->BATTLE = counter_ATK;
					state_game->action = 54;
				}
				break;
 80014ea:	e0a5      	b.n	8001638 <GAME_PLAY_Phase_Management+0x99c>
				else if ((state_game->action == 53 )){
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	2b35      	cmp	r3, #53	; 0x35
 80014f2:	f040 80a1 	bne.w	8001638 <GAME_PLAY_Phase_Management+0x99c>
					state_game->count_chain += 1;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	785b      	ldrb	r3, [r3, #1]
 80014fa:	3301      	adds	r3, #1
 80014fc:	b2da      	uxtb	r2, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_ATK;
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	2201      	movs	r2, #1
 8001506:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 54;
 800150a:	683b      	ldr	r3, [r7, #0]
 800150c:	2236      	movs	r2, #54	; 0x36
 800150e:	701a      	strb	r2, [r3, #0]
				break;
 8001510:	e092      	b.n	8001638 <GAME_PLAY_Phase_Management+0x99c>
			case counter_ATK:
				//action 54
				if(state_game->action == 54)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2b36      	cmp	r3, #54	; 0x36
 8001518:	d111      	bne.n	800153e <GAME_PLAY_Phase_Management+0x8a2>
				{
					Player_Reading_Card(RFIDmain,state_game,ptrPlayerAtk);
 800151a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800151c:	6839      	ldr	r1, [r7, #0]
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f000 f898 	bl	8001654 <Player_Reading_Card>
					if(HAL_GPIO_ReadPin(NO1_PORT, NO1_PIN) == GPIO_PIN_RESET){
 8001524:	2102      	movs	r1, #2
 8001526:	4810      	ldr	r0, [pc, #64]	; (8001568 <GAME_PLAY_Phase_Management+0x8cc>)
 8001528:	f004 fe90 	bl	800624c <HAL_GPIO_ReadPin>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	f040 8084 	bne.w	800163c <GAME_PLAY_Phase_Management+0x9a0>
						state_game->BATTLE = calculate_damage;
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2204      	movs	r2, #4
 8001538:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				else if ((state_game->action == 55 )){
					state_game->count_chain += 1;
					state_game->BATTLE = counter_DEF;
					state_game->action = 52;
				}
				break;
 800153c:	e07e      	b.n	800163c <GAME_PLAY_Phase_Management+0x9a0>
				else if ((state_game->action == 55 )){
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	781b      	ldrb	r3, [r3, #0]
 8001542:	2b37      	cmp	r3, #55	; 0x37
 8001544:	d17a      	bne.n	800163c <GAME_PLAY_Phase_Management+0x9a0>
					state_game->count_chain += 1;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	785b      	ldrb	r3, [r3, #1]
 800154a:	3301      	adds	r3, #1
 800154c:	b2da      	uxtb	r2, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	705a      	strb	r2, [r3, #1]
					state_game->BATTLE = counter_DEF;
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	2202      	movs	r2, #2
 8001556:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
					state_game->action = 52;
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	2234      	movs	r2, #52	; 0x34
 800155e:	701a      	strb	r2, [r3, #0]
				break;
 8001560:	e06c      	b.n	800163c <GAME_PLAY_Phase_Management+0x9a0>
 8001562:	bf00      	nop
 8001564:	58021400 	.word	0x58021400
 8001568:	58020400 	.word	0x58020400
			case chain_effect:

				break;
			case  calculate_damage:
				ptrYugiohCard_src = &ptrPlayerAtk->CardInPlayed;
 800156c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800156e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001572:	617b      	str	r3, [r7, #20]

				ptrYugiohCard_dst = &ptrPlayerDef->cardOnBoard[ptrYugiohCard_src->standPosition];
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	799b      	ldrb	r3, [r3, #6]
 8001578:	461a      	mov	r2, r3
 800157a:	4613      	mov	r3, r2
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	4413      	add	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001584:	4413      	add	r3, r2
 8001586:	3304      	adds	r3, #4
 8001588:	627b      	str	r3, [r7, #36]	; 0x24

				if(ptrYugiohCard_dst->cardState == 0){
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	789b      	ldrb	r3, [r3, #2]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d127      	bne.n	80015e2 <GAME_PLAY_Phase_Management+0x946>
					uint8_t atk = ptrYugiohCard_src->cardAtk;
 8001592:	697b      	ldr	r3, [r7, #20]
 8001594:	791b      	ldrb	r3, [r3, #4]
 8001596:	747b      	strb	r3, [r7, #17]
					uint8_t def = ptrYugiohCard_dst->cardDef;
 8001598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159a:	795b      	ldrb	r3, [r3, #5]
 800159c:	743b      	strb	r3, [r7, #16]
					if(atk < def){
 800159e:	7c7a      	ldrb	r2, [r7, #17]
 80015a0:	7c3b      	ldrb	r3, [r7, #16]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d210      	bcs.n	80015c8 <GAME_PLAY_Phase_Management+0x92c>
						ptrPlayerAtk->life_point -= def-atk;
 80015a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a8:	885a      	ldrh	r2, [r3, #2]
 80015aa:	7c7b      	ldrb	r3, [r7, #17]
 80015ac:	b299      	uxth	r1, r3
 80015ae:	7c3b      	ldrb	r3, [r7, #16]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	1acb      	subs	r3, r1, r3
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	4413      	add	r3, r2
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015bc:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = selection;
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
//									}

//				if(){
//
//				}
				break;
 80015c6:	e03b      	b.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
					else if(atk > def){
 80015c8:	7c7a      	ldrb	r2, [r7, #17]
 80015ca:	7c3b      	ldrb	r3, [r7, #16]
 80015cc:	429a      	cmp	r2, r3
 80015ce:	d937      	bls.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 80015d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80015d4:	f000 f8d2 	bl	800177c <YUGIOH_To_GY>
						state_game->BATTLE = selection;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	2200      	movs	r2, #0
 80015dc:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 80015e0:	e02e      	b.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
				else if(ptrYugiohCard_dst->cardState == 1){
 80015e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e4:	789b      	ldrb	r3, [r3, #2]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d12a      	bne.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
					uint8_t atk1 = ptrYugiohCard_src->cardAtk;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	791b      	ldrb	r3, [r3, #4]
 80015ee:	74fb      	strb	r3, [r7, #19]
					uint8_t atk2 = ptrYugiohCard_dst->cardAtk;
 80015f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f2:	791b      	ldrb	r3, [r3, #4]
 80015f4:	74bb      	strb	r3, [r7, #18]
					if(atk1 < atk2){
 80015f6:	7cfa      	ldrb	r2, [r7, #19]
 80015f8:	7cbb      	ldrb	r3, [r7, #18]
 80015fa:	429a      	cmp	r2, r3
 80015fc:	d320      	bcc.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
					else if(atk1 > atk2){
 80015fe:	7cfa      	ldrb	r2, [r7, #19]
 8001600:	7cbb      	ldrb	r3, [r7, #18]
 8001602:	429a      	cmp	r2, r3
 8001604:	d91c      	bls.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
						YUGIOH_To_GY(ptrPlayerDef, ptrYugiohCard_dst);
 8001606:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001608:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800160a:	f000 f8b7 	bl	800177c <YUGIOH_To_GY>
						ptrPlayerDef->life_point -= atk1-atk2;
 800160e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001610:	885a      	ldrh	r2, [r3, #2]
 8001612:	7cbb      	ldrb	r3, [r7, #18]
 8001614:	b299      	uxth	r1, r3
 8001616:	7cfb      	ldrb	r3, [r7, #19]
 8001618:	b29b      	uxth	r3, r3
 800161a:	1acb      	subs	r3, r1, r3
 800161c:	b29b      	uxth	r3, r3
 800161e:	4413      	add	r3, r2
 8001620:	b29a      	uxth	r2, r3
 8001622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001624:	805a      	strh	r2, [r3, #2]
						state_game->BATTLE = selection;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 232e 	strb.w	r2, [r3, #814]	; 0x32e
				break;
 800162e:	e007      	b.n	8001640 <GAME_PLAY_Phase_Management+0x9a4>
				break;
 8001630:	bf00      	nop
 8001632:	e006      	b.n	8001642 <GAME_PLAY_Phase_Management+0x9a6>
			break;
 8001634:	bf00      	nop
 8001636:	e004      	b.n	8001642 <GAME_PLAY_Phase_Management+0x9a6>
				break;
 8001638:	bf00      	nop
 800163a:	e002      	b.n	8001642 <GAME_PLAY_Phase_Management+0x9a6>
				break;
 800163c:	bf00      	nop
 800163e:	e000      	b.n	8001642 <GAME_PLAY_Phase_Management+0x9a6>
				break;
 8001640:	bf00      	nop
			}
		case Chain_Phase:
			break;
 8001642:	bf00      	nop
 8001644:	e002      	b.n	800164c <GAME_PLAY_Phase_Management+0x9b0>
		break;
 8001646:	bf00      	nop
 8001648:	e000      	b.n	800164c <GAME_PLAY_Phase_Management+0x9b0>
		break;
 800164a:	bf00      	nop

	}
}
 800164c:	bf00      	nop
 800164e:	3730      	adds	r7, #48	; 0x30
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}

08001654 <Player_Reading_Card>:

void Player_Reading_Card(RFIDHandle *RFIDmain, State_game *state_game ,Player *player)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b088      	sub	sp, #32
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	60b9      	str	r1, [r7, #8]
 800165e:	607a      	str	r2, [r7, #4]
	// Assign RFID
	RFID *ptrRFID = RFIDmain->RFID;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	3328      	adds	r3, #40	; 0x28
 8001664:	61fb      	str	r3, [r7, #28]
	ptrRFID = &RFIDmain->RFID[RFIDmain->slaveNum];
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	881b      	ldrh	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	4613      	mov	r3, r2
 800166e:	011b      	lsls	r3, r3, #4
 8001670:	4413      	add	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	3328      	adds	r3, #40	; 0x28
 8001676:	68fa      	ldr	r2, [r7, #12]
 8001678:	4413      	add	r3, r2
 800167a:	61fb      	str	r3, [r7, #28]

	YUGIOH_Card *ptrYugiohCard_src;
	ptrYugiohCard_src = &ptrRFID->bufferCard[0];
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	3314      	adds	r3, #20
 8001680:	61bb      	str	r3, [r7, #24]

	YUGIOH_Card *ptrYugiohCard_dst;
	ptrYugiohCard_dst = &player->ChainBuffer[0];
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	f503 739e 	add.w	r3, r3, #316	; 0x13c
 8001688:	617b      	str	r3, [r7, #20]

	if (ptrRFID->action == 1) // Card Detected
 800168a:	69fb      	ldr	r3, [r7, #28]
 800168c:	78db      	ldrb	r3, [r3, #3]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d115      	bne.n	80016be <Player_Reading_Card+0x6a>
	{
		// Update buffer
		YUGIOH_card_Buffer_Update_Player(player);
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f7ff f86e 	bl	8000774 <YUGIOH_card_Buffer_Update_Player>
		YUGIOH_card_copy(ptrYugiohCard_src, ptrYugiohCard_dst);
 8001698:	6979      	ldr	r1, [r7, #20]
 800169a:	69b8      	ldr	r0, [r7, #24]
 800169c:	f7fe fff2 	bl	8000684 <YUGIOH_card_copy>

		ptrYugiohCard_dst->targetPosition = 255;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	22ff      	movs	r2, #255	; 0xff
 80016a4:	71da      	strb	r2, [r3, #7]
		RFID_Clear_Card_Bufffer(ptrRFID);
 80016a6:	69f8      	ldr	r0, [r7, #28]
 80016a8:	f7ff f81b 	bl	80006e2 <RFID_Clear_Card_Bufffer>
		ptrRFID->action = 0;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	2200      	movs	r2, #0
 80016b0:	70da      	strb	r2, [r3, #3]

		state_game->action += 1;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	3301      	adds	r3, #1
 80016b8:	b2da      	uxtb	r2, r3
 80016ba:	68bb      	ldr	r3, [r7, #8]
 80016bc:	701a      	strb	r2, [r3, #0]
	}
}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}

080016c6 <YUGIOH_Clear_Card_Enemy_Player_Raigeki>:

void YUGIOH_Clear_Card_Enemy_Player_Raigeki(Player *player) {
 80016c6:	b580      	push	{r7, lr}
 80016c8:	b088      	sub	sp, #32
 80016ca:	af00      	add	r7, sp, #0
 80016cc:	6078      	str	r0, [r7, #4]
	YUGIOH_Card buffCard = { 0 };
 80016ce:	f107 030c 	add.w	r3, r7, #12
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
 80016d6:	605a      	str	r2, [r3, #4]
 80016d8:	609a      	str	r2, [r3, #8]
	YUGIOH_Card *ptrYUGIOHCard;
	ptrYUGIOHCard = &player->cardOnBoard[3];
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	3328      	adds	r3, #40	; 0x28
 80016de:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016e0:	2300      	movs	r3, #0
 80016e2:	76fb      	strb	r3, [r7, #27]
 80016e4:	e00b      	b.n	80016fe <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x38>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard);
 80016e6:	f107 030c 	add.w	r3, r7, #12
 80016ea:	69f9      	ldr	r1, [r7, #28]
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7fe ffc9 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard++;
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	330c      	adds	r3, #12
 80016f6:	61fb      	str	r3, [r7, #28]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 80016f8:	7efb      	ldrb	r3, [r7, #27]
 80016fa:	3301      	adds	r3, #1
 80016fc:	76fb      	strb	r3, [r7, #27]
 80016fe:	7efb      	ldrb	r3, [r7, #27]
 8001700:	2b02      	cmp	r3, #2
 8001702:	d9f0      	bls.n	80016e6 <YUGIOH_Clear_Card_Enemy_Player_Raigeki+0x20>
	}
}
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	3720      	adds	r7, #32
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole>:

void YUGIOH_Clear_Card_Enemy_Player_Dark_Hole(Player *player1,Player *player2) {
 800170e:	b580      	push	{r7, lr}
 8001710:	b088      	sub	sp, #32
 8001712:	af00      	add	r7, sp, #0
 8001714:	6078      	str	r0, [r7, #4]
 8001716:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8001718:	f107 0308 	add.w	r3, r7, #8
 800171c:	2200      	movs	r2, #0
 800171e:	601a      	str	r2, [r3, #0]
 8001720:	605a      	str	r2, [r3, #4]
 8001722:	609a      	str	r2, [r3, #8]

	//player1
	YUGIOH_Card *ptrYUGIOHCard_player1 = player1->cardOnBoard;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	3304      	adds	r3, #4
 8001728:	61fb      	str	r3, [r7, #28]
	ptrYUGIOHCard_player1 = &player1->cardOnBoard[3];
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3328      	adds	r3, #40	; 0x28
 800172e:	61fb      	str	r3, [r7, #28]

	//player2
	YUGIOH_Card *ptrYUGIOHCard_player2 = player2->cardOnBoard;
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	3304      	adds	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
	ptrYUGIOHCard_player2 = &player2->cardOnBoard[3];
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	3328      	adds	r3, #40	; 0x28
 800173a:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 800173c:	2300      	movs	r3, #0
 800173e:	75fb      	strb	r3, [r7, #23]
 8001740:	e014      	b.n	800176c <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x5e>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player1);
 8001742:	f107 0308 	add.w	r3, r7, #8
 8001746:	69f9      	ldr	r1, [r7, #28]
 8001748:	4618      	mov	r0, r3
 800174a:	f7fe ff9b 	bl	8000684 <YUGIOH_card_copy>
		YUGIOH_card_copy(&buffCard, ptrYUGIOHCard_player2);
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	69b9      	ldr	r1, [r7, #24]
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe ff95 	bl	8000684 <YUGIOH_card_copy>
		ptrYUGIOHCard_player1++;
 800175a:	69fb      	ldr	r3, [r7, #28]
 800175c:	330c      	adds	r3, #12
 800175e:	61fb      	str	r3, [r7, #28]
		ptrYUGIOHCard_player2++;
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	330c      	adds	r3, #12
 8001764:	61bb      	str	r3, [r7, #24]
	for (uint8_t i = 0; i < MON_BUFF_LEN; ++i) {
 8001766:	7dfb      	ldrb	r3, [r7, #23]
 8001768:	3301      	adds	r3, #1
 800176a:	75fb      	strb	r3, [r7, #23]
 800176c:	7dfb      	ldrb	r3, [r7, #23]
 800176e:	2b02      	cmp	r3, #2
 8001770:	d9e7      	bls.n	8001742 <YUGIOH_Clear_Card_Enemy_Player_Dark_Hole+0x34>
	}
}
 8001772:	bf00      	nop
 8001774:	bf00      	nop
 8001776:	3720      	adds	r7, #32
 8001778:	46bd      	mov	sp, r7
 800177a:	bd80      	pop	{r7, pc}

0800177c <YUGIOH_To_GY>:



void YUGIOH_To_GY(Player *player,YUGIOH_Card *card){
 800177c:	b580      	push	{r7, lr}
 800177e:	b088      	sub	sp, #32
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
	YUGIOH_Card buffCard = { 0 };
 8001786:	f107 0308 	add.w	r3, r7, #8
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]
 800178e:	605a      	str	r2, [r3, #4]
 8001790:	609a      	str	r2, [r3, #8]


	// Buffer Card src
	YUGIOH_Card *ptrYugiohCard_Buffer_src = player->GY;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	334c      	adds	r3, #76	; 0x4c
 8001796:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_src = &player->GY[GY_BUFF_LEN - 2];
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	f503 7392 	add.w	r3, r3, #292	; 0x124
 800179e:	61fb      	str	r3, [r7, #28]
	// Buffer Card dst
	YUGIOH_Card *ptrYugiohCard_Buffer_dst = player->GY;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	334c      	adds	r3, #76	; 0x4c
 80017a4:	61bb      	str	r3, [r7, #24]
	ptrYugiohCard_Buffer_dst = &player->GY[GY_BUFF_LEN - 1];
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f503 7398 	add.w	r3, r3, #304	; 0x130
 80017ac:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80017ae:	2314      	movs	r3, #20
 80017b0:	617b      	str	r3, [r7, #20]
 80017b2:	e00c      	b.n	80017ce <YUGIOH_To_GY+0x52>
		//			if(){
		//
		//			}
		YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80017b4:	69b9      	ldr	r1, [r7, #24]
 80017b6:	69f8      	ldr	r0, [r7, #28]
 80017b8:	f7fe ff64 	bl	8000684 <YUGIOH_card_copy>
		ptrYugiohCard_Buffer_src--;
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	3b0c      	subs	r3, #12
 80017c0:	61fb      	str	r3, [r7, #28]
		ptrYugiohCard_Buffer_dst--;
 80017c2:	69bb      	ldr	r3, [r7, #24]
 80017c4:	3b0c      	subs	r3, #12
 80017c6:	61bb      	str	r3, [r7, #24]
	for (int i = GY_BUFF_LEN; i >= 1; i--) {
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	3b01      	subs	r3, #1
 80017cc:	617b      	str	r3, [r7, #20]
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	dcef      	bgt.n	80017b4 <YUGIOH_To_GY+0x38>
	}

	ptrYugiohCard_Buffer_src = card;
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	61fb      	str	r3, [r7, #28]
	ptrYugiohCard_Buffer_dst = &player->GY[0];
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	334c      	adds	r3, #76	; 0x4c
 80017dc:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_src, ptrYugiohCard_Buffer_dst);
 80017de:	69b9      	ldr	r1, [r7, #24]
 80017e0:	69f8      	ldr	r0, [r7, #28]
 80017e2:	f7fe ff4f 	bl	8000684 <YUGIOH_card_copy>
	ptrYugiohCard_Buffer_dst = &buffCard;
 80017e6:	f107 0308 	add.w	r3, r7, #8
 80017ea:	61bb      	str	r3, [r7, #24]
	YUGIOH_card_copy(ptrYugiohCard_Buffer_dst, ptrYugiohCard_Buffer_src);
 80017ec:	69f9      	ldr	r1, [r7, #28]
 80017ee:	69b8      	ldr	r0, [r7, #24]
 80017f0:	f7fe ff48 	bl	8000684 <YUGIOH_card_copy>

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <MainGUI>:

void MainGUI(){
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af04      	add	r7, sp, #16
	ST7735_WriteString1(5, 5, "Player 1: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 8001802:	4b47      	ldr	r3, [pc, #284]	; (8001920 <MainGUI+0x124>)
 8001804:	2200      	movs	r2, #0
 8001806:	9202      	str	r2, [sp, #8]
 8001808:	f64f 021f 	movw	r2, #63519	; 0xf81f
 800180c:	9201      	str	r2, [sp, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
 8001810:	9200      	str	r2, [sp, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a43      	ldr	r2, [pc, #268]	; (8001924 <MainGUI+0x128>)
 8001816:	2105      	movs	r1, #5
 8001818:	2005      	movs	r0, #5
 800181a:	f000 feba 	bl	8002592 <ST7735_WriteString1>
	ST7735_WriteString1(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800181e:	4b40      	ldr	r3, [pc, #256]	; (8001920 <MainGUI+0x124>)
 8001820:	2200      	movs	r2, #0
 8001822:	9202      	str	r2, [sp, #8]
 8001824:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001828:	9201      	str	r2, [sp, #4]
 800182a:	685a      	ldr	r2, [r3, #4]
 800182c:	9200      	str	r2, [sp, #0]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a3d      	ldr	r2, [pc, #244]	; (8001928 <MainGUI+0x12c>)
 8001832:	2114      	movs	r1, #20
 8001834:	2005      	movs	r0, #5
 8001836:	f000 feac 	bl	8002592 <ST7735_WriteString1>
	ST7735_WriteString1(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 800183a:	4b39      	ldr	r3, [pc, #228]	; (8001920 <MainGUI+0x124>)
 800183c:	2200      	movs	r2, #0
 800183e:	9202      	str	r2, [sp, #8]
 8001840:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001844:	9201      	str	r2, [sp, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	9200      	str	r2, [sp, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a37      	ldr	r2, [pc, #220]	; (800192c <MainGUI+0x130>)
 800184e:	2123      	movs	r1, #35	; 0x23
 8001850:	2005      	movs	r0, #5
 8001852:	f000 fe9e 	bl	8002592 <ST7735_WriteString1>
	ST7735_WriteString1(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001856:	4b32      	ldr	r3, [pc, #200]	; (8001920 <MainGUI+0x124>)
 8001858:	2200      	movs	r2, #0
 800185a:	9202      	str	r2, [sp, #8]
 800185c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001860:	9201      	str	r2, [sp, #4]
 8001862:	685a      	ldr	r2, [r3, #4]
 8001864:	9200      	str	r2, [sp, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	4a31      	ldr	r2, [pc, #196]	; (8001930 <MainGUI+0x134>)
 800186a:	2132      	movs	r1, #50	; 0x32
 800186c:	2000      	movs	r0, #0
 800186e:	f000 fe90 	bl	8002592 <ST7735_WriteString1>
	ST7735_WriteString1(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 8001872:	4b2b      	ldr	r3, [pc, #172]	; (8001920 <MainGUI+0x124>)
 8001874:	2200      	movs	r2, #0
 8001876:	9202      	str	r2, [sp, #8]
 8001878:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800187c:	9201      	str	r2, [sp, #4]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	9200      	str	r2, [sp, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a2b      	ldr	r2, [pc, #172]	; (8001934 <MainGUI+0x138>)
 8001886:	213c      	movs	r1, #60	; 0x3c
 8001888:	2000      	movs	r0, #0
 800188a:	f000 fe82 	bl	8002592 <ST7735_WriteString1>
	ST7735_WriteString(5, 5, "Player 2: ", Font_7x10, ST7735_MAGENTA, ST7735_BLACK);
 800188e:	4b24      	ldr	r3, [pc, #144]	; (8001920 <MainGUI+0x124>)
 8001890:	2200      	movs	r2, #0
 8001892:	9202      	str	r2, [sp, #8]
 8001894:	f64f 021f 	movw	r2, #63519	; 0xf81f
 8001898:	9201      	str	r2, [sp, #4]
 800189a:	685a      	ldr	r2, [r3, #4]
 800189c:	9200      	str	r2, [sp, #0]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a25      	ldr	r2, [pc, #148]	; (8001938 <MainGUI+0x13c>)
 80018a2:	2105      	movs	r1, #5
 80018a4:	2005      	movs	r0, #5
 80018a6:	f000 fe2a 	bl	80024fe <ST7735_WriteString>
	ST7735_WriteString(5, 20, "Life points: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018aa:	4b1d      	ldr	r3, [pc, #116]	; (8001920 <MainGUI+0x124>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	9202      	str	r2, [sp, #8]
 80018b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018b4:	9201      	str	r2, [sp, #4]
 80018b6:	685a      	ldr	r2, [r3, #4]
 80018b8:	9200      	str	r2, [sp, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a1a      	ldr	r2, [pc, #104]	; (8001928 <MainGUI+0x12c>)
 80018be:	2114      	movs	r1, #20
 80018c0:	2005      	movs	r0, #5
 80018c2:	f000 fe1c 	bl	80024fe <ST7735_WriteString>
	ST7735_WriteString(5, 35, "Turns:X", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018c6:	4b16      	ldr	r3, [pc, #88]	; (8001920 <MainGUI+0x124>)
 80018c8:	2200      	movs	r2, #0
 80018ca:	9202      	str	r2, [sp, #8]
 80018cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018d0:	9201      	str	r2, [sp, #4]
 80018d2:	685a      	ldr	r2, [r3, #4]
 80018d4:	9200      	str	r2, [sp, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a14      	ldr	r2, [pc, #80]	; (800192c <MainGUI+0x130>)
 80018da:	2123      	movs	r1, #35	; 0x23
 80018dc:	2005      	movs	r0, #5
 80018de:	f000 fe0e 	bl	80024fe <ST7735_WriteString>
	ST7735_WriteString(0, 50, "Remaining time: ", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018e2:	4b0f      	ldr	r3, [pc, #60]	; (8001920 <MainGUI+0x124>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	9202      	str	r2, [sp, #8]
 80018e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018ec:	9201      	str	r2, [sp, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	9200      	str	r2, [sp, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4a0e      	ldr	r2, [pc, #56]	; (8001930 <MainGUI+0x134>)
 80018f6:	2132      	movs	r1, #50	; 0x32
 80018f8:	2000      	movs	r0, #0
 80018fa:	f000 fe00 	bl	80024fe <ST7735_WriteString>
	ST7735_WriteString(0, 60, "__________________", Font_7x10, ST7735_WHITE, ST7735_BLACK);
 80018fe:	4b08      	ldr	r3, [pc, #32]	; (8001920 <MainGUI+0x124>)
 8001900:	2200      	movs	r2, #0
 8001902:	9202      	str	r2, [sp, #8]
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	9201      	str	r2, [sp, #4]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	9200      	str	r2, [sp, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a08      	ldr	r2, [pc, #32]	; (8001934 <MainGUI+0x138>)
 8001912:	213c      	movs	r1, #60	; 0x3c
 8001914:	2000      	movs	r0, #0
 8001916:	f000 fdf2 	bl	80024fe <ST7735_WriteString>
}
 800191a:	bf00      	nop
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	24000008 	.word	0x24000008
 8001924:	0800be60 	.word	0x0800be60
 8001928:	0800bebc 	.word	0x0800bebc
 800192c:	0800becc 	.word	0x0800becc
 8001930:	0800bed4 	.word	0x0800bed4
 8001934:	0800be0c 	.word	0x0800be0c
 8001938:	0800be00 	.word	0x0800be00

0800193c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001940:	4b3d      	ldr	r3, [pc, #244]	; (8001a38 <SystemInit+0xfc>)
 8001942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001946:	4a3c      	ldr	r2, [pc, #240]	; (8001a38 <SystemInit+0xfc>)
 8001948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800194c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8001950:	4b39      	ldr	r3, [pc, #228]	; (8001a38 <SystemInit+0xfc>)
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	4a38      	ldr	r2, [pc, #224]	; (8001a38 <SystemInit+0xfc>)
 8001956:	f043 0310 	orr.w	r3, r3, #16
 800195a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800195c:	4b37      	ldr	r3, [pc, #220]	; (8001a3c <SystemInit+0x100>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 030f 	and.w	r3, r3, #15
 8001964:	2b06      	cmp	r3, #6
 8001966:	d807      	bhi.n	8001978 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001968:	4b34      	ldr	r3, [pc, #208]	; (8001a3c <SystemInit+0x100>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f023 030f 	bic.w	r3, r3, #15
 8001970:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <SystemInit+0x100>)
 8001972:	f043 0307 	orr.w	r3, r3, #7
 8001976:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001978:	4b31      	ldr	r3, [pc, #196]	; (8001a40 <SystemInit+0x104>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a30      	ldr	r2, [pc, #192]	; (8001a40 <SystemInit+0x104>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001984:	4b2e      	ldr	r3, [pc, #184]	; (8001a40 <SystemInit+0x104>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800198a:	4b2d      	ldr	r3, [pc, #180]	; (8001a40 <SystemInit+0x104>)
 800198c:	681a      	ldr	r2, [r3, #0]
 800198e:	492c      	ldr	r1, [pc, #176]	; (8001a40 <SystemInit+0x104>)
 8001990:	4b2c      	ldr	r3, [pc, #176]	; (8001a44 <SystemInit+0x108>)
 8001992:	4013      	ands	r3, r2
 8001994:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <SystemInit+0x100>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0308 	and.w	r3, r3, #8
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d007      	beq.n	80019b2 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <SystemInit+0x100>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f023 030f 	bic.w	r3, r3, #15
 80019aa:	4a24      	ldr	r2, [pc, #144]	; (8001a3c <SystemInit+0x100>)
 80019ac:	f043 0307 	orr.w	r3, r3, #7
 80019b0:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80019b2:	4b23      	ldr	r3, [pc, #140]	; (8001a40 <SystemInit+0x104>)
 80019b4:	2200      	movs	r2, #0
 80019b6:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80019b8:	4b21      	ldr	r3, [pc, #132]	; (8001a40 <SystemInit+0x104>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80019be:	4b20      	ldr	r3, [pc, #128]	; (8001a40 <SystemInit+0x104>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80019c4:	4b1e      	ldr	r3, [pc, #120]	; (8001a40 <SystemInit+0x104>)
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <SystemInit+0x10c>)
 80019c8:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80019ca:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <SystemInit+0x104>)
 80019cc:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <SystemInit+0x110>)
 80019ce:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <SystemInit+0x104>)
 80019d2:	4a1f      	ldr	r2, [pc, #124]	; (8001a50 <SystemInit+0x114>)
 80019d4:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <SystemInit+0x104>)
 80019d8:	2200      	movs	r2, #0
 80019da:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80019dc:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <SystemInit+0x104>)
 80019de:	4a1c      	ldr	r2, [pc, #112]	; (8001a50 <SystemInit+0x114>)
 80019e0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80019e2:	4b17      	ldr	r3, [pc, #92]	; (8001a40 <SystemInit+0x104>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80019e8:	4b15      	ldr	r3, [pc, #84]	; (8001a40 <SystemInit+0x104>)
 80019ea:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <SystemInit+0x114>)
 80019ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80019ee:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <SystemInit+0x104>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80019f4:	4b12      	ldr	r3, [pc, #72]	; (8001a40 <SystemInit+0x104>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a11      	ldr	r2, [pc, #68]	; (8001a40 <SystemInit+0x104>)
 80019fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019fe:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <SystemInit+0x104>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8001a06:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <SystemInit+0x118>)
 8001a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a0a:	4a12      	ldr	r2, [pc, #72]	; (8001a54 <SystemInit+0x118>)
 8001a0c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a10:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001a12:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <SystemInit+0x11c>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <SystemInit+0x120>)
 8001a18:	4013      	ands	r3, r2
 8001a1a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001a1e:	d202      	bcs.n	8001a26 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001a20:	4b0f      	ldr	r3, [pc, #60]	; (8001a60 <SystemInit+0x124>)
 8001a22:	2201      	movs	r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001a26:	4b0f      	ldr	r3, [pc, #60]	; (8001a64 <SystemInit+0x128>)
 8001a28:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8001a2c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8001a2e:	bf00      	nop
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	e000ed00 	.word	0xe000ed00
 8001a3c:	52002000 	.word	0x52002000
 8001a40:	58024400 	.word	0x58024400
 8001a44:	eaf6ed7f 	.word	0xeaf6ed7f
 8001a48:	02020200 	.word	0x02020200
 8001a4c:	01ff0000 	.word	0x01ff0000
 8001a50:	01010280 	.word	0x01010280
 8001a54:	580000c0 	.word	0x580000c0
 8001a58:	5c001000 	.word	0x5c001000
 8001a5c:	ffff0000 	.word	0xffff0000
 8001a60:	51008108 	.word	0x51008108
 8001a64:	52004000 	.word	0x52004000

08001a68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 8001a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a72:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8001a74:	bf00      	nop
 8001a76:	4b36      	ldr	r3, [pc, #216]	; (8001b50 <main+0xe8>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d004      	beq.n	8001a8c <main+0x24>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	1e5a      	subs	r2, r3, #1
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	dcf4      	bgt.n	8001a76 <main+0xe>
	if ( timeout < 0 )
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	da01      	bge.n	8001a96 <main+0x2e>
	{
		Error_Handler();
 8001a92:	f000 fb97 	bl	80021c4 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a96:	f001 f9f9 	bl	8002e8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a9a:	f000 f861 	bl	8001b60 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001a9e:	f000 f8e3 	bl	8001c68 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8001aa2:	4b2b      	ldr	r3, [pc, #172]	; (8001b50 <main+0xe8>)
 8001aa4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001aa8:	4a29      	ldr	r2, [pc, #164]	; (8001b50 <main+0xe8>)
 8001aaa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001aae:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ab2:	4b27      	ldr	r3, [pc, #156]	; (8001b50 <main+0xe8>)
 8001ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001abc:	603b      	str	r3, [r7, #0]
 8001abe:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8001ac0:	2000      	movs	r0, #0
 8001ac2:	f004 fc0f 	bl	80062e4 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f004 fc25 	bl	8006318 <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 8001ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad2:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001ad4:	bf00      	nop
 8001ad6:	4b1e      	ldr	r3, [pc, #120]	; (8001b50 <main+0xe8>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <main+0x84>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	1e5a      	subs	r2, r3, #1
 8001ae6:	607a      	str	r2, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	dcf4      	bgt.n	8001ad6 <main+0x6e>
	if ( timeout < 0 )
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da01      	bge.n	8001af6 <main+0x8e>
	{
		Error_Handler();
 8001af2:	f000 fb67 	bl	80021c4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af6:	f000 fa35 	bl	8001f64 <MX_GPIO_Init>
  MX_ETH_Init();
 8001afa:	f000 f8e7 	bl	8001ccc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001afe:	f000 f989 	bl	8001e14 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8001b02:	f000 fa07 	bl	8001f14 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001b06:	f000 f9d3 	bl	8001eb0 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 8001b0a:	f000 f92b 	bl	8001d64 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
	ST7735_Init();
 8001b0e:	f000 fc61 	bl	80023d4 <ST7735_Init>
	ST7735_FillScreen1(ST7735_BLACK);
 8001b12:	2000      	movs	r0, #0
 8001b14:	f000 fe81 	bl	800281a <ST7735_FillScreen1>
	ST7735_FillScreen(ST7735_BLACK);
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 fe6d 	bl	80027f8 <ST7735_FillScreen>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 200)
 8001b1e:	f001 fa3b 	bl	8002f98 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <main+0xec>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2bc8      	cmp	r3, #200	; 0xc8
 8001b2c:	d9f7      	bls.n	8001b1e <main+0xb6>
		{
			timemsM7_LED = HAL_GetTick();
 8001b2e:	f001 fa33 	bl	8002f98 <HAL_GetTick>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4a07      	ldr	r2, [pc, #28]	; (8001b54 <main+0xec>)
 8001b36:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001b3c:	4806      	ldr	r0, [pc, #24]	; (8001b58 <main+0xf0>)
 8001b3e:	f004 fbb6 	bl	80062ae <HAL_GPIO_TogglePin>
			GAME_PLAY_Management(RFIDMain,&StateMain);
 8001b42:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001b46:	4905      	ldr	r1, [pc, #20]	; (8001b5c <main+0xf4>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fe3f 	bl	80007cc <GAME_PLAY_Management>
		if(HAL_GetTick() - timemsM7_LED > 200)
 8001b4e:	e7e6      	b.n	8001b1e <main+0xb6>
 8001b50:	58024400 	.word	0x58024400
 8001b54:	24000c98 	.word	0x24000c98
 8001b58:	58020400 	.word	0x58020400
 8001b5c:	24000964 	.word	0x24000964

08001b60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b09c      	sub	sp, #112	; 0x70
 8001b64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b6a:	224c      	movs	r2, #76	; 0x4c
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f009 fcc4 	bl	800b4fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	2220      	movs	r2, #32
 8001b78:	2100      	movs	r1, #0
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f009 fcbe 	bl	800b4fc <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8001b80:	2004      	movs	r0, #4
 8001b82:	f004 fd25 	bl	80065d0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b34      	ldr	r3, [pc, #208]	; (8001c5c <SystemClock_Config+0xfc>)
 8001b8c:	699b      	ldr	r3, [r3, #24]
 8001b8e:	4a33      	ldr	r2, [pc, #204]	; (8001c5c <SystemClock_Config+0xfc>)
 8001b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b94:	6193      	str	r3, [r2, #24]
 8001b96:	4b31      	ldr	r3, [pc, #196]	; (8001c5c <SystemClock_Config+0xfc>)
 8001b98:	699b      	ldr	r3, [r3, #24]
 8001b9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	4b2f      	ldr	r3, [pc, #188]	; (8001c60 <SystemClock_Config+0x100>)
 8001ba2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ba4:	4a2e      	ldr	r2, [pc, #184]	; (8001c60 <SystemClock_Config+0x100>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	62d3      	str	r3, [r2, #44]	; 0x2c
 8001bac:	4b2c      	ldr	r3, [pc, #176]	; (8001c60 <SystemClock_Config+0x100>)
 8001bae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	603b      	str	r3, [r7, #0]
 8001bb6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8001bb8:	bf00      	nop
 8001bba:	4b28      	ldr	r3, [pc, #160]	; (8001c5c <SystemClock_Config+0xfc>)
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001bc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bc6:	d1f8      	bne.n	8001bba <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8001bc8:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <SystemClock_Config+0x104>)
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f023 0303 	bic.w	r3, r3, #3
 8001bd0:	4a24      	ldr	r2, [pc, #144]	; (8001c64 <SystemClock_Config+0x104>)
 8001bd2:	f043 0302 	orr.w	r3, r3, #2
 8001bd6:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bdc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be2:	2302      	movs	r3, #2
 8001be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	2302      	movs	r3, #2
 8001be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001bea:	2301      	movs	r3, #1
 8001bec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8001bee:	2378      	movs	r3, #120	; 0x78
 8001bf0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001bfe:	230c      	movs	r3, #12
 8001c00:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001c02:	2300      	movs	r3, #0
 8001c04:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f004 fd48 	bl	80066a4 <HAL_RCC_OscConfig>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8001c1a:	f000 fad3 	bl	80021c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c1e:	233f      	movs	r3, #63	; 0x3f
 8001c20:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c22:	2303      	movs	r3, #3
 8001c24:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001c26:	2300      	movs	r3, #0
 8001c28:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001c2a:	2308      	movs	r3, #8
 8001c2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001c2e:	2340      	movs	r3, #64	; 0x40
 8001c30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001c32:	2340      	movs	r3, #64	; 0x40
 8001c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001c36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c3a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001c3c:	2340      	movs	r3, #64	; 0x40
 8001c3e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c40:	1d3b      	adds	r3, r7, #4
 8001c42:	2104      	movs	r1, #4
 8001c44:	4618      	mov	r0, r3
 8001c46:	f005 f95b 	bl	8006f00 <HAL_RCC_ClockConfig>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d001      	beq.n	8001c54 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001c50:	f000 fab8 	bl	80021c4 <Error_Handler>
  }
}
 8001c54:	bf00      	nop
 8001c56:	3770      	adds	r7, #112	; 0x70
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	58024800 	.word	0x58024800
 8001c60:	58000400 	.word	0x58000400
 8001c64:	58024400 	.word	0x58024400

08001c68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b0b0      	sub	sp, #192	; 0xc0
 8001c6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	22bc      	movs	r2, #188	; 0xbc
 8001c72:	2100      	movs	r1, #0
 8001c74:	4618      	mov	r0, r3
 8001c76:	f009 fc41 	bl	800b4fc <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 8001c7a:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8001c7e:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8001c84:	2318      	movs	r3, #24
 8001c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 8001c88:	2302      	movs	r3, #2
 8001c8a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8001c8c:	2304      	movs	r3, #4
 8001c8e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8001c90:	2302      	movs	r3, #2
 8001c92:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8001c94:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c98:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8001ca2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca6:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8001ca8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001cac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001cb0:	1d3b      	adds	r3, r7, #4
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f005 fcb0 	bl	8007618 <HAL_RCCEx_PeriphCLKConfig>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8001cbe:	f000 fa81 	bl	80021c4 <Error_Handler>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	37c0      	adds	r7, #192	; 0xc0
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001cd0:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <MX_ETH_Init+0x80>)
 8001cd2:	4a1f      	ldr	r2, [pc, #124]	; (8001d50 <MX_ETH_Init+0x84>)
 8001cd4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001cd6:	4b1f      	ldr	r3, [pc, #124]	; (8001d54 <MX_ETH_Init+0x88>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <MX_ETH_Init+0x88>)
 8001cde:	2280      	movs	r2, #128	; 0x80
 8001ce0:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <MX_ETH_Init+0x88>)
 8001ce4:	22e1      	movs	r2, #225	; 0xe1
 8001ce6:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001ce8:	4b1a      	ldr	r3, [pc, #104]	; (8001d54 <MX_ETH_Init+0x88>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001cee:	4b19      	ldr	r3, [pc, #100]	; (8001d54 <MX_ETH_Init+0x88>)
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001cf4:	4b17      	ldr	r3, [pc, #92]	; (8001d54 <MX_ETH_Init+0x88>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001cfa:	4b14      	ldr	r3, [pc, #80]	; (8001d4c <MX_ETH_Init+0x80>)
 8001cfc:	4a15      	ldr	r2, [pc, #84]	; (8001d54 <MX_ETH_Init+0x88>)
 8001cfe:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001d00:	4b12      	ldr	r3, [pc, #72]	; (8001d4c <MX_ETH_Init+0x80>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <MX_ETH_Init+0x80>)
 8001d08:	4a13      	ldr	r2, [pc, #76]	; (8001d58 <MX_ETH_Init+0x8c>)
 8001d0a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001d0c:	4b0f      	ldr	r3, [pc, #60]	; (8001d4c <MX_ETH_Init+0x80>)
 8001d0e:	4a13      	ldr	r2, [pc, #76]	; (8001d5c <MX_ETH_Init+0x90>)
 8001d10:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001d12:	4b0e      	ldr	r3, [pc, #56]	; (8001d4c <MX_ETH_Init+0x80>)
 8001d14:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d18:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001d1a:	480c      	ldr	r0, [pc, #48]	; (8001d4c <MX_ETH_Init+0x80>)
 8001d1c:	f003 fcc2 	bl	80056a4 <HAL_ETH_Init>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001d26:	f000 fa4d 	bl	80021c4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001d2a:	2238      	movs	r2, #56	; 0x38
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	480c      	ldr	r0, [pc, #48]	; (8001d60 <MX_ETH_Init+0x94>)
 8001d30:	f009 fbe4 	bl	800b4fc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <MX_ETH_Init+0x94>)
 8001d36:	2221      	movs	r2, #33	; 0x21
 8001d38:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001d3a:	4b09      	ldr	r3, [pc, #36]	; (8001d60 <MX_ETH_Init+0x94>)
 8001d3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001d40:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001d42:	4b07      	ldr	r3, [pc, #28]	; (8001d60 <MX_ETH_Init+0x94>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001d48:	bf00      	nop
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	240001a0 	.word	0x240001a0
 8001d50:	40028000 	.word	0x40028000
 8001d54:	24000c9c 	.word	0x24000c9c
 8001d58:	240000e4 	.word	0x240000e4
 8001d5c:	24000084 	.word	0x24000084
 8001d60:	24000168 	.word	0x24000168

08001d64 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001d68:	4b28      	ldr	r3, [pc, #160]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d6a:	4a29      	ldr	r2, [pc, #164]	; (8001e10 <MX_SPI3_Init+0xac>)
 8001d6c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001d6e:	4b27      	ldr	r3, [pc, #156]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d70:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8001d74:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8001d76:	4b25      	ldr	r3, [pc, #148]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d78:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d7c:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d7e:	4b23      	ldr	r3, [pc, #140]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d80:	2207      	movs	r2, #7
 8001d82:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d8a:	4b20      	ldr	r3, [pc, #128]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001d90:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d92:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d96:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001d9a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001d9e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001da0:	4b1a      	ldr	r3, [pc, #104]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001da6:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dac:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8001db2:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001db8:	4b14      	ldr	r3, [pc, #80]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001dbe:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8001dc6:	4b11      	ldr	r3, [pc, #68]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dc8:	2200      	movs	r2, #0
 8001dca:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dcc:	4b0f      	ldr	r3, [pc, #60]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dce:	2200      	movs	r2, #0
 8001dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8001dd2:	4b0e      	ldr	r3, [pc, #56]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001dd8:	4b0c      	ldr	r3, [pc, #48]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8001de4:	4b09      	ldr	r3, [pc, #36]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001df0:	4b06      	ldr	r3, [pc, #24]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001df6:	4805      	ldr	r0, [pc, #20]	; (8001e0c <MX_SPI3_Init+0xa8>)
 8001df8:	f006 ff76 	bl	8008ce8 <HAL_SPI_Init>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d001      	beq.n	8001e06 <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8001e02:	f000 f9df 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8001e06:	bf00      	nop
 8001e08:	bd80      	pop	{r7, pc}
 8001e0a:	bf00      	nop
 8001e0c:	24000250 	.word	0x24000250
 8001e10:	40003c00 	.word	0x40003c00

08001e14 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e18:	4b22      	ldr	r3, [pc, #136]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e1a:	4a23      	ldr	r2, [pc, #140]	; (8001ea8 <MX_USART3_UART_Init+0x94>)
 8001e1c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8001e1e:	4b21      	ldr	r3, [pc, #132]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e20:	4a22      	ldr	r2, [pc, #136]	; (8001eac <MX_USART3_UART_Init+0x98>)
 8001e22:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e24:	4b1f      	ldr	r3, [pc, #124]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e2a:	4b1e      	ldr	r3, [pc, #120]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e30:	4b1c      	ldr	r3, [pc, #112]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e36:	4b1b      	ldr	r3, [pc, #108]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e38:	220c      	movs	r2, #12
 8001e3a:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3c:	4b19      	ldr	r3, [pc, #100]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e42:	4b18      	ldr	r3, [pc, #96]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e48:	4b16      	ldr	r3, [pc, #88]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e4e:	4b15      	ldr	r3, [pc, #84]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e54:	4b13      	ldr	r3, [pc, #76]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e5a:	4812      	ldr	r0, [pc, #72]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e5c:	f007 fb25 	bl	80094aa <HAL_UART_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001e66:	f000 f9ad 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e6a:	2100      	movs	r1, #0
 8001e6c:	480d      	ldr	r0, [pc, #52]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e6e:	f008 ff47 	bl	800ad00 <HAL_UARTEx_SetTxFifoThreshold>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d001      	beq.n	8001e7c <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001e78:	f000 f9a4 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001e7c:	2100      	movs	r1, #0
 8001e7e:	4809      	ldr	r0, [pc, #36]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e80:	f008 ff7c 	bl	800ad7c <HAL_UARTEx_SetRxFifoThreshold>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001e8a:	f000 f99b 	bl	80021c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <MX_USART3_UART_Init+0x90>)
 8001e90:	f008 fefd 	bl	800ac8e <HAL_UARTEx_DisableFifoMode>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001e9a:	f000 f993 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e9e:	bf00      	nop
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	240002d8 	.word	0x240002d8
 8001ea8:	40004800 	.word	0x40004800
 8001eac:	0005dc00 	.word	0x0005dc00

08001eb0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001eb4:	4b15      	ldr	r3, [pc, #84]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eb6:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001eb8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001eba:	4b14      	ldr	r3, [pc, #80]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ebc:	2209      	movs	r2, #9
 8001ebe:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec2:	2202      	movs	r2, #2
 8001ec4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001ec6:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ece:	2202      	movs	r2, #2
 8001ed0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001ed2:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eda:	2200      	movs	r2, #0
 8001edc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ede:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001eea:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001eec:	2201      	movs	r2, #1
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001ef6:	4805      	ldr	r0, [pc, #20]	; (8001f0c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001ef8:	f004 fa22 	bl	8006340 <HAL_PCD_Init>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d001      	beq.n	8001f06 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8001f02:	f000 f95f 	bl	80021c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001f06:	bf00      	nop
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	24000458 	.word	0x24000458
 8001f10:	40080000 	.word	0x40080000

08001f14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <MX_DMA_Init+0x4c>)
 8001f1c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f20:	4a0f      	ldr	r2, [pc, #60]	; (8001f60 <MX_DMA_Init+0x4c>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	; (8001f60 <MX_DMA_Init+0x4c>)
 8001f2c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001f30:	f003 0301 	and.w	r3, r3, #1
 8001f34:	607b      	str	r3, [r7, #4]
 8001f36:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	200c      	movs	r0, #12
 8001f3e:	f001 f956 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001f42:	200c      	movs	r0, #12
 8001f44:	f001 f96d 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001f48:	2200      	movs	r2, #0
 8001f4a:	2100      	movs	r1, #0
 8001f4c:	200f      	movs	r0, #15
 8001f4e:	f001 f94e 	bl	80031ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001f52:	200f      	movs	r0, #15
 8001f54:	f001 f965 	bl	8003222 <HAL_NVIC_EnableIRQ>

}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	58024400 	.word	0x58024400

08001f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08e      	sub	sp, #56	; 0x38
 8001f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f6e:	2200      	movs	r2, #0
 8001f70:	601a      	str	r2, [r3, #0]
 8001f72:	605a      	str	r2, [r3, #4]
 8001f74:	609a      	str	r2, [r3, #8]
 8001f76:	60da      	str	r2, [r3, #12]
 8001f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f7a:	4b8a      	ldr	r3, [pc, #552]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f80:	4a88      	ldr	r2, [pc, #544]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001f82:	f043 0304 	orr.w	r3, r3, #4
 8001f86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001f8a:	4b86      	ldr	r3, [pc, #536]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001f8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f90:	f003 0304 	and.w	r3, r3, #4
 8001f94:	623b      	str	r3, [r7, #32]
 8001f96:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f98:	4b82      	ldr	r3, [pc, #520]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001f9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001f9e:	4a81      	ldr	r2, [pc, #516]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fa8:	4b7e      	ldr	r3, [pc, #504]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001faa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fb2:	61fb      	str	r3, [r7, #28]
 8001fb4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fb6:	4b7b      	ldr	r3, [pc, #492]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fbc:	4a79      	ldr	r2, [pc, #484]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fbe:	f043 0301 	orr.w	r3, r3, #1
 8001fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fc6:	4b77      	ldr	r3, [pc, #476]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fcc:	f003 0301 	and.w	r3, r3, #1
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fd4:	4b73      	ldr	r3, [pc, #460]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fda:	4a72      	ldr	r2, [pc, #456]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fdc:	f043 0302 	orr.w	r3, r3, #2
 8001fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001fe4:	4b6f      	ldr	r3, [pc, #444]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	617b      	str	r3, [r7, #20]
 8001ff0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff2:	4b6c      	ldr	r3, [pc, #432]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	; (80021a4 <MX_GPIO_Init+0x240>)
 8001ffa:	f043 0320 	orr.w	r3, r3, #32
 8001ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002002:	4b68      	ldr	r3, [pc, #416]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002008:	f003 0320 	and.w	r3, r3, #32
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002010:	4b64      	ldr	r3, [pc, #400]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002016:	4a63      	ldr	r2, [pc, #396]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002018:	f043 0310 	orr.w	r3, r3, #16
 800201c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002020:	4b60      	ldr	r3, [pc, #384]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	60fb      	str	r3, [r7, #12]
 800202c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	4b5d      	ldr	r3, [pc, #372]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002034:	4a5b      	ldr	r2, [pc, #364]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002036:	f043 0308 	orr.w	r3, r3, #8
 800203a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800203e:	4b59      	ldr	r3, [pc, #356]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	60bb      	str	r3, [r7, #8]
 800204a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800204c:	4b55      	ldr	r3, [pc, #340]	; (80021a4 <MX_GPIO_Init+0x240>)
 800204e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002052:	4a54      	ldr	r2, [pc, #336]	; (80021a4 <MX_GPIO_Init+0x240>)
 8002054:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002058:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800205c:	4b51      	ldr	r3, [pc, #324]	; (80021a4 <MX_GPIO_Init+0x240>)
 800205e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002062:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002066:	607b      	str	r3, [r7, #4]
 8002068:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD1_CS_Pin, GPIO_PIN_SET);
 800206a:	2201      	movs	r2, #1
 800206c:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 8002070:	484d      	ldr	r0, [pc, #308]	; (80021a8 <MX_GPIO_Init+0x244>)
 8002072:	f004 f903 	bl	800627c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD2_CS_GPIO_Port, LCD2_CS_Pin, GPIO_PIN_RESET);
 8002076:	2200      	movs	r2, #0
 8002078:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800207c:	484a      	ldr	r0, [pc, #296]	; (80021a8 <MX_GPIO_Init+0x244>)
 800207e:	f004 f8fd 	bl	800627c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002088:	4848      	ldr	r0, [pc, #288]	; (80021ac <MX_GPIO_Init+0x248>)
 800208a:	f004 f8f7 	bl	800627c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800208e:	2200      	movs	r2, #0
 8002090:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002094:	4846      	ldr	r0, [pc, #280]	; (80021b0 <MX_GPIO_Init+0x24c>)
 8002096:	f004 f8f1 	bl	800627c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_SET);
 800209a:	2201      	movs	r2, #1
 800209c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020a0:	4844      	ldr	r0, [pc, #272]	; (80021b4 <MX_GPIO_Init+0x250>)
 80020a2:	f004 f8eb 	bl	800627c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : TURN_BUTTON_Pin YES2_Pin YES1_Pin */
  GPIO_InitStruct.Pin = TURN_BUTTON_Pin|YES2_Pin|YES1_Pin;
 80020a6:	230d      	movs	r3, #13
 80020a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020aa:	2300      	movs	r3, #0
 80020ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020ae:	2300      	movs	r3, #0
 80020b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020b6:	4619      	mov	r1, r3
 80020b8:	483f      	ldr	r0, [pc, #252]	; (80021b8 <MX_GPIO_Init+0x254>)
 80020ba:	f003 ff17 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : START_BUTTON_Pin */
  GPIO_InitStruct.Pin = START_BUTTON_Pin;
 80020be:	2308      	movs	r3, #8
 80020c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(START_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80020ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020ce:	4619      	mov	r1, r3
 80020d0:	483a      	ldr	r0, [pc, #232]	; (80021bc <MX_GPIO_Init+0x258>)
 80020d2:	f003 ff0b 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : NO1_Pin */
  GPIO_InitStruct.Pin = NO1_Pin;
 80020d6:	2302      	movs	r3, #2
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020da:	2300      	movs	r3, #0
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020de:	2300      	movs	r3, #0
 80020e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO1_GPIO_Port, &GPIO_InitStruct);
 80020e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80020e6:	4619      	mov	r1, r3
 80020e8:	4830      	ldr	r0, [pc, #192]	; (80021ac <MX_GPIO_Init+0x248>)
 80020ea:	f003 feff 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : NO2_Pin */
  GPIO_InitStruct.Pin = NO2_Pin;
 80020ee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020f4:	2300      	movs	r3, #0
 80020f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f8:	2300      	movs	r3, #0
 80020fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(NO2_GPIO_Port, &GPIO_InitStruct);
 80020fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002100:	4619      	mov	r1, r3
 8002102:	482f      	ldr	r0, [pc, #188]	; (80021c0 <MX_GPIO_Init+0x25c>)
 8002104:	f003 fef2 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8002108:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800210e:	2301      	movs	r3, #1
 8002110:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800211a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800211e:	4619      	mov	r1, r3
 8002120:	4821      	ldr	r0, [pc, #132]	; (80021a8 <MX_GPIO_Init+0x244>)
 8002122:	f003 fee3 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002126:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800212a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	481b      	ldr	r0, [pc, #108]	; (80021ac <MX_GPIO_Init+0x248>)
 8002140:	f003 fed4 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8002144:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8002156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800215a:	4619      	mov	r1, r3
 800215c:	4814      	ldr	r0, [pc, #80]	; (80021b0 <MX_GPIO_Init+0x24c>)
 800215e:	f003 fec5 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002166:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800216a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8002170:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002174:	4619      	mov	r1, r3
 8002176:	480f      	ldr	r0, [pc, #60]	; (80021b4 <MX_GPIO_Init+0x250>)
 8002178:	f003 feb8 	bl	8005eec <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 800217c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002180:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002182:	2301      	movs	r3, #1
 8002184:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002186:	2300      	movs	r3, #0
 8002188:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800218a:	2300      	movs	r3, #0
 800218c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 800218e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002192:	4619      	mov	r1, r3
 8002194:	4807      	ldr	r0, [pc, #28]	; (80021b4 <MX_GPIO_Init+0x250>)
 8002196:	f003 fea9 	bl	8005eec <HAL_GPIO_Init>

}
 800219a:	bf00      	nop
 800219c:	3738      	adds	r7, #56	; 0x38
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	58024400 	.word	0x58024400
 80021a8:	58021000 	.word	0x58021000
 80021ac:	58020400 	.word	0x58020400
 80021b0:	58020c00 	.word	0x58020c00
 80021b4:	58021800 	.word	0x58021800
 80021b8:	58020800 	.word	0x58020800
 80021bc:	58020000 	.word	0x58020000
 80021c0:	58021400 	.word	0x58021400

080021c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021c4:	b480      	push	{r7}
 80021c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021c8:	b672      	cpsid	i
}
 80021ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80021cc:	e7fe      	b.n	80021cc <Error_Handler+0x8>
	...

080021d0 <ST7735_Select>:
    ST7735_NORON  ,    DELAY, //  3: Normal display on, no args, w/delay
      10,                     //     10 ms delay
    ST7735_DISPON ,    DELAY, //  4: Main screen turn on, no args w/delay
      100 };                  //     100 ms delay

static void ST7735_Select() {
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_RESET);
 80021d4:	2200      	movs	r2, #0
 80021d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021da:	4802      	ldr	r0, [pc, #8]	; (80021e4 <ST7735_Select+0x14>)
 80021dc:	f004 f84e 	bl	800627c <HAL_GPIO_WritePin>
}
 80021e0:	bf00      	nop
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	58021000 	.word	0x58021000

080021e8 <ST7735_Unselect>:

void ST7735_Unselect() {
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port, ST7735_CS_Pin, GPIO_PIN_SET);
 80021ec:	2201      	movs	r2, #1
 80021ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80021f2:	4802      	ldr	r0, [pc, #8]	; (80021fc <ST7735_Unselect+0x14>)
 80021f4:	f004 f842 	bl	800627c <HAL_GPIO_WritePin>
}
 80021f8:	bf00      	nop
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	58021000 	.word	0x58021000

08002200 <ST7735_Select1>:
static void ST7735_Select1() {
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_RESET);
 8002204:	2200      	movs	r2, #0
 8002206:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800220a:	4802      	ldr	r0, [pc, #8]	; (8002214 <ST7735_Select1+0x14>)
 800220c:	f004 f836 	bl	800627c <HAL_GPIO_WritePin>
}
 8002210:	bf00      	nop
 8002212:	bd80      	pop	{r7, pc}
 8002214:	58021000 	.word	0x58021000

08002218 <ST7735_Unselect1>:

void ST7735_Unselect1() {
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_CS_GPIO_Port1, ST7735_CS_Pin1, GPIO_PIN_SET);
 800221c:	2201      	movs	r2, #1
 800221e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002222:	4802      	ldr	r0, [pc, #8]	; (800222c <ST7735_Unselect1+0x14>)
 8002224:	f004 f82a 	bl	800627c <HAL_GPIO_WritePin>
}
 8002228:	bf00      	nop
 800222a:	bd80      	pop	{r7, pc}
 800222c:	58021000 	.word	0x58021000

08002230 <ST7735_Reset>:

static void ST7735_Reset() {
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_RESET);
 8002234:	2200      	movs	r2, #0
 8002236:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800223a:	4807      	ldr	r0, [pc, #28]	; (8002258 <ST7735_Reset+0x28>)
 800223c:	f004 f81e 	bl	800627c <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8002240:	2005      	movs	r0, #5
 8002242:	f000 feb5 	bl	8002fb0 <HAL_Delay>
    HAL_GPIO_WritePin(ST7735_RES_GPIO_Port, ST7735_RES_Pin, GPIO_PIN_SET);
 8002246:	2201      	movs	r2, #1
 8002248:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800224c:	4802      	ldr	r0, [pc, #8]	; (8002258 <ST7735_Reset+0x28>)
 800224e:	f004 f815 	bl	800627c <HAL_GPIO_WritePin>
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	58021000 	.word	0x58021000

0800225c <ST7735_WriteCommand>:

static void ST7735_WriteCommand(uint8_t cmd) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b082      	sub	sp, #8
 8002260:	af00      	add	r7, sp, #0
 8002262:	4603      	mov	r3, r0
 8002264:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_RESET);
 8002266:	2200      	movs	r2, #0
 8002268:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800226c:	4806      	ldr	r0, [pc, #24]	; (8002288 <ST7735_WriteCommand+0x2c>)
 800226e:	f004 f805 	bl	800627c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8002272:	1df9      	adds	r1, r7, #7
 8002274:	f04f 33ff 	mov.w	r3, #4294967295
 8002278:	2201      	movs	r2, #1
 800227a:	4804      	ldr	r0, [pc, #16]	; (800228c <ST7735_WriteCommand+0x30>)
 800227c:	f006 fe3a 	bl	8008ef4 <HAL_SPI_Transmit>
}
 8002280:	bf00      	nop
 8002282:	3708      	adds	r7, #8
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	58021800 	.word	0x58021800
 800228c:	24000250 	.word	0x24000250

08002290 <ST7735_WriteData>:

static void ST7735_WriteData(uint8_t* buff, size_t buff_size) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 800229a:	2201      	movs	r2, #1
 800229c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a0:	4807      	ldr	r0, [pc, #28]	; (80022c0 <ST7735_WriteData+0x30>)
 80022a2:	f003 ffeb 	bl	800627c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ST7735_SPI_PORT, buff, buff_size, HAL_MAX_DELAY);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	b29a      	uxth	r2, r3
 80022aa:	f04f 33ff 	mov.w	r3, #4294967295
 80022ae:	6879      	ldr	r1, [r7, #4]
 80022b0:	4804      	ldr	r0, [pc, #16]	; (80022c4 <ST7735_WriteData+0x34>)
 80022b2:	f006 fe1f 	bl	8008ef4 <HAL_SPI_Transmit>
}
 80022b6:	bf00      	nop
 80022b8:	3708      	adds	r7, #8
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	58021800 	.word	0x58021800
 80022c4:	24000250 	.word	0x24000250

080022c8 <ST7735_ExecuteCommandList>:

static void ST7735_ExecuteCommandList(const uint8_t *addr) {
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
    uint8_t numCommands, numArgs;
    uint16_t ms;

    numCommands = *addr++;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	1c5a      	adds	r2, r3, #1
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	73fb      	strb	r3, [r7, #15]
    while(numCommands--) {
 80022da:	e034      	b.n	8002346 <ST7735_ExecuteCommandList+0x7e>
        uint8_t cmd = *addr++;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	607a      	str	r2, [r7, #4]
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	72fb      	strb	r3, [r7, #11]
        ST7735_WriteCommand(cmd);
 80022e6:	7afb      	ldrb	r3, [r7, #11]
 80022e8:	4618      	mov	r0, r3
 80022ea:	f7ff ffb7 	bl	800225c <ST7735_WriteCommand>

        numArgs = *addr++;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	72bb      	strb	r3, [r7, #10]
        // If high bit set, delay follows args
        ms = numArgs & DELAY;
 80022f8:	7abb      	ldrb	r3, [r7, #10]
 80022fa:	b29b      	uxth	r3, r3
 80022fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002300:	81bb      	strh	r3, [r7, #12]
        numArgs &= ~DELAY;
 8002302:	7abb      	ldrb	r3, [r7, #10]
 8002304:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002308:	72bb      	strb	r3, [r7, #10]
        if(numArgs) {
 800230a:	7abb      	ldrb	r3, [r7, #10]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d008      	beq.n	8002322 <ST7735_ExecuteCommandList+0x5a>
            ST7735_WriteData((uint8_t*)addr, numArgs);
 8002310:	7abb      	ldrb	r3, [r7, #10]
 8002312:	4619      	mov	r1, r3
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f7ff ffbb 	bl	8002290 <ST7735_WriteData>
            addr += numArgs;
 800231a:	7abb      	ldrb	r3, [r7, #10]
 800231c:	687a      	ldr	r2, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	607b      	str	r3, [r7, #4]
        }

        if(ms) {
 8002322:	89bb      	ldrh	r3, [r7, #12]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <ST7735_ExecuteCommandList+0x7e>
            ms = *addr++;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	1c5a      	adds	r2, r3, #1
 800232c:	607a      	str	r2, [r7, #4]
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	81bb      	strh	r3, [r7, #12]
            if(ms == 255) ms = 500;
 8002332:	89bb      	ldrh	r3, [r7, #12]
 8002334:	2bff      	cmp	r3, #255	; 0xff
 8002336:	d102      	bne.n	800233e <ST7735_ExecuteCommandList+0x76>
 8002338:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800233c:	81bb      	strh	r3, [r7, #12]
            HAL_Delay(ms);
 800233e:	89bb      	ldrh	r3, [r7, #12]
 8002340:	4618      	mov	r0, r3
 8002342:	f000 fe35 	bl	8002fb0 <HAL_Delay>
    while(numCommands--) {
 8002346:	7bfb      	ldrb	r3, [r7, #15]
 8002348:	1e5a      	subs	r2, r3, #1
 800234a:	73fa      	strb	r2, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1c5      	bne.n	80022dc <ST7735_ExecuteCommandList+0x14>
        }
    }
}
 8002350:	bf00      	nop
 8002352:	bf00      	nop
 8002354:	3710      	adds	r7, #16
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}

0800235a <ST7735_SetAddressWindow>:

static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800235a:	b590      	push	{r4, r7, lr}
 800235c:	b085      	sub	sp, #20
 800235e:	af00      	add	r7, sp, #0
 8002360:	4604      	mov	r4, r0
 8002362:	4608      	mov	r0, r1
 8002364:	4611      	mov	r1, r2
 8002366:	461a      	mov	r2, r3
 8002368:	4623      	mov	r3, r4
 800236a:	71fb      	strb	r3, [r7, #7]
 800236c:	4603      	mov	r3, r0
 800236e:	71bb      	strb	r3, [r7, #6]
 8002370:	460b      	mov	r3, r1
 8002372:	717b      	strb	r3, [r7, #5]
 8002374:	4613      	mov	r3, r2
 8002376:	713b      	strb	r3, [r7, #4]
    // column address set
    ST7735_WriteCommand(ST7735_CASET);
 8002378:	202a      	movs	r0, #42	; 0x2a
 800237a:	f7ff ff6f 	bl	800225c <ST7735_WriteCommand>
    uint8_t data[] = { 0x00, x0 + ST7735_XSTART, 0x00, x1 + ST7735_XSTART };
 800237e:	2300      	movs	r3, #0
 8002380:	733b      	strb	r3, [r7, #12]
 8002382:	79fb      	ldrb	r3, [r7, #7]
 8002384:	3302      	adds	r3, #2
 8002386:	b2db      	uxtb	r3, r3
 8002388:	737b      	strb	r3, [r7, #13]
 800238a:	2300      	movs	r3, #0
 800238c:	73bb      	strb	r3, [r7, #14]
 800238e:	797b      	ldrb	r3, [r7, #5]
 8002390:	3302      	adds	r3, #2
 8002392:	b2db      	uxtb	r3, r3
 8002394:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	2104      	movs	r1, #4
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff77 	bl	8002290 <ST7735_WriteData>

    // row address set
    ST7735_WriteCommand(ST7735_RASET);
 80023a2:	202b      	movs	r0, #43	; 0x2b
 80023a4:	f7ff ff5a 	bl	800225c <ST7735_WriteCommand>
    data[1] = y0 + ST7735_YSTART;
 80023a8:	79bb      	ldrb	r3, [r7, #6]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	737b      	strb	r3, [r7, #13]
    data[3] = y1 + ST7735_YSTART;
 80023b0:	793b      	ldrb	r3, [r7, #4]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	73fb      	strb	r3, [r7, #15]
    ST7735_WriteData(data, sizeof(data));
 80023b8:	f107 030c 	add.w	r3, r7, #12
 80023bc:	2104      	movs	r1, #4
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff ff66 	bl	8002290 <ST7735_WriteData>

    // write to RAM
    ST7735_WriteCommand(ST7735_RAMWR);
 80023c4:	202c      	movs	r0, #44	; 0x2c
 80023c6:	f7ff ff49 	bl	800225c <ST7735_WriteCommand>
}
 80023ca:	bf00      	nop
 80023cc:	3714      	adds	r7, #20
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd90      	pop	{r4, r7, pc}
	...

080023d4 <ST7735_Init>:

void ST7735_Init() {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
    ST7735_Select();
 80023d8:	f7ff fefa 	bl	80021d0 <ST7735_Select>
    ST7735_Select1();
 80023dc:	f7ff ff10 	bl	8002200 <ST7735_Select1>
    ST7735_Reset();
 80023e0:	f7ff ff26 	bl	8002230 <ST7735_Reset>
    ST7735_ExecuteCommandList(init_cmds1);
 80023e4:	4807      	ldr	r0, [pc, #28]	; (8002404 <ST7735_Init+0x30>)
 80023e6:	f7ff ff6f 	bl	80022c8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds2);
 80023ea:	4807      	ldr	r0, [pc, #28]	; (8002408 <ST7735_Init+0x34>)
 80023ec:	f7ff ff6c 	bl	80022c8 <ST7735_ExecuteCommandList>
    ST7735_ExecuteCommandList(init_cmds3);
 80023f0:	4806      	ldr	r0, [pc, #24]	; (800240c <ST7735_Init+0x38>)
 80023f2:	f7ff ff69 	bl	80022c8 <ST7735_ExecuteCommandList>
    ST7735_Unselect();
 80023f6:	f7ff fef7 	bl	80021e8 <ST7735_Unselect>
    ST7735_Unselect1();
 80023fa:	f7ff ff0d 	bl	8002218 <ST7735_Unselect1>
}
 80023fe:	bf00      	nop
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	0800d3c0 	.word	0x0800d3c0
 8002408:	0800d3fc 	.word	0x0800d3fc
 800240c:	0800d40c 	.word	0x0800d40c

08002410 <ST7735_WriteChar>:
    ST7735_WriteData(data, sizeof(data));

    ST7735_Unselect();
}

static void ST7735_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002410:	b082      	sub	sp, #8
 8002412:	b590      	push	{r4, r7, lr}
 8002414:	b089      	sub	sp, #36	; 0x24
 8002416:	af00      	add	r7, sp, #0
 8002418:	637b      	str	r3, [r7, #52]	; 0x34
 800241a:	4603      	mov	r3, r0
 800241c:	80fb      	strh	r3, [r7, #6]
 800241e:	460b      	mov	r3, r1
 8002420:	80bb      	strh	r3, [r7, #4]
 8002422:	4613      	mov	r3, r2
 8002424:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ST7735_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8002426:	88fb      	ldrh	r3, [r7, #6]
 8002428:	b2d8      	uxtb	r0, r3
 800242a:	88bb      	ldrh	r3, [r7, #4]
 800242c:	b2d9      	uxtb	r1, r3
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	b2da      	uxtb	r2, r3
 8002432:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8002436:	4413      	add	r3, r2
 8002438:	b2db      	uxtb	r3, r3
 800243a:	3b01      	subs	r3, #1
 800243c:	b2dc      	uxtb	r4, r3
 800243e:	88bb      	ldrh	r3, [r7, #4]
 8002440:	b2da      	uxtb	r2, r3
 8002442:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8002446:	4413      	add	r3, r2
 8002448:	b2db      	uxtb	r3, r3
 800244a:	3b01      	subs	r3, #1
 800244c:	b2db      	uxtb	r3, r3
 800244e:	4622      	mov	r2, r4
 8002450:	f7ff ff83 	bl	800235a <ST7735_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
 8002458:	e043      	b.n	80024e2 <ST7735_WriteChar+0xd2>
        b = font.data[(ch - 32) * font.height + i];
 800245a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	3b20      	subs	r3, #32
 8002460:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8002464:	fb01 f303 	mul.w	r3, r1, r3
 8002468:	4619      	mov	r1, r3
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	440b      	add	r3, r1
 800246e:	005b      	lsls	r3, r3, #1
 8002470:	4413      	add	r3, r2
 8002472:	881b      	ldrh	r3, [r3, #0]
 8002474:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
 800247a:	e029      	b.n	80024d0 <ST7735_WriteChar+0xc0>
            if((b << j) & 0x8000)  {
 800247c:	697a      	ldr	r2, [r7, #20]
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d00e      	beq.n	80024aa <ST7735_WriteChar+0x9a>
                uint8_t data[] = { color >> 8, color & 0xFF };
 800248c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	b29b      	uxth	r3, r3
 8002492:	b2db      	uxtb	r3, r3
 8002494:	743b      	strb	r3, [r7, #16]
 8002496:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002498:	b2db      	uxtb	r3, r3
 800249a:	747b      	strb	r3, [r7, #17]
                ST7735_WriteData(data, sizeof(data));
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	2102      	movs	r1, #2
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fef4 	bl	8002290 <ST7735_WriteData>
 80024a8:	e00f      	b.n	80024ca <ST7735_WriteChar+0xba>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 80024aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024ae:	0a1b      	lsrs	r3, r3, #8
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	733b      	strb	r3, [r7, #12]
 80024b6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	737b      	strb	r3, [r7, #13]
                ST7735_WriteData(data, sizeof(data));
 80024be:	f107 030c 	add.w	r3, r7, #12
 80024c2:	2102      	movs	r1, #2
 80024c4:	4618      	mov	r0, r3
 80024c6:	f7ff fee3 	bl	8002290 <ST7735_WriteData>
        for(j = 0; j < font.width; j++) {
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	3301      	adds	r3, #1
 80024ce:	61bb      	str	r3, [r7, #24]
 80024d0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80024d4:	461a      	mov	r2, r3
 80024d6:	69bb      	ldr	r3, [r7, #24]
 80024d8:	4293      	cmp	r3, r2
 80024da:	d3cf      	bcc.n	800247c <ST7735_WriteChar+0x6c>
    for(i = 0; i < font.height; i++) {
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	3301      	adds	r3, #1
 80024e0:	61fb      	str	r3, [r7, #28]
 80024e2:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80024e6:	461a      	mov	r2, r3
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d3b5      	bcc.n	800245a <ST7735_WriteChar+0x4a>
            }
        }
    }
}
 80024ee:	bf00      	nop
 80024f0:	bf00      	nop
 80024f2:	3724      	adds	r7, #36	; 0x24
 80024f4:	46bd      	mov	sp, r7
 80024f6:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80024fa:	b002      	add	sp, #8
 80024fc:	4770      	bx	lr

080024fe <ST7735_WriteString>:
        }
    }
}
*/

void ST7735_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80024fe:	b082      	sub	sp, #8
 8002500:	b580      	push	{r7, lr}
 8002502:	b086      	sub	sp, #24
 8002504:	af04      	add	r7, sp, #16
 8002506:	603a      	str	r2, [r7, #0]
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	4603      	mov	r3, r0
 800250c:	80fb      	strh	r3, [r7, #6]
 800250e:	460b      	mov	r3, r1
 8002510:	80bb      	strh	r3, [r7, #4]
    ST7735_Select();
 8002512:	f7ff fe5d 	bl	80021d0 <ST7735_Select>

    while(*str) {
 8002516:	e02d      	b.n	8002574 <ST7735_WriteString+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	7d3a      	ldrb	r2, [r7, #20]
 800251c:	4413      	add	r3, r2
 800251e:	2b7f      	cmp	r3, #127	; 0x7f
 8002520:	dd13      	ble.n	800254a <ST7735_WriteString+0x4c>
            x = 0;
 8002522:	2300      	movs	r3, #0
 8002524:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8002526:	7d7b      	ldrb	r3, [r7, #21]
 8002528:	b29a      	uxth	r2, r3
 800252a:	88bb      	ldrh	r3, [r7, #4]
 800252c:	4413      	add	r3, r2
 800252e:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 8002530:	88bb      	ldrh	r3, [r7, #4]
 8002532:	7d7a      	ldrb	r2, [r7, #21]
 8002534:	4413      	add	r3, r2
 8002536:	2b7f      	cmp	r3, #127	; 0x7f
 8002538:	dc21      	bgt.n	800257e <ST7735_WriteString+0x80>
                break;
            }

            if(*str == ' ') {
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	781b      	ldrb	r3, [r3, #0]
 800253e:	2b20      	cmp	r3, #32
 8002540:	d103      	bne.n	800254a <ST7735_WriteString+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	603b      	str	r3, [r7, #0]
                continue;
 8002548:	e014      	b.n	8002574 <ST7735_WriteString+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	781a      	ldrb	r2, [r3, #0]
 800254e:	88b9      	ldrh	r1, [r7, #4]
 8002550:	88f8      	ldrh	r0, [r7, #6]
 8002552:	8c3b      	ldrh	r3, [r7, #32]
 8002554:	9302      	str	r3, [sp, #8]
 8002556:	8bbb      	ldrh	r3, [r7, #28]
 8002558:	9301      	str	r3, [sp, #4]
 800255a:	69bb      	ldr	r3, [r7, #24]
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	697b      	ldr	r3, [r7, #20]
 8002560:	f7ff ff56 	bl	8002410 <ST7735_WriteChar>
        x += font.width;
 8002564:	7d3b      	ldrb	r3, [r7, #20]
 8002566:	b29a      	uxth	r2, r3
 8002568:	88fb      	ldrh	r3, [r7, #6]
 800256a:	4413      	add	r3, r2
 800256c:	80fb      	strh	r3, [r7, #6]
        str++;
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	3301      	adds	r3, #1
 8002572:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d1cd      	bne.n	8002518 <ST7735_WriteString+0x1a>
 800257c:	e000      	b.n	8002580 <ST7735_WriteString+0x82>
                break;
 800257e:	bf00      	nop
    }

    ST7735_Unselect();
 8002580:	f7ff fe32 	bl	80021e8 <ST7735_Unselect>
}
 8002584:	bf00      	nop
 8002586:	3708      	adds	r7, #8
 8002588:	46bd      	mov	sp, r7
 800258a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800258e:	b002      	add	sp, #8
 8002590:	4770      	bx	lr

08002592 <ST7735_WriteString1>:

void ST7735_WriteString1(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 8002592:	b082      	sub	sp, #8
 8002594:	b580      	push	{r7, lr}
 8002596:	b086      	sub	sp, #24
 8002598:	af04      	add	r7, sp, #16
 800259a:	603a      	str	r2, [r7, #0]
 800259c:	617b      	str	r3, [r7, #20]
 800259e:	4603      	mov	r3, r0
 80025a0:	80fb      	strh	r3, [r7, #6]
 80025a2:	460b      	mov	r3, r1
 80025a4:	80bb      	strh	r3, [r7, #4]
    ST7735_Select1();
 80025a6:	f7ff fe2b 	bl	8002200 <ST7735_Select1>

    while(*str) {
 80025aa:	e02d      	b.n	8002608 <ST7735_WriteString1+0x76>
        if(x + font.width >= ST7735_WIDTH) {
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	7d3a      	ldrb	r2, [r7, #20]
 80025b0:	4413      	add	r3, r2
 80025b2:	2b7f      	cmp	r3, #127	; 0x7f
 80025b4:	dd13      	ble.n	80025de <ST7735_WriteString1+0x4c>
            x = 0;
 80025b6:	2300      	movs	r3, #0
 80025b8:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 80025ba:	7d7b      	ldrb	r3, [r7, #21]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	88bb      	ldrh	r3, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ST7735_HEIGHT) {
 80025c4:	88bb      	ldrh	r3, [r7, #4]
 80025c6:	7d7a      	ldrb	r2, [r7, #21]
 80025c8:	4413      	add	r3, r2
 80025ca:	2b7f      	cmp	r3, #127	; 0x7f
 80025cc:	dc21      	bgt.n	8002612 <ST7735_WriteString1+0x80>
                break;
            }

            if(*str == ' ') {
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d103      	bne.n	80025de <ST7735_WriteString1+0x4c>
                // skip spaces in the beginning of the new line
                str++;
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	3301      	adds	r3, #1
 80025da:	603b      	str	r3, [r7, #0]
                continue;
 80025dc:	e014      	b.n	8002608 <ST7735_WriteString1+0x76>
            }
        }

        ST7735_WriteChar(x, y, *str, font, color, bgcolor);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	781a      	ldrb	r2, [r3, #0]
 80025e2:	88b9      	ldrh	r1, [r7, #4]
 80025e4:	88f8      	ldrh	r0, [r7, #6]
 80025e6:	8c3b      	ldrh	r3, [r7, #32]
 80025e8:	9302      	str	r3, [sp, #8]
 80025ea:	8bbb      	ldrh	r3, [r7, #28]
 80025ec:	9301      	str	r3, [sp, #4]
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	9300      	str	r3, [sp, #0]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	f7ff ff0c 	bl	8002410 <ST7735_WriteChar>
        x += font.width;
 80025f8:	7d3b      	ldrb	r3, [r7, #20]
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	88fb      	ldrh	r3, [r7, #6]
 80025fe:	4413      	add	r3, r2
 8002600:	80fb      	strh	r3, [r7, #6]
        str++;
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	3301      	adds	r3, #1
 8002606:	603b      	str	r3, [r7, #0]
    while(*str) {
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d1cd      	bne.n	80025ac <ST7735_WriteString1+0x1a>
 8002610:	e000      	b.n	8002614 <ST7735_WriteString1+0x82>
                break;
 8002612:	bf00      	nop
    }

    ST7735_Unselect1();
 8002614:	f7ff fe00 	bl	8002218 <ST7735_Unselect1>
}
 8002618:	bf00      	nop
 800261a:	3708      	adds	r7, #8
 800261c:	46bd      	mov	sp, r7
 800261e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002622:	b002      	add	sp, #8
 8002624:	4770      	bx	lr
	...

08002628 <ST7735_FillRectangle>:

void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b085      	sub	sp, #20
 800262c:	af00      	add	r7, sp, #0
 800262e:	4604      	mov	r4, r0
 8002630:	4608      	mov	r0, r1
 8002632:	4611      	mov	r1, r2
 8002634:	461a      	mov	r2, r3
 8002636:	4623      	mov	r3, r4
 8002638:	80fb      	strh	r3, [r7, #6]
 800263a:	4603      	mov	r3, r0
 800263c:	80bb      	strh	r3, [r7, #4]
 800263e:	460b      	mov	r3, r1
 8002640:	807b      	strh	r3, [r7, #2]
 8002642:	4613      	mov	r3, r2
 8002644:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 8002646:	88fb      	ldrh	r3, [r7, #6]
 8002648:	2b7f      	cmp	r3, #127	; 0x7f
 800264a:	d858      	bhi.n	80026fe <ST7735_FillRectangle+0xd6>
 800264c:	88bb      	ldrh	r3, [r7, #4]
 800264e:	2b7f      	cmp	r3, #127	; 0x7f
 8002650:	d855      	bhi.n	80026fe <ST7735_FillRectangle+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 8002652:	88fa      	ldrh	r2, [r7, #6]
 8002654:	887b      	ldrh	r3, [r7, #2]
 8002656:	4413      	add	r3, r2
 8002658:	2b80      	cmp	r3, #128	; 0x80
 800265a:	dd03      	ble.n	8002664 <ST7735_FillRectangle+0x3c>
 800265c:	88fb      	ldrh	r3, [r7, #6]
 800265e:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002662:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002664:	88ba      	ldrh	r2, [r7, #4]
 8002666:	883b      	ldrh	r3, [r7, #0]
 8002668:	4413      	add	r3, r2
 800266a:	2b80      	cmp	r3, #128	; 0x80
 800266c:	dd03      	ble.n	8002676 <ST7735_FillRectangle+0x4e>
 800266e:	88bb      	ldrh	r3, [r7, #4]
 8002670:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002674:	803b      	strh	r3, [r7, #0]

    ST7735_Select();
 8002676:	f7ff fdab 	bl	80021d0 <ST7735_Select>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	b2d8      	uxtb	r0, r3
 800267e:	88bb      	ldrh	r3, [r7, #4]
 8002680:	b2d9      	uxtb	r1, r3
 8002682:	88fb      	ldrh	r3, [r7, #6]
 8002684:	b2da      	uxtb	r2, r3
 8002686:	887b      	ldrh	r3, [r7, #2]
 8002688:	b2db      	uxtb	r3, r3
 800268a:	4413      	add	r3, r2
 800268c:	b2db      	uxtb	r3, r3
 800268e:	3b01      	subs	r3, #1
 8002690:	b2dc      	uxtb	r4, r3
 8002692:	88bb      	ldrh	r3, [r7, #4]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	883b      	ldrh	r3, [r7, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4413      	add	r3, r2
 800269c:	b2db      	uxtb	r3, r3
 800269e:	3b01      	subs	r3, #1
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	4622      	mov	r2, r4
 80026a4:	f7ff fe59 	bl	800235a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80026a8:	8c3b      	ldrh	r3, [r7, #32]
 80026aa:	0a1b      	lsrs	r3, r3, #8
 80026ac:	b29b      	uxth	r3, r3
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	733b      	strb	r3, [r7, #12]
 80026b2:	8c3b      	ldrh	r3, [r7, #32]
 80026b4:	b2db      	uxtb	r3, r3
 80026b6:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80026b8:	2201      	movs	r2, #1
 80026ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80026be:	4812      	ldr	r0, [pc, #72]	; (8002708 <ST7735_FillRectangle+0xe0>)
 80026c0:	f003 fddc 	bl	800627c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80026c4:	883b      	ldrh	r3, [r7, #0]
 80026c6:	80bb      	strh	r3, [r7, #4]
 80026c8:	e013      	b.n	80026f2 <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {
 80026ca:	887b      	ldrh	r3, [r7, #2]
 80026cc:	80fb      	strh	r3, [r7, #6]
 80026ce:	e00a      	b.n	80026e6 <ST7735_FillRectangle+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80026d0:	f107 010c 	add.w	r1, r7, #12
 80026d4:	f04f 33ff 	mov.w	r3, #4294967295
 80026d8:	2202      	movs	r2, #2
 80026da:	480c      	ldr	r0, [pc, #48]	; (800270c <ST7735_FillRectangle+0xe4>)
 80026dc:	f006 fc0a 	bl	8008ef4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80026e0:	88fb      	ldrh	r3, [r7, #6]
 80026e2:	3b01      	subs	r3, #1
 80026e4:	80fb      	strh	r3, [r7, #6]
 80026e6:	88fb      	ldrh	r3, [r7, #6]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f1      	bne.n	80026d0 <ST7735_FillRectangle+0xa8>
    for(y = h; y > 0; y--) {
 80026ec:	88bb      	ldrh	r3, [r7, #4]
 80026ee:	3b01      	subs	r3, #1
 80026f0:	80bb      	strh	r3, [r7, #4]
 80026f2:	88bb      	ldrh	r3, [r7, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d1e8      	bne.n	80026ca <ST7735_FillRectangle+0xa2>
        }
    }

    ST7735_Unselect();
 80026f8:	f7ff fd76 	bl	80021e8 <ST7735_Unselect>
 80026fc:	e000      	b.n	8002700 <ST7735_FillRectangle+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80026fe:	bf00      	nop
}
 8002700:	3714      	adds	r7, #20
 8002702:	46bd      	mov	sp, r7
 8002704:	bd90      	pop	{r4, r7, pc}
 8002706:	bf00      	nop
 8002708:	58021800 	.word	0x58021800
 800270c:	24000250 	.word	0x24000250

08002710 <ST7735_FillRectangle1>:
void ST7735_FillRectangle1(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8002710:	b590      	push	{r4, r7, lr}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	4604      	mov	r4, r0
 8002718:	4608      	mov	r0, r1
 800271a:	4611      	mov	r1, r2
 800271c:	461a      	mov	r2, r3
 800271e:	4623      	mov	r3, r4
 8002720:	80fb      	strh	r3, [r7, #6]
 8002722:	4603      	mov	r3, r0
 8002724:	80bb      	strh	r3, [r7, #4]
 8002726:	460b      	mov	r3, r1
 8002728:	807b      	strh	r3, [r7, #2]
 800272a:	4613      	mov	r3, r2
 800272c:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 800272e:	88fb      	ldrh	r3, [r7, #6]
 8002730:	2b7f      	cmp	r3, #127	; 0x7f
 8002732:	d858      	bhi.n	80027e6 <ST7735_FillRectangle1+0xd6>
 8002734:	88bb      	ldrh	r3, [r7, #4]
 8002736:	2b7f      	cmp	r3, #127	; 0x7f
 8002738:	d855      	bhi.n	80027e6 <ST7735_FillRectangle1+0xd6>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 800273a:	88fa      	ldrh	r2, [r7, #6]
 800273c:	887b      	ldrh	r3, [r7, #2]
 800273e:	4413      	add	r3, r2
 8002740:	2b80      	cmp	r3, #128	; 0x80
 8002742:	dd03      	ble.n	800274c <ST7735_FillRectangle1+0x3c>
 8002744:	88fb      	ldrh	r3, [r7, #6]
 8002746:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800274a:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 800274c:	88ba      	ldrh	r2, [r7, #4]
 800274e:	883b      	ldrh	r3, [r7, #0]
 8002750:	4413      	add	r3, r2
 8002752:	2b80      	cmp	r3, #128	; 0x80
 8002754:	dd03      	ble.n	800275e <ST7735_FillRectangle1+0x4e>
 8002756:	88bb      	ldrh	r3, [r7, #4]
 8002758:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 800275c:	803b      	strh	r3, [r7, #0]

    ST7735_Select1();
 800275e:	f7ff fd4f 	bl	8002200 <ST7735_Select1>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 8002762:	88fb      	ldrh	r3, [r7, #6]
 8002764:	b2d8      	uxtb	r0, r3
 8002766:	88bb      	ldrh	r3, [r7, #4]
 8002768:	b2d9      	uxtb	r1, r3
 800276a:	88fb      	ldrh	r3, [r7, #6]
 800276c:	b2da      	uxtb	r2, r3
 800276e:	887b      	ldrh	r3, [r7, #2]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	4413      	add	r3, r2
 8002774:	b2db      	uxtb	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b2dc      	uxtb	r4, r3
 800277a:	88bb      	ldrh	r3, [r7, #4]
 800277c:	b2da      	uxtb	r2, r3
 800277e:	883b      	ldrh	r3, [r7, #0]
 8002780:	b2db      	uxtb	r3, r3
 8002782:	4413      	add	r3, r2
 8002784:	b2db      	uxtb	r3, r3
 8002786:	3b01      	subs	r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	4622      	mov	r2, r4
 800278c:	f7ff fde5 	bl	800235a <ST7735_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8002790:	8c3b      	ldrh	r3, [r7, #32]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	b29b      	uxth	r3, r3
 8002796:	b2db      	uxtb	r3, r3
 8002798:	733b      	strb	r3, [r7, #12]
 800279a:	8c3b      	ldrh	r3, [r7, #32]
 800279c:	b2db      	uxtb	r3, r3
 800279e:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ST7735_DC_GPIO_Port, ST7735_DC_Pin, GPIO_PIN_SET);
 80027a0:	2201      	movs	r2, #1
 80027a2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a6:	4812      	ldr	r0, [pc, #72]	; (80027f0 <ST7735_FillRectangle1+0xe0>)
 80027a8:	f003 fd68 	bl	800627c <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 80027ac:	883b      	ldrh	r3, [r7, #0]
 80027ae:	80bb      	strh	r3, [r7, #4]
 80027b0:	e013      	b.n	80027da <ST7735_FillRectangle1+0xca>
        for(x = w; x > 0; x--) {
 80027b2:	887b      	ldrh	r3, [r7, #2]
 80027b4:	80fb      	strh	r3, [r7, #6]
 80027b6:	e00a      	b.n	80027ce <ST7735_FillRectangle1+0xbe>
            HAL_SPI_Transmit(&ST7735_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 80027b8:	f107 010c 	add.w	r1, r7, #12
 80027bc:	f04f 33ff 	mov.w	r3, #4294967295
 80027c0:	2202      	movs	r2, #2
 80027c2:	480c      	ldr	r0, [pc, #48]	; (80027f4 <ST7735_FillRectangle1+0xe4>)
 80027c4:	f006 fb96 	bl	8008ef4 <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 80027c8:	88fb      	ldrh	r3, [r7, #6]
 80027ca:	3b01      	subs	r3, #1
 80027cc:	80fb      	strh	r3, [r7, #6]
 80027ce:	88fb      	ldrh	r3, [r7, #6]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f1      	bne.n	80027b8 <ST7735_FillRectangle1+0xa8>
    for(y = h; y > 0; y--) {
 80027d4:	88bb      	ldrh	r3, [r7, #4]
 80027d6:	3b01      	subs	r3, #1
 80027d8:	80bb      	strh	r3, [r7, #4]
 80027da:	88bb      	ldrh	r3, [r7, #4]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d1e8      	bne.n	80027b2 <ST7735_FillRectangle1+0xa2>
        }
    }

    ST7735_Unselect1();
 80027e0:	f7ff fd1a 	bl	8002218 <ST7735_Unselect1>
 80027e4:	e000      	b.n	80027e8 <ST7735_FillRectangle1+0xd8>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80027e6:	bf00      	nop
}
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd90      	pop	{r4, r7, pc}
 80027ee:	bf00      	nop
 80027f0:	58021800 	.word	0x58021800
 80027f4:	24000250 	.word	0x24000250

080027f8 <ST7735_FillScreen>:

    free(line);
    ST7735_Unselect();
}

void ST7735_FillScreen(uint16_t color) {
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af02      	add	r7, sp, #8
 80027fe:	4603      	mov	r3, r0
 8002800:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002802:	88fb      	ldrh	r3, [r7, #6]
 8002804:	9300      	str	r3, [sp, #0]
 8002806:	2380      	movs	r3, #128	; 0x80
 8002808:	2280      	movs	r2, #128	; 0x80
 800280a:	2100      	movs	r1, #0
 800280c:	2000      	movs	r0, #0
 800280e:	f7ff ff0b 	bl	8002628 <ST7735_FillRectangle>
}
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <ST7735_FillScreen1>:
void ST7735_FillScreen1(uint16_t color) {
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af02      	add	r7, sp, #8
 8002820:	4603      	mov	r3, r0
 8002822:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle1(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 8002824:	88fb      	ldrh	r3, [r7, #6]
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	2380      	movs	r3, #128	; 0x80
 800282a:	2280      	movs	r2, #128	; 0x80
 800282c:	2100      	movs	r1, #0
 800282e:	2000      	movs	r0, #0
 8002830:	f7ff ff6e 	bl	8002710 <ST7735_FillRectangle1>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}

0800283c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <HAL_MspInit+0x30>)
 8002844:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002848:	4a08      	ldr	r2, [pc, #32]	; (800286c <HAL_MspInit+0x30>)
 800284a:	f043 0302 	orr.w	r3, r3, #2
 800284e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_MspInit+0x30>)
 8002854:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	607b      	str	r3, [r7, #4]
 800285e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	58024400 	.word	0x58024400

08002870 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b08e      	sub	sp, #56	; 0x38
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002878:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800287c:	2200      	movs	r2, #0
 800287e:	601a      	str	r2, [r3, #0]
 8002880:	605a      	str	r2, [r3, #4]
 8002882:	609a      	str	r2, [r3, #8]
 8002884:	60da      	str	r2, [r3, #12]
 8002886:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a59      	ldr	r2, [pc, #356]	; (80029f4 <HAL_ETH_MspInit+0x184>)
 800288e:	4293      	cmp	r3, r2
 8002890:	f040 80ab 	bne.w	80029ea <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8002894:	4b58      	ldr	r3, [pc, #352]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 8002896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800289a:	4a57      	ldr	r2, [pc, #348]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800289c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028a0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028a4:	4b54      	ldr	r3, [pc, #336]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028a6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ae:	623b      	str	r3, [r7, #32]
 80028b0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80028b2:	4b51      	ldr	r3, [pc, #324]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028b8:	4a4f      	ldr	r2, [pc, #316]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028be:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028c2:	4b4d      	ldr	r3, [pc, #308]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028cc:	61fb      	str	r3, [r7, #28]
 80028ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80028d0:	4b49      	ldr	r3, [pc, #292]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028d6:	4a48      	ldr	r2, [pc, #288]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028dc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80028e0:	4b45      	ldr	r3, [pc, #276]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	61bb      	str	r3, [r7, #24]
 80028ec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80028ee:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80028f4:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 80028f6:	f043 0304 	orr.w	r3, r3, #4
 80028fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80028fe:	4b3e      	ldr	r3, [pc, #248]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 8002900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002904:	f003 0304 	and.w	r3, r3, #4
 8002908:	617b      	str	r3, [r7, #20]
 800290a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290c:	4b3a      	ldr	r3, [pc, #232]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800290e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002912:	4a39      	ldr	r2, [pc, #228]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800291e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	613b      	str	r3, [r7, #16]
 8002928:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800292a:	4b33      	ldr	r3, [pc, #204]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800292c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002930:	4a31      	ldr	r2, [pc, #196]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 8002932:	f043 0302 	orr.w	r3, r3, #2
 8002936:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800293a:	4b2f      	ldr	r3, [pc, #188]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800293c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002940:	f003 0302 	and.w	r3, r3, #2
 8002944:	60fb      	str	r3, [r7, #12]
 8002946:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002948:	4b2b      	ldr	r3, [pc, #172]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800294a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800294e:	4a2a      	ldr	r2, [pc, #168]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 8002950:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002954:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_ETH_MspInit+0x188>)
 800295a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800295e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002962:	60bb      	str	r3, [r7, #8]
 8002964:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8002966:	2332      	movs	r3, #50	; 0x32
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800296a:	2302      	movs	r3, #2
 800296c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296e:	2300      	movs	r3, #0
 8002970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002972:	2300      	movs	r3, #0
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002976:	230b      	movs	r3, #11
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800297a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800297e:	4619      	mov	r1, r3
 8002980:	481e      	ldr	r0, [pc, #120]	; (80029fc <HAL_ETH_MspInit+0x18c>)
 8002982:	f003 fab3 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8002986:	2386      	movs	r3, #134	; 0x86
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800298a:	2302      	movs	r3, #2
 800298c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298e:	2300      	movs	r3, #0
 8002990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002992:	2300      	movs	r3, #0
 8002994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002996:	230b      	movs	r3, #11
 8002998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800299a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800299e:	4619      	mov	r1, r3
 80029a0:	4817      	ldr	r0, [pc, #92]	; (8002a00 <HAL_ETH_MspInit+0x190>)
 80029a2:	f003 faa3 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80029a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029b8:	230b      	movs	r3, #11
 80029ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029c0:	4619      	mov	r1, r3
 80029c2:	4810      	ldr	r0, [pc, #64]	; (8002a04 <HAL_ETH_MspInit+0x194>)
 80029c4:	f003 fa92 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80029c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80029cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ce:	2302      	movs	r3, #2
 80029d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d6:	2300      	movs	r3, #0
 80029d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80029da:	230b      	movs	r3, #11
 80029dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80029de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80029e2:	4619      	mov	r1, r3
 80029e4:	4808      	ldr	r0, [pc, #32]	; (8002a08 <HAL_ETH_MspInit+0x198>)
 80029e6:	f003 fa81 	bl	8005eec <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 80029ea:	bf00      	nop
 80029ec:	3738      	adds	r7, #56	; 0x38
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40028000 	.word	0x40028000
 80029f8:	58024400 	.word	0x58024400
 80029fc:	58020800 	.word	0x58020800
 8002a00:	58020000 	.word	0x58020000
 8002a04:	58020400 	.word	0x58020400
 8002a08:	58021800 	.word	0x58021800

08002a0c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b08a      	sub	sp, #40	; 0x28
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
 8002a1c:	605a      	str	r2, [r3, #4]
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	60da      	str	r2, [r3, #12]
 8002a22:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4a2a      	ldr	r2, [pc, #168]	; (8002ad4 <HAL_SPI_MspInit+0xc8>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d14d      	bne.n	8002aca <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002a2e:	4b2a      	ldr	r3, [pc, #168]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a30:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a34:	4a28      	ldr	r2, [pc, #160]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a3a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002a3e:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a40:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002a48:	613b      	str	r3, [r7, #16]
 8002a4a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a4c:	4b22      	ldr	r3, [pc, #136]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a52:	4a21      	ldr	r2, [pc, #132]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a5c:	4b1e      	ldr	r3, [pc, #120]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a72:	f043 0304 	orr.w	r3, r3, #4
 8002a76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002a7a:	4b17      	ldr	r3, [pc, #92]	; (8002ad8 <HAL_SPI_MspInit+0xcc>)
 8002a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	60bb      	str	r3, [r7, #8]
 8002a86:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a88:	2304      	movs	r3, #4
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002a90:	2302      	movs	r3, #2
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a94:	2300      	movs	r3, #0
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8002a98:	2307      	movs	r3, #7
 8002a9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480e      	ldr	r0, [pc, #56]	; (8002adc <HAL_SPI_MspInit+0xd0>)
 8002aa4:	f003 fa22 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002aa8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002aac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002aba:	2306      	movs	r3, #6
 8002abc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002abe:	f107 0314 	add.w	r3, r7, #20
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	4806      	ldr	r0, [pc, #24]	; (8002ae0 <HAL_SPI_MspInit+0xd4>)
 8002ac6:	f003 fa11 	bl	8005eec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8002aca:	bf00      	nop
 8002acc:	3728      	adds	r7, #40	; 0x28
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40003c00 	.word	0x40003c00
 8002ad8:	58024400 	.word	0x58024400
 8002adc:	58020400 	.word	0x58020400
 8002ae0:	58020800 	.word	0x58020800

08002ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b0b8      	sub	sp, #224	; 0xe0
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
 8002afa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002afc:	f107 0310 	add.w	r3, r7, #16
 8002b00:	22bc      	movs	r2, #188	; 0xbc
 8002b02:	2100      	movs	r1, #0
 8002b04:	4618      	mov	r0, r3
 8002b06:	f008 fcf9 	bl	800b4fc <memset>
  if(huart->Instance==USART3)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a57      	ldr	r2, [pc, #348]	; (8002c6c <HAL_UART_MspInit+0x188>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	f040 80a6 	bne.w	8002c62 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002b16:	2302      	movs	r3, #2
 8002b18:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b20:	f107 0310 	add.w	r3, r7, #16
 8002b24:	4618      	mov	r0, r3
 8002b26:	f004 fd77 	bl	8007618 <HAL_RCCEx_PeriphCLKConfig>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8002b30:	f7ff fb48 	bl	80021c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002b34:	4b4e      	ldr	r3, [pc, #312]	; (8002c70 <HAL_UART_MspInit+0x18c>)
 8002b36:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b3a:	4a4d      	ldr	r2, [pc, #308]	; (8002c70 <HAL_UART_MspInit+0x18c>)
 8002b3c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b40:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002b44:	4b4a      	ldr	r3, [pc, #296]	; (8002c70 <HAL_UART_MspInit+0x18c>)
 8002b46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002b4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4e:	60fb      	str	r3, [r7, #12]
 8002b50:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b52:	4b47      	ldr	r3, [pc, #284]	; (8002c70 <HAL_UART_MspInit+0x18c>)
 8002b54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b58:	4a45      	ldr	r2, [pc, #276]	; (8002c70 <HAL_UART_MspInit+0x18c>)
 8002b5a:	f043 0308 	orr.w	r3, r3, #8
 8002b5e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002b62:	4b43      	ldr	r3, [pc, #268]	; (8002c70 <HAL_UART_MspInit+0x18c>)
 8002b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002b68:	f003 0308 	and.w	r3, r3, #8
 8002b6c:	60bb      	str	r3, [r7, #8]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8002b70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b74:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b84:	2300      	movs	r3, #0
 8002b86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002b8a:	2307      	movs	r3, #7
 8002b8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b90:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002b94:	4619      	mov	r1, r3
 8002b96:	4837      	ldr	r0, [pc, #220]	; (8002c74 <HAL_UART_MspInit+0x190>)
 8002b98:	f003 f9a8 	bl	8005eec <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8002b9c:	4b36      	ldr	r3, [pc, #216]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002b9e:	4a37      	ldr	r2, [pc, #220]	; (8002c7c <HAL_UART_MspInit+0x198>)
 8002ba0:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002ba2:	4b35      	ldr	r3, [pc, #212]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002ba4:	222d      	movs	r2, #45	; 0x2d
 8002ba6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ba8:	4b33      	ldr	r3, [pc, #204]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002baa:	2200      	movs	r2, #0
 8002bac:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002bae:	4b32      	ldr	r3, [pc, #200]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002bb4:	4b30      	ldr	r3, [pc, #192]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bb6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002bba:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002bbc:	4b2e      	ldr	r3, [pc, #184]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002bc2:	4b2d      	ldr	r3, [pc, #180]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8002bc8:	4b2b      	ldr	r3, [pc, #172]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bca:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bce:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002bd0:	4b29      	ldr	r3, [pc, #164]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002bd6:	4b28      	ldr	r3, [pc, #160]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002bdc:	4826      	ldr	r0, [pc, #152]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bde:	f000 fb3b 	bl	8003258 <HAL_DMA_Init>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8002be8:	f7ff faec 	bl	80021c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a22      	ldr	r2, [pc, #136]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bf0:	67da      	str	r2, [r3, #124]	; 0x7c
 8002bf2:	4a21      	ldr	r2, [pc, #132]	; (8002c78 <HAL_UART_MspInit+0x194>)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8002bf8:	4b21      	ldr	r3, [pc, #132]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002bfa:	4a22      	ldr	r2, [pc, #136]	; (8002c84 <HAL_UART_MspInit+0x1a0>)
 8002bfc:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 8002bfe:	4b20      	ldr	r3, [pc, #128]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c00:	222e      	movs	r2, #46	; 0x2e
 8002c02:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002c04:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002c0a:	4b1d      	ldr	r3, [pc, #116]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002c10:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c16:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002c18:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002c1e:	4b18      	ldr	r3, [pc, #96]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 8002c24:	4b16      	ldr	r3, [pc, #88]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c26:	2200      	movs	r2, #0
 8002c28:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002c2a:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002c30:	4b13      	ldr	r3, [pc, #76]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8002c36:	4812      	ldr	r0, [pc, #72]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c38:	f000 fb0e 	bl	8003258 <HAL_DMA_Init>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d001      	beq.n	8002c46 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 8002c42:	f7ff fabf 	bl	80021c4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a0d      	ldr	r2, [pc, #52]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c4a:	679a      	str	r2, [r3, #120]	; 0x78
 8002c4c:	4a0c      	ldr	r2, [pc, #48]	; (8002c80 <HAL_UART_MspInit+0x19c>)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002c52:	2200      	movs	r2, #0
 8002c54:	2100      	movs	r1, #0
 8002c56:	2027      	movs	r0, #39	; 0x27
 8002c58:	f000 fac9 	bl	80031ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002c5c:	2027      	movs	r0, #39	; 0x27
 8002c5e:	f000 fae0 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002c62:	bf00      	nop
 8002c64:	37e0      	adds	r7, #224	; 0xe0
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	40004800 	.word	0x40004800
 8002c70:	58024400 	.word	0x58024400
 8002c74:	58020c00 	.word	0x58020c00
 8002c78:	24000368 	.word	0x24000368
 8002c7c:	40020028 	.word	0x40020028
 8002c80:	240003e0 	.word	0x240003e0
 8002c84:	40020070 	.word	0x40020070

08002c88 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b08a      	sub	sp, #40	; 0x28
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	2200      	movs	r2, #0
 8002c96:	601a      	str	r2, [r3, #0]
 8002c98:	605a      	str	r2, [r3, #4]
 8002c9a:	609a      	str	r2, [r3, #8]
 8002c9c:	60da      	str	r2, [r3, #12]
 8002c9e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a22      	ldr	r2, [pc, #136]	; (8002d30 <HAL_PCD_MspInit+0xa8>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d13d      	bne.n	8002d26 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8002caa:	f003 fceb 	bl	8006684 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cae:	4b21      	ldr	r3, [pc, #132]	; (8002d34 <HAL_PCD_MspInit+0xac>)
 8002cb0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cb4:	4a1f      	ldr	r2, [pc, #124]	; (8002d34 <HAL_PCD_MspInit+0xac>)
 8002cb6:	f043 0301 	orr.w	r3, r3, #1
 8002cba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002cbe:	4b1d      	ldr	r3, [pc, #116]	; (8002d34 <HAL_PCD_MspInit+0xac>)
 8002cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	613b      	str	r3, [r7, #16]
 8002cca:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8002ccc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002cd0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cda:	2300      	movs	r3, #0
 8002cdc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8002cde:	230a      	movs	r3, #10
 8002ce0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ce2:	f107 0314 	add.w	r3, r7, #20
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	4813      	ldr	r0, [pc, #76]	; (8002d38 <HAL_PCD_MspInit+0xb0>)
 8002cea:	f003 f8ff 	bl	8005eec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002cee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002cfc:	f107 0314 	add.w	r3, r7, #20
 8002d00:	4619      	mov	r1, r3
 8002d02:	480d      	ldr	r0, [pc, #52]	; (8002d38 <HAL_PCD_MspInit+0xb0>)
 8002d04:	f003 f8f2 	bl	8005eec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002d08:	4b0a      	ldr	r3, [pc, #40]	; (8002d34 <HAL_PCD_MspInit+0xac>)
 8002d0a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d0e:	4a09      	ldr	r2, [pc, #36]	; (8002d34 <HAL_PCD_MspInit+0xac>)
 8002d10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d14:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8002d18:	4b06      	ldr	r3, [pc, #24]	; (8002d34 <HAL_PCD_MspInit+0xac>)
 8002d1a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8002d1e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d22:	60fb      	str	r3, [r7, #12]
 8002d24:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002d26:	bf00      	nop
 8002d28:	3728      	adds	r7, #40	; 0x28
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	40080000 	.word	0x40080000
 8002d34:	58024400 	.word	0x58024400
 8002d38:	58020000 	.word	0x58020000

08002d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <NMI_Handler+0x4>

08002d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d46:	e7fe      	b.n	8002d46 <HardFault_Handler+0x4>

08002d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d4c:	e7fe      	b.n	8002d4c <MemManage_Handler+0x4>

08002d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d4e:	b480      	push	{r7}
 8002d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d52:	e7fe      	b.n	8002d52 <BusFault_Handler+0x4>

08002d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d58:	e7fe      	b.n	8002d58 <UsageFault_Handler+0x4>

08002d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d5a:	b480      	push	{r7}
 8002d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d5e:	bf00      	nop
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr

08002d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d76:	b480      	push	{r7}
 8002d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d7a:	bf00      	nop
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d82:	4770      	bx	lr

08002d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d88:	f000 f8f2 	bl	8002f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d8c:	bf00      	nop
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002d94:	4802      	ldr	r0, [pc, #8]	; (8002da0 <DMA1_Stream1_IRQHandler+0x10>)
 8002d96:	f001 fb1f 	bl	80043d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002d9a:	bf00      	nop
 8002d9c:	bd80      	pop	{r7, pc}
 8002d9e:	bf00      	nop
 8002da0:	24000368 	.word	0x24000368

08002da4 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8002da8:	4802      	ldr	r0, [pc, #8]	; (8002db4 <DMA1_Stream4_IRQHandler+0x10>)
 8002daa:	f001 fb15 	bl	80043d8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8002dae:	bf00      	nop
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	240003e0 	.word	0x240003e0

08002db8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002dbc:	4802      	ldr	r0, [pc, #8]	; (8002dc8 <USART3_IRQHandler+0x10>)
 8002dbe:	f006 fbc5 	bl	800954c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002dc2:	bf00      	nop
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	240002d8 	.word	0x240002d8

08002dcc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002dd4:	4a14      	ldr	r2, [pc, #80]	; (8002e28 <_sbrk+0x5c>)
 8002dd6:	4b15      	ldr	r3, [pc, #84]	; (8002e2c <_sbrk+0x60>)
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002de0:	4b13      	ldr	r3, [pc, #76]	; (8002e30 <_sbrk+0x64>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d102      	bne.n	8002dee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002de8:	4b11      	ldr	r3, [pc, #68]	; (8002e30 <_sbrk+0x64>)
 8002dea:	4a12      	ldr	r2, [pc, #72]	; (8002e34 <_sbrk+0x68>)
 8002dec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002dee:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <_sbrk+0x64>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d207      	bcs.n	8002e0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dfc:	f008 fb54 	bl	800b4a8 <__errno>
 8002e00:	4603      	mov	r3, r0
 8002e02:	220c      	movs	r2, #12
 8002e04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e06:	f04f 33ff 	mov.w	r3, #4294967295
 8002e0a:	e009      	b.n	8002e20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e0c:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <_sbrk+0x64>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e12:	4b07      	ldr	r3, [pc, #28]	; (8002e30 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	4a05      	ldr	r2, [pc, #20]	; (8002e30 <_sbrk+0x64>)
 8002e1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	24080000 	.word	0x24080000
 8002e2c:	00000400 	.word	0x00000400
 8002e30:	24000ca4 	.word	0x24000ca4
 8002e34:	24000cc0 	.word	0x24000cc0

08002e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8002e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002e70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8002e3c:	f7fe fd7e 	bl	800193c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e40:	480c      	ldr	r0, [pc, #48]	; (8002e74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e42:	490d      	ldr	r1, [pc, #52]	; (8002e78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e44:	4a0d      	ldr	r2, [pc, #52]	; (8002e7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e48:	e002      	b.n	8002e50 <LoopCopyDataInit>

08002e4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e4e:	3304      	adds	r3, #4

08002e50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e54:	d3f9      	bcc.n	8002e4a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e56:	4a0a      	ldr	r2, [pc, #40]	; (8002e80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e58:	4c0a      	ldr	r4, [pc, #40]	; (8002e84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e5c:	e001      	b.n	8002e62 <LoopFillZerobss>

08002e5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e60:	3204      	adds	r2, #4

08002e62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e64:	d3fb      	bcc.n	8002e5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e66:	f008 fb25 	bl	800b4b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e6a:	f7fe fdfd 	bl	8001a68 <main>
  bx  lr
 8002e6e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002e70:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002e74:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002e78:	24000084 	.word	0x24000084
  ldr r2, =_sidata
 8002e7c:	0800d4ac 	.word	0x0800d4ac
  ldr r2, =_sbss
 8002e80:	24000144 	.word	0x24000144
  ldr r4, =_ebss
 8002e84:	24000cbc 	.word	0x24000cbc

08002e88 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002e88:	e7fe      	b.n	8002e88 <ADC3_IRQHandler>
	...

08002e8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e92:	2003      	movs	r0, #3
 8002e94:	f000 f9a0 	bl	80031d8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002e98:	f004 f9e8 	bl	800726c <HAL_RCC_GetSysClockFreq>
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	4b15      	ldr	r3, [pc, #84]	; (8002ef4 <HAL_Init+0x68>)
 8002ea0:	699b      	ldr	r3, [r3, #24]
 8002ea2:	0a1b      	lsrs	r3, r3, #8
 8002ea4:	f003 030f 	and.w	r3, r3, #15
 8002ea8:	4913      	ldr	r1, [pc, #76]	; (8002ef8 <HAL_Init+0x6c>)
 8002eaa:	5ccb      	ldrb	r3, [r1, r3]
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	fa22 f303 	lsr.w	r3, r2, r3
 8002eb4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002eb6:	4b0f      	ldr	r3, [pc, #60]	; (8002ef4 <HAL_Init+0x68>)
 8002eb8:	699b      	ldr	r3, [r3, #24]
 8002eba:	f003 030f 	and.w	r3, r3, #15
 8002ebe:	4a0e      	ldr	r2, [pc, #56]	; (8002ef8 <HAL_Init+0x6c>)
 8002ec0:	5cd3      	ldrb	r3, [r2, r3]
 8002ec2:	f003 031f 	and.w	r3, r3, #31
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ecc:	4a0b      	ldr	r2, [pc, #44]	; (8002efc <HAL_Init+0x70>)
 8002ece:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002ed0:	4a0b      	ldr	r2, [pc, #44]	; (8002f00 <HAL_Init+0x74>)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002ed6:	2000      	movs	r0, #0
 8002ed8:	f000 f814 	bl	8002f04 <HAL_InitTick>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e002      	b.n	8002eec <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee6:	f7ff fca9 	bl	800283c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3708      	adds	r7, #8
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	58024400 	.word	0x58024400
 8002ef8:	0800bee8 	.word	0x0800bee8
 8002efc:	24000004 	.word	0x24000004
 8002f00:	24000000 	.word	0x24000000

08002f04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002f04:	b580      	push	{r7, lr}
 8002f06:	b082      	sub	sp, #8
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002f0c:	4b15      	ldr	r3, [pc, #84]	; (8002f64 <HAL_InitTick+0x60>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d101      	bne.n	8002f18 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e021      	b.n	8002f5c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002f18:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <HAL_InitTick+0x64>)
 8002f1a:	681a      	ldr	r2, [r3, #0]
 8002f1c:	4b11      	ldr	r3, [pc, #68]	; (8002f64 <HAL_InitTick+0x60>)
 8002f1e:	781b      	ldrb	r3, [r3, #0]
 8002f20:	4619      	mov	r1, r3
 8002f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f2e:	4618      	mov	r0, r3
 8002f30:	f000 f985 	bl	800323e <HAL_SYSTICK_Config>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e00e      	b.n	8002f5c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b0f      	cmp	r3, #15
 8002f42:	d80a      	bhi.n	8002f5a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f44:	2200      	movs	r2, #0
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	f04f 30ff 	mov.w	r0, #4294967295
 8002f4c:	f000 f94f 	bl	80031ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f50:	4a06      	ldr	r2, [pc, #24]	; (8002f6c <HAL_InitTick+0x68>)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f56:	2300      	movs	r3, #0
 8002f58:	e000      	b.n	8002f5c <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	2400001c 	.word	0x2400001c
 8002f68:	24000000 	.word	0x24000000
 8002f6c:	24000018 	.word	0x24000018

08002f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002f74:	4b06      	ldr	r3, [pc, #24]	; (8002f90 <HAL_IncTick+0x20>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <HAL_IncTick+0x24>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4413      	add	r3, r2
 8002f80:	4a04      	ldr	r2, [pc, #16]	; (8002f94 <HAL_IncTick+0x24>)
 8002f82:	6013      	str	r3, [r2, #0]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	2400001c 	.word	0x2400001c
 8002f94:	24000ca8 	.word	0x24000ca8

08002f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_GetTick+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	24000ca8 	.word	0x24000ca8

08002fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fb8:	f7ff ffee 	bl	8002f98 <HAL_GetTick>
 8002fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc8:	d005      	beq.n	8002fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002fca:	4b0a      	ldr	r3, [pc, #40]	; (8002ff4 <HAL_Delay+0x44>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002fd6:	bf00      	nop
 8002fd8:	f7ff ffde 	bl	8002f98 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	68fa      	ldr	r2, [r7, #12]
 8002fe4:	429a      	cmp	r2, r3
 8002fe6:	d8f7      	bhi.n	8002fd8 <HAL_Delay+0x28>
  {
  }
}
 8002fe8:	bf00      	nop
 8002fea:	bf00      	nop
 8002fec:	3710      	adds	r7, #16
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd80      	pop	{r7, pc}
 8002ff2:	bf00      	nop
 8002ff4:	2400001c 	.word	0x2400001c

08002ff8 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002ffc:	4b03      	ldr	r3, [pc, #12]	; (800300c <HAL_GetREVID+0x14>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	0c1b      	lsrs	r3, r3, #16
}
 8003002:	4618      	mov	r0, r3
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	5c001000 	.word	0x5c001000

08003010 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8003018:	4b06      	ldr	r3, [pc, #24]	; (8003034 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8003020:	4904      	ldr	r1, [pc, #16]	; (8003034 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	58000400 	.word	0x58000400

08003038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003048:	4b0b      	ldr	r3, [pc, #44]	; (8003078 <__NVIC_SetPriorityGrouping+0x40>)
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003054:	4013      	ands	r3, r2
 8003056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003060:	4b06      	ldr	r3, [pc, #24]	; (800307c <__NVIC_SetPriorityGrouping+0x44>)
 8003062:	4313      	orrs	r3, r2
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <__NVIC_SetPriorityGrouping+0x40>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00
 800307c:	05fa0000 	.word	0x05fa0000

08003080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003084:	4b04      	ldr	r3, [pc, #16]	; (8003098 <__NVIC_GetPriorityGrouping+0x18>)
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	0a1b      	lsrs	r3, r3, #8
 800308a:	f003 0307 	and.w	r3, r3, #7
}
 800308e:	4618      	mov	r0, r3
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr
 8003098:	e000ed00 	.word	0xe000ed00

0800309c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	4603      	mov	r3, r0
 80030a4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	db0b      	blt.n	80030c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030ae:	88fb      	ldrh	r3, [r7, #6]
 80030b0:	f003 021f 	and.w	r2, r3, #31
 80030b4:	4907      	ldr	r1, [pc, #28]	; (80030d4 <__NVIC_EnableIRQ+0x38>)
 80030b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030ba:	095b      	lsrs	r3, r3, #5
 80030bc:	2001      	movs	r0, #1
 80030be:	fa00 f202 	lsl.w	r2, r0, r2
 80030c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
 80030d2:	bf00      	nop
 80030d4:	e000e100 	.word	0xe000e100

080030d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4603      	mov	r3, r0
 80030e0:	6039      	str	r1, [r7, #0]
 80030e2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80030e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	db0a      	blt.n	8003102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	b2da      	uxtb	r2, r3
 80030f0:	490c      	ldr	r1, [pc, #48]	; (8003124 <__NVIC_SetPriority+0x4c>)
 80030f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	b2d2      	uxtb	r2, r2
 80030fa:	440b      	add	r3, r1
 80030fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003100:	e00a      	b.n	8003118 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	b2da      	uxtb	r2, r3
 8003106:	4908      	ldr	r1, [pc, #32]	; (8003128 <__NVIC_SetPriority+0x50>)
 8003108:	88fb      	ldrh	r3, [r7, #6]
 800310a:	f003 030f 	and.w	r3, r3, #15
 800310e:	3b04      	subs	r3, #4
 8003110:	0112      	lsls	r2, r2, #4
 8003112:	b2d2      	uxtb	r2, r2
 8003114:	440b      	add	r3, r1
 8003116:	761a      	strb	r2, [r3, #24]
}
 8003118:	bf00      	nop
 800311a:	370c      	adds	r7, #12
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000e100 	.word	0xe000e100
 8003128:	e000ed00 	.word	0xe000ed00

0800312c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800312c:	b480      	push	{r7}
 800312e:	b089      	sub	sp, #36	; 0x24
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	f003 0307 	and.w	r3, r3, #7
 800313e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	f1c3 0307 	rsb	r3, r3, #7
 8003146:	2b04      	cmp	r3, #4
 8003148:	bf28      	it	cs
 800314a:	2304      	movcs	r3, #4
 800314c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	3304      	adds	r3, #4
 8003152:	2b06      	cmp	r3, #6
 8003154:	d902      	bls.n	800315c <NVIC_EncodePriority+0x30>
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	3b03      	subs	r3, #3
 800315a:	e000      	b.n	800315e <NVIC_EncodePriority+0x32>
 800315c:	2300      	movs	r3, #0
 800315e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003160:	f04f 32ff 	mov.w	r2, #4294967295
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	fa02 f303 	lsl.w	r3, r2, r3
 800316a:	43da      	mvns	r2, r3
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	401a      	ands	r2, r3
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003174:	f04f 31ff 	mov.w	r1, #4294967295
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	fa01 f303 	lsl.w	r3, r1, r3
 800317e:	43d9      	mvns	r1, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003184:	4313      	orrs	r3, r2
         );
}
 8003186:	4618      	mov	r0, r3
 8003188:	3724      	adds	r7, #36	; 0x24
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
	...

08003194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	3b01      	subs	r3, #1
 80031a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a4:	d301      	bcc.n	80031aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a6:	2301      	movs	r3, #1
 80031a8:	e00f      	b.n	80031ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031aa:	4a0a      	ldr	r2, [pc, #40]	; (80031d4 <SysTick_Config+0x40>)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031b2:	210f      	movs	r1, #15
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f7ff ff8e 	bl	80030d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031bc:	4b05      	ldr	r3, [pc, #20]	; (80031d4 <SysTick_Config+0x40>)
 80031be:	2200      	movs	r2, #0
 80031c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031c2:	4b04      	ldr	r3, [pc, #16]	; (80031d4 <SysTick_Config+0x40>)
 80031c4:	2207      	movs	r2, #7
 80031c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	e000e010 	.word	0xe000e010

080031d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f7ff ff29 	bl	8003038 <__NVIC_SetPriorityGrouping>
}
 80031e6:	bf00      	nop
 80031e8:	3708      	adds	r7, #8
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bd80      	pop	{r7, pc}

080031ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b086      	sub	sp, #24
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	4603      	mov	r3, r0
 80031f6:	60b9      	str	r1, [r7, #8]
 80031f8:	607a      	str	r2, [r7, #4]
 80031fa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff40 	bl	8003080 <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff90 	bl	800312c <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5f 	bl	80030d8 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff33 	bl	800309c <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa4 	bl	8003194 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}
	...

08003258 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8003260:	f7ff fe9a 	bl	8002f98 <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d101      	bne.n	8003270 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e316      	b.n	800389e <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a66      	ldr	r2, [pc, #408]	; (8003410 <HAL_DMA_Init+0x1b8>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d04a      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4a65      	ldr	r2, [pc, #404]	; (8003414 <HAL_DMA_Init+0x1bc>)
 8003280:	4293      	cmp	r3, r2
 8003282:	d045      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a63      	ldr	r2, [pc, #396]	; (8003418 <HAL_DMA_Init+0x1c0>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d040      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a62      	ldr	r2, [pc, #392]	; (800341c <HAL_DMA_Init+0x1c4>)
 8003294:	4293      	cmp	r3, r2
 8003296:	d03b      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a60      	ldr	r2, [pc, #384]	; (8003420 <HAL_DMA_Init+0x1c8>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d036      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4a5f      	ldr	r2, [pc, #380]	; (8003424 <HAL_DMA_Init+0x1cc>)
 80032a8:	4293      	cmp	r3, r2
 80032aa:	d031      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a5d      	ldr	r2, [pc, #372]	; (8003428 <HAL_DMA_Init+0x1d0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d02c      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5c      	ldr	r2, [pc, #368]	; (800342c <HAL_DMA_Init+0x1d4>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d027      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a5a      	ldr	r2, [pc, #360]	; (8003430 <HAL_DMA_Init+0x1d8>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d022      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a59      	ldr	r2, [pc, #356]	; (8003434 <HAL_DMA_Init+0x1dc>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d01d      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a57      	ldr	r2, [pc, #348]	; (8003438 <HAL_DMA_Init+0x1e0>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d018      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a56      	ldr	r2, [pc, #344]	; (800343c <HAL_DMA_Init+0x1e4>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d013      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a54      	ldr	r2, [pc, #336]	; (8003440 <HAL_DMA_Init+0x1e8>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00e      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a53      	ldr	r2, [pc, #332]	; (8003444 <HAL_DMA_Init+0x1ec>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d009      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a51      	ldr	r2, [pc, #324]	; (8003448 <HAL_DMA_Init+0x1f0>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d004      	beq.n	8003310 <HAL_DMA_Init+0xb8>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4a50      	ldr	r2, [pc, #320]	; (800344c <HAL_DMA_Init+0x1f4>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d101      	bne.n	8003314 <HAL_DMA_Init+0xbc>
 8003310:	2301      	movs	r3, #1
 8003312:	e000      	b.n	8003316 <HAL_DMA_Init+0xbe>
 8003314:	2300      	movs	r3, #0
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 813b 	beq.w	8003592 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	4a37      	ldr	r2, [pc, #220]	; (8003410 <HAL_DMA_Init+0x1b8>)
 8003332:	4293      	cmp	r3, r2
 8003334:	d04a      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a36      	ldr	r2, [pc, #216]	; (8003414 <HAL_DMA_Init+0x1bc>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d045      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a34      	ldr	r2, [pc, #208]	; (8003418 <HAL_DMA_Init+0x1c0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d040      	beq.n	80033cc <HAL_DMA_Init+0x174>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a33      	ldr	r2, [pc, #204]	; (800341c <HAL_DMA_Init+0x1c4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d03b      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a31      	ldr	r2, [pc, #196]	; (8003420 <HAL_DMA_Init+0x1c8>)
 800335a:	4293      	cmp	r3, r2
 800335c:	d036      	beq.n	80033cc <HAL_DMA_Init+0x174>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a30      	ldr	r2, [pc, #192]	; (8003424 <HAL_DMA_Init+0x1cc>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d031      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a2e      	ldr	r2, [pc, #184]	; (8003428 <HAL_DMA_Init+0x1d0>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d02c      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a2d      	ldr	r2, [pc, #180]	; (800342c <HAL_DMA_Init+0x1d4>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d027      	beq.n	80033cc <HAL_DMA_Init+0x174>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a2b      	ldr	r2, [pc, #172]	; (8003430 <HAL_DMA_Init+0x1d8>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d022      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a2a      	ldr	r2, [pc, #168]	; (8003434 <HAL_DMA_Init+0x1dc>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d01d      	beq.n	80033cc <HAL_DMA_Init+0x174>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a28      	ldr	r2, [pc, #160]	; (8003438 <HAL_DMA_Init+0x1e0>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d018      	beq.n	80033cc <HAL_DMA_Init+0x174>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a27      	ldr	r2, [pc, #156]	; (800343c <HAL_DMA_Init+0x1e4>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d013      	beq.n	80033cc <HAL_DMA_Init+0x174>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a25      	ldr	r2, [pc, #148]	; (8003440 <HAL_DMA_Init+0x1e8>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d00e      	beq.n	80033cc <HAL_DMA_Init+0x174>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a24      	ldr	r2, [pc, #144]	; (8003444 <HAL_DMA_Init+0x1ec>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d009      	beq.n	80033cc <HAL_DMA_Init+0x174>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a22      	ldr	r2, [pc, #136]	; (8003448 <HAL_DMA_Init+0x1f0>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d004      	beq.n	80033cc <HAL_DMA_Init+0x174>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a21      	ldr	r2, [pc, #132]	; (800344c <HAL_DMA_Init+0x1f4>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d108      	bne.n	80033de <HAL_DMA_Init+0x186>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	681a      	ldr	r2, [r3, #0]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f022 0201 	bic.w	r2, r2, #1
 80033da:	601a      	str	r2, [r3, #0]
 80033dc:	e007      	b.n	80033ee <HAL_DMA_Init+0x196>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	681a      	ldr	r2, [r3, #0]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f022 0201 	bic.w	r2, r2, #1
 80033ec:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80033ee:	e02f      	b.n	8003450 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80033f0:	f7ff fdd2 	bl	8002f98 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d928      	bls.n	8003450 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2220      	movs	r2, #32
 8003402:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2203      	movs	r2, #3
 8003408:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e246      	b.n	800389e <HAL_DMA_Init+0x646>
 8003410:	40020010 	.word	0x40020010
 8003414:	40020028 	.word	0x40020028
 8003418:	40020040 	.word	0x40020040
 800341c:	40020058 	.word	0x40020058
 8003420:	40020070 	.word	0x40020070
 8003424:	40020088 	.word	0x40020088
 8003428:	400200a0 	.word	0x400200a0
 800342c:	400200b8 	.word	0x400200b8
 8003430:	40020410 	.word	0x40020410
 8003434:	40020428 	.word	0x40020428
 8003438:	40020440 	.word	0x40020440
 800343c:	40020458 	.word	0x40020458
 8003440:	40020470 	.word	0x40020470
 8003444:	40020488 	.word	0x40020488
 8003448:	400204a0 	.word	0x400204a0
 800344c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1c8      	bne.n	80033f0 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003466:	697a      	ldr	r2, [r7, #20]
 8003468:	4b83      	ldr	r3, [pc, #524]	; (8003678 <HAL_DMA_Init+0x420>)
 800346a:	4013      	ands	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8003476:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	691b      	ldr	r3, [r3, #16]
 800347c:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003482:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	699b      	ldr	r3, [r3, #24]
 8003488:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800348e:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d107      	bne.n	80034b4 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	4313      	orrs	r3, r2
 80034ae:	697a      	ldr	r2, [r7, #20]
 80034b0:	4313      	orrs	r3, r2
 80034b2:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80034b4:	4b71      	ldr	r3, [pc, #452]	; (800367c <HAL_DMA_Init+0x424>)
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	4b71      	ldr	r3, [pc, #452]	; (8003680 <HAL_DMA_Init+0x428>)
 80034ba:	4013      	ands	r3, r2
 80034bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034c0:	d328      	bcc.n	8003514 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	2b28      	cmp	r3, #40	; 0x28
 80034c8:	d903      	bls.n	80034d2 <HAL_DMA_Init+0x27a>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	2b2e      	cmp	r3, #46	; 0x2e
 80034d0:	d917      	bls.n	8003502 <HAL_DMA_Init+0x2aa>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	2b3e      	cmp	r3, #62	; 0x3e
 80034d8:	d903      	bls.n	80034e2 <HAL_DMA_Init+0x28a>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	2b42      	cmp	r3, #66	; 0x42
 80034e0:	d90f      	bls.n	8003502 <HAL_DMA_Init+0x2aa>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	2b46      	cmp	r3, #70	; 0x46
 80034e8:	d903      	bls.n	80034f2 <HAL_DMA_Init+0x29a>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	2b48      	cmp	r3, #72	; 0x48
 80034f0:	d907      	bls.n	8003502 <HAL_DMA_Init+0x2aa>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	2b4e      	cmp	r3, #78	; 0x4e
 80034f8:	d905      	bls.n	8003506 <HAL_DMA_Init+0x2ae>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	2b52      	cmp	r3, #82	; 0x52
 8003500:	d801      	bhi.n	8003506 <HAL_DMA_Init+0x2ae>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_DMA_Init+0x2b0>
 8003506:	2300      	movs	r3, #0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d003      	beq.n	8003514 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003512:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	697a      	ldr	r2, [r7, #20]
 800351a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	695b      	ldr	r3, [r3, #20]
 8003522:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003530:	697a      	ldr	r2, [r7, #20]
 8003532:	4313      	orrs	r3, r2
 8003534:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800353a:	2b04      	cmp	r3, #4
 800353c:	d117      	bne.n	800356e <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00e      	beq.n	800356e <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003550:	6878      	ldr	r0, [r7, #4]
 8003552:	f001 ff1d 	bl	8005390 <DMA_CheckFifoParam>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2240      	movs	r2, #64	; 0x40
 8003560:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2201      	movs	r2, #1
 8003566:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 800356a:	2301      	movs	r3, #1
 800356c:	e197      	b.n	800389e <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	697a      	ldr	r2, [r7, #20]
 8003574:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f001 fe58 	bl	800522c <DMA_CalcBaseAndBitshift>
 800357c:	4603      	mov	r3, r0
 800357e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003584:	f003 031f 	and.w	r3, r3, #31
 8003588:	223f      	movs	r2, #63	; 0x3f
 800358a:	409a      	lsls	r2, r3
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	609a      	str	r2, [r3, #8]
 8003590:	e0cd      	b.n	800372e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a3b      	ldr	r2, [pc, #236]	; (8003684 <HAL_DMA_Init+0x42c>)
 8003598:	4293      	cmp	r3, r2
 800359a:	d022      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a39      	ldr	r2, [pc, #228]	; (8003688 <HAL_DMA_Init+0x430>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d01d      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	4a38      	ldr	r2, [pc, #224]	; (800368c <HAL_DMA_Init+0x434>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d018      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a36      	ldr	r2, [pc, #216]	; (8003690 <HAL_DMA_Init+0x438>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d013      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a35      	ldr	r2, [pc, #212]	; (8003694 <HAL_DMA_Init+0x43c>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d00e      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a33      	ldr	r2, [pc, #204]	; (8003698 <HAL_DMA_Init+0x440>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d009      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	4a32      	ldr	r2, [pc, #200]	; (800369c <HAL_DMA_Init+0x444>)
 80035d4:	4293      	cmp	r3, r2
 80035d6:	d004      	beq.n	80035e2 <HAL_DMA_Init+0x38a>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a30      	ldr	r2, [pc, #192]	; (80036a0 <HAL_DMA_Init+0x448>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d101      	bne.n	80035e6 <HAL_DMA_Init+0x38e>
 80035e2:	2301      	movs	r3, #1
 80035e4:	e000      	b.n	80035e8 <HAL_DMA_Init+0x390>
 80035e6:	2300      	movs	r3, #0
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8097 	beq.w	800371c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a24      	ldr	r2, [pc, #144]	; (8003684 <HAL_DMA_Init+0x42c>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d021      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a22      	ldr	r2, [pc, #136]	; (8003688 <HAL_DMA_Init+0x430>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d01c      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a21      	ldr	r2, [pc, #132]	; (800368c <HAL_DMA_Init+0x434>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d017      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1f      	ldr	r2, [pc, #124]	; (8003690 <HAL_DMA_Init+0x438>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d012      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a1e      	ldr	r2, [pc, #120]	; (8003694 <HAL_DMA_Init+0x43c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d00d      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	4a1c      	ldr	r2, [pc, #112]	; (8003698 <HAL_DMA_Init+0x440>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d008      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1b      	ldr	r2, [pc, #108]	; (800369c <HAL_DMA_Init+0x444>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <HAL_DMA_Init+0x3e4>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a19      	ldr	r2, [pc, #100]	; (80036a0 <HAL_DMA_Init+0x448>)
 800363a:	4293      	cmp	r3, r2
 800363c:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2202      	movs	r2, #2
 8003642:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	4b12      	ldr	r3, [pc, #72]	; (80036a4 <HAL_DMA_Init+0x44c>)
 800365a:	4013      	ands	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b40      	cmp	r3, #64	; 0x40
 8003664:	d020      	beq.n	80036a8 <HAL_DMA_Init+0x450>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b80      	cmp	r3, #128	; 0x80
 800366c:	d102      	bne.n	8003674 <HAL_DMA_Init+0x41c>
 800366e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003672:	e01a      	b.n	80036aa <HAL_DMA_Init+0x452>
 8003674:	2300      	movs	r3, #0
 8003676:	e018      	b.n	80036aa <HAL_DMA_Init+0x452>
 8003678:	fe10803f 	.word	0xfe10803f
 800367c:	5c001000 	.word	0x5c001000
 8003680:	ffff0000 	.word	0xffff0000
 8003684:	58025408 	.word	0x58025408
 8003688:	5802541c 	.word	0x5802541c
 800368c:	58025430 	.word	0x58025430
 8003690:	58025444 	.word	0x58025444
 8003694:	58025458 	.word	0x58025458
 8003698:	5802546c 	.word	0x5802546c
 800369c:	58025480 	.word	0x58025480
 80036a0:	58025494 	.word	0x58025494
 80036a4:	fffe000f 	.word	0xfffe000f
 80036a8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	68d2      	ldr	r2, [r2, #12]
 80036ae:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80036b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	695b      	ldr	r3, [r3, #20]
 80036be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80036c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	699b      	ldr	r3, [r3, #24]
 80036c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80036c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80036d0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a1b      	ldr	r3, [r3, #32]
 80036d6:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80036d8:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	461a      	mov	r2, r3
 80036ee:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <HAL_DMA_Init+0x650>)
 80036f0:	4413      	add	r3, r2
 80036f2:	4a6e      	ldr	r2, [pc, #440]	; (80038ac <HAL_DMA_Init+0x654>)
 80036f4:	fba2 2303 	umull	r2, r3, r2, r3
 80036f8:	091b      	lsrs	r3, r3, #4
 80036fa:	009a      	lsls	r2, r3, #2
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003700:	6878      	ldr	r0, [r7, #4]
 8003702:	f001 fd93 	bl	800522c <DMA_CalcBaseAndBitshift>
 8003706:	4603      	mov	r3, r0
 8003708:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800370e:	f003 031f 	and.w	r3, r3, #31
 8003712:	2201      	movs	r2, #1
 8003714:	409a      	lsls	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	605a      	str	r2, [r3, #4]
 800371a:	e008      	b.n	800372e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2240      	movs	r2, #64	; 0x40
 8003720:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2203      	movs	r2, #3
 8003726:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e0b7      	b.n	800389e <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a5f      	ldr	r2, [pc, #380]	; (80038b0 <HAL_DMA_Init+0x658>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d072      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a5d      	ldr	r2, [pc, #372]	; (80038b4 <HAL_DMA_Init+0x65c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d06d      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a5c      	ldr	r2, [pc, #368]	; (80038b8 <HAL_DMA_Init+0x660>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d068      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a5a      	ldr	r2, [pc, #360]	; (80038bc <HAL_DMA_Init+0x664>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d063      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a59      	ldr	r2, [pc, #356]	; (80038c0 <HAL_DMA_Init+0x668>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d05e      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4a57      	ldr	r2, [pc, #348]	; (80038c4 <HAL_DMA_Init+0x66c>)
 8003766:	4293      	cmp	r3, r2
 8003768:	d059      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a56      	ldr	r2, [pc, #344]	; (80038c8 <HAL_DMA_Init+0x670>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d054      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a54      	ldr	r2, [pc, #336]	; (80038cc <HAL_DMA_Init+0x674>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d04f      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a53      	ldr	r2, [pc, #332]	; (80038d0 <HAL_DMA_Init+0x678>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d04a      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a51      	ldr	r2, [pc, #324]	; (80038d4 <HAL_DMA_Init+0x67c>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d045      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <HAL_DMA_Init+0x680>)
 8003798:	4293      	cmp	r3, r2
 800379a:	d040      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	4a4e      	ldr	r2, [pc, #312]	; (80038dc <HAL_DMA_Init+0x684>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d03b      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a4d      	ldr	r2, [pc, #308]	; (80038e0 <HAL_DMA_Init+0x688>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d036      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a4b      	ldr	r2, [pc, #300]	; (80038e4 <HAL_DMA_Init+0x68c>)
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d031      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4a4a      	ldr	r2, [pc, #296]	; (80038e8 <HAL_DMA_Init+0x690>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d02c      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	4a48      	ldr	r2, [pc, #288]	; (80038ec <HAL_DMA_Init+0x694>)
 80037ca:	4293      	cmp	r3, r2
 80037cc:	d027      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a47      	ldr	r2, [pc, #284]	; (80038f0 <HAL_DMA_Init+0x698>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d022      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a45      	ldr	r2, [pc, #276]	; (80038f4 <HAL_DMA_Init+0x69c>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d01d      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a44      	ldr	r2, [pc, #272]	; (80038f8 <HAL_DMA_Init+0x6a0>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d018      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a42      	ldr	r2, [pc, #264]	; (80038fc <HAL_DMA_Init+0x6a4>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d013      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_DMA_Init+0x6a8>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d00e      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a3f      	ldr	r2, [pc, #252]	; (8003904 <HAL_DMA_Init+0x6ac>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d009      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4a3e      	ldr	r2, [pc, #248]	; (8003908 <HAL_DMA_Init+0x6b0>)
 8003810:	4293      	cmp	r3, r2
 8003812:	d004      	beq.n	800381e <HAL_DMA_Init+0x5c6>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a3c      	ldr	r2, [pc, #240]	; (800390c <HAL_DMA_Init+0x6b4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d101      	bne.n	8003822 <HAL_DMA_Init+0x5ca>
 800381e:	2301      	movs	r3, #1
 8003820:	e000      	b.n	8003824 <HAL_DMA_Init+0x5cc>
 8003822:	2300      	movs	r3, #0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d032      	beq.n	800388e <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f001 fe2d 	bl	8005488 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	2b80      	cmp	r3, #128	; 0x80
 8003834:	d102      	bne.n	800383c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003844:	b2d2      	uxtb	r2, r2
 8003846:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003850:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d010      	beq.n	800387c <HAL_DMA_Init+0x624>
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	685b      	ldr	r3, [r3, #4]
 800385e:	2b08      	cmp	r3, #8
 8003860:	d80c      	bhi.n	800387c <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f001 feaa 	bl	80055bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800386c:	2200      	movs	r2, #0
 800386e:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003878:	605a      	str	r2, [r3, #4]
 800387a:	e008      	b.n	800388e <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2200      	movs	r2, #0
 8003880:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2201      	movs	r2, #1
 8003898:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3718      	adds	r7, #24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	a7fdabf8 	.word	0xa7fdabf8
 80038ac:	cccccccd 	.word	0xcccccccd
 80038b0:	40020010 	.word	0x40020010
 80038b4:	40020028 	.word	0x40020028
 80038b8:	40020040 	.word	0x40020040
 80038bc:	40020058 	.word	0x40020058
 80038c0:	40020070 	.word	0x40020070
 80038c4:	40020088 	.word	0x40020088
 80038c8:	400200a0 	.word	0x400200a0
 80038cc:	400200b8 	.word	0x400200b8
 80038d0:	40020410 	.word	0x40020410
 80038d4:	40020428 	.word	0x40020428
 80038d8:	40020440 	.word	0x40020440
 80038dc:	40020458 	.word	0x40020458
 80038e0:	40020470 	.word	0x40020470
 80038e4:	40020488 	.word	0x40020488
 80038e8:	400204a0 	.word	0x400204a0
 80038ec:	400204b8 	.word	0x400204b8
 80038f0:	58025408 	.word	0x58025408
 80038f4:	5802541c 	.word	0x5802541c
 80038f8:	58025430 	.word	0x58025430
 80038fc:	58025444 	.word	0x58025444
 8003900:	58025458 	.word	0x58025458
 8003904:	5802546c 	.word	0x5802546c
 8003908:	58025480 	.word	0x58025480
 800390c:	58025494 	.word	0x58025494

08003910 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b086      	sub	sp, #24
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8003918:	f7ff fb3e 	bl	8002f98 <HAL_GetTick>
 800391c:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	e2dc      	b.n	8003ee2 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800392e:	b2db      	uxtb	r3, r3
 8003930:	2b02      	cmp	r3, #2
 8003932:	d008      	beq.n	8003946 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2280      	movs	r2, #128	; 0x80
 8003938:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2200      	movs	r2, #0
 800393e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8003942:	2301      	movs	r3, #1
 8003944:	e2cd      	b.n	8003ee2 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a76      	ldr	r2, [pc, #472]	; (8003b24 <HAL_DMA_Abort+0x214>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d04a      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a74      	ldr	r2, [pc, #464]	; (8003b28 <HAL_DMA_Abort+0x218>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d045      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a73      	ldr	r2, [pc, #460]	; (8003b2c <HAL_DMA_Abort+0x21c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d040      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a71      	ldr	r2, [pc, #452]	; (8003b30 <HAL_DMA_Abort+0x220>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d03b      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a70      	ldr	r2, [pc, #448]	; (8003b34 <HAL_DMA_Abort+0x224>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d036      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	4a6e      	ldr	r2, [pc, #440]	; (8003b38 <HAL_DMA_Abort+0x228>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d031      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4a6d      	ldr	r2, [pc, #436]	; (8003b3c <HAL_DMA_Abort+0x22c>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d02c      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	4a6b      	ldr	r2, [pc, #428]	; (8003b40 <HAL_DMA_Abort+0x230>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d027      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a6a      	ldr	r2, [pc, #424]	; (8003b44 <HAL_DMA_Abort+0x234>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d022      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a68      	ldr	r2, [pc, #416]	; (8003b48 <HAL_DMA_Abort+0x238>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a67      	ldr	r2, [pc, #412]	; (8003b4c <HAL_DMA_Abort+0x23c>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d018      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a65      	ldr	r2, [pc, #404]	; (8003b50 <HAL_DMA_Abort+0x240>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d013      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a64      	ldr	r2, [pc, #400]	; (8003b54 <HAL_DMA_Abort+0x244>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d00e      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a62      	ldr	r2, [pc, #392]	; (8003b58 <HAL_DMA_Abort+0x248>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d009      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a61      	ldr	r2, [pc, #388]	; (8003b5c <HAL_DMA_Abort+0x24c>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d004      	beq.n	80039e6 <HAL_DMA_Abort+0xd6>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a5f      	ldr	r2, [pc, #380]	; (8003b60 <HAL_DMA_Abort+0x250>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d101      	bne.n	80039ea <HAL_DMA_Abort+0xda>
 80039e6:	2301      	movs	r3, #1
 80039e8:	e000      	b.n	80039ec <HAL_DMA_Abort+0xdc>
 80039ea:	2300      	movs	r3, #0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d013      	beq.n	8003a18 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 021e 	bic.w	r2, r2, #30
 80039fe:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695a      	ldr	r2, [r3, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a0e:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e00a      	b.n	8003a2e <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681a      	ldr	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f022 020e 	bic.w	r2, r2, #14
 8003a26:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a3c      	ldr	r2, [pc, #240]	; (8003b24 <HAL_DMA_Abort+0x214>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d072      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a3a      	ldr	r2, [pc, #232]	; (8003b28 <HAL_DMA_Abort+0x218>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d06d      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a39      	ldr	r2, [pc, #228]	; (8003b2c <HAL_DMA_Abort+0x21c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d068      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a37      	ldr	r2, [pc, #220]	; (8003b30 <HAL_DMA_Abort+0x220>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d063      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	4a36      	ldr	r2, [pc, #216]	; (8003b34 <HAL_DMA_Abort+0x224>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d05e      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a34      	ldr	r2, [pc, #208]	; (8003b38 <HAL_DMA_Abort+0x228>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d059      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a33      	ldr	r2, [pc, #204]	; (8003b3c <HAL_DMA_Abort+0x22c>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d054      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a31      	ldr	r2, [pc, #196]	; (8003b40 <HAL_DMA_Abort+0x230>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d04f      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a30      	ldr	r2, [pc, #192]	; (8003b44 <HAL_DMA_Abort+0x234>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d04a      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2e      	ldr	r2, [pc, #184]	; (8003b48 <HAL_DMA_Abort+0x238>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d045      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a2d      	ldr	r2, [pc, #180]	; (8003b4c <HAL_DMA_Abort+0x23c>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d040      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	4a2b      	ldr	r2, [pc, #172]	; (8003b50 <HAL_DMA_Abort+0x240>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d03b      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	4a2a      	ldr	r2, [pc, #168]	; (8003b54 <HAL_DMA_Abort+0x244>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d036      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a28      	ldr	r2, [pc, #160]	; (8003b58 <HAL_DMA_Abort+0x248>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d031      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a27      	ldr	r2, [pc, #156]	; (8003b5c <HAL_DMA_Abort+0x24c>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d02c      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a25      	ldr	r2, [pc, #148]	; (8003b60 <HAL_DMA_Abort+0x250>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d027      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a24      	ldr	r2, [pc, #144]	; (8003b64 <HAL_DMA_Abort+0x254>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d022      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	4a22      	ldr	r2, [pc, #136]	; (8003b68 <HAL_DMA_Abort+0x258>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01d      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a21      	ldr	r2, [pc, #132]	; (8003b6c <HAL_DMA_Abort+0x25c>)
 8003ae8:	4293      	cmp	r3, r2
 8003aea:	d018      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a1f      	ldr	r2, [pc, #124]	; (8003b70 <HAL_DMA_Abort+0x260>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d013      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a1e      	ldr	r2, [pc, #120]	; (8003b74 <HAL_DMA_Abort+0x264>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00e      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <HAL_DMA_Abort+0x268>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d009      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a1b      	ldr	r2, [pc, #108]	; (8003b7c <HAL_DMA_Abort+0x26c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d004      	beq.n	8003b1e <HAL_DMA_Abort+0x20e>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <HAL_DMA_Abort+0x270>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d132      	bne.n	8003b84 <HAL_DMA_Abort+0x274>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e031      	b.n	8003b86 <HAL_DMA_Abort+0x276>
 8003b22:	bf00      	nop
 8003b24:	40020010 	.word	0x40020010
 8003b28:	40020028 	.word	0x40020028
 8003b2c:	40020040 	.word	0x40020040
 8003b30:	40020058 	.word	0x40020058
 8003b34:	40020070 	.word	0x40020070
 8003b38:	40020088 	.word	0x40020088
 8003b3c:	400200a0 	.word	0x400200a0
 8003b40:	400200b8 	.word	0x400200b8
 8003b44:	40020410 	.word	0x40020410
 8003b48:	40020428 	.word	0x40020428
 8003b4c:	40020440 	.word	0x40020440
 8003b50:	40020458 	.word	0x40020458
 8003b54:	40020470 	.word	0x40020470
 8003b58:	40020488 	.word	0x40020488
 8003b5c:	400204a0 	.word	0x400204a0
 8003b60:	400204b8 	.word	0x400204b8
 8003b64:	58025408 	.word	0x58025408
 8003b68:	5802541c 	.word	0x5802541c
 8003b6c:	58025430 	.word	0x58025430
 8003b70:	58025444 	.word	0x58025444
 8003b74:	58025458 	.word	0x58025458
 8003b78:	5802546c 	.word	0x5802546c
 8003b7c:	58025480 	.word	0x58025480
 8003b80:	58025494 	.word	0x58025494
 8003b84:	2300      	movs	r3, #0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d007      	beq.n	8003b9a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b98:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a6d      	ldr	r2, [pc, #436]	; (8003d54 <HAL_DMA_Abort+0x444>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d04a      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a6b      	ldr	r2, [pc, #428]	; (8003d58 <HAL_DMA_Abort+0x448>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d045      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a6a      	ldr	r2, [pc, #424]	; (8003d5c <HAL_DMA_Abort+0x44c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d040      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_DMA_Abort+0x450>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d03b      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a67      	ldr	r2, [pc, #412]	; (8003d64 <HAL_DMA_Abort+0x454>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d036      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a65      	ldr	r2, [pc, #404]	; (8003d68 <HAL_DMA_Abort+0x458>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d031      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a64      	ldr	r2, [pc, #400]	; (8003d6c <HAL_DMA_Abort+0x45c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d02c      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a62      	ldr	r2, [pc, #392]	; (8003d70 <HAL_DMA_Abort+0x460>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d027      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a61      	ldr	r2, [pc, #388]	; (8003d74 <HAL_DMA_Abort+0x464>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d022      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a5f      	ldr	r2, [pc, #380]	; (8003d78 <HAL_DMA_Abort+0x468>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d01d      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a5e      	ldr	r2, [pc, #376]	; (8003d7c <HAL_DMA_Abort+0x46c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d018      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a5c      	ldr	r2, [pc, #368]	; (8003d80 <HAL_DMA_Abort+0x470>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d013      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a5b      	ldr	r2, [pc, #364]	; (8003d84 <HAL_DMA_Abort+0x474>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00e      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a59      	ldr	r2, [pc, #356]	; (8003d88 <HAL_DMA_Abort+0x478>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d009      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	4a58      	ldr	r2, [pc, #352]	; (8003d8c <HAL_DMA_Abort+0x47c>)
 8003c2c:	4293      	cmp	r3, r2
 8003c2e:	d004      	beq.n	8003c3a <HAL_DMA_Abort+0x32a>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	4a56      	ldr	r2, [pc, #344]	; (8003d90 <HAL_DMA_Abort+0x480>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d108      	bne.n	8003c4c <HAL_DMA_Abort+0x33c>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f022 0201 	bic.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
 8003c4a:	e007      	b.n	8003c5c <HAL_DMA_Abort+0x34c>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0201 	bic.w	r2, r2, #1
 8003c5a:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c5c:	e013      	b.n	8003c86 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003c5e:	f7ff f99b 	bl	8002f98 <HAL_GetTick>
 8003c62:	4602      	mov	r2, r0
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	1ad3      	subs	r3, r2, r3
 8003c68:	2b05      	cmp	r3, #5
 8003c6a:	d90c      	bls.n	8003c86 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2220      	movs	r2, #32
 8003c70:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2203      	movs	r2, #3
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e12d      	b.n	8003ee2 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0301 	and.w	r3, r3, #1
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d1e5      	bne.n	8003c5e <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a2f      	ldr	r2, [pc, #188]	; (8003d54 <HAL_DMA_Abort+0x444>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d04a      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a2d      	ldr	r2, [pc, #180]	; (8003d58 <HAL_DMA_Abort+0x448>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d045      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a2c      	ldr	r2, [pc, #176]	; (8003d5c <HAL_DMA_Abort+0x44c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d040      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <HAL_DMA_Abort+0x450>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d03b      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a29      	ldr	r2, [pc, #164]	; (8003d64 <HAL_DMA_Abort+0x454>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d036      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a27      	ldr	r2, [pc, #156]	; (8003d68 <HAL_DMA_Abort+0x458>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d031      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a26      	ldr	r2, [pc, #152]	; (8003d6c <HAL_DMA_Abort+0x45c>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d02c      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a24      	ldr	r2, [pc, #144]	; (8003d70 <HAL_DMA_Abort+0x460>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d027      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <HAL_DMA_Abort+0x464>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d022      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_DMA_Abort+0x468>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d01d      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a20      	ldr	r2, [pc, #128]	; (8003d7c <HAL_DMA_Abort+0x46c>)
 8003cfc:	4293      	cmp	r3, r2
 8003cfe:	d018      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4a1e      	ldr	r2, [pc, #120]	; (8003d80 <HAL_DMA_Abort+0x470>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d013      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a1d      	ldr	r2, [pc, #116]	; (8003d84 <HAL_DMA_Abort+0x474>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d00e      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <HAL_DMA_Abort+0x478>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d009      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <HAL_DMA_Abort+0x47c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d004      	beq.n	8003d32 <HAL_DMA_Abort+0x422>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a18      	ldr	r2, [pc, #96]	; (8003d90 <HAL_DMA_Abort+0x480>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_DMA_Abort+0x426>
 8003d32:	2301      	movs	r3, #1
 8003d34:	e000      	b.n	8003d38 <HAL_DMA_Abort+0x428>
 8003d36:	2300      	movs	r3, #0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d02b      	beq.n	8003d94 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d40:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d46:	f003 031f 	and.w	r3, r3, #31
 8003d4a:	223f      	movs	r2, #63	; 0x3f
 8003d4c:	409a      	lsls	r2, r3
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	609a      	str	r2, [r3, #8]
 8003d52:	e02a      	b.n	8003daa <HAL_DMA_Abort+0x49a>
 8003d54:	40020010 	.word	0x40020010
 8003d58:	40020028 	.word	0x40020028
 8003d5c:	40020040 	.word	0x40020040
 8003d60:	40020058 	.word	0x40020058
 8003d64:	40020070 	.word	0x40020070
 8003d68:	40020088 	.word	0x40020088
 8003d6c:	400200a0 	.word	0x400200a0
 8003d70:	400200b8 	.word	0x400200b8
 8003d74:	40020410 	.word	0x40020410
 8003d78:	40020428 	.word	0x40020428
 8003d7c:	40020440 	.word	0x40020440
 8003d80:	40020458 	.word	0x40020458
 8003d84:	40020470 	.word	0x40020470
 8003d88:	40020488 	.word	0x40020488
 8003d8c:	400204a0 	.word	0x400204a0
 8003d90:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d98:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9e:	f003 031f 	and.w	r3, r3, #31
 8003da2:	2201      	movs	r2, #1
 8003da4:	409a      	lsls	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a4f      	ldr	r2, [pc, #316]	; (8003eec <HAL_DMA_Abort+0x5dc>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d072      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a4d      	ldr	r2, [pc, #308]	; (8003ef0 <HAL_DMA_Abort+0x5e0>)
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d06d      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4a4c      	ldr	r2, [pc, #304]	; (8003ef4 <HAL_DMA_Abort+0x5e4>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d068      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a4a      	ldr	r2, [pc, #296]	; (8003ef8 <HAL_DMA_Abort+0x5e8>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d063      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a49      	ldr	r2, [pc, #292]	; (8003efc <HAL_DMA_Abort+0x5ec>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d05e      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a47      	ldr	r2, [pc, #284]	; (8003f00 <HAL_DMA_Abort+0x5f0>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d059      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a46      	ldr	r2, [pc, #280]	; (8003f04 <HAL_DMA_Abort+0x5f4>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d054      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a44      	ldr	r2, [pc, #272]	; (8003f08 <HAL_DMA_Abort+0x5f8>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d04f      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a43      	ldr	r2, [pc, #268]	; (8003f0c <HAL_DMA_Abort+0x5fc>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d04a      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a41      	ldr	r2, [pc, #260]	; (8003f10 <HAL_DMA_Abort+0x600>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d045      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a40      	ldr	r2, [pc, #256]	; (8003f14 <HAL_DMA_Abort+0x604>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d040      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a3e      	ldr	r2, [pc, #248]	; (8003f18 <HAL_DMA_Abort+0x608>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d03b      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a3d      	ldr	r2, [pc, #244]	; (8003f1c <HAL_DMA_Abort+0x60c>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d036      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a3b      	ldr	r2, [pc, #236]	; (8003f20 <HAL_DMA_Abort+0x610>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d031      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a3a      	ldr	r2, [pc, #232]	; (8003f24 <HAL_DMA_Abort+0x614>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d02c      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a38      	ldr	r2, [pc, #224]	; (8003f28 <HAL_DMA_Abort+0x618>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d027      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a37      	ldr	r2, [pc, #220]	; (8003f2c <HAL_DMA_Abort+0x61c>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d022      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	4a35      	ldr	r2, [pc, #212]	; (8003f30 <HAL_DMA_Abort+0x620>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d01d      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4a34      	ldr	r2, [pc, #208]	; (8003f34 <HAL_DMA_Abort+0x624>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d018      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a32      	ldr	r2, [pc, #200]	; (8003f38 <HAL_DMA_Abort+0x628>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d013      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a31      	ldr	r2, [pc, #196]	; (8003f3c <HAL_DMA_Abort+0x62c>)
 8003e78:	4293      	cmp	r3, r2
 8003e7a:	d00e      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a2f      	ldr	r2, [pc, #188]	; (8003f40 <HAL_DMA_Abort+0x630>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d009      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <HAL_DMA_Abort+0x634>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d004      	beq.n	8003e9a <HAL_DMA_Abort+0x58a>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a2c      	ldr	r2, [pc, #176]	; (8003f48 <HAL_DMA_Abort+0x638>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d101      	bne.n	8003e9e <HAL_DMA_Abort+0x58e>
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e000      	b.n	8003ea0 <HAL_DMA_Abort+0x590>
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d015      	beq.n	8003ed0 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ea8:	687a      	ldr	r2, [r7, #4]
 8003eaa:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8003eac:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00c      	beq.n	8003ed0 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ec0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ec4:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8003ece:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2201      	movs	r2, #1
 8003ed4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2200      	movs	r2, #0
 8003edc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8003ee0:	2300      	movs	r3, #0
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	40020010 	.word	0x40020010
 8003ef0:	40020028 	.word	0x40020028
 8003ef4:	40020040 	.word	0x40020040
 8003ef8:	40020058 	.word	0x40020058
 8003efc:	40020070 	.word	0x40020070
 8003f00:	40020088 	.word	0x40020088
 8003f04:	400200a0 	.word	0x400200a0
 8003f08:	400200b8 	.word	0x400200b8
 8003f0c:	40020410 	.word	0x40020410
 8003f10:	40020428 	.word	0x40020428
 8003f14:	40020440 	.word	0x40020440
 8003f18:	40020458 	.word	0x40020458
 8003f1c:	40020470 	.word	0x40020470
 8003f20:	40020488 	.word	0x40020488
 8003f24:	400204a0 	.word	0x400204a0
 8003f28:	400204b8 	.word	0x400204b8
 8003f2c:	58025408 	.word	0x58025408
 8003f30:	5802541c 	.word	0x5802541c
 8003f34:	58025430 	.word	0x58025430
 8003f38:	58025444 	.word	0x58025444
 8003f3c:	58025458 	.word	0x58025458
 8003f40:	5802546c 	.word	0x5802546c
 8003f44:	58025480 	.word	0x58025480
 8003f48:	58025494 	.word	0x58025494

08003f4c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d101      	bne.n	8003f5e <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e237      	b.n	80043ce <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b02      	cmp	r3, #2
 8003f68:	d004      	beq.n	8003f74 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2280      	movs	r2, #128	; 0x80
 8003f6e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003f70:	2301      	movs	r3, #1
 8003f72:	e22c      	b.n	80043ce <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a5c      	ldr	r2, [pc, #368]	; (80040ec <HAL_DMA_Abort_IT+0x1a0>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d04a      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a5b      	ldr	r2, [pc, #364]	; (80040f0 <HAL_DMA_Abort_IT+0x1a4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d045      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a59      	ldr	r2, [pc, #356]	; (80040f4 <HAL_DMA_Abort_IT+0x1a8>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d040      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a58      	ldr	r2, [pc, #352]	; (80040f8 <HAL_DMA_Abort_IT+0x1ac>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d03b      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a56      	ldr	r2, [pc, #344]	; (80040fc <HAL_DMA_Abort_IT+0x1b0>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d036      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4a55      	ldr	r2, [pc, #340]	; (8004100 <HAL_DMA_Abort_IT+0x1b4>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d031      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	4a53      	ldr	r2, [pc, #332]	; (8004104 <HAL_DMA_Abort_IT+0x1b8>)
 8003fb6:	4293      	cmp	r3, r2
 8003fb8:	d02c      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a52      	ldr	r2, [pc, #328]	; (8004108 <HAL_DMA_Abort_IT+0x1bc>)
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d027      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a50      	ldr	r2, [pc, #320]	; (800410c <HAL_DMA_Abort_IT+0x1c0>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d022      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_DMA_Abort_IT+0x1c4>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d01d      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a4d      	ldr	r2, [pc, #308]	; (8004114 <HAL_DMA_Abort_IT+0x1c8>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d018      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a4c      	ldr	r2, [pc, #304]	; (8004118 <HAL_DMA_Abort_IT+0x1cc>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d013      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a4a      	ldr	r2, [pc, #296]	; (800411c <HAL_DMA_Abort_IT+0x1d0>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d00e      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a49      	ldr	r2, [pc, #292]	; (8004120 <HAL_DMA_Abort_IT+0x1d4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d009      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a47      	ldr	r2, [pc, #284]	; (8004124 <HAL_DMA_Abort_IT+0x1d8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d004      	beq.n	8004014 <HAL_DMA_Abort_IT+0xc8>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a46      	ldr	r2, [pc, #280]	; (8004128 <HAL_DMA_Abort_IT+0x1dc>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d101      	bne.n	8004018 <HAL_DMA_Abort_IT+0xcc>
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_DMA_Abort_IT+0xce>
 8004018:	2300      	movs	r3, #0
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 8086 	beq.w	800412c <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2204      	movs	r2, #4
 8004024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a2f      	ldr	r2, [pc, #188]	; (80040ec <HAL_DMA_Abort_IT+0x1a0>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d04a      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <HAL_DMA_Abort_IT+0x1a4>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d045      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <HAL_DMA_Abort_IT+0x1a8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d040      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a2b      	ldr	r2, [pc, #172]	; (80040f8 <HAL_DMA_Abort_IT+0x1ac>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d03b      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a29      	ldr	r2, [pc, #164]	; (80040fc <HAL_DMA_Abort_IT+0x1b0>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d036      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a28      	ldr	r2, [pc, #160]	; (8004100 <HAL_DMA_Abort_IT+0x1b4>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d031      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <HAL_DMA_Abort_IT+0x1b8>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d02c      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a25      	ldr	r2, [pc, #148]	; (8004108 <HAL_DMA_Abort_IT+0x1bc>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d027      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a23      	ldr	r2, [pc, #140]	; (800410c <HAL_DMA_Abort_IT+0x1c0>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d022      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a22      	ldr	r2, [pc, #136]	; (8004110 <HAL_DMA_Abort_IT+0x1c4>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d01d      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a20      	ldr	r2, [pc, #128]	; (8004114 <HAL_DMA_Abort_IT+0x1c8>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d018      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a1f      	ldr	r2, [pc, #124]	; (8004118 <HAL_DMA_Abort_IT+0x1cc>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d013      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a1d      	ldr	r2, [pc, #116]	; (800411c <HAL_DMA_Abort_IT+0x1d0>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d00e      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a1c      	ldr	r2, [pc, #112]	; (8004120 <HAL_DMA_Abort_IT+0x1d4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d009      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <HAL_DMA_Abort_IT+0x1d8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d004      	beq.n	80040c8 <HAL_DMA_Abort_IT+0x17c>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_DMA_Abort_IT+0x1dc>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d108      	bne.n	80040da <HAL_DMA_Abort_IT+0x18e>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
 80040d8:	e178      	b.n	80043cc <HAL_DMA_Abort_IT+0x480>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f022 0201 	bic.w	r2, r2, #1
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	e16f      	b.n	80043cc <HAL_DMA_Abort_IT+0x480>
 80040ec:	40020010 	.word	0x40020010
 80040f0:	40020028 	.word	0x40020028
 80040f4:	40020040 	.word	0x40020040
 80040f8:	40020058 	.word	0x40020058
 80040fc:	40020070 	.word	0x40020070
 8004100:	40020088 	.word	0x40020088
 8004104:	400200a0 	.word	0x400200a0
 8004108:	400200b8 	.word	0x400200b8
 800410c:	40020410 	.word	0x40020410
 8004110:	40020428 	.word	0x40020428
 8004114:	40020440 	.word	0x40020440
 8004118:	40020458 	.word	0x40020458
 800411c:	40020470 	.word	0x40020470
 8004120:	40020488 	.word	0x40020488
 8004124:	400204a0 	.word	0x400204a0
 8004128:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	681a      	ldr	r2, [r3, #0]
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f022 020e 	bic.w	r2, r2, #14
 800413a:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a6c      	ldr	r2, [pc, #432]	; (80042f4 <HAL_DMA_Abort_IT+0x3a8>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d04a      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a6b      	ldr	r2, [pc, #428]	; (80042f8 <HAL_DMA_Abort_IT+0x3ac>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d045      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a69      	ldr	r2, [pc, #420]	; (80042fc <HAL_DMA_Abort_IT+0x3b0>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d040      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a68      	ldr	r2, [pc, #416]	; (8004300 <HAL_DMA_Abort_IT+0x3b4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d03b      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a66      	ldr	r2, [pc, #408]	; (8004304 <HAL_DMA_Abort_IT+0x3b8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d036      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a65      	ldr	r2, [pc, #404]	; (8004308 <HAL_DMA_Abort_IT+0x3bc>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d031      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a63      	ldr	r2, [pc, #396]	; (800430c <HAL_DMA_Abort_IT+0x3c0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d02c      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	4a62      	ldr	r2, [pc, #392]	; (8004310 <HAL_DMA_Abort_IT+0x3c4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d027      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a60      	ldr	r2, [pc, #384]	; (8004314 <HAL_DMA_Abort_IT+0x3c8>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d022      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a5f      	ldr	r2, [pc, #380]	; (8004318 <HAL_DMA_Abort_IT+0x3cc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d01d      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a5d      	ldr	r2, [pc, #372]	; (800431c <HAL_DMA_Abort_IT+0x3d0>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d018      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a5c      	ldr	r2, [pc, #368]	; (8004320 <HAL_DMA_Abort_IT+0x3d4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d013      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a5a      	ldr	r2, [pc, #360]	; (8004324 <HAL_DMA_Abort_IT+0x3d8>)
 80041ba:	4293      	cmp	r3, r2
 80041bc:	d00e      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a59      	ldr	r2, [pc, #356]	; (8004328 <HAL_DMA_Abort_IT+0x3dc>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d009      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a57      	ldr	r2, [pc, #348]	; (800432c <HAL_DMA_Abort_IT+0x3e0>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d004      	beq.n	80041dc <HAL_DMA_Abort_IT+0x290>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a56      	ldr	r2, [pc, #344]	; (8004330 <HAL_DMA_Abort_IT+0x3e4>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d108      	bne.n	80041ee <HAL_DMA_Abort_IT+0x2a2>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0201 	bic.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e007      	b.n	80041fe <HAL_DMA_Abort_IT+0x2b2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 0201 	bic.w	r2, r2, #1
 80041fc:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a3c      	ldr	r2, [pc, #240]	; (80042f4 <HAL_DMA_Abort_IT+0x3a8>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d072      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a3a      	ldr	r2, [pc, #232]	; (80042f8 <HAL_DMA_Abort_IT+0x3ac>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d06d      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a39      	ldr	r2, [pc, #228]	; (80042fc <HAL_DMA_Abort_IT+0x3b0>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d068      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a37      	ldr	r2, [pc, #220]	; (8004300 <HAL_DMA_Abort_IT+0x3b4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d063      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a36      	ldr	r2, [pc, #216]	; (8004304 <HAL_DMA_Abort_IT+0x3b8>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d05e      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a34      	ldr	r2, [pc, #208]	; (8004308 <HAL_DMA_Abort_IT+0x3bc>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d059      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a33      	ldr	r2, [pc, #204]	; (800430c <HAL_DMA_Abort_IT+0x3c0>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d054      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a31      	ldr	r2, [pc, #196]	; (8004310 <HAL_DMA_Abort_IT+0x3c4>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d04f      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	4a30      	ldr	r2, [pc, #192]	; (8004314 <HAL_DMA_Abort_IT+0x3c8>)
 8004254:	4293      	cmp	r3, r2
 8004256:	d04a      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a2e      	ldr	r2, [pc, #184]	; (8004318 <HAL_DMA_Abort_IT+0x3cc>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d045      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a2d      	ldr	r2, [pc, #180]	; (800431c <HAL_DMA_Abort_IT+0x3d0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d040      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a2b      	ldr	r2, [pc, #172]	; (8004320 <HAL_DMA_Abort_IT+0x3d4>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d03b      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a2a      	ldr	r2, [pc, #168]	; (8004324 <HAL_DMA_Abort_IT+0x3d8>)
 800427c:	4293      	cmp	r3, r2
 800427e:	d036      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a28      	ldr	r2, [pc, #160]	; (8004328 <HAL_DMA_Abort_IT+0x3dc>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d031      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	4a27      	ldr	r2, [pc, #156]	; (800432c <HAL_DMA_Abort_IT+0x3e0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d02c      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a25      	ldr	r2, [pc, #148]	; (8004330 <HAL_DMA_Abort_IT+0x3e4>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d027      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a24      	ldr	r2, [pc, #144]	; (8004334 <HAL_DMA_Abort_IT+0x3e8>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d022      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_DMA_Abort_IT+0x3ec>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d01d      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	4a21      	ldr	r2, [pc, #132]	; (800433c <HAL_DMA_Abort_IT+0x3f0>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d018      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_DMA_Abort_IT+0x3f4>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d013      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a1e      	ldr	r2, [pc, #120]	; (8004344 <HAL_DMA_Abort_IT+0x3f8>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d00e      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_DMA_Abort_IT+0x3fc>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d009      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1b      	ldr	r2, [pc, #108]	; (800434c <HAL_DMA_Abort_IT+0x400>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d004      	beq.n	80042ee <HAL_DMA_Abort_IT+0x3a2>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a19      	ldr	r2, [pc, #100]	; (8004350 <HAL_DMA_Abort_IT+0x404>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d132      	bne.n	8004354 <HAL_DMA_Abort_IT+0x408>
 80042ee:	2301      	movs	r3, #1
 80042f0:	e031      	b.n	8004356 <HAL_DMA_Abort_IT+0x40a>
 80042f2:	bf00      	nop
 80042f4:	40020010 	.word	0x40020010
 80042f8:	40020028 	.word	0x40020028
 80042fc:	40020040 	.word	0x40020040
 8004300:	40020058 	.word	0x40020058
 8004304:	40020070 	.word	0x40020070
 8004308:	40020088 	.word	0x40020088
 800430c:	400200a0 	.word	0x400200a0
 8004310:	400200b8 	.word	0x400200b8
 8004314:	40020410 	.word	0x40020410
 8004318:	40020428 	.word	0x40020428
 800431c:	40020440 	.word	0x40020440
 8004320:	40020458 	.word	0x40020458
 8004324:	40020470 	.word	0x40020470
 8004328:	40020488 	.word	0x40020488
 800432c:	400204a0 	.word	0x400204a0
 8004330:	400204b8 	.word	0x400204b8
 8004334:	58025408 	.word	0x58025408
 8004338:	5802541c 	.word	0x5802541c
 800433c:	58025430 	.word	0x58025430
 8004340:	58025444 	.word	0x58025444
 8004344:	58025458 	.word	0x58025458
 8004348:	5802546c 	.word	0x5802546c
 800434c:	58025480 	.word	0x58025480
 8004350:	58025494 	.word	0x58025494
 8004354:	2300      	movs	r3, #0
 8004356:	2b00      	cmp	r3, #0
 8004358:	d028      	beq.n	80043ac <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004368:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800436e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004374:	f003 031f 	and.w	r3, r3, #31
 8004378:	2201      	movs	r2, #1
 800437a:	409a      	lsls	r2, r3
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004388:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00c      	beq.n	80043ac <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800439c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80043a0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80043aa:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	2200      	movs	r2, #0
 80043b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3710      	adds	r7, #16
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bd80      	pop	{r7, pc}
 80043d6:	bf00      	nop

080043d8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b08a      	sub	sp, #40	; 0x28
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80043e4:	4b67      	ldr	r3, [pc, #412]	; (8004584 <HAL_DMA_IRQHandler+0x1ac>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a67      	ldr	r2, [pc, #412]	; (8004588 <HAL_DMA_IRQHandler+0x1b0>)
 80043ea:	fba2 2303 	umull	r2, r3, r2, r3
 80043ee:	0a9b      	lsrs	r3, r3, #10
 80043f0:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043fc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80043fe:	6a3b      	ldr	r3, [r7, #32]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a5f      	ldr	r2, [pc, #380]	; (800458c <HAL_DMA_IRQHandler+0x1b4>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d04a      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a5d      	ldr	r2, [pc, #372]	; (8004590 <HAL_DMA_IRQHandler+0x1b8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d045      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a5c      	ldr	r2, [pc, #368]	; (8004594 <HAL_DMA_IRQHandler+0x1bc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d040      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a5a      	ldr	r2, [pc, #360]	; (8004598 <HAL_DMA_IRQHandler+0x1c0>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d03b      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a59      	ldr	r2, [pc, #356]	; (800459c <HAL_DMA_IRQHandler+0x1c4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d036      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a57      	ldr	r2, [pc, #348]	; (80045a0 <HAL_DMA_IRQHandler+0x1c8>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d031      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	4a56      	ldr	r2, [pc, #344]	; (80045a4 <HAL_DMA_IRQHandler+0x1cc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d02c      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a54      	ldr	r2, [pc, #336]	; (80045a8 <HAL_DMA_IRQHandler+0x1d0>)
 8004456:	4293      	cmp	r3, r2
 8004458:	d027      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4a53      	ldr	r2, [pc, #332]	; (80045ac <HAL_DMA_IRQHandler+0x1d4>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d022      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	4a51      	ldr	r2, [pc, #324]	; (80045b0 <HAL_DMA_IRQHandler+0x1d8>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d01d      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4a50      	ldr	r2, [pc, #320]	; (80045b4 <HAL_DMA_IRQHandler+0x1dc>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d018      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a4e      	ldr	r2, [pc, #312]	; (80045b8 <HAL_DMA_IRQHandler+0x1e0>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d013      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a4d      	ldr	r2, [pc, #308]	; (80045bc <HAL_DMA_IRQHandler+0x1e4>)
 8004488:	4293      	cmp	r3, r2
 800448a:	d00e      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a4b      	ldr	r2, [pc, #300]	; (80045c0 <HAL_DMA_IRQHandler+0x1e8>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d009      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a4a      	ldr	r2, [pc, #296]	; (80045c4 <HAL_DMA_IRQHandler+0x1ec>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d004      	beq.n	80044aa <HAL_DMA_IRQHandler+0xd2>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a48      	ldr	r2, [pc, #288]	; (80045c8 <HAL_DMA_IRQHandler+0x1f0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d101      	bne.n	80044ae <HAL_DMA_IRQHandler+0xd6>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <HAL_DMA_IRQHandler+0xd8>
 80044ae:	2300      	movs	r3, #0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 842b 	beq.w	8004d0c <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	f003 031f 	and.w	r3, r3, #31
 80044be:	2208      	movs	r2, #8
 80044c0:	409a      	lsls	r2, r3
 80044c2:	69bb      	ldr	r3, [r7, #24]
 80044c4:	4013      	ands	r3, r2
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80a2 	beq.w	8004610 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a2e      	ldr	r2, [pc, #184]	; (800458c <HAL_DMA_IRQHandler+0x1b4>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d04a      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a2d      	ldr	r2, [pc, #180]	; (8004590 <HAL_DMA_IRQHandler+0x1b8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d045      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a2b      	ldr	r2, [pc, #172]	; (8004594 <HAL_DMA_IRQHandler+0x1bc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d040      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a2a      	ldr	r2, [pc, #168]	; (8004598 <HAL_DMA_IRQHandler+0x1c0>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d03b      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a28      	ldr	r2, [pc, #160]	; (800459c <HAL_DMA_IRQHandler+0x1c4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d036      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a27      	ldr	r2, [pc, #156]	; (80045a0 <HAL_DMA_IRQHandler+0x1c8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d031      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a25      	ldr	r2, [pc, #148]	; (80045a4 <HAL_DMA_IRQHandler+0x1cc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d02c      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a24      	ldr	r2, [pc, #144]	; (80045a8 <HAL_DMA_IRQHandler+0x1d0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d027      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a22      	ldr	r2, [pc, #136]	; (80045ac <HAL_DMA_IRQHandler+0x1d4>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d022      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a21      	ldr	r2, [pc, #132]	; (80045b0 <HAL_DMA_IRQHandler+0x1d8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d01d      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a1f      	ldr	r2, [pc, #124]	; (80045b4 <HAL_DMA_IRQHandler+0x1dc>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d018      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a1e      	ldr	r2, [pc, #120]	; (80045b8 <HAL_DMA_IRQHandler+0x1e0>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d013      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a1c      	ldr	r2, [pc, #112]	; (80045bc <HAL_DMA_IRQHandler+0x1e4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d00e      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	4a1b      	ldr	r2, [pc, #108]	; (80045c0 <HAL_DMA_IRQHandler+0x1e8>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d009      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a19      	ldr	r2, [pc, #100]	; (80045c4 <HAL_DMA_IRQHandler+0x1ec>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d004      	beq.n	800456c <HAL_DMA_IRQHandler+0x194>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a18      	ldr	r2, [pc, #96]	; (80045c8 <HAL_DMA_IRQHandler+0x1f0>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d12f      	bne.n	80045cc <HAL_DMA_IRQHandler+0x1f4>
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0304 	and.w	r3, r3, #4
 8004576:	2b00      	cmp	r3, #0
 8004578:	bf14      	ite	ne
 800457a:	2301      	movne	r3, #1
 800457c:	2300      	moveq	r3, #0
 800457e:	b2db      	uxtb	r3, r3
 8004580:	e02e      	b.n	80045e0 <HAL_DMA_IRQHandler+0x208>
 8004582:	bf00      	nop
 8004584:	24000000 	.word	0x24000000
 8004588:	1b4e81b5 	.word	0x1b4e81b5
 800458c:	40020010 	.word	0x40020010
 8004590:	40020028 	.word	0x40020028
 8004594:	40020040 	.word	0x40020040
 8004598:	40020058 	.word	0x40020058
 800459c:	40020070 	.word	0x40020070
 80045a0:	40020088 	.word	0x40020088
 80045a4:	400200a0 	.word	0x400200a0
 80045a8:	400200b8 	.word	0x400200b8
 80045ac:	40020410 	.word	0x40020410
 80045b0:	40020428 	.word	0x40020428
 80045b4:	40020440 	.word	0x40020440
 80045b8:	40020458 	.word	0x40020458
 80045bc:	40020470 	.word	0x40020470
 80045c0:	40020488 	.word	0x40020488
 80045c4:	400204a0 	.word	0x400204a0
 80045c8:	400204b8 	.word	0x400204b8
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 0308 	and.w	r3, r3, #8
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	bf14      	ite	ne
 80045da:	2301      	movne	r3, #1
 80045dc:	2300      	moveq	r3, #0
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f022 0204 	bic.w	r2, r2, #4
 80045f2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045f8:	f003 031f 	and.w	r3, r3, #31
 80045fc:	2208      	movs	r2, #8
 80045fe:	409a      	lsls	r2, r3
 8004600:	6a3b      	ldr	r3, [r7, #32]
 8004602:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004608:	f043 0201 	orr.w	r2, r3, #1
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	69ba      	ldr	r2, [r7, #24]
 800461a:	fa22 f303 	lsr.w	r3, r2, r3
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d06e      	beq.n	8004704 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	4a69      	ldr	r2, [pc, #420]	; (80047d0 <HAL_DMA_IRQHandler+0x3f8>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d04a      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a67      	ldr	r2, [pc, #412]	; (80047d4 <HAL_DMA_IRQHandler+0x3fc>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d045      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	4a66      	ldr	r2, [pc, #408]	; (80047d8 <HAL_DMA_IRQHandler+0x400>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d040      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a64      	ldr	r2, [pc, #400]	; (80047dc <HAL_DMA_IRQHandler+0x404>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d03b      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	4a63      	ldr	r2, [pc, #396]	; (80047e0 <HAL_DMA_IRQHandler+0x408>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d036      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a61      	ldr	r2, [pc, #388]	; (80047e4 <HAL_DMA_IRQHandler+0x40c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d031      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a60      	ldr	r2, [pc, #384]	; (80047e8 <HAL_DMA_IRQHandler+0x410>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d02c      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a5e      	ldr	r2, [pc, #376]	; (80047ec <HAL_DMA_IRQHandler+0x414>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d027      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a5d      	ldr	r2, [pc, #372]	; (80047f0 <HAL_DMA_IRQHandler+0x418>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d022      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a5b      	ldr	r2, [pc, #364]	; (80047f4 <HAL_DMA_IRQHandler+0x41c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d01d      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a5a      	ldr	r2, [pc, #360]	; (80047f8 <HAL_DMA_IRQHandler+0x420>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d018      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a58      	ldr	r2, [pc, #352]	; (80047fc <HAL_DMA_IRQHandler+0x424>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d013      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a57      	ldr	r2, [pc, #348]	; (8004800 <HAL_DMA_IRQHandler+0x428>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00e      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a55      	ldr	r2, [pc, #340]	; (8004804 <HAL_DMA_IRQHandler+0x42c>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d009      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4a54      	ldr	r2, [pc, #336]	; (8004808 <HAL_DMA_IRQHandler+0x430>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d004      	beq.n	80046c6 <HAL_DMA_IRQHandler+0x2ee>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a52      	ldr	r2, [pc, #328]	; (800480c <HAL_DMA_IRQHandler+0x434>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d10a      	bne.n	80046dc <HAL_DMA_IRQHandler+0x304>
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695b      	ldr	r3, [r3, #20]
 80046cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	bf14      	ite	ne
 80046d4:	2301      	movne	r3, #1
 80046d6:	2300      	moveq	r3, #0
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	e003      	b.n	80046e4 <HAL_DMA_IRQHandler+0x30c>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	2300      	movs	r3, #0
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00d      	beq.n	8004704 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	2201      	movs	r2, #1
 80046f2:	409a      	lsls	r2, r3
 80046f4:	6a3b      	ldr	r3, [r7, #32]
 80046f6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046fc:	f043 0202 	orr.w	r2, r3, #2
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004708:	f003 031f 	and.w	r3, r3, #31
 800470c:	2204      	movs	r2, #4
 800470e:	409a      	lsls	r2, r3
 8004710:	69bb      	ldr	r3, [r7, #24]
 8004712:	4013      	ands	r3, r2
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 808f 	beq.w	8004838 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4a2c      	ldr	r2, [pc, #176]	; (80047d0 <HAL_DMA_IRQHandler+0x3f8>)
 8004720:	4293      	cmp	r3, r2
 8004722:	d04a      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <HAL_DMA_IRQHandler+0x3fc>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d045      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a29      	ldr	r2, [pc, #164]	; (80047d8 <HAL_DMA_IRQHandler+0x400>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d040      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	4a27      	ldr	r2, [pc, #156]	; (80047dc <HAL_DMA_IRQHandler+0x404>)
 800473e:	4293      	cmp	r3, r2
 8004740:	d03b      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a26      	ldr	r2, [pc, #152]	; (80047e0 <HAL_DMA_IRQHandler+0x408>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d036      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a24      	ldr	r2, [pc, #144]	; (80047e4 <HAL_DMA_IRQHandler+0x40c>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d031      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a23      	ldr	r2, [pc, #140]	; (80047e8 <HAL_DMA_IRQHandler+0x410>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d02c      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a21      	ldr	r2, [pc, #132]	; (80047ec <HAL_DMA_IRQHandler+0x414>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d027      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a20      	ldr	r2, [pc, #128]	; (80047f0 <HAL_DMA_IRQHandler+0x418>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d022      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a1e      	ldr	r2, [pc, #120]	; (80047f4 <HAL_DMA_IRQHandler+0x41c>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d01d      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	4a1d      	ldr	r2, [pc, #116]	; (80047f8 <HAL_DMA_IRQHandler+0x420>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d018      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	4a1b      	ldr	r2, [pc, #108]	; (80047fc <HAL_DMA_IRQHandler+0x424>)
 800478e:	4293      	cmp	r3, r2
 8004790:	d013      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a1a      	ldr	r2, [pc, #104]	; (8004800 <HAL_DMA_IRQHandler+0x428>)
 8004798:	4293      	cmp	r3, r2
 800479a:	d00e      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <HAL_DMA_IRQHandler+0x42c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a17      	ldr	r2, [pc, #92]	; (8004808 <HAL_DMA_IRQHandler+0x430>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d004      	beq.n	80047ba <HAL_DMA_IRQHandler+0x3e2>
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	4a15      	ldr	r2, [pc, #84]	; (800480c <HAL_DMA_IRQHandler+0x434>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d12a      	bne.n	8004810 <HAL_DMA_IRQHandler+0x438>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bf14      	ite	ne
 80047c8:	2301      	movne	r3, #1
 80047ca:	2300      	moveq	r3, #0
 80047cc:	b2db      	uxtb	r3, r3
 80047ce:	e023      	b.n	8004818 <HAL_DMA_IRQHandler+0x440>
 80047d0:	40020010 	.word	0x40020010
 80047d4:	40020028 	.word	0x40020028
 80047d8:	40020040 	.word	0x40020040
 80047dc:	40020058 	.word	0x40020058
 80047e0:	40020070 	.word	0x40020070
 80047e4:	40020088 	.word	0x40020088
 80047e8:	400200a0 	.word	0x400200a0
 80047ec:	400200b8 	.word	0x400200b8
 80047f0:	40020410 	.word	0x40020410
 80047f4:	40020428 	.word	0x40020428
 80047f8:	40020440 	.word	0x40020440
 80047fc:	40020458 	.word	0x40020458
 8004800:	40020470 	.word	0x40020470
 8004804:	40020488 	.word	0x40020488
 8004808:	400204a0 	.word	0x400204a0
 800480c:	400204b8 	.word	0x400204b8
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2300      	movs	r3, #0
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004820:	f003 031f 	and.w	r3, r3, #31
 8004824:	2204      	movs	r2, #4
 8004826:	409a      	lsls	r2, r3
 8004828:	6a3b      	ldr	r3, [r7, #32]
 800482a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004830:	f043 0204 	orr.w	r2, r3, #4
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800483c:	f003 031f 	and.w	r3, r3, #31
 8004840:	2210      	movs	r2, #16
 8004842:	409a      	lsls	r2, r3
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	4013      	ands	r3, r2
 8004848:	2b00      	cmp	r3, #0
 800484a:	f000 80a6 	beq.w	800499a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a85      	ldr	r2, [pc, #532]	; (8004a68 <HAL_DMA_IRQHandler+0x690>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d04a      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a83      	ldr	r2, [pc, #524]	; (8004a6c <HAL_DMA_IRQHandler+0x694>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d045      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a82      	ldr	r2, [pc, #520]	; (8004a70 <HAL_DMA_IRQHandler+0x698>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d040      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a80      	ldr	r2, [pc, #512]	; (8004a74 <HAL_DMA_IRQHandler+0x69c>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d03b      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a7f      	ldr	r2, [pc, #508]	; (8004a78 <HAL_DMA_IRQHandler+0x6a0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d036      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a7d      	ldr	r2, [pc, #500]	; (8004a7c <HAL_DMA_IRQHandler+0x6a4>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d031      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a7c      	ldr	r2, [pc, #496]	; (8004a80 <HAL_DMA_IRQHandler+0x6a8>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d02c      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a7a      	ldr	r2, [pc, #488]	; (8004a84 <HAL_DMA_IRQHandler+0x6ac>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d027      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4a79      	ldr	r2, [pc, #484]	; (8004a88 <HAL_DMA_IRQHandler+0x6b0>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d022      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a77      	ldr	r2, [pc, #476]	; (8004a8c <HAL_DMA_IRQHandler+0x6b4>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d01d      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	4a76      	ldr	r2, [pc, #472]	; (8004a90 <HAL_DMA_IRQHandler+0x6b8>)
 80048b8:	4293      	cmp	r3, r2
 80048ba:	d018      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4a74      	ldr	r2, [pc, #464]	; (8004a94 <HAL_DMA_IRQHandler+0x6bc>)
 80048c2:	4293      	cmp	r3, r2
 80048c4:	d013      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	4a73      	ldr	r2, [pc, #460]	; (8004a98 <HAL_DMA_IRQHandler+0x6c0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d00e      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	4a71      	ldr	r2, [pc, #452]	; (8004a9c <HAL_DMA_IRQHandler+0x6c4>)
 80048d6:	4293      	cmp	r3, r2
 80048d8:	d009      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4a70      	ldr	r2, [pc, #448]	; (8004aa0 <HAL_DMA_IRQHandler+0x6c8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d004      	beq.n	80048ee <HAL_DMA_IRQHandler+0x516>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a6e      	ldr	r2, [pc, #440]	; (8004aa4 <HAL_DMA_IRQHandler+0x6cc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d10a      	bne.n	8004904 <HAL_DMA_IRQHandler+0x52c>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f003 0308 	and.w	r3, r3, #8
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	bf14      	ite	ne
 80048fc:	2301      	movne	r3, #1
 80048fe:	2300      	moveq	r3, #0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	e009      	b.n	8004918 <HAL_DMA_IRQHandler+0x540>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0304 	and.w	r3, r3, #4
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	2b00      	cmp	r3, #0
 800491a:	d03e      	beq.n	800499a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	f003 031f 	and.w	r3, r3, #31
 8004924:	2210      	movs	r2, #16
 8004926:	409a      	lsls	r2, r3
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d018      	beq.n	800496c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004944:	2b00      	cmp	r3, #0
 8004946:	d108      	bne.n	800495a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494c:	2b00      	cmp	r3, #0
 800494e:	d024      	beq.n	800499a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	4798      	blx	r3
 8004958:	e01f      	b.n	800499a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495e:	2b00      	cmp	r3, #0
 8004960:	d01b      	beq.n	800499a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	4798      	blx	r3
 800496a:	e016      	b.n	800499a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004976:	2b00      	cmp	r3, #0
 8004978:	d107      	bne.n	800498a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0208 	bic.w	r2, r2, #8
 8004988:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2220      	movs	r2, #32
 80049a4:	409a      	lsls	r2, r3
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f000 8110 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a2c      	ldr	r2, [pc, #176]	; (8004a68 <HAL_DMA_IRQHandler+0x690>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d04a      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	4a2b      	ldr	r2, [pc, #172]	; (8004a6c <HAL_DMA_IRQHandler+0x694>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d045      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a29      	ldr	r2, [pc, #164]	; (8004a70 <HAL_DMA_IRQHandler+0x698>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d040      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a28      	ldr	r2, [pc, #160]	; (8004a74 <HAL_DMA_IRQHandler+0x69c>)
 80049d4:	4293      	cmp	r3, r2
 80049d6:	d03b      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a26      	ldr	r2, [pc, #152]	; (8004a78 <HAL_DMA_IRQHandler+0x6a0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d036      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a25      	ldr	r2, [pc, #148]	; (8004a7c <HAL_DMA_IRQHandler+0x6a4>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d031      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a23      	ldr	r2, [pc, #140]	; (8004a80 <HAL_DMA_IRQHandler+0x6a8>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d02c      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a22      	ldr	r2, [pc, #136]	; (8004a84 <HAL_DMA_IRQHandler+0x6ac>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d027      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a20      	ldr	r2, [pc, #128]	; (8004a88 <HAL_DMA_IRQHandler+0x6b0>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d022      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1f      	ldr	r2, [pc, #124]	; (8004a8c <HAL_DMA_IRQHandler+0x6b4>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d01d      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a1d      	ldr	r2, [pc, #116]	; (8004a90 <HAL_DMA_IRQHandler+0x6b8>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d018      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4a1c      	ldr	r2, [pc, #112]	; (8004a94 <HAL_DMA_IRQHandler+0x6bc>)
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d013      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a1a      	ldr	r2, [pc, #104]	; (8004a98 <HAL_DMA_IRQHandler+0x6c0>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d00e      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_DMA_IRQHandler+0x6c4>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d009      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_DMA_IRQHandler+0x6c8>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d004      	beq.n	8004a50 <HAL_DMA_IRQHandler+0x678>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a16      	ldr	r2, [pc, #88]	; (8004aa4 <HAL_DMA_IRQHandler+0x6cc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d12b      	bne.n	8004aa8 <HAL_DMA_IRQHandler+0x6d0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	bf14      	ite	ne
 8004a5e:	2301      	movne	r3, #1
 8004a60:	2300      	moveq	r3, #0
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	e02a      	b.n	8004abc <HAL_DMA_IRQHandler+0x6e4>
 8004a66:	bf00      	nop
 8004a68:	40020010 	.word	0x40020010
 8004a6c:	40020028 	.word	0x40020028
 8004a70:	40020040 	.word	0x40020040
 8004a74:	40020058 	.word	0x40020058
 8004a78:	40020070 	.word	0x40020070
 8004a7c:	40020088 	.word	0x40020088
 8004a80:	400200a0 	.word	0x400200a0
 8004a84:	400200b8 	.word	0x400200b8
 8004a88:	40020410 	.word	0x40020410
 8004a8c:	40020428 	.word	0x40020428
 8004a90:	40020440 	.word	0x40020440
 8004a94:	40020458 	.word	0x40020458
 8004a98:	40020470 	.word	0x40020470
 8004a9c:	40020488 	.word	0x40020488
 8004aa0:	400204a0 	.word	0x400204a0
 8004aa4:	400204b8 	.word	0x400204b8
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	f003 0302 	and.w	r3, r3, #2
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bf14      	ite	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	2300      	moveq	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 8087 	beq.w	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ac6:	f003 031f 	and.w	r3, r3, #31
 8004aca:	2220      	movs	r2, #32
 8004acc:	409a      	lsls	r2, r3
 8004ace:	6a3b      	ldr	r3, [r7, #32]
 8004ad0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b04      	cmp	r3, #4
 8004adc:	d139      	bne.n	8004b52 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0216 	bic.w	r2, r2, #22
 8004aec:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	695a      	ldr	r2, [r3, #20]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004afc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d103      	bne.n	8004b0e <HAL_DMA_IRQHandler+0x736>
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d007      	beq.n	8004b1e <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0208 	bic.w	r2, r2, #8
 8004b1c:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b22:	f003 031f 	and.w	r3, r3, #31
 8004b26:	223f      	movs	r2, #63	; 0x3f
 8004b28:	409a      	lsls	r2, r3
 8004b2a:	6a3b      	ldr	r3, [r7, #32]
 8004b2c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2200      	movs	r2, #0
 8004b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	f000 834a 	beq.w	80051dc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	4798      	blx	r3
          }
          return;
 8004b50:	e344      	b.n	80051dc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d018      	beq.n	8004b92 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d108      	bne.n	8004b80 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d02c      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7a:	6878      	ldr	r0, [r7, #4]
 8004b7c:	4798      	blx	r3
 8004b7e:	e027      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d023      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	4798      	blx	r3
 8004b90:	e01e      	b.n	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10f      	bne.n	8004bc0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0210 	bic.w	r2, r2, #16
 8004bae:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2201      	movs	r2, #1
 8004bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	f000 8306 	beq.w	80051e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 8088 	beq.w	8004cf8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2204      	movs	r2, #4
 8004bec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4a7a      	ldr	r2, [pc, #488]	; (8004de0 <HAL_DMA_IRQHandler+0xa08>)
 8004bf6:	4293      	cmp	r3, r2
 8004bf8:	d04a      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4a79      	ldr	r2, [pc, #484]	; (8004de4 <HAL_DMA_IRQHandler+0xa0c>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d045      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a77      	ldr	r2, [pc, #476]	; (8004de8 <HAL_DMA_IRQHandler+0xa10>)
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d040      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a76      	ldr	r2, [pc, #472]	; (8004dec <HAL_DMA_IRQHandler+0xa14>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d03b      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a74      	ldr	r2, [pc, #464]	; (8004df0 <HAL_DMA_IRQHandler+0xa18>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d036      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a73      	ldr	r2, [pc, #460]	; (8004df4 <HAL_DMA_IRQHandler+0xa1c>)
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d031      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a71      	ldr	r2, [pc, #452]	; (8004df8 <HAL_DMA_IRQHandler+0xa20>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d02c      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a70      	ldr	r2, [pc, #448]	; (8004dfc <HAL_DMA_IRQHandler+0xa24>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d027      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	4a6e      	ldr	r2, [pc, #440]	; (8004e00 <HAL_DMA_IRQHandler+0xa28>)
 8004c46:	4293      	cmp	r3, r2
 8004c48:	d022      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	4a6d      	ldr	r2, [pc, #436]	; (8004e04 <HAL_DMA_IRQHandler+0xa2c>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d01d      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a6b      	ldr	r2, [pc, #428]	; (8004e08 <HAL_DMA_IRQHandler+0xa30>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d018      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	4a6a      	ldr	r2, [pc, #424]	; (8004e0c <HAL_DMA_IRQHandler+0xa34>)
 8004c64:	4293      	cmp	r3, r2
 8004c66:	d013      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a68      	ldr	r2, [pc, #416]	; (8004e10 <HAL_DMA_IRQHandler+0xa38>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d00e      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a67      	ldr	r2, [pc, #412]	; (8004e14 <HAL_DMA_IRQHandler+0xa3c>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d009      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	4a65      	ldr	r2, [pc, #404]	; (8004e18 <HAL_DMA_IRQHandler+0xa40>)
 8004c82:	4293      	cmp	r3, r2
 8004c84:	d004      	beq.n	8004c90 <HAL_DMA_IRQHandler+0x8b8>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	4a64      	ldr	r2, [pc, #400]	; (8004e1c <HAL_DMA_IRQHandler+0xa44>)
 8004c8c:	4293      	cmp	r3, r2
 8004c8e:	d108      	bne.n	8004ca2 <HAL_DMA_IRQHandler+0x8ca>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]
 8004ca0:	e007      	b.n	8004cb2 <HAL_DMA_IRQHandler+0x8da>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f022 0201 	bic.w	r2, r2, #1
 8004cb0:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	3301      	adds	r3, #1
 8004cb6:	60fb      	str	r3, [r7, #12]
 8004cb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d307      	bcc.n	8004cce <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1f2      	bne.n	8004cb2 <HAL_DMA_IRQHandler+0x8da>
 8004ccc:	e000      	b.n	8004cd0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8004cce:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 0301 	and.w	r3, r3, #1
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d004      	beq.n	8004ce8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2203      	movs	r2, #3
 8004ce2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004ce6:	e003      	b.n	8004cf0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2201      	movs	r2, #1
 8004cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8272 	beq.w	80051e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	4798      	blx	r3
 8004d0a:	e26c      	b.n	80051e6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	4a43      	ldr	r2, [pc, #268]	; (8004e20 <HAL_DMA_IRQHandler+0xa48>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d022      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a42      	ldr	r2, [pc, #264]	; (8004e24 <HAL_DMA_IRQHandler+0xa4c>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d01d      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a40      	ldr	r2, [pc, #256]	; (8004e28 <HAL_DMA_IRQHandler+0xa50>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d018      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	4a3f      	ldr	r2, [pc, #252]	; (8004e2c <HAL_DMA_IRQHandler+0xa54>)
 8004d30:	4293      	cmp	r3, r2
 8004d32:	d013      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4a3d      	ldr	r2, [pc, #244]	; (8004e30 <HAL_DMA_IRQHandler+0xa58>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d00e      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	4a3c      	ldr	r2, [pc, #240]	; (8004e34 <HAL_DMA_IRQHandler+0xa5c>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d009      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a3a      	ldr	r2, [pc, #232]	; (8004e38 <HAL_DMA_IRQHandler+0xa60>)
 8004d4e:	4293      	cmp	r3, r2
 8004d50:	d004      	beq.n	8004d5c <HAL_DMA_IRQHandler+0x984>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a39      	ldr	r2, [pc, #228]	; (8004e3c <HAL_DMA_IRQHandler+0xa64>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d101      	bne.n	8004d60 <HAL_DMA_IRQHandler+0x988>
 8004d5c:	2301      	movs	r3, #1
 8004d5e:	e000      	b.n	8004d62 <HAL_DMA_IRQHandler+0x98a>
 8004d60:	2300      	movs	r3, #0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	f000 823f 	beq.w	80051e6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d74:	f003 031f 	and.w	r3, r3, #31
 8004d78:	2204      	movs	r2, #4
 8004d7a:	409a      	lsls	r2, r3
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	f000 80cd 	beq.w	8004f20 <HAL_DMA_IRQHandler+0xb48>
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 80c7 	beq.w	8004f20 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d96:	f003 031f 	and.w	r3, r3, #31
 8004d9a:	2204      	movs	r2, #4
 8004d9c:	409a      	lsls	r2, r3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d049      	beq.n	8004e40 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d109      	bne.n	8004dca <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	f000 8210 	beq.w	80051e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004dc8:	e20a      	b.n	80051e0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	f000 8206 	beq.w	80051e0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004ddc:	e200      	b.n	80051e0 <HAL_DMA_IRQHandler+0xe08>
 8004dde:	bf00      	nop
 8004de0:	40020010 	.word	0x40020010
 8004de4:	40020028 	.word	0x40020028
 8004de8:	40020040 	.word	0x40020040
 8004dec:	40020058 	.word	0x40020058
 8004df0:	40020070 	.word	0x40020070
 8004df4:	40020088 	.word	0x40020088
 8004df8:	400200a0 	.word	0x400200a0
 8004dfc:	400200b8 	.word	0x400200b8
 8004e00:	40020410 	.word	0x40020410
 8004e04:	40020428 	.word	0x40020428
 8004e08:	40020440 	.word	0x40020440
 8004e0c:	40020458 	.word	0x40020458
 8004e10:	40020470 	.word	0x40020470
 8004e14:	40020488 	.word	0x40020488
 8004e18:	400204a0 	.word	0x400204a0
 8004e1c:	400204b8 	.word	0x400204b8
 8004e20:	58025408 	.word	0x58025408
 8004e24:	5802541c 	.word	0x5802541c
 8004e28:	58025430 	.word	0x58025430
 8004e2c:	58025444 	.word	0x58025444
 8004e30:	58025458 	.word	0x58025458
 8004e34:	5802546c 	.word	0x5802546c
 8004e38:	58025480 	.word	0x58025480
 8004e3c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	f003 0320 	and.w	r3, r3, #32
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d160      	bne.n	8004f0c <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a7f      	ldr	r2, [pc, #508]	; (800504c <HAL_DMA_IRQHandler+0xc74>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d04a      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a7d      	ldr	r2, [pc, #500]	; (8005050 <HAL_DMA_IRQHandler+0xc78>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d045      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a7c      	ldr	r2, [pc, #496]	; (8005054 <HAL_DMA_IRQHandler+0xc7c>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d040      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a7a      	ldr	r2, [pc, #488]	; (8005058 <HAL_DMA_IRQHandler+0xc80>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d03b      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a79      	ldr	r2, [pc, #484]	; (800505c <HAL_DMA_IRQHandler+0xc84>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d036      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	4a77      	ldr	r2, [pc, #476]	; (8005060 <HAL_DMA_IRQHandler+0xc88>)
 8004e82:	4293      	cmp	r3, r2
 8004e84:	d031      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a76      	ldr	r2, [pc, #472]	; (8005064 <HAL_DMA_IRQHandler+0xc8c>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d02c      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	4a74      	ldr	r2, [pc, #464]	; (8005068 <HAL_DMA_IRQHandler+0xc90>)
 8004e96:	4293      	cmp	r3, r2
 8004e98:	d027      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4a73      	ldr	r2, [pc, #460]	; (800506c <HAL_DMA_IRQHandler+0xc94>)
 8004ea0:	4293      	cmp	r3, r2
 8004ea2:	d022      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a71      	ldr	r2, [pc, #452]	; (8005070 <HAL_DMA_IRQHandler+0xc98>)
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d01d      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a70      	ldr	r2, [pc, #448]	; (8005074 <HAL_DMA_IRQHandler+0xc9c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d018      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a6e      	ldr	r2, [pc, #440]	; (8005078 <HAL_DMA_IRQHandler+0xca0>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d013      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4a6d      	ldr	r2, [pc, #436]	; (800507c <HAL_DMA_IRQHandler+0xca4>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d00e      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4a6b      	ldr	r2, [pc, #428]	; (8005080 <HAL_DMA_IRQHandler+0xca8>)
 8004ed2:	4293      	cmp	r3, r2
 8004ed4:	d009      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	4a6a      	ldr	r2, [pc, #424]	; (8005084 <HAL_DMA_IRQHandler+0xcac>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d004      	beq.n	8004eea <HAL_DMA_IRQHandler+0xb12>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a68      	ldr	r2, [pc, #416]	; (8005088 <HAL_DMA_IRQHandler+0xcb0>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d108      	bne.n	8004efc <HAL_DMA_IRQHandler+0xb24>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 0208 	bic.w	r2, r2, #8
 8004ef8:	601a      	str	r2, [r3, #0]
 8004efa:	e007      	b.n	8004f0c <HAL_DMA_IRQHandler+0xb34>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	681a      	ldr	r2, [r3, #0]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f022 0204 	bic.w	r2, r2, #4
 8004f0a:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8165 	beq.w	80051e0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f1e:	e15f      	b.n	80051e0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f24:	f003 031f 	and.w	r3, r3, #31
 8004f28:	2202      	movs	r2, #2
 8004f2a:	409a      	lsls	r2, r3
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	4013      	ands	r3, r2
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	f000 80c5 	beq.w	80050c0 <HAL_DMA_IRQHandler+0xce8>
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	f000 80bf 	beq.w	80050c0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004f46:	f003 031f 	and.w	r3, r3, #31
 8004f4a:	2202      	movs	r2, #2
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d018      	beq.n	8004f8e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	f000 813a 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f78:	e134      	b.n	80051e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	f000 8130 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f88:	6878      	ldr	r0, [r7, #4]
 8004f8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004f8c:	e12a      	b.n	80051e4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f003 0320 	and.w	r3, r3, #32
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	f040 8089 	bne.w	80050ac <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a2b      	ldr	r2, [pc, #172]	; (800504c <HAL_DMA_IRQHandler+0xc74>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d04a      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	4a29      	ldr	r2, [pc, #164]	; (8005050 <HAL_DMA_IRQHandler+0xc78>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d045      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	4a28      	ldr	r2, [pc, #160]	; (8005054 <HAL_DMA_IRQHandler+0xc7c>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d040      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	4a26      	ldr	r2, [pc, #152]	; (8005058 <HAL_DMA_IRQHandler+0xc80>)
 8004fbe:	4293      	cmp	r3, r2
 8004fc0:	d03b      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a25      	ldr	r2, [pc, #148]	; (800505c <HAL_DMA_IRQHandler+0xc84>)
 8004fc8:	4293      	cmp	r3, r2
 8004fca:	d036      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <HAL_DMA_IRQHandler+0xc88>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d031      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a22      	ldr	r2, [pc, #136]	; (8005064 <HAL_DMA_IRQHandler+0xc8c>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d02c      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	4a20      	ldr	r2, [pc, #128]	; (8005068 <HAL_DMA_IRQHandler+0xc90>)
 8004fe6:	4293      	cmp	r3, r2
 8004fe8:	d027      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	4a1f      	ldr	r2, [pc, #124]	; (800506c <HAL_DMA_IRQHandler+0xc94>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d022      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <HAL_DMA_IRQHandler+0xc98>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d01d      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <HAL_DMA_IRQHandler+0xc9c>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d018      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a1a      	ldr	r2, [pc, #104]	; (8005078 <HAL_DMA_IRQHandler+0xca0>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d013      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	4a19      	ldr	r2, [pc, #100]	; (800507c <HAL_DMA_IRQHandler+0xca4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00e      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a17      	ldr	r2, [pc, #92]	; (8005080 <HAL_DMA_IRQHandler+0xca8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d009      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a16      	ldr	r2, [pc, #88]	; (8005084 <HAL_DMA_IRQHandler+0xcac>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d004      	beq.n	800503a <HAL_DMA_IRQHandler+0xc62>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a14      	ldr	r2, [pc, #80]	; (8005088 <HAL_DMA_IRQHandler+0xcb0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d128      	bne.n	800508c <HAL_DMA_IRQHandler+0xcb4>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	681a      	ldr	r2, [r3, #0]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0214 	bic.w	r2, r2, #20
 8005048:	601a      	str	r2, [r3, #0]
 800504a:	e027      	b.n	800509c <HAL_DMA_IRQHandler+0xcc4>
 800504c:	40020010 	.word	0x40020010
 8005050:	40020028 	.word	0x40020028
 8005054:	40020040 	.word	0x40020040
 8005058:	40020058 	.word	0x40020058
 800505c:	40020070 	.word	0x40020070
 8005060:	40020088 	.word	0x40020088
 8005064:	400200a0 	.word	0x400200a0
 8005068:	400200b8 	.word	0x400200b8
 800506c:	40020410 	.word	0x40020410
 8005070:	40020428 	.word	0x40020428
 8005074:	40020440 	.word	0x40020440
 8005078:	40020458 	.word	0x40020458
 800507c:	40020470 	.word	0x40020470
 8005080:	40020488 	.word	0x40020488
 8005084:	400204a0 	.word	0x400204a0
 8005088:	400204b8 	.word	0x400204b8
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f022 020a 	bic.w	r2, r2, #10
 800509a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	f000 8097 	beq.w	80051e4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80050be:	e091      	b.n	80051e4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80050c4:	f003 031f 	and.w	r3, r3, #31
 80050c8:	2208      	movs	r2, #8
 80050ca:	409a      	lsls	r2, r3
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	4013      	ands	r3, r2
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	f000 8088 	beq.w	80051e6 <HAL_DMA_IRQHandler+0xe0e>
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 8082 	beq.w	80051e6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a41      	ldr	r2, [pc, #260]	; (80051ec <HAL_DMA_IRQHandler+0xe14>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d04a      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a3f      	ldr	r2, [pc, #252]	; (80051f0 <HAL_DMA_IRQHandler+0xe18>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d045      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a3e      	ldr	r2, [pc, #248]	; (80051f4 <HAL_DMA_IRQHandler+0xe1c>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d040      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a3c      	ldr	r2, [pc, #240]	; (80051f8 <HAL_DMA_IRQHandler+0xe20>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d03b      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a3b      	ldr	r2, [pc, #236]	; (80051fc <HAL_DMA_IRQHandler+0xe24>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d036      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a39      	ldr	r2, [pc, #228]	; (8005200 <HAL_DMA_IRQHandler+0xe28>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d031      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a38      	ldr	r2, [pc, #224]	; (8005204 <HAL_DMA_IRQHandler+0xe2c>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d02c      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a36      	ldr	r2, [pc, #216]	; (8005208 <HAL_DMA_IRQHandler+0xe30>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d027      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a35      	ldr	r2, [pc, #212]	; (800520c <HAL_DMA_IRQHandler+0xe34>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d022      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a33      	ldr	r2, [pc, #204]	; (8005210 <HAL_DMA_IRQHandler+0xe38>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d01d      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a32      	ldr	r2, [pc, #200]	; (8005214 <HAL_DMA_IRQHandler+0xe3c>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d018      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a30      	ldr	r2, [pc, #192]	; (8005218 <HAL_DMA_IRQHandler+0xe40>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d013      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2f      	ldr	r2, [pc, #188]	; (800521c <HAL_DMA_IRQHandler+0xe44>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d00e      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a2d      	ldr	r2, [pc, #180]	; (8005220 <HAL_DMA_IRQHandler+0xe48>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d009      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a2c      	ldr	r2, [pc, #176]	; (8005224 <HAL_DMA_IRQHandler+0xe4c>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d004      	beq.n	8005182 <HAL_DMA_IRQHandler+0xdaa>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a2a      	ldr	r2, [pc, #168]	; (8005228 <HAL_DMA_IRQHandler+0xe50>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d108      	bne.n	8005194 <HAL_DMA_IRQHandler+0xdbc>
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f022 021c 	bic.w	r2, r2, #28
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	e007      	b.n	80051a4 <HAL_DMA_IRQHandler+0xdcc>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 020e 	bic.w	r2, r2, #14
 80051a2:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80051a8:	f003 031f 	and.w	r3, r3, #31
 80051ac:	2201      	movs	r2, #1
 80051ae:	409a      	lsls	r2, r3
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d009      	beq.n	80051e6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	4798      	blx	r3
 80051da:	e004      	b.n	80051e6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 80051dc:	bf00      	nop
 80051de:	e002      	b.n	80051e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e0:	bf00      	nop
 80051e2:	e000      	b.n	80051e6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80051e4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80051e6:	3728      	adds	r7, #40	; 0x28
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	40020010 	.word	0x40020010
 80051f0:	40020028 	.word	0x40020028
 80051f4:	40020040 	.word	0x40020040
 80051f8:	40020058 	.word	0x40020058
 80051fc:	40020070 	.word	0x40020070
 8005200:	40020088 	.word	0x40020088
 8005204:	400200a0 	.word	0x400200a0
 8005208:	400200b8 	.word	0x400200b8
 800520c:	40020410 	.word	0x40020410
 8005210:	40020428 	.word	0x40020428
 8005214:	40020440 	.word	0x40020440
 8005218:	40020458 	.word	0x40020458
 800521c:	40020470 	.word	0x40020470
 8005220:	40020488 	.word	0x40020488
 8005224:	400204a0 	.word	0x400204a0
 8005228:	400204b8 	.word	0x400204b8

0800522c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a42      	ldr	r2, [pc, #264]	; (8005344 <DMA_CalcBaseAndBitshift+0x118>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d04a      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a41      	ldr	r2, [pc, #260]	; (8005348 <DMA_CalcBaseAndBitshift+0x11c>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d045      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a3f      	ldr	r2, [pc, #252]	; (800534c <DMA_CalcBaseAndBitshift+0x120>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d040      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a3e      	ldr	r2, [pc, #248]	; (8005350 <DMA_CalcBaseAndBitshift+0x124>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d03b      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a3c      	ldr	r2, [pc, #240]	; (8005354 <DMA_CalcBaseAndBitshift+0x128>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d036      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a3b      	ldr	r2, [pc, #236]	; (8005358 <DMA_CalcBaseAndBitshift+0x12c>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d031      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a39      	ldr	r2, [pc, #228]	; (800535c <DMA_CalcBaseAndBitshift+0x130>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d02c      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a38      	ldr	r2, [pc, #224]	; (8005360 <DMA_CalcBaseAndBitshift+0x134>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d027      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a36      	ldr	r2, [pc, #216]	; (8005364 <DMA_CalcBaseAndBitshift+0x138>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d022      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a35      	ldr	r2, [pc, #212]	; (8005368 <DMA_CalcBaseAndBitshift+0x13c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d01d      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a33      	ldr	r2, [pc, #204]	; (800536c <DMA_CalcBaseAndBitshift+0x140>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d018      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a32      	ldr	r2, [pc, #200]	; (8005370 <DMA_CalcBaseAndBitshift+0x144>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d013      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a30      	ldr	r2, [pc, #192]	; (8005374 <DMA_CalcBaseAndBitshift+0x148>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00e      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a2f      	ldr	r2, [pc, #188]	; (8005378 <DMA_CalcBaseAndBitshift+0x14c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d009      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a2d      	ldr	r2, [pc, #180]	; (800537c <DMA_CalcBaseAndBitshift+0x150>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d004      	beq.n	80052d4 <DMA_CalcBaseAndBitshift+0xa8>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a2c      	ldr	r2, [pc, #176]	; (8005380 <DMA_CalcBaseAndBitshift+0x154>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d101      	bne.n	80052d8 <DMA_CalcBaseAndBitshift+0xac>
 80052d4:	2301      	movs	r3, #1
 80052d6:	e000      	b.n	80052da <DMA_CalcBaseAndBitshift+0xae>
 80052d8:	2300      	movs	r3, #0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d024      	beq.n	8005328 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	b2db      	uxtb	r3, r3
 80052e4:	3b10      	subs	r3, #16
 80052e6:	4a27      	ldr	r2, [pc, #156]	; (8005384 <DMA_CalcBaseAndBitshift+0x158>)
 80052e8:	fba2 2303 	umull	r2, r3, r2, r3
 80052ec:	091b      	lsrs	r3, r3, #4
 80052ee:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f003 0307 	and.w	r3, r3, #7
 80052f6:	4a24      	ldr	r2, [pc, #144]	; (8005388 <DMA_CalcBaseAndBitshift+0x15c>)
 80052f8:	5cd3      	ldrb	r3, [r2, r3]
 80052fa:	461a      	mov	r2, r3
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b03      	cmp	r3, #3
 8005304:	d908      	bls.n	8005318 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	461a      	mov	r2, r3
 800530c:	4b1f      	ldr	r3, [pc, #124]	; (800538c <DMA_CalcBaseAndBitshift+0x160>)
 800530e:	4013      	ands	r3, r2
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	659a      	str	r2, [r3, #88]	; 0x58
 8005316:	e00d      	b.n	8005334 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	4b1b      	ldr	r3, [pc, #108]	; (800538c <DMA_CalcBaseAndBitshift+0x160>)
 8005320:	4013      	ands	r3, r2
 8005322:	687a      	ldr	r2, [r7, #4]
 8005324:	6593      	str	r3, [r2, #88]	; 0x58
 8005326:	e005      	b.n	8005334 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005338:	4618      	mov	r0, r3
 800533a:	3714      	adds	r7, #20
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr
 8005344:	40020010 	.word	0x40020010
 8005348:	40020028 	.word	0x40020028
 800534c:	40020040 	.word	0x40020040
 8005350:	40020058 	.word	0x40020058
 8005354:	40020070 	.word	0x40020070
 8005358:	40020088 	.word	0x40020088
 800535c:	400200a0 	.word	0x400200a0
 8005360:	400200b8 	.word	0x400200b8
 8005364:	40020410 	.word	0x40020410
 8005368:	40020428 	.word	0x40020428
 800536c:	40020440 	.word	0x40020440
 8005370:	40020458 	.word	0x40020458
 8005374:	40020470 	.word	0x40020470
 8005378:	40020488 	.word	0x40020488
 800537c:	400204a0 	.word	0x400204a0
 8005380:	400204b8 	.word	0x400204b8
 8005384:	aaaaaaab 	.word	0xaaaaaaab
 8005388:	0800d438 	.word	0x0800d438
 800538c:	fffffc00 	.word	0xfffffc00

08005390 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005390:	b480      	push	{r7}
 8005392:	b085      	sub	sp, #20
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005398:	2300      	movs	r3, #0
 800539a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	699b      	ldr	r3, [r3, #24]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d120      	bne.n	80053e6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d858      	bhi.n	800545e <DMA_CheckFifoParam+0xce>
 80053ac:	a201      	add	r2, pc, #4	; (adr r2, 80053b4 <DMA_CheckFifoParam+0x24>)
 80053ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053b2:	bf00      	nop
 80053b4:	080053c5 	.word	0x080053c5
 80053b8:	080053d7 	.word	0x080053d7
 80053bc:	080053c5 	.word	0x080053c5
 80053c0:	0800545f 	.word	0x0800545f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d048      	beq.n	8005462 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053d4:	e045      	b.n	8005462 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80053de:	d142      	bne.n	8005466 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80053e0:	2301      	movs	r3, #1
 80053e2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80053e4:	e03f      	b.n	8005466 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053ee:	d123      	bne.n	8005438 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053f4:	2b03      	cmp	r3, #3
 80053f6:	d838      	bhi.n	800546a <DMA_CheckFifoParam+0xda>
 80053f8:	a201      	add	r2, pc, #4	; (adr r2, 8005400 <DMA_CheckFifoParam+0x70>)
 80053fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053fe:	bf00      	nop
 8005400:	08005411 	.word	0x08005411
 8005404:	08005417 	.word	0x08005417
 8005408:	08005411 	.word	0x08005411
 800540c:	08005429 	.word	0x08005429
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8005410:	2301      	movs	r3, #1
 8005412:	73fb      	strb	r3, [r7, #15]
        break;
 8005414:	e030      	b.n	8005478 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d025      	beq.n	800546e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8005422:	2301      	movs	r3, #1
 8005424:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005426:	e022      	b.n	800546e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005430:	d11f      	bne.n	8005472 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8005432:	2301      	movs	r3, #1
 8005434:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8005436:	e01c      	b.n	8005472 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543c:	2b02      	cmp	r3, #2
 800543e:	d902      	bls.n	8005446 <DMA_CheckFifoParam+0xb6>
 8005440:	2b03      	cmp	r3, #3
 8005442:	d003      	beq.n	800544c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8005444:	e018      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	73fb      	strb	r3, [r7, #15]
        break;
 800544a:	e015      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d00e      	beq.n	8005476 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8005458:	2301      	movs	r3, #1
 800545a:	73fb      	strb	r3, [r7, #15]
    break;
 800545c:	e00b      	b.n	8005476 <DMA_CheckFifoParam+0xe6>
        break;
 800545e:	bf00      	nop
 8005460:	e00a      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        break;
 8005462:	bf00      	nop
 8005464:	e008      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        break;
 8005466:	bf00      	nop
 8005468:	e006      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        break;
 800546a:	bf00      	nop
 800546c:	e004      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        break;
 800546e:	bf00      	nop
 8005470:	e002      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
        break;
 8005472:	bf00      	nop
 8005474:	e000      	b.n	8005478 <DMA_CheckFifoParam+0xe8>
    break;
 8005476:	bf00      	nop
    }
  }

  return status;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3714      	adds	r7, #20
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
 8005486:	bf00      	nop

08005488 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	4a38      	ldr	r2, [pc, #224]	; (800557c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d022      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4a36      	ldr	r2, [pc, #216]	; (8005580 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01d      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	4a35      	ldr	r2, [pc, #212]	; (8005584 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d018      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4a33      	ldr	r2, [pc, #204]	; (8005588 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4a32      	ldr	r2, [pc, #200]	; (800558c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80054c4:	4293      	cmp	r3, r2
 80054c6:	d00e      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a30      	ldr	r2, [pc, #192]	; (8005590 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d009      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4a2f      	ldr	r2, [pc, #188]	; (8005594 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d004      	beq.n	80054e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4a2d      	ldr	r2, [pc, #180]	; (8005598 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d101      	bne.n	80054ea <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80054e6:	2301      	movs	r3, #1
 80054e8:	e000      	b.n	80054ec <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80054ea:	2300      	movs	r3, #0
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01a      	beq.n	8005526 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	b2db      	uxtb	r3, r3
 80054f6:	3b08      	subs	r3, #8
 80054f8:	4a28      	ldr	r2, [pc, #160]	; (800559c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 80054fa:	fba2 2303 	umull	r2, r3, r2, r3
 80054fe:	091b      	lsrs	r3, r3, #4
 8005500:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8005502:	68fa      	ldr	r2, [r7, #12]
 8005504:	4b26      	ldr	r3, [pc, #152]	; (80055a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8005506:	4413      	add	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	461a      	mov	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8005514:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 031f 	and.w	r3, r3, #31
 800551c:	2201      	movs	r2, #1
 800551e:	409a      	lsls	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8005524:	e024      	b.n	8005570 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3b10      	subs	r3, #16
 800552e:	4a1e      	ldr	r2, [pc, #120]	; (80055a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8005530:	fba2 2303 	umull	r2, r3, r2, r3
 8005534:	091b      	lsrs	r3, r3, #4
 8005536:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4a1c      	ldr	r2, [pc, #112]	; (80055ac <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d806      	bhi.n	800554e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	4a1b      	ldr	r2, [pc, #108]	; (80055b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d902      	bls.n	800554e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	3308      	adds	r3, #8
 800554c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800554e:	68fa      	ldr	r2, [r7, #12]
 8005550:	4b18      	ldr	r3, [pc, #96]	; (80055b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8005552:	4413      	add	r3, r2
 8005554:	009b      	lsls	r3, r3, #2
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a16      	ldr	r2, [pc, #88]	; (80055b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8005560:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	f003 031f 	and.w	r3, r3, #31
 8005568:	2201      	movs	r2, #1
 800556a:	409a      	lsls	r2, r3
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005570:	bf00      	nop
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr
 800557c:	58025408 	.word	0x58025408
 8005580:	5802541c 	.word	0x5802541c
 8005584:	58025430 	.word	0x58025430
 8005588:	58025444 	.word	0x58025444
 800558c:	58025458 	.word	0x58025458
 8005590:	5802546c 	.word	0x5802546c
 8005594:	58025480 	.word	0x58025480
 8005598:	58025494 	.word	0x58025494
 800559c:	cccccccd 	.word	0xcccccccd
 80055a0:	16009600 	.word	0x16009600
 80055a4:	58025880 	.word	0x58025880
 80055a8:	aaaaaaab 	.word	0xaaaaaaab
 80055ac:	400204b8 	.word	0x400204b8
 80055b0:	4002040f 	.word	0x4002040f
 80055b4:	10008200 	.word	0x10008200
 80055b8:	40020880 	.word	0x40020880

080055bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80055bc:	b480      	push	{r7}
 80055be:	b085      	sub	sp, #20
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	685b      	ldr	r3, [r3, #4]
 80055c8:	b2db      	uxtb	r3, r3
 80055ca:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d04a      	beq.n	8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d847      	bhi.n	8005668 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a25      	ldr	r2, [pc, #148]	; (8005674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d022      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a24      	ldr	r2, [pc, #144]	; (8005678 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d01d      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	4a22      	ldr	r2, [pc, #136]	; (800567c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 80055f2:	4293      	cmp	r3, r2
 80055f4:	d018      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a21      	ldr	r2, [pc, #132]	; (8005680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d013      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	4a1f      	ldr	r2, [pc, #124]	; (8005684 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8005606:	4293      	cmp	r3, r2
 8005608:	d00e      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1e      	ldr	r2, [pc, #120]	; (8005688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d009      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	4a1c      	ldr	r2, [pc, #112]	; (800568c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d004      	beq.n	8005628 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d101      	bne.n	800562c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8005628:	2301      	movs	r3, #1
 800562a:	e000      	b.n	800562e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800562c:	2300      	movs	r3, #0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00a      	beq.n	8005648 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	4b17      	ldr	r3, [pc, #92]	; (8005694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	461a      	mov	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4a15      	ldr	r2, [pc, #84]	; (8005698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8005644:	671a      	str	r2, [r3, #112]	; 0x70
 8005646:	e009      	b.n	800565c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8005648:	68fa      	ldr	r2, [r7, #12]
 800564a:	4b14      	ldr	r3, [pc, #80]	; (800569c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800564c:	4413      	add	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	461a      	mov	r2, r3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	4a11      	ldr	r2, [pc, #68]	; (80056a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800565a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	3b01      	subs	r3, #1
 8005660:	2201      	movs	r2, #1
 8005662:	409a      	lsls	r2, r3
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8005668:	bf00      	nop
 800566a:	3714      	adds	r7, #20
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr
 8005674:	58025408 	.word	0x58025408
 8005678:	5802541c 	.word	0x5802541c
 800567c:	58025430 	.word	0x58025430
 8005680:	58025444 	.word	0x58025444
 8005684:	58025458 	.word	0x58025458
 8005688:	5802546c 	.word	0x5802546c
 800568c:	58025480 	.word	0x58025480
 8005690:	58025494 	.word	0x58025494
 8005694:	1600963f 	.word	0x1600963f
 8005698:	58025940 	.word	0x58025940
 800569c:	1000823f 	.word	0x1000823f
 80056a0:	40020940 	.word	0x40020940

080056a4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80056b2:	2301      	movs	r3, #1
 80056b4:	e0cf      	b.n	8005856 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d106      	bne.n	80056ce <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2223      	movs	r2, #35	; 0x23
 80056c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f7fd f8d1 	bl	8002870 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80056ce:	4b64      	ldr	r3, [pc, #400]	; (8005860 <HAL_ETH_Init+0x1bc>)
 80056d0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056d4:	4a62      	ldr	r2, [pc, #392]	; (8005860 <HAL_ETH_Init+0x1bc>)
 80056d6:	f043 0302 	orr.w	r3, r3, #2
 80056da:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80056de:	4b60      	ldr	r3, [pc, #384]	; (8005860 <HAL_ETH_Init+0x1bc>)
 80056e0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	60bb      	str	r3, [r7, #8]
 80056ea:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	7a1b      	ldrb	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 80056f4:	2000      	movs	r0, #0
 80056f6:	f7fd fc8b 	bl	8003010 <HAL_SYSCFG_ETHInterfaceSelect>
 80056fa:	e003      	b.n	8005704 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 80056fc:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8005700:	f7fd fc86 	bl	8003010 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8005704:	4b57      	ldr	r3, [pc, #348]	; (8005864 <HAL_ETH_Init+0x1c0>)
 8005706:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	687a      	ldr	r2, [r7, #4]
 8005714:	6812      	ldr	r2, [r2, #0]
 8005716:	f043 0301 	orr.w	r3, r3, #1
 800571a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800571e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005720:	f7fd fc3a 	bl	8002f98 <HAL_GetTick>
 8005724:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8005726:	e011      	b.n	800574c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8005728:	f7fd fc36 	bl	8002f98 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8005736:	d909      	bls.n	800574c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2204      	movs	r2, #4
 800573c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	22e0      	movs	r2, #224	; 0xe0
 8005744:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e084      	b.n	8005856 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1e4      	bne.n	8005728 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f886 	bl	8005870 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8005764:	f001 fefc 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 8005768:	4603      	mov	r3, r0
 800576a:	4a3f      	ldr	r2, [pc, #252]	; (8005868 <HAL_ETH_Init+0x1c4>)
 800576c:	fba2 2303 	umull	r2, r3, r2, r3
 8005770:	0c9a      	lsrs	r2, r3, #18
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3a01      	subs	r2, #1
 8005778:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fa71 	bl	8005c64 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800578a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800578e:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	6812      	ldr	r2, [r2, #0]
 8005796:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800579a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800579e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	f003 0303 	and.w	r3, r3, #3
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d009      	beq.n	80057c2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2201      	movs	r2, #1
 80057b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	22e0      	movs	r2, #224	; 0xe0
 80057ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e049      	b.n	8005856 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057ca:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80057ce:	4b27      	ldr	r3, [pc, #156]	; (800586c <HAL_ETH_Init+0x1c8>)
 80057d0:	4013      	ands	r3, r2
 80057d2:	687a      	ldr	r2, [r7, #4]
 80057d4:	6952      	ldr	r2, [r2, #20]
 80057d6:	0051      	lsls	r1, r2, #1
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	6812      	ldr	r2, [r2, #0]
 80057dc:	430b      	orrs	r3, r1
 80057de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80057e2:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f000 fad9 	bl	8005d9e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f000 fb1f 	bl	8005e30 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	685b      	ldr	r3, [r3, #4]
 80057f6:	3305      	adds	r3, #5
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	021a      	lsls	r2, r3, #8
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	3304      	adds	r3, #4
 8005802:	781b      	ldrb	r3, [r3, #0]
 8005804:	4619      	mov	r1, r3
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	3303      	adds	r3, #3
 8005816:	781b      	ldrb	r3, [r3, #0]
 8005818:	061a      	lsls	r2, r3, #24
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	3302      	adds	r3, #2
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	041b      	lsls	r3, r3, #16
 8005824:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	3301      	adds	r3, #1
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005830:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800583e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005840:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2210      	movs	r2, #16
 8005850:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	58024400 	.word	0x58024400
 8005864:	58000400 	.word	0x58000400
 8005868:	431bde83 	.word	0x431bde83
 800586c:	ffff8001 	.word	0xffff8001

08005870 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005880:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8005888:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800588a:	f001 fe69 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 800588e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	4a1e      	ldr	r2, [pc, #120]	; (800590c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d908      	bls.n	80058aa <HAL_ETH_SetMDIOClockRange+0x3a>
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	4a1d      	ldr	r2, [pc, #116]	; (8005910 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d804      	bhi.n	80058aa <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80058a6:	60fb      	str	r3, [r7, #12]
 80058a8:	e027      	b.n	80058fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d908      	bls.n	80058c4 <HAL_ETH_SetMDIOClockRange+0x54>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a17      	ldr	r2, [pc, #92]	; (8005914 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d204      	bcs.n	80058c4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80058c0:	60fb      	str	r3, [r7, #12]
 80058c2:	e01a      	b.n	80058fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	4a13      	ldr	r2, [pc, #76]	; (8005914 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80058c8:	4293      	cmp	r3, r2
 80058ca:	d303      	bcc.n	80058d4 <HAL_ETH_SetMDIOClockRange+0x64>
 80058cc:	68bb      	ldr	r3, [r7, #8]
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d911      	bls.n	80058f8 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4a10      	ldr	r2, [pc, #64]	; (8005918 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d908      	bls.n	80058ee <HAL_ETH_SetMDIOClockRange+0x7e>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a0f      	ldr	r2, [pc, #60]	; (800591c <HAL_ETH_SetMDIOClockRange+0xac>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d804      	bhi.n	80058ee <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ea:	60fb      	str	r3, [r7, #12]
 80058ec:	e005      	b.n	80058fa <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e000      	b.n	80058fa <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 80058f8:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}
 800590c:	01312cff 	.word	0x01312cff
 8005910:	02160ebf 	.word	0x02160ebf
 8005914:	03938700 	.word	0x03938700
 8005918:	05f5e0ff 	.word	0x05f5e0ff
 800591c:	08f0d17f 	.word	0x08f0d17f

08005920 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
 8005928:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005932:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	791b      	ldrb	r3, [r3, #4]
 8005938:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800593a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	7b1b      	ldrb	r3, [r3, #12]
 8005940:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005942:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	7b5b      	ldrb	r3, [r3, #13]
 8005948:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800594a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800594c:	683b      	ldr	r3, [r7, #0]
 800594e:	7b9b      	ldrb	r3, [r3, #14]
 8005950:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005952:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	7bdb      	ldrb	r3, [r3, #15]
 8005958:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800595a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800595c:	683a      	ldr	r2, [r7, #0]
 800595e:	7c12      	ldrb	r2, [r2, #16]
 8005960:	2a00      	cmp	r2, #0
 8005962:	d102      	bne.n	800596a <ETH_SetMACConfig+0x4a>
 8005964:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005968:	e000      	b.n	800596c <ETH_SetMACConfig+0x4c>
 800596a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800596c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800596e:	683a      	ldr	r2, [r7, #0]
 8005970:	7c52      	ldrb	r2, [r2, #17]
 8005972:	2a00      	cmp	r2, #0
 8005974:	d102      	bne.n	800597c <ETH_SetMACConfig+0x5c>
 8005976:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800597a:	e000      	b.n	800597e <ETH_SetMACConfig+0x5e>
 800597c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800597e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	7c9b      	ldrb	r3, [r3, #18]
 8005984:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005986:	431a      	orrs	r2, r3
               macconf->Speed |
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800598c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005992:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	7f1b      	ldrb	r3, [r3, #28]
 8005998:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800599a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	7f5b      	ldrb	r3, [r3, #29]
 80059a0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80059a2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	7f92      	ldrb	r2, [r2, #30]
 80059a8:	2a00      	cmp	r2, #0
 80059aa:	d102      	bne.n	80059b2 <ETH_SetMACConfig+0x92>
 80059ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80059b0:	e000      	b.n	80059b4 <ETH_SetMACConfig+0x94>
 80059b2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80059b4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	7fdb      	ldrb	r3, [r3, #31]
 80059ba:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80059bc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80059be:	683a      	ldr	r2, [r7, #0]
 80059c0:	f892 2020 	ldrb.w	r2, [r2, #32]
 80059c4:	2a00      	cmp	r2, #0
 80059c6:	d102      	bne.n	80059ce <ETH_SetMACConfig+0xae>
 80059c8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80059cc:	e000      	b.n	80059d0 <ETH_SetMACConfig+0xb0>
 80059ce:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80059d0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80059d6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059de:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 80059e0:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	4b56      	ldr	r3, [pc, #344]	; (8005b4c <ETH_SetMACConfig+0x22c>)
 80059f2:	4013      	ands	r3, r2
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6812      	ldr	r2, [r2, #0]
 80059f8:	68f9      	ldr	r1, [r7, #12]
 80059fa:	430b      	orrs	r3, r1
 80059fc:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a0a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005a0c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a14:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005a16:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005a18:	683b      	ldr	r3, [r7, #0]
 8005a1a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005a1e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005a20:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005a22:	683a      	ldr	r2, [r7, #0]
 8005a24:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005a28:	2a00      	cmp	r2, #0
 8005a2a:	d102      	bne.n	8005a32 <ETH_SetMACConfig+0x112>
 8005a2c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005a30:	e000      	b.n	8005a34 <ETH_SetMACConfig+0x114>
 8005a32:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005a34:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	685a      	ldr	r2, [r3, #4]
 8005a44:	4b42      	ldr	r3, [pc, #264]	; (8005b50 <ETH_SetMACConfig+0x230>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	687a      	ldr	r2, [r7, #4]
 8005a4a:	6812      	ldr	r2, [r2, #0]
 8005a4c:	68f9      	ldr	r1, [r7, #12]
 8005a4e:	430b      	orrs	r3, r1
 8005a50:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005a58:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68da      	ldr	r2, [r3, #12]
 8005a68:	4b3a      	ldr	r3, [pc, #232]	; (8005b54 <ETH_SetMACConfig+0x234>)
 8005a6a:	4013      	ands	r3, r2
 8005a6c:	687a      	ldr	r2, [r7, #4]
 8005a6e:	6812      	ldr	r2, [r2, #0]
 8005a70:	68f9      	ldr	r1, [r7, #12]
 8005a72:	430b      	orrs	r3, r1
 8005a74:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005a7c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005a82:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005a84:	683a      	ldr	r2, [r7, #0]
 8005a86:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005a8a:	2a00      	cmp	r2, #0
 8005a8c:	d101      	bne.n	8005a92 <ETH_SetMACConfig+0x172>
 8005a8e:	2280      	movs	r2, #128	; 0x80
 8005a90:	e000      	b.n	8005a94 <ETH_SetMACConfig+0x174>
 8005a92:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005a94:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a9a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005a9c:	4313      	orrs	r3, r2
 8005a9e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005aa6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005aaa:	4013      	ands	r3, r2
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	6812      	ldr	r2, [r2, #0]
 8005ab0:	68f9      	ldr	r1, [r7, #12]
 8005ab2:	430b      	orrs	r3, r1
 8005ab4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005abc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005ac4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ad2:	f023 0103 	bic.w	r1, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	430a      	orrs	r2, r1
 8005ade:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005aea:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	430a      	orrs	r2, r1
 8005af8:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005b00:	683a      	ldr	r2, [r7, #0]
 8005b02:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005b06:	2a00      	cmp	r2, #0
 8005b08:	d101      	bne.n	8005b0e <ETH_SetMACConfig+0x1ee>
 8005b0a:	2240      	movs	r2, #64	; 0x40
 8005b0c:	e000      	b.n	8005b10 <ETH_SetMACConfig+0x1f0>
 8005b0e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005b10:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005b18:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005b1a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005b22:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005b24:	4313      	orrs	r3, r2
 8005b26:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005b30:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	68fa      	ldr	r2, [r7, #12]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005b40:	bf00      	nop
 8005b42:	3714      	adds	r7, #20
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	00048083 	.word	0x00048083
 8005b50:	c0f88000 	.word	0xc0f88000
 8005b54:	fffffef0 	.word	0xfffffef0

08005b58 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b085      	sub	sp, #20
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
 8005b60:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b38      	ldr	r3, [pc, #224]	; (8005c50 <ETH_SetDMAConfig+0xf8>)
 8005b6e:	4013      	ands	r3, r2
 8005b70:	683a      	ldr	r2, [r7, #0]
 8005b72:	6811      	ldr	r1, [r2, #0]
 8005b74:	687a      	ldr	r2, [r7, #4]
 8005b76:	6812      	ldr	r2, [r2, #0]
 8005b78:	430b      	orrs	r3, r1
 8005b7a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b7e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	791b      	ldrb	r3, [r3, #4]
 8005b84:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005b8a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	7b1b      	ldrb	r3, [r3, #12]
 8005b90:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005b92:	4313      	orrs	r3, r2
 8005b94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b9e:	685a      	ldr	r2, [r3, #4]
 8005ba0:	4b2c      	ldr	r3, [pc, #176]	; (8005c54 <ETH_SetDMAConfig+0xfc>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	68f9      	ldr	r1, [r7, #12]
 8005baa:	430b      	orrs	r3, r1
 8005bac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bb0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	7b5b      	ldrb	r3, [r3, #13]
 8005bb6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bc8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005bcc:	4b22      	ldr	r3, [pc, #136]	; (8005c58 <ETH_SetDMAConfig+0x100>)
 8005bce:	4013      	ands	r3, r2
 8005bd0:	687a      	ldr	r2, [r7, #4]
 8005bd2:	6812      	ldr	r2, [r2, #0]
 8005bd4:	68f9      	ldr	r1, [r7, #12]
 8005bd6:	430b      	orrs	r3, r1
 8005bd8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005bdc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	7d1b      	ldrb	r3, [r3, #20]
 8005be8:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005bea:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	7f5b      	ldrb	r3, [r3, #29]
 8005bf0:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005bfe:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005c02:	4b16      	ldr	r3, [pc, #88]	; (8005c5c <ETH_SetDMAConfig+0x104>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	687a      	ldr	r2, [r7, #4]
 8005c08:	6812      	ldr	r2, [r2, #0]
 8005c0a:	68f9      	ldr	r1, [r7, #12]
 8005c0c:	430b      	orrs	r3, r1
 8005c0e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c12:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	7f1b      	ldrb	r3, [r3, #28]
 8005c1a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005c20:	4313      	orrs	r3, r2
 8005c22:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c2c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005c30:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <ETH_SetDMAConfig+0x108>)
 8005c32:	4013      	ands	r3, r2
 8005c34:	687a      	ldr	r2, [r7, #4]
 8005c36:	6812      	ldr	r2, [r2, #0]
 8005c38:	68f9      	ldr	r1, [r7, #12]
 8005c3a:	430b      	orrs	r3, r1
 8005c3c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c40:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005c44:	bf00      	nop
 8005c46:	3714      	adds	r7, #20
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr
 8005c50:	ffff87fd 	.word	0xffff87fd
 8005c54:	ffff2ffe 	.word	0xffff2ffe
 8005c58:	fffec000 	.word	0xfffec000
 8005c5c:	ffc0efef 	.word	0xffc0efef
 8005c60:	7fc0ffff 	.word	0x7fc0ffff

08005c64 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b0a4      	sub	sp, #144	; 0x90
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005c72:	2300      	movs	r3, #0
 8005c74:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005c76:	2300      	movs	r3, #0
 8005c78:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005c82:	2301      	movs	r3, #1
 8005c84:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005c94:	2300      	movs	r3, #0
 8005c96:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005c9a:	2301      	movs	r3, #1
 8005c9c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005ca0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005ca4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005cac:	2300      	movs	r3, #0
 8005cae:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005cbc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005cc0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005ccc:	2301      	movs	r3, #1
 8005cce:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005ce2:	2300      	movs	r3, #0
 8005ce4:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005cea:	2300      	movs	r3, #0
 8005cec:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005cfc:	2320      	movs	r3, #32
 8005cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005d02:	2301      	movs	r3, #1
 8005d04:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005d0e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005d14:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005d18:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005d20:	2302      	movs	r3, #2
 8005d22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005d26:	2300      	movs	r3, #0
 8005d28:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005d38:	2301      	movs	r3, #1
 8005d3a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005d42:	2301      	movs	r3, #1
 8005d44:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fde6 	bl	8005920 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005d54:	2301      	movs	r3, #1
 8005d56:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005d60:	2300      	movs	r3, #0
 8005d62:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005d66:	2300      	movs	r3, #0
 8005d68:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005d6e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d72:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005d74:	2300      	movs	r3, #0
 8005d76:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005d78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005d7c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005d84:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005d88:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005d8a:	f107 0308 	add.w	r3, r7, #8
 8005d8e:	4619      	mov	r1, r3
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7ff fee1 	bl	8005b58 <ETH_SetDMAConfig>
}
 8005d96:	bf00      	nop
 8005d98:	3790      	adds	r7, #144	; 0x90
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}

08005d9e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005d9e:	b480      	push	{r7}
 8005da0:	b085      	sub	sp, #20
 8005da2:	af00      	add	r7, sp, #0
 8005da4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	60fb      	str	r3, [r7, #12]
 8005daa:	e01d      	b.n	8005de8 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	68d9      	ldr	r1, [r3, #12]
 8005db0:	68fa      	ldr	r2, [r7, #12]
 8005db2:	4613      	mov	r3, r2
 8005db4:	005b      	lsls	r3, r3, #1
 8005db6:	4413      	add	r3, r2
 8005db8:	00db      	lsls	r3, r3, #3
 8005dba:	440b      	add	r3, r1
 8005dbc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005dbe:	68bb      	ldr	r3, [r7, #8]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005dd6:	68b9      	ldr	r1, [r7, #8]
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	68fa      	ldr	r2, [r7, #12]
 8005ddc:	3206      	adds	r2, #6
 8005dde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3301      	adds	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2b03      	cmp	r3, #3
 8005dec:	d9de      	bls.n	8005dac <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2200      	movs	r2, #0
 8005df2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	2303      	movs	r3, #3
 8005e00:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	68da      	ldr	r2, [r3, #12]
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e10:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	68da      	ldr	r2, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e20:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005e24:	bf00      	nop
 8005e26:	3714      	adds	r7, #20
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr

08005e30 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e38:	2300      	movs	r3, #0
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	e023      	b.n	8005e86 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6919      	ldr	r1, [r3, #16]
 8005e42:	68fa      	ldr	r2, [r7, #12]
 8005e44:	4613      	mov	r3, r2
 8005e46:	005b      	lsls	r3, r3, #1
 8005e48:	4413      	add	r3, r2
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	440b      	add	r3, r1
 8005e4e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	2200      	movs	r2, #0
 8005e54:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005e62:	68bb      	ldr	r3, [r7, #8]
 8005e64:	2200      	movs	r2, #0
 8005e66:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	2200      	movs	r2, #0
 8005e72:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005e74:	68b9      	ldr	r1, [r7, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	68fa      	ldr	r2, [r7, #12]
 8005e7a:	3212      	adds	r2, #18
 8005e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	3301      	adds	r3, #1
 8005e84:	60fb      	str	r3, [r7, #12]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	2b03      	cmp	r3, #3
 8005e8a:	d9d8      	bls.n	8005e3e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2200      	movs	r2, #0
 8005ea2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eb2:	461a      	mov	r2, r3
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	691a      	ldr	r2, [r3, #16]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ec6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	691b      	ldr	r3, [r3, #16]
 8005ece:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005ede:	bf00      	nop
 8005ee0:	3714      	adds	r7, #20
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
	...

08005eec <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005eec:	b480      	push	{r7}
 8005eee:	b089      	sub	sp, #36	; 0x24
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8005efa:	4b89      	ldr	r3, [pc, #548]	; (8006120 <HAL_GPIO_Init+0x234>)
 8005efc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8005efe:	e194      	b.n	800622a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	2101      	movs	r1, #1
 8005f06:	69fb      	ldr	r3, [r7, #28]
 8005f08:	fa01 f303 	lsl.w	r3, r1, r3
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8005f10:	693b      	ldr	r3, [r7, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8186 	beq.w	8006224 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685b      	ldr	r3, [r3, #4]
 8005f1c:	f003 0303 	and.w	r3, r3, #3
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d005      	beq.n	8005f30 <HAL_GPIO_Init+0x44>
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	685b      	ldr	r3, [r3, #4]
 8005f28:	f003 0303 	and.w	r3, r3, #3
 8005f2c:	2b02      	cmp	r3, #2
 8005f2e:	d130      	bne.n	8005f92 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	2203      	movs	r2, #3
 8005f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005f40:	43db      	mvns	r3, r3
 8005f42:	69ba      	ldr	r2, [r7, #24]
 8005f44:	4013      	ands	r3, r2
 8005f46:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	69fb      	ldr	r3, [r7, #28]
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	fa02 f303 	lsl.w	r3, r2, r3
 8005f54:	69ba      	ldr	r2, [r7, #24]
 8005f56:	4313      	orrs	r3, r2
 8005f58:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	69ba      	ldr	r2, [r7, #24]
 8005f5e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	685b      	ldr	r3, [r3, #4]
 8005f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005f66:	2201      	movs	r2, #1
 8005f68:	69fb      	ldr	r3, [r7, #28]
 8005f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6e:	43db      	mvns	r3, r3
 8005f70:	69ba      	ldr	r2, [r7, #24]
 8005f72:	4013      	ands	r3, r2
 8005f74:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	091b      	lsrs	r3, r3, #4
 8005f7c:	f003 0201 	and.w	r2, r3, #1
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	fa02 f303 	lsl.w	r3, r2, r3
 8005f86:	69ba      	ldr	r2, [r7, #24]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	69ba      	ldr	r2, [r7, #24]
 8005f90:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	685b      	ldr	r3, [r3, #4]
 8005f96:	f003 0303 	and.w	r3, r3, #3
 8005f9a:	2b03      	cmp	r3, #3
 8005f9c:	d017      	beq.n	8005fce <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	68db      	ldr	r3, [r3, #12]
 8005fa2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	005b      	lsls	r3, r3, #1
 8005fa8:	2203      	movs	r2, #3
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	005b      	lsls	r3, r3, #1
 8005fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc2:	69ba      	ldr	r2, [r7, #24]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	69ba      	ldr	r2, [r7, #24]
 8005fcc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f003 0303 	and.w	r3, r3, #3
 8005fd6:	2b02      	cmp	r3, #2
 8005fd8:	d123      	bne.n	8006022 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	08da      	lsrs	r2, r3, #3
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	3208      	adds	r2, #8
 8005fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005fe8:	69fb      	ldr	r3, [r7, #28]
 8005fea:	f003 0307 	and.w	r3, r3, #7
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	220f      	movs	r2, #15
 8005ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff6:	43db      	mvns	r3, r3
 8005ff8:	69ba      	ldr	r2, [r7, #24]
 8005ffa:	4013      	ands	r3, r2
 8005ffc:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	f003 0307 	and.w	r3, r3, #7
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	fa02 f303 	lsl.w	r3, r2, r3
 800600e:	69ba      	ldr	r2, [r7, #24]
 8006010:	4313      	orrs	r3, r2
 8006012:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006014:	69fb      	ldr	r3, [r7, #28]
 8006016:	08da      	lsrs	r2, r3, #3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	3208      	adds	r2, #8
 800601c:	69b9      	ldr	r1, [r7, #24]
 800601e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	005b      	lsls	r3, r3, #1
 800602c:	2203      	movs	r2, #3
 800602e:	fa02 f303 	lsl.w	r3, r2, r3
 8006032:	43db      	mvns	r3, r3
 8006034:	69ba      	ldr	r2, [r7, #24]
 8006036:	4013      	ands	r3, r2
 8006038:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 0203 	and.w	r2, r3, #3
 8006042:	69fb      	ldr	r3, [r7, #28]
 8006044:	005b      	lsls	r3, r3, #1
 8006046:	fa02 f303 	lsl.w	r3, r2, r3
 800604a:	69ba      	ldr	r2, [r7, #24]
 800604c:	4313      	orrs	r3, r2
 800604e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	685b      	ldr	r3, [r3, #4]
 800605a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800605e:	2b00      	cmp	r3, #0
 8006060:	f000 80e0 	beq.w	8006224 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006064:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <HAL_GPIO_Init+0x238>)
 8006066:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800606a:	4a2e      	ldr	r2, [pc, #184]	; (8006124 <HAL_GPIO_Init+0x238>)
 800606c:	f043 0302 	orr.w	r3, r3, #2
 8006070:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006074:	4b2b      	ldr	r3, [pc, #172]	; (8006124 <HAL_GPIO_Init+0x238>)
 8006076:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800607a:	f003 0302 	and.w	r3, r3, #2
 800607e:	60fb      	str	r3, [r7, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006082:	4a29      	ldr	r2, [pc, #164]	; (8006128 <HAL_GPIO_Init+0x23c>)
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	089b      	lsrs	r3, r3, #2
 8006088:	3302      	adds	r3, #2
 800608a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800608e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	f003 0303 	and.w	r3, r3, #3
 8006096:	009b      	lsls	r3, r3, #2
 8006098:	220f      	movs	r2, #15
 800609a:	fa02 f303 	lsl.w	r3, r2, r3
 800609e:	43db      	mvns	r3, r3
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	4013      	ands	r3, r2
 80060a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	4a20      	ldr	r2, [pc, #128]	; (800612c <HAL_GPIO_Init+0x240>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d052      	beq.n	8006154 <HAL_GPIO_Init+0x268>
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	4a1f      	ldr	r2, [pc, #124]	; (8006130 <HAL_GPIO_Init+0x244>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d031      	beq.n	800611a <HAL_GPIO_Init+0x22e>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	4a1e      	ldr	r2, [pc, #120]	; (8006134 <HAL_GPIO_Init+0x248>)
 80060ba:	4293      	cmp	r3, r2
 80060bc:	d02b      	beq.n	8006116 <HAL_GPIO_Init+0x22a>
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	4a1d      	ldr	r2, [pc, #116]	; (8006138 <HAL_GPIO_Init+0x24c>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d025      	beq.n	8006112 <HAL_GPIO_Init+0x226>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	4a1c      	ldr	r2, [pc, #112]	; (800613c <HAL_GPIO_Init+0x250>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d01f      	beq.n	800610e <HAL_GPIO_Init+0x222>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4a1b      	ldr	r2, [pc, #108]	; (8006140 <HAL_GPIO_Init+0x254>)
 80060d2:	4293      	cmp	r3, r2
 80060d4:	d019      	beq.n	800610a <HAL_GPIO_Init+0x21e>
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	4a1a      	ldr	r2, [pc, #104]	; (8006144 <HAL_GPIO_Init+0x258>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d013      	beq.n	8006106 <HAL_GPIO_Init+0x21a>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	4a19      	ldr	r2, [pc, #100]	; (8006148 <HAL_GPIO_Init+0x25c>)
 80060e2:	4293      	cmp	r3, r2
 80060e4:	d00d      	beq.n	8006102 <HAL_GPIO_Init+0x216>
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	4a18      	ldr	r2, [pc, #96]	; (800614c <HAL_GPIO_Init+0x260>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d007      	beq.n	80060fe <HAL_GPIO_Init+0x212>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	4a17      	ldr	r2, [pc, #92]	; (8006150 <HAL_GPIO_Init+0x264>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d101      	bne.n	80060fa <HAL_GPIO_Init+0x20e>
 80060f6:	2309      	movs	r3, #9
 80060f8:	e02d      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 80060fa:	230a      	movs	r3, #10
 80060fc:	e02b      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 80060fe:	2308      	movs	r3, #8
 8006100:	e029      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006102:	2307      	movs	r3, #7
 8006104:	e027      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006106:	2306      	movs	r3, #6
 8006108:	e025      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800610a:	2305      	movs	r3, #5
 800610c:	e023      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800610e:	2304      	movs	r3, #4
 8006110:	e021      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006112:	2303      	movs	r3, #3
 8006114:	e01f      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 8006116:	2302      	movs	r3, #2
 8006118:	e01d      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800611a:	2301      	movs	r3, #1
 800611c:	e01b      	b.n	8006156 <HAL_GPIO_Init+0x26a>
 800611e:	bf00      	nop
 8006120:	58000080 	.word	0x58000080
 8006124:	58024400 	.word	0x58024400
 8006128:	58000400 	.word	0x58000400
 800612c:	58020000 	.word	0x58020000
 8006130:	58020400 	.word	0x58020400
 8006134:	58020800 	.word	0x58020800
 8006138:	58020c00 	.word	0x58020c00
 800613c:	58021000 	.word	0x58021000
 8006140:	58021400 	.word	0x58021400
 8006144:	58021800 	.word	0x58021800
 8006148:	58021c00 	.word	0x58021c00
 800614c:	58022000 	.word	0x58022000
 8006150:	58022400 	.word	0x58022400
 8006154:	2300      	movs	r3, #0
 8006156:	69fa      	ldr	r2, [r7, #28]
 8006158:	f002 0203 	and.w	r2, r2, #3
 800615c:	0092      	lsls	r2, r2, #2
 800615e:	4093      	lsls	r3, r2
 8006160:	69ba      	ldr	r2, [r7, #24]
 8006162:	4313      	orrs	r3, r2
 8006164:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006166:	4938      	ldr	r1, [pc, #224]	; (8006248 <HAL_GPIO_Init+0x35c>)
 8006168:	69fb      	ldr	r3, [r7, #28]
 800616a:	089b      	lsrs	r3, r3, #2
 800616c:	3302      	adds	r3, #2
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	43db      	mvns	r3, r3
 8006180:	69ba      	ldr	r2, [r7, #24]
 8006182:	4013      	ands	r3, r2
 8006184:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800618e:	2b00      	cmp	r3, #0
 8006190:	d003      	beq.n	800619a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8006192:	69ba      	ldr	r2, [r7, #24]
 8006194:	693b      	ldr	r3, [r7, #16]
 8006196:	4313      	orrs	r3, r2
 8006198:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800619a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80061a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d003      	beq.n	80061c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80061c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80061cc:	69bb      	ldr	r3, [r7, #24]
 80061ce:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	43db      	mvns	r3, r3
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	4013      	ands	r3, r2
 80061de:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d003      	beq.n	80061f4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80061ec:	69ba      	ldr	r2, [r7, #24]
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	4313      	orrs	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	43db      	mvns	r3, r3
 8006204:	69ba      	ldr	r2, [r7, #24]
 8006206:	4013      	ands	r3, r2
 8006208:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006212:	2b00      	cmp	r3, #0
 8006214:	d003      	beq.n	800621e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006216:	69ba      	ldr	r2, [r7, #24]
 8006218:	693b      	ldr	r3, [r7, #16]
 800621a:	4313      	orrs	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	69ba      	ldr	r2, [r7, #24]
 8006222:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006224:	69fb      	ldr	r3, [r7, #28]
 8006226:	3301      	adds	r3, #1
 8006228:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800622a:	683b      	ldr	r3, [r7, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	69fb      	ldr	r3, [r7, #28]
 8006230:	fa22 f303 	lsr.w	r3, r2, r3
 8006234:	2b00      	cmp	r3, #0
 8006236:	f47f ae63 	bne.w	8005f00 <HAL_GPIO_Init+0x14>
  }
}
 800623a:	bf00      	nop
 800623c:	bf00      	nop
 800623e:	3724      	adds	r7, #36	; 0x24
 8006240:	46bd      	mov	sp, r7
 8006242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006246:	4770      	bx	lr
 8006248:	58000400 	.word	0x58000400

0800624c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	460b      	mov	r3, r1
 8006256:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	691a      	ldr	r2, [r3, #16]
 800625c:	887b      	ldrh	r3, [r7, #2]
 800625e:	4013      	ands	r3, r2
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006264:	2301      	movs	r3, #1
 8006266:	73fb      	strb	r3, [r7, #15]
 8006268:	e001      	b.n	800626e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800626a:	2300      	movs	r3, #0
 800626c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3714      	adds	r7, #20
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr

0800627c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
 8006284:	460b      	mov	r3, r1
 8006286:	807b      	strh	r3, [r7, #2]
 8006288:	4613      	mov	r3, r2
 800628a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800628c:	787b      	ldrb	r3, [r7, #1]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d003      	beq.n	800629a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006292:	887a      	ldrh	r2, [r7, #2]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8006298:	e003      	b.n	80062a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800629a:	887b      	ldrh	r3, [r7, #2]
 800629c:	041a      	lsls	r2, r3, #16
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	619a      	str	r2, [r3, #24]
}
 80062a2:	bf00      	nop
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b085      	sub	sp, #20
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	695b      	ldr	r3, [r3, #20]
 80062be:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80062c0:	887a      	ldrh	r2, [r7, #2]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	4013      	ands	r3, r2
 80062c6:	041a      	lsls	r2, r3, #16
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	43d9      	mvns	r1, r3
 80062cc:	887b      	ldrh	r3, [r7, #2]
 80062ce:	400b      	ands	r3, r1
 80062d0:	431a      	orrs	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	619a      	str	r2, [r3, #24]
}
 80062d6:	bf00      	nop
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr
	...

080062e4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80062e4:	b480      	push	{r7}
 80062e6:	b083      	sub	sp, #12
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <HAL_HSEM_FastTake+0x2c>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	3320      	adds	r3, #32
 80062f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f6:	4a07      	ldr	r2, [pc, #28]	; (8006314 <HAL_HSEM_FastTake+0x30>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d101      	bne.n	8006300 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80062fc:	2300      	movs	r3, #0
 80062fe:	e000      	b.n	8006302 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
}
 8006302:	4618      	mov	r0, r3
 8006304:	370c      	adds	r7, #12
 8006306:	46bd      	mov	sp, r7
 8006308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	58026400 	.word	0x58026400
 8006314:	80000300 	.word	0x80000300

08006318 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8006322:	4906      	ldr	r1, [pc, #24]	; (800633c <HAL_HSEM_Release+0x24>)
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8006330:	bf00      	nop
 8006332:	370c      	adds	r7, #12
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr
 800633c:	58026400 	.word	0x58026400

08006340 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8006340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006342:	b08f      	sub	sp, #60	; 0x3c
 8006344:	af0a      	add	r7, sp, #40	; 0x28
 8006346:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d101      	bne.n	8006352 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800634e:	2301      	movs	r3, #1
 8006350:	e116      	b.n	8006580 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800635e:	b2db      	uxtb	r3, r3
 8006360:	2b00      	cmp	r3, #0
 8006362:	d106      	bne.n	8006372 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f7fc fc8b 	bl	8002c88 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2203      	movs	r2, #3
 8006376:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006382:	2b00      	cmp	r3, #0
 8006384:	d102      	bne.n	800638c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2200      	movs	r2, #0
 800638a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f004 fded 	bl	800af70 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	603b      	str	r3, [r7, #0]
 800639c:	687e      	ldr	r6, [r7, #4]
 800639e:	466d      	mov	r5, sp
 80063a0:	f106 0410 	add.w	r4, r6, #16
 80063a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80063b4:	1d33      	adds	r3, r6, #4
 80063b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b8:	6838      	ldr	r0, [r7, #0]
 80063ba:	f004 fd6b 	bl	800ae94 <USB_CoreInit>
 80063be:	4603      	mov	r3, r0
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d005      	beq.n	80063d0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2202      	movs	r2, #2
 80063c8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	e0d7      	b.n	8006580 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	2100      	movs	r1, #0
 80063d6:	4618      	mov	r0, r3
 80063d8:	f004 fddb 	bl	800af92 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063dc:	2300      	movs	r3, #0
 80063de:	73fb      	strb	r3, [r7, #15]
 80063e0:	e04a      	b.n	8006478 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063e2:	7bfa      	ldrb	r2, [r7, #15]
 80063e4:	6879      	ldr	r1, [r7, #4]
 80063e6:	4613      	mov	r3, r2
 80063e8:	00db      	lsls	r3, r3, #3
 80063ea:	4413      	add	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	440b      	add	r3, r1
 80063f0:	333d      	adds	r3, #61	; 0x3d
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063f6:	7bfa      	ldrb	r2, [r7, #15]
 80063f8:	6879      	ldr	r1, [r7, #4]
 80063fa:	4613      	mov	r3, r2
 80063fc:	00db      	lsls	r3, r3, #3
 80063fe:	4413      	add	r3, r2
 8006400:	009b      	lsls	r3, r3, #2
 8006402:	440b      	add	r3, r1
 8006404:	333c      	adds	r3, #60	; 0x3c
 8006406:	7bfa      	ldrb	r2, [r7, #15]
 8006408:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800640a:	7bfa      	ldrb	r2, [r7, #15]
 800640c:	7bfb      	ldrb	r3, [r7, #15]
 800640e:	b298      	uxth	r0, r3
 8006410:	6879      	ldr	r1, [r7, #4]
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	440b      	add	r3, r1
 800641c:	3344      	adds	r3, #68	; 0x44
 800641e:	4602      	mov	r2, r0
 8006420:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006422:	7bfa      	ldrb	r2, [r7, #15]
 8006424:	6879      	ldr	r1, [r7, #4]
 8006426:	4613      	mov	r3, r2
 8006428:	00db      	lsls	r3, r3, #3
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	440b      	add	r3, r1
 8006430:	3340      	adds	r3, #64	; 0x40
 8006432:	2200      	movs	r2, #0
 8006434:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006436:	7bfa      	ldrb	r2, [r7, #15]
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	00db      	lsls	r3, r3, #3
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3348      	adds	r3, #72	; 0x48
 8006446:	2200      	movs	r2, #0
 8006448:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800644a:	7bfa      	ldrb	r2, [r7, #15]
 800644c:	6879      	ldr	r1, [r7, #4]
 800644e:	4613      	mov	r3, r2
 8006450:	00db      	lsls	r3, r3, #3
 8006452:	4413      	add	r3, r2
 8006454:	009b      	lsls	r3, r3, #2
 8006456:	440b      	add	r3, r1
 8006458:	334c      	adds	r3, #76	; 0x4c
 800645a:	2200      	movs	r2, #0
 800645c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800645e:	7bfa      	ldrb	r2, [r7, #15]
 8006460:	6879      	ldr	r1, [r7, #4]
 8006462:	4613      	mov	r3, r2
 8006464:	00db      	lsls	r3, r3, #3
 8006466:	4413      	add	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	440b      	add	r3, r1
 800646c:	3354      	adds	r3, #84	; 0x54
 800646e:	2200      	movs	r2, #0
 8006470:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006472:	7bfb      	ldrb	r3, [r7, #15]
 8006474:	3301      	adds	r3, #1
 8006476:	73fb      	strb	r3, [r7, #15]
 8006478:	7bfa      	ldrb	r2, [r7, #15]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	429a      	cmp	r2, r3
 8006480:	d3af      	bcc.n	80063e2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006482:	2300      	movs	r3, #0
 8006484:	73fb      	strb	r3, [r7, #15]
 8006486:	e044      	b.n	8006512 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006488:	7bfa      	ldrb	r2, [r7, #15]
 800648a:	6879      	ldr	r1, [r7, #4]
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	440b      	add	r3, r1
 8006496:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800649e:	7bfa      	ldrb	r2, [r7, #15]
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	00db      	lsls	r3, r3, #3
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	440b      	add	r3, r1
 80064ac:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80064b0:	7bfa      	ldrb	r2, [r7, #15]
 80064b2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064b4:	7bfa      	ldrb	r2, [r7, #15]
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	4613      	mov	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	440b      	add	r3, r1
 80064c2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064c6:	2200      	movs	r2, #0
 80064c8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064ca:	7bfa      	ldrb	r2, [r7, #15]
 80064cc:	6879      	ldr	r1, [r7, #4]
 80064ce:	4613      	mov	r3, r2
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	440b      	add	r3, r1
 80064d8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80064dc:	2200      	movs	r2, #0
 80064de:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064e0:	7bfa      	ldrb	r2, [r7, #15]
 80064e2:	6879      	ldr	r1, [r7, #4]
 80064e4:	4613      	mov	r3, r2
 80064e6:	00db      	lsls	r3, r3, #3
 80064e8:	4413      	add	r3, r2
 80064ea:	009b      	lsls	r3, r3, #2
 80064ec:	440b      	add	r3, r1
 80064ee:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80064f2:	2200      	movs	r2, #0
 80064f4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064f6:	7bfa      	ldrb	r2, [r7, #15]
 80064f8:	6879      	ldr	r1, [r7, #4]
 80064fa:	4613      	mov	r3, r2
 80064fc:	00db      	lsls	r3, r3, #3
 80064fe:	4413      	add	r3, r2
 8006500:	009b      	lsls	r3, r3, #2
 8006502:	440b      	add	r3, r1
 8006504:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006508:	2200      	movs	r2, #0
 800650a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800650c:	7bfb      	ldrb	r3, [r7, #15]
 800650e:	3301      	adds	r3, #1
 8006510:	73fb      	strb	r3, [r7, #15]
 8006512:	7bfa      	ldrb	r2, [r7, #15]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	429a      	cmp	r2, r3
 800651a:	d3b5      	bcc.n	8006488 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	603b      	str	r3, [r7, #0]
 8006522:	687e      	ldr	r6, [r7, #4]
 8006524:	466d      	mov	r5, sp
 8006526:	f106 0410 	add.w	r4, r6, #16
 800652a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800652e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8006530:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006532:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006536:	e885 0003 	stmia.w	r5, {r0, r1}
 800653a:	1d33      	adds	r3, r6, #4
 800653c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653e:	6838      	ldr	r0, [r7, #0]
 8006540:	f004 fd74 	bl	800b02c <USB_DevInit>
 8006544:	4603      	mov	r3, r0
 8006546:	2b00      	cmp	r3, #0
 8006548:	d005      	beq.n	8006556 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2202      	movs	r2, #2
 800654e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006552:	2301      	movs	r3, #1
 8006554:	e014      	b.n	8006580 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2201      	movs	r2, #1
 8006562:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800656a:	2b01      	cmp	r3, #1
 800656c:	d102      	bne.n	8006574 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f000 f80a 	bl	8006588 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4618      	mov	r0, r3
 800657a:	f004 ff32 	bl	800b3e2 <USB_DevDisconnect>

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006588 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006588:	b480      	push	{r7}
 800658a:	b085      	sub	sp, #20
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2201      	movs	r2, #1
 800659a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	699b      	ldr	r3, [r3, #24]
 80065aa:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065b6:	4b05      	ldr	r3, [pc, #20]	; (80065cc <HAL_PCDEx_ActivateLPM+0x44>)
 80065b8:	4313      	orrs	r3, r2
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr
 80065cc:	10000003 	.word	0x10000003

080065d0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80065d8:	4b29      	ldr	r3, [pc, #164]	; (8006680 <HAL_PWREx_ConfigSupply+0xb0>)
 80065da:	68db      	ldr	r3, [r3, #12]
 80065dc:	f003 0307 	and.w	r3, r3, #7
 80065e0:	2b06      	cmp	r3, #6
 80065e2:	d00a      	beq.n	80065fa <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80065e4:	4b26      	ldr	r3, [pc, #152]	; (8006680 <HAL_PWREx_ConfigSupply+0xb0>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80065ec:	687a      	ldr	r2, [r7, #4]
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d001      	beq.n	80065f6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e040      	b.n	8006678 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80065f6:	2300      	movs	r3, #0
 80065f8:	e03e      	b.n	8006678 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80065fa:	4b21      	ldr	r3, [pc, #132]	; (8006680 <HAL_PWREx_ConfigSupply+0xb0>)
 80065fc:	68db      	ldr	r3, [r3, #12]
 80065fe:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8006602:	491f      	ldr	r1, [pc, #124]	; (8006680 <HAL_PWREx_ConfigSupply+0xb0>)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4313      	orrs	r3, r2
 8006608:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800660a:	f7fc fcc5 	bl	8002f98 <HAL_GetTick>
 800660e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006610:	e009      	b.n	8006626 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006612:	f7fc fcc1 	bl	8002f98 <HAL_GetTick>
 8006616:	4602      	mov	r2, r0
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	1ad3      	subs	r3, r2, r3
 800661c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006620:	d901      	bls.n	8006626 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
 8006624:	e028      	b.n	8006678 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8006626:	4b16      	ldr	r3, [pc, #88]	; (8006680 <HAL_PWREx_ConfigSupply+0xb0>)
 8006628:	685b      	ldr	r3, [r3, #4]
 800662a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800662e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006632:	d1ee      	bne.n	8006612 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2b1e      	cmp	r3, #30
 8006638:	d008      	beq.n	800664c <HAL_PWREx_ConfigSupply+0x7c>
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	2b2e      	cmp	r3, #46	; 0x2e
 800663e:	d005      	beq.n	800664c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2b1d      	cmp	r3, #29
 8006644:	d002      	beq.n	800664c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	2b2d      	cmp	r3, #45	; 0x2d
 800664a:	d114      	bne.n	8006676 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800664c:	f7fc fca4 	bl	8002f98 <HAL_GetTick>
 8006650:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006652:	e009      	b.n	8006668 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8006654:	f7fc fca0 	bl	8002f98 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006662:	d901      	bls.n	8006668 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e007      	b.n	8006678 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8006668:	4b05      	ldr	r3, [pc, #20]	; (8006680 <HAL_PWREx_ConfigSupply+0xb0>)
 800666a:	68db      	ldr	r3, [r3, #12]
 800666c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006674:	d1ee      	bne.n	8006654 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8006676:	2300      	movs	r3, #0
}
 8006678:	4618      	mov	r0, r3
 800667a:	3710      	adds	r7, #16
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	58024800 	.word	0x58024800

08006684 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8006684:	b480      	push	{r7}
 8006686:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8006688:	4b05      	ldr	r3, [pc, #20]	; (80066a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800668a:	68db      	ldr	r3, [r3, #12]
 800668c:	4a04      	ldr	r2, [pc, #16]	; (80066a0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800668e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006692:	60d3      	str	r3, [r2, #12]
}
 8006694:	bf00      	nop
 8006696:	46bd      	mov	sp, r7
 8006698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669c:	4770      	bx	lr
 800669e:	bf00      	nop
 80066a0:	58024800 	.word	0x58024800

080066a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	; 0x30
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d102      	bne.n	80066b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	f000 bc1d 	b.w	8006ef2 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f003 0301 	and.w	r3, r3, #1
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 8087 	beq.w	80067d4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066c6:	4b99      	ldr	r3, [pc, #612]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80066ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80066d0:	4b96      	ldr	r3, [pc, #600]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80066d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80066d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d007      	beq.n	80066ec <HAL_RCC_OscConfig+0x48>
 80066dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066de:	2b18      	cmp	r3, #24
 80066e0:	d110      	bne.n	8006704 <HAL_RCC_OscConfig+0x60>
 80066e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066e4:	f003 0303 	and.w	r3, r3, #3
 80066e8:	2b02      	cmp	r3, #2
 80066ea:	d10b      	bne.n	8006704 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	4b8f      	ldr	r3, [pc, #572]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d06c      	beq.n	80067d2 <HAL_RCC_OscConfig+0x12e>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d168      	bne.n	80067d2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e3f6      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800670c:	d106      	bne.n	800671c <HAL_RCC_OscConfig+0x78>
 800670e:	4b87      	ldr	r3, [pc, #540]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a86      	ldr	r2, [pc, #536]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006714:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	e02e      	b.n	800677a <HAL_RCC_OscConfig+0xd6>
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d10c      	bne.n	800673e <HAL_RCC_OscConfig+0x9a>
 8006724:	4b81      	ldr	r3, [pc, #516]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	4a80      	ldr	r2, [pc, #512]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800672a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4b7e      	ldr	r3, [pc, #504]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a7d      	ldr	r2, [pc, #500]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673a:	6013      	str	r3, [r2, #0]
 800673c:	e01d      	b.n	800677a <HAL_RCC_OscConfig+0xd6>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	685b      	ldr	r3, [r3, #4]
 8006742:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006746:	d10c      	bne.n	8006762 <HAL_RCC_OscConfig+0xbe>
 8006748:	4b78      	ldr	r3, [pc, #480]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a77      	ldr	r2, [pc, #476]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800674e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006752:	6013      	str	r3, [r2, #0]
 8006754:	4b75      	ldr	r3, [pc, #468]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a74      	ldr	r2, [pc, #464]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800675a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	e00b      	b.n	800677a <HAL_RCC_OscConfig+0xd6>
 8006762:	4b72      	ldr	r3, [pc, #456]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	4a71      	ldr	r2, [pc, #452]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006768:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800676c:	6013      	str	r3, [r2, #0]
 800676e:	4b6f      	ldr	r3, [pc, #444]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	4a6e      	ldr	r2, [pc, #440]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006774:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006778:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d013      	beq.n	80067aa <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006782:	f7fc fc09 	bl	8002f98 <HAL_GetTick>
 8006786:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006788:	e008      	b.n	800679c <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800678a:	f7fc fc05 	bl	8002f98 <HAL_GetTick>
 800678e:	4602      	mov	r2, r0
 8006790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006792:	1ad3      	subs	r3, r2, r3
 8006794:	2b64      	cmp	r3, #100	; 0x64
 8006796:	d901      	bls.n	800679c <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8006798:	2303      	movs	r3, #3
 800679a:	e3aa      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800679c:	4b63      	ldr	r3, [pc, #396]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d0f0      	beq.n	800678a <HAL_RCC_OscConfig+0xe6>
 80067a8:	e014      	b.n	80067d4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067aa:	f7fc fbf5 	bl	8002f98 <HAL_GetTick>
 80067ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067b0:	e008      	b.n	80067c4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067b2:	f7fc fbf1 	bl	8002f98 <HAL_GetTick>
 80067b6:	4602      	mov	r2, r0
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	1ad3      	subs	r3, r2, r3
 80067bc:	2b64      	cmp	r3, #100	; 0x64
 80067be:	d901      	bls.n	80067c4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 80067c0:	2303      	movs	r3, #3
 80067c2:	e396      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80067c4:	4b59      	ldr	r3, [pc, #356]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d1f0      	bne.n	80067b2 <HAL_RCC_OscConfig+0x10e>
 80067d0:	e000      	b.n	80067d4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	f003 0302 	and.w	r3, r3, #2
 80067dc:	2b00      	cmp	r3, #0
 80067de:	f000 80cb 	beq.w	8006978 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e2:	4b52      	ldr	r3, [pc, #328]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80067ea:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80067ec:	4b4f      	ldr	r3, [pc, #316]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80067ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f0:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80067f2:	6a3b      	ldr	r3, [r7, #32]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d007      	beq.n	8006808 <HAL_RCC_OscConfig+0x164>
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	2b18      	cmp	r3, #24
 80067fc:	d156      	bne.n	80068ac <HAL_RCC_OscConfig+0x208>
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	f003 0303 	and.w	r3, r3, #3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d151      	bne.n	80068ac <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006808:	4b48      	ldr	r3, [pc, #288]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	d005      	beq.n	8006820 <HAL_RCC_OscConfig+0x17c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d101      	bne.n	8006820 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	e368      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8006820:	4b42      	ldr	r3, [pc, #264]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f023 0219 	bic.w	r2, r3, #25
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	493f      	ldr	r1, [pc, #252]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800682e:	4313      	orrs	r3, r2
 8006830:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006832:	f7fc fbb1 	bl	8002f98 <HAL_GetTick>
 8006836:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800683a:	f7fc fbad 	bl	8002f98 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e352      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800684c:	4b37      	ldr	r3, [pc, #220]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0304 	and.w	r3, r3, #4
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006858:	f7fc fbce 	bl	8002ff8 <HAL_GetREVID>
 800685c:	4603      	mov	r3, r0
 800685e:	f241 0203 	movw	r2, #4099	; 0x1003
 8006862:	4293      	cmp	r3, r2
 8006864:	d817      	bhi.n	8006896 <HAL_RCC_OscConfig+0x1f2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	691b      	ldr	r3, [r3, #16]
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d108      	bne.n	8006880 <HAL_RCC_OscConfig+0x1dc>
 800686e:	4b2f      	ldr	r3, [pc, #188]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8006876:	4a2d      	ldr	r2, [pc, #180]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006878:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800687c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800687e:	e07b      	b.n	8006978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006880:	4b2a      	ldr	r3, [pc, #168]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006882:	685b      	ldr	r3, [r3, #4]
 8006884:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	031b      	lsls	r3, r3, #12
 800688e:	4927      	ldr	r1, [pc, #156]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006890:	4313      	orrs	r3, r2
 8006892:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006894:	e070      	b.n	8006978 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006896:	4b25      	ldr	r3, [pc, #148]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	691b      	ldr	r3, [r3, #16]
 80068a2:	061b      	lsls	r3, r3, #24
 80068a4:	4921      	ldr	r1, [pc, #132]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80068a6:	4313      	orrs	r3, r2
 80068a8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80068aa:	e065      	b.n	8006978 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	68db      	ldr	r3, [r3, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d048      	beq.n	8006946 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80068b4:	4b1d      	ldr	r3, [pc, #116]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f023 0219 	bic.w	r2, r3, #25
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	491a      	ldr	r1, [pc, #104]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80068c2:	4313      	orrs	r3, r2
 80068c4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068c6:	f7fc fb67 	bl	8002f98 <HAL_GetTick>
 80068ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068cc:	e008      	b.n	80068e0 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068ce:	f7fc fb63 	bl	8002f98 <HAL_GetTick>
 80068d2:	4602      	mov	r2, r0
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	1ad3      	subs	r3, r2, r3
 80068d8:	2b02      	cmp	r3, #2
 80068da:	d901      	bls.n	80068e0 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 80068dc:	2303      	movs	r3, #3
 80068de:	e308      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80068e0:	4b12      	ldr	r3, [pc, #72]	; (800692c <HAL_RCC_OscConfig+0x288>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d0f0      	beq.n	80068ce <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068ec:	f7fc fb84 	bl	8002ff8 <HAL_GetREVID>
 80068f0:	4603      	mov	r3, r0
 80068f2:	f241 0203 	movw	r2, #4099	; 0x1003
 80068f6:	4293      	cmp	r3, r2
 80068f8:	d81a      	bhi.n	8006930 <HAL_RCC_OscConfig+0x28c>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	691b      	ldr	r3, [r3, #16]
 80068fe:	2b40      	cmp	r3, #64	; 0x40
 8006900:	d108      	bne.n	8006914 <HAL_RCC_OscConfig+0x270>
 8006902:	4b0a      	ldr	r3, [pc, #40]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800690a:	4a08      	ldr	r2, [pc, #32]	; (800692c <HAL_RCC_OscConfig+0x288>)
 800690c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006910:	6053      	str	r3, [r2, #4]
 8006912:	e031      	b.n	8006978 <HAL_RCC_OscConfig+0x2d4>
 8006914:	4b05      	ldr	r3, [pc, #20]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	691b      	ldr	r3, [r3, #16]
 8006920:	031b      	lsls	r3, r3, #12
 8006922:	4902      	ldr	r1, [pc, #8]	; (800692c <HAL_RCC_OscConfig+0x288>)
 8006924:	4313      	orrs	r3, r2
 8006926:	604b      	str	r3, [r1, #4]
 8006928:	e026      	b.n	8006978 <HAL_RCC_OscConfig+0x2d4>
 800692a:	bf00      	nop
 800692c:	58024400 	.word	0x58024400
 8006930:	4b9a      	ldr	r3, [pc, #616]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006932:	685b      	ldr	r3, [r3, #4]
 8006934:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	691b      	ldr	r3, [r3, #16]
 800693c:	061b      	lsls	r3, r3, #24
 800693e:	4997      	ldr	r1, [pc, #604]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	604b      	str	r3, [r1, #4]
 8006944:	e018      	b.n	8006978 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006946:	4b95      	ldr	r3, [pc, #596]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a94      	ldr	r2, [pc, #592]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 800694c:	f023 0301 	bic.w	r3, r3, #1
 8006950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006952:	f7fc fb21 	bl	8002f98 <HAL_GetTick>
 8006956:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006958:	e008      	b.n	800696c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800695a:	f7fc fb1d 	bl	8002f98 <HAL_GetTick>
 800695e:	4602      	mov	r2, r0
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	2b02      	cmp	r3, #2
 8006966:	d901      	bls.n	800696c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e2c2      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800696c:	4b8b      	ldr	r3, [pc, #556]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d1f0      	bne.n	800695a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f003 0310 	and.w	r3, r3, #16
 8006980:	2b00      	cmp	r3, #0
 8006982:	f000 80a9 	beq.w	8006ad8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006986:	4b85      	ldr	r3, [pc, #532]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006988:	691b      	ldr	r3, [r3, #16]
 800698a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800698e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8006990:	4b82      	ldr	r3, [pc, #520]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006994:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8006996:	69bb      	ldr	r3, [r7, #24]
 8006998:	2b08      	cmp	r3, #8
 800699a:	d007      	beq.n	80069ac <HAL_RCC_OscConfig+0x308>
 800699c:	69bb      	ldr	r3, [r7, #24]
 800699e:	2b18      	cmp	r3, #24
 80069a0:	d13a      	bne.n	8006a18 <HAL_RCC_OscConfig+0x374>
 80069a2:	697b      	ldr	r3, [r7, #20]
 80069a4:	f003 0303 	and.w	r3, r3, #3
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d135      	bne.n	8006a18 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069ac:	4b7b      	ldr	r3, [pc, #492]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <HAL_RCC_OscConfig+0x320>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	69db      	ldr	r3, [r3, #28]
 80069bc:	2b80      	cmp	r3, #128	; 0x80
 80069be:	d001      	beq.n	80069c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e296      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069c4:	f7fc fb18 	bl	8002ff8 <HAL_GetREVID>
 80069c8:	4603      	mov	r3, r0
 80069ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d817      	bhi.n	8006a02 <HAL_RCC_OscConfig+0x35e>
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	2b20      	cmp	r3, #32
 80069d8:	d108      	bne.n	80069ec <HAL_RCC_OscConfig+0x348>
 80069da:	4b70      	ldr	r3, [pc, #448]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80069e2:	4a6e      	ldr	r2, [pc, #440]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 80069e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069e8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80069ea:	e075      	b.n	8006ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80069ec:	4b6b      	ldr	r3, [pc, #428]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6a1b      	ldr	r3, [r3, #32]
 80069f8:	069b      	lsls	r3, r3, #26
 80069fa:	4968      	ldr	r1, [pc, #416]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 80069fc:	4313      	orrs	r3, r2
 80069fe:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a00:	e06a      	b.n	8006ad8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a02:	4b66      	ldr	r3, [pc, #408]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	061b      	lsls	r3, r3, #24
 8006a10:	4962      	ldr	r1, [pc, #392]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a12:	4313      	orrs	r3, r2
 8006a14:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8006a16:	e05f      	b.n	8006ad8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	69db      	ldr	r3, [r3, #28]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d042      	beq.n	8006aa6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8006a20:	4b5e      	ldr	r3, [pc, #376]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a5d      	ldr	r2, [pc, #372]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a2c:	f7fc fab4 	bl	8002f98 <HAL_GetTick>
 8006a30:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a32:	e008      	b.n	8006a46 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006a34:	f7fc fab0 	bl	8002f98 <HAL_GetTick>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3c:	1ad3      	subs	r3, r2, r3
 8006a3e:	2b02      	cmp	r3, #2
 8006a40:	d901      	bls.n	8006a46 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8006a42:	2303      	movs	r3, #3
 8006a44:	e255      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8006a46:	4b55      	ldr	r3, [pc, #340]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d0f0      	beq.n	8006a34 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8006a52:	f7fc fad1 	bl	8002ff8 <HAL_GetREVID>
 8006a56:	4603      	mov	r3, r0
 8006a58:	f241 0203 	movw	r2, #4099	; 0x1003
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d817      	bhi.n	8006a90 <HAL_RCC_OscConfig+0x3ec>
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	6a1b      	ldr	r3, [r3, #32]
 8006a64:	2b20      	cmp	r3, #32
 8006a66:	d108      	bne.n	8006a7a <HAL_RCC_OscConfig+0x3d6>
 8006a68:	4b4c      	ldr	r3, [pc, #304]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8006a70:	4a4a      	ldr	r2, [pc, #296]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a76:	6053      	str	r3, [r2, #4]
 8006a78:	e02e      	b.n	8006ad8 <HAL_RCC_OscConfig+0x434>
 8006a7a:	4b48      	ldr	r3, [pc, #288]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
 8006a86:	069b      	lsls	r3, r3, #26
 8006a88:	4944      	ldr	r1, [pc, #272]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a8a:	4313      	orrs	r3, r2
 8006a8c:	604b      	str	r3, [r1, #4]
 8006a8e:	e023      	b.n	8006ad8 <HAL_RCC_OscConfig+0x434>
 8006a90:	4b42      	ldr	r3, [pc, #264]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	061b      	lsls	r3, r3, #24
 8006a9e:	493f      	ldr	r1, [pc, #252]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	60cb      	str	r3, [r1, #12]
 8006aa4:	e018      	b.n	8006ad8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8006aa6:	4b3d      	ldr	r3, [pc, #244]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	4a3c      	ldr	r2, [pc, #240]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006aac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ab0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ab2:	f7fc fa71 	bl	8002f98 <HAL_GetTick>
 8006ab6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006ab8:	e008      	b.n	8006acc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8006aba:	f7fc fa6d 	bl	8002f98 <HAL_GetTick>
 8006abe:	4602      	mov	r2, r0
 8006ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac2:	1ad3      	subs	r3, r2, r3
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d901      	bls.n	8006acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e212      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8006acc:	4b33      	ldr	r3, [pc, #204]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1f0      	bne.n	8006aba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0308 	and.w	r3, r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d036      	beq.n	8006b52 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	695b      	ldr	r3, [r3, #20]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d019      	beq.n	8006b20 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006aec:	4b2b      	ldr	r3, [pc, #172]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006af0:	4a2a      	ldr	r2, [pc, #168]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006af8:	f7fc fa4e 	bl	8002f98 <HAL_GetTick>
 8006afc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006afe:	e008      	b.n	8006b12 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b00:	f7fc fa4a 	bl	8002f98 <HAL_GetTick>
 8006b04:	4602      	mov	r2, r0
 8006b06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b08:	1ad3      	subs	r3, r2, r3
 8006b0a:	2b02      	cmp	r3, #2
 8006b0c:	d901      	bls.n	8006b12 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8006b0e:	2303      	movs	r3, #3
 8006b10:	e1ef      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8006b12:	4b22      	ldr	r3, [pc, #136]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d0f0      	beq.n	8006b00 <HAL_RCC_OscConfig+0x45c>
 8006b1e:	e018      	b.n	8006b52 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006b20:	4b1e      	ldr	r3, [pc, #120]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b24:	4a1d      	ldr	r2, [pc, #116]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b26:	f023 0301 	bic.w	r3, r3, #1
 8006b2a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b2c:	f7fc fa34 	bl	8002f98 <HAL_GetTick>
 8006b30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b32:	e008      	b.n	8006b46 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006b34:	f7fc fa30 	bl	8002f98 <HAL_GetTick>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d901      	bls.n	8006b46 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8006b42:	2303      	movs	r3, #3
 8006b44:	e1d5      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006b46:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b4a:	f003 0302 	and.w	r3, r3, #2
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1f0      	bne.n	8006b34 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f003 0320 	and.w	r3, r3, #32
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d039      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	699b      	ldr	r3, [r3, #24]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d01c      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006b66:	4b0d      	ldr	r3, [pc, #52]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a0c      	ldr	r2, [pc, #48]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b70:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006b72:	f7fc fa11 	bl	8002f98 <HAL_GetTick>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b78:	e008      	b.n	8006b8c <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006b7a:	f7fc fa0d 	bl	8002f98 <HAL_GetTick>
 8006b7e:	4602      	mov	r2, r0
 8006b80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	2b02      	cmp	r3, #2
 8006b86:	d901      	bls.n	8006b8c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8006b88:	2303      	movs	r3, #3
 8006b8a:	e1b2      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b8c:	4b03      	ldr	r3, [pc, #12]	; (8006b9c <HAL_RCC_OscConfig+0x4f8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d0f0      	beq.n	8006b7a <HAL_RCC_OscConfig+0x4d6>
 8006b98:	e01b      	b.n	8006bd2 <HAL_RCC_OscConfig+0x52e>
 8006b9a:	bf00      	nop
 8006b9c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006ba0:	4b9b      	ldr	r3, [pc, #620]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	4a9a      	ldr	r2, [pc, #616]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006ba6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006baa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8006bac:	f7fc f9f4 	bl	8002f98 <HAL_GetTick>
 8006bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bb2:	e008      	b.n	8006bc6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8006bb4:	f7fc f9f0 	bl	8002f98 <HAL_GetTick>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bbc:	1ad3      	subs	r3, r2, r3
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d901      	bls.n	8006bc6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8006bc2:	2303      	movs	r3, #3
 8006bc4:	e195      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006bc6:	4b92      	ldr	r3, [pc, #584]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d1f0      	bne.n	8006bb4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 8081 	beq.w	8006ce2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006be0:	4b8c      	ldr	r3, [pc, #560]	; (8006e14 <HAL_RCC_OscConfig+0x770>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a8b      	ldr	r2, [pc, #556]	; (8006e14 <HAL_RCC_OscConfig+0x770>)
 8006be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006bec:	f7fc f9d4 	bl	8002f98 <HAL_GetTick>
 8006bf0:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006bf2:	e008      	b.n	8006c06 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006bf4:	f7fc f9d0 	bl	8002f98 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	2b64      	cmp	r3, #100	; 0x64
 8006c00:	d901      	bls.n	8006c06 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e175      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006c06:	4b83      	ldr	r3, [pc, #524]	; (8006e14 <HAL_RCC_OscConfig+0x770>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d0f0      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d106      	bne.n	8006c28 <HAL_RCC_OscConfig+0x584>
 8006c1a:	4b7d      	ldr	r3, [pc, #500]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c1e:	4a7c      	ldr	r2, [pc, #496]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c20:	f043 0301 	orr.w	r3, r3, #1
 8006c24:	6713      	str	r3, [r2, #112]	; 0x70
 8006c26:	e02d      	b.n	8006c84 <HAL_RCC_OscConfig+0x5e0>
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10c      	bne.n	8006c4a <HAL_RCC_OscConfig+0x5a6>
 8006c30:	4b77      	ldr	r3, [pc, #476]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c34:	4a76      	ldr	r2, [pc, #472]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c36:	f023 0301 	bic.w	r3, r3, #1
 8006c3a:	6713      	str	r3, [r2, #112]	; 0x70
 8006c3c:	4b74      	ldr	r3, [pc, #464]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	4a73      	ldr	r2, [pc, #460]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c42:	f023 0304 	bic.w	r3, r3, #4
 8006c46:	6713      	str	r3, [r2, #112]	; 0x70
 8006c48:	e01c      	b.n	8006c84 <HAL_RCC_OscConfig+0x5e0>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	689b      	ldr	r3, [r3, #8]
 8006c4e:	2b05      	cmp	r3, #5
 8006c50:	d10c      	bne.n	8006c6c <HAL_RCC_OscConfig+0x5c8>
 8006c52:	4b6f      	ldr	r3, [pc, #444]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c56:	4a6e      	ldr	r2, [pc, #440]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c58:	f043 0304 	orr.w	r3, r3, #4
 8006c5c:	6713      	str	r3, [r2, #112]	; 0x70
 8006c5e:	4b6c      	ldr	r3, [pc, #432]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c62:	4a6b      	ldr	r2, [pc, #428]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c64:	f043 0301 	orr.w	r3, r3, #1
 8006c68:	6713      	str	r3, [r2, #112]	; 0x70
 8006c6a:	e00b      	b.n	8006c84 <HAL_RCC_OscConfig+0x5e0>
 8006c6c:	4b68      	ldr	r3, [pc, #416]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c70:	4a67      	ldr	r2, [pc, #412]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c72:	f023 0301 	bic.w	r3, r3, #1
 8006c76:	6713      	str	r3, [r2, #112]	; 0x70
 8006c78:	4b65      	ldr	r3, [pc, #404]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c7c:	4a64      	ldr	r2, [pc, #400]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006c7e:	f023 0304 	bic.w	r3, r3, #4
 8006c82:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d015      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c8c:	f7fc f984 	bl	8002f98 <HAL_GetTick>
 8006c90:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006c92:	e00a      	b.n	8006caa <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c94:	f7fc f980 	bl	8002f98 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d901      	bls.n	8006caa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8006ca6:	2303      	movs	r3, #3
 8006ca8:	e123      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006caa:	4b59      	ldr	r3, [pc, #356]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d0ee      	beq.n	8006c94 <HAL_RCC_OscConfig+0x5f0>
 8006cb6:	e014      	b.n	8006ce2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006cb8:	f7fc f96e 	bl	8002f98 <HAL_GetTick>
 8006cbc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cbe:	e00a      	b.n	8006cd6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cc0:	f7fc f96a 	bl	8002f98 <HAL_GetTick>
 8006cc4:	4602      	mov	r2, r0
 8006cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc8:	1ad3      	subs	r3, r2, r3
 8006cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cce:	4293      	cmp	r3, r2
 8006cd0:	d901      	bls.n	8006cd6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8006cd2:	2303      	movs	r3, #3
 8006cd4:	e10d      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006cd6:	4b4e      	ldr	r3, [pc, #312]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1ee      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	f000 8102 	beq.w	8006ef0 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8006cec:	4b48      	ldr	r3, [pc, #288]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006cee:	691b      	ldr	r3, [r3, #16]
 8006cf0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006cf4:	2b18      	cmp	r3, #24
 8006cf6:	f000 80bd 	beq.w	8006e74 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	2b02      	cmp	r3, #2
 8006d00:	f040 809e 	bne.w	8006e40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006d04:	4b42      	ldr	r3, [pc, #264]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	4a41      	ldr	r2, [pc, #260]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d10:	f7fc f942 	bl	8002f98 <HAL_GetTick>
 8006d14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d16:	e008      	b.n	8006d2a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d18:	f7fc f93e 	bl	8002f98 <HAL_GetTick>
 8006d1c:	4602      	mov	r2, r0
 8006d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d20:	1ad3      	subs	r3, r2, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	d901      	bls.n	8006d2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8006d26:	2303      	movs	r3, #3
 8006d28:	e0e3      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006d2a:	4b39      	ldr	r3, [pc, #228]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d1f0      	bne.n	8006d18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006d36:	4b36      	ldr	r3, [pc, #216]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006d3a:	4b37      	ldr	r3, [pc, #220]	; (8006e18 <HAL_RCC_OscConfig+0x774>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	687a      	ldr	r2, [r7, #4]
 8006d40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8006d42:	687a      	ldr	r2, [r7, #4]
 8006d44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8006d46:	0112      	lsls	r2, r2, #4
 8006d48:	430a      	orrs	r2, r1
 8006d4a:	4931      	ldr	r1, [pc, #196]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	628b      	str	r3, [r1, #40]	; 0x28
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d54:	3b01      	subs	r3, #1
 8006d56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	025b      	lsls	r3, r3, #9
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	431a      	orrs	r2, r3
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d6a:	3b01      	subs	r3, #1
 8006d6c:	041b      	lsls	r3, r3, #16
 8006d6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006d72:	431a      	orrs	r2, r3
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	061b      	lsls	r3, r3, #24
 8006d7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006d80:	4923      	ldr	r1, [pc, #140]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d82:	4313      	orrs	r3, r2
 8006d84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 8006d86:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d8a:	4a21      	ldr	r2, [pc, #132]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d8c:	f023 0301 	bic.w	r3, r3, #1
 8006d90:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8006d92:	4b1f      	ldr	r3, [pc, #124]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006d94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006d96:	4b21      	ldr	r3, [pc, #132]	; (8006e1c <HAL_RCC_OscConfig+0x778>)
 8006d98:	4013      	ands	r3, r2
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006d9e:	00d2      	lsls	r2, r2, #3
 8006da0:	491b      	ldr	r1, [pc, #108]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006da2:	4313      	orrs	r3, r2
 8006da4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8006da6:	4b1a      	ldr	r3, [pc, #104]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006daa:	f023 020c 	bic.w	r2, r3, #12
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006db2:	4917      	ldr	r1, [pc, #92]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8006db8:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dbc:	f023 0202 	bic.w	r2, r3, #2
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc4:	4912      	ldr	r1, [pc, #72]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006dca:	4b11      	ldr	r3, [pc, #68]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dce:	4a10      	ldr	r2, [pc, #64]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006dd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006dd6:	4b0e      	ldr	r3, [pc, #56]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dda:	4a0d      	ldr	r2, [pc, #52]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006ddc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006de0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006de2:	4b0b      	ldr	r3, [pc, #44]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de6:	4a0a      	ldr	r2, [pc, #40]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006de8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006dec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 8006dee:	4b08      	ldr	r3, [pc, #32]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006df2:	4a07      	ldr	r2, [pc, #28]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006df4:	f043 0301 	orr.w	r3, r3, #1
 8006df8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006dfa:	4b05      	ldr	r3, [pc, #20]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a04      	ldr	r2, [pc, #16]	; (8006e10 <HAL_RCC_OscConfig+0x76c>)
 8006e00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006e04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e06:	f7fc f8c7 	bl	8002f98 <HAL_GetTick>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e0c:	e011      	b.n	8006e32 <HAL_RCC_OscConfig+0x78e>
 8006e0e:	bf00      	nop
 8006e10:	58024400 	.word	0x58024400
 8006e14:	58024800 	.word	0x58024800
 8006e18:	fffffc0c 	.word	0xfffffc0c
 8006e1c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e20:	f7fc f8ba 	bl	8002f98 <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	2b02      	cmp	r3, #2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e05f      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006e32:	4b32      	ldr	r3, [pc, #200]	; (8006efc <HAL_RCC_OscConfig+0x858>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d0f0      	beq.n	8006e20 <HAL_RCC_OscConfig+0x77c>
 8006e3e:	e057      	b.n	8006ef0 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e40:	4b2e      	ldr	r3, [pc, #184]	; (8006efc <HAL_RCC_OscConfig+0x858>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a2d      	ldr	r2, [pc, #180]	; (8006efc <HAL_RCC_OscConfig+0x858>)
 8006e46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e4c:	f7fc f8a4 	bl	8002f98 <HAL_GetTick>
 8006e50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e52:	e008      	b.n	8006e66 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006e54:	f7fc f8a0 	bl	8002f98 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	2b02      	cmp	r3, #2
 8006e60:	d901      	bls.n	8006e66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8006e62:	2303      	movs	r3, #3
 8006e64:	e045      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8006e66:	4b25      	ldr	r3, [pc, #148]	; (8006efc <HAL_RCC_OscConfig+0x858>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1f0      	bne.n	8006e54 <HAL_RCC_OscConfig+0x7b0>
 8006e72:	e03d      	b.n	8006ef0 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8006e74:	4b21      	ldr	r3, [pc, #132]	; (8006efc <HAL_RCC_OscConfig+0x858>)
 8006e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8006e7a:	4b20      	ldr	r3, [pc, #128]	; (8006efc <HAL_RCC_OscConfig+0x858>)
 8006e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e7e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d031      	beq.n	8006eec <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f003 0203 	and.w	r2, r3, #3
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006e92:	429a      	cmp	r2, r3
 8006e94:	d12a      	bne.n	8006eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006e96:	693b      	ldr	r3, [r7, #16]
 8006e98:	091b      	lsrs	r3, r3, #4
 8006e9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006ea2:	429a      	cmp	r2, r3
 8006ea4:	d122      	bne.n	8006eec <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d11a      	bne.n	8006eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	0a5b      	lsrs	r3, r3, #9
 8006eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ec2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006ec4:	429a      	cmp	r2, r3
 8006ec6:	d111      	bne.n	8006eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	0c1b      	lsrs	r3, r3, #16
 8006ecc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ed4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d108      	bne.n	8006eec <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	0e1b      	lsrs	r3, r3, #24
 8006ede:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ee6:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d001      	beq.n	8006ef0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e000      	b.n	8006ef2 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 8006ef0:	2300      	movs	r3, #0
}
 8006ef2:	4618      	mov	r0, r3
 8006ef4:	3730      	adds	r7, #48	; 0x30
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	58024400 	.word	0x58024400

08006f00 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b086      	sub	sp, #24
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d101      	bne.n	8006f14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f10:	2301      	movs	r3, #1
 8006f12:	e19c      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006f14:	4b8a      	ldr	r3, [pc, #552]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f003 030f 	and.w	r3, r3, #15
 8006f1c:	683a      	ldr	r2, [r7, #0]
 8006f1e:	429a      	cmp	r2, r3
 8006f20:	d910      	bls.n	8006f44 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f22:	4b87      	ldr	r3, [pc, #540]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	f023 020f 	bic.w	r2, r3, #15
 8006f2a:	4985      	ldr	r1, [pc, #532]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f32:	4b83      	ldr	r3, [pc, #524]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 030f 	and.w	r3, r3, #15
 8006f3a:	683a      	ldr	r2, [r7, #0]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d001      	beq.n	8006f44 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006f40:	2301      	movs	r3, #1
 8006f42:	e184      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f003 0304 	and.w	r3, r3, #4
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d010      	beq.n	8006f72 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	4b7b      	ldr	r3, [pc, #492]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d908      	bls.n	8006f72 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8006f60:	4b78      	ldr	r3, [pc, #480]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	691b      	ldr	r3, [r3, #16]
 8006f6c:	4975      	ldr	r1, [pc, #468]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d010      	beq.n	8006fa0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695a      	ldr	r2, [r3, #20]
 8006f82:	4b70      	ldr	r3, [pc, #448]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006f84:	69db      	ldr	r3, [r3, #28]
 8006f86:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d908      	bls.n	8006fa0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8006f8e:	4b6d      	ldr	r3, [pc, #436]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	496a      	ldr	r1, [pc, #424]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0310 	and.w	r3, r3, #16
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d010      	beq.n	8006fce <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	699a      	ldr	r2, [r3, #24]
 8006fb0:	4b64      	ldr	r3, [pc, #400]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006fb2:	69db      	ldr	r3, [r3, #28]
 8006fb4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d908      	bls.n	8006fce <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8006fbc:	4b61      	ldr	r3, [pc, #388]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006fbe:	69db      	ldr	r3, [r3, #28]
 8006fc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	699b      	ldr	r3, [r3, #24]
 8006fc8:	495e      	ldr	r1, [pc, #376]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006fca:	4313      	orrs	r3, r2
 8006fcc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f003 0320 	and.w	r3, r3, #32
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d010      	beq.n	8006ffc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	69da      	ldr	r2, [r3, #28]
 8006fde:	4b59      	ldr	r3, [pc, #356]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006fe6:	429a      	cmp	r2, r3
 8006fe8:	d908      	bls.n	8006ffc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8006fea:	4b56      	ldr	r3, [pc, #344]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4953      	ldr	r1, [pc, #332]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 0302 	and.w	r3, r3, #2
 8007004:	2b00      	cmp	r3, #0
 8007006:	d010      	beq.n	800702a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	f003 030f 	and.w	r3, r3, #15
 8007014:	429a      	cmp	r2, r3
 8007016:	d908      	bls.n	800702a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007018:	4b4a      	ldr	r3, [pc, #296]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 800701a:	699b      	ldr	r3, [r3, #24]
 800701c:	f023 020f 	bic.w	r2, r3, #15
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	68db      	ldr	r3, [r3, #12]
 8007024:	4947      	ldr	r1, [pc, #284]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007026:	4313      	orrs	r3, r2
 8007028:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d055      	beq.n	80070e2 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8007036:	4b43      	ldr	r3, [pc, #268]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	4940      	ldr	r1, [pc, #256]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007044:	4313      	orrs	r3, r2
 8007046:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	685b      	ldr	r3, [r3, #4]
 800704c:	2b02      	cmp	r3, #2
 800704e:	d107      	bne.n	8007060 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007050:	4b3c      	ldr	r3, [pc, #240]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d121      	bne.n	80070a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	e0f6      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685b      	ldr	r3, [r3, #4]
 8007064:	2b03      	cmp	r3, #3
 8007066:	d107      	bne.n	8007078 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007068:	4b36      	ldr	r3, [pc, #216]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007070:	2b00      	cmp	r3, #0
 8007072:	d115      	bne.n	80070a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e0ea      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	685b      	ldr	r3, [r3, #4]
 800707c:	2b01      	cmp	r3, #1
 800707e:	d107      	bne.n	8007090 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007080:	4b30      	ldr	r3, [pc, #192]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007088:	2b00      	cmp	r3, #0
 800708a:	d109      	bne.n	80070a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e0de      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007090:	4b2c      	ldr	r3, [pc, #176]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0304 	and.w	r3, r3, #4
 8007098:	2b00      	cmp	r3, #0
 800709a:	d101      	bne.n	80070a0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	e0d6      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80070a0:	4b28      	ldr	r3, [pc, #160]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 80070a2:	691b      	ldr	r3, [r3, #16]
 80070a4:	f023 0207 	bic.w	r2, r3, #7
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	4925      	ldr	r1, [pc, #148]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 80070ae:	4313      	orrs	r3, r2
 80070b0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070b2:	f7fb ff71 	bl	8002f98 <HAL_GetTick>
 80070b6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070b8:	e00a      	b.n	80070d0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80070ba:	f7fb ff6d 	bl	8002f98 <HAL_GetTick>
 80070be:	4602      	mov	r2, r0
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1ad3      	subs	r3, r2, r3
 80070c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80070c8:	4293      	cmp	r3, r2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e0be      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80070d0:	4b1c      	ldr	r3, [pc, #112]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 80070d2:	691b      	ldr	r3, [r3, #16]
 80070d4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	685b      	ldr	r3, [r3, #4]
 80070dc:	00db      	lsls	r3, r3, #3
 80070de:	429a      	cmp	r2, r3
 80070e0:	d1eb      	bne.n	80070ba <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d010      	beq.n	8007110 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	4b14      	ldr	r3, [pc, #80]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 80070f4:	699b      	ldr	r3, [r3, #24]
 80070f6:	f003 030f 	and.w	r3, r3, #15
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d208      	bcs.n	8007110 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070fe:	4b11      	ldr	r3, [pc, #68]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 8007100:	699b      	ldr	r3, [r3, #24]
 8007102:	f023 020f 	bic.w	r2, r3, #15
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	68db      	ldr	r3, [r3, #12]
 800710a:	490e      	ldr	r1, [pc, #56]	; (8007144 <HAL_RCC_ClockConfig+0x244>)
 800710c:	4313      	orrs	r3, r2
 800710e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f003 030f 	and.w	r3, r3, #15
 8007118:	683a      	ldr	r2, [r7, #0]
 800711a:	429a      	cmp	r2, r3
 800711c:	d214      	bcs.n	8007148 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800711e:	4b08      	ldr	r3, [pc, #32]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f023 020f 	bic.w	r2, r3, #15
 8007126:	4906      	ldr	r1, [pc, #24]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	4313      	orrs	r3, r2
 800712c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800712e:	4b04      	ldr	r3, [pc, #16]	; (8007140 <HAL_RCC_ClockConfig+0x240>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 030f 	and.w	r3, r3, #15
 8007136:	683a      	ldr	r2, [r7, #0]
 8007138:	429a      	cmp	r2, r3
 800713a:	d005      	beq.n	8007148 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	e086      	b.n	800724e <HAL_RCC_ClockConfig+0x34e>
 8007140:	52002000 	.word	0x52002000
 8007144:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d010      	beq.n	8007176 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691a      	ldr	r2, [r3, #16]
 8007158:	4b3f      	ldr	r3, [pc, #252]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007160:	429a      	cmp	r2, r3
 8007162:	d208      	bcs.n	8007176 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8007164:	4b3c      	ldr	r3, [pc, #240]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 8007166:	699b      	ldr	r3, [r3, #24]
 8007168:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	691b      	ldr	r3, [r3, #16]
 8007170:	4939      	ldr	r1, [pc, #228]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 8007172:	4313      	orrs	r3, r2
 8007174:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f003 0308 	and.w	r3, r3, #8
 800717e:	2b00      	cmp	r3, #0
 8007180:	d010      	beq.n	80071a4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	695a      	ldr	r2, [r3, #20]
 8007186:	4b34      	ldr	r3, [pc, #208]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 8007188:	69db      	ldr	r3, [r3, #28]
 800718a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800718e:	429a      	cmp	r2, r3
 8007190:	d208      	bcs.n	80071a4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8007192:	4b31      	ldr	r3, [pc, #196]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	695b      	ldr	r3, [r3, #20]
 800719e:	492e      	ldr	r1, [pc, #184]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071a0:	4313      	orrs	r3, r2
 80071a2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0310 	and.w	r3, r3, #16
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d010      	beq.n	80071d2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	699a      	ldr	r2, [r3, #24]
 80071b4:	4b28      	ldr	r3, [pc, #160]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80071bc:	429a      	cmp	r2, r3
 80071be:	d208      	bcs.n	80071d2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80071c0:	4b25      	ldr	r3, [pc, #148]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	4922      	ldr	r1, [pc, #136]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071ce:	4313      	orrs	r3, r2
 80071d0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 0320 	and.w	r3, r3, #32
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d010      	beq.n	8007200 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	69da      	ldr	r2, [r3, #28]
 80071e2:	4b1d      	ldr	r3, [pc, #116]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071e4:	6a1b      	ldr	r3, [r3, #32]
 80071e6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d208      	bcs.n	8007200 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80071ee:	4b1a      	ldr	r3, [pc, #104]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071f0:	6a1b      	ldr	r3, [r3, #32]
 80071f2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	69db      	ldr	r3, [r3, #28]
 80071fa:	4917      	ldr	r1, [pc, #92]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 80071fc:	4313      	orrs	r3, r2
 80071fe:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007200:	f000 f834 	bl	800726c <HAL_RCC_GetSysClockFreq>
 8007204:	4602      	mov	r2, r0
 8007206:	4b14      	ldr	r3, [pc, #80]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	0a1b      	lsrs	r3, r3, #8
 800720c:	f003 030f 	and.w	r3, r3, #15
 8007210:	4912      	ldr	r1, [pc, #72]	; (800725c <HAL_RCC_ClockConfig+0x35c>)
 8007212:	5ccb      	ldrb	r3, [r1, r3]
 8007214:	f003 031f 	and.w	r3, r3, #31
 8007218:	fa22 f303 	lsr.w	r3, r2, r3
 800721c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800721e:	4b0e      	ldr	r3, [pc, #56]	; (8007258 <HAL_RCC_ClockConfig+0x358>)
 8007220:	699b      	ldr	r3, [r3, #24]
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	4a0d      	ldr	r2, [pc, #52]	; (800725c <HAL_RCC_ClockConfig+0x35c>)
 8007228:	5cd3      	ldrb	r3, [r2, r3]
 800722a:	f003 031f 	and.w	r3, r3, #31
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	fa22 f303 	lsr.w	r3, r2, r3
 8007234:	4a0a      	ldr	r2, [pc, #40]	; (8007260 <HAL_RCC_ClockConfig+0x360>)
 8007236:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007238:	4a0a      	ldr	r2, [pc, #40]	; (8007264 <HAL_RCC_ClockConfig+0x364>)
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800723e:	4b0a      	ldr	r3, [pc, #40]	; (8007268 <HAL_RCC_ClockConfig+0x368>)
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	4618      	mov	r0, r3
 8007244:	f7fb fe5e 	bl	8002f04 <HAL_InitTick>
 8007248:	4603      	mov	r3, r0
 800724a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800724c:	7bfb      	ldrb	r3, [r7, #15]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
 8007256:	bf00      	nop
 8007258:	58024400 	.word	0x58024400
 800725c:	0800bee8 	.word	0x0800bee8
 8007260:	24000004 	.word	0x24000004
 8007264:	24000000 	.word	0x24000000
 8007268:	24000018 	.word	0x24000018

0800726c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800726c:	b480      	push	{r7}
 800726e:	b089      	sub	sp, #36	; 0x24
 8007270:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007272:	4bb3      	ldr	r3, [pc, #716]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007274:	691b      	ldr	r3, [r3, #16]
 8007276:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800727a:	2b18      	cmp	r3, #24
 800727c:	f200 8155 	bhi.w	800752a <HAL_RCC_GetSysClockFreq+0x2be>
 8007280:	a201      	add	r2, pc, #4	; (adr r2, 8007288 <HAL_RCC_GetSysClockFreq+0x1c>)
 8007282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007286:	bf00      	nop
 8007288:	080072ed 	.word	0x080072ed
 800728c:	0800752b 	.word	0x0800752b
 8007290:	0800752b 	.word	0x0800752b
 8007294:	0800752b 	.word	0x0800752b
 8007298:	0800752b 	.word	0x0800752b
 800729c:	0800752b 	.word	0x0800752b
 80072a0:	0800752b 	.word	0x0800752b
 80072a4:	0800752b 	.word	0x0800752b
 80072a8:	08007313 	.word	0x08007313
 80072ac:	0800752b 	.word	0x0800752b
 80072b0:	0800752b 	.word	0x0800752b
 80072b4:	0800752b 	.word	0x0800752b
 80072b8:	0800752b 	.word	0x0800752b
 80072bc:	0800752b 	.word	0x0800752b
 80072c0:	0800752b 	.word	0x0800752b
 80072c4:	0800752b 	.word	0x0800752b
 80072c8:	08007319 	.word	0x08007319
 80072cc:	0800752b 	.word	0x0800752b
 80072d0:	0800752b 	.word	0x0800752b
 80072d4:	0800752b 	.word	0x0800752b
 80072d8:	0800752b 	.word	0x0800752b
 80072dc:	0800752b 	.word	0x0800752b
 80072e0:	0800752b 	.word	0x0800752b
 80072e4:	0800752b 	.word	0x0800752b
 80072e8:	0800731f 	.word	0x0800731f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80072ec:	4b94      	ldr	r3, [pc, #592]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d009      	beq.n	800730c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80072f8:	4b91      	ldr	r3, [pc, #580]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	08db      	lsrs	r3, r3, #3
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	4a90      	ldr	r2, [pc, #576]	; (8007544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007304:	fa22 f303 	lsr.w	r3, r2, r3
 8007308:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800730a:	e111      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800730c:	4b8d      	ldr	r3, [pc, #564]	; (8007544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800730e:	61bb      	str	r3, [r7, #24]
    break;
 8007310:	e10e      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8007312:	4b8d      	ldr	r3, [pc, #564]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8007314:	61bb      	str	r3, [r7, #24]
    break;
 8007316:	e10b      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8007318:	4b8c      	ldr	r3, [pc, #560]	; (800754c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800731a:	61bb      	str	r3, [r7, #24]
    break;
 800731c:	e108      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800731e:	4b88      	ldr	r3, [pc, #544]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007322:	f003 0303 	and.w	r3, r3, #3
 8007326:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8007328:	4b85      	ldr	r3, [pc, #532]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800732a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732c:	091b      	lsrs	r3, r3, #4
 800732e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007332:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8007334:	4b82      	ldr	r3, [pc, #520]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007338:	f003 0301 	and.w	r3, r3, #1
 800733c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800733e:	4b80      	ldr	r3, [pc, #512]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007340:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007342:	08db      	lsrs	r3, r3, #3
 8007344:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	ee07 3a90 	vmov	s15, r3
 8007352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007356:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800735a:	693b      	ldr	r3, [r7, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	f000 80e1 	beq.w	8007524 <HAL_RCC_GetSysClockFreq+0x2b8>
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2b02      	cmp	r3, #2
 8007366:	f000 8083 	beq.w	8007470 <HAL_RCC_GetSysClockFreq+0x204>
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	2b02      	cmp	r3, #2
 800736e:	f200 80a1 	bhi.w	80074b4 <HAL_RCC_GetSysClockFreq+0x248>
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d003      	beq.n	8007380 <HAL_RCC_GetSysClockFreq+0x114>
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2b01      	cmp	r3, #1
 800737c:	d056      	beq.n	800742c <HAL_RCC_GetSysClockFreq+0x1c0>
 800737e:	e099      	b.n	80074b4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007380:	4b6f      	ldr	r3, [pc, #444]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 0320 	and.w	r3, r3, #32
 8007388:	2b00      	cmp	r3, #0
 800738a:	d02d      	beq.n	80073e8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800738c:	4b6c      	ldr	r3, [pc, #432]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	08db      	lsrs	r3, r3, #3
 8007392:	f003 0303 	and.w	r3, r3, #3
 8007396:	4a6b      	ldr	r2, [pc, #428]	; (8007544 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8007398:	fa22 f303 	lsr.w	r3, r2, r3
 800739c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	ee07 3a90 	vmov	s15, r3
 80073a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	ee07 3a90 	vmov	s15, r3
 80073ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073b6:	4b62      	ldr	r3, [pc, #392]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80073be:	ee07 3a90 	vmov	s15, r3
 80073c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80073c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80073ca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8007550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80073ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80073d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80073d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80073da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80073de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073e2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80073e6:	e087      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	ee07 3a90 	vmov	s15, r3
 80073ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80073f2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8007554 <HAL_RCC_GetSysClockFreq+0x2e8>
 80073f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80073fa:	4b51      	ldr	r3, [pc, #324]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80073fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007402:	ee07 3a90 	vmov	s15, r3
 8007406:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800740a:	ed97 6a02 	vldr	s12, [r7, #8]
 800740e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8007550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007412:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007416:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800741a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800741e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007422:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007426:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800742a:	e065      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	ee07 3a90 	vmov	s15, r3
 8007432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007436:	eddf 6a48 	vldr	s13, [pc, #288]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2ec>
 800743a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800743e:	4b40      	ldr	r3, [pc, #256]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007442:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007446:	ee07 3a90 	vmov	s15, r3
 800744a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800744e:	ed97 6a02 	vldr	s12, [r7, #8]
 8007452:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8007550 <HAL_RCC_GetSysClockFreq+0x2e4>
 8007456:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800745a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800745e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007462:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800746a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800746e:	e043      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	ee07 3a90 	vmov	s15, r3
 8007476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800747a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800755c <HAL_RCC_GetSysClockFreq+0x2f0>
 800747e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007482:	4b2f      	ldr	r3, [pc, #188]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8007484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007486:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800748a:	ee07 3a90 	vmov	s15, r3
 800748e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007492:	ed97 6a02 	vldr	s12, [r7, #8]
 8007496:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8007550 <HAL_RCC_GetSysClockFreq+0x2e4>
 800749a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800749e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074b2:	e021      	b.n	80074f8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80074b4:	693b      	ldr	r3, [r7, #16]
 80074b6:	ee07 3a90 	vmov	s15, r3
 80074ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80074be:	eddf 6a26 	vldr	s13, [pc, #152]	; 8007558 <HAL_RCC_GetSysClockFreq+0x2ec>
 80074c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80074c6:	4b1e      	ldr	r3, [pc, #120]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80074ce:	ee07 3a90 	vmov	s15, r3
 80074d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80074d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80074da:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8007550 <HAL_RCC_GetSysClockFreq+0x2e4>
 80074de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80074e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80074e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80074ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80074ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80074f6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80074f8:	4b11      	ldr	r3, [pc, #68]	; (8007540 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80074fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074fc:	0a5b      	lsrs	r3, r3, #9
 80074fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007502:	3301      	adds	r3, #1
 8007504:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	ee07 3a90 	vmov	s15, r3
 800750c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007510:	edd7 6a07 	vldr	s13, [r7, #28]
 8007514:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007518:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800751c:	ee17 3a90 	vmov	r3, s15
 8007520:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8007522:	e005      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8007524:	2300      	movs	r3, #0
 8007526:	61bb      	str	r3, [r7, #24]
    break;
 8007528:	e002      	b.n	8007530 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800752a:	4b07      	ldr	r3, [pc, #28]	; (8007548 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800752c:	61bb      	str	r3, [r7, #24]
    break;
 800752e:	bf00      	nop
  }

  return sysclockfreq;
 8007530:	69bb      	ldr	r3, [r7, #24]
}
 8007532:	4618      	mov	r0, r3
 8007534:	3724      	adds	r7, #36	; 0x24
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr
 800753e:	bf00      	nop
 8007540:	58024400 	.word	0x58024400
 8007544:	03d09000 	.word	0x03d09000
 8007548:	003d0900 	.word	0x003d0900
 800754c:	007a1200 	.word	0x007a1200
 8007550:	46000000 	.word	0x46000000
 8007554:	4c742400 	.word	0x4c742400
 8007558:	4a742400 	.word	0x4a742400
 800755c:	4af42400 	.word	0x4af42400

08007560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8007566:	f7ff fe81 	bl	800726c <HAL_RCC_GetSysClockFreq>
 800756a:	4602      	mov	r2, r0
 800756c:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <HAL_RCC_GetHCLKFreq+0x50>)
 800756e:	699b      	ldr	r3, [r3, #24]
 8007570:	0a1b      	lsrs	r3, r3, #8
 8007572:	f003 030f 	and.w	r3, r3, #15
 8007576:	490f      	ldr	r1, [pc, #60]	; (80075b4 <HAL_RCC_GetHCLKFreq+0x54>)
 8007578:	5ccb      	ldrb	r3, [r1, r3]
 800757a:	f003 031f 	and.w	r3, r3, #31
 800757e:	fa22 f303 	lsr.w	r3, r2, r3
 8007582:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007584:	4b0a      	ldr	r3, [pc, #40]	; (80075b0 <HAL_RCC_GetHCLKFreq+0x50>)
 8007586:	699b      	ldr	r3, [r3, #24]
 8007588:	f003 030f 	and.w	r3, r3, #15
 800758c:	4a09      	ldr	r2, [pc, #36]	; (80075b4 <HAL_RCC_GetHCLKFreq+0x54>)
 800758e:	5cd3      	ldrb	r3, [r2, r3]
 8007590:	f003 031f 	and.w	r3, r3, #31
 8007594:	687a      	ldr	r2, [r7, #4]
 8007596:	fa22 f303 	lsr.w	r3, r2, r3
 800759a:	4a07      	ldr	r2, [pc, #28]	; (80075b8 <HAL_RCC_GetHCLKFreq+0x58>)
 800759c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800759e:	4a07      	ldr	r2, [pc, #28]	; (80075bc <HAL_RCC_GetHCLKFreq+0x5c>)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80075a4:	4b04      	ldr	r3, [pc, #16]	; (80075b8 <HAL_RCC_GetHCLKFreq+0x58>)
 80075a6:	681b      	ldr	r3, [r3, #0]
}
 80075a8:	4618      	mov	r0, r3
 80075aa:	3708      	adds	r7, #8
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bd80      	pop	{r7, pc}
 80075b0:	58024400 	.word	0x58024400
 80075b4:	0800bee8 	.word	0x0800bee8
 80075b8:	24000004 	.word	0x24000004
 80075bc:	24000000 	.word	0x24000000

080075c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80075c4:	f7ff ffcc 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 80075c8:	4602      	mov	r2, r0
 80075ca:	4b06      	ldr	r3, [pc, #24]	; (80075e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80075cc:	69db      	ldr	r3, [r3, #28]
 80075ce:	091b      	lsrs	r3, r3, #4
 80075d0:	f003 0307 	and.w	r3, r3, #7
 80075d4:	4904      	ldr	r1, [pc, #16]	; (80075e8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80075d6:	5ccb      	ldrb	r3, [r1, r3]
 80075d8:	f003 031f 	and.w	r3, r3, #31
 80075dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	bd80      	pop	{r7, pc}
 80075e4:	58024400 	.word	0x58024400
 80075e8:	0800bee8 	.word	0x0800bee8

080075ec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80075f0:	f7ff ffb6 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 80075f4:	4602      	mov	r2, r0
 80075f6:	4b06      	ldr	r3, [pc, #24]	; (8007610 <HAL_RCC_GetPCLK2Freq+0x24>)
 80075f8:	69db      	ldr	r3, [r3, #28]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	4904      	ldr	r1, [pc, #16]	; (8007614 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007602:	5ccb      	ldrb	r3, [r1, r3]
 8007604:	f003 031f 	and.w	r3, r3, #31
 8007608:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800760c:	4618      	mov	r0, r3
 800760e:	bd80      	pop	{r7, pc}
 8007610:	58024400 	.word	0x58024400
 8007614:	0800bee8 	.word	0x0800bee8

08007618 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b086      	sub	sp, #24
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007620:	2300      	movs	r3, #0
 8007622:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007624:	2300      	movs	r3, #0
 8007626:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007630:	2b00      	cmp	r3, #0
 8007632:	d03f      	beq.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007638:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800763c:	d02a      	beq.n	8007694 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800763e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007642:	d824      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007644:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007648:	d018      	beq.n	800767c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800764a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800764e:	d81e      	bhi.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d003      	beq.n	800765c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007654:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007658:	d007      	beq.n	800766a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800765a:	e018      	b.n	800768e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800765c:	4ba3      	ldr	r3, [pc, #652]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800765e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007660:	4aa2      	ldr	r2, [pc, #648]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007662:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007666:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8007668:	e015      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	3304      	adds	r3, #4
 800766e:	2102      	movs	r1, #2
 8007670:	4618      	mov	r0, r3
 8007672:	f001 f9d5 	bl	8008a20 <RCCEx_PLL2_Config>
 8007676:	4603      	mov	r3, r0
 8007678:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800767a:	e00c      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	3324      	adds	r3, #36	; 0x24
 8007680:	2102      	movs	r1, #2
 8007682:	4618      	mov	r0, r3
 8007684:	f001 fa7e 	bl	8008b84 <RCCEx_PLL3_Config>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800768c:	e003      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800768e:	2301      	movs	r3, #1
 8007690:	75fb      	strb	r3, [r7, #23]
      break;
 8007692:	e000      	b.n	8007696 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8007694:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007696:	7dfb      	ldrb	r3, [r7, #23]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d109      	bne.n	80076b0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800769c:	4b93      	ldr	r3, [pc, #588]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800769e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80076a0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80076a8:	4990      	ldr	r1, [pc, #576]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076aa:	4313      	orrs	r3, r2
 80076ac:	650b      	str	r3, [r1, #80]	; 0x50
 80076ae:	e001      	b.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b0:	7dfb      	ldrb	r3, [r7, #23]
 80076b2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d03d      	beq.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076c4:	2b04      	cmp	r3, #4
 80076c6:	d826      	bhi.n	8007716 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80076c8:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 80076ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ce:	bf00      	nop
 80076d0:	080076e5 	.word	0x080076e5
 80076d4:	080076f3 	.word	0x080076f3
 80076d8:	08007705 	.word	0x08007705
 80076dc:	0800771d 	.word	0x0800771d
 80076e0:	0800771d 	.word	0x0800771d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076e4:	4b81      	ldr	r3, [pc, #516]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076e8:	4a80      	ldr	r2, [pc, #512]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80076ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80076f0:	e015      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	3304      	adds	r3, #4
 80076f6:	2100      	movs	r1, #0
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 f991 	bl	8008a20 <RCCEx_PLL2_Config>
 80076fe:	4603      	mov	r3, r0
 8007700:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007702:	e00c      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	3324      	adds	r3, #36	; 0x24
 8007708:	2100      	movs	r1, #0
 800770a:	4618      	mov	r0, r3
 800770c:	f001 fa3a 	bl	8008b84 <RCCEx_PLL3_Config>
 8007710:	4603      	mov	r3, r0
 8007712:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007714:	e003      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007716:	2301      	movs	r3, #1
 8007718:	75fb      	strb	r3, [r7, #23]
      break;
 800771a:	e000      	b.n	800771e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800771c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d109      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007724:	4b71      	ldr	r3, [pc, #452]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007726:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007728:	f023 0207 	bic.w	r2, r3, #7
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	496e      	ldr	r1, [pc, #440]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007732:	4313      	orrs	r3, r2
 8007734:	650b      	str	r3, [r1, #80]	; 0x50
 8007736:	e001      	b.n	800773c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007738:	7dfb      	ldrb	r3, [r7, #23]
 800773a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007744:	2b00      	cmp	r3, #0
 8007746:	d042      	beq.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007750:	d02b      	beq.n	80077aa <HAL_RCCEx_PeriphCLKConfig+0x192>
 8007752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007756:	d825      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007758:	2bc0      	cmp	r3, #192	; 0xc0
 800775a:	d028      	beq.n	80077ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 800775c:	2bc0      	cmp	r3, #192	; 0xc0
 800775e:	d821      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007760:	2b80      	cmp	r3, #128	; 0x80
 8007762:	d016      	beq.n	8007792 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8007764:	2b80      	cmp	r3, #128	; 0x80
 8007766:	d81d      	bhi.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8007768:	2b00      	cmp	r3, #0
 800776a:	d002      	beq.n	8007772 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d007      	beq.n	8007780 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8007770:	e018      	b.n	80077a4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007772:	4b5e      	ldr	r3, [pc, #376]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007776:	4a5d      	ldr	r2, [pc, #372]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800777c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800777e:	e017      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	3304      	adds	r3, #4
 8007784:	2100      	movs	r1, #0
 8007786:	4618      	mov	r0, r3
 8007788:	f001 f94a 	bl	8008a20 <RCCEx_PLL2_Config>
 800778c:	4603      	mov	r3, r0
 800778e:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8007790:	e00e      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	3324      	adds	r3, #36	; 0x24
 8007796:	2100      	movs	r1, #0
 8007798:	4618      	mov	r0, r3
 800779a:	f001 f9f3 	bl	8008b84 <RCCEx_PLL3_Config>
 800779e:	4603      	mov	r3, r0
 80077a0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 80077a2:	e005      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	75fb      	strb	r3, [r7, #23]
      break;
 80077a8:	e002      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80077aa:	bf00      	nop
 80077ac:	e000      	b.n	80077b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 80077ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 80077b0:	7dfb      	ldrb	r3, [r7, #23]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d109      	bne.n	80077ca <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80077b6:	4b4d      	ldr	r3, [pc, #308]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077ba:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077c2:	494a      	ldr	r1, [pc, #296]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80077c4:	4313      	orrs	r3, r2
 80077c6:	650b      	str	r3, [r1, #80]	; 0x50
 80077c8:	e001      	b.n	80077ce <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d049      	beq.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80077e0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077e4:	d030      	beq.n	8007848 <HAL_RCCEx_PeriphCLKConfig+0x230>
 80077e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80077ea:	d82a      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80077ec:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077f0:	d02c      	beq.n	800784c <HAL_RCCEx_PeriphCLKConfig+0x234>
 80077f2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80077f6:	d824      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80077f8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80077fc:	d018      	beq.n	8007830 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80077fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007802:	d81e      	bhi.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8007808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800780c:	d007      	beq.n	800781e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800780e:	e018      	b.n	8007842 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007810:	4b36      	ldr	r3, [pc, #216]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007814:	4a35      	ldr	r2, [pc, #212]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007816:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800781a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800781c:	e017      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	3304      	adds	r3, #4
 8007822:	2100      	movs	r1, #0
 8007824:	4618      	mov	r0, r3
 8007826:	f001 f8fb 	bl	8008a20 <RCCEx_PLL2_Config>
 800782a:	4603      	mov	r3, r0
 800782c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800782e:	e00e      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	3324      	adds	r3, #36	; 0x24
 8007834:	2100      	movs	r1, #0
 8007836:	4618      	mov	r0, r3
 8007838:	f001 f9a4 	bl	8008b84 <RCCEx_PLL3_Config>
 800783c:	4603      	mov	r3, r0
 800783e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8007840:	e005      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	75fb      	strb	r3, [r7, #23]
      break;
 8007846:	e002      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800784c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800784e:	7dfb      	ldrb	r3, [r7, #23]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d10a      	bne.n	800786a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8007854:	4b25      	ldr	r3, [pc, #148]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007856:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007858:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007862:	4922      	ldr	r1, [pc, #136]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8007864:	4313      	orrs	r3, r2
 8007866:	658b      	str	r3, [r1, #88]	; 0x58
 8007868:	e001      	b.n	800786e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800786a:	7dfb      	ldrb	r3, [r7, #23]
 800786c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007876:	2b00      	cmp	r3, #0
 8007878:	d04b      	beq.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007880:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007884:	d030      	beq.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8007886:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800788a:	d82a      	bhi.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800788c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007890:	d02e      	beq.n	80078f0 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8007892:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8007896:	d824      	bhi.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8007898:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800789c:	d018      	beq.n	80078d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800789e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80078a2:	d81e      	bhi.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 80078a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80078ac:	d007      	beq.n	80078be <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 80078ae:	e018      	b.n	80078e2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80078b0:	4b0e      	ldr	r3, [pc, #56]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b4:	4a0d      	ldr	r2, [pc, #52]	; (80078ec <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 80078b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80078ba:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078bc:	e019      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	3304      	adds	r3, #4
 80078c2:	2100      	movs	r1, #0
 80078c4:	4618      	mov	r0, r3
 80078c6:	f001 f8ab 	bl	8008a20 <RCCEx_PLL2_Config>
 80078ca:	4603      	mov	r3, r0
 80078cc:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80078ce:	e010      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3324      	adds	r3, #36	; 0x24
 80078d4:	2100      	movs	r1, #0
 80078d6:	4618      	mov	r0, r3
 80078d8:	f001 f954 	bl	8008b84 <RCCEx_PLL3_Config>
 80078dc:	4603      	mov	r3, r0
 80078de:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80078e0:	e007      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80078e2:	2301      	movs	r3, #1
 80078e4:	75fb      	strb	r3, [r7, #23]
      break;
 80078e6:	e004      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 80078e8:	bf00      	nop
 80078ea:	e002      	b.n	80078f2 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 80078ec:	58024400 	.word	0x58024400
      break;
 80078f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80078f2:	7dfb      	ldrb	r3, [r7, #23]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80078f8:	4b99      	ldr	r3, [pc, #612]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80078fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078fc:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007906:	4996      	ldr	r1, [pc, #600]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007908:	4313      	orrs	r3, r2
 800790a:	658b      	str	r3, [r1, #88]	; 0x58
 800790c:	e001      	b.n	8007912 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800790e:	7dfb      	ldrb	r3, [r7, #23]
 8007910:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800791a:	2b00      	cmp	r3, #0
 800791c:	d032      	beq.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	2b30      	cmp	r3, #48	; 0x30
 8007924:	d01c      	beq.n	8007960 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8007926:	2b30      	cmp	r3, #48	; 0x30
 8007928:	d817      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800792a:	2b20      	cmp	r3, #32
 800792c:	d00c      	beq.n	8007948 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800792e:	2b20      	cmp	r3, #32
 8007930:	d813      	bhi.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x342>
 8007932:	2b00      	cmp	r3, #0
 8007934:	d016      	beq.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8007936:	2b10      	cmp	r3, #16
 8007938:	d10f      	bne.n	800795a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800793a:	4b89      	ldr	r3, [pc, #548]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800793c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800793e:	4a88      	ldr	r2, [pc, #544]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007944:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007946:	e00e      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	3304      	adds	r3, #4
 800794c:	2102      	movs	r1, #2
 800794e:	4618      	mov	r0, r3
 8007950:	f001 f866 	bl	8008a20 <RCCEx_PLL2_Config>
 8007954:	4603      	mov	r3, r0
 8007956:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8007958:	e005      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800795a:	2301      	movs	r3, #1
 800795c:	75fb      	strb	r3, [r7, #23]
      break;
 800795e:	e002      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007960:	bf00      	nop
 8007962:	e000      	b.n	8007966 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8007964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007966:	7dfb      	ldrb	r3, [r7, #23]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d109      	bne.n	8007980 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800796c:	4b7c      	ldr	r3, [pc, #496]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800796e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007970:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007978:	4979      	ldr	r1, [pc, #484]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800797a:	4313      	orrs	r3, r2
 800797c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800797e:	e001      	b.n	8007984 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007980:	7dfb      	ldrb	r3, [r7, #23]
 8007982:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d047      	beq.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007994:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007998:	d030      	beq.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800799a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800799e:	d82a      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80079a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079a4:	d02c      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80079a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80079aa:	d824      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80079ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b0:	d018      	beq.n	80079e4 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 80079b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079b6:	d81e      	bhi.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d003      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d007      	beq.n	80079d2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 80079c2:	e018      	b.n	80079f6 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80079c4:	4b66      	ldr	r3, [pc, #408]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	4a65      	ldr	r2, [pc, #404]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 80079ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079d0:	e017      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	3304      	adds	r3, #4
 80079d6:	2100      	movs	r1, #0
 80079d8:	4618      	mov	r0, r3
 80079da:	f001 f821 	bl	8008a20 <RCCEx_PLL2_Config>
 80079de:	4603      	mov	r3, r0
 80079e0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079e2:	e00e      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	3324      	adds	r3, #36	; 0x24
 80079e8:	2100      	movs	r1, #0
 80079ea:	4618      	mov	r0, r3
 80079ec:	f001 f8ca 	bl	8008b84 <RCCEx_PLL3_Config>
 80079f0:	4603      	mov	r3, r0
 80079f2:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80079f4:	e005      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	75fb      	strb	r3, [r7, #23]
      break;
 80079fa:	e002      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 80079fc:	bf00      	nop
 80079fe:	e000      	b.n	8007a02 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8007a00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007a02:	7dfb      	ldrb	r3, [r7, #23]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8007a08:	4b55      	ldr	r3, [pc, #340]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a0c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007a14:	4952      	ldr	r1, [pc, #328]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007a16:	4313      	orrs	r3, r2
 8007a18:	650b      	str	r3, [r1, #80]	; 0x50
 8007a1a:	e001      	b.n	8007a20 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d049      	beq.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a30:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a34:	d02e      	beq.n	8007a94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8007a36:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a3a:	d828      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007a3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a40:	d02a      	beq.n	8007a98 <HAL_RCCEx_PeriphCLKConfig+0x480>
 8007a42:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8007a46:	d822      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007a48:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a4c:	d026      	beq.n	8007a9c <HAL_RCCEx_PeriphCLKConfig+0x484>
 8007a4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007a52:	d81c      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007a54:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a58:	d010      	beq.n	8007a7c <HAL_RCCEx_PeriphCLKConfig+0x464>
 8007a5a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a5e:	d816      	bhi.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d01d      	beq.n	8007aa0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8007a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a68:	d111      	bne.n	8007a8e <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	2101      	movs	r1, #1
 8007a70:	4618      	mov	r0, r3
 8007a72:	f000 ffd5 	bl	8008a20 <RCCEx_PLL2_Config>
 8007a76:	4603      	mov	r3, r0
 8007a78:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a7a:	e012      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	3324      	adds	r3, #36	; 0x24
 8007a80:	2101      	movs	r1, #1
 8007a82:	4618      	mov	r0, r3
 8007a84:	f001 f87e 	bl	8008b84 <RCCEx_PLL3_Config>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8007a8c:	e009      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	75fb      	strb	r3, [r7, #23]
      break;
 8007a92:	e006      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a94:	bf00      	nop
 8007a96:	e004      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a98:	bf00      	nop
 8007a9a:	e002      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007a9c:	bf00      	nop
 8007a9e:	e000      	b.n	8007aa2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8007aa0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d109      	bne.n	8007abc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8007aa8:	4b2d      	ldr	r3, [pc, #180]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aac:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ab4:	492a      	ldr	r1, [pc, #168]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007ab6:	4313      	orrs	r3, r2
 8007ab8:	650b      	str	r3, [r1, #80]	; 0x50
 8007aba:	e001      	b.n	8007ac0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007abc:	7dfb      	ldrb	r3, [r7, #23]
 8007abe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d04d      	beq.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007ad6:	d02e      	beq.n	8007b36 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8007ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007adc:	d828      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae2:	d02a      	beq.n	8007b3a <HAL_RCCEx_PeriphCLKConfig+0x522>
 8007ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ae8:	d822      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007aea:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007aee:	d026      	beq.n	8007b3e <HAL_RCCEx_PeriphCLKConfig+0x526>
 8007af0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007af4:	d81c      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007af6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007afa:	d010      	beq.n	8007b1e <HAL_RCCEx_PeriphCLKConfig+0x506>
 8007afc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b00:	d816      	bhi.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d01d      	beq.n	8007b42 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8007b06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b0a:	d111      	bne.n	8007b30 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	2101      	movs	r1, #1
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 ff84 	bl	8008a20 <RCCEx_PLL2_Config>
 8007b18:	4603      	mov	r3, r0
 8007b1a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007b1c:	e012      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	3324      	adds	r3, #36	; 0x24
 8007b22:	2101      	movs	r1, #1
 8007b24:	4618      	mov	r0, r3
 8007b26:	f001 f82d 	bl	8008b84 <RCCEx_PLL3_Config>
 8007b2a:	4603      	mov	r3, r0
 8007b2c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8007b2e:	e009      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8007b30:	2301      	movs	r3, #1
 8007b32:	75fb      	strb	r3, [r7, #23]
      break;
 8007b34:	e006      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007b36:	bf00      	nop
 8007b38:	e004      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007b3a:	bf00      	nop
 8007b3c:	e002      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007b3e:	bf00      	nop
 8007b40:	e000      	b.n	8007b44 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8007b42:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007b44:	7dfb      	ldrb	r3, [r7, #23]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d10c      	bne.n	8007b64 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8007b4a:	4b05      	ldr	r3, [pc, #20]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b4e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007b58:	4901      	ldr	r1, [pc, #4]	; (8007b60 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8007b5a:	4313      	orrs	r3, r2
 8007b5c:	658b      	str	r3, [r1, #88]	; 0x58
 8007b5e:	e003      	b.n	8007b68 <HAL_RCCEx_PeriphCLKConfig+0x550>
 8007b60:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b64:	7dfb      	ldrb	r3, [r7, #23]
 8007b66:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d02f      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b7c:	d00e      	beq.n	8007b9c <HAL_RCCEx_PeriphCLKConfig+0x584>
 8007b7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b82:	d814      	bhi.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x596>
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d015      	beq.n	8007bb4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 8007b88:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b8c:	d10f      	bne.n	8007bae <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007b8e:	4baf      	ldr	r3, [pc, #700]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b92:	4aae      	ldr	r2, [pc, #696]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007b94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b98:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007b9a:	e00c      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	2101      	movs	r1, #1
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 ff3c 	bl	8008a20 <RCCEx_PLL2_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8007bac:	e003      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007bae:	2301      	movs	r3, #1
 8007bb0:	75fb      	strb	r3, [r7, #23]
      break;
 8007bb2:	e000      	b.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8007bb4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007bb6:	7dfb      	ldrb	r3, [r7, #23]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d109      	bne.n	8007bd0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8007bbc:	4ba3      	ldr	r3, [pc, #652]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007bc0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc8:	49a0      	ldr	r1, [pc, #640]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007bca:	4313      	orrs	r3, r2
 8007bcc:	650b      	str	r3, [r1, #80]	; 0x50
 8007bce:	e001      	b.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007bd0:	7dfb      	ldrb	r3, [r7, #23]
 8007bd2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d032      	beq.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007be4:	2b03      	cmp	r3, #3
 8007be6:	d81b      	bhi.n	8007c20 <HAL_RCCEx_PeriphCLKConfig+0x608>
 8007be8:	a201      	add	r2, pc, #4	; (adr r2, 8007bf0 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 8007bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bee:	bf00      	nop
 8007bf0:	08007c27 	.word	0x08007c27
 8007bf4:	08007c01 	.word	0x08007c01
 8007bf8:	08007c0f 	.word	0x08007c0f
 8007bfc:	08007c27 	.word	0x08007c27
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007c00:	4b92      	ldr	r3, [pc, #584]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c04:	4a91      	ldr	r2, [pc, #580]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007c0a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007c0c:	e00c      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	3304      	adds	r3, #4
 8007c12:	2102      	movs	r1, #2
 8007c14:	4618      	mov	r0, r3
 8007c16:	f000 ff03 	bl	8008a20 <RCCEx_PLL2_Config>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8007c1e:	e003      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8007c20:	2301      	movs	r3, #1
 8007c22:	75fb      	strb	r3, [r7, #23]
      break;
 8007c24:	e000      	b.n	8007c28 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 8007c26:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007c28:	7dfb      	ldrb	r3, [r7, #23]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d109      	bne.n	8007c42 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8007c2e:	4b87      	ldr	r3, [pc, #540]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c32:	f023 0203 	bic.w	r2, r3, #3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c3a:	4984      	ldr	r1, [pc, #528]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c3c:	4313      	orrs	r3, r2
 8007c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8007c40:	e001      	b.n	8007c46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007c42:	7dfb      	ldrb	r3, [r7, #23]
 8007c44:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 8086 	beq.w	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007c54:	4b7e      	ldr	r3, [pc, #504]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	4a7d      	ldr	r2, [pc, #500]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c5e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007c60:	f7fb f99a 	bl	8002f98 <HAL_GetTick>
 8007c64:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c66:	e009      	b.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c68:	f7fb f996 	bl	8002f98 <HAL_GetTick>
 8007c6c:	4602      	mov	r2, r0
 8007c6e:	693b      	ldr	r3, [r7, #16]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	2b64      	cmp	r3, #100	; 0x64
 8007c74:	d902      	bls.n	8007c7c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8007c76:	2303      	movs	r3, #3
 8007c78:	75fb      	strb	r3, [r7, #23]
        break;
 8007c7a:	e005      	b.n	8007c88 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007c7c:	4b74      	ldr	r3, [pc, #464]	; (8007e50 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0ef      	beq.n	8007c68 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8007c88:	7dfb      	ldrb	r3, [r7, #23]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d166      	bne.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8007c8e:	4b6f      	ldr	r3, [pc, #444]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007c98:	4053      	eors	r3, r2
 8007c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d013      	beq.n	8007cca <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007ca2:	4b6a      	ldr	r3, [pc, #424]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007caa:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007cac:	4b67      	ldr	r3, [pc, #412]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cb0:	4a66      	ldr	r2, [pc, #408]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cb2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007cb6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007cb8:	4b64      	ldr	r3, [pc, #400]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	4a63      	ldr	r2, [pc, #396]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8007cc4:	4a61      	ldr	r2, [pc, #388]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007cd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007cd4:	d115      	bne.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd6:	f7fb f95f 	bl	8002f98 <HAL_GetTick>
 8007cda:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cdc:	e00b      	b.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007cde:	f7fb f95b 	bl	8002f98 <HAL_GetTick>
 8007ce2:	4602      	mov	r2, r0
 8007ce4:	693b      	ldr	r3, [r7, #16]
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d902      	bls.n	8007cf6 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 8007cf0:	2303      	movs	r3, #3
 8007cf2:	75fb      	strb	r3, [r7, #23]
            break;
 8007cf4:	e005      	b.n	8007d02 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007cf6:	4b55      	ldr	r3, [pc, #340]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007cf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cfa:	f003 0302 	and.w	r3, r3, #2
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d0ed      	beq.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 8007d02:	7dfb      	ldrb	r3, [r7, #23]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d126      	bne.n	8007d56 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007d16:	d10d      	bne.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 8007d18:	4b4c      	ldr	r3, [pc, #304]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d26:	0919      	lsrs	r1, r3, #4
 8007d28:	4b4a      	ldr	r3, [pc, #296]	; (8007e54 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 8007d2a:	400b      	ands	r3, r1
 8007d2c:	4947      	ldr	r1, [pc, #284]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	610b      	str	r3, [r1, #16]
 8007d32:	e005      	b.n	8007d40 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007d34:	4b45      	ldr	r3, [pc, #276]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d36:	691b      	ldr	r3, [r3, #16]
 8007d38:	4a44      	ldr	r2, [pc, #272]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d3a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8007d3e:	6113      	str	r3, [r2, #16]
 8007d40:	4b42      	ldr	r3, [pc, #264]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d42:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d4e:	493f      	ldr	r1, [pc, #252]	; (8007e4c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8007d50:	4313      	orrs	r3, r2
 8007d52:	670b      	str	r3, [r1, #112]	; 0x70
 8007d54:	e004      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007d56:	7dfb      	ldrb	r3, [r7, #23]
 8007d58:	75bb      	strb	r3, [r7, #22]
 8007d5a:	e001      	b.n	8007d60 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
 8007d5e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	f003 0301 	and.w	r3, r3, #1
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	f000 8085 	beq.w	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007d72:	2b28      	cmp	r3, #40	; 0x28
 8007d74:	d866      	bhi.n	8007e44 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8007d76:	a201      	add	r2, pc, #4	; (adr r2, 8007d7c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 8007d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d7c:	08007e59 	.word	0x08007e59
 8007d80:	08007e45 	.word	0x08007e45
 8007d84:	08007e45 	.word	0x08007e45
 8007d88:	08007e45 	.word	0x08007e45
 8007d8c:	08007e45 	.word	0x08007e45
 8007d90:	08007e45 	.word	0x08007e45
 8007d94:	08007e45 	.word	0x08007e45
 8007d98:	08007e45 	.word	0x08007e45
 8007d9c:	08007e21 	.word	0x08007e21
 8007da0:	08007e45 	.word	0x08007e45
 8007da4:	08007e45 	.word	0x08007e45
 8007da8:	08007e45 	.word	0x08007e45
 8007dac:	08007e45 	.word	0x08007e45
 8007db0:	08007e45 	.word	0x08007e45
 8007db4:	08007e45 	.word	0x08007e45
 8007db8:	08007e45 	.word	0x08007e45
 8007dbc:	08007e33 	.word	0x08007e33
 8007dc0:	08007e45 	.word	0x08007e45
 8007dc4:	08007e45 	.word	0x08007e45
 8007dc8:	08007e45 	.word	0x08007e45
 8007dcc:	08007e45 	.word	0x08007e45
 8007dd0:	08007e45 	.word	0x08007e45
 8007dd4:	08007e45 	.word	0x08007e45
 8007dd8:	08007e45 	.word	0x08007e45
 8007ddc:	08007e59 	.word	0x08007e59
 8007de0:	08007e45 	.word	0x08007e45
 8007de4:	08007e45 	.word	0x08007e45
 8007de8:	08007e45 	.word	0x08007e45
 8007dec:	08007e45 	.word	0x08007e45
 8007df0:	08007e45 	.word	0x08007e45
 8007df4:	08007e45 	.word	0x08007e45
 8007df8:	08007e45 	.word	0x08007e45
 8007dfc:	08007e59 	.word	0x08007e59
 8007e00:	08007e45 	.word	0x08007e45
 8007e04:	08007e45 	.word	0x08007e45
 8007e08:	08007e45 	.word	0x08007e45
 8007e0c:	08007e45 	.word	0x08007e45
 8007e10:	08007e45 	.word	0x08007e45
 8007e14:	08007e45 	.word	0x08007e45
 8007e18:	08007e45 	.word	0x08007e45
 8007e1c:	08007e59 	.word	0x08007e59
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	3304      	adds	r3, #4
 8007e24:	2101      	movs	r1, #1
 8007e26:	4618      	mov	r0, r3
 8007e28:	f000 fdfa 	bl	8008a20 <RCCEx_PLL2_Config>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007e30:	e013      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	3324      	adds	r3, #36	; 0x24
 8007e36:	2101      	movs	r1, #1
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f000 fea3 	bl	8008b84 <RCCEx_PLL3_Config>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8007e42:	e00a      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007e44:	2301      	movs	r3, #1
 8007e46:	75fb      	strb	r3, [r7, #23]
      break;
 8007e48:	e007      	b.n	8007e5a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8007e4a:	bf00      	nop
 8007e4c:	58024400 	.word	0x58024400
 8007e50:	58024800 	.word	0x58024800
 8007e54:	00ffffcf 	.word	0x00ffffcf
      break;
 8007e58:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007e5a:	7dfb      	ldrb	r3, [r7, #23]
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d109      	bne.n	8007e74 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8007e60:	4b96      	ldr	r3, [pc, #600]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e64:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e6c:	4993      	ldr	r1, [pc, #588]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007e6e:	4313      	orrs	r3, r2
 8007e70:	654b      	str	r3, [r1, #84]	; 0x54
 8007e72:	e001      	b.n	8007e78 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007e74:	7dfb      	ldrb	r3, [r7, #23]
 8007e76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	f003 0302 	and.w	r3, r3, #2
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d038      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e88:	2b05      	cmp	r3, #5
 8007e8a:	d821      	bhi.n	8007ed0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8007e8c:	a201      	add	r2, pc, #4	; (adr r2, 8007e94 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8007e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e92:	bf00      	nop
 8007e94:	08007ed7 	.word	0x08007ed7
 8007e98:	08007ead 	.word	0x08007ead
 8007e9c:	08007ebf 	.word	0x08007ebf
 8007ea0:	08007ed7 	.word	0x08007ed7
 8007ea4:	08007ed7 	.word	0x08007ed7
 8007ea8:	08007ed7 	.word	0x08007ed7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	3304      	adds	r3, #4
 8007eb0:	2101      	movs	r1, #1
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	f000 fdb4 	bl	8008a20 <RCCEx_PLL2_Config>
 8007eb8:	4603      	mov	r3, r0
 8007eba:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007ebc:	e00c      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	3324      	adds	r3, #36	; 0x24
 8007ec2:	2101      	movs	r1, #1
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fe5d 	bl	8008b84 <RCCEx_PLL3_Config>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8007ece:	e003      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8007ed4:	e000      	b.n	8007ed8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 8007ed6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ed8:	7dfb      	ldrb	r3, [r7, #23]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d109      	bne.n	8007ef2 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8007ede:	4b77      	ldr	r3, [pc, #476]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ee2:	f023 0207 	bic.w	r2, r3, #7
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007eea:	4974      	ldr	r1, [pc, #464]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007eec:	4313      	orrs	r3, r2
 8007eee:	654b      	str	r3, [r1, #84]	; 0x54
 8007ef0:	e001      	b.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007ef2:	7dfb      	ldrb	r3, [r7, #23]
 8007ef4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0304 	and.w	r3, r3, #4
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d03a      	beq.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f08:	2b05      	cmp	r3, #5
 8007f0a:	d821      	bhi.n	8007f50 <HAL_RCCEx_PeriphCLKConfig+0x938>
 8007f0c:	a201      	add	r2, pc, #4	; (adr r2, 8007f14 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 8007f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f12:	bf00      	nop
 8007f14:	08007f57 	.word	0x08007f57
 8007f18:	08007f2d 	.word	0x08007f2d
 8007f1c:	08007f3f 	.word	0x08007f3f
 8007f20:	08007f57 	.word	0x08007f57
 8007f24:	08007f57 	.word	0x08007f57
 8007f28:	08007f57 	.word	0x08007f57
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	3304      	adds	r3, #4
 8007f30:	2101      	movs	r1, #1
 8007f32:	4618      	mov	r0, r3
 8007f34:	f000 fd74 	bl	8008a20 <RCCEx_PLL2_Config>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f3c:	e00c      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	3324      	adds	r3, #36	; 0x24
 8007f42:	2101      	movs	r1, #1
 8007f44:	4618      	mov	r0, r3
 8007f46:	f000 fe1d 	bl	8008b84 <RCCEx_PLL3_Config>
 8007f4a:	4603      	mov	r3, r0
 8007f4c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8007f4e:	e003      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007f50:	2301      	movs	r3, #1
 8007f52:	75fb      	strb	r3, [r7, #23]
      break;
 8007f54:	e000      	b.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 8007f56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007f5e:	4b57      	ldr	r3, [pc, #348]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f62:	f023 0207 	bic.w	r2, r3, #7
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6c:	4953      	ldr	r1, [pc, #332]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	658b      	str	r3, [r1, #88]	; 0x58
 8007f72:	e001      	b.n	8007f78 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f74:	7dfb      	ldrb	r3, [r7, #23]
 8007f76:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f003 0320 	and.w	r3, r3, #32
 8007f80:	2b00      	cmp	r3, #0
 8007f82:	d04b      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f8e:	d02e      	beq.n	8007fee <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8007f90:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f94:	d828      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f9a:	d02a      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8007f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fa0:	d822      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007fa2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fa6:	d026      	beq.n	8007ff6 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8007fa8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007fac:	d81c      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007fae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb2:	d010      	beq.n	8007fd6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8007fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007fb8:	d816      	bhi.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d01d      	beq.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 8007fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007fc2:	d111      	bne.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	3304      	adds	r3, #4
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f000 fd28 	bl	8008a20 <RCCEx_PLL2_Config>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007fd4:	e012      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	3324      	adds	r3, #36	; 0x24
 8007fda:	2102      	movs	r1, #2
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f000 fdd1 	bl	8008b84 <RCCEx_PLL3_Config>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8007fe6:	e009      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007fe8:	2301      	movs	r3, #1
 8007fea:	75fb      	strb	r3, [r7, #23]
      break;
 8007fec:	e006      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007fee:	bf00      	nop
 8007ff0:	e004      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ff2:	bf00      	nop
 8007ff4:	e002      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ff6:	bf00      	nop
 8007ff8:	e000      	b.n	8007ffc <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 8007ffa:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007ffc:	7dfb      	ldrb	r3, [r7, #23]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d10a      	bne.n	8008018 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008002:	4b2e      	ldr	r3, [pc, #184]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008006:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008010:	492a      	ldr	r1, [pc, #168]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8008012:	4313      	orrs	r3, r2
 8008014:	654b      	str	r3, [r1, #84]	; 0x54
 8008016:	e001      	b.n	800801c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008018:	7dfb      	ldrb	r3, [r7, #23]
 800801a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008024:	2b00      	cmp	r3, #0
 8008026:	d04d      	beq.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800802e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008032:	d02e      	beq.n	8008092 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8008034:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8008038:	d828      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800803a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800803e:	d02a      	beq.n	8008096 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8008040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008044:	d822      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008046:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800804a:	d026      	beq.n	800809a <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800804c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008050:	d81c      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8008052:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008056:	d010      	beq.n	800807a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 8008058:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800805c:	d816      	bhi.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800805e:	2b00      	cmp	r3, #0
 8008060:	d01d      	beq.n	800809e <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8008062:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008066:	d111      	bne.n	800808c <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	3304      	adds	r3, #4
 800806c:	2100      	movs	r1, #0
 800806e:	4618      	mov	r0, r3
 8008070:	f000 fcd6 	bl	8008a20 <RCCEx_PLL2_Config>
 8008074:	4603      	mov	r3, r0
 8008076:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8008078:	e012      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	3324      	adds	r3, #36	; 0x24
 800807e:	2102      	movs	r1, #2
 8008080:	4618      	mov	r0, r3
 8008082:	f000 fd7f 	bl	8008b84 <RCCEx_PLL3_Config>
 8008086:	4603      	mov	r3, r0
 8008088:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800808a:	e009      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800808c:	2301      	movs	r3, #1
 800808e:	75fb      	strb	r3, [r7, #23]
      break;
 8008090:	e006      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008092:	bf00      	nop
 8008094:	e004      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8008096:	bf00      	nop
 8008098:	e002      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800809a:	bf00      	nop
 800809c:	e000      	b.n	80080a0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800809e:	bf00      	nop
    }

    if(ret == HAL_OK)
 80080a0:	7dfb      	ldrb	r3, [r7, #23]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d10c      	bne.n	80080c0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80080a6:	4b05      	ldr	r3, [pc, #20]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80080a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080aa:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80080b4:	4901      	ldr	r1, [pc, #4]	; (80080bc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80080b6:	4313      	orrs	r3, r2
 80080b8:	658b      	str	r3, [r1, #88]	; 0x58
 80080ba:	e003      	b.n	80080c4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80080bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080c0:	7dfb      	ldrb	r3, [r7, #23]
 80080c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d04b      	beq.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80080d6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080da:	d02e      	beq.n	800813a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80080dc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80080e0:	d828      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80080e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080e6:	d02a      	beq.n	800813e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80080e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80080ec:	d822      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80080ee:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080f2:	d026      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80080f4:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80080f8:	d81c      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80080fa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80080fe:	d010      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 8008100:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008104:	d816      	bhi.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 8008106:	2b00      	cmp	r3, #0
 8008108:	d01d      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800810a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800810e:	d111      	bne.n	8008134 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	3304      	adds	r3, #4
 8008114:	2100      	movs	r1, #0
 8008116:	4618      	mov	r0, r3
 8008118:	f000 fc82 	bl	8008a20 <RCCEx_PLL2_Config>
 800811c:	4603      	mov	r3, r0
 800811e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008120:	e012      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	3324      	adds	r3, #36	; 0x24
 8008126:	2102      	movs	r1, #2
 8008128:	4618      	mov	r0, r3
 800812a:	f000 fd2b 	bl	8008b84 <RCCEx_PLL3_Config>
 800812e:	4603      	mov	r3, r0
 8008130:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8008132:	e009      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	75fb      	strb	r3, [r7, #23]
      break;
 8008138:	e006      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800813a:	bf00      	nop
 800813c:	e004      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800813e:	bf00      	nop
 8008140:	e002      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008142:	bf00      	nop
 8008144:	e000      	b.n	8008148 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8008146:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008148:	7dfb      	ldrb	r3, [r7, #23]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d10a      	bne.n	8008164 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800814e:	4b9d      	ldr	r3, [pc, #628]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008152:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800815c:	4999      	ldr	r1, [pc, #612]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800815e:	4313      	orrs	r3, r2
 8008160:	658b      	str	r3, [r1, #88]	; 0x58
 8008162:	e001      	b.n	8008168 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008164:	7dfb      	ldrb	r3, [r7, #23]
 8008166:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f003 0308 	and.w	r3, r3, #8
 8008170:	2b00      	cmp	r3, #0
 8008172:	d01a      	beq.n	80081aa <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800817a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800817e:	d10a      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	3324      	adds	r3, #36	; 0x24
 8008184:	2102      	movs	r1, #2
 8008186:	4618      	mov	r0, r3
 8008188:	f000 fcfc 	bl	8008b84 <RCCEx_PLL3_Config>
 800818c:	4603      	mov	r3, r0
 800818e:	2b00      	cmp	r3, #0
 8008190:	d001      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8008192:	2301      	movs	r3, #1
 8008194:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8008196:	4b8b      	ldr	r3, [pc, #556]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800819a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80081a4:	4987      	ldr	r1, [pc, #540]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081a6:	4313      	orrs	r3, r2
 80081a8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f003 0310 	and.w	r3, r3, #16
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01a      	beq.n	80081ec <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80081c0:	d10a      	bne.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	3324      	adds	r3, #36	; 0x24
 80081c6:	2102      	movs	r1, #2
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fcdb 	bl	8008b84 <RCCEx_PLL3_Config>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d001      	beq.n	80081d8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80081d4:	2301      	movs	r3, #1
 80081d6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80081d8:	4b7a      	ldr	r3, [pc, #488]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80081dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80081e6:	4977      	ldr	r1, [pc, #476]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d034      	beq.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80081fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008202:	d01d      	beq.n	8008240 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 8008204:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008208:	d817      	bhi.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800820a:	2b00      	cmp	r3, #0
 800820c:	d003      	beq.n	8008216 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800820e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008212:	d009      	beq.n	8008228 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 8008214:	e011      	b.n	800823a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	3304      	adds	r3, #4
 800821a:	2100      	movs	r1, #0
 800821c:	4618      	mov	r0, r3
 800821e:	f000 fbff 	bl	8008a20 <RCCEx_PLL2_Config>
 8008222:	4603      	mov	r3, r0
 8008224:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008226:	e00c      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3324      	adds	r3, #36	; 0x24
 800822c:	2102      	movs	r1, #2
 800822e:	4618      	mov	r0, r3
 8008230:	f000 fca8 	bl	8008b84 <RCCEx_PLL3_Config>
 8008234:	4603      	mov	r3, r0
 8008236:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8008238:	e003      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800823a:	2301      	movs	r3, #1
 800823c:	75fb      	strb	r3, [r7, #23]
      break;
 800823e:	e000      	b.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8008240:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008242:	7dfb      	ldrb	r3, [r7, #23]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d10a      	bne.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008248:	4b5e      	ldr	r3, [pc, #376]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800824a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008256:	495b      	ldr	r1, [pc, #364]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008258:	4313      	orrs	r3, r2
 800825a:	658b      	str	r3, [r1, #88]	; 0x58
 800825c:	e001      	b.n	8008262 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800826a:	2b00      	cmp	r3, #0
 800826c:	d033      	beq.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008274:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008278:	d01c      	beq.n	80082b4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800827a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800827e:	d816      	bhi.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8008280:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008284:	d003      	beq.n	800828e <HAL_RCCEx_PeriphCLKConfig+0xc76>
 8008286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800828a:	d007      	beq.n	800829c <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800828c:	e00f      	b.n	80082ae <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800828e:	4b4d      	ldr	r3, [pc, #308]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008292:	4a4c      	ldr	r2, [pc, #304]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008294:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008298:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800829a:	e00c      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	3324      	adds	r3, #36	; 0x24
 80082a0:	2101      	movs	r1, #1
 80082a2:	4618      	mov	r0, r3
 80082a4:	f000 fc6e 	bl	8008b84 <RCCEx_PLL3_Config>
 80082a8:	4603      	mov	r3, r0
 80082aa:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 80082ac:	e003      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80082ae:	2301      	movs	r3, #1
 80082b0:	75fb      	strb	r3, [r7, #23]
      break;
 80082b2:	e000      	b.n	80082b6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 80082b4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80082b6:	7dfb      	ldrb	r3, [r7, #23]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d10a      	bne.n	80082d2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80082bc:	4b41      	ldr	r3, [pc, #260]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ca:	493e      	ldr	r1, [pc, #248]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082cc:	4313      	orrs	r3, r2
 80082ce:	654b      	str	r3, [r1, #84]	; 0x54
 80082d0:	e001      	b.n	80082d6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80082d2:	7dfb      	ldrb	r3, [r7, #23]
 80082d4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d029      	beq.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d003      	beq.n	80082f2 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80082ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80082ee:	d007      	beq.n	8008300 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80082f0:	e00f      	b.n	8008312 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80082f2:	4b34      	ldr	r3, [pc, #208]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082f6:	4a33      	ldr	r2, [pc, #204]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80082f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80082fc:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80082fe:	e00b      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	3304      	adds	r3, #4
 8008304:	2102      	movs	r1, #2
 8008306:	4618      	mov	r0, r3
 8008308:	f000 fb8a 	bl	8008a20 <RCCEx_PLL2_Config>
 800830c:	4603      	mov	r3, r0
 800830e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8008310:	e002      	b.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 8008312:	2301      	movs	r3, #1
 8008314:	75fb      	strb	r3, [r7, #23]
      break;
 8008316:	bf00      	nop
    }

    if(ret == HAL_OK)
 8008318:	7dfb      	ldrb	r3, [r7, #23]
 800831a:	2b00      	cmp	r3, #0
 800831c:	d109      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800831e:	4b29      	ldr	r3, [pc, #164]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800832a:	4926      	ldr	r1, [pc, #152]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800832c:	4313      	orrs	r3, r2
 800832e:	64cb      	str	r3, [r1, #76]	; 0x4c
 8008330:	e001      	b.n	8008336 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008332:	7dfb      	ldrb	r3, [r7, #23]
 8008334:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00a      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	3324      	adds	r3, #36	; 0x24
 8008346:	2102      	movs	r1, #2
 8008348:	4618      	mov	r0, r3
 800834a:	f000 fc1b 	bl	8008b84 <RCCEx_PLL3_Config>
 800834e:	4603      	mov	r3, r0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d001      	beq.n	8008358 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008360:	2b00      	cmp	r3, #0
 8008362:	d033      	beq.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008368:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800836c:	d017      	beq.n	800839e <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800836e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008372:	d811      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008378:	d013      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800837a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800837e:	d80b      	bhi.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8008380:	2b00      	cmp	r3, #0
 8008382:	d010      	beq.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8008384:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008388:	d106      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800838a:	4b0e      	ldr	r3, [pc, #56]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800838c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800838e:	4a0d      	ldr	r2, [pc, #52]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8008390:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008394:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8008396:	e007      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
      break;
 800839c:	e004      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800839e:	bf00      	nop
 80083a0:	e002      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80083a2:	bf00      	nop
 80083a4:	e000      	b.n	80083a8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 80083a6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d10c      	bne.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80083ae:	4b05      	ldr	r3, [pc, #20]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80083b2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083ba:	4902      	ldr	r1, [pc, #8]	; (80083c4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80083bc:	4313      	orrs	r3, r2
 80083be:	654b      	str	r3, [r1, #84]	; 0x54
 80083c0:	e004      	b.n	80083cc <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80083c2:	bf00      	nop
 80083c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c8:	7dfb      	ldrb	r3, [r7, #23]
 80083ca:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d008      	beq.n	80083ea <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80083d8:	4b31      	ldr	r3, [pc, #196]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083dc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083e4:	492e      	ldr	r1, [pc, #184]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083e6:	4313      	orrs	r3, r2
 80083e8:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083f2:	2b00      	cmp	r3, #0
 80083f4:	d009      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80083f6:	4b2a      	ldr	r3, [pc, #168]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80083f8:	691b      	ldr	r3, [r3, #16]
 80083fa:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8008404:	4926      	ldr	r1, [pc, #152]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008406:	4313      	orrs	r3, r2
 8008408:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d008      	beq.n	8008428 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8008416:	4b22      	ldr	r3, [pc, #136]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800841a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008422:	491f      	ldr	r1, [pc, #124]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008424:	4313      	orrs	r3, r2
 8008426:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008430:	2b00      	cmp	r3, #0
 8008432:	d00d      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008434:	4b1a      	ldr	r3, [pc, #104]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008436:	691b      	ldr	r3, [r3, #16]
 8008438:	4a19      	ldr	r2, [pc, #100]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800843a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800843e:	6113      	str	r3, [r2, #16]
 8008440:	4b17      	ldr	r3, [pc, #92]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800844a:	4915      	ldr	r1, [pc, #84]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800844c:	4313      	orrs	r3, r2
 800844e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	2b00      	cmp	r3, #0
 8008456:	da08      	bge.n	800846a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8008458:	4b11      	ldr	r3, [pc, #68]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800845a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800845c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008464:	490e      	ldr	r1, [pc, #56]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008466:	4313      	orrs	r3, r2
 8008468:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008472:	2b00      	cmp	r3, #0
 8008474:	d009      	beq.n	800848a <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008476:	4b0a      	ldr	r3, [pc, #40]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800847a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008484:	4906      	ldr	r1, [pc, #24]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8008486:	4313      	orrs	r3, r2
 8008488:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800848a:	7dbb      	ldrb	r3, [r7, #22]
 800848c:	2b00      	cmp	r3, #0
 800848e:	d101      	bne.n	8008494 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	e000      	b.n	8008496 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8008494:	2301      	movs	r3, #1
}
 8008496:	4618      	mov	r0, r3
 8008498:	3718      	adds	r7, #24
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	58024400 	.word	0x58024400

080084a4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80084a4:	b580      	push	{r7, lr}
 80084a6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80084a8:	f7ff f85a 	bl	8007560 <HAL_RCC_GetHCLKFreq>
 80084ac:	4602      	mov	r2, r0
 80084ae:	4b06      	ldr	r3, [pc, #24]	; (80084c8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80084b0:	6a1b      	ldr	r3, [r3, #32]
 80084b2:	091b      	lsrs	r3, r3, #4
 80084b4:	f003 0307 	and.w	r3, r3, #7
 80084b8:	4904      	ldr	r1, [pc, #16]	; (80084cc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80084ba:	5ccb      	ldrb	r3, [r1, r3]
 80084bc:	f003 031f 	and.w	r3, r3, #31
 80084c0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	bd80      	pop	{r7, pc}
 80084c8:	58024400 	.word	0x58024400
 80084cc:	0800bee8 	.word	0x0800bee8

080084d0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80084d0:	b480      	push	{r7}
 80084d2:	b089      	sub	sp, #36	; 0x24
 80084d4:	af00      	add	r7, sp, #0
 80084d6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80084d8:	4ba1      	ldr	r3, [pc, #644]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084dc:	f003 0303 	and.w	r3, r3, #3
 80084e0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80084e2:	4b9f      	ldr	r3, [pc, #636]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	0b1b      	lsrs	r3, r3, #12
 80084e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80084ec:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80084ee:	4b9c      	ldr	r3, [pc, #624]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f2:	091b      	lsrs	r3, r3, #4
 80084f4:	f003 0301 	and.w	r3, r3, #1
 80084f8:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80084fa:	4b99      	ldr	r3, [pc, #612]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80084fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084fe:	08db      	lsrs	r3, r3, #3
 8008500:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	fb02 f303 	mul.w	r3, r2, r3
 800850a:	ee07 3a90 	vmov	s15, r3
 800850e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008512:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	2b00      	cmp	r3, #0
 800851a:	f000 8111 	beq.w	8008740 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800851e:	69bb      	ldr	r3, [r7, #24]
 8008520:	2b02      	cmp	r3, #2
 8008522:	f000 8083 	beq.w	800862c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8008526:	69bb      	ldr	r3, [r7, #24]
 8008528:	2b02      	cmp	r3, #2
 800852a:	f200 80a1 	bhi.w	8008670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	d003      	beq.n	800853c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8008534:	69bb      	ldr	r3, [r7, #24]
 8008536:	2b01      	cmp	r3, #1
 8008538:	d056      	beq.n	80085e8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800853a:	e099      	b.n	8008670 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800853c:	4b88      	ldr	r3, [pc, #544]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 0320 	and.w	r3, r3, #32
 8008544:	2b00      	cmp	r3, #0
 8008546:	d02d      	beq.n	80085a4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8008548:	4b85      	ldr	r3, [pc, #532]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	08db      	lsrs	r3, r3, #3
 800854e:	f003 0303 	and.w	r3, r3, #3
 8008552:	4a84      	ldr	r2, [pc, #528]	; (8008764 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8008554:	fa22 f303 	lsr.w	r3, r2, r3
 8008558:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800855a:	68bb      	ldr	r3, [r7, #8]
 800855c:	ee07 3a90 	vmov	s15, r3
 8008560:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	ee07 3a90 	vmov	s15, r3
 800856a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800856e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008572:	4b7b      	ldr	r3, [pc, #492]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008576:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800857a:	ee07 3a90 	vmov	s15, r3
 800857e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008582:	ed97 6a03 	vldr	s12, [r7, #12]
 8008586:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800858a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800858e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008592:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008596:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800859a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800859e:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80085a2:	e087      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	ee07 3a90 	vmov	s15, r3
 80085aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800876c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80085b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085b6:	4b6a      	ldr	r3, [pc, #424]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085be:	ee07 3a90 	vmov	s15, r3
 80085c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80085ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80085ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80085da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085e2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80085e6:	e065      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	ee07 3a90 	vmov	s15, r3
 80085ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80085f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085fa:	4b59      	ldr	r3, [pc, #356]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80085fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008602:	ee07 3a90 	vmov	s15, r3
 8008606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800860a:	ed97 6a03 	vldr	s12, [r7, #12]
 800860e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800861a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800861e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800862a:	e043      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	ee07 3a90 	vmov	s15, r3
 8008632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008636:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008774 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800863a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800863e:	4b48      	ldr	r3, [pc, #288]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008646:	ee07 3a90 	vmov	s15, r3
 800864a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800864e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008652:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8008656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800865a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800865e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008666:	ee67 7a27 	vmul.f32	s15, s14, s15
 800866a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800866e:	e021      	b.n	80086b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8008670:	697b      	ldr	r3, [r7, #20]
 8008672:	ee07 3a90 	vmov	s15, r3
 8008676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800867a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008770 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800867e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008682:	4b37      	ldr	r3, [pc, #220]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800868a:	ee07 3a90 	vmov	s15, r3
 800868e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008692:	ed97 6a03 	vldr	s12, [r7, #12]
 8008696:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008768 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800869a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800869e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80086a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80086b2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 80086b4:	4b2a      	ldr	r3, [pc, #168]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086b8:	0a5b      	lsrs	r3, r3, #9
 80086ba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086ce:	edd7 6a07 	vldr	s13, [r7, #28]
 80086d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80086d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80086da:	ee17 2a90 	vmov	r2, s15
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 80086e2:	4b1f      	ldr	r3, [pc, #124]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80086e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e6:	0c1b      	lsrs	r3, r3, #16
 80086e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ec:	ee07 3a90 	vmov	s15, r3
 80086f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086f4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80086f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80086fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8008700:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008704:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008708:	ee17 2a90 	vmov	r2, s15
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8008710:	4b13      	ldr	r3, [pc, #76]	; (8008760 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8008712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008714:	0e1b      	lsrs	r3, r3, #24
 8008716:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008726:	ee37 7a87 	vadd.f32	s14, s15, s14
 800872a:	edd7 6a07 	vldr	s13, [r7, #28]
 800872e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008732:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008736:	ee17 2a90 	vmov	r2, s15
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800873e:	e008      	b.n	8008752 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	609a      	str	r2, [r3, #8]
}
 8008752:	bf00      	nop
 8008754:	3724      	adds	r7, #36	; 0x24
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	58024400 	.word	0x58024400
 8008764:	03d09000 	.word	0x03d09000
 8008768:	46000000 	.word	0x46000000
 800876c:	4c742400 	.word	0x4c742400
 8008770:	4a742400 	.word	0x4a742400
 8008774:	4af42400 	.word	0x4af42400

08008778 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8008778:	b480      	push	{r7}
 800877a:	b089      	sub	sp, #36	; 0x24
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8008780:	4ba1      	ldr	r3, [pc, #644]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008784:	f003 0303 	and.w	r3, r3, #3
 8008788:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800878a:	4b9f      	ldr	r3, [pc, #636]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800878c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800878e:	0d1b      	lsrs	r3, r3, #20
 8008790:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008794:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8008796:	4b9c      	ldr	r3, [pc, #624]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800879a:	0a1b      	lsrs	r3, r3, #8
 800879c:	f003 0301 	and.w	r3, r3, #1
 80087a0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 80087a2:	4b99      	ldr	r3, [pc, #612]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087a6:	08db      	lsrs	r3, r3, #3
 80087a8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	fb02 f303 	mul.w	r3, r2, r3
 80087b2:	ee07 3a90 	vmov	s15, r3
 80087b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087ba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80087be:	697b      	ldr	r3, [r7, #20]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	f000 8111 	beq.w	80089e8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	2b02      	cmp	r3, #2
 80087ca:	f000 8083 	beq.w	80088d4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80087ce:	69bb      	ldr	r3, [r7, #24]
 80087d0:	2b02      	cmp	r3, #2
 80087d2:	f200 80a1 	bhi.w	8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80087d6:	69bb      	ldr	r3, [r7, #24]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d003      	beq.n	80087e4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80087dc:	69bb      	ldr	r3, [r7, #24]
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d056      	beq.n	8008890 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80087e2:	e099      	b.n	8008918 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80087e4:	4b88      	ldr	r3, [pc, #544]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 0320 	and.w	r3, r3, #32
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d02d      	beq.n	800884c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80087f0:	4b85      	ldr	r3, [pc, #532]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	08db      	lsrs	r3, r3, #3
 80087f6:	f003 0303 	and.w	r3, r3, #3
 80087fa:	4a84      	ldr	r2, [pc, #528]	; (8008a0c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80087fc:	fa22 f303 	lsr.w	r3, r2, r3
 8008800:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	ee07 3a90 	vmov	s15, r3
 8008808:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	ee07 3a90 	vmov	s15, r3
 8008812:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800881a:	4b7b      	ldr	r3, [pc, #492]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800881c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800881e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008822:	ee07 3a90 	vmov	s15, r3
 8008826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800882a:	ed97 6a03 	vldr	s12, [r7, #12]
 800882e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800883a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800883e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008842:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008846:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800884a:	e087      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	ee07 3a90 	vmov	s15, r3
 8008852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008856:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8008a14 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800885a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800885e:	4b6a      	ldr	r3, [pc, #424]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008866:	ee07 3a90 	vmov	s15, r3
 800886a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800886e:	ed97 6a03 	vldr	s12, [r7, #12]
 8008872:	eddf 5a67 	vldr	s11, [pc, #412]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800887a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800887e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800888a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800888e:	e065      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008890:	697b      	ldr	r3, [r7, #20]
 8008892:	ee07 3a90 	vmov	s15, r3
 8008896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800889a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800889e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088a2:	4b59      	ldr	r3, [pc, #356]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088aa:	ee07 3a90 	vmov	s15, r3
 80088ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088b2:	ed97 6a03 	vldr	s12, [r7, #12]
 80088b6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80088d2:	e043      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80088d4:	697b      	ldr	r3, [r7, #20]
 80088d6:	ee07 3a90 	vmov	s15, r3
 80088da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088de:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8008a1c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80088e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088e6:	4b48      	ldr	r3, [pc, #288]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088ee:	ee07 3a90 	vmov	s15, r3
 80088f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088f6:	ed97 6a03 	vldr	s12, [r7, #12]
 80088fa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80088fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800890a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800890e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8008916:	e021      	b.n	800895c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	ee07 3a90 	vmov	s15, r3
 800891e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008922:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8008a18 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8008926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800892a:	4b37      	ldr	r3, [pc, #220]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008932:	ee07 3a90 	vmov	s15, r3
 8008936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893a:	ed97 6a03 	vldr	s12, [r7, #12]
 800893e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8008a10 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8008942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800894e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800895a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800895c:	4b2a      	ldr	r3, [pc, #168]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800895e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008960:	0a5b      	lsrs	r3, r3, #9
 8008962:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008966:	ee07 3a90 	vmov	s15, r3
 800896a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800896e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008972:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008976:	edd7 6a07 	vldr	s13, [r7, #28]
 800897a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800897e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008982:	ee17 2a90 	vmov	r2, s15
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800898a:	4b1f      	ldr	r3, [pc, #124]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800898c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898e:	0c1b      	lsrs	r3, r3, #16
 8008990:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008994:	ee07 3a90 	vmov	s15, r3
 8008998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800899c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089a0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80089a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089b0:	ee17 2a90 	vmov	r2, s15
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 80089b8:	4b13      	ldr	r3, [pc, #76]	; (8008a08 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80089ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089c2:	ee07 3a90 	vmov	s15, r3
 80089c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80089ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 80089d2:	edd7 6a07 	vldr	s13, [r7, #28]
 80089d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089de:	ee17 2a90 	vmov	r2, s15
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80089e6:	e008      	b.n	80089fa <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2200      	movs	r2, #0
 80089ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	2200      	movs	r2, #0
 80089f2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	609a      	str	r2, [r3, #8]
}
 80089fa:	bf00      	nop
 80089fc:	3724      	adds	r7, #36	; 0x24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a04:	4770      	bx	lr
 8008a06:	bf00      	nop
 8008a08:	58024400 	.word	0x58024400
 8008a0c:	03d09000 	.word	0x03d09000
 8008a10:	46000000 	.word	0x46000000
 8008a14:	4c742400 	.word	0x4c742400
 8008a18:	4a742400 	.word	0x4a742400
 8008a1c:	4af42400 	.word	0x4af42400

08008a20 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b084      	sub	sp, #16
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008a2e:	4b53      	ldr	r3, [pc, #332]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a32:	f003 0303 	and.w	r3, r3, #3
 8008a36:	2b03      	cmp	r3, #3
 8008a38:	d101      	bne.n	8008a3e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8008a3a:	2301      	movs	r3, #1
 8008a3c:	e099      	b.n	8008b72 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8008a3e:	4b4f      	ldr	r3, [pc, #316]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	4a4e      	ldr	r2, [pc, #312]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a4a:	f7fa faa5 	bl	8002f98 <HAL_GetTick>
 8008a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a50:	e008      	b.n	8008a64 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008a52:	f7fa faa1 	bl	8002f98 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d901      	bls.n	8008a64 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008a60:	2303      	movs	r3, #3
 8008a62:	e086      	b.n	8008b72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8008a64:	4b45      	ldr	r3, [pc, #276]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1f0      	bne.n	8008a52 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8008a70:	4b42      	ldr	r3, [pc, #264]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a74:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	031b      	lsls	r3, r3, #12
 8008a7e:	493f      	ldr	r1, [pc, #252]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008a80:	4313      	orrs	r3, r2
 8008a82:	628b      	str	r3, [r1, #40]	; 0x28
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	685b      	ldr	r3, [r3, #4]
 8008a88:	3b01      	subs	r3, #1
 8008a8a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	3b01      	subs	r3, #1
 8008a94:	025b      	lsls	r3, r3, #9
 8008a96:	b29b      	uxth	r3, r3
 8008a98:	431a      	orrs	r2, r3
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	68db      	ldr	r3, [r3, #12]
 8008a9e:	3b01      	subs	r3, #1
 8008aa0:	041b      	lsls	r3, r3, #16
 8008aa2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	3b01      	subs	r3, #1
 8008aae:	061b      	lsls	r3, r3, #24
 8008ab0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008ab4:	4931      	ldr	r1, [pc, #196]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8008aba:	4b30      	ldr	r3, [pc, #192]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008abe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	492d      	ldr	r1, [pc, #180]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ac8:	4313      	orrs	r3, r2
 8008aca:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8008acc:	4b2b      	ldr	r3, [pc, #172]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad0:	f023 0220 	bic.w	r2, r3, #32
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	699b      	ldr	r3, [r3, #24]
 8008ad8:	4928      	ldr	r1, [pc, #160]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ada:	4313      	orrs	r3, r2
 8008adc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8008ade:	4b27      	ldr	r3, [pc, #156]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ae2:	4a26      	ldr	r2, [pc, #152]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008ae4:	f023 0310 	bic.w	r3, r3, #16
 8008ae8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8008aea:	4b24      	ldr	r3, [pc, #144]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008aec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008aee:	4b24      	ldr	r3, [pc, #144]	; (8008b80 <RCCEx_PLL2_Config+0x160>)
 8008af0:	4013      	ands	r3, r2
 8008af2:	687a      	ldr	r2, [r7, #4]
 8008af4:	69d2      	ldr	r2, [r2, #28]
 8008af6:	00d2      	lsls	r2, r2, #3
 8008af8:	4920      	ldr	r1, [pc, #128]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008afa:	4313      	orrs	r3, r2
 8008afc:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8008afe:	4b1f      	ldr	r3, [pc, #124]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b02:	4a1e      	ldr	r2, [pc, #120]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b04:	f043 0310 	orr.w	r3, r3, #16
 8008b08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008b0a:	683b      	ldr	r3, [r7, #0]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d106      	bne.n	8008b1e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8008b10:	4b1a      	ldr	r3, [pc, #104]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b14:	4a19      	ldr	r2, [pc, #100]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b16:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008b1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b1c:	e00f      	b.n	8008b3e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	2b01      	cmp	r3, #1
 8008b22:	d106      	bne.n	8008b32 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8008b24:	4b15      	ldr	r3, [pc, #84]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	4a14      	ldr	r2, [pc, #80]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008b2e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008b30:	e005      	b.n	8008b3e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8008b32:	4b12      	ldr	r3, [pc, #72]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	4a11      	ldr	r2, [pc, #68]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b38:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008b3c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8008b3e:	4b0f      	ldr	r3, [pc, #60]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a0e      	ldr	r2, [pc, #56]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b44:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b4a:	f7fa fa25 	bl	8002f98 <HAL_GetTick>
 8008b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b50:	e008      	b.n	8008b64 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8008b52:	f7fa fa21 	bl	8002f98 <HAL_GetTick>
 8008b56:	4602      	mov	r2, r0
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	1ad3      	subs	r3, r2, r3
 8008b5c:	2b02      	cmp	r3, #2
 8008b5e:	d901      	bls.n	8008b64 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008b60:	2303      	movs	r3, #3
 8008b62:	e006      	b.n	8008b72 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8008b64:	4b05      	ldr	r3, [pc, #20]	; (8008b7c <RCCEx_PLL2_Config+0x15c>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b6c:	2b00      	cmp	r3, #0
 8008b6e:	d0f0      	beq.n	8008b52 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8008b70:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b72:	4618      	mov	r0, r3
 8008b74:	3710      	adds	r7, #16
 8008b76:	46bd      	mov	sp, r7
 8008b78:	bd80      	pop	{r7, pc}
 8008b7a:	bf00      	nop
 8008b7c:	58024400 	.word	0x58024400
 8008b80:	ffff0007 	.word	0xffff0007

08008b84 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b084      	sub	sp, #16
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008b8e:	2300      	movs	r3, #0
 8008b90:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8008b92:	4b53      	ldr	r3, [pc, #332]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008b94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b96:	f003 0303 	and.w	r3, r3, #3
 8008b9a:	2b03      	cmp	r3, #3
 8008b9c:	d101      	bne.n	8008ba2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	e099      	b.n	8008cd6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8008ba2:	4b4f      	ldr	r3, [pc, #316]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a4e      	ldr	r2, [pc, #312]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008bae:	f7fa f9f3 	bl	8002f98 <HAL_GetTick>
 8008bb2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bb4:	e008      	b.n	8008bc8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008bb6:	f7fa f9ef 	bl	8002f98 <HAL_GetTick>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	1ad3      	subs	r3, r2, r3
 8008bc0:	2b02      	cmp	r3, #2
 8008bc2:	d901      	bls.n	8008bc8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	e086      	b.n	8008cd6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8008bc8:	4b45      	ldr	r3, [pc, #276]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d1f0      	bne.n	8008bb6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8008bd4:	4b42      	ldr	r3, [pc, #264]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008bd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bd8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	051b      	lsls	r3, r3, #20
 8008be2:	493f      	ldr	r1, [pc, #252]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008be4:	4313      	orrs	r3, r2
 8008be6:	628b      	str	r3, [r1, #40]	; 0x28
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	3b01      	subs	r3, #1
 8008bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	689b      	ldr	r3, [r3, #8]
 8008bf6:	3b01      	subs	r3, #1
 8008bf8:	025b      	lsls	r3, r3, #9
 8008bfa:	b29b      	uxth	r3, r3
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	68db      	ldr	r3, [r3, #12]
 8008c02:	3b01      	subs	r3, #1
 8008c04:	041b      	lsls	r3, r3, #16
 8008c06:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008c0a:	431a      	orrs	r2, r3
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	691b      	ldr	r3, [r3, #16]
 8008c10:	3b01      	subs	r3, #1
 8008c12:	061b      	lsls	r3, r3, #24
 8008c14:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008c18:	4931      	ldr	r1, [pc, #196]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c1a:	4313      	orrs	r3, r2
 8008c1c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8008c1e:	4b30      	ldr	r3, [pc, #192]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c22:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	695b      	ldr	r3, [r3, #20]
 8008c2a:	492d      	ldr	r1, [pc, #180]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8008c30:	4b2b      	ldr	r3, [pc, #172]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	699b      	ldr	r3, [r3, #24]
 8008c3c:	4928      	ldr	r1, [pc, #160]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c3e:	4313      	orrs	r3, r2
 8008c40:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8008c42:	4b27      	ldr	r3, [pc, #156]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c46:	4a26      	ldr	r2, [pc, #152]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c4c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8008c4e:	4b24      	ldr	r3, [pc, #144]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c52:	4b24      	ldr	r3, [pc, #144]	; (8008ce4 <RCCEx_PLL3_Config+0x160>)
 8008c54:	4013      	ands	r3, r2
 8008c56:	687a      	ldr	r2, [r7, #4]
 8008c58:	69d2      	ldr	r2, [r2, #28]
 8008c5a:	00d2      	lsls	r2, r2, #3
 8008c5c:	4920      	ldr	r1, [pc, #128]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8008c62:	4b1f      	ldr	r3, [pc, #124]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c66:	4a1e      	ldr	r2, [pc, #120]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c6c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d106      	bne.n	8008c82 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8008c74:	4b1a      	ldr	r3, [pc, #104]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c78:	4a19      	ldr	r2, [pc, #100]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c7a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008c7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c80:	e00f      	b.n	8008ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8008c82:	683b      	ldr	r3, [r7, #0]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d106      	bne.n	8008c96 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8008c88:	4b15      	ldr	r3, [pc, #84]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c8c:	4a14      	ldr	r2, [pc, #80]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c8e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008c92:	62d3      	str	r3, [r2, #44]	; 0x2c
 8008c94:	e005      	b.n	8008ca2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8008c96:	4b12      	ldr	r3, [pc, #72]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c9a:	4a11      	ldr	r2, [pc, #68]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008c9c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008ca0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8008ca2:	4b0f      	ldr	r3, [pc, #60]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a0e      	ldr	r2, [pc, #56]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008ca8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008cac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008cae:	f7fa f973 	bl	8002f98 <HAL_GetTick>
 8008cb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cb4:	e008      	b.n	8008cc8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8008cb6:	f7fa f96f 	bl	8002f98 <HAL_GetTick>
 8008cba:	4602      	mov	r2, r0
 8008cbc:	68bb      	ldr	r3, [r7, #8]
 8008cbe:	1ad3      	subs	r3, r2, r3
 8008cc0:	2b02      	cmp	r3, #2
 8008cc2:	d901      	bls.n	8008cc8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8008cc4:	2303      	movs	r3, #3
 8008cc6:	e006      	b.n	8008cd6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8008cc8:	4b05      	ldr	r3, [pc, #20]	; (8008ce0 <RCCEx_PLL3_Config+0x15c>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d0f0      	beq.n	8008cb6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8008cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3710      	adds	r7, #16
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	58024400 	.word	0x58024400
 8008ce4:	ffff0007 	.word	0xffff0007

08008ce8 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b084      	sub	sp, #16
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e0f1      	b.n	8008ede <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	4a78      	ldr	r2, [pc, #480]	; (8008ee8 <HAL_SPI_Init+0x200>)
 8008d06:	4293      	cmp	r3, r2
 8008d08:	d00f      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	4a77      	ldr	r2, [pc, #476]	; (8008eec <HAL_SPI_Init+0x204>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d00a      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4a75      	ldr	r2, [pc, #468]	; (8008ef0 <HAL_SPI_Init+0x208>)
 8008d1a:	4293      	cmp	r3, r2
 8008d1c:	d005      	beq.n	8008d2a <HAL_SPI_Init+0x42>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	68db      	ldr	r3, [r3, #12]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d901      	bls.n	8008d2a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e0d9      	b.n	8008ede <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fba2 	bl	8009474 <SPI_GetPacketSize>
 8008d30:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a6c      	ldr	r2, [pc, #432]	; (8008ee8 <HAL_SPI_Init+0x200>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d00c      	beq.n	8008d56 <HAL_SPI_Init+0x6e>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a6a      	ldr	r2, [pc, #424]	; (8008eec <HAL_SPI_Init+0x204>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d007      	beq.n	8008d56 <HAL_SPI_Init+0x6e>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a69      	ldr	r2, [pc, #420]	; (8008ef0 <HAL_SPI_Init+0x208>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d002      	beq.n	8008d56 <HAL_SPI_Init+0x6e>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	2b08      	cmp	r3, #8
 8008d54:	d811      	bhi.n	8008d7a <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8008d5a:	4a63      	ldr	r2, [pc, #396]	; (8008ee8 <HAL_SPI_Init+0x200>)
 8008d5c:	4293      	cmp	r3, r2
 8008d5e:	d009      	beq.n	8008d74 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a61      	ldr	r2, [pc, #388]	; (8008eec <HAL_SPI_Init+0x204>)
 8008d66:	4293      	cmp	r3, r2
 8008d68:	d004      	beq.n	8008d74 <HAL_SPI_Init+0x8c>
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a60      	ldr	r2, [pc, #384]	; (8008ef0 <HAL_SPI_Init+0x208>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d104      	bne.n	8008d7e <HAL_SPI_Init+0x96>
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	2b10      	cmp	r3, #16
 8008d78:	d901      	bls.n	8008d7e <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 8008d7a:	2301      	movs	r3, #1
 8008d7c:	e0af      	b.n	8008ede <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008d84:	b2db      	uxtb	r3, r3
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d106      	bne.n	8008d98 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008d92:	6878      	ldr	r0, [r7, #4]
 8008d94:	f7f9 fe3a 	bl	8002a0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2202      	movs	r2, #2
 8008d9c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681a      	ldr	r2, [r3, #0]
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	f022 0201 	bic.w	r2, r2, #1
 8008dae:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	689b      	ldr	r3, [r3, #8]
 8008db6:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8008dba:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	699b      	ldr	r3, [r3, #24]
 8008dc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008dc4:	d119      	bne.n	8008dfa <HAL_SPI_Init+0x112>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	685b      	ldr	r3, [r3, #4]
 8008dca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008dce:	d103      	bne.n	8008dd8 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	d008      	beq.n	8008dea <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d10c      	bne.n	8008dfa <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 8008de4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008de8:	d107      	bne.n	8008dfa <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	681a      	ldr	r2, [r3, #0]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008df8:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	69da      	ldr	r2, [r3, #28]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e02:	431a      	orrs	r2, r3
 8008e04:	68bb      	ldr	r3, [r7, #8]
 8008e06:	431a      	orrs	r2, r3
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0c:	ea42 0103 	orr.w	r1, r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	68da      	ldr	r2, [r3, #12]
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	430a      	orrs	r2, r1
 8008e1a:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e24:	431a      	orrs	r2, r3
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2a:	431a      	orrs	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	431a      	orrs	r2, r3
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	691b      	ldr	r3, [r3, #16]
 8008e36:	431a      	orrs	r2, r3
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	431a      	orrs	r2, r3
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a1b      	ldr	r3, [r3, #32]
 8008e42:	431a      	orrs	r2, r3
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	685b      	ldr	r3, [r3, #4]
 8008e48:	431a      	orrs	r2, r3
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e4e:	431a      	orrs	r2, r3
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	689b      	ldr	r3, [r3, #8]
 8008e54:	431a      	orrs	r2, r3
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e5a:	ea42 0103 	orr.w	r1, r2, r3
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	430a      	orrs	r2, r1
 8008e68:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d113      	bne.n	8008e9a <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	689b      	ldr	r3, [r3, #8]
 8008e78:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e84:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008e98:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f022 0201 	bic.w	r2, r2, #1
 8008ea8:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	685b      	ldr	r3, [r3, #4]
 8008eae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d00a      	beq.n	8008ecc <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2201      	movs	r2, #1
 8008ed8:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 8008edc:	2300      	movs	r3, #0
}
 8008ede:	4618      	mov	r0, r3
 8008ee0:	3710      	adds	r7, #16
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}
 8008ee6:	bf00      	nop
 8008ee8:	40013000 	.word	0x40013000
 8008eec:	40003800 	.word	0x40003800
 8008ef0:	40003c00 	.word	0x40003c00

08008ef4 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b08a      	sub	sp, #40	; 0x28
 8008ef8:	af02      	add	r7, sp, #8
 8008efa:	60f8      	str	r0, [r7, #12]
 8008efc:	60b9      	str	r1, [r7, #8]
 8008efe:	603b      	str	r3, [r7, #0]
 8008f00:	4613      	mov	r3, r2
 8008f02:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3320      	adds	r3, #32
 8008f0a:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d101      	bne.n	8008f1e <HAL_SPI_Transmit+0x2a>
 8008f1a:	2302      	movs	r3, #2
 8008f1c:	e1d7      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2201      	movs	r2, #1
 8008f22:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8008f26:	f7fa f837 	bl	8002f98 <HAL_GetTick>
 8008f2a:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d007      	beq.n	8008f48 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 8008f38:	2302      	movs	r3, #2
 8008f3a:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008f44:	7efb      	ldrb	r3, [r7, #27]
 8008f46:	e1c2      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
  }

  if ((pData == NULL) || (Size == 0UL))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d002      	beq.n	8008f54 <HAL_SPI_Transmit+0x60>
 8008f4e:	88fb      	ldrh	r3, [r7, #6]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d107      	bne.n	8008f64 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 8008f54:	2301      	movs	r3, #1
 8008f56:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	2200      	movs	r2, #0
 8008f5c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 8008f60:	7efb      	ldrb	r3, [r7, #27]
 8008f62:	e1b4      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	2203      	movs	r2, #3
 8008f68:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	2200      	movs	r2, #0
 8008f70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	68ba      	ldr	r2, [r7, #8]
 8008f78:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	88fa      	ldrh	r2, [r7, #6]
 8008f7e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	88fa      	ldrh	r2, [r7, #6]
 8008f86:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2200      	movs	r2, #0
 8008f8e:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2200      	movs	r2, #0
 8008f94:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	2200      	movs	r2, #0
 8008fa4:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	2200      	movs	r2, #0
 8008faa:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	689b      	ldr	r3, [r3, #8]
 8008fb0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 8008fb4:	d107      	bne.n	8008fc6 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681a      	ldr	r2, [r3, #0]
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008fc4:	601a      	str	r2, [r3, #0]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	685a      	ldr	r2, [r3, #4]
 8008fcc:	4b96      	ldr	r3, [pc, #600]	; (8009228 <HAL_SPI_Transmit+0x334>)
 8008fce:	4013      	ands	r3, r2
 8008fd0:	88f9      	ldrh	r1, [r7, #6]
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	6812      	ldr	r2, [r2, #0]
 8008fd6:	430b      	orrs	r3, r1
 8008fd8:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0201 	orr.w	r2, r2, #1
 8008fe8:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8008fea:	68fb      	ldr	r3, [r7, #12]
 8008fec:	685b      	ldr	r3, [r3, #4]
 8008fee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008ff2:	d107      	bne.n	8009004 <HAL_SPI_Transmit+0x110>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	681a      	ldr	r2, [r3, #0]
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009002:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b0f      	cmp	r3, #15
 800900a:	d947      	bls.n	800909c <HAL_SPI_Transmit+0x1a8>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800900c:	e03f      	b.n	800908e <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	695b      	ldr	r3, [r3, #20]
 8009014:	f003 0302 	and.w	r3, r3, #2
 8009018:	2b02      	cmp	r3, #2
 800901a:	d114      	bne.n	8009046 <HAL_SPI_Transmit+0x152>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	6812      	ldr	r2, [r2, #0]
 8009026:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800902c:	1d1a      	adds	r2, r3, #4
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009038:	b29b      	uxth	r3, r3
 800903a:	3b01      	subs	r3, #1
 800903c:	b29a      	uxth	r2, r3
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009044:	e023      	b.n	800908e <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009046:	f7f9 ffa7 	bl	8002f98 <HAL_GetTick>
 800904a:	4602      	mov	r2, r0
 800904c:	697b      	ldr	r3, [r7, #20]
 800904e:	1ad3      	subs	r3, r2, r3
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d803      	bhi.n	800905e <HAL_SPI_Transmit+0x16a>
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f1b3 3fff 	cmp.w	r3, #4294967295
 800905c:	d102      	bne.n	8009064 <HAL_SPI_Transmit+0x170>
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d114      	bne.n	800908e <HAL_SPI_Transmit+0x19a>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 8009064:	68f8      	ldr	r0, [r7, #12]
 8009066:	f000 f937 	bl	80092d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	2200      	movs	r2, #0
 800906e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009078:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	2201      	movs	r2, #1
 8009086:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e11f      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 800908e:	68fb      	ldr	r3, [r7, #12]
 8009090:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009094:	b29b      	uxth	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1b9      	bne.n	800900e <HAL_SPI_Transmit+0x11a>
 800909a:	e0f2      	b.n	8009282 <HAL_SPI_Transmit+0x38e>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	68db      	ldr	r3, [r3, #12]
 80090a0:	2b07      	cmp	r3, #7
 80090a2:	f240 80e7 	bls.w	8009274 <HAL_SPI_Transmit+0x380>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 80090a6:	e05d      	b.n	8009164 <HAL_SPI_Transmit+0x270>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	681b      	ldr	r3, [r3, #0]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b02      	cmp	r3, #2
 80090b4:	d132      	bne.n	800911c <HAL_SPI_Transmit+0x228>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090bc:	b29b      	uxth	r3, r3
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d918      	bls.n	80090f4 <HAL_SPI_Transmit+0x200>
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d014      	beq.n	80090f4 <HAL_SPI_Transmit+0x200>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	6812      	ldr	r2, [r2, #0]
 80090d4:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80090d6:	68fb      	ldr	r3, [r7, #12]
 80090d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090da:	1d1a      	adds	r2, r3, #4
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80090e6:	b29b      	uxth	r3, r3
 80090e8:	3b02      	subs	r3, #2
 80090ea:	b29a      	uxth	r2, r3
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80090f2:	e037      	b.n	8009164 <HAL_SPI_Transmit+0x270>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090f8:	881a      	ldrh	r2, [r3, #0]
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009102:	1c9a      	adds	r2, r3, #2
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800910e:	b29b      	uxth	r3, r3
 8009110:	3b01      	subs	r3, #1
 8009112:	b29a      	uxth	r2, r3
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800911a:	e023      	b.n	8009164 <HAL_SPI_Transmit+0x270>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800911c:	f7f9 ff3c 	bl	8002f98 <HAL_GetTick>
 8009120:	4602      	mov	r2, r0
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	1ad3      	subs	r3, r2, r3
 8009126:	683a      	ldr	r2, [r7, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d803      	bhi.n	8009134 <HAL_SPI_Transmit+0x240>
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009132:	d102      	bne.n	800913a <HAL_SPI_Transmit+0x246>
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	2b00      	cmp	r3, #0
 8009138:	d114      	bne.n	8009164 <HAL_SPI_Transmit+0x270>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800913a:	68f8      	ldr	r0, [r7, #12]
 800913c:	f000 f8cc 	bl	80092d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800914e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2201      	movs	r2, #1
 800915c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009160:	2303      	movs	r3, #3
 8009162:	e0b4      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800916a:	b29b      	uxth	r3, r3
 800916c:	2b00      	cmp	r3, #0
 800916e:	d19b      	bne.n	80090a8 <HAL_SPI_Transmit+0x1b4>
 8009170:	e087      	b.n	8009282 <HAL_SPI_Transmit+0x38e>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	695b      	ldr	r3, [r3, #20]
 8009178:	f003 0302 	and.w	r3, r3, #2
 800917c:	2b02      	cmp	r3, #2
 800917e:	d155      	bne.n	800922c <HAL_SPI_Transmit+0x338>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009186:	b29b      	uxth	r3, r3
 8009188:	2b03      	cmp	r3, #3
 800918a:	d918      	bls.n	80091be <HAL_SPI_Transmit+0x2ca>
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009190:	2b40      	cmp	r3, #64	; 0x40
 8009192:	d914      	bls.n	80091be <HAL_SPI_Transmit+0x2ca>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((uint32_t *)hspi->pTxBuffPtr);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	6812      	ldr	r2, [r2, #0]
 800919e:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091a4:	1d1a      	adds	r2, r3, #4
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091b0:	b29b      	uxth	r3, r3
 80091b2:	3b04      	subs	r3, #4
 80091b4:	b29a      	uxth	r2, r3
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80091bc:	e05a      	b.n	8009274 <HAL_SPI_Transmit+0x380>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091c4:	b29b      	uxth	r3, r3
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d917      	bls.n	80091fa <HAL_SPI_Transmit+0x306>
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d013      	beq.n	80091fa <HAL_SPI_Transmit+0x306>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((uint16_t *)hspi->pTxBuffPtr);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091d6:	881a      	ldrh	r2, [r3, #0]
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80091e0:	1c9a      	adds	r2, r3, #2
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	3b02      	subs	r3, #2
 80091f0:	b29a      	uxth	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 80091f8:	e03c      	b.n	8009274 <HAL_SPI_Transmit+0x380>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((uint8_t *)hspi->pTxBuffPtr);
 80091fa:	68fb      	ldr	r3, [r7, #12]
 80091fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	3320      	adds	r3, #32
 8009204:	7812      	ldrb	r2, [r2, #0]
 8009206:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800920c:	1c5a      	adds	r2, r3, #1
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8009218:	b29b      	uxth	r3, r3
 800921a:	3b01      	subs	r3, #1
 800921c:	b29a      	uxth	r2, r3
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 8009224:	e026      	b.n	8009274 <HAL_SPI_Transmit+0x380>
 8009226:	bf00      	nop
 8009228:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800922c:	f7f9 feb4 	bl	8002f98 <HAL_GetTick>
 8009230:	4602      	mov	r2, r0
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	1ad3      	subs	r3, r2, r3
 8009236:	683a      	ldr	r2, [r7, #0]
 8009238:	429a      	cmp	r2, r3
 800923a:	d803      	bhi.n	8009244 <HAL_SPI_Transmit+0x350>
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009242:	d102      	bne.n	800924a <HAL_SPI_Transmit+0x356>
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	2b00      	cmp	r3, #0
 8009248:	d114      	bne.n	8009274 <HAL_SPI_Transmit+0x380>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f000 f844 	bl	80092d8 <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2200      	movs	r2, #0
 8009254:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800925e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 8009268:	68fb      	ldr	r3, [r7, #12]
 800926a:	2201      	movs	r2, #1
 800926c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 8009270:	2303      	movs	r3, #3
 8009272:	e02c      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
    while (hspi->TxXferCount > 0UL)
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800927a:	b29b      	uxth	r3, r3
 800927c:	2b00      	cmp	r3, #0
 800927e:	f47f af78 	bne.w	8009172 <HAL_SPI_Transmit+0x27e>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, tickstart, Timeout) != HAL_OK)
 8009282:	683b      	ldr	r3, [r7, #0]
 8009284:	9300      	str	r3, [sp, #0]
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2200      	movs	r2, #0
 800928a:	2108      	movs	r1, #8
 800928c:	68f8      	ldr	r0, [r7, #12]
 800928e:	f000 f8c3 	bl	8009418 <SPI_WaitOnFlagUntilTimeout>
 8009292:	4603      	mov	r3, r0
 8009294:	2b00      	cmp	r3, #0
 8009296:	d007      	beq.n	80092a8 <HAL_SPI_Transmit+0x3b4>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800929e:	f043 0220 	orr.w	r2, r3, #32
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 80092a8:	68f8      	ldr	r0, [r7, #12]
 80092aa:	f000 f815 	bl	80092d8 <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2200      	movs	r2, #0
 80092b2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	2201      	movs	r2, #1
 80092ba:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d001      	beq.n	80092cc <HAL_SPI_Transmit+0x3d8>
  {
    return HAL_ERROR;
 80092c8:	2301      	movs	r3, #1
 80092ca:	e000      	b.n	80092ce <HAL_SPI_Transmit+0x3da>
  }
  return errorcode;
 80092cc:	7efb      	ldrb	r3, [r7, #27]
}
 80092ce:	4618      	mov	r0, r3
 80092d0:	3720      	adds	r7, #32
 80092d2:	46bd      	mov	sp, r7
 80092d4:	bd80      	pop	{r7, pc}
 80092d6:	bf00      	nop

080092d8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 80092d8:	b480      	push	{r7}
 80092da:	b085      	sub	sp, #20
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	695b      	ldr	r3, [r3, #20]
 80092e6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	699a      	ldr	r2, [r3, #24]
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f042 0208 	orr.w	r2, r2, #8
 80092f6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	699a      	ldr	r2, [r3, #24]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0210 	orr.w	r2, r2, #16
 8009306:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f022 0201 	bic.w	r2, r2, #1
 8009316:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	6919      	ldr	r1, [r3, #16]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	4b3c      	ldr	r3, [pc, #240]	; (8009414 <SPI_CloseTransfer+0x13c>)
 8009324:	400b      	ands	r3, r1
 8009326:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	689a      	ldr	r2, [r3, #8]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8009336:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800933e:	b2db      	uxtb	r3, r3
 8009340:	2b04      	cmp	r3, #4
 8009342:	d014      	beq.n	800936e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f003 0320 	and.w	r3, r3, #32
 800934a:	2b00      	cmp	r3, #0
 800934c:	d00f      	beq.n	800936e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009354:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	699a      	ldr	r2, [r3, #24]
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f042 0220 	orr.w	r2, r2, #32
 800936c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009374:	b2db      	uxtb	r3, r3
 8009376:	2b03      	cmp	r3, #3
 8009378:	d014      	beq.n	80093a4 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00f      	beq.n	80093a4 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800938a:	f043 0204 	orr.w	r2, r3, #4
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	699a      	ldr	r2, [r3, #24]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093a2:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00f      	beq.n	80093ce <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093b4:	f043 0201 	orr.w	r2, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	699a      	ldr	r2, [r3, #24]
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80093cc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d00f      	beq.n	80093f8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093de:	f043 0208 	orr.w	r2, r3, #8
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	699a      	ldr	r2, [r3, #24]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80093f6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2200      	movs	r2, #0
 80093fc:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	2200      	movs	r2, #0
 8009404:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 8009408:	bf00      	nop
 800940a:	3714      	adds	r7, #20
 800940c:	46bd      	mov	sp, r7
 800940e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009412:	4770      	bx	lr
 8009414:	fffffc90 	.word	0xfffffc90

08009418 <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Tickstart, uint32_t Timeout)
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	60f8      	str	r0, [r7, #12]
 8009420:	60b9      	str	r1, [r7, #8]
 8009422:	603b      	str	r3, [r7, #0]
 8009424:	4613      	mov	r3, r2
 8009426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 8009428:	e010      	b.n	800944c <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800942a:	f7f9 fdb5 	bl	8002f98 <HAL_GetTick>
 800942e:	4602      	mov	r2, r0
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	69ba      	ldr	r2, [r7, #24]
 8009436:	429a      	cmp	r2, r3
 8009438:	d803      	bhi.n	8009442 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800943a:	69bb      	ldr	r3, [r7, #24]
 800943c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009440:	d102      	bne.n	8009448 <SPI_WaitOnFlagUntilTimeout+0x30>
 8009442:	69bb      	ldr	r3, [r7, #24]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d101      	bne.n	800944c <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 8009448:	2303      	movs	r3, #3
 800944a:	e00f      	b.n	800946c <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	695a      	ldr	r2, [r3, #20]
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	4013      	ands	r3, r2
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	429a      	cmp	r2, r3
 800945a:	bf0c      	ite	eq
 800945c:	2301      	moveq	r3, #1
 800945e:	2300      	movne	r3, #0
 8009460:	b2db      	uxtb	r3, r3
 8009462:	461a      	mov	r2, r3
 8009464:	79fb      	ldrb	r3, [r7, #7]
 8009466:	429a      	cmp	r2, r3
 8009468:	d0df      	beq.n	800942a <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800946a:	2300      	movs	r3, #0
}
 800946c:	4618      	mov	r0, r3
 800946e:	3710      	adds	r7, #16
 8009470:	46bd      	mov	sp, r7
 8009472:	bd80      	pop	{r7, pc}

08009474 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 8009474:	b480      	push	{r7}
 8009476:	b085      	sub	sp, #20
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009480:	095b      	lsrs	r3, r3, #5
 8009482:	3301      	adds	r3, #1
 8009484:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	68db      	ldr	r3, [r3, #12]
 800948a:	3301      	adds	r3, #1
 800948c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	3307      	adds	r3, #7
 8009492:	08db      	lsrs	r3, r3, #3
 8009494:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	68fa      	ldr	r2, [r7, #12]
 800949a:	fb02 f303 	mul.w	r3, r2, r3
}
 800949e:	4618      	mov	r0, r3
 80094a0:	3714      	adds	r7, #20
 80094a2:	46bd      	mov	sp, r7
 80094a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a8:	4770      	bx	lr

080094aa <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b082      	sub	sp, #8
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2b00      	cmp	r3, #0
 80094b6:	d101      	bne.n	80094bc <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80094b8:	2301      	movs	r3, #1
 80094ba:	e042      	b.n	8009542 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d106      	bne.n	80094d4 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f7f9 fb08 	bl	8002ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2224      	movs	r2, #36	; 0x24
 80094d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	681a      	ldr	r2, [r3, #0]
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f022 0201 	bic.w	r2, r2, #1
 80094ea:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ec:	6878      	ldr	r0, [r7, #4]
 80094ee:	f000 fbeb 	bl	8009cc8 <UART_SetConfig>
 80094f2:	4603      	mov	r3, r0
 80094f4:	2b01      	cmp	r3, #1
 80094f6:	d101      	bne.n	80094fc <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80094f8:	2301      	movs	r3, #1
 80094fa:	e022      	b.n	8009542 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009500:	2b00      	cmp	r3, #0
 8009502:	d002      	beq.n	800950a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 f947 	bl	800a798 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	685a      	ldr	r2, [r3, #4]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009518:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	689a      	ldr	r2, [r3, #8]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009528:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800953a:	6878      	ldr	r0, [r7, #4]
 800953c:	f001 f9ce 	bl	800a8dc <UART_CheckIdleState>
 8009540:	4603      	mov	r3, r0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3708      	adds	r7, #8
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
	...

0800954c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b0ba      	sub	sp, #232	; 0xe8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	69db      	ldr	r3, [r3, #28]
 800955a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	689b      	ldr	r3, [r3, #8]
 800956e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8009572:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8009576:	f640 030f 	movw	r3, #2063	; 0x80f
 800957a:	4013      	ands	r3, r2
 800957c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8009580:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009584:	2b00      	cmp	r3, #0
 8009586:	d11b      	bne.n	80095c0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8009588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800958c:	f003 0320 	and.w	r3, r3, #32
 8009590:	2b00      	cmp	r3, #0
 8009592:	d015      	beq.n	80095c0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8009594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009598:	f003 0320 	and.w	r3, r3, #32
 800959c:	2b00      	cmp	r3, #0
 800959e:	d105      	bne.n	80095ac <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80095a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80095a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d009      	beq.n	80095c0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	f000 835a 	beq.w	8009c6a <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80095ba:	6878      	ldr	r0, [r7, #4]
 80095bc:	4798      	blx	r3
      }
      return;
 80095be:	e354      	b.n	8009c6a <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80095c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	f000 811f 	beq.w	8009808 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80095ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80095ce:	4b8b      	ldr	r3, [pc, #556]	; (80097fc <HAL_UART_IRQHandler+0x2b0>)
 80095d0:	4013      	ands	r3, r2
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d106      	bne.n	80095e4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80095d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80095da:	4b89      	ldr	r3, [pc, #548]	; (8009800 <HAL_UART_IRQHandler+0x2b4>)
 80095dc:	4013      	ands	r3, r2
 80095de:	2b00      	cmp	r3, #0
 80095e0:	f000 8112 	beq.w	8009808 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095e4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80095e8:	f003 0301 	and.w	r3, r3, #1
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d011      	beq.n	8009614 <HAL_UART_IRQHandler+0xc8>
 80095f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80095f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00b      	beq.n	8009614 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	2201      	movs	r2, #1
 8009602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800960a:	f043 0201 	orr.w	r2, r3, #1
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009618:	f003 0302 	and.w	r3, r3, #2
 800961c:	2b00      	cmp	r3, #0
 800961e:	d011      	beq.n	8009644 <HAL_UART_IRQHandler+0xf8>
 8009620:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009624:	f003 0301 	and.w	r3, r3, #1
 8009628:	2b00      	cmp	r3, #0
 800962a:	d00b      	beq.n	8009644 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	2202      	movs	r2, #2
 8009632:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800963a:	f043 0204 	orr.w	r2, r3, #4
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009644:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009648:	f003 0304 	and.w	r3, r3, #4
 800964c:	2b00      	cmp	r3, #0
 800964e:	d011      	beq.n	8009674 <HAL_UART_IRQHandler+0x128>
 8009650:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009654:	f003 0301 	and.w	r3, r3, #1
 8009658:	2b00      	cmp	r3, #0
 800965a:	d00b      	beq.n	8009674 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	2204      	movs	r2, #4
 8009662:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800966a:	f043 0202 	orr.w	r2, r3, #2
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8009674:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009678:	f003 0308 	and.w	r3, r3, #8
 800967c:	2b00      	cmp	r3, #0
 800967e:	d017      	beq.n	80096b0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009680:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009684:	f003 0320 	and.w	r3, r3, #32
 8009688:	2b00      	cmp	r3, #0
 800968a:	d105      	bne.n	8009698 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800968c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8009690:	4b5a      	ldr	r3, [pc, #360]	; (80097fc <HAL_UART_IRQHandler+0x2b0>)
 8009692:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8009694:	2b00      	cmp	r3, #0
 8009696:	d00b      	beq.n	80096b0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	2208      	movs	r2, #8
 800969e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096a6:	f043 0208 	orr.w	r2, r3, #8
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80096b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d012      	beq.n	80096e2 <HAL_UART_IRQHandler+0x196>
 80096bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096c0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d00c      	beq.n	80096e2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80096d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096d8:	f043 0220 	orr.w	r2, r3, #32
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 82c0 	beq.w	8009c6e <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80096ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d013      	beq.n	8009722 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80096fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80096fe:	f003 0320 	and.w	r3, r3, #32
 8009702:	2b00      	cmp	r3, #0
 8009704:	d105      	bne.n	8009712 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8009706:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800970a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d007      	beq.n	8009722 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009716:	2b00      	cmp	r3, #0
 8009718:	d003      	beq.n	8009722 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009728:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009736:	2b40      	cmp	r3, #64	; 0x40
 8009738:	d005      	beq.n	8009746 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800973a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800973e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8009742:	2b00      	cmp	r3, #0
 8009744:	d04f      	beq.n	80097e6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	f001 f9dc 	bl	800ab04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	689b      	ldr	r3, [r3, #8]
 8009752:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009756:	2b40      	cmp	r3, #64	; 0x40
 8009758:	d141      	bne.n	80097de <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	3308      	adds	r3, #8
 8009760:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009764:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009768:	e853 3f00 	ldrex	r3, [r3]
 800976c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009774:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	3308      	adds	r3, #8
 8009782:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009786:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800978a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800978e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009792:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009796:	e841 2300 	strex	r3, r2, [r1]
 800979a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800979e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d1d9      	bne.n	800975a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d013      	beq.n	80097d6 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097b2:	4a14      	ldr	r2, [pc, #80]	; (8009804 <HAL_UART_IRQHandler+0x2b8>)
 80097b4:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ba:	4618      	mov	r0, r3
 80097bc:	f7fa fbc6 	bl	8003f4c <HAL_DMA_Abort_IT>
 80097c0:	4603      	mov	r3, r0
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d017      	beq.n	80097f6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80097ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80097cc:	687a      	ldr	r2, [r7, #4]
 80097ce:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80097d0:	4610      	mov	r0, r2
 80097d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097d4:	e00f      	b.n	80097f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80097d6:	6878      	ldr	r0, [r7, #4]
 80097d8:	f000 fa60 	bl	8009c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097dc:	e00b      	b.n	80097f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fa5c 	bl	8009c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097e4:	e007      	b.n	80097f6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 fa58 	bl	8009c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	2200      	movs	r2, #0
 80097f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80097f4:	e23b      	b.n	8009c6e <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80097f6:	bf00      	nop
    return;
 80097f8:	e239      	b.n	8009c6e <HAL_UART_IRQHandler+0x722>
 80097fa:	bf00      	nop
 80097fc:	10000001 	.word	0x10000001
 8009800:	04000120 	.word	0x04000120
 8009804:	0800abd1 	.word	0x0800abd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800980c:	2b01      	cmp	r3, #1
 800980e:	f040 81ce 	bne.w	8009bae <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8009812:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009816:	f003 0310 	and.w	r3, r3, #16
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 81c7 	beq.w	8009bae <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8009820:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009824:	f003 0310 	and.w	r3, r3, #16
 8009828:	2b00      	cmp	r3, #0
 800982a:	f000 81c0 	beq.w	8009bae <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	2210      	movs	r2, #16
 8009834:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009840:	2b40      	cmp	r3, #64	; 0x40
 8009842:	f040 813b 	bne.w	8009abc <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	4a8b      	ldr	r2, [pc, #556]	; (8009a7c <HAL_UART_IRQHandler+0x530>)
 800984e:	4293      	cmp	r3, r2
 8009850:	d059      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	4a89      	ldr	r2, [pc, #548]	; (8009a80 <HAL_UART_IRQHandler+0x534>)
 800985a:	4293      	cmp	r3, r2
 800985c:	d053      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	4a87      	ldr	r2, [pc, #540]	; (8009a84 <HAL_UART_IRQHandler+0x538>)
 8009866:	4293      	cmp	r3, r2
 8009868:	d04d      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	4a85      	ldr	r2, [pc, #532]	; (8009a88 <HAL_UART_IRQHandler+0x53c>)
 8009872:	4293      	cmp	r3, r2
 8009874:	d047      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800987a:	681b      	ldr	r3, [r3, #0]
 800987c:	4a83      	ldr	r2, [pc, #524]	; (8009a8c <HAL_UART_IRQHandler+0x540>)
 800987e:	4293      	cmp	r3, r2
 8009880:	d041      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	4a81      	ldr	r2, [pc, #516]	; (8009a90 <HAL_UART_IRQHandler+0x544>)
 800988a:	4293      	cmp	r3, r2
 800988c:	d03b      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a7f      	ldr	r2, [pc, #508]	; (8009a94 <HAL_UART_IRQHandler+0x548>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d035      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	4a7d      	ldr	r2, [pc, #500]	; (8009a98 <HAL_UART_IRQHandler+0x54c>)
 80098a2:	4293      	cmp	r3, r2
 80098a4:	d02f      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	4a7b      	ldr	r2, [pc, #492]	; (8009a9c <HAL_UART_IRQHandler+0x550>)
 80098ae:	4293      	cmp	r3, r2
 80098b0:	d029      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	4a79      	ldr	r2, [pc, #484]	; (8009aa0 <HAL_UART_IRQHandler+0x554>)
 80098ba:	4293      	cmp	r3, r2
 80098bc:	d023      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	4a77      	ldr	r2, [pc, #476]	; (8009aa4 <HAL_UART_IRQHandler+0x558>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d01d      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a75      	ldr	r2, [pc, #468]	; (8009aa8 <HAL_UART_IRQHandler+0x55c>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d017      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	4a73      	ldr	r2, [pc, #460]	; (8009aac <HAL_UART_IRQHandler+0x560>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d011      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	4a71      	ldr	r2, [pc, #452]	; (8009ab0 <HAL_UART_IRQHandler+0x564>)
 80098ea:	4293      	cmp	r3, r2
 80098ec:	d00b      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	4a6f      	ldr	r2, [pc, #444]	; (8009ab4 <HAL_UART_IRQHandler+0x568>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d005      	beq.n	8009906 <HAL_UART_IRQHandler+0x3ba>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a6d      	ldr	r2, [pc, #436]	; (8009ab8 <HAL_UART_IRQHandler+0x56c>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d105      	bne.n	8009912 <HAL_UART_IRQHandler+0x3c6>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	685b      	ldr	r3, [r3, #4]
 800990e:	b29b      	uxth	r3, r3
 8009910:	e004      	b.n	800991c <HAL_UART_IRQHandler+0x3d0>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	685b      	ldr	r3, [r3, #4]
 800991a:	b29b      	uxth	r3, r3
 800991c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8009920:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009924:	2b00      	cmp	r3, #0
 8009926:	f000 81a4 	beq.w	8009c72 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009930:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009934:	429a      	cmp	r2, r3
 8009936:	f080 819c 	bcs.w	8009c72 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8009940:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009948:	69db      	ldr	r3, [r3, #28]
 800994a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800994e:	f000 8086 	beq.w	8009a5e <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800995a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800995e:	e853 3f00 	ldrex	r3, [r3]
 8009962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009966:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800996a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800996e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	461a      	mov	r2, r3
 8009978:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800997c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8009980:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009984:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8009988:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800998c:	e841 2300 	strex	r3, r2, [r1]
 8009990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009994:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009998:	2b00      	cmp	r3, #0
 800999a:	d1da      	bne.n	8009952 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	3308      	adds	r3, #8
 80099a2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80099a6:	e853 3f00 	ldrex	r3, [r3]
 80099aa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80099ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80099ae:	f023 0301 	bic.w	r3, r3, #1
 80099b2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	3308      	adds	r3, #8
 80099bc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80099c0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80099c4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80099c8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099cc:	e841 2300 	strex	r3, r2, [r1]
 80099d0:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80099d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d1e1      	bne.n	800999c <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	3308      	adds	r3, #8
 80099de:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099e0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80099e2:	e853 3f00 	ldrex	r3, [r3]
 80099e6:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80099e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80099ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80099ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	3308      	adds	r3, #8
 80099f8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80099fc:	66fa      	str	r2, [r7, #108]	; 0x6c
 80099fe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a00:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009a02:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009a04:	e841 2300 	strex	r3, r2, [r1]
 8009a08:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009a0a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	d1e3      	bne.n	80099d8 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	2220      	movs	r2, #32
 8009a14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a26:	e853 3f00 	ldrex	r3, [r3]
 8009a2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009a2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009a2e:	f023 0310 	bic.w	r3, r3, #16
 8009a32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	461a      	mov	r2, r3
 8009a3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8009a40:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a42:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a44:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009a46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009a48:	e841 2300 	strex	r3, r2, [r1]
 8009a4c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8009a4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d1e4      	bne.n	8009a1e <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009a58:	4618      	mov	r0, r3
 8009a5a:	f7f9 ff59 	bl	8003910 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	1ad3      	subs	r3, r2, r3
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	4619      	mov	r1, r3
 8009a72:	6878      	ldr	r0, [r7, #4]
 8009a74:	f000 f91c 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009a78:	e0fb      	b.n	8009c72 <HAL_UART_IRQHandler+0x726>
 8009a7a:	bf00      	nop
 8009a7c:	40020010 	.word	0x40020010
 8009a80:	40020028 	.word	0x40020028
 8009a84:	40020040 	.word	0x40020040
 8009a88:	40020058 	.word	0x40020058
 8009a8c:	40020070 	.word	0x40020070
 8009a90:	40020088 	.word	0x40020088
 8009a94:	400200a0 	.word	0x400200a0
 8009a98:	400200b8 	.word	0x400200b8
 8009a9c:	40020410 	.word	0x40020410
 8009aa0:	40020428 	.word	0x40020428
 8009aa4:	40020440 	.word	0x40020440
 8009aa8:	40020458 	.word	0x40020458
 8009aac:	40020470 	.word	0x40020470
 8009ab0:	40020488 	.word	0x40020488
 8009ab4:	400204a0 	.word	0x400204a0
 8009ab8:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	1ad3      	subs	r3, r2, r3
 8009acc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	2b00      	cmp	r3, #0
 8009ada:	f000 80cc 	beq.w	8009c76 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8009ade:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 80c7 	beq.w	8009c76 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009af0:	e853 3f00 	ldrex	r3, [r3]
 8009af4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009af6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009af8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009afc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8009b0a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b0c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009b10:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009b12:	e841 2300 	strex	r3, r2, [r1]
 8009b16:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009b18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d1e4      	bne.n	8009ae8 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	3308      	adds	r3, #8
 8009b24:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b28:	e853 3f00 	ldrex	r3, [r3]
 8009b2c:	623b      	str	r3, [r7, #32]
   return(result);
 8009b2e:	6a3a      	ldr	r2, [r7, #32]
 8009b30:	4b54      	ldr	r3, [pc, #336]	; (8009c84 <HAL_UART_IRQHandler+0x738>)
 8009b32:	4013      	ands	r3, r2
 8009b34:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009b42:	633a      	str	r2, [r7, #48]	; 0x30
 8009b44:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009b48:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009b4a:	e841 2300 	strex	r3, r2, [r1]
 8009b4e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d1e3      	bne.n	8009b1e <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2220      	movs	r2, #32
 8009b5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2200      	movs	r2, #0
 8009b68:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009b70:	693b      	ldr	r3, [r7, #16]
 8009b72:	e853 3f00 	ldrex	r3, [r3]
 8009b76:	60fb      	str	r3, [r7, #12]
   return(result);
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	f023 0310 	bic.w	r3, r3, #16
 8009b7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	461a      	mov	r2, r3
 8009b88:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8009b8c:	61fb      	str	r3, [r7, #28]
 8009b8e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b90:	69b9      	ldr	r1, [r7, #24]
 8009b92:	69fa      	ldr	r2, [r7, #28]
 8009b94:	e841 2300 	strex	r3, r2, [r1]
 8009b98:	617b      	str	r3, [r7, #20]
   return(result);
 8009b9a:	697b      	ldr	r3, [r7, #20]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d1e4      	bne.n	8009b6a <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009ba0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009ba4:	4619      	mov	r1, r3
 8009ba6:	6878      	ldr	r0, [r7, #4]
 8009ba8:	f000 f882 	bl	8009cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8009bac:	e063      	b.n	8009c76 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8009bae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d00e      	beq.n	8009bd8 <HAL_UART_IRQHandler+0x68c>
 8009bba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d008      	beq.n	8009bd8 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8009bce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f83e 	bl	800ac52 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009bd6:	e051      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8009bd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009bdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d014      	beq.n	8009c0e <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8009be4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009be8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d105      	bne.n	8009bfc <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8009bf0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009bf4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d008      	beq.n	8009c0e <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d03a      	beq.n	8009c7a <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	4798      	blx	r3
    }
    return;
 8009c0c:	e035      	b.n	8009c7a <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8009c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d009      	beq.n	8009c2e <HAL_UART_IRQHandler+0x6e2>
 8009c1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d003      	beq.n	8009c2e <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8009c26:	6878      	ldr	r0, [r7, #4]
 8009c28:	f000 ffe8 	bl	800abfc <UART_EndTransmit_IT>
    return;
 8009c2c:	e026      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8009c2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d009      	beq.n	8009c4e <HAL_UART_IRQHandler+0x702>
 8009c3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c3e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d003      	beq.n	8009c4e <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f001 f817 	bl	800ac7a <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c4c:	e016      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8009c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009c52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c56:	2b00      	cmp	r3, #0
 8009c58:	d010      	beq.n	8009c7c <HAL_UART_IRQHandler+0x730>
 8009c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	da0c      	bge.n	8009c7c <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 ffff 	bl	800ac66 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8009c68:	e008      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
      return;
 8009c6a:	bf00      	nop
 8009c6c:	e006      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
    return;
 8009c6e:	bf00      	nop
 8009c70:	e004      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
      return;
 8009c72:	bf00      	nop
 8009c74:	e002      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
      return;
 8009c76:	bf00      	nop
 8009c78:	e000      	b.n	8009c7c <HAL_UART_IRQHandler+0x730>
    return;
 8009c7a:	bf00      	nop
  }
}
 8009c7c:	37e8      	adds	r7, #232	; 0xe8
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bd80      	pop	{r7, pc}
 8009c82:	bf00      	nop
 8009c84:	effffffe 	.word	0xeffffffe

08009c88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8009c88:	b480      	push	{r7}
 8009c8a:	b083      	sub	sp, #12
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8009c90:	bf00      	nop
 8009c92:	370c      	adds	r7, #12
 8009c94:	46bd      	mov	sp, r7
 8009c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9a:	4770      	bx	lr

08009c9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009c9c:	b480      	push	{r7}
 8009c9e:	b083      	sub	sp, #12
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8009ca4:	bf00      	nop
 8009ca6:	370c      	adds	r7, #12
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr

08009cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009cb0:	b480      	push	{r7}
 8009cb2:	b083      	sub	sp, #12
 8009cb4:	af00      	add	r7, sp, #0
 8009cb6:	6078      	str	r0, [r7, #4]
 8009cb8:	460b      	mov	r3, r1
 8009cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009cc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009ccc:	b092      	sub	sp, #72	; 0x48
 8009cce:	af00      	add	r7, sp, #0
 8009cd0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009cd2:	2300      	movs	r3, #0
 8009cd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	689a      	ldr	r2, [r3, #8]
 8009cdc:	697b      	ldr	r3, [r7, #20]
 8009cde:	691b      	ldr	r3, [r3, #16]
 8009ce0:	431a      	orrs	r2, r3
 8009ce2:	697b      	ldr	r3, [r7, #20]
 8009ce4:	695b      	ldr	r3, [r3, #20]
 8009ce6:	431a      	orrs	r2, r3
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	69db      	ldr	r3, [r3, #28]
 8009cec:	4313      	orrs	r3, r2
 8009cee:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009cf0:	697b      	ldr	r3, [r7, #20]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	681a      	ldr	r2, [r3, #0]
 8009cf6:	4bbe      	ldr	r3, [pc, #760]	; (8009ff0 <UART_SetConfig+0x328>)
 8009cf8:	4013      	ands	r3, r2
 8009cfa:	697a      	ldr	r2, [r7, #20]
 8009cfc:	6812      	ldr	r2, [r2, #0]
 8009cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d00:	430b      	orrs	r3, r1
 8009d02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009d04:	697b      	ldr	r3, [r7, #20]
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009d0e:	697b      	ldr	r3, [r7, #20]
 8009d10:	68da      	ldr	r2, [r3, #12]
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	430a      	orrs	r2, r1
 8009d18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009d1a:	697b      	ldr	r3, [r7, #20]
 8009d1c:	699b      	ldr	r3, [r3, #24]
 8009d1e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	4ab3      	ldr	r2, [pc, #716]	; (8009ff4 <UART_SetConfig+0x32c>)
 8009d26:	4293      	cmp	r3, r2
 8009d28:	d004      	beq.n	8009d34 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d30:	4313      	orrs	r3, r2
 8009d32:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	689a      	ldr	r2, [r3, #8]
 8009d3a:	4baf      	ldr	r3, [pc, #700]	; (8009ff8 <UART_SetConfig+0x330>)
 8009d3c:	4013      	ands	r3, r2
 8009d3e:	697a      	ldr	r2, [r7, #20]
 8009d40:	6812      	ldr	r2, [r2, #0]
 8009d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d44:	430b      	orrs	r3, r1
 8009d46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8009d48:	697b      	ldr	r3, [r7, #20]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4e:	f023 010f 	bic.w	r1, r3, #15
 8009d52:	697b      	ldr	r3, [r7, #20]
 8009d54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	430a      	orrs	r2, r1
 8009d5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009d5e:	697b      	ldr	r3, [r7, #20]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	4aa6      	ldr	r2, [pc, #664]	; (8009ffc <UART_SetConfig+0x334>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d177      	bne.n	8009e58 <UART_SetConfig+0x190>
 8009d68:	4ba5      	ldr	r3, [pc, #660]	; (800a000 <UART_SetConfig+0x338>)
 8009d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d6c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d70:	2b28      	cmp	r3, #40	; 0x28
 8009d72:	d86d      	bhi.n	8009e50 <UART_SetConfig+0x188>
 8009d74:	a201      	add	r2, pc, #4	; (adr r2, 8009d7c <UART_SetConfig+0xb4>)
 8009d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d7a:	bf00      	nop
 8009d7c:	08009e21 	.word	0x08009e21
 8009d80:	08009e51 	.word	0x08009e51
 8009d84:	08009e51 	.word	0x08009e51
 8009d88:	08009e51 	.word	0x08009e51
 8009d8c:	08009e51 	.word	0x08009e51
 8009d90:	08009e51 	.word	0x08009e51
 8009d94:	08009e51 	.word	0x08009e51
 8009d98:	08009e51 	.word	0x08009e51
 8009d9c:	08009e29 	.word	0x08009e29
 8009da0:	08009e51 	.word	0x08009e51
 8009da4:	08009e51 	.word	0x08009e51
 8009da8:	08009e51 	.word	0x08009e51
 8009dac:	08009e51 	.word	0x08009e51
 8009db0:	08009e51 	.word	0x08009e51
 8009db4:	08009e51 	.word	0x08009e51
 8009db8:	08009e51 	.word	0x08009e51
 8009dbc:	08009e31 	.word	0x08009e31
 8009dc0:	08009e51 	.word	0x08009e51
 8009dc4:	08009e51 	.word	0x08009e51
 8009dc8:	08009e51 	.word	0x08009e51
 8009dcc:	08009e51 	.word	0x08009e51
 8009dd0:	08009e51 	.word	0x08009e51
 8009dd4:	08009e51 	.word	0x08009e51
 8009dd8:	08009e51 	.word	0x08009e51
 8009ddc:	08009e39 	.word	0x08009e39
 8009de0:	08009e51 	.word	0x08009e51
 8009de4:	08009e51 	.word	0x08009e51
 8009de8:	08009e51 	.word	0x08009e51
 8009dec:	08009e51 	.word	0x08009e51
 8009df0:	08009e51 	.word	0x08009e51
 8009df4:	08009e51 	.word	0x08009e51
 8009df8:	08009e51 	.word	0x08009e51
 8009dfc:	08009e41 	.word	0x08009e41
 8009e00:	08009e51 	.word	0x08009e51
 8009e04:	08009e51 	.word	0x08009e51
 8009e08:	08009e51 	.word	0x08009e51
 8009e0c:	08009e51 	.word	0x08009e51
 8009e10:	08009e51 	.word	0x08009e51
 8009e14:	08009e51 	.word	0x08009e51
 8009e18:	08009e51 	.word	0x08009e51
 8009e1c:	08009e49 	.word	0x08009e49
 8009e20:	2301      	movs	r3, #1
 8009e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e26:	e222      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e28:	2304      	movs	r3, #4
 8009e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e2e:	e21e      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e30:	2308      	movs	r3, #8
 8009e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e36:	e21a      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e38:	2310      	movs	r3, #16
 8009e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e3e:	e216      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e40:	2320      	movs	r3, #32
 8009e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e46:	e212      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e48:	2340      	movs	r3, #64	; 0x40
 8009e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e4e:	e20e      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e50:	2380      	movs	r3, #128	; 0x80
 8009e52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e56:	e20a      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e58:	697b      	ldr	r3, [r7, #20]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	4a69      	ldr	r2, [pc, #420]	; (800a004 <UART_SetConfig+0x33c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d130      	bne.n	8009ec4 <UART_SetConfig+0x1fc>
 8009e62:	4b67      	ldr	r3, [pc, #412]	; (800a000 <UART_SetConfig+0x338>)
 8009e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e66:	f003 0307 	and.w	r3, r3, #7
 8009e6a:	2b05      	cmp	r3, #5
 8009e6c:	d826      	bhi.n	8009ebc <UART_SetConfig+0x1f4>
 8009e6e:	a201      	add	r2, pc, #4	; (adr r2, 8009e74 <UART_SetConfig+0x1ac>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e8d 	.word	0x08009e8d
 8009e78:	08009e95 	.word	0x08009e95
 8009e7c:	08009e9d 	.word	0x08009e9d
 8009e80:	08009ea5 	.word	0x08009ea5
 8009e84:	08009ead 	.word	0x08009ead
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e92:	e1ec      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e94:	2304      	movs	r3, #4
 8009e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009e9a:	e1e8      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ea2:	e1e4      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009ea4:	2310      	movs	r3, #16
 8009ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eaa:	e1e0      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009eac:	2320      	movs	r3, #32
 8009eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eb2:	e1dc      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009eb4:	2340      	movs	r3, #64	; 0x40
 8009eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009eba:	e1d8      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009ebc:	2380      	movs	r3, #128	; 0x80
 8009ebe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009ec2:	e1d4      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a4f      	ldr	r2, [pc, #316]	; (800a008 <UART_SetConfig+0x340>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d130      	bne.n	8009f30 <UART_SetConfig+0x268>
 8009ece:	4b4c      	ldr	r3, [pc, #304]	; (800a000 <UART_SetConfig+0x338>)
 8009ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ed2:	f003 0307 	and.w	r3, r3, #7
 8009ed6:	2b05      	cmp	r3, #5
 8009ed8:	d826      	bhi.n	8009f28 <UART_SetConfig+0x260>
 8009eda:	a201      	add	r2, pc, #4	; (adr r2, 8009ee0 <UART_SetConfig+0x218>)
 8009edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009f01 	.word	0x08009f01
 8009ee8:	08009f09 	.word	0x08009f09
 8009eec:	08009f11 	.word	0x08009f11
 8009ef0:	08009f19 	.word	0x08009f19
 8009ef4:	08009f21 	.word	0x08009f21
 8009ef8:	2300      	movs	r3, #0
 8009efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009efe:	e1b6      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f00:	2304      	movs	r3, #4
 8009f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f06:	e1b2      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f08:	2308      	movs	r3, #8
 8009f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f0e:	e1ae      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f10:	2310      	movs	r3, #16
 8009f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f16:	e1aa      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f18:	2320      	movs	r3, #32
 8009f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f1e:	e1a6      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f20:	2340      	movs	r3, #64	; 0x40
 8009f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f26:	e1a2      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f28:	2380      	movs	r3, #128	; 0x80
 8009f2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f2e:	e19e      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f30:	697b      	ldr	r3, [r7, #20]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a35      	ldr	r2, [pc, #212]	; (800a00c <UART_SetConfig+0x344>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d130      	bne.n	8009f9c <UART_SetConfig+0x2d4>
 8009f3a:	4b31      	ldr	r3, [pc, #196]	; (800a000 <UART_SetConfig+0x338>)
 8009f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009f3e:	f003 0307 	and.w	r3, r3, #7
 8009f42:	2b05      	cmp	r3, #5
 8009f44:	d826      	bhi.n	8009f94 <UART_SetConfig+0x2cc>
 8009f46:	a201      	add	r2, pc, #4	; (adr r2, 8009f4c <UART_SetConfig+0x284>)
 8009f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f4c:	08009f65 	.word	0x08009f65
 8009f50:	08009f6d 	.word	0x08009f6d
 8009f54:	08009f75 	.word	0x08009f75
 8009f58:	08009f7d 	.word	0x08009f7d
 8009f5c:	08009f85 	.word	0x08009f85
 8009f60:	08009f8d 	.word	0x08009f8d
 8009f64:	2300      	movs	r3, #0
 8009f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f6a:	e180      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f6c:	2304      	movs	r3, #4
 8009f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f72:	e17c      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f74:	2308      	movs	r3, #8
 8009f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f7a:	e178      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f7c:	2310      	movs	r3, #16
 8009f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f82:	e174      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f84:	2320      	movs	r3, #32
 8009f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f8a:	e170      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f8c:	2340      	movs	r3, #64	; 0x40
 8009f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f92:	e16c      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f94:	2380      	movs	r3, #128	; 0x80
 8009f96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009f9a:	e168      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009f9c:	697b      	ldr	r3, [r7, #20]
 8009f9e:	681b      	ldr	r3, [r3, #0]
 8009fa0:	4a1b      	ldr	r2, [pc, #108]	; (800a010 <UART_SetConfig+0x348>)
 8009fa2:	4293      	cmp	r3, r2
 8009fa4:	d142      	bne.n	800a02c <UART_SetConfig+0x364>
 8009fa6:	4b16      	ldr	r3, [pc, #88]	; (800a000 <UART_SetConfig+0x338>)
 8009fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009faa:	f003 0307 	and.w	r3, r3, #7
 8009fae:	2b05      	cmp	r3, #5
 8009fb0:	d838      	bhi.n	800a024 <UART_SetConfig+0x35c>
 8009fb2:	a201      	add	r2, pc, #4	; (adr r2, 8009fb8 <UART_SetConfig+0x2f0>)
 8009fb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fb8:	08009fd1 	.word	0x08009fd1
 8009fbc:	08009fd9 	.word	0x08009fd9
 8009fc0:	08009fe1 	.word	0x08009fe1
 8009fc4:	08009fe9 	.word	0x08009fe9
 8009fc8:	0800a015 	.word	0x0800a015
 8009fcc:	0800a01d 	.word	0x0800a01d
 8009fd0:	2300      	movs	r3, #0
 8009fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fd6:	e14a      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009fd8:	2304      	movs	r3, #4
 8009fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fde:	e146      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009fe0:	2308      	movs	r3, #8
 8009fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fe6:	e142      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009fe8:	2310      	movs	r3, #16
 8009fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8009fee:	e13e      	b.n	800a26e <UART_SetConfig+0x5a6>
 8009ff0:	cfff69f3 	.word	0xcfff69f3
 8009ff4:	58000c00 	.word	0x58000c00
 8009ff8:	11fff4ff 	.word	0x11fff4ff
 8009ffc:	40011000 	.word	0x40011000
 800a000:	58024400 	.word	0x58024400
 800a004:	40004400 	.word	0x40004400
 800a008:	40004800 	.word	0x40004800
 800a00c:	40004c00 	.word	0x40004c00
 800a010:	40005000 	.word	0x40005000
 800a014:	2320      	movs	r3, #32
 800a016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a01a:	e128      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a01c:	2340      	movs	r3, #64	; 0x40
 800a01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a022:	e124      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a024:	2380      	movs	r3, #128	; 0x80
 800a026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a02a:	e120      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4acb      	ldr	r2, [pc, #812]	; (800a360 <UART_SetConfig+0x698>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d176      	bne.n	800a124 <UART_SetConfig+0x45c>
 800a036:	4bcb      	ldr	r3, [pc, #812]	; (800a364 <UART_SetConfig+0x69c>)
 800a038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a03a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a03e:	2b28      	cmp	r3, #40	; 0x28
 800a040:	d86c      	bhi.n	800a11c <UART_SetConfig+0x454>
 800a042:	a201      	add	r2, pc, #4	; (adr r2, 800a048 <UART_SetConfig+0x380>)
 800a044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a048:	0800a0ed 	.word	0x0800a0ed
 800a04c:	0800a11d 	.word	0x0800a11d
 800a050:	0800a11d 	.word	0x0800a11d
 800a054:	0800a11d 	.word	0x0800a11d
 800a058:	0800a11d 	.word	0x0800a11d
 800a05c:	0800a11d 	.word	0x0800a11d
 800a060:	0800a11d 	.word	0x0800a11d
 800a064:	0800a11d 	.word	0x0800a11d
 800a068:	0800a0f5 	.word	0x0800a0f5
 800a06c:	0800a11d 	.word	0x0800a11d
 800a070:	0800a11d 	.word	0x0800a11d
 800a074:	0800a11d 	.word	0x0800a11d
 800a078:	0800a11d 	.word	0x0800a11d
 800a07c:	0800a11d 	.word	0x0800a11d
 800a080:	0800a11d 	.word	0x0800a11d
 800a084:	0800a11d 	.word	0x0800a11d
 800a088:	0800a0fd 	.word	0x0800a0fd
 800a08c:	0800a11d 	.word	0x0800a11d
 800a090:	0800a11d 	.word	0x0800a11d
 800a094:	0800a11d 	.word	0x0800a11d
 800a098:	0800a11d 	.word	0x0800a11d
 800a09c:	0800a11d 	.word	0x0800a11d
 800a0a0:	0800a11d 	.word	0x0800a11d
 800a0a4:	0800a11d 	.word	0x0800a11d
 800a0a8:	0800a105 	.word	0x0800a105
 800a0ac:	0800a11d 	.word	0x0800a11d
 800a0b0:	0800a11d 	.word	0x0800a11d
 800a0b4:	0800a11d 	.word	0x0800a11d
 800a0b8:	0800a11d 	.word	0x0800a11d
 800a0bc:	0800a11d 	.word	0x0800a11d
 800a0c0:	0800a11d 	.word	0x0800a11d
 800a0c4:	0800a11d 	.word	0x0800a11d
 800a0c8:	0800a10d 	.word	0x0800a10d
 800a0cc:	0800a11d 	.word	0x0800a11d
 800a0d0:	0800a11d 	.word	0x0800a11d
 800a0d4:	0800a11d 	.word	0x0800a11d
 800a0d8:	0800a11d 	.word	0x0800a11d
 800a0dc:	0800a11d 	.word	0x0800a11d
 800a0e0:	0800a11d 	.word	0x0800a11d
 800a0e4:	0800a11d 	.word	0x0800a11d
 800a0e8:	0800a115 	.word	0x0800a115
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0f2:	e0bc      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a0f4:	2304      	movs	r3, #4
 800a0f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a0fa:	e0b8      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a0fc:	2308      	movs	r3, #8
 800a0fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a102:	e0b4      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a104:	2310      	movs	r3, #16
 800a106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a10a:	e0b0      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a10c:	2320      	movs	r3, #32
 800a10e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a112:	e0ac      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a114:	2340      	movs	r3, #64	; 0x40
 800a116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a11a:	e0a8      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a11c:	2380      	movs	r3, #128	; 0x80
 800a11e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a122:	e0a4      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a8f      	ldr	r2, [pc, #572]	; (800a368 <UART_SetConfig+0x6a0>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d130      	bne.n	800a190 <UART_SetConfig+0x4c8>
 800a12e:	4b8d      	ldr	r3, [pc, #564]	; (800a364 <UART_SetConfig+0x69c>)
 800a130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a132:	f003 0307 	and.w	r3, r3, #7
 800a136:	2b05      	cmp	r3, #5
 800a138:	d826      	bhi.n	800a188 <UART_SetConfig+0x4c0>
 800a13a:	a201      	add	r2, pc, #4	; (adr r2, 800a140 <UART_SetConfig+0x478>)
 800a13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a140:	0800a159 	.word	0x0800a159
 800a144:	0800a161 	.word	0x0800a161
 800a148:	0800a169 	.word	0x0800a169
 800a14c:	0800a171 	.word	0x0800a171
 800a150:	0800a179 	.word	0x0800a179
 800a154:	0800a181 	.word	0x0800a181
 800a158:	2300      	movs	r3, #0
 800a15a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a15e:	e086      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a160:	2304      	movs	r3, #4
 800a162:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a166:	e082      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a168:	2308      	movs	r3, #8
 800a16a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a16e:	e07e      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a170:	2310      	movs	r3, #16
 800a172:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a176:	e07a      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a178:	2320      	movs	r3, #32
 800a17a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a17e:	e076      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a180:	2340      	movs	r3, #64	; 0x40
 800a182:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a186:	e072      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a188:	2380      	movs	r3, #128	; 0x80
 800a18a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a18e:	e06e      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a75      	ldr	r2, [pc, #468]	; (800a36c <UART_SetConfig+0x6a4>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d130      	bne.n	800a1fc <UART_SetConfig+0x534>
 800a19a:	4b72      	ldr	r3, [pc, #456]	; (800a364 <UART_SetConfig+0x69c>)
 800a19c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a19e:	f003 0307 	and.w	r3, r3, #7
 800a1a2:	2b05      	cmp	r3, #5
 800a1a4:	d826      	bhi.n	800a1f4 <UART_SetConfig+0x52c>
 800a1a6:	a201      	add	r2, pc, #4	; (adr r2, 800a1ac <UART_SetConfig+0x4e4>)
 800a1a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1ac:	0800a1c5 	.word	0x0800a1c5
 800a1b0:	0800a1cd 	.word	0x0800a1cd
 800a1b4:	0800a1d5 	.word	0x0800a1d5
 800a1b8:	0800a1dd 	.word	0x0800a1dd
 800a1bc:	0800a1e5 	.word	0x0800a1e5
 800a1c0:	0800a1ed 	.word	0x0800a1ed
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ca:	e050      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1cc:	2304      	movs	r3, #4
 800a1ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1d2:	e04c      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1d4:	2308      	movs	r3, #8
 800a1d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1da:	e048      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1e2:	e044      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1e4:	2320      	movs	r3, #32
 800a1e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1ea:	e040      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1ec:	2340      	movs	r3, #64	; 0x40
 800a1ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1f2:	e03c      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1f4:	2380      	movs	r3, #128	; 0x80
 800a1f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a1fa:	e038      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a1fc:	697b      	ldr	r3, [r7, #20]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4a5b      	ldr	r2, [pc, #364]	; (800a370 <UART_SetConfig+0x6a8>)
 800a202:	4293      	cmp	r3, r2
 800a204:	d130      	bne.n	800a268 <UART_SetConfig+0x5a0>
 800a206:	4b57      	ldr	r3, [pc, #348]	; (800a364 <UART_SetConfig+0x69c>)
 800a208:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20a:	f003 0307 	and.w	r3, r3, #7
 800a20e:	2b05      	cmp	r3, #5
 800a210:	d826      	bhi.n	800a260 <UART_SetConfig+0x598>
 800a212:	a201      	add	r2, pc, #4	; (adr r2, 800a218 <UART_SetConfig+0x550>)
 800a214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a218:	0800a231 	.word	0x0800a231
 800a21c:	0800a239 	.word	0x0800a239
 800a220:	0800a241 	.word	0x0800a241
 800a224:	0800a249 	.word	0x0800a249
 800a228:	0800a251 	.word	0x0800a251
 800a22c:	0800a259 	.word	0x0800a259
 800a230:	2302      	movs	r3, #2
 800a232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a236:	e01a      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a238:	2304      	movs	r3, #4
 800a23a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a23e:	e016      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a240:	2308      	movs	r3, #8
 800a242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a246:	e012      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a248:	2310      	movs	r3, #16
 800a24a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a24e:	e00e      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a250:	2320      	movs	r3, #32
 800a252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a256:	e00a      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a258:	2340      	movs	r3, #64	; 0x40
 800a25a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a25e:	e006      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a260:	2380      	movs	r3, #128	; 0x80
 800a262:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800a266:	e002      	b.n	800a26e <UART_SetConfig+0x5a6>
 800a268:	2380      	movs	r3, #128	; 0x80
 800a26a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a3f      	ldr	r2, [pc, #252]	; (800a370 <UART_SetConfig+0x6a8>)
 800a274:	4293      	cmp	r3, r2
 800a276:	f040 80f8 	bne.w	800a46a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a27a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a27e:	2b20      	cmp	r3, #32
 800a280:	dc46      	bgt.n	800a310 <UART_SetConfig+0x648>
 800a282:	2b02      	cmp	r3, #2
 800a284:	f2c0 8082 	blt.w	800a38c <UART_SetConfig+0x6c4>
 800a288:	3b02      	subs	r3, #2
 800a28a:	2b1e      	cmp	r3, #30
 800a28c:	d87e      	bhi.n	800a38c <UART_SetConfig+0x6c4>
 800a28e:	a201      	add	r2, pc, #4	; (adr r2, 800a294 <UART_SetConfig+0x5cc>)
 800a290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a294:	0800a317 	.word	0x0800a317
 800a298:	0800a38d 	.word	0x0800a38d
 800a29c:	0800a31f 	.word	0x0800a31f
 800a2a0:	0800a38d 	.word	0x0800a38d
 800a2a4:	0800a38d 	.word	0x0800a38d
 800a2a8:	0800a38d 	.word	0x0800a38d
 800a2ac:	0800a32f 	.word	0x0800a32f
 800a2b0:	0800a38d 	.word	0x0800a38d
 800a2b4:	0800a38d 	.word	0x0800a38d
 800a2b8:	0800a38d 	.word	0x0800a38d
 800a2bc:	0800a38d 	.word	0x0800a38d
 800a2c0:	0800a38d 	.word	0x0800a38d
 800a2c4:	0800a38d 	.word	0x0800a38d
 800a2c8:	0800a38d 	.word	0x0800a38d
 800a2cc:	0800a33f 	.word	0x0800a33f
 800a2d0:	0800a38d 	.word	0x0800a38d
 800a2d4:	0800a38d 	.word	0x0800a38d
 800a2d8:	0800a38d 	.word	0x0800a38d
 800a2dc:	0800a38d 	.word	0x0800a38d
 800a2e0:	0800a38d 	.word	0x0800a38d
 800a2e4:	0800a38d 	.word	0x0800a38d
 800a2e8:	0800a38d 	.word	0x0800a38d
 800a2ec:	0800a38d 	.word	0x0800a38d
 800a2f0:	0800a38d 	.word	0x0800a38d
 800a2f4:	0800a38d 	.word	0x0800a38d
 800a2f8:	0800a38d 	.word	0x0800a38d
 800a2fc:	0800a38d 	.word	0x0800a38d
 800a300:	0800a38d 	.word	0x0800a38d
 800a304:	0800a38d 	.word	0x0800a38d
 800a308:	0800a38d 	.word	0x0800a38d
 800a30c:	0800a37f 	.word	0x0800a37f
 800a310:	2b40      	cmp	r3, #64	; 0x40
 800a312:	d037      	beq.n	800a384 <UART_SetConfig+0x6bc>
 800a314:	e03a      	b.n	800a38c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800a316:	f7fe f8c5 	bl	80084a4 <HAL_RCCEx_GetD3PCLK1Freq>
 800a31a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a31c:	e03c      	b.n	800a398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a31e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a322:	4618      	mov	r0, r3
 800a324:	f7fe f8d4 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a32c:	e034      	b.n	800a398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a32e:	f107 0318 	add.w	r3, r7, #24
 800a332:	4618      	mov	r0, r3
 800a334:	f7fe fa20 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a33c:	e02c      	b.n	800a398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a33e:	4b09      	ldr	r3, [pc, #36]	; (800a364 <UART_SetConfig+0x69c>)
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	f003 0320 	and.w	r3, r3, #32
 800a346:	2b00      	cmp	r3, #0
 800a348:	d016      	beq.n	800a378 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a34a:	4b06      	ldr	r3, [pc, #24]	; (800a364 <UART_SetConfig+0x69c>)
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	08db      	lsrs	r3, r3, #3
 800a350:	f003 0303 	and.w	r3, r3, #3
 800a354:	4a07      	ldr	r2, [pc, #28]	; (800a374 <UART_SetConfig+0x6ac>)
 800a356:	fa22 f303 	lsr.w	r3, r2, r3
 800a35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a35c:	e01c      	b.n	800a398 <UART_SetConfig+0x6d0>
 800a35e:	bf00      	nop
 800a360:	40011400 	.word	0x40011400
 800a364:	58024400 	.word	0x58024400
 800a368:	40007800 	.word	0x40007800
 800a36c:	40007c00 	.word	0x40007c00
 800a370:	58000c00 	.word	0x58000c00
 800a374:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800a378:	4b9d      	ldr	r3, [pc, #628]	; (800a5f0 <UART_SetConfig+0x928>)
 800a37a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a37c:	e00c      	b.n	800a398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a37e:	4b9d      	ldr	r3, [pc, #628]	; (800a5f4 <UART_SetConfig+0x92c>)
 800a380:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a382:	e009      	b.n	800a398 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a384:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a388:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a38a:	e005      	b.n	800a398 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800a38c:	2300      	movs	r3, #0
 800a38e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a390:	2301      	movs	r3, #1
 800a392:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a396:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a398:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a39a:	2b00      	cmp	r3, #0
 800a39c:	f000 81de 	beq.w	800a75c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a4:	4a94      	ldr	r2, [pc, #592]	; (800a5f8 <UART_SetConfig+0x930>)
 800a3a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ae:	fbb3 f3f2 	udiv	r3, r3, r2
 800a3b2:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3b4:	697b      	ldr	r3, [r7, #20]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	4613      	mov	r3, r2
 800a3ba:	005b      	lsls	r3, r3, #1
 800a3bc:	4413      	add	r3, r2
 800a3be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d305      	bcc.n	800a3d0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a3c4:	697b      	ldr	r3, [r7, #20]
 800a3c6:	685b      	ldr	r3, [r3, #4]
 800a3c8:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a3ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	d903      	bls.n	800a3d8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800a3d0:	2301      	movs	r3, #1
 800a3d2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a3d6:	e1c1      	b.n	800a75c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a3d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3da:	2200      	movs	r2, #0
 800a3dc:	60bb      	str	r3, [r7, #8]
 800a3de:	60fa      	str	r2, [r7, #12]
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e4:	4a84      	ldr	r2, [pc, #528]	; (800a5f8 <UART_SetConfig+0x930>)
 800a3e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	603b      	str	r3, [r7, #0]
 800a3f0:	607a      	str	r2, [r7, #4]
 800a3f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3f6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800a3fa:	f7f5 ffc1 	bl	8000380 <__aeabi_uldivmod>
 800a3fe:	4602      	mov	r2, r0
 800a400:	460b      	mov	r3, r1
 800a402:	4610      	mov	r0, r2
 800a404:	4619      	mov	r1, r3
 800a406:	f04f 0200 	mov.w	r2, #0
 800a40a:	f04f 0300 	mov.w	r3, #0
 800a40e:	020b      	lsls	r3, r1, #8
 800a410:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800a414:	0202      	lsls	r2, r0, #8
 800a416:	6979      	ldr	r1, [r7, #20]
 800a418:	6849      	ldr	r1, [r1, #4]
 800a41a:	0849      	lsrs	r1, r1, #1
 800a41c:	2000      	movs	r0, #0
 800a41e:	460c      	mov	r4, r1
 800a420:	4605      	mov	r5, r0
 800a422:	eb12 0804 	adds.w	r8, r2, r4
 800a426:	eb43 0905 	adc.w	r9, r3, r5
 800a42a:	697b      	ldr	r3, [r7, #20]
 800a42c:	685b      	ldr	r3, [r3, #4]
 800a42e:	2200      	movs	r2, #0
 800a430:	469a      	mov	sl, r3
 800a432:	4693      	mov	fp, r2
 800a434:	4652      	mov	r2, sl
 800a436:	465b      	mov	r3, fp
 800a438:	4640      	mov	r0, r8
 800a43a:	4649      	mov	r1, r9
 800a43c:	f7f5 ffa0 	bl	8000380 <__aeabi_uldivmod>
 800a440:	4602      	mov	r2, r0
 800a442:	460b      	mov	r3, r1
 800a444:	4613      	mov	r3, r2
 800a446:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a44a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a44e:	d308      	bcc.n	800a462 <UART_SetConfig+0x79a>
 800a450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a452:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a456:	d204      	bcs.n	800a462 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800a458:	697b      	ldr	r3, [r7, #20]
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a45e:	60da      	str	r2, [r3, #12]
 800a460:	e17c      	b.n	800a75c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a468:	e178      	b.n	800a75c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	69db      	ldr	r3, [r3, #28]
 800a46e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a472:	f040 80c5 	bne.w	800a600 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800a476:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a47a:	2b20      	cmp	r3, #32
 800a47c:	dc48      	bgt.n	800a510 <UART_SetConfig+0x848>
 800a47e:	2b00      	cmp	r3, #0
 800a480:	db7b      	blt.n	800a57a <UART_SetConfig+0x8b2>
 800a482:	2b20      	cmp	r3, #32
 800a484:	d879      	bhi.n	800a57a <UART_SetConfig+0x8b2>
 800a486:	a201      	add	r2, pc, #4	; (adr r2, 800a48c <UART_SetConfig+0x7c4>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a517 	.word	0x0800a517
 800a490:	0800a51f 	.word	0x0800a51f
 800a494:	0800a57b 	.word	0x0800a57b
 800a498:	0800a57b 	.word	0x0800a57b
 800a49c:	0800a527 	.word	0x0800a527
 800a4a0:	0800a57b 	.word	0x0800a57b
 800a4a4:	0800a57b 	.word	0x0800a57b
 800a4a8:	0800a57b 	.word	0x0800a57b
 800a4ac:	0800a537 	.word	0x0800a537
 800a4b0:	0800a57b 	.word	0x0800a57b
 800a4b4:	0800a57b 	.word	0x0800a57b
 800a4b8:	0800a57b 	.word	0x0800a57b
 800a4bc:	0800a57b 	.word	0x0800a57b
 800a4c0:	0800a57b 	.word	0x0800a57b
 800a4c4:	0800a57b 	.word	0x0800a57b
 800a4c8:	0800a57b 	.word	0x0800a57b
 800a4cc:	0800a547 	.word	0x0800a547
 800a4d0:	0800a57b 	.word	0x0800a57b
 800a4d4:	0800a57b 	.word	0x0800a57b
 800a4d8:	0800a57b 	.word	0x0800a57b
 800a4dc:	0800a57b 	.word	0x0800a57b
 800a4e0:	0800a57b 	.word	0x0800a57b
 800a4e4:	0800a57b 	.word	0x0800a57b
 800a4e8:	0800a57b 	.word	0x0800a57b
 800a4ec:	0800a57b 	.word	0x0800a57b
 800a4f0:	0800a57b 	.word	0x0800a57b
 800a4f4:	0800a57b 	.word	0x0800a57b
 800a4f8:	0800a57b 	.word	0x0800a57b
 800a4fc:	0800a57b 	.word	0x0800a57b
 800a500:	0800a57b 	.word	0x0800a57b
 800a504:	0800a57b 	.word	0x0800a57b
 800a508:	0800a57b 	.word	0x0800a57b
 800a50c:	0800a56d 	.word	0x0800a56d
 800a510:	2b40      	cmp	r3, #64	; 0x40
 800a512:	d02e      	beq.n	800a572 <UART_SetConfig+0x8aa>
 800a514:	e031      	b.n	800a57a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a516:	f7fd f853 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 800a51a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a51c:	e033      	b.n	800a586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a51e:	f7fd f865 	bl	80075ec <HAL_RCC_GetPCLK2Freq>
 800a522:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a524:	e02f      	b.n	800a586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a526:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a52a:	4618      	mov	r0, r3
 800a52c:	f7fd ffd0 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a532:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a534:	e027      	b.n	800a586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a536:	f107 0318 	add.w	r3, r7, #24
 800a53a:	4618      	mov	r0, r3
 800a53c:	f7fe f91c 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a540:	69fb      	ldr	r3, [r7, #28]
 800a542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a544:	e01f      	b.n	800a586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a546:	4b2d      	ldr	r3, [pc, #180]	; (800a5fc <UART_SetConfig+0x934>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f003 0320 	and.w	r3, r3, #32
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d009      	beq.n	800a566 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a552:	4b2a      	ldr	r3, [pc, #168]	; (800a5fc <UART_SetConfig+0x934>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	08db      	lsrs	r3, r3, #3
 800a558:	f003 0303 	and.w	r3, r3, #3
 800a55c:	4a24      	ldr	r2, [pc, #144]	; (800a5f0 <UART_SetConfig+0x928>)
 800a55e:	fa22 f303 	lsr.w	r3, r2, r3
 800a562:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a564:	e00f      	b.n	800a586 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800a566:	4b22      	ldr	r3, [pc, #136]	; (800a5f0 <UART_SetConfig+0x928>)
 800a568:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a56a:	e00c      	b.n	800a586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a56c:	4b21      	ldr	r3, [pc, #132]	; (800a5f4 <UART_SetConfig+0x92c>)
 800a56e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a570:	e009      	b.n	800a586 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a572:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a576:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a578:	e005      	b.n	800a586 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800a57a:	2300      	movs	r3, #0
 800a57c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a57e:	2301      	movs	r3, #1
 800a580:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a584:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a586:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 80e7 	beq.w	800a75c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a58e:	697b      	ldr	r3, [r7, #20]
 800a590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a592:	4a19      	ldr	r2, [pc, #100]	; (800a5f8 <UART_SetConfig+0x930>)
 800a594:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a598:	461a      	mov	r2, r3
 800a59a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a59c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a5a0:	005a      	lsls	r2, r3, #1
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	685b      	ldr	r3, [r3, #4]
 800a5a6:	085b      	lsrs	r3, r3, #1
 800a5a8:	441a      	add	r2, r3
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	685b      	ldr	r3, [r3, #4]
 800a5ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5b2:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b6:	2b0f      	cmp	r3, #15
 800a5b8:	d916      	bls.n	800a5e8 <UART_SetConfig+0x920>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5c0:	d212      	bcs.n	800a5e8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5c4:	b29b      	uxth	r3, r3
 800a5c6:	f023 030f 	bic.w	r3, r3, #15
 800a5ca:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a5cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ce:	085b      	lsrs	r3, r3, #1
 800a5d0:	b29b      	uxth	r3, r3
 800a5d2:	f003 0307 	and.w	r3, r3, #7
 800a5d6:	b29a      	uxth	r2, r3
 800a5d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800a5de:	697b      	ldr	r3, [r7, #20]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800a5e4:	60da      	str	r2, [r3, #12]
 800a5e6:	e0b9      	b.n	800a75c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800a5ee:	e0b5      	b.n	800a75c <UART_SetConfig+0xa94>
 800a5f0:	03d09000 	.word	0x03d09000
 800a5f4:	003d0900 	.word	0x003d0900
 800a5f8:	0800d440 	.word	0x0800d440
 800a5fc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800a600:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a604:	2b20      	cmp	r3, #32
 800a606:	dc49      	bgt.n	800a69c <UART_SetConfig+0x9d4>
 800a608:	2b00      	cmp	r3, #0
 800a60a:	db7c      	blt.n	800a706 <UART_SetConfig+0xa3e>
 800a60c:	2b20      	cmp	r3, #32
 800a60e:	d87a      	bhi.n	800a706 <UART_SetConfig+0xa3e>
 800a610:	a201      	add	r2, pc, #4	; (adr r2, 800a618 <UART_SetConfig+0x950>)
 800a612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a616:	bf00      	nop
 800a618:	0800a6a3 	.word	0x0800a6a3
 800a61c:	0800a6ab 	.word	0x0800a6ab
 800a620:	0800a707 	.word	0x0800a707
 800a624:	0800a707 	.word	0x0800a707
 800a628:	0800a6b3 	.word	0x0800a6b3
 800a62c:	0800a707 	.word	0x0800a707
 800a630:	0800a707 	.word	0x0800a707
 800a634:	0800a707 	.word	0x0800a707
 800a638:	0800a6c3 	.word	0x0800a6c3
 800a63c:	0800a707 	.word	0x0800a707
 800a640:	0800a707 	.word	0x0800a707
 800a644:	0800a707 	.word	0x0800a707
 800a648:	0800a707 	.word	0x0800a707
 800a64c:	0800a707 	.word	0x0800a707
 800a650:	0800a707 	.word	0x0800a707
 800a654:	0800a707 	.word	0x0800a707
 800a658:	0800a6d3 	.word	0x0800a6d3
 800a65c:	0800a707 	.word	0x0800a707
 800a660:	0800a707 	.word	0x0800a707
 800a664:	0800a707 	.word	0x0800a707
 800a668:	0800a707 	.word	0x0800a707
 800a66c:	0800a707 	.word	0x0800a707
 800a670:	0800a707 	.word	0x0800a707
 800a674:	0800a707 	.word	0x0800a707
 800a678:	0800a707 	.word	0x0800a707
 800a67c:	0800a707 	.word	0x0800a707
 800a680:	0800a707 	.word	0x0800a707
 800a684:	0800a707 	.word	0x0800a707
 800a688:	0800a707 	.word	0x0800a707
 800a68c:	0800a707 	.word	0x0800a707
 800a690:	0800a707 	.word	0x0800a707
 800a694:	0800a707 	.word	0x0800a707
 800a698:	0800a6f9 	.word	0x0800a6f9
 800a69c:	2b40      	cmp	r3, #64	; 0x40
 800a69e:	d02e      	beq.n	800a6fe <UART_SetConfig+0xa36>
 800a6a0:	e031      	b.n	800a706 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a6a2:	f7fc ff8d 	bl	80075c0 <HAL_RCC_GetPCLK1Freq>
 800a6a6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6a8:	e033      	b.n	800a712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a6aa:	f7fc ff9f 	bl	80075ec <HAL_RCC_GetPCLK2Freq>
 800a6ae:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800a6b0:	e02f      	b.n	800a712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f7fd ff0a 	bl	80084d0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800a6bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6c0:	e027      	b.n	800a712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a6c2:	f107 0318 	add.w	r3, r7, #24
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f7fe f856 	bl	8008778 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800a6cc:	69fb      	ldr	r3, [r7, #28]
 800a6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6d0:	e01f      	b.n	800a712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a6d2:	4b2d      	ldr	r3, [pc, #180]	; (800a788 <UART_SetConfig+0xac0>)
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d009      	beq.n	800a6f2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800a6de:	4b2a      	ldr	r3, [pc, #168]	; (800a788 <UART_SetConfig+0xac0>)
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	08db      	lsrs	r3, r3, #3
 800a6e4:	f003 0303 	and.w	r3, r3, #3
 800a6e8:	4a28      	ldr	r2, [pc, #160]	; (800a78c <UART_SetConfig+0xac4>)
 800a6ea:	fa22 f303 	lsr.w	r3, r2, r3
 800a6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800a6f0:	e00f      	b.n	800a712 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800a6f2:	4b26      	ldr	r3, [pc, #152]	; (800a78c <UART_SetConfig+0xac4>)
 800a6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6f6:	e00c      	b.n	800a712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800a6f8:	4b25      	ldr	r3, [pc, #148]	; (800a790 <UART_SetConfig+0xac8>)
 800a6fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a6fc:	e009      	b.n	800a712 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a6fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a702:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800a704:	e005      	b.n	800a712 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800a706:	2300      	movs	r3, #0
 800a708:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800a710:	bf00      	nop
    }

    if (pclk != 0U)
 800a712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a714:	2b00      	cmp	r3, #0
 800a716:	d021      	beq.n	800a75c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800a718:	697b      	ldr	r3, [r7, #20]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	4a1d      	ldr	r2, [pc, #116]	; (800a794 <UART_SetConfig+0xacc>)
 800a71e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800a722:	461a      	mov	r2, r3
 800a724:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a726:	fbb3 f2f2 	udiv	r2, r3, r2
 800a72a:	697b      	ldr	r3, [r7, #20]
 800a72c:	685b      	ldr	r3, [r3, #4]
 800a72e:	085b      	lsrs	r3, r3, #1
 800a730:	441a      	add	r2, r3
 800a732:	697b      	ldr	r3, [r7, #20]
 800a734:	685b      	ldr	r3, [r3, #4]
 800a736:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a73c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a73e:	2b0f      	cmp	r3, #15
 800a740:	d909      	bls.n	800a756 <UART_SetConfig+0xa8e>
 800a742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a744:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a748:	d205      	bcs.n	800a756 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a74c:	b29a      	uxth	r2, r3
 800a74e:	697b      	ldr	r3, [r7, #20]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	60da      	str	r2, [r3, #12]
 800a754:	e002      	b.n	800a75c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800a756:	2301      	movs	r3, #1
 800a758:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2201      	movs	r2, #1
 800a760:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800a764:	697b      	ldr	r3, [r7, #20]
 800a766:	2201      	movs	r2, #1
 800a768:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2200      	movs	r2, #0
 800a770:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	2200      	movs	r2, #0
 800a776:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800a778:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800a77c:	4618      	mov	r0, r3
 800a77e:	3748      	adds	r7, #72	; 0x48
 800a780:	46bd      	mov	sp, r7
 800a782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a786:	bf00      	nop
 800a788:	58024400 	.word	0x58024400
 800a78c:	03d09000 	.word	0x03d09000
 800a790:	003d0900 	.word	0x003d0900
 800a794:	0800d440 	.word	0x0800d440

0800a798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a798:	b480      	push	{r7}
 800a79a:	b083      	sub	sp, #12
 800a79c:	af00      	add	r7, sp, #0
 800a79e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7a4:	f003 0301 	and.w	r3, r3, #1
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d00a      	beq.n	800a7c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	685b      	ldr	r3, [r3, #4]
 800a7b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	430a      	orrs	r2, r1
 800a7c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7c6:	f003 0302 	and.w	r3, r3, #2
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00a      	beq.n	800a7e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	430a      	orrs	r2, r1
 800a7e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a7e8:	f003 0304 	and.w	r3, r3, #4
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d00a      	beq.n	800a806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	430a      	orrs	r2, r1
 800a804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a80a:	f003 0308 	and.w	r3, r3, #8
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00a      	beq.n	800a828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	430a      	orrs	r2, r1
 800a826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a82c:	f003 0310 	and.w	r3, r3, #16
 800a830:	2b00      	cmp	r3, #0
 800a832:	d00a      	beq.n	800a84a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	689b      	ldr	r3, [r3, #8]
 800a83a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	430a      	orrs	r2, r1
 800a848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a84e:	f003 0320 	and.w	r3, r3, #32
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00a      	beq.n	800a86c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	430a      	orrs	r2, r1
 800a86a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a870:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a874:	2b00      	cmp	r3, #0
 800a876:	d01a      	beq.n	800a8ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	685b      	ldr	r3, [r3, #4]
 800a87e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	430a      	orrs	r2, r1
 800a88c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a892:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a896:	d10a      	bne.n	800a8ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	685b      	ldr	r3, [r3, #4]
 800a89e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	430a      	orrs	r2, r1
 800a8ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a8b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d00a      	beq.n	800a8d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	430a      	orrs	r2, r1
 800a8ce:	605a      	str	r2, [r3, #4]
  }
}
 800a8d0:	bf00      	nop
 800a8d2:	370c      	adds	r7, #12
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8da:	4770      	bx	lr

0800a8dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a8dc:	b580      	push	{r7, lr}
 800a8de:	b086      	sub	sp, #24
 800a8e0:	af02      	add	r7, sp, #8
 800a8e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a8ec:	f7f8 fb54 	bl	8002f98 <HAL_GetTick>
 800a8f0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f003 0308 	and.w	r3, r3, #8
 800a8fc:	2b08      	cmp	r3, #8
 800a8fe:	d10e      	bne.n	800a91e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a900:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a904:	9300      	str	r3, [sp, #0]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2200      	movs	r2, #0
 800a90a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f82f 	bl	800a972 <UART_WaitOnFlagUntilTimeout>
 800a914:	4603      	mov	r3, r0
 800a916:	2b00      	cmp	r3, #0
 800a918:	d001      	beq.n	800a91e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a91a:	2303      	movs	r3, #3
 800a91c:	e025      	b.n	800a96a <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0304 	and.w	r3, r3, #4
 800a928:	2b04      	cmp	r3, #4
 800a92a:	d10e      	bne.n	800a94a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a92c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a930:	9300      	str	r3, [sp, #0]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a93a:	6878      	ldr	r0, [r7, #4]
 800a93c:	f000 f819 	bl	800a972 <UART_WaitOnFlagUntilTimeout>
 800a940:	4603      	mov	r3, r0
 800a942:	2b00      	cmp	r3, #0
 800a944:	d001      	beq.n	800a94a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a946:	2303      	movs	r3, #3
 800a948:	e00f      	b.n	800a96a <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2220      	movs	r2, #32
 800a94e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2220      	movs	r2, #32
 800a956:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	2200      	movs	r2, #0
 800a95e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2200      	movs	r2, #0
 800a964:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800a968:	2300      	movs	r3, #0
}
 800a96a:	4618      	mov	r0, r3
 800a96c:	3710      	adds	r7, #16
 800a96e:	46bd      	mov	sp, r7
 800a970:	bd80      	pop	{r7, pc}

0800a972 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a972:	b580      	push	{r7, lr}
 800a974:	b09c      	sub	sp, #112	; 0x70
 800a976:	af00      	add	r7, sp, #0
 800a978:	60f8      	str	r0, [r7, #12]
 800a97a:	60b9      	str	r1, [r7, #8]
 800a97c:	603b      	str	r3, [r7, #0]
 800a97e:	4613      	mov	r3, r2
 800a980:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a982:	e0a9      	b.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a984:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a98a:	f000 80a5 	beq.w	800aad8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a98e:	f7f8 fb03 	bl	8002f98 <HAL_GetTick>
 800a992:	4602      	mov	r2, r0
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	1ad3      	subs	r3, r2, r3
 800a998:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a99a:	429a      	cmp	r2, r3
 800a99c:	d302      	bcc.n	800a9a4 <UART_WaitOnFlagUntilTimeout+0x32>
 800a99e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d140      	bne.n	800aa26 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a9ac:	e853 3f00 	ldrex	r3, [r3]
 800a9b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a9b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a9b4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a9b8:	667b      	str	r3, [r7, #100]	; 0x64
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a9c4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a9c8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a9ca:	e841 2300 	strex	r3, r2, [r1]
 800a9ce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a9d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1e6      	bne.n	800a9a4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	3308      	adds	r3, #8
 800a9dc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a9de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a9e0:	e853 3f00 	ldrex	r3, [r3]
 800a9e4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a9e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9e8:	f023 0301 	bic.w	r3, r3, #1
 800a9ec:	663b      	str	r3, [r7, #96]	; 0x60
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	3308      	adds	r3, #8
 800a9f4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a9f6:	64ba      	str	r2, [r7, #72]	; 0x48
 800a9f8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a9fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a9fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a9fe:	e841 2300 	strex	r3, r2, [r1]
 800aa02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800aa04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d1e5      	bne.n	800a9d6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	2220      	movs	r2, #32
 800aa0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2220      	movs	r2, #32
 800aa16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	2200      	movs	r2, #0
 800aa1e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 800aa22:	2303      	movs	r3, #3
 800aa24:	e069      	b.n	800aafa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	f003 0304 	and.w	r3, r3, #4
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	d051      	beq.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	69db      	ldr	r3, [r3, #28]
 800aa3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aa42:	d149      	bne.n	800aad8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa4c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa56:	e853 3f00 	ldrex	r3, [r3]
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800aa62:	66fb      	str	r3, [r7, #108]	; 0x6c
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800aa6c:	637b      	str	r3, [r7, #52]	; 0x34
 800aa6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aa70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800aa72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa74:	e841 2300 	strex	r3, r2, [r1]
 800aa78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800aa7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d1e6      	bne.n	800aa4e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	3308      	adds	r3, #8
 800aa86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	e853 3f00 	ldrex	r3, [r3]
 800aa8e:	613b      	str	r3, [r7, #16]
   return(result);
 800aa90:	693b      	ldr	r3, [r7, #16]
 800aa92:	f023 0301 	bic.w	r3, r3, #1
 800aa96:	66bb      	str	r3, [r7, #104]	; 0x68
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3308      	adds	r3, #8
 800aa9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800aaa0:	623a      	str	r2, [r7, #32]
 800aaa2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aaa4:	69f9      	ldr	r1, [r7, #28]
 800aaa6:	6a3a      	ldr	r2, [r7, #32]
 800aaa8:	e841 2300 	strex	r3, r2, [r1]
 800aaac:	61bb      	str	r3, [r7, #24]
   return(result);
 800aaae:	69bb      	ldr	r3, [r7, #24]
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d1e5      	bne.n	800aa80 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2220      	movs	r2, #32
 800aab8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2220      	movs	r2, #32
 800aac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	2220      	movs	r2, #32
 800aac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	2200      	movs	r2, #0
 800aad0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 800aad4:	2303      	movs	r3, #3
 800aad6:	e010      	b.n	800aafa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	69da      	ldr	r2, [r3, #28]
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	4013      	ands	r3, r2
 800aae2:	68ba      	ldr	r2, [r7, #8]
 800aae4:	429a      	cmp	r2, r3
 800aae6:	bf0c      	ite	eq
 800aae8:	2301      	moveq	r3, #1
 800aaea:	2300      	movne	r3, #0
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	461a      	mov	r2, r3
 800aaf0:	79fb      	ldrb	r3, [r7, #7]
 800aaf2:	429a      	cmp	r2, r3
 800aaf4:	f43f af46 	beq.w	800a984 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3770      	adds	r7, #112	; 0x70
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}
	...

0800ab04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b095      	sub	sp, #84	; 0x54
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab14:	e853 3f00 	ldrex	r3, [r3]
 800ab18:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ab1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab20:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	461a      	mov	r2, r3
 800ab28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab2a:	643b      	str	r3, [r7, #64]	; 0x40
 800ab2c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab2e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800ab30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ab32:	e841 2300 	strex	r3, r2, [r1]
 800ab36:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ab38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d1e6      	bne.n	800ab0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	681b      	ldr	r3, [r3, #0]
 800ab42:	3308      	adds	r3, #8
 800ab44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab46:	6a3b      	ldr	r3, [r7, #32]
 800ab48:	e853 3f00 	ldrex	r3, [r3]
 800ab4c:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab4e:	69fa      	ldr	r2, [r7, #28]
 800ab50:	4b1e      	ldr	r3, [pc, #120]	; (800abcc <UART_EndRxTransfer+0xc8>)
 800ab52:	4013      	ands	r3, r2
 800ab54:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3308      	adds	r3, #8
 800ab5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ab5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ab60:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab62:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ab64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ab66:	e841 2300 	strex	r3, r2, [r1]
 800ab6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ab6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1e5      	bne.n	800ab3e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ab76:	2b01      	cmp	r3, #1
 800ab78:	d118      	bne.n	800abac <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	e853 3f00 	ldrex	r3, [r3]
 800ab86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	f023 0310 	bic.w	r3, r3, #16
 800ab8e:	647b      	str	r3, [r7, #68]	; 0x44
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	461a      	mov	r2, r3
 800ab96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab98:	61bb      	str	r3, [r7, #24]
 800ab9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab9c:	6979      	ldr	r1, [r7, #20]
 800ab9e:	69ba      	ldr	r2, [r7, #24]
 800aba0:	e841 2300 	strex	r3, r2, [r1]
 800aba4:	613b      	str	r3, [r7, #16]
   return(result);
 800aba6:	693b      	ldr	r3, [r7, #16]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d1e6      	bne.n	800ab7a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	2220      	movs	r2, #32
 800abb0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	2200      	movs	r2, #0
 800abb8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	2200      	movs	r2, #0
 800abbe:	671a      	str	r2, [r3, #112]	; 0x70
}
 800abc0:	bf00      	nop
 800abc2:	3754      	adds	r7, #84	; 0x54
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	effffffe 	.word	0xeffffffe

0800abd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b084      	sub	sp, #16
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800abdc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	2200      	movs	r2, #0
 800abe2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	2200      	movs	r2, #0
 800abea:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800abee:	68f8      	ldr	r0, [r7, #12]
 800abf0:	f7ff f854 	bl	8009c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800abf4:	bf00      	nop
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}

0800abfc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b088      	sub	sp, #32
 800ac00:	af00      	add	r7, sp, #0
 800ac02:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	e853 3f00 	ldrex	r3, [r3]
 800ac10:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac18:	61fb      	str	r3, [r7, #28]
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	461a      	mov	r2, r3
 800ac20:	69fb      	ldr	r3, [r7, #28]
 800ac22:	61bb      	str	r3, [r7, #24]
 800ac24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac26:	6979      	ldr	r1, [r7, #20]
 800ac28:	69ba      	ldr	r2, [r7, #24]
 800ac2a:	e841 2300 	strex	r3, r2, [r1]
 800ac2e:	613b      	str	r3, [r7, #16]
   return(result);
 800ac30:	693b      	ldr	r3, [r7, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d1e6      	bne.n	800ac04 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2220      	movs	r2, #32
 800ac3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ac44:	6878      	ldr	r0, [r7, #4]
 800ac46:	f7ff f81f 	bl	8009c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ac4a:	bf00      	nop
 800ac4c:	3720      	adds	r7, #32
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}

0800ac52 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800ac52:	b480      	push	{r7}
 800ac54:	b083      	sub	sp, #12
 800ac56:	af00      	add	r7, sp, #0
 800ac58:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800ac5a:	bf00      	nop
 800ac5c:	370c      	adds	r7, #12
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b083      	sub	sp, #12
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800ac6e:	bf00      	nop
 800ac70:	370c      	adds	r7, #12
 800ac72:	46bd      	mov	sp, r7
 800ac74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac78:	4770      	bx	lr

0800ac7a <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800ac7a:	b480      	push	{r7}
 800ac7c:	b083      	sub	sp, #12
 800ac7e:	af00      	add	r7, sp, #0
 800ac80:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800ac82:	bf00      	nop
 800ac84:	370c      	adds	r7, #12
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr

0800ac8e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ac8e:	b480      	push	{r7}
 800ac90:	b085      	sub	sp, #20
 800ac92:	af00      	add	r7, sp, #0
 800ac94:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d101      	bne.n	800aca4 <HAL_UARTEx_DisableFifoMode+0x16>
 800aca0:	2302      	movs	r3, #2
 800aca2:	e027      	b.n	800acf4 <HAL_UARTEx_DisableFifoMode+0x66>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2201      	movs	r2, #1
 800aca8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	2224      	movs	r2, #36	; 0x24
 800acb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f022 0201 	bic.w	r2, r2, #1
 800acca:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800acd2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2200      	movs	r2, #0
 800acd8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	68fa      	ldr	r2, [r7, #12]
 800ace0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2220      	movs	r2, #32
 800ace6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800acf2:	2300      	movs	r3, #0
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3714      	adds	r7, #20
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad10:	2b01      	cmp	r3, #1
 800ad12:	d101      	bne.n	800ad18 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ad14:	2302      	movs	r3, #2
 800ad16:	e02d      	b.n	800ad74 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ad18:	687b      	ldr	r3, [r7, #4]
 800ad1a:	2201      	movs	r2, #1
 800ad1c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2224      	movs	r2, #36	; 0x24
 800ad24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	681a      	ldr	r2, [r3, #0]
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	f022 0201 	bic.w	r2, r2, #1
 800ad3e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	689b      	ldr	r3, [r3, #8]
 800ad46:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	681b      	ldr	r3, [r3, #0]
 800ad4e:	683a      	ldr	r2, [r7, #0]
 800ad50:	430a      	orrs	r2, r1
 800ad52:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ad54:	6878      	ldr	r0, [r7, #4]
 800ad56:	f000 f84f 	bl	800adf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	68fa      	ldr	r2, [r7, #12]
 800ad60:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2220      	movs	r2, #32
 800ad66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ad72:	2300      	movs	r3, #0
}
 800ad74:	4618      	mov	r0, r3
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ad8c:	2b01      	cmp	r3, #1
 800ad8e:	d101      	bne.n	800ad94 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ad90:	2302      	movs	r3, #2
 800ad92:	e02d      	b.n	800adf0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	2201      	movs	r2, #1
 800ad98:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2224      	movs	r2, #36	; 0x24
 800ada0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	681a      	ldr	r2, [r3, #0]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f022 0201 	bic.w	r2, r2, #1
 800adba:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	689b      	ldr	r3, [r3, #8]
 800adc2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	683a      	ldr	r2, [r7, #0]
 800adcc:	430a      	orrs	r2, r1
 800adce:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800add0:	6878      	ldr	r0, [r7, #4]
 800add2:	f000 f811 	bl	800adf8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	68fa      	ldr	r2, [r7, #12]
 800addc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2220      	movs	r2, #32
 800ade2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	2200      	movs	r2, #0
 800adea:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800adee:	2300      	movs	r3, #0
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3710      	adds	r7, #16
 800adf4:	46bd      	mov	sp, r7
 800adf6:	bd80      	pop	{r7, pc}

0800adf8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d108      	bne.n	800ae1a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	2201      	movs	r2, #1
 800ae0c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800ae18:	e031      	b.n	800ae7e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800ae1a:	2310      	movs	r3, #16
 800ae1c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800ae1e:	2310      	movs	r3, #16
 800ae20:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	689b      	ldr	r3, [r3, #8]
 800ae28:	0e5b      	lsrs	r3, r3, #25
 800ae2a:	b2db      	uxtb	r3, r3
 800ae2c:	f003 0307 	and.w	r3, r3, #7
 800ae30:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689b      	ldr	r3, [r3, #8]
 800ae38:	0f5b      	lsrs	r3, r3, #29
 800ae3a:	b2db      	uxtb	r3, r3
 800ae3c:	f003 0307 	and.w	r3, r3, #7
 800ae40:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae42:	7bbb      	ldrb	r3, [r7, #14]
 800ae44:	7b3a      	ldrb	r2, [r7, #12]
 800ae46:	4911      	ldr	r1, [pc, #68]	; (800ae8c <UARTEx_SetNbDataToProcess+0x94>)
 800ae48:	5c8a      	ldrb	r2, [r1, r2]
 800ae4a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800ae4e:	7b3a      	ldrb	r2, [r7, #12]
 800ae50:	490f      	ldr	r1, [pc, #60]	; (800ae90 <UARTEx_SetNbDataToProcess+0x98>)
 800ae52:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800ae54:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae60:	7bfb      	ldrb	r3, [r7, #15]
 800ae62:	7b7a      	ldrb	r2, [r7, #13]
 800ae64:	4909      	ldr	r1, [pc, #36]	; (800ae8c <UARTEx_SetNbDataToProcess+0x94>)
 800ae66:	5c8a      	ldrb	r2, [r1, r2]
 800ae68:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800ae6c:	7b7a      	ldrb	r2, [r7, #13]
 800ae6e:	4908      	ldr	r1, [pc, #32]	; (800ae90 <UARTEx_SetNbDataToProcess+0x98>)
 800ae70:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800ae72:	fb93 f3f2 	sdiv	r3, r3, r2
 800ae76:	b29a      	uxth	r2, r3
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800ae7e:	bf00      	nop
 800ae80:	3714      	adds	r7, #20
 800ae82:	46bd      	mov	sp, r7
 800ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae88:	4770      	bx	lr
 800ae8a:	bf00      	nop
 800ae8c:	0800d458 	.word	0x0800d458
 800ae90:	0800d460 	.word	0x0800d460

0800ae94 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ae94:	b084      	sub	sp, #16
 800ae96:	b580      	push	{r7, lr}
 800ae98:	b084      	sub	sp, #16
 800ae9a:	af00      	add	r7, sp, #0
 800ae9c:	6078      	str	r0, [r7, #4]
 800ae9e:	f107 001c 	add.w	r0, r7, #28
 800aea2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800aea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aea8:	2b01      	cmp	r3, #1
 800aeaa:	d120      	bne.n	800aeee <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	68da      	ldr	r2, [r3, #12]
 800aebc:	4b2a      	ldr	r3, [pc, #168]	; (800af68 <USB_CoreInit+0xd4>)
 800aebe:	4013      	ands	r3, r2
 800aec0:	687a      	ldr	r2, [r7, #4]
 800aec2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	68db      	ldr	r3, [r3, #12]
 800aec8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aed2:	2b01      	cmp	r3, #1
 800aed4:	d105      	bne.n	800aee2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aee2:	6878      	ldr	r0, [r7, #4]
 800aee4:	f000 faac 	bl	800b440 <USB_CoreReset>
 800aee8:	4603      	mov	r3, r0
 800aeea:	73fb      	strb	r3, [r7, #15]
 800aeec:	e01a      	b.n	800af24 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	68db      	ldr	r3, [r3, #12]
 800aef2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	f000 faa0 	bl	800b440 <USB_CoreReset>
 800af00:	4603      	mov	r3, r0
 800af02:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800af04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800af06:	2b00      	cmp	r3, #0
 800af08:	d106      	bne.n	800af18 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af0e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	639a      	str	r2, [r3, #56]	; 0x38
 800af16:	e005      	b.n	800af24 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800af24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af26:	2b01      	cmp	r3, #1
 800af28:	d116      	bne.n	800af58 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af2e:	b29a      	uxth	r2, r3
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800af38:	4b0c      	ldr	r3, [pc, #48]	; (800af6c <USB_CoreInit+0xd8>)
 800af3a:	4313      	orrs	r3, r2
 800af3c:	687a      	ldr	r2, [r7, #4]
 800af3e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	689b      	ldr	r3, [r3, #8]
 800af44:	f043 0206 	orr.w	r2, r3, #6
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	689b      	ldr	r3, [r3, #8]
 800af50:	f043 0220 	orr.w	r2, r3, #32
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800af58:	7bfb      	ldrb	r3, [r7, #15]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3710      	adds	r7, #16
 800af5e:	46bd      	mov	sp, r7
 800af60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af64:	b004      	add	sp, #16
 800af66:	4770      	bx	lr
 800af68:	ffbdffbf 	.word	0xffbdffbf
 800af6c:	03ee0000 	.word	0x03ee0000

0800af70 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800af70:	b480      	push	{r7}
 800af72:	b083      	sub	sp, #12
 800af74:	af00      	add	r7, sp, #0
 800af76:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	689b      	ldr	r3, [r3, #8]
 800af7c:	f023 0201 	bic.w	r2, r3, #1
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af84:	2300      	movs	r3, #0
}
 800af86:	4618      	mov	r0, r3
 800af88:	370c      	adds	r7, #12
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr

0800af92 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af92:	b580      	push	{r7, lr}
 800af94:	b084      	sub	sp, #16
 800af96:	af00      	add	r7, sp, #0
 800af98:	6078      	str	r0, [r7, #4]
 800af9a:	460b      	mov	r3, r1
 800af9c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af9e:	2300      	movs	r3, #0
 800afa0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	68db      	ldr	r3, [r3, #12]
 800afa6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800afae:	78fb      	ldrb	r3, [r7, #3]
 800afb0:	2b01      	cmp	r3, #1
 800afb2:	d115      	bne.n	800afe0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800afc0:	2001      	movs	r0, #1
 800afc2:	f7f7 fff5 	bl	8002fb0 <HAL_Delay>
      ms++;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	3301      	adds	r3, #1
 800afca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f000 fa29 	bl	800b424 <USB_GetMode>
 800afd2:	4603      	mov	r3, r0
 800afd4:	2b01      	cmp	r3, #1
 800afd6:	d01e      	beq.n	800b016 <USB_SetCurrentMode+0x84>
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	2b31      	cmp	r3, #49	; 0x31
 800afdc:	d9f0      	bls.n	800afc0 <USB_SetCurrentMode+0x2e>
 800afde:	e01a      	b.n	800b016 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800afe0:	78fb      	ldrb	r3, [r7, #3]
 800afe2:	2b00      	cmp	r3, #0
 800afe4:	d115      	bne.n	800b012 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	68db      	ldr	r3, [r3, #12]
 800afea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800aff2:	2001      	movs	r0, #1
 800aff4:	f7f7 ffdc 	bl	8002fb0 <HAL_Delay>
      ms++;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	3301      	adds	r3, #1
 800affc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800affe:	6878      	ldr	r0, [r7, #4]
 800b000:	f000 fa10 	bl	800b424 <USB_GetMode>
 800b004:	4603      	mov	r3, r0
 800b006:	2b00      	cmp	r3, #0
 800b008:	d005      	beq.n	800b016 <USB_SetCurrentMode+0x84>
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	2b31      	cmp	r3, #49	; 0x31
 800b00e:	d9f0      	bls.n	800aff2 <USB_SetCurrentMode+0x60>
 800b010:	e001      	b.n	800b016 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b012:	2301      	movs	r3, #1
 800b014:	e005      	b.n	800b022 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	2b32      	cmp	r3, #50	; 0x32
 800b01a:	d101      	bne.n	800b020 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b01c:	2301      	movs	r3, #1
 800b01e:	e000      	b.n	800b022 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b020:	2300      	movs	r3, #0
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}
	...

0800b02c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b02c:	b084      	sub	sp, #16
 800b02e:	b580      	push	{r7, lr}
 800b030:	b086      	sub	sp, #24
 800b032:	af00      	add	r7, sp, #0
 800b034:	6078      	str	r0, [r7, #4]
 800b036:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b03a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b03e:	2300      	movs	r3, #0
 800b040:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b046:	2300      	movs	r3, #0
 800b048:	613b      	str	r3, [r7, #16]
 800b04a:	e009      	b.n	800b060 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	693b      	ldr	r3, [r7, #16]
 800b050:	3340      	adds	r3, #64	; 0x40
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	2200      	movs	r2, #0
 800b058:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	3301      	adds	r3, #1
 800b05e:	613b      	str	r3, [r7, #16]
 800b060:	693b      	ldr	r3, [r7, #16]
 800b062:	2b0e      	cmp	r3, #14
 800b064:	d9f2      	bls.n	800b04c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d11c      	bne.n	800b0a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	68fa      	ldr	r2, [r7, #12]
 800b076:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b07a:	f043 0302 	orr.w	r3, r3, #2
 800b07e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b084:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	601a      	str	r2, [r3, #0]
 800b0a4:	e005      	b.n	800b0b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0c4:	4619      	mov	r1, r3
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0cc:	461a      	mov	r2, r3
 800b0ce:	680b      	ldr	r3, [r1, #0]
 800b0d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b0d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0d4:	2b01      	cmp	r3, #1
 800b0d6:	d10c      	bne.n	800b0f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b0d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d104      	bne.n	800b0e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b0de:	2100      	movs	r1, #0
 800b0e0:	6878      	ldr	r0, [r7, #4]
 800b0e2:	f000 f965 	bl	800b3b0 <USB_SetDevSpeed>
 800b0e6:	e008      	b.n	800b0fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b0e8:	2101      	movs	r1, #1
 800b0ea:	6878      	ldr	r0, [r7, #4]
 800b0ec:	f000 f960 	bl	800b3b0 <USB_SetDevSpeed>
 800b0f0:	e003      	b.n	800b0fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b0f2:	2103      	movs	r1, #3
 800b0f4:	6878      	ldr	r0, [r7, #4]
 800b0f6:	f000 f95b 	bl	800b3b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b0fa:	2110      	movs	r1, #16
 800b0fc:	6878      	ldr	r0, [r7, #4]
 800b0fe:	f000 f8f3 	bl	800b2e8 <USB_FlushTxFifo>
 800b102:	4603      	mov	r3, r0
 800b104:	2b00      	cmp	r3, #0
 800b106:	d001      	beq.n	800b10c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b108:	2301      	movs	r3, #1
 800b10a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b10c:	6878      	ldr	r0, [r7, #4]
 800b10e:	f000 f91f 	bl	800b350 <USB_FlushRxFifo>
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d001      	beq.n	800b11c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b118:	2301      	movs	r3, #1
 800b11a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b122:	461a      	mov	r2, r3
 800b124:	2300      	movs	r3, #0
 800b126:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12e:	461a      	mov	r2, r3
 800b130:	2300      	movs	r3, #0
 800b132:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b13a:	461a      	mov	r2, r3
 800b13c:	2300      	movs	r3, #0
 800b13e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b140:	2300      	movs	r3, #0
 800b142:	613b      	str	r3, [r7, #16]
 800b144:	e043      	b.n	800b1ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	015a      	lsls	r2, r3, #5
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	4413      	add	r3, r2
 800b14e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b158:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b15c:	d118      	bne.n	800b190 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b15e:	693b      	ldr	r3, [r7, #16]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d10a      	bne.n	800b17a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	015a      	lsls	r2, r3, #5
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	4413      	add	r3, r2
 800b16c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b170:	461a      	mov	r2, r3
 800b172:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	e013      	b.n	800b1a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b186:	461a      	mov	r2, r3
 800b188:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e008      	b.n	800b1a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b19c:	461a      	mov	r2, r3
 800b19e:	2300      	movs	r3, #0
 800b1a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b1a2:	693b      	ldr	r3, [r7, #16]
 800b1a4:	015a      	lsls	r2, r3, #5
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	4413      	add	r3, r2
 800b1aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b1b4:	693b      	ldr	r3, [r7, #16]
 800b1b6:	015a      	lsls	r2, r3, #5
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c0:	461a      	mov	r2, r3
 800b1c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	3301      	adds	r3, #1
 800b1cc:	613b      	str	r3, [r7, #16]
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	693a      	ldr	r2, [r7, #16]
 800b1d2:	429a      	cmp	r2, r3
 800b1d4:	d3b7      	bcc.n	800b146 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	613b      	str	r3, [r7, #16]
 800b1da:	e043      	b.n	800b264 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b1dc:	693b      	ldr	r3, [r7, #16]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1f2:	d118      	bne.n	800b226 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d10a      	bne.n	800b210 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b1fa:	693b      	ldr	r3, [r7, #16]
 800b1fc:	015a      	lsls	r2, r3, #5
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	4413      	add	r3, r2
 800b202:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b206:	461a      	mov	r2, r3
 800b208:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b20c:	6013      	str	r3, [r2, #0]
 800b20e:	e013      	b.n	800b238 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	015a      	lsls	r2, r3, #5
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	4413      	add	r3, r2
 800b218:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b21c:	461a      	mov	r2, r3
 800b21e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b222:	6013      	str	r3, [r2, #0]
 800b224:	e008      	b.n	800b238 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	015a      	lsls	r2, r3, #5
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	4413      	add	r3, r2
 800b22e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b232:	461a      	mov	r2, r3
 800b234:	2300      	movs	r3, #0
 800b236:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b238:	693b      	ldr	r3, [r7, #16]
 800b23a:	015a      	lsls	r2, r3, #5
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	4413      	add	r3, r2
 800b240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b244:	461a      	mov	r2, r3
 800b246:	2300      	movs	r3, #0
 800b248:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b24a:	693b      	ldr	r3, [r7, #16]
 800b24c:	015a      	lsls	r2, r3, #5
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	4413      	add	r3, r2
 800b252:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b256:	461a      	mov	r2, r3
 800b258:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b25c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b25e:	693b      	ldr	r3, [r7, #16]
 800b260:	3301      	adds	r3, #1
 800b262:	613b      	str	r3, [r7, #16]
 800b264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b266:	693a      	ldr	r2, [r7, #16]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d3b7      	bcc.n	800b1dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b272:	691b      	ldr	r3, [r3, #16]
 800b274:	68fa      	ldr	r2, [r7, #12]
 800b276:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b27a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b27e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2200      	movs	r2, #0
 800b284:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b28c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b290:	2b00      	cmp	r3, #0
 800b292:	d105      	bne.n	800b2a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	699b      	ldr	r3, [r3, #24]
 800b298:	f043 0210 	orr.w	r2, r3, #16
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	699a      	ldr	r2, [r3, #24]
 800b2a4:	4b0e      	ldr	r3, [pc, #56]	; (800b2e0 <USB_DevInit+0x2b4>)
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	687a      	ldr	r2, [r7, #4]
 800b2aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b2ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b2ae:	2b00      	cmp	r3, #0
 800b2b0:	d005      	beq.n	800b2be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	699b      	ldr	r3, [r3, #24]
 800b2b6:	f043 0208 	orr.w	r2, r3, #8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b2be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b2c0:	2b01      	cmp	r3, #1
 800b2c2:	d105      	bne.n	800b2d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	699a      	ldr	r2, [r3, #24]
 800b2c8:	4b06      	ldr	r3, [pc, #24]	; (800b2e4 <USB_DevInit+0x2b8>)
 800b2ca:	4313      	orrs	r3, r2
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3718      	adds	r7, #24
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b2dc:	b004      	add	sp, #16
 800b2de:	4770      	bx	lr
 800b2e0:	803c3800 	.word	0x803c3800
 800b2e4:	40000004 	.word	0x40000004

0800b2e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b2e8:	b480      	push	{r7}
 800b2ea:	b085      	sub	sp, #20
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
 800b2f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b2f2:	2300      	movs	r3, #0
 800b2f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	3301      	adds	r3, #1
 800b2fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4a13      	ldr	r2, [pc, #76]	; (800b34c <USB_FlushTxFifo+0x64>)
 800b300:	4293      	cmp	r3, r2
 800b302:	d901      	bls.n	800b308 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b304:	2303      	movs	r3, #3
 800b306:	e01b      	b.n	800b340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	691b      	ldr	r3, [r3, #16]
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	daf2      	bge.n	800b2f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b310:	2300      	movs	r3, #0
 800b312:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b314:	683b      	ldr	r3, [r7, #0]
 800b316:	019b      	lsls	r3, r3, #6
 800b318:	f043 0220 	orr.w	r2, r3, #32
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	3301      	adds	r3, #1
 800b324:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	4a08      	ldr	r2, [pc, #32]	; (800b34c <USB_FlushTxFifo+0x64>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d901      	bls.n	800b332 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e006      	b.n	800b340 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	691b      	ldr	r3, [r3, #16]
 800b336:	f003 0320 	and.w	r3, r3, #32
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	d0f0      	beq.n	800b320 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b33e:	2300      	movs	r3, #0
}
 800b340:	4618      	mov	r0, r3
 800b342:	3714      	adds	r7, #20
 800b344:	46bd      	mov	sp, r7
 800b346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b34a:	4770      	bx	lr
 800b34c:	00030d40 	.word	0x00030d40

0800b350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b350:	b480      	push	{r7}
 800b352:	b085      	sub	sp, #20
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b358:	2300      	movs	r3, #0
 800b35a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	3301      	adds	r3, #1
 800b360:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	4a11      	ldr	r2, [pc, #68]	; (800b3ac <USB_FlushRxFifo+0x5c>)
 800b366:	4293      	cmp	r3, r2
 800b368:	d901      	bls.n	800b36e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b36a:	2303      	movs	r3, #3
 800b36c:	e018      	b.n	800b3a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	691b      	ldr	r3, [r3, #16]
 800b372:	2b00      	cmp	r3, #0
 800b374:	daf2      	bge.n	800b35c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b376:	2300      	movs	r3, #0
 800b378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2210      	movs	r2, #16
 800b37e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	3301      	adds	r3, #1
 800b384:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	4a08      	ldr	r2, [pc, #32]	; (800b3ac <USB_FlushRxFifo+0x5c>)
 800b38a:	4293      	cmp	r3, r2
 800b38c:	d901      	bls.n	800b392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b38e:	2303      	movs	r3, #3
 800b390:	e006      	b.n	800b3a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	f003 0310 	and.w	r3, r3, #16
 800b39a:	2b10      	cmp	r3, #16
 800b39c:	d0f0      	beq.n	800b380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3714      	adds	r7, #20
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr
 800b3ac:	00030d40 	.word	0x00030d40

0800b3b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b3b0:	b480      	push	{r7}
 800b3b2:	b085      	sub	sp, #20
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
 800b3b8:	460b      	mov	r3, r1
 800b3ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3c6:	681a      	ldr	r2, [r3, #0]
 800b3c8:	78fb      	ldrb	r3, [r7, #3]
 800b3ca:	68f9      	ldr	r1, [r7, #12]
 800b3cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3714      	adds	r7, #20
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e0:	4770      	bx	lr

0800b3e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800b3e2:	b480      	push	{r7}
 800b3e4:	b085      	sub	sp, #20
 800b3e6:	af00      	add	r7, sp, #0
 800b3e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68fa      	ldr	r2, [r7, #12]
 800b3f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b3fc:	f023 0303 	bic.w	r3, r3, #3
 800b400:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b410:	f043 0302 	orr.w	r3, r3, #2
 800b414:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800b416:	2300      	movs	r3, #0
}
 800b418:	4618      	mov	r0, r3
 800b41a:	3714      	adds	r7, #20
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800b424:	b480      	push	{r7}
 800b426:	b083      	sub	sp, #12
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	695b      	ldr	r3, [r3, #20]
 800b430:	f003 0301 	and.w	r3, r3, #1
}
 800b434:	4618      	mov	r0, r3
 800b436:	370c      	adds	r7, #12
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr

0800b440 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800b440:	b480      	push	{r7}
 800b442:	b085      	sub	sp, #20
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b448:	2300      	movs	r3, #0
 800b44a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	3301      	adds	r3, #1
 800b450:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	4a13      	ldr	r2, [pc, #76]	; (800b4a4 <USB_CoreReset+0x64>)
 800b456:	4293      	cmp	r3, r2
 800b458:	d901      	bls.n	800b45e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800b45a:	2303      	movs	r3, #3
 800b45c:	e01b      	b.n	800b496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	691b      	ldr	r3, [r3, #16]
 800b462:	2b00      	cmp	r3, #0
 800b464:	daf2      	bge.n	800b44c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800b466:	2300      	movs	r3, #0
 800b468:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	f043 0201 	orr.w	r2, r3, #1
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	3301      	adds	r3, #1
 800b47a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	4a09      	ldr	r2, [pc, #36]	; (800b4a4 <USB_CoreReset+0x64>)
 800b480:	4293      	cmp	r3, r2
 800b482:	d901      	bls.n	800b488 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800b484:	2303      	movs	r3, #3
 800b486:	e006      	b.n	800b496 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	f003 0301 	and.w	r3, r3, #1
 800b490:	2b01      	cmp	r3, #1
 800b492:	d0f0      	beq.n	800b476 <USB_CoreReset+0x36>

  return HAL_OK;
 800b494:	2300      	movs	r3, #0
}
 800b496:	4618      	mov	r0, r3
 800b498:	3714      	adds	r7, #20
 800b49a:	46bd      	mov	sp, r7
 800b49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a0:	4770      	bx	lr
 800b4a2:	bf00      	nop
 800b4a4:	00030d40 	.word	0x00030d40

0800b4a8 <__errno>:
 800b4a8:	4b01      	ldr	r3, [pc, #4]	; (800b4b0 <__errno+0x8>)
 800b4aa:	6818      	ldr	r0, [r3, #0]
 800b4ac:	4770      	bx	lr
 800b4ae:	bf00      	nop
 800b4b0:	24000020 	.word	0x24000020

0800b4b4 <__libc_init_array>:
 800b4b4:	b570      	push	{r4, r5, r6, lr}
 800b4b6:	4d0d      	ldr	r5, [pc, #52]	; (800b4ec <__libc_init_array+0x38>)
 800b4b8:	4c0d      	ldr	r4, [pc, #52]	; (800b4f0 <__libc_init_array+0x3c>)
 800b4ba:	1b64      	subs	r4, r4, r5
 800b4bc:	10a4      	asrs	r4, r4, #2
 800b4be:	2600      	movs	r6, #0
 800b4c0:	42a6      	cmp	r6, r4
 800b4c2:	d109      	bne.n	800b4d8 <__libc_init_array+0x24>
 800b4c4:	4d0b      	ldr	r5, [pc, #44]	; (800b4f4 <__libc_init_array+0x40>)
 800b4c6:	4c0c      	ldr	r4, [pc, #48]	; (800b4f8 <__libc_init_array+0x44>)
 800b4c8:	f000 fc8e 	bl	800bde8 <_init>
 800b4cc:	1b64      	subs	r4, r4, r5
 800b4ce:	10a4      	asrs	r4, r4, #2
 800b4d0:	2600      	movs	r6, #0
 800b4d2:	42a6      	cmp	r6, r4
 800b4d4:	d105      	bne.n	800b4e2 <__libc_init_array+0x2e>
 800b4d6:	bd70      	pop	{r4, r5, r6, pc}
 800b4d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4dc:	4798      	blx	r3
 800b4de:	3601      	adds	r6, #1
 800b4e0:	e7ee      	b.n	800b4c0 <__libc_init_array+0xc>
 800b4e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b4e6:	4798      	blx	r3
 800b4e8:	3601      	adds	r6, #1
 800b4ea:	e7f2      	b.n	800b4d2 <__libc_init_array+0x1e>
 800b4ec:	0800d4a4 	.word	0x0800d4a4
 800b4f0:	0800d4a4 	.word	0x0800d4a4
 800b4f4:	0800d4a4 	.word	0x0800d4a4
 800b4f8:	0800d4a8 	.word	0x0800d4a8

0800b4fc <memset>:
 800b4fc:	4402      	add	r2, r0
 800b4fe:	4603      	mov	r3, r0
 800b500:	4293      	cmp	r3, r2
 800b502:	d100      	bne.n	800b506 <memset+0xa>
 800b504:	4770      	bx	lr
 800b506:	f803 1b01 	strb.w	r1, [r3], #1
 800b50a:	e7f9      	b.n	800b500 <memset+0x4>

0800b50c <_free_r>:
 800b50c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b50e:	2900      	cmp	r1, #0
 800b510:	d044      	beq.n	800b59c <_free_r+0x90>
 800b512:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b516:	9001      	str	r0, [sp, #4]
 800b518:	2b00      	cmp	r3, #0
 800b51a:	f1a1 0404 	sub.w	r4, r1, #4
 800b51e:	bfb8      	it	lt
 800b520:	18e4      	addlt	r4, r4, r3
 800b522:	f000 f903 	bl	800b72c <__malloc_lock>
 800b526:	4a1e      	ldr	r2, [pc, #120]	; (800b5a0 <_free_r+0x94>)
 800b528:	9801      	ldr	r0, [sp, #4]
 800b52a:	6813      	ldr	r3, [r2, #0]
 800b52c:	b933      	cbnz	r3, 800b53c <_free_r+0x30>
 800b52e:	6063      	str	r3, [r4, #4]
 800b530:	6014      	str	r4, [r2, #0]
 800b532:	b003      	add	sp, #12
 800b534:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b538:	f000 b8fe 	b.w	800b738 <__malloc_unlock>
 800b53c:	42a3      	cmp	r3, r4
 800b53e:	d908      	bls.n	800b552 <_free_r+0x46>
 800b540:	6825      	ldr	r5, [r4, #0]
 800b542:	1961      	adds	r1, r4, r5
 800b544:	428b      	cmp	r3, r1
 800b546:	bf01      	itttt	eq
 800b548:	6819      	ldreq	r1, [r3, #0]
 800b54a:	685b      	ldreq	r3, [r3, #4]
 800b54c:	1949      	addeq	r1, r1, r5
 800b54e:	6021      	streq	r1, [r4, #0]
 800b550:	e7ed      	b.n	800b52e <_free_r+0x22>
 800b552:	461a      	mov	r2, r3
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	b10b      	cbz	r3, 800b55c <_free_r+0x50>
 800b558:	42a3      	cmp	r3, r4
 800b55a:	d9fa      	bls.n	800b552 <_free_r+0x46>
 800b55c:	6811      	ldr	r1, [r2, #0]
 800b55e:	1855      	adds	r5, r2, r1
 800b560:	42a5      	cmp	r5, r4
 800b562:	d10b      	bne.n	800b57c <_free_r+0x70>
 800b564:	6824      	ldr	r4, [r4, #0]
 800b566:	4421      	add	r1, r4
 800b568:	1854      	adds	r4, r2, r1
 800b56a:	42a3      	cmp	r3, r4
 800b56c:	6011      	str	r1, [r2, #0]
 800b56e:	d1e0      	bne.n	800b532 <_free_r+0x26>
 800b570:	681c      	ldr	r4, [r3, #0]
 800b572:	685b      	ldr	r3, [r3, #4]
 800b574:	6053      	str	r3, [r2, #4]
 800b576:	4421      	add	r1, r4
 800b578:	6011      	str	r1, [r2, #0]
 800b57a:	e7da      	b.n	800b532 <_free_r+0x26>
 800b57c:	d902      	bls.n	800b584 <_free_r+0x78>
 800b57e:	230c      	movs	r3, #12
 800b580:	6003      	str	r3, [r0, #0]
 800b582:	e7d6      	b.n	800b532 <_free_r+0x26>
 800b584:	6825      	ldr	r5, [r4, #0]
 800b586:	1961      	adds	r1, r4, r5
 800b588:	428b      	cmp	r3, r1
 800b58a:	bf04      	itt	eq
 800b58c:	6819      	ldreq	r1, [r3, #0]
 800b58e:	685b      	ldreq	r3, [r3, #4]
 800b590:	6063      	str	r3, [r4, #4]
 800b592:	bf04      	itt	eq
 800b594:	1949      	addeq	r1, r1, r5
 800b596:	6021      	streq	r1, [r4, #0]
 800b598:	6054      	str	r4, [r2, #4]
 800b59a:	e7ca      	b.n	800b532 <_free_r+0x26>
 800b59c:	b003      	add	sp, #12
 800b59e:	bd30      	pop	{r4, r5, pc}
 800b5a0:	24000cac 	.word	0x24000cac

0800b5a4 <sbrk_aligned>:
 800b5a4:	b570      	push	{r4, r5, r6, lr}
 800b5a6:	4e0e      	ldr	r6, [pc, #56]	; (800b5e0 <sbrk_aligned+0x3c>)
 800b5a8:	460c      	mov	r4, r1
 800b5aa:	6831      	ldr	r1, [r6, #0]
 800b5ac:	4605      	mov	r5, r0
 800b5ae:	b911      	cbnz	r1, 800b5b6 <sbrk_aligned+0x12>
 800b5b0:	f000 f88c 	bl	800b6cc <_sbrk_r>
 800b5b4:	6030      	str	r0, [r6, #0]
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4628      	mov	r0, r5
 800b5ba:	f000 f887 	bl	800b6cc <_sbrk_r>
 800b5be:	1c43      	adds	r3, r0, #1
 800b5c0:	d00a      	beq.n	800b5d8 <sbrk_aligned+0x34>
 800b5c2:	1cc4      	adds	r4, r0, #3
 800b5c4:	f024 0403 	bic.w	r4, r4, #3
 800b5c8:	42a0      	cmp	r0, r4
 800b5ca:	d007      	beq.n	800b5dc <sbrk_aligned+0x38>
 800b5cc:	1a21      	subs	r1, r4, r0
 800b5ce:	4628      	mov	r0, r5
 800b5d0:	f000 f87c 	bl	800b6cc <_sbrk_r>
 800b5d4:	3001      	adds	r0, #1
 800b5d6:	d101      	bne.n	800b5dc <sbrk_aligned+0x38>
 800b5d8:	f04f 34ff 	mov.w	r4, #4294967295
 800b5dc:	4620      	mov	r0, r4
 800b5de:	bd70      	pop	{r4, r5, r6, pc}
 800b5e0:	24000cb0 	.word	0x24000cb0

0800b5e4 <_malloc_r>:
 800b5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5e8:	1ccd      	adds	r5, r1, #3
 800b5ea:	f025 0503 	bic.w	r5, r5, #3
 800b5ee:	3508      	adds	r5, #8
 800b5f0:	2d0c      	cmp	r5, #12
 800b5f2:	bf38      	it	cc
 800b5f4:	250c      	movcc	r5, #12
 800b5f6:	2d00      	cmp	r5, #0
 800b5f8:	4607      	mov	r7, r0
 800b5fa:	db01      	blt.n	800b600 <_malloc_r+0x1c>
 800b5fc:	42a9      	cmp	r1, r5
 800b5fe:	d905      	bls.n	800b60c <_malloc_r+0x28>
 800b600:	230c      	movs	r3, #12
 800b602:	603b      	str	r3, [r7, #0]
 800b604:	2600      	movs	r6, #0
 800b606:	4630      	mov	r0, r6
 800b608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b60c:	4e2e      	ldr	r6, [pc, #184]	; (800b6c8 <_malloc_r+0xe4>)
 800b60e:	f000 f88d 	bl	800b72c <__malloc_lock>
 800b612:	6833      	ldr	r3, [r6, #0]
 800b614:	461c      	mov	r4, r3
 800b616:	bb34      	cbnz	r4, 800b666 <_malloc_r+0x82>
 800b618:	4629      	mov	r1, r5
 800b61a:	4638      	mov	r0, r7
 800b61c:	f7ff ffc2 	bl	800b5a4 <sbrk_aligned>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	4604      	mov	r4, r0
 800b624:	d14d      	bne.n	800b6c2 <_malloc_r+0xde>
 800b626:	6834      	ldr	r4, [r6, #0]
 800b628:	4626      	mov	r6, r4
 800b62a:	2e00      	cmp	r6, #0
 800b62c:	d140      	bne.n	800b6b0 <_malloc_r+0xcc>
 800b62e:	6823      	ldr	r3, [r4, #0]
 800b630:	4631      	mov	r1, r6
 800b632:	4638      	mov	r0, r7
 800b634:	eb04 0803 	add.w	r8, r4, r3
 800b638:	f000 f848 	bl	800b6cc <_sbrk_r>
 800b63c:	4580      	cmp	r8, r0
 800b63e:	d13a      	bne.n	800b6b6 <_malloc_r+0xd2>
 800b640:	6821      	ldr	r1, [r4, #0]
 800b642:	3503      	adds	r5, #3
 800b644:	1a6d      	subs	r5, r5, r1
 800b646:	f025 0503 	bic.w	r5, r5, #3
 800b64a:	3508      	adds	r5, #8
 800b64c:	2d0c      	cmp	r5, #12
 800b64e:	bf38      	it	cc
 800b650:	250c      	movcc	r5, #12
 800b652:	4629      	mov	r1, r5
 800b654:	4638      	mov	r0, r7
 800b656:	f7ff ffa5 	bl	800b5a4 <sbrk_aligned>
 800b65a:	3001      	adds	r0, #1
 800b65c:	d02b      	beq.n	800b6b6 <_malloc_r+0xd2>
 800b65e:	6823      	ldr	r3, [r4, #0]
 800b660:	442b      	add	r3, r5
 800b662:	6023      	str	r3, [r4, #0]
 800b664:	e00e      	b.n	800b684 <_malloc_r+0xa0>
 800b666:	6822      	ldr	r2, [r4, #0]
 800b668:	1b52      	subs	r2, r2, r5
 800b66a:	d41e      	bmi.n	800b6aa <_malloc_r+0xc6>
 800b66c:	2a0b      	cmp	r2, #11
 800b66e:	d916      	bls.n	800b69e <_malloc_r+0xba>
 800b670:	1961      	adds	r1, r4, r5
 800b672:	42a3      	cmp	r3, r4
 800b674:	6025      	str	r5, [r4, #0]
 800b676:	bf18      	it	ne
 800b678:	6059      	strne	r1, [r3, #4]
 800b67a:	6863      	ldr	r3, [r4, #4]
 800b67c:	bf08      	it	eq
 800b67e:	6031      	streq	r1, [r6, #0]
 800b680:	5162      	str	r2, [r4, r5]
 800b682:	604b      	str	r3, [r1, #4]
 800b684:	4638      	mov	r0, r7
 800b686:	f104 060b 	add.w	r6, r4, #11
 800b68a:	f000 f855 	bl	800b738 <__malloc_unlock>
 800b68e:	f026 0607 	bic.w	r6, r6, #7
 800b692:	1d23      	adds	r3, r4, #4
 800b694:	1af2      	subs	r2, r6, r3
 800b696:	d0b6      	beq.n	800b606 <_malloc_r+0x22>
 800b698:	1b9b      	subs	r3, r3, r6
 800b69a:	50a3      	str	r3, [r4, r2]
 800b69c:	e7b3      	b.n	800b606 <_malloc_r+0x22>
 800b69e:	6862      	ldr	r2, [r4, #4]
 800b6a0:	42a3      	cmp	r3, r4
 800b6a2:	bf0c      	ite	eq
 800b6a4:	6032      	streq	r2, [r6, #0]
 800b6a6:	605a      	strne	r2, [r3, #4]
 800b6a8:	e7ec      	b.n	800b684 <_malloc_r+0xa0>
 800b6aa:	4623      	mov	r3, r4
 800b6ac:	6864      	ldr	r4, [r4, #4]
 800b6ae:	e7b2      	b.n	800b616 <_malloc_r+0x32>
 800b6b0:	4634      	mov	r4, r6
 800b6b2:	6876      	ldr	r6, [r6, #4]
 800b6b4:	e7b9      	b.n	800b62a <_malloc_r+0x46>
 800b6b6:	230c      	movs	r3, #12
 800b6b8:	603b      	str	r3, [r7, #0]
 800b6ba:	4638      	mov	r0, r7
 800b6bc:	f000 f83c 	bl	800b738 <__malloc_unlock>
 800b6c0:	e7a1      	b.n	800b606 <_malloc_r+0x22>
 800b6c2:	6025      	str	r5, [r4, #0]
 800b6c4:	e7de      	b.n	800b684 <_malloc_r+0xa0>
 800b6c6:	bf00      	nop
 800b6c8:	24000cac 	.word	0x24000cac

0800b6cc <_sbrk_r>:
 800b6cc:	b538      	push	{r3, r4, r5, lr}
 800b6ce:	4d06      	ldr	r5, [pc, #24]	; (800b6e8 <_sbrk_r+0x1c>)
 800b6d0:	2300      	movs	r3, #0
 800b6d2:	4604      	mov	r4, r0
 800b6d4:	4608      	mov	r0, r1
 800b6d6:	602b      	str	r3, [r5, #0]
 800b6d8:	f7f7 fb78 	bl	8002dcc <_sbrk>
 800b6dc:	1c43      	adds	r3, r0, #1
 800b6de:	d102      	bne.n	800b6e6 <_sbrk_r+0x1a>
 800b6e0:	682b      	ldr	r3, [r5, #0]
 800b6e2:	b103      	cbz	r3, 800b6e6 <_sbrk_r+0x1a>
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	bd38      	pop	{r3, r4, r5, pc}
 800b6e8:	24000cb4 	.word	0x24000cb4

0800b6ec <siprintf>:
 800b6ec:	b40e      	push	{r1, r2, r3}
 800b6ee:	b500      	push	{lr}
 800b6f0:	b09c      	sub	sp, #112	; 0x70
 800b6f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b6f4:	9002      	str	r0, [sp, #8]
 800b6f6:	9006      	str	r0, [sp, #24]
 800b6f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b6fc:	4809      	ldr	r0, [pc, #36]	; (800b724 <siprintf+0x38>)
 800b6fe:	9107      	str	r1, [sp, #28]
 800b700:	9104      	str	r1, [sp, #16]
 800b702:	4909      	ldr	r1, [pc, #36]	; (800b728 <siprintf+0x3c>)
 800b704:	f853 2b04 	ldr.w	r2, [r3], #4
 800b708:	9105      	str	r1, [sp, #20]
 800b70a:	6800      	ldr	r0, [r0, #0]
 800b70c:	9301      	str	r3, [sp, #4]
 800b70e:	a902      	add	r1, sp, #8
 800b710:	f000 f874 	bl	800b7fc <_svfiprintf_r>
 800b714:	9b02      	ldr	r3, [sp, #8]
 800b716:	2200      	movs	r2, #0
 800b718:	701a      	strb	r2, [r3, #0]
 800b71a:	b01c      	add	sp, #112	; 0x70
 800b71c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b720:	b003      	add	sp, #12
 800b722:	4770      	bx	lr
 800b724:	24000020 	.word	0x24000020
 800b728:	ffff0208 	.word	0xffff0208

0800b72c <__malloc_lock>:
 800b72c:	4801      	ldr	r0, [pc, #4]	; (800b734 <__malloc_lock+0x8>)
 800b72e:	f000 baf9 	b.w	800bd24 <__retarget_lock_acquire_recursive>
 800b732:	bf00      	nop
 800b734:	24000cb8 	.word	0x24000cb8

0800b738 <__malloc_unlock>:
 800b738:	4801      	ldr	r0, [pc, #4]	; (800b740 <__malloc_unlock+0x8>)
 800b73a:	f000 baf4 	b.w	800bd26 <__retarget_lock_release_recursive>
 800b73e:	bf00      	nop
 800b740:	24000cb8 	.word	0x24000cb8

0800b744 <__ssputs_r>:
 800b744:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b748:	688e      	ldr	r6, [r1, #8]
 800b74a:	429e      	cmp	r6, r3
 800b74c:	4682      	mov	sl, r0
 800b74e:	460c      	mov	r4, r1
 800b750:	4690      	mov	r8, r2
 800b752:	461f      	mov	r7, r3
 800b754:	d838      	bhi.n	800b7c8 <__ssputs_r+0x84>
 800b756:	898a      	ldrh	r2, [r1, #12]
 800b758:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b75c:	d032      	beq.n	800b7c4 <__ssputs_r+0x80>
 800b75e:	6825      	ldr	r5, [r4, #0]
 800b760:	6909      	ldr	r1, [r1, #16]
 800b762:	eba5 0901 	sub.w	r9, r5, r1
 800b766:	6965      	ldr	r5, [r4, #20]
 800b768:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b76c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b770:	3301      	adds	r3, #1
 800b772:	444b      	add	r3, r9
 800b774:	106d      	asrs	r5, r5, #1
 800b776:	429d      	cmp	r5, r3
 800b778:	bf38      	it	cc
 800b77a:	461d      	movcc	r5, r3
 800b77c:	0553      	lsls	r3, r2, #21
 800b77e:	d531      	bpl.n	800b7e4 <__ssputs_r+0xa0>
 800b780:	4629      	mov	r1, r5
 800b782:	f7ff ff2f 	bl	800b5e4 <_malloc_r>
 800b786:	4606      	mov	r6, r0
 800b788:	b950      	cbnz	r0, 800b7a0 <__ssputs_r+0x5c>
 800b78a:	230c      	movs	r3, #12
 800b78c:	f8ca 3000 	str.w	r3, [sl]
 800b790:	89a3      	ldrh	r3, [r4, #12]
 800b792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b796:	81a3      	strh	r3, [r4, #12]
 800b798:	f04f 30ff 	mov.w	r0, #4294967295
 800b79c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7a0:	6921      	ldr	r1, [r4, #16]
 800b7a2:	464a      	mov	r2, r9
 800b7a4:	f000 fac0 	bl	800bd28 <memcpy>
 800b7a8:	89a3      	ldrh	r3, [r4, #12]
 800b7aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b7ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7b2:	81a3      	strh	r3, [r4, #12]
 800b7b4:	6126      	str	r6, [r4, #16]
 800b7b6:	6165      	str	r5, [r4, #20]
 800b7b8:	444e      	add	r6, r9
 800b7ba:	eba5 0509 	sub.w	r5, r5, r9
 800b7be:	6026      	str	r6, [r4, #0]
 800b7c0:	60a5      	str	r5, [r4, #8]
 800b7c2:	463e      	mov	r6, r7
 800b7c4:	42be      	cmp	r6, r7
 800b7c6:	d900      	bls.n	800b7ca <__ssputs_r+0x86>
 800b7c8:	463e      	mov	r6, r7
 800b7ca:	6820      	ldr	r0, [r4, #0]
 800b7cc:	4632      	mov	r2, r6
 800b7ce:	4641      	mov	r1, r8
 800b7d0:	f000 fab8 	bl	800bd44 <memmove>
 800b7d4:	68a3      	ldr	r3, [r4, #8]
 800b7d6:	1b9b      	subs	r3, r3, r6
 800b7d8:	60a3      	str	r3, [r4, #8]
 800b7da:	6823      	ldr	r3, [r4, #0]
 800b7dc:	4433      	add	r3, r6
 800b7de:	6023      	str	r3, [r4, #0]
 800b7e0:	2000      	movs	r0, #0
 800b7e2:	e7db      	b.n	800b79c <__ssputs_r+0x58>
 800b7e4:	462a      	mov	r2, r5
 800b7e6:	f000 fac7 	bl	800bd78 <_realloc_r>
 800b7ea:	4606      	mov	r6, r0
 800b7ec:	2800      	cmp	r0, #0
 800b7ee:	d1e1      	bne.n	800b7b4 <__ssputs_r+0x70>
 800b7f0:	6921      	ldr	r1, [r4, #16]
 800b7f2:	4650      	mov	r0, sl
 800b7f4:	f7ff fe8a 	bl	800b50c <_free_r>
 800b7f8:	e7c7      	b.n	800b78a <__ssputs_r+0x46>
	...

0800b7fc <_svfiprintf_r>:
 800b7fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b800:	4698      	mov	r8, r3
 800b802:	898b      	ldrh	r3, [r1, #12]
 800b804:	061b      	lsls	r3, r3, #24
 800b806:	b09d      	sub	sp, #116	; 0x74
 800b808:	4607      	mov	r7, r0
 800b80a:	460d      	mov	r5, r1
 800b80c:	4614      	mov	r4, r2
 800b80e:	d50e      	bpl.n	800b82e <_svfiprintf_r+0x32>
 800b810:	690b      	ldr	r3, [r1, #16]
 800b812:	b963      	cbnz	r3, 800b82e <_svfiprintf_r+0x32>
 800b814:	2140      	movs	r1, #64	; 0x40
 800b816:	f7ff fee5 	bl	800b5e4 <_malloc_r>
 800b81a:	6028      	str	r0, [r5, #0]
 800b81c:	6128      	str	r0, [r5, #16]
 800b81e:	b920      	cbnz	r0, 800b82a <_svfiprintf_r+0x2e>
 800b820:	230c      	movs	r3, #12
 800b822:	603b      	str	r3, [r7, #0]
 800b824:	f04f 30ff 	mov.w	r0, #4294967295
 800b828:	e0d1      	b.n	800b9ce <_svfiprintf_r+0x1d2>
 800b82a:	2340      	movs	r3, #64	; 0x40
 800b82c:	616b      	str	r3, [r5, #20]
 800b82e:	2300      	movs	r3, #0
 800b830:	9309      	str	r3, [sp, #36]	; 0x24
 800b832:	2320      	movs	r3, #32
 800b834:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b838:	f8cd 800c 	str.w	r8, [sp, #12]
 800b83c:	2330      	movs	r3, #48	; 0x30
 800b83e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b9e8 <_svfiprintf_r+0x1ec>
 800b842:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b846:	f04f 0901 	mov.w	r9, #1
 800b84a:	4623      	mov	r3, r4
 800b84c:	469a      	mov	sl, r3
 800b84e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b852:	b10a      	cbz	r2, 800b858 <_svfiprintf_r+0x5c>
 800b854:	2a25      	cmp	r2, #37	; 0x25
 800b856:	d1f9      	bne.n	800b84c <_svfiprintf_r+0x50>
 800b858:	ebba 0b04 	subs.w	fp, sl, r4
 800b85c:	d00b      	beq.n	800b876 <_svfiprintf_r+0x7a>
 800b85e:	465b      	mov	r3, fp
 800b860:	4622      	mov	r2, r4
 800b862:	4629      	mov	r1, r5
 800b864:	4638      	mov	r0, r7
 800b866:	f7ff ff6d 	bl	800b744 <__ssputs_r>
 800b86a:	3001      	adds	r0, #1
 800b86c:	f000 80aa 	beq.w	800b9c4 <_svfiprintf_r+0x1c8>
 800b870:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b872:	445a      	add	r2, fp
 800b874:	9209      	str	r2, [sp, #36]	; 0x24
 800b876:	f89a 3000 	ldrb.w	r3, [sl]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f000 80a2 	beq.w	800b9c4 <_svfiprintf_r+0x1c8>
 800b880:	2300      	movs	r3, #0
 800b882:	f04f 32ff 	mov.w	r2, #4294967295
 800b886:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b88a:	f10a 0a01 	add.w	sl, sl, #1
 800b88e:	9304      	str	r3, [sp, #16]
 800b890:	9307      	str	r3, [sp, #28]
 800b892:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b896:	931a      	str	r3, [sp, #104]	; 0x68
 800b898:	4654      	mov	r4, sl
 800b89a:	2205      	movs	r2, #5
 800b89c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8a0:	4851      	ldr	r0, [pc, #324]	; (800b9e8 <_svfiprintf_r+0x1ec>)
 800b8a2:	f7f4 fd1d 	bl	80002e0 <memchr>
 800b8a6:	9a04      	ldr	r2, [sp, #16]
 800b8a8:	b9d8      	cbnz	r0, 800b8e2 <_svfiprintf_r+0xe6>
 800b8aa:	06d0      	lsls	r0, r2, #27
 800b8ac:	bf44      	itt	mi
 800b8ae:	2320      	movmi	r3, #32
 800b8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8b4:	0711      	lsls	r1, r2, #28
 800b8b6:	bf44      	itt	mi
 800b8b8:	232b      	movmi	r3, #43	; 0x2b
 800b8ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b8be:	f89a 3000 	ldrb.w	r3, [sl]
 800b8c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b8c4:	d015      	beq.n	800b8f2 <_svfiprintf_r+0xf6>
 800b8c6:	9a07      	ldr	r2, [sp, #28]
 800b8c8:	4654      	mov	r4, sl
 800b8ca:	2000      	movs	r0, #0
 800b8cc:	f04f 0c0a 	mov.w	ip, #10
 800b8d0:	4621      	mov	r1, r4
 800b8d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8d6:	3b30      	subs	r3, #48	; 0x30
 800b8d8:	2b09      	cmp	r3, #9
 800b8da:	d94e      	bls.n	800b97a <_svfiprintf_r+0x17e>
 800b8dc:	b1b0      	cbz	r0, 800b90c <_svfiprintf_r+0x110>
 800b8de:	9207      	str	r2, [sp, #28]
 800b8e0:	e014      	b.n	800b90c <_svfiprintf_r+0x110>
 800b8e2:	eba0 0308 	sub.w	r3, r0, r8
 800b8e6:	fa09 f303 	lsl.w	r3, r9, r3
 800b8ea:	4313      	orrs	r3, r2
 800b8ec:	9304      	str	r3, [sp, #16]
 800b8ee:	46a2      	mov	sl, r4
 800b8f0:	e7d2      	b.n	800b898 <_svfiprintf_r+0x9c>
 800b8f2:	9b03      	ldr	r3, [sp, #12]
 800b8f4:	1d19      	adds	r1, r3, #4
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	9103      	str	r1, [sp, #12]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	bfbb      	ittet	lt
 800b8fe:	425b      	neglt	r3, r3
 800b900:	f042 0202 	orrlt.w	r2, r2, #2
 800b904:	9307      	strge	r3, [sp, #28]
 800b906:	9307      	strlt	r3, [sp, #28]
 800b908:	bfb8      	it	lt
 800b90a:	9204      	strlt	r2, [sp, #16]
 800b90c:	7823      	ldrb	r3, [r4, #0]
 800b90e:	2b2e      	cmp	r3, #46	; 0x2e
 800b910:	d10c      	bne.n	800b92c <_svfiprintf_r+0x130>
 800b912:	7863      	ldrb	r3, [r4, #1]
 800b914:	2b2a      	cmp	r3, #42	; 0x2a
 800b916:	d135      	bne.n	800b984 <_svfiprintf_r+0x188>
 800b918:	9b03      	ldr	r3, [sp, #12]
 800b91a:	1d1a      	adds	r2, r3, #4
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	9203      	str	r2, [sp, #12]
 800b920:	2b00      	cmp	r3, #0
 800b922:	bfb8      	it	lt
 800b924:	f04f 33ff 	movlt.w	r3, #4294967295
 800b928:	3402      	adds	r4, #2
 800b92a:	9305      	str	r3, [sp, #20]
 800b92c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b9f8 <_svfiprintf_r+0x1fc>
 800b930:	7821      	ldrb	r1, [r4, #0]
 800b932:	2203      	movs	r2, #3
 800b934:	4650      	mov	r0, sl
 800b936:	f7f4 fcd3 	bl	80002e0 <memchr>
 800b93a:	b140      	cbz	r0, 800b94e <_svfiprintf_r+0x152>
 800b93c:	2340      	movs	r3, #64	; 0x40
 800b93e:	eba0 000a 	sub.w	r0, r0, sl
 800b942:	fa03 f000 	lsl.w	r0, r3, r0
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	4303      	orrs	r3, r0
 800b94a:	3401      	adds	r4, #1
 800b94c:	9304      	str	r3, [sp, #16]
 800b94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b952:	4826      	ldr	r0, [pc, #152]	; (800b9ec <_svfiprintf_r+0x1f0>)
 800b954:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b958:	2206      	movs	r2, #6
 800b95a:	f7f4 fcc1 	bl	80002e0 <memchr>
 800b95e:	2800      	cmp	r0, #0
 800b960:	d038      	beq.n	800b9d4 <_svfiprintf_r+0x1d8>
 800b962:	4b23      	ldr	r3, [pc, #140]	; (800b9f0 <_svfiprintf_r+0x1f4>)
 800b964:	bb1b      	cbnz	r3, 800b9ae <_svfiprintf_r+0x1b2>
 800b966:	9b03      	ldr	r3, [sp, #12]
 800b968:	3307      	adds	r3, #7
 800b96a:	f023 0307 	bic.w	r3, r3, #7
 800b96e:	3308      	adds	r3, #8
 800b970:	9303      	str	r3, [sp, #12]
 800b972:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b974:	4433      	add	r3, r6
 800b976:	9309      	str	r3, [sp, #36]	; 0x24
 800b978:	e767      	b.n	800b84a <_svfiprintf_r+0x4e>
 800b97a:	fb0c 3202 	mla	r2, ip, r2, r3
 800b97e:	460c      	mov	r4, r1
 800b980:	2001      	movs	r0, #1
 800b982:	e7a5      	b.n	800b8d0 <_svfiprintf_r+0xd4>
 800b984:	2300      	movs	r3, #0
 800b986:	3401      	adds	r4, #1
 800b988:	9305      	str	r3, [sp, #20]
 800b98a:	4619      	mov	r1, r3
 800b98c:	f04f 0c0a 	mov.w	ip, #10
 800b990:	4620      	mov	r0, r4
 800b992:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b996:	3a30      	subs	r2, #48	; 0x30
 800b998:	2a09      	cmp	r2, #9
 800b99a:	d903      	bls.n	800b9a4 <_svfiprintf_r+0x1a8>
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d0c5      	beq.n	800b92c <_svfiprintf_r+0x130>
 800b9a0:	9105      	str	r1, [sp, #20]
 800b9a2:	e7c3      	b.n	800b92c <_svfiprintf_r+0x130>
 800b9a4:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9a8:	4604      	mov	r4, r0
 800b9aa:	2301      	movs	r3, #1
 800b9ac:	e7f0      	b.n	800b990 <_svfiprintf_r+0x194>
 800b9ae:	ab03      	add	r3, sp, #12
 800b9b0:	9300      	str	r3, [sp, #0]
 800b9b2:	462a      	mov	r2, r5
 800b9b4:	4b0f      	ldr	r3, [pc, #60]	; (800b9f4 <_svfiprintf_r+0x1f8>)
 800b9b6:	a904      	add	r1, sp, #16
 800b9b8:	4638      	mov	r0, r7
 800b9ba:	f3af 8000 	nop.w
 800b9be:	1c42      	adds	r2, r0, #1
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	d1d6      	bne.n	800b972 <_svfiprintf_r+0x176>
 800b9c4:	89ab      	ldrh	r3, [r5, #12]
 800b9c6:	065b      	lsls	r3, r3, #25
 800b9c8:	f53f af2c 	bmi.w	800b824 <_svfiprintf_r+0x28>
 800b9cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b9ce:	b01d      	add	sp, #116	; 0x74
 800b9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b9d4:	ab03      	add	r3, sp, #12
 800b9d6:	9300      	str	r3, [sp, #0]
 800b9d8:	462a      	mov	r2, r5
 800b9da:	4b06      	ldr	r3, [pc, #24]	; (800b9f4 <_svfiprintf_r+0x1f8>)
 800b9dc:	a904      	add	r1, sp, #16
 800b9de:	4638      	mov	r0, r7
 800b9e0:	f000 f87a 	bl	800bad8 <_printf_i>
 800b9e4:	e7eb      	b.n	800b9be <_svfiprintf_r+0x1c2>
 800b9e6:	bf00      	nop
 800b9e8:	0800d468 	.word	0x0800d468
 800b9ec:	0800d472 	.word	0x0800d472
 800b9f0:	00000000 	.word	0x00000000
 800b9f4:	0800b745 	.word	0x0800b745
 800b9f8:	0800d46e 	.word	0x0800d46e

0800b9fc <_printf_common>:
 800b9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba00:	4616      	mov	r6, r2
 800ba02:	4699      	mov	r9, r3
 800ba04:	688a      	ldr	r2, [r1, #8]
 800ba06:	690b      	ldr	r3, [r1, #16]
 800ba08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ba0c:	4293      	cmp	r3, r2
 800ba0e:	bfb8      	it	lt
 800ba10:	4613      	movlt	r3, r2
 800ba12:	6033      	str	r3, [r6, #0]
 800ba14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ba18:	4607      	mov	r7, r0
 800ba1a:	460c      	mov	r4, r1
 800ba1c:	b10a      	cbz	r2, 800ba22 <_printf_common+0x26>
 800ba1e:	3301      	adds	r3, #1
 800ba20:	6033      	str	r3, [r6, #0]
 800ba22:	6823      	ldr	r3, [r4, #0]
 800ba24:	0699      	lsls	r1, r3, #26
 800ba26:	bf42      	ittt	mi
 800ba28:	6833      	ldrmi	r3, [r6, #0]
 800ba2a:	3302      	addmi	r3, #2
 800ba2c:	6033      	strmi	r3, [r6, #0]
 800ba2e:	6825      	ldr	r5, [r4, #0]
 800ba30:	f015 0506 	ands.w	r5, r5, #6
 800ba34:	d106      	bne.n	800ba44 <_printf_common+0x48>
 800ba36:	f104 0a19 	add.w	sl, r4, #25
 800ba3a:	68e3      	ldr	r3, [r4, #12]
 800ba3c:	6832      	ldr	r2, [r6, #0]
 800ba3e:	1a9b      	subs	r3, r3, r2
 800ba40:	42ab      	cmp	r3, r5
 800ba42:	dc26      	bgt.n	800ba92 <_printf_common+0x96>
 800ba44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ba48:	1e13      	subs	r3, r2, #0
 800ba4a:	6822      	ldr	r2, [r4, #0]
 800ba4c:	bf18      	it	ne
 800ba4e:	2301      	movne	r3, #1
 800ba50:	0692      	lsls	r2, r2, #26
 800ba52:	d42b      	bmi.n	800baac <_printf_common+0xb0>
 800ba54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ba58:	4649      	mov	r1, r9
 800ba5a:	4638      	mov	r0, r7
 800ba5c:	47c0      	blx	r8
 800ba5e:	3001      	adds	r0, #1
 800ba60:	d01e      	beq.n	800baa0 <_printf_common+0xa4>
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	68e5      	ldr	r5, [r4, #12]
 800ba66:	6832      	ldr	r2, [r6, #0]
 800ba68:	f003 0306 	and.w	r3, r3, #6
 800ba6c:	2b04      	cmp	r3, #4
 800ba6e:	bf08      	it	eq
 800ba70:	1aad      	subeq	r5, r5, r2
 800ba72:	68a3      	ldr	r3, [r4, #8]
 800ba74:	6922      	ldr	r2, [r4, #16]
 800ba76:	bf0c      	ite	eq
 800ba78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba7c:	2500      	movne	r5, #0
 800ba7e:	4293      	cmp	r3, r2
 800ba80:	bfc4      	itt	gt
 800ba82:	1a9b      	subgt	r3, r3, r2
 800ba84:	18ed      	addgt	r5, r5, r3
 800ba86:	2600      	movs	r6, #0
 800ba88:	341a      	adds	r4, #26
 800ba8a:	42b5      	cmp	r5, r6
 800ba8c:	d11a      	bne.n	800bac4 <_printf_common+0xc8>
 800ba8e:	2000      	movs	r0, #0
 800ba90:	e008      	b.n	800baa4 <_printf_common+0xa8>
 800ba92:	2301      	movs	r3, #1
 800ba94:	4652      	mov	r2, sl
 800ba96:	4649      	mov	r1, r9
 800ba98:	4638      	mov	r0, r7
 800ba9a:	47c0      	blx	r8
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	d103      	bne.n	800baa8 <_printf_common+0xac>
 800baa0:	f04f 30ff 	mov.w	r0, #4294967295
 800baa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800baa8:	3501      	adds	r5, #1
 800baaa:	e7c6      	b.n	800ba3a <_printf_common+0x3e>
 800baac:	18e1      	adds	r1, r4, r3
 800baae:	1c5a      	adds	r2, r3, #1
 800bab0:	2030      	movs	r0, #48	; 0x30
 800bab2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800bab6:	4422      	add	r2, r4
 800bab8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800babc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bac0:	3302      	adds	r3, #2
 800bac2:	e7c7      	b.n	800ba54 <_printf_common+0x58>
 800bac4:	2301      	movs	r3, #1
 800bac6:	4622      	mov	r2, r4
 800bac8:	4649      	mov	r1, r9
 800baca:	4638      	mov	r0, r7
 800bacc:	47c0      	blx	r8
 800bace:	3001      	adds	r0, #1
 800bad0:	d0e6      	beq.n	800baa0 <_printf_common+0xa4>
 800bad2:	3601      	adds	r6, #1
 800bad4:	e7d9      	b.n	800ba8a <_printf_common+0x8e>
	...

0800bad8 <_printf_i>:
 800bad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800badc:	7e0f      	ldrb	r7, [r1, #24]
 800bade:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800bae0:	2f78      	cmp	r7, #120	; 0x78
 800bae2:	4691      	mov	r9, r2
 800bae4:	4680      	mov	r8, r0
 800bae6:	460c      	mov	r4, r1
 800bae8:	469a      	mov	sl, r3
 800baea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800baee:	d807      	bhi.n	800bb00 <_printf_i+0x28>
 800baf0:	2f62      	cmp	r7, #98	; 0x62
 800baf2:	d80a      	bhi.n	800bb0a <_printf_i+0x32>
 800baf4:	2f00      	cmp	r7, #0
 800baf6:	f000 80d8 	beq.w	800bcaa <_printf_i+0x1d2>
 800bafa:	2f58      	cmp	r7, #88	; 0x58
 800bafc:	f000 80a3 	beq.w	800bc46 <_printf_i+0x16e>
 800bb00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bb08:	e03a      	b.n	800bb80 <_printf_i+0xa8>
 800bb0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bb0e:	2b15      	cmp	r3, #21
 800bb10:	d8f6      	bhi.n	800bb00 <_printf_i+0x28>
 800bb12:	a101      	add	r1, pc, #4	; (adr r1, 800bb18 <_printf_i+0x40>)
 800bb14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb18:	0800bb71 	.word	0x0800bb71
 800bb1c:	0800bb85 	.word	0x0800bb85
 800bb20:	0800bb01 	.word	0x0800bb01
 800bb24:	0800bb01 	.word	0x0800bb01
 800bb28:	0800bb01 	.word	0x0800bb01
 800bb2c:	0800bb01 	.word	0x0800bb01
 800bb30:	0800bb85 	.word	0x0800bb85
 800bb34:	0800bb01 	.word	0x0800bb01
 800bb38:	0800bb01 	.word	0x0800bb01
 800bb3c:	0800bb01 	.word	0x0800bb01
 800bb40:	0800bb01 	.word	0x0800bb01
 800bb44:	0800bc91 	.word	0x0800bc91
 800bb48:	0800bbb5 	.word	0x0800bbb5
 800bb4c:	0800bc73 	.word	0x0800bc73
 800bb50:	0800bb01 	.word	0x0800bb01
 800bb54:	0800bb01 	.word	0x0800bb01
 800bb58:	0800bcb3 	.word	0x0800bcb3
 800bb5c:	0800bb01 	.word	0x0800bb01
 800bb60:	0800bbb5 	.word	0x0800bbb5
 800bb64:	0800bb01 	.word	0x0800bb01
 800bb68:	0800bb01 	.word	0x0800bb01
 800bb6c:	0800bc7b 	.word	0x0800bc7b
 800bb70:	682b      	ldr	r3, [r5, #0]
 800bb72:	1d1a      	adds	r2, r3, #4
 800bb74:	681b      	ldr	r3, [r3, #0]
 800bb76:	602a      	str	r2, [r5, #0]
 800bb78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bb7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bb80:	2301      	movs	r3, #1
 800bb82:	e0a3      	b.n	800bccc <_printf_i+0x1f4>
 800bb84:	6820      	ldr	r0, [r4, #0]
 800bb86:	6829      	ldr	r1, [r5, #0]
 800bb88:	0606      	lsls	r6, r0, #24
 800bb8a:	f101 0304 	add.w	r3, r1, #4
 800bb8e:	d50a      	bpl.n	800bba6 <_printf_i+0xce>
 800bb90:	680e      	ldr	r6, [r1, #0]
 800bb92:	602b      	str	r3, [r5, #0]
 800bb94:	2e00      	cmp	r6, #0
 800bb96:	da03      	bge.n	800bba0 <_printf_i+0xc8>
 800bb98:	232d      	movs	r3, #45	; 0x2d
 800bb9a:	4276      	negs	r6, r6
 800bb9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bba0:	485e      	ldr	r0, [pc, #376]	; (800bd1c <_printf_i+0x244>)
 800bba2:	230a      	movs	r3, #10
 800bba4:	e019      	b.n	800bbda <_printf_i+0x102>
 800bba6:	680e      	ldr	r6, [r1, #0]
 800bba8:	602b      	str	r3, [r5, #0]
 800bbaa:	f010 0f40 	tst.w	r0, #64	; 0x40
 800bbae:	bf18      	it	ne
 800bbb0:	b236      	sxthne	r6, r6
 800bbb2:	e7ef      	b.n	800bb94 <_printf_i+0xbc>
 800bbb4:	682b      	ldr	r3, [r5, #0]
 800bbb6:	6820      	ldr	r0, [r4, #0]
 800bbb8:	1d19      	adds	r1, r3, #4
 800bbba:	6029      	str	r1, [r5, #0]
 800bbbc:	0601      	lsls	r1, r0, #24
 800bbbe:	d501      	bpl.n	800bbc4 <_printf_i+0xec>
 800bbc0:	681e      	ldr	r6, [r3, #0]
 800bbc2:	e002      	b.n	800bbca <_printf_i+0xf2>
 800bbc4:	0646      	lsls	r6, r0, #25
 800bbc6:	d5fb      	bpl.n	800bbc0 <_printf_i+0xe8>
 800bbc8:	881e      	ldrh	r6, [r3, #0]
 800bbca:	4854      	ldr	r0, [pc, #336]	; (800bd1c <_printf_i+0x244>)
 800bbcc:	2f6f      	cmp	r7, #111	; 0x6f
 800bbce:	bf0c      	ite	eq
 800bbd0:	2308      	moveq	r3, #8
 800bbd2:	230a      	movne	r3, #10
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bbda:	6865      	ldr	r5, [r4, #4]
 800bbdc:	60a5      	str	r5, [r4, #8]
 800bbde:	2d00      	cmp	r5, #0
 800bbe0:	bfa2      	ittt	ge
 800bbe2:	6821      	ldrge	r1, [r4, #0]
 800bbe4:	f021 0104 	bicge.w	r1, r1, #4
 800bbe8:	6021      	strge	r1, [r4, #0]
 800bbea:	b90e      	cbnz	r6, 800bbf0 <_printf_i+0x118>
 800bbec:	2d00      	cmp	r5, #0
 800bbee:	d04d      	beq.n	800bc8c <_printf_i+0x1b4>
 800bbf0:	4615      	mov	r5, r2
 800bbf2:	fbb6 f1f3 	udiv	r1, r6, r3
 800bbf6:	fb03 6711 	mls	r7, r3, r1, r6
 800bbfa:	5dc7      	ldrb	r7, [r0, r7]
 800bbfc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800bc00:	4637      	mov	r7, r6
 800bc02:	42bb      	cmp	r3, r7
 800bc04:	460e      	mov	r6, r1
 800bc06:	d9f4      	bls.n	800bbf2 <_printf_i+0x11a>
 800bc08:	2b08      	cmp	r3, #8
 800bc0a:	d10b      	bne.n	800bc24 <_printf_i+0x14c>
 800bc0c:	6823      	ldr	r3, [r4, #0]
 800bc0e:	07de      	lsls	r6, r3, #31
 800bc10:	d508      	bpl.n	800bc24 <_printf_i+0x14c>
 800bc12:	6923      	ldr	r3, [r4, #16]
 800bc14:	6861      	ldr	r1, [r4, #4]
 800bc16:	4299      	cmp	r1, r3
 800bc18:	bfde      	ittt	le
 800bc1a:	2330      	movle	r3, #48	; 0x30
 800bc1c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bc20:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bc24:	1b52      	subs	r2, r2, r5
 800bc26:	6122      	str	r2, [r4, #16]
 800bc28:	f8cd a000 	str.w	sl, [sp]
 800bc2c:	464b      	mov	r3, r9
 800bc2e:	aa03      	add	r2, sp, #12
 800bc30:	4621      	mov	r1, r4
 800bc32:	4640      	mov	r0, r8
 800bc34:	f7ff fee2 	bl	800b9fc <_printf_common>
 800bc38:	3001      	adds	r0, #1
 800bc3a:	d14c      	bne.n	800bcd6 <_printf_i+0x1fe>
 800bc3c:	f04f 30ff 	mov.w	r0, #4294967295
 800bc40:	b004      	add	sp, #16
 800bc42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc46:	4835      	ldr	r0, [pc, #212]	; (800bd1c <_printf_i+0x244>)
 800bc48:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800bc4c:	6829      	ldr	r1, [r5, #0]
 800bc4e:	6823      	ldr	r3, [r4, #0]
 800bc50:	f851 6b04 	ldr.w	r6, [r1], #4
 800bc54:	6029      	str	r1, [r5, #0]
 800bc56:	061d      	lsls	r5, r3, #24
 800bc58:	d514      	bpl.n	800bc84 <_printf_i+0x1ac>
 800bc5a:	07df      	lsls	r7, r3, #31
 800bc5c:	bf44      	itt	mi
 800bc5e:	f043 0320 	orrmi.w	r3, r3, #32
 800bc62:	6023      	strmi	r3, [r4, #0]
 800bc64:	b91e      	cbnz	r6, 800bc6e <_printf_i+0x196>
 800bc66:	6823      	ldr	r3, [r4, #0]
 800bc68:	f023 0320 	bic.w	r3, r3, #32
 800bc6c:	6023      	str	r3, [r4, #0]
 800bc6e:	2310      	movs	r3, #16
 800bc70:	e7b0      	b.n	800bbd4 <_printf_i+0xfc>
 800bc72:	6823      	ldr	r3, [r4, #0]
 800bc74:	f043 0320 	orr.w	r3, r3, #32
 800bc78:	6023      	str	r3, [r4, #0]
 800bc7a:	2378      	movs	r3, #120	; 0x78
 800bc7c:	4828      	ldr	r0, [pc, #160]	; (800bd20 <_printf_i+0x248>)
 800bc7e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800bc82:	e7e3      	b.n	800bc4c <_printf_i+0x174>
 800bc84:	0659      	lsls	r1, r3, #25
 800bc86:	bf48      	it	mi
 800bc88:	b2b6      	uxthmi	r6, r6
 800bc8a:	e7e6      	b.n	800bc5a <_printf_i+0x182>
 800bc8c:	4615      	mov	r5, r2
 800bc8e:	e7bb      	b.n	800bc08 <_printf_i+0x130>
 800bc90:	682b      	ldr	r3, [r5, #0]
 800bc92:	6826      	ldr	r6, [r4, #0]
 800bc94:	6961      	ldr	r1, [r4, #20]
 800bc96:	1d18      	adds	r0, r3, #4
 800bc98:	6028      	str	r0, [r5, #0]
 800bc9a:	0635      	lsls	r5, r6, #24
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	d501      	bpl.n	800bca4 <_printf_i+0x1cc>
 800bca0:	6019      	str	r1, [r3, #0]
 800bca2:	e002      	b.n	800bcaa <_printf_i+0x1d2>
 800bca4:	0670      	lsls	r0, r6, #25
 800bca6:	d5fb      	bpl.n	800bca0 <_printf_i+0x1c8>
 800bca8:	8019      	strh	r1, [r3, #0]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	6123      	str	r3, [r4, #16]
 800bcae:	4615      	mov	r5, r2
 800bcb0:	e7ba      	b.n	800bc28 <_printf_i+0x150>
 800bcb2:	682b      	ldr	r3, [r5, #0]
 800bcb4:	1d1a      	adds	r2, r3, #4
 800bcb6:	602a      	str	r2, [r5, #0]
 800bcb8:	681d      	ldr	r5, [r3, #0]
 800bcba:	6862      	ldr	r2, [r4, #4]
 800bcbc:	2100      	movs	r1, #0
 800bcbe:	4628      	mov	r0, r5
 800bcc0:	f7f4 fb0e 	bl	80002e0 <memchr>
 800bcc4:	b108      	cbz	r0, 800bcca <_printf_i+0x1f2>
 800bcc6:	1b40      	subs	r0, r0, r5
 800bcc8:	6060      	str	r0, [r4, #4]
 800bcca:	6863      	ldr	r3, [r4, #4]
 800bccc:	6123      	str	r3, [r4, #16]
 800bcce:	2300      	movs	r3, #0
 800bcd0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bcd4:	e7a8      	b.n	800bc28 <_printf_i+0x150>
 800bcd6:	6923      	ldr	r3, [r4, #16]
 800bcd8:	462a      	mov	r2, r5
 800bcda:	4649      	mov	r1, r9
 800bcdc:	4640      	mov	r0, r8
 800bcde:	47d0      	blx	sl
 800bce0:	3001      	adds	r0, #1
 800bce2:	d0ab      	beq.n	800bc3c <_printf_i+0x164>
 800bce4:	6823      	ldr	r3, [r4, #0]
 800bce6:	079b      	lsls	r3, r3, #30
 800bce8:	d413      	bmi.n	800bd12 <_printf_i+0x23a>
 800bcea:	68e0      	ldr	r0, [r4, #12]
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	4298      	cmp	r0, r3
 800bcf0:	bfb8      	it	lt
 800bcf2:	4618      	movlt	r0, r3
 800bcf4:	e7a4      	b.n	800bc40 <_printf_i+0x168>
 800bcf6:	2301      	movs	r3, #1
 800bcf8:	4632      	mov	r2, r6
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	4640      	mov	r0, r8
 800bcfe:	47d0      	blx	sl
 800bd00:	3001      	adds	r0, #1
 800bd02:	d09b      	beq.n	800bc3c <_printf_i+0x164>
 800bd04:	3501      	adds	r5, #1
 800bd06:	68e3      	ldr	r3, [r4, #12]
 800bd08:	9903      	ldr	r1, [sp, #12]
 800bd0a:	1a5b      	subs	r3, r3, r1
 800bd0c:	42ab      	cmp	r3, r5
 800bd0e:	dcf2      	bgt.n	800bcf6 <_printf_i+0x21e>
 800bd10:	e7eb      	b.n	800bcea <_printf_i+0x212>
 800bd12:	2500      	movs	r5, #0
 800bd14:	f104 0619 	add.w	r6, r4, #25
 800bd18:	e7f5      	b.n	800bd06 <_printf_i+0x22e>
 800bd1a:	bf00      	nop
 800bd1c:	0800d479 	.word	0x0800d479
 800bd20:	0800d48a 	.word	0x0800d48a

0800bd24 <__retarget_lock_acquire_recursive>:
 800bd24:	4770      	bx	lr

0800bd26 <__retarget_lock_release_recursive>:
 800bd26:	4770      	bx	lr

0800bd28 <memcpy>:
 800bd28:	440a      	add	r2, r1
 800bd2a:	4291      	cmp	r1, r2
 800bd2c:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd30:	d100      	bne.n	800bd34 <memcpy+0xc>
 800bd32:	4770      	bx	lr
 800bd34:	b510      	push	{r4, lr}
 800bd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd3a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd3e:	4291      	cmp	r1, r2
 800bd40:	d1f9      	bne.n	800bd36 <memcpy+0xe>
 800bd42:	bd10      	pop	{r4, pc}

0800bd44 <memmove>:
 800bd44:	4288      	cmp	r0, r1
 800bd46:	b510      	push	{r4, lr}
 800bd48:	eb01 0402 	add.w	r4, r1, r2
 800bd4c:	d902      	bls.n	800bd54 <memmove+0x10>
 800bd4e:	4284      	cmp	r4, r0
 800bd50:	4623      	mov	r3, r4
 800bd52:	d807      	bhi.n	800bd64 <memmove+0x20>
 800bd54:	1e43      	subs	r3, r0, #1
 800bd56:	42a1      	cmp	r1, r4
 800bd58:	d008      	beq.n	800bd6c <memmove+0x28>
 800bd5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd62:	e7f8      	b.n	800bd56 <memmove+0x12>
 800bd64:	4402      	add	r2, r0
 800bd66:	4601      	mov	r1, r0
 800bd68:	428a      	cmp	r2, r1
 800bd6a:	d100      	bne.n	800bd6e <memmove+0x2a>
 800bd6c:	bd10      	pop	{r4, pc}
 800bd6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd76:	e7f7      	b.n	800bd68 <memmove+0x24>

0800bd78 <_realloc_r>:
 800bd78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7c:	4680      	mov	r8, r0
 800bd7e:	4614      	mov	r4, r2
 800bd80:	460e      	mov	r6, r1
 800bd82:	b921      	cbnz	r1, 800bd8e <_realloc_r+0x16>
 800bd84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd88:	4611      	mov	r1, r2
 800bd8a:	f7ff bc2b 	b.w	800b5e4 <_malloc_r>
 800bd8e:	b92a      	cbnz	r2, 800bd9c <_realloc_r+0x24>
 800bd90:	f7ff fbbc 	bl	800b50c <_free_r>
 800bd94:	4625      	mov	r5, r4
 800bd96:	4628      	mov	r0, r5
 800bd98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd9c:	f000 f81b 	bl	800bdd6 <_malloc_usable_size_r>
 800bda0:	4284      	cmp	r4, r0
 800bda2:	4607      	mov	r7, r0
 800bda4:	d802      	bhi.n	800bdac <_realloc_r+0x34>
 800bda6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdaa:	d812      	bhi.n	800bdd2 <_realloc_r+0x5a>
 800bdac:	4621      	mov	r1, r4
 800bdae:	4640      	mov	r0, r8
 800bdb0:	f7ff fc18 	bl	800b5e4 <_malloc_r>
 800bdb4:	4605      	mov	r5, r0
 800bdb6:	2800      	cmp	r0, #0
 800bdb8:	d0ed      	beq.n	800bd96 <_realloc_r+0x1e>
 800bdba:	42bc      	cmp	r4, r7
 800bdbc:	4622      	mov	r2, r4
 800bdbe:	4631      	mov	r1, r6
 800bdc0:	bf28      	it	cs
 800bdc2:	463a      	movcs	r2, r7
 800bdc4:	f7ff ffb0 	bl	800bd28 <memcpy>
 800bdc8:	4631      	mov	r1, r6
 800bdca:	4640      	mov	r0, r8
 800bdcc:	f7ff fb9e 	bl	800b50c <_free_r>
 800bdd0:	e7e1      	b.n	800bd96 <_realloc_r+0x1e>
 800bdd2:	4635      	mov	r5, r6
 800bdd4:	e7df      	b.n	800bd96 <_realloc_r+0x1e>

0800bdd6 <_malloc_usable_size_r>:
 800bdd6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdda:	1f18      	subs	r0, r3, #4
 800bddc:	2b00      	cmp	r3, #0
 800bdde:	bfbc      	itt	lt
 800bde0:	580b      	ldrlt	r3, [r1, r0]
 800bde2:	18c0      	addlt	r0, r0, r3
 800bde4:	4770      	bx	lr
	...

0800bde8 <_init>:
 800bde8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdea:	bf00      	nop
 800bdec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdee:	bc08      	pop	{r3}
 800bdf0:	469e      	mov	lr, r3
 800bdf2:	4770      	bx	lr

0800bdf4 <_fini>:
 800bdf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdf6:	bf00      	nop
 800bdf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdfa:	bc08      	pop	{r3}
 800bdfc:	469e      	mov	lr, r3
 800bdfe:	4770      	bx	lr
