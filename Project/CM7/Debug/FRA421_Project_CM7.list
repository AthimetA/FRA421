
FRA421_Project_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800947c  0800947c  0001947c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094bc  080094bc  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080094bc  080094bc  000194bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094c4  080094c4  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094c4  080094c4  000194c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094c8  080094c8  000194c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080094cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080094dc  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  0800953c  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000828  240000d0  0800959c  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008f8  0800959c  000208f8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001d11e  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002ec8  00000000  00000000  0003d21c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012b0  00000000  00000000  000400e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000011a8  00000000  00000000  00041398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003b198  00000000  00000000  00042540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000196fa  00000000  00000000  0007d6d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00184ab3  00000000  00000000  00096dd2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0021b885  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004fc4  00000000  00000000  0021b8d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08009464 	.word	0x08009464

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08009464 	.word	0x08009464

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b974 	b.w	80005d8 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	4604      	mov	r4, r0
 8000310:	468e      	mov	lr, r1
 8000312:	2b00      	cmp	r3, #0
 8000314:	d14d      	bne.n	80003b2 <__udivmoddi4+0xaa>
 8000316:	428a      	cmp	r2, r1
 8000318:	4694      	mov	ip, r2
 800031a:	d969      	bls.n	80003f0 <__udivmoddi4+0xe8>
 800031c:	fab2 f282 	clz	r2, r2
 8000320:	b152      	cbz	r2, 8000338 <__udivmoddi4+0x30>
 8000322:	fa01 f302 	lsl.w	r3, r1, r2
 8000326:	f1c2 0120 	rsb	r1, r2, #32
 800032a:	fa20 f101 	lsr.w	r1, r0, r1
 800032e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000332:	ea41 0e03 	orr.w	lr, r1, r3
 8000336:	4094      	lsls	r4, r2
 8000338:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800033c:	0c21      	lsrs	r1, r4, #16
 800033e:	fbbe f6f8 	udiv	r6, lr, r8
 8000342:	fa1f f78c 	uxth.w	r7, ip
 8000346:	fb08 e316 	mls	r3, r8, r6, lr
 800034a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800034e:	fb06 f107 	mul.w	r1, r6, r7
 8000352:	4299      	cmp	r1, r3
 8000354:	d90a      	bls.n	800036c <__udivmoddi4+0x64>
 8000356:	eb1c 0303 	adds.w	r3, ip, r3
 800035a:	f106 30ff 	add.w	r0, r6, #4294967295
 800035e:	f080 811f 	bcs.w	80005a0 <__udivmoddi4+0x298>
 8000362:	4299      	cmp	r1, r3
 8000364:	f240 811c 	bls.w	80005a0 <__udivmoddi4+0x298>
 8000368:	3e02      	subs	r6, #2
 800036a:	4463      	add	r3, ip
 800036c:	1a5b      	subs	r3, r3, r1
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb3 f0f8 	udiv	r0, r3, r8
 8000374:	fb08 3310 	mls	r3, r8, r0, r3
 8000378:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800037c:	fb00 f707 	mul.w	r7, r0, r7
 8000380:	42a7      	cmp	r7, r4
 8000382:	d90a      	bls.n	800039a <__udivmoddi4+0x92>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 33ff 	add.w	r3, r0, #4294967295
 800038c:	f080 810a 	bcs.w	80005a4 <__udivmoddi4+0x29c>
 8000390:	42a7      	cmp	r7, r4
 8000392:	f240 8107 	bls.w	80005a4 <__udivmoddi4+0x29c>
 8000396:	4464      	add	r4, ip
 8000398:	3802      	subs	r0, #2
 800039a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800039e:	1be4      	subs	r4, r4, r7
 80003a0:	2600      	movs	r6, #0
 80003a2:	b11d      	cbz	r5, 80003ac <__udivmoddi4+0xa4>
 80003a4:	40d4      	lsrs	r4, r2
 80003a6:	2300      	movs	r3, #0
 80003a8:	e9c5 4300 	strd	r4, r3, [r5]
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d909      	bls.n	80003ca <__udivmoddi4+0xc2>
 80003b6:	2d00      	cmp	r5, #0
 80003b8:	f000 80ef 	beq.w	800059a <__udivmoddi4+0x292>
 80003bc:	2600      	movs	r6, #0
 80003be:	e9c5 0100 	strd	r0, r1, [r5]
 80003c2:	4630      	mov	r0, r6
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	fab3 f683 	clz	r6, r3
 80003ce:	2e00      	cmp	r6, #0
 80003d0:	d14a      	bne.n	8000468 <__udivmoddi4+0x160>
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d302      	bcc.n	80003dc <__udivmoddi4+0xd4>
 80003d6:	4282      	cmp	r2, r0
 80003d8:	f200 80f9 	bhi.w	80005ce <__udivmoddi4+0x2c6>
 80003dc:	1a84      	subs	r4, r0, r2
 80003de:	eb61 0303 	sbc.w	r3, r1, r3
 80003e2:	2001      	movs	r0, #1
 80003e4:	469e      	mov	lr, r3
 80003e6:	2d00      	cmp	r5, #0
 80003e8:	d0e0      	beq.n	80003ac <__udivmoddi4+0xa4>
 80003ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80003ee:	e7dd      	b.n	80003ac <__udivmoddi4+0xa4>
 80003f0:	b902      	cbnz	r2, 80003f4 <__udivmoddi4+0xec>
 80003f2:	deff      	udf	#255	; 0xff
 80003f4:	fab2 f282 	clz	r2, r2
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	f040 8092 	bne.w	8000522 <__udivmoddi4+0x21a>
 80003fe:	eba1 010c 	sub.w	r1, r1, ip
 8000402:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000406:	fa1f fe8c 	uxth.w	lr, ip
 800040a:	2601      	movs	r6, #1
 800040c:	0c20      	lsrs	r0, r4, #16
 800040e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000412:	fb07 1113 	mls	r1, r7, r3, r1
 8000416:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800041a:	fb0e f003 	mul.w	r0, lr, r3
 800041e:	4288      	cmp	r0, r1
 8000420:	d908      	bls.n	8000434 <__udivmoddi4+0x12c>
 8000422:	eb1c 0101 	adds.w	r1, ip, r1
 8000426:	f103 38ff 	add.w	r8, r3, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x12a>
 800042c:	4288      	cmp	r0, r1
 800042e:	f200 80cb 	bhi.w	80005c8 <__udivmoddi4+0x2c0>
 8000432:	4643      	mov	r3, r8
 8000434:	1a09      	subs	r1, r1, r0
 8000436:	b2a4      	uxth	r4, r4
 8000438:	fbb1 f0f7 	udiv	r0, r1, r7
 800043c:	fb07 1110 	mls	r1, r7, r0, r1
 8000440:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000444:	fb0e fe00 	mul.w	lr, lr, r0
 8000448:	45a6      	cmp	lr, r4
 800044a:	d908      	bls.n	800045e <__udivmoddi4+0x156>
 800044c:	eb1c 0404 	adds.w	r4, ip, r4
 8000450:	f100 31ff 	add.w	r1, r0, #4294967295
 8000454:	d202      	bcs.n	800045c <__udivmoddi4+0x154>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f200 80bb 	bhi.w	80005d2 <__udivmoddi4+0x2ca>
 800045c:	4608      	mov	r0, r1
 800045e:	eba4 040e 	sub.w	r4, r4, lr
 8000462:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000466:	e79c      	b.n	80003a2 <__udivmoddi4+0x9a>
 8000468:	f1c6 0720 	rsb	r7, r6, #32
 800046c:	40b3      	lsls	r3, r6
 800046e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000472:	ea4c 0c03 	orr.w	ip, ip, r3
 8000476:	fa20 f407 	lsr.w	r4, r0, r7
 800047a:	fa01 f306 	lsl.w	r3, r1, r6
 800047e:	431c      	orrs	r4, r3
 8000480:	40f9      	lsrs	r1, r7
 8000482:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000486:	fa00 f306 	lsl.w	r3, r0, r6
 800048a:	fbb1 f8f9 	udiv	r8, r1, r9
 800048e:	0c20      	lsrs	r0, r4, #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fb09 1118 	mls	r1, r9, r8, r1
 8000498:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800049c:	fb08 f00e 	mul.w	r0, r8, lr
 80004a0:	4288      	cmp	r0, r1
 80004a2:	fa02 f206 	lsl.w	r2, r2, r6
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b8>
 80004a8:	eb1c 0101 	adds.w	r1, ip, r1
 80004ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b0:	f080 8088 	bcs.w	80005c4 <__udivmoddi4+0x2bc>
 80004b4:	4288      	cmp	r0, r1
 80004b6:	f240 8085 	bls.w	80005c4 <__udivmoddi4+0x2bc>
 80004ba:	f1a8 0802 	sub.w	r8, r8, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1a09      	subs	r1, r1, r0
 80004c2:	b2a4      	uxth	r4, r4
 80004c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80004c8:	fb09 1110 	mls	r1, r9, r0, r1
 80004cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80004d4:	458e      	cmp	lr, r1
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1e2>
 80004d8:	eb1c 0101 	adds.w	r1, ip, r1
 80004dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e0:	d26c      	bcs.n	80005bc <__udivmoddi4+0x2b4>
 80004e2:	458e      	cmp	lr, r1
 80004e4:	d96a      	bls.n	80005bc <__udivmoddi4+0x2b4>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4461      	add	r1, ip
 80004ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004ee:	fba0 9402 	umull	r9, r4, r0, r2
 80004f2:	eba1 010e 	sub.w	r1, r1, lr
 80004f6:	42a1      	cmp	r1, r4
 80004f8:	46c8      	mov	r8, r9
 80004fa:	46a6      	mov	lr, r4
 80004fc:	d356      	bcc.n	80005ac <__udivmoddi4+0x2a4>
 80004fe:	d053      	beq.n	80005a8 <__udivmoddi4+0x2a0>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x212>
 8000502:	ebb3 0208 	subs.w	r2, r3, r8
 8000506:	eb61 010e 	sbc.w	r1, r1, lr
 800050a:	fa01 f707 	lsl.w	r7, r1, r7
 800050e:	fa22 f306 	lsr.w	r3, r2, r6
 8000512:	40f1      	lsrs	r1, r6
 8000514:	431f      	orrs	r7, r3
 8000516:	e9c5 7100 	strd	r7, r1, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	40d8      	lsrs	r0, r3
 8000528:	fa0c fc02 	lsl.w	ip, ip, r2
 800052c:	fa21 f303 	lsr.w	r3, r1, r3
 8000530:	4091      	lsls	r1, r2
 8000532:	4301      	orrs	r1, r0
 8000534:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000538:	fa1f fe8c 	uxth.w	lr, ip
 800053c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000540:	fb07 3610 	mls	r6, r7, r0, r3
 8000544:	0c0b      	lsrs	r3, r1, #16
 8000546:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800054a:	fb00 f60e 	mul.w	r6, r0, lr
 800054e:	429e      	cmp	r6, r3
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d908      	bls.n	8000568 <__udivmoddi4+0x260>
 8000556:	eb1c 0303 	adds.w	r3, ip, r3
 800055a:	f100 38ff 	add.w	r8, r0, #4294967295
 800055e:	d22f      	bcs.n	80005c0 <__udivmoddi4+0x2b8>
 8000560:	429e      	cmp	r6, r3
 8000562:	d92d      	bls.n	80005c0 <__udivmoddi4+0x2b8>
 8000564:	3802      	subs	r0, #2
 8000566:	4463      	add	r3, ip
 8000568:	1b9b      	subs	r3, r3, r6
 800056a:	b289      	uxth	r1, r1
 800056c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000570:	fb07 3316 	mls	r3, r7, r6, r3
 8000574:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000578:	fb06 f30e 	mul.w	r3, r6, lr
 800057c:	428b      	cmp	r3, r1
 800057e:	d908      	bls.n	8000592 <__udivmoddi4+0x28a>
 8000580:	eb1c 0101 	adds.w	r1, ip, r1
 8000584:	f106 38ff 	add.w	r8, r6, #4294967295
 8000588:	d216      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 800058a:	428b      	cmp	r3, r1
 800058c:	d914      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800058e:	3e02      	subs	r6, #2
 8000590:	4461      	add	r1, ip
 8000592:	1ac9      	subs	r1, r1, r3
 8000594:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000598:	e738      	b.n	800040c <__udivmoddi4+0x104>
 800059a:	462e      	mov	r6, r5
 800059c:	4628      	mov	r0, r5
 800059e:	e705      	b.n	80003ac <__udivmoddi4+0xa4>
 80005a0:	4606      	mov	r6, r0
 80005a2:	e6e3      	b.n	800036c <__udivmoddi4+0x64>
 80005a4:	4618      	mov	r0, r3
 80005a6:	e6f8      	b.n	800039a <__udivmoddi4+0x92>
 80005a8:	454b      	cmp	r3, r9
 80005aa:	d2a9      	bcs.n	8000500 <__udivmoddi4+0x1f8>
 80005ac:	ebb9 0802 	subs.w	r8, r9, r2
 80005b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005b4:	3801      	subs	r0, #1
 80005b6:	e7a3      	b.n	8000500 <__udivmoddi4+0x1f8>
 80005b8:	4646      	mov	r6, r8
 80005ba:	e7ea      	b.n	8000592 <__udivmoddi4+0x28a>
 80005bc:	4620      	mov	r0, r4
 80005be:	e794      	b.n	80004ea <__udivmoddi4+0x1e2>
 80005c0:	4640      	mov	r0, r8
 80005c2:	e7d1      	b.n	8000568 <__udivmoddi4+0x260>
 80005c4:	46d0      	mov	r8, sl
 80005c6:	e77b      	b.n	80004c0 <__udivmoddi4+0x1b8>
 80005c8:	3b02      	subs	r3, #2
 80005ca:	4461      	add	r1, ip
 80005cc:	e732      	b.n	8000434 <__udivmoddi4+0x12c>
 80005ce:	4630      	mov	r0, r6
 80005d0:	e709      	b.n	80003e6 <__udivmoddi4+0xde>
 80005d2:	4464      	add	r4, ip
 80005d4:	3802      	subs	r0, #2
 80005d6:	e742      	b.n	800045e <__udivmoddi4+0x156>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005e0:	4b3d      	ldr	r3, [pc, #244]	; (80006d8 <SystemInit+0xfc>)
 80005e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005e6:	4a3c      	ldr	r2, [pc, #240]	; (80006d8 <SystemInit+0xfc>)
 80005e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005f0:	4b39      	ldr	r3, [pc, #228]	; (80006d8 <SystemInit+0xfc>)
 80005f2:	691b      	ldr	r3, [r3, #16]
 80005f4:	4a38      	ldr	r2, [pc, #224]	; (80006d8 <SystemInit+0xfc>)
 80005f6:	f043 0310 	orr.w	r3, r3, #16
 80005fa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005fc:	4b37      	ldr	r3, [pc, #220]	; (80006dc <SystemInit+0x100>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 030f 	and.w	r3, r3, #15
 8000604:	2b06      	cmp	r3, #6
 8000606:	d807      	bhi.n	8000618 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <SystemInit+0x100>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	f023 030f 	bic.w	r3, r3, #15
 8000610:	4a32      	ldr	r2, [pc, #200]	; (80006dc <SystemInit+0x100>)
 8000612:	f043 0307 	orr.w	r3, r3, #7
 8000616:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000618:	4b31      	ldr	r3, [pc, #196]	; (80006e0 <SystemInit+0x104>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a30      	ldr	r2, [pc, #192]	; (80006e0 <SystemInit+0x104>)
 800061e:	f043 0301 	orr.w	r3, r3, #1
 8000622:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000624:	4b2e      	ldr	r3, [pc, #184]	; (80006e0 <SystemInit+0x104>)
 8000626:	2200      	movs	r2, #0
 8000628:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <SystemInit+0x104>)
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	492c      	ldr	r1, [pc, #176]	; (80006e0 <SystemInit+0x104>)
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <SystemInit+0x108>)
 8000632:	4013      	ands	r3, r2
 8000634:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000636:	4b29      	ldr	r3, [pc, #164]	; (80006dc <SystemInit+0x100>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	f003 0308 	and.w	r3, r3, #8
 800063e:	2b00      	cmp	r3, #0
 8000640:	d007      	beq.n	8000652 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000642:	4b26      	ldr	r3, [pc, #152]	; (80006dc <SystemInit+0x100>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	4a24      	ldr	r2, [pc, #144]	; (80006dc <SystemInit+0x100>)
 800064c:	f043 0307 	orr.w	r3, r3, #7
 8000650:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000652:	4b23      	ldr	r3, [pc, #140]	; (80006e0 <SystemInit+0x104>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000658:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <SystemInit+0x104>)
 800065a:	2200      	movs	r2, #0
 800065c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800065e:	4b20      	ldr	r3, [pc, #128]	; (80006e0 <SystemInit+0x104>)
 8000660:	2200      	movs	r2, #0
 8000662:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000664:	4b1e      	ldr	r3, [pc, #120]	; (80006e0 <SystemInit+0x104>)
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <SystemInit+0x10c>)
 8000668:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <SystemInit+0x104>)
 800066c:	4a1f      	ldr	r2, [pc, #124]	; (80006ec <SystemInit+0x110>)
 800066e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000670:	4b1b      	ldr	r3, [pc, #108]	; (80006e0 <SystemInit+0x104>)
 8000672:	4a1f      	ldr	r2, [pc, #124]	; (80006f0 <SystemInit+0x114>)
 8000674:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <SystemInit+0x104>)
 8000678:	2200      	movs	r2, #0
 800067a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800067c:	4b18      	ldr	r3, [pc, #96]	; (80006e0 <SystemInit+0x104>)
 800067e:	4a1c      	ldr	r2, [pc, #112]	; (80006f0 <SystemInit+0x114>)
 8000680:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <SystemInit+0x104>)
 8000684:	2200      	movs	r2, #0
 8000686:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000688:	4b15      	ldr	r3, [pc, #84]	; (80006e0 <SystemInit+0x104>)
 800068a:	4a19      	ldr	r2, [pc, #100]	; (80006f0 <SystemInit+0x114>)
 800068c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <SystemInit+0x104>)
 8000690:	2200      	movs	r2, #0
 8000692:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000694:	4b12      	ldr	r3, [pc, #72]	; (80006e0 <SystemInit+0x104>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a11      	ldr	r2, [pc, #68]	; (80006e0 <SystemInit+0x104>)
 800069a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800069e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	; (80006e0 <SystemInit+0x104>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <SystemInit+0x118>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <SystemInit+0x118>)
 80006ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006b0:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <SystemInit+0x11c>)
 80006b4:	681a      	ldr	r2, [r3, #0]
 80006b6:	4b11      	ldr	r3, [pc, #68]	; (80006fc <SystemInit+0x120>)
 80006b8:	4013      	ands	r3, r2
 80006ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006be:	d202      	bcs.n	80006c6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <SystemInit+0x124>)
 80006c2:	2201      	movs	r2, #1
 80006c4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <SystemInit+0x128>)
 80006c8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006cc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006ce:	bf00      	nop
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00
 80006dc:	52002000 	.word	0x52002000
 80006e0:	58024400 	.word	0x58024400
 80006e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e8:	02020200 	.word	0x02020200
 80006ec:	01ff0000 	.word	0x01ff0000
 80006f0:	01010280 	.word	0x01010280
 80006f4:	580000c0 	.word	0x580000c0
 80006f8:	5c001000 	.word	0x5c001000
 80006fc:	ffff0000 	.word	0xffff0000
 8000700:	51008108 	.word	0x51008108
 8000704:	52004000 	.word	0x52004000

08000708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
	/* Wait until CPU2 boots and enters in stop mode or timeout*/
	timeout = 0xFFFF;
 800070e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000712:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000714:	bf00      	nop
 8000716:	4b30      	ldr	r3, [pc, #192]	; (80007d8 <main+0xd0>)
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800071e:	2b00      	cmp	r3, #0
 8000720:	d004      	beq.n	800072c <main+0x24>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	1e5a      	subs	r2, r3, #1
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	2b00      	cmp	r3, #0
 800072a:	dcf4      	bgt.n	8000716 <main+0xe>
	if ( timeout < 0 )
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b00      	cmp	r3, #0
 8000730:	da01      	bge.n	8000736 <main+0x2e>
	{
		Error_Handler();
 8000732:	f000 fb3d 	bl	8000db0 <Error_Handler>
	}
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000736:	f000 fe33 	bl	80013a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073a:	f000 f853 	bl	80007e4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800073e:	f000 f8d5 	bl	80008ec <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
	/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
	/*HW semaphore Clock enable*/
	__HAL_RCC_HSEM_CLK_ENABLE();
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <main+0xd0>)
 8000744:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000748:	4a23      	ldr	r2, [pc, #140]	; (80007d8 <main+0xd0>)
 800074a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800074e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000752:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <main+0xd0>)
 8000754:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000758:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]
	/*Take HSEM */
	HAL_HSEM_FastTake(HSEM_ID_0);
 8000760:	2000      	movs	r0, #0
 8000762:	f004 f831 	bl	80047c8 <HAL_HSEM_FastTake>
	/*Release HSEM in order to notify the CPU2(CM4)*/
	HAL_HSEM_Release(HSEM_ID_0,0);
 8000766:	2100      	movs	r1, #0
 8000768:	2000      	movs	r0, #0
 800076a:	f004 f847 	bl	80047fc <HAL_HSEM_Release>
	/* wait until CPU2 wakes up from stop mode */
	timeout = 0xFFFF;
 800076e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000772:	607b      	str	r3, [r7, #4]
	while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000774:	bf00      	nop
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <main+0xd0>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800077e:	2b00      	cmp	r3, #0
 8000780:	d104      	bne.n	800078c <main+0x84>
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1e5a      	subs	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	2b00      	cmp	r3, #0
 800078a:	dcf4      	bgt.n	8000776 <main+0x6e>
	if ( timeout < 0 )
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	2b00      	cmp	r3, #0
 8000790:	da01      	bge.n	8000796 <main+0x8e>
	{
		Error_Handler();
 8000792:	f000 fb0d 	bl	8000db0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000796:	f000 fa27 	bl	8000be8 <MX_GPIO_Init>
  MX_ETH_Init();
 800079a:	f000 f8d9 	bl	8000950 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800079e:	f000 f97b 	bl	8000a98 <MX_USART3_UART_Init>
  MX_DMA_Init();
 80007a2:	f000 f9f9 	bl	8000b98 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 80007a6:	f000 f9c5 	bl	8000b34 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI3_Init();
 80007aa:	f000 f91d 	bl	80009e8 <MX_SPI3_Init>
  /* USER CODE BEGIN WHILE */
	while (1)
	{


		if(HAL_GetTick() - timemsM7_LED > 1000)
 80007ae:	f000 fe7d 	bl	80014ac <HAL_GetTick>
 80007b2:	4602      	mov	r2, r0
 80007b4:	4b09      	ldr	r3, [pc, #36]	; (80007dc <main+0xd4>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	1ad3      	subs	r3, r2, r3
 80007ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80007be:	d9f6      	bls.n	80007ae <main+0xa6>
		{
			timemsM7_LED = HAL_GetTick();
 80007c0:	f000 fe74 	bl	80014ac <HAL_GetTick>
 80007c4:	4603      	mov	r3, r0
 80007c6:	4a05      	ldr	r2, [pc, #20]	; (80007dc <main+0xd4>)
 80007c8:	6013      	str	r3, [r2, #0]
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007ca:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80007ce:	4804      	ldr	r0, [pc, #16]	; (80007e0 <main+0xd8>)
 80007d0:	f003 ffdf 	bl	8004792 <HAL_GPIO_TogglePin>
		if(HAL_GetTick() - timemsM7_LED > 1000)
 80007d4:	e7eb      	b.n	80007ae <main+0xa6>
 80007d6:	bf00      	nop
 80007d8:	58024400 	.word	0x58024400
 80007dc:	240008e8 	.word	0x240008e8
 80007e0:	58020400 	.word	0x58020400

080007e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b09c      	sub	sp, #112	; 0x70
 80007e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007ee:	224c      	movs	r2, #76	; 0x4c
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f008 fe2e 	bl	8009454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2220      	movs	r2, #32
 80007fc:	2100      	movs	r1, #0
 80007fe:	4618      	mov	r0, r3
 8000800:	f008 fe28 	bl	8009454 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000804:	2004      	movs	r0, #4
 8000806:	f004 f955 	bl	8004ab4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 800080a:	2300      	movs	r3, #0
 800080c:	603b      	str	r3, [r7, #0]
 800080e:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <SystemClock_Config+0xfc>)
 8000810:	699b      	ldr	r3, [r3, #24]
 8000812:	4a33      	ldr	r2, [pc, #204]	; (80008e0 <SystemClock_Config+0xfc>)
 8000814:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000818:	6193      	str	r3, [r2, #24]
 800081a:	4b31      	ldr	r3, [pc, #196]	; (80008e0 <SystemClock_Config+0xfc>)
 800081c:	699b      	ldr	r3, [r3, #24]
 800081e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000822:	603b      	str	r3, [r7, #0]
 8000824:	4b2f      	ldr	r3, [pc, #188]	; (80008e4 <SystemClock_Config+0x100>)
 8000826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000828:	4a2e      	ldr	r2, [pc, #184]	; (80008e4 <SystemClock_Config+0x100>)
 800082a:	f043 0301 	orr.w	r3, r3, #1
 800082e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000830:	4b2c      	ldr	r3, [pc, #176]	; (80008e4 <SystemClock_Config+0x100>)
 8000832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000834:	f003 0301 	and.w	r3, r3, #1
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800083c:	bf00      	nop
 800083e:	4b28      	ldr	r3, [pc, #160]	; (80008e0 <SystemClock_Config+0xfc>)
 8000840:	699b      	ldr	r3, [r3, #24]
 8000842:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000846:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800084a:	d1f8      	bne.n	800083e <SystemClock_Config+0x5a>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0x104>)
 800084e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000850:	f023 0303 	bic.w	r3, r3, #3
 8000854:	4a24      	ldr	r2, [pc, #144]	; (80008e8 <SystemClock_Config+0x104>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000860:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000864:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	2302      	movs	r3, #2
 800086c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 800086e:	2301      	movs	r3, #1
 8000870:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 120;
 8000872:	2378      	movs	r3, #120	; 0x78
 8000874:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000876:	2302      	movs	r3, #2
 8000878:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800087a:	2302      	movs	r3, #2
 800087c:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800087e:	2302      	movs	r3, #2
 8000880:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000882:	230c      	movs	r3, #12
 8000884:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000886:	2300      	movs	r3, #0
 8000888:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 800088a:	2300      	movs	r3, #0
 800088c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000892:	4618      	mov	r0, r3
 8000894:	f004 f978 	bl	8004b88 <HAL_RCC_OscConfig>
 8000898:	4603      	mov	r3, r0
 800089a:	2b00      	cmp	r3, #0
 800089c:	d001      	beq.n	80008a2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800089e:	f000 fa87 	bl	8000db0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008a2:	233f      	movs	r3, #63	; 0x3f
 80008a4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008a6:	2303      	movs	r3, #3
 80008a8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008aa:	2300      	movs	r3, #0
 80008ac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008ae:	2308      	movs	r3, #8
 80008b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80008b6:	2340      	movs	r3, #64	; 0x40
 80008b8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80008ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008be:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80008c0:	2340      	movs	r3, #64	; 0x40
 80008c2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2104      	movs	r1, #4
 80008c8:	4618      	mov	r0, r3
 80008ca:	f004 fd8b 	bl	80053e4 <HAL_RCC_ClockConfig>
 80008ce:	4603      	mov	r3, r0
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d001      	beq.n	80008d8 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 80008d4:	f000 fa6c 	bl	8000db0 <Error_Handler>
  }
}
 80008d8:	bf00      	nop
 80008da:	3770      	adds	r7, #112	; 0x70
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	58024800 	.word	0x58024800
 80008e4:	58000400 	.word	0x58000400
 80008e8:	58024400 	.word	0x58024400

080008ec <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b0b0      	sub	sp, #192	; 0xc0
 80008f0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80008f2:	1d3b      	adds	r3, r7, #4
 80008f4:	22bc      	movs	r2, #188	; 0xbc
 80008f6:	2100      	movs	r1, #0
 80008f8:	4618      	mov	r0, r3
 80008fa:	f008 fdab 	bl	8009454 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_SPI3
 80008fe:	f44f 2382 	mov.w	r3, #266240	; 0x41000
 8000902:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL3.PLL3M = 1;
 8000904:	2301      	movs	r3, #1
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLL3.PLL3N = 24;
 8000908:	2318      	movs	r3, #24
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLL3.PLL3P = 2;
 800090c:	2302      	movs	r3, #2
 800090e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLL3.PLL3Q = 4;
 8000910:	2304      	movs	r3, #4
 8000912:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.PLL3.PLL3R = 2;
 8000914:	2302      	movs	r3, #2
 8000916:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8000918:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800091c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800091e:	2300      	movs	r3, #0
 8000920:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
 8000922:	2300      	movs	r3, #0
 8000924:	647b      	str	r3, [r7, #68]	; 0x44
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL3;
 8000926:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092a:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 800092c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000930:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	4618      	mov	r0, r3
 8000938:	f005 f8e0 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <PeriphCommonClock_Config+0x5a>
  {
    Error_Handler();
 8000942:	f000 fa35 	bl	8000db0 <Error_Handler>
  }
}
 8000946:	bf00      	nop
 8000948:	37c0      	adds	r7, #192	; 0xc0
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000954:	4b1e      	ldr	r3, [pc, #120]	; (80009d0 <MX_ETH_Init+0x80>)
 8000956:	4a1f      	ldr	r2, [pc, #124]	; (80009d4 <MX_ETH_Init+0x84>)
 8000958:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <MX_ETH_Init+0x88>)
 800095c:	2200      	movs	r2, #0
 800095e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000960:	4b1d      	ldr	r3, [pc, #116]	; (80009d8 <MX_ETH_Init+0x88>)
 8000962:	2280      	movs	r2, #128	; 0x80
 8000964:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000966:	4b1c      	ldr	r3, [pc, #112]	; (80009d8 <MX_ETH_Init+0x88>)
 8000968:	22e1      	movs	r2, #225	; 0xe1
 800096a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800096c:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_ETH_Init+0x88>)
 800096e:	2200      	movs	r2, #0
 8000970:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <MX_ETH_Init+0x88>)
 8000974:	2200      	movs	r2, #0
 8000976:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000978:	4b17      	ldr	r3, [pc, #92]	; (80009d8 <MX_ETH_Init+0x88>)
 800097a:	2200      	movs	r2, #0
 800097c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_ETH_Init+0x80>)
 8000980:	4a15      	ldr	r2, [pc, #84]	; (80009d8 <MX_ETH_Init+0x88>)
 8000982:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000984:	4b12      	ldr	r3, [pc, #72]	; (80009d0 <MX_ETH_Init+0x80>)
 8000986:	2201      	movs	r2, #1
 8000988:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800098a:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <MX_ETH_Init+0x80>)
 800098c:	4a13      	ldr	r2, [pc, #76]	; (80009dc <MX_ETH_Init+0x8c>)
 800098e:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000990:	4b0f      	ldr	r3, [pc, #60]	; (80009d0 <MX_ETH_Init+0x80>)
 8000992:	4a13      	ldr	r2, [pc, #76]	; (80009e0 <MX_ETH_Init+0x90>)
 8000994:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000996:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <MX_ETH_Init+0x80>)
 8000998:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800099c:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800099e:	480c      	ldr	r0, [pc, #48]	; (80009d0 <MX_ETH_Init+0x80>)
 80009a0:	f003 f90a 	bl	8003bb8 <HAL_ETH_Init>
 80009a4:	4603      	mov	r3, r0
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d001      	beq.n	80009ae <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80009aa:	f000 fa01 	bl	8000db0 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80009ae:	2238      	movs	r2, #56	; 0x38
 80009b0:	2100      	movs	r1, #0
 80009b2:	480c      	ldr	r0, [pc, #48]	; (80009e4 <MX_ETH_Init+0x94>)
 80009b4:	f008 fd4e 	bl	8009454 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80009b8:	4b0a      	ldr	r3, [pc, #40]	; (80009e4 <MX_ETH_Init+0x94>)
 80009ba:	2221      	movs	r2, #33	; 0x21
 80009bc:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80009be:	4b09      	ldr	r3, [pc, #36]	; (80009e4 <MX_ETH_Init+0x94>)
 80009c0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80009c4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <MX_ETH_Init+0x94>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	24000124 	.word	0x24000124
 80009d4:	40028000 	.word	0x40028000
 80009d8:	240008ec 	.word	0x240008ec
 80009dc:	24000070 	.word	0x24000070
 80009e0:	24000010 	.word	0x24000010
 80009e4:	240000ec 	.word	0x240000ec

080009e8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <MX_SPI3_Init+0xa8>)
 80009ee:	4a29      	ldr	r2, [pc, #164]	; (8000a94 <MX_SPI3_Init+0xac>)
 80009f0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80009f2:	4b27      	ldr	r3, [pc, #156]	; (8000a90 <MX_SPI3_Init+0xa8>)
 80009f4:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 80009f8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 80009fa:	4b25      	ldr	r3, [pc, #148]	; (8000a90 <MX_SPI3_Init+0xa8>)
 80009fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a00:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a02:	4b23      	ldr	r3, [pc, #140]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a04:	2207      	movs	r2, #7
 8000a06:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a16:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000a1a:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a1e:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8000a22:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a24:	4b1a      	ldr	r3, [pc, #104]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a2a:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a30:	4b17      	ldr	r3, [pc, #92]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000a36:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a3c:	4b14      	ldr	r3, [pc, #80]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a42:	635a      	str	r2, [r3, #52]	; 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000a44:	4b12      	ldr	r3, [pc, #72]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000a4a:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a50:	4b0f      	ldr	r3, [pc, #60]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	641a      	str	r2, [r3, #64]	; 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000a56:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000a5c:	4b0c      	ldr	r3, [pc, #48]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	649a      	str	r2, [r3, #72]	; 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000a62:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000a68:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000a6e:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a7a:	4805      	ldr	r0, [pc, #20]	; (8000a90 <MX_SPI3_Init+0xa8>)
 8000a7c:	f006 fba6 	bl	80071cc <HAL_SPI_Init>
 8000a80:	4603      	mov	r3, r0
 8000a82:	2b00      	cmp	r3, #0
 8000a84:	d001      	beq.n	8000a8a <MX_SPI3_Init+0xa2>
  {
    Error_Handler();
 8000a86:	f000 f993 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000a8a:	bf00      	nop
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	240001d4 	.word	0x240001d4
 8000a94:	40003c00 	.word	0x40003c00

08000a98 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a9c:	4b22      	ldr	r3, [pc, #136]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000a9e:	4a23      	ldr	r2, [pc, #140]	; (8000b2c <MX_USART3_UART_Init+0x94>)
 8000aa0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 384000;
 8000aa2:	4b21      	ldr	r3, [pc, #132]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aa4:	4a22      	ldr	r2, [pc, #136]	; (8000b30 <MX_USART3_UART_Init+0x98>)
 8000aa6:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa8:	4b1f      	ldr	r3, [pc, #124]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000aae:	4b1e      	ldr	r3, [pc, #120]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ab4:	4b1c      	ldr	r3, [pc, #112]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000aba:	4b1b      	ldr	r3, [pc, #108]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000abc:	220c      	movs	r2, #12
 8000abe:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ac0:	4b19      	ldr	r3, [pc, #100]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac6:	4b18      	ldr	r3, [pc, #96]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000acc:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ace:	2200      	movs	r2, #0
 8000ad0:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ad2:	4b15      	ldr	r3, [pc, #84]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ad8:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000ae0:	f006 fc95 	bl	800740e <HAL_UART_Init>
 8000ae4:	4603      	mov	r3, r0
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	d001      	beq.n	8000aee <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8000aea:	f000 f961 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000aee:	2100      	movs	r1, #0
 8000af0:	480d      	ldr	r0, [pc, #52]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000af2:	f008 f8b7 	bl	8008c64 <HAL_UARTEx_SetTxFifoThreshold>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8000afc:	f000 f958 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b00:	2100      	movs	r1, #0
 8000b02:	4809      	ldr	r0, [pc, #36]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b04:	f008 f8ec 	bl	8008ce0 <HAL_UARTEx_SetRxFifoThreshold>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8000b0e:	f000 f94f 	bl	8000db0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b12:	4805      	ldr	r0, [pc, #20]	; (8000b28 <MX_USART3_UART_Init+0x90>)
 8000b14:	f008 f86d 	bl	8008bf2 <HAL_UARTEx_DisableFifoMode>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8000b1e:	f000 f947 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	2400025c 	.word	0x2400025c
 8000b2c:	40004800 	.word	0x40004800
 8000b30:	0005dc00 	.word	0x0005dc00

08000b34 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b38:	4b15      	ldr	r3, [pc, #84]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b3a:	4a16      	ldr	r2, [pc, #88]	; (8000b94 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8000b3c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8000b3e:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b40:	2209      	movs	r2, #9
 8000b42:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b46:	2202      	movs	r2, #2
 8000b48:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b4a:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b52:	2202      	movs	r2, #2
 8000b54:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000b56:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b62:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000b68:	4b09      	ldr	r3, [pc, #36]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b70:	2201      	movs	r2, #1
 8000b72:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000b7c:	f003 fe52 	bl	8004824 <HAL_PCD_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b86:	f000 f913 	bl	8000db0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	240003dc 	.word	0x240003dc
 8000b94:	40080000 	.word	0x40080000

08000b98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_DMA_Init+0x4c>)
 8000ba0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba4:	4a0f      	ldr	r2, [pc, #60]	; (8000be4 <MX_DMA_Init+0x4c>)
 8000ba6:	f043 0301 	orr.w	r3, r3, #1
 8000baa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bae:	4b0d      	ldr	r3, [pc, #52]	; (8000be4 <MX_DMA_Init+0x4c>)
 8000bb0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	200c      	movs	r0, #12
 8000bc2:	f000 fd9e 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000bc6:	200c      	movs	r0, #12
 8000bc8:	f000 fdb5 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2100      	movs	r1, #0
 8000bd0:	200f      	movs	r0, #15
 8000bd2:	f000 fd96 	bl	8001702 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000bd6:	200f      	movs	r0, #15
 8000bd8:	f000 fdad 	bl	8001736 <HAL_NVIC_EnableIRQ>

}
 8000bdc:	bf00      	nop
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	58024400 	.word	0x58024400

08000be8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08c      	sub	sp, #48	; 0x30
 8000bec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	605a      	str	r2, [r3, #4]
 8000bf8:	609a      	str	r2, [r3, #8]
 8000bfa:	60da      	str	r2, [r3, #12]
 8000bfc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bfe:	4b67      	ldr	r3, [pc, #412]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c04:	4a65      	ldr	r2, [pc, #404]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c06:	f043 0304 	orr.w	r3, r3, #4
 8000c0a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0e:	4b63      	ldr	r3, [pc, #396]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c14:	f003 0304 	and.w	r3, r3, #4
 8000c18:	61bb      	str	r3, [r7, #24]
 8000c1a:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c1c:	4b5f      	ldr	r3, [pc, #380]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c22:	4a5e      	ldr	r2, [pc, #376]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c28:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c2c:	4b5b      	ldr	r3, [pc, #364]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c36:	617b      	str	r3, [r7, #20]
 8000c38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c3a:	4b58      	ldr	r3, [pc, #352]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c40:	4a56      	ldr	r2, [pc, #344]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c4a:	4b54      	ldr	r3, [pc, #336]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c50:	f003 0301 	and.w	r3, r3, #1
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c58:	4b50      	ldr	r3, [pc, #320]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c5e:	4a4f      	ldr	r2, [pc, #316]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c60:	f043 0302 	orr.w	r3, r3, #2
 8000c64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c68:	4b4c      	ldr	r3, [pc, #304]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c76:	4b49      	ldr	r3, [pc, #292]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7c:	4a47      	ldr	r2, [pc, #284]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c7e:	f043 0310 	orr.w	r3, r3, #16
 8000c82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c86:	4b45      	ldr	r3, [pc, #276]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8c:	f003 0310 	and.w	r3, r3, #16
 8000c90:	60bb      	str	r3, [r7, #8]
 8000c92:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c94:	4b41      	ldr	r3, [pc, #260]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9a:	4a40      	ldr	r2, [pc, #256]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000c9c:	f043 0308 	orr.w	r3, r3, #8
 8000ca0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca4:	4b3d      	ldr	r3, [pc, #244]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000ca6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000caa:	f003 0308 	and.w	r3, r3, #8
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000cb2:	4b3a      	ldr	r3, [pc, #232]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb8:	4a38      	ldr	r2, [pc, #224]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000cba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000cbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cc2:	4b36      	ldr	r3, [pc, #216]	; (8000d9c <MX_GPIO_Init+0x1b4>)
 8000cc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ccc:	603b      	str	r3, [r7, #0]
 8000cce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin, GPIO_PIN_RESET);
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	f44f 41d0 	mov.w	r1, #26624	; 0x6800
 8000cd6:	4832      	ldr	r0, [pc, #200]	; (8000da0 <MX_GPIO_Init+0x1b8>)
 8000cd8:	f003 fd42 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ce2:	4830      	ldr	r0, [pc, #192]	; (8000da4 <MX_GPIO_Init+0x1bc>)
 8000ce4:	f003 fd3c 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cee:	482e      	ldr	r0, [pc, #184]	; (8000da8 <MX_GPIO_Init+0x1c0>)
 8000cf0:	f003 fd36 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DC_GPIO_Port, LCD_DC_Pin, GPIO_PIN_RESET);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cfa:	482c      	ldr	r0, [pc, #176]	; (8000dac <MX_GPIO_Init+0x1c4>)
 8000cfc:	f003 fd30 	bl	8004760 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LCD_RST_Pin LCD2_CS_Pin LCD1_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD2_CS_Pin|LCD1_CS_Pin;
 8000d00:	f44f 43d0 	mov.w	r3, #26624	; 0x6800
 8000d04:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d06:	2301      	movs	r3, #1
 8000d08:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d12:	f107 031c 	add.w	r3, r7, #28
 8000d16:	4619      	mov	r1, r3
 8000d18:	4821      	ldr	r0, [pc, #132]	; (8000da0 <MX_GPIO_Init+0x1b8>)
 8000d1a:	f003 fb71 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000d1e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d24:	2301      	movs	r3, #1
 8000d26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000d30:	f107 031c 	add.w	r3, r7, #28
 8000d34:	4619      	mov	r1, r3
 8000d36:	481b      	ldr	r0, [pc, #108]	; (8000da4 <MX_GPIO_Init+0x1bc>)
 8000d38:	f003 fb62 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin;
 8000d3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d42:	2301      	movs	r3, #1
 8000d44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_OTG_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 8000d4e:	f107 031c 	add.w	r3, r7, #28
 8000d52:	4619      	mov	r1, r3
 8000d54:	4814      	ldr	r0, [pc, #80]	; (8000da8 <MX_GPIO_Init+0x1c0>)
 8000d56:	f003 fb53 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8000d5a:	2380      	movs	r3, #128	; 0x80
 8000d5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000d62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d64:	2300      	movs	r3, #0
 8000d66:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	480f      	ldr	r0, [pc, #60]	; (8000dac <MX_GPIO_Init+0x1c4>)
 8000d70:	f003 fb46 	bl	8004400 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin;
 8000d74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_DC_GPIO_Port, &GPIO_InitStruct);
 8000d86:	f107 031c 	add.w	r3, r7, #28
 8000d8a:	4619      	mov	r1, r3
 8000d8c:	4807      	ldr	r0, [pc, #28]	; (8000dac <MX_GPIO_Init+0x1c4>)
 8000d8e:	f003 fb37 	bl	8004400 <HAL_GPIO_Init>

}
 8000d92:	bf00      	nop
 8000d94:	3730      	adds	r7, #48	; 0x30
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	58024400 	.word	0x58024400
 8000da0:	58021000 	.word	0x58021000
 8000da4:	58020400 	.word	0x58020400
 8000da8:	58020c00 	.word	0x58020c00
 8000dac:	58021800 	.word	0x58021800

08000db0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000db4:	b672      	cpsid	i
}
 8000db6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000db8:	e7fe      	b.n	8000db8 <Error_Handler+0x8>
	...

08000dbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	b083      	sub	sp, #12
 8000dc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <HAL_MspInit+0x30>)
 8000dc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dc8:	4a08      	ldr	r2, [pc, #32]	; (8000dec <HAL_MspInit+0x30>)
 8000dca:	f043 0302 	orr.w	r3, r3, #2
 8000dce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <HAL_MspInit+0x30>)
 8000dd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr
 8000dec:	58024400 	.word	0x58024400

08000df0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08e      	sub	sp, #56	; 0x38
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a59      	ldr	r2, [pc, #356]	; (8000f74 <HAL_ETH_MspInit+0x184>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	f040 80ab 	bne.w	8000f6a <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000e14:	4b58      	ldr	r3, [pc, #352]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e16:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e1a:	4a57      	ldr	r2, [pc, #348]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e20:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e24:	4b54      	ldr	r3, [pc, #336]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e26:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e2e:	623b      	str	r3, [r7, #32]
 8000e30:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000e32:	4b51      	ldr	r3, [pc, #324]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e34:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e38:	4a4f      	ldr	r2, [pc, #316]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e3e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e42:	4b4d      	ldr	r3, [pc, #308]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e44:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e4c:	61fb      	str	r3, [r7, #28]
 8000e4e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000e50:	4b49      	ldr	r3, [pc, #292]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e56:	4a48      	ldr	r2, [pc, #288]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e5c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e60:	4b45      	ldr	r3, [pc, #276]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e62:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6a:	61bb      	str	r3, [r7, #24]
 8000e6c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e6e:	4b42      	ldr	r3, [pc, #264]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e74:	4a40      	ldr	r2, [pc, #256]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e7e:	4b3e      	ldr	r3, [pc, #248]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e84:	f003 0304 	and.w	r3, r3, #4
 8000e88:	617b      	str	r3, [r7, #20]
 8000e8a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e8c:	4b3a      	ldr	r3, [pc, #232]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e92:	4a39      	ldr	r2, [pc, #228]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e94:	f043 0301 	orr.w	r3, r3, #1
 8000e98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e9c:	4b36      	ldr	r3, [pc, #216]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000e9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ea2:	f003 0301 	and.w	r3, r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
 8000ea8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000eaa:	4b33      	ldr	r3, [pc, #204]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000eb0:	4a31      	ldr	r2, [pc, #196]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eb2:	f043 0302 	orr.w	r3, r3, #2
 8000eb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000eba:	4b2f      	ldr	r3, [pc, #188]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000ebc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	60fb      	str	r3, [r7, #12]
 8000ec6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ec8:	4b2b      	ldr	r3, [pc, #172]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ece:	4a2a      	ldr	r2, [pc, #168]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ed4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ed8:	4b27      	ldr	r3, [pc, #156]	; (8000f78 <HAL_ETH_MspInit+0x188>)
 8000eda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ee2:	60bb      	str	r3, [r7, #8]
 8000ee4:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000ee6:	2332      	movs	r3, #50	; 0x32
 8000ee8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eea:	2302      	movs	r3, #2
 8000eec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ef6:	230b      	movs	r3, #11
 8000ef8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000efa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000efe:	4619      	mov	r1, r3
 8000f00:	481e      	ldr	r0, [pc, #120]	; (8000f7c <HAL_ETH_MspInit+0x18c>)
 8000f02:	f003 fa7d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000f06:	2386      	movs	r3, #134	; 0x86
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f12:	2300      	movs	r3, #0
 8000f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f16:	230b      	movs	r3, #11
 8000f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4817      	ldr	r0, [pc, #92]	; (8000f80 <HAL_ETH_MspInit+0x190>)
 8000f22:	f003 fa6d 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f26:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f34:	2300      	movs	r3, #0
 8000f36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f38:	230b      	movs	r3, #11
 8000f3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f40:	4619      	mov	r1, r3
 8000f42:	4810      	ldr	r0, [pc, #64]	; (8000f84 <HAL_ETH_MspInit+0x194>)
 8000f44:	f003 fa5c 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000f48:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4e:	2302      	movs	r3, #2
 8000f50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f52:	2300      	movs	r3, #0
 8000f54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	2300      	movs	r3, #0
 8000f58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f5a:	230b      	movs	r3, #11
 8000f5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f62:	4619      	mov	r1, r3
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <HAL_ETH_MspInit+0x198>)
 8000f66:	f003 fa4b 	bl	8004400 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000f6a:	bf00      	nop
 8000f6c:	3738      	adds	r7, #56	; 0x38
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40028000 	.word	0x40028000
 8000f78:	58024400 	.word	0x58024400
 8000f7c:	58020800 	.word	0x58020800
 8000f80:	58020000 	.word	0x58020000
 8000f84:	58020400 	.word	0x58020400
 8000f88:	58021800 	.word	0x58021800

08000f8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b08a      	sub	sp, #40	; 0x28
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2200      	movs	r2, #0
 8000f9a:	601a      	str	r2, [r3, #0]
 8000f9c:	605a      	str	r2, [r3, #4]
 8000f9e:	609a      	str	r2, [r3, #8]
 8000fa0:	60da      	str	r2, [r3, #12]
 8000fa2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <HAL_SPI_MspInit+0xc8>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d14d      	bne.n	800104a <HAL_SPI_MspInit+0xbe>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fae:	4b2a      	ldr	r3, [pc, #168]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fb4:	4a28      	ldr	r2, [pc, #160]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000fbe:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fc8:	613b      	str	r3, [r7, #16]
 8000fca:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fcc:	4b22      	ldr	r3, [pc, #136]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fd2:	4a21      	ldr	r2, [pc, #132]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fd4:	f043 0302 	orr.w	r3, r3, #2
 8000fd8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fdc:	4b1e      	ldr	r3, [pc, #120]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fe2:	f003 0302 	and.w	r3, r3, #2
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fea:	4b1b      	ldr	r3, [pc, #108]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ff0:	4a19      	ldr	r2, [pc, #100]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000ff2:	f043 0304 	orr.w	r3, r3, #4
 8000ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ffa:	4b17      	ldr	r3, [pc, #92]	; (8001058 <HAL_SPI_MspInit+0xcc>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001000:	f003 0304 	and.w	r3, r3, #4
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PB2     ------> SPI3_MOSI
    PC10     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001008:	2304      	movs	r3, #4
 800100a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800100c:	2302      	movs	r3, #2
 800100e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001018:	2307      	movs	r3, #7
 800101a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	4619      	mov	r1, r3
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <HAL_SPI_MspInit+0xd0>)
 8001024:	f003 f9ec 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001028:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800102c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800103a:	2306      	movs	r3, #6
 800103c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800103e:	f107 0314 	add.w	r3, r7, #20
 8001042:	4619      	mov	r1, r3
 8001044:	4806      	ldr	r0, [pc, #24]	; (8001060 <HAL_SPI_MspInit+0xd4>)
 8001046:	f003 f9db 	bl	8004400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3728      	adds	r7, #40	; 0x28
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40003c00 	.word	0x40003c00
 8001058:	58024400 	.word	0x58024400
 800105c:	58020400 	.word	0x58020400
 8001060:	58020800 	.word	0x58020800

08001064 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b0b8      	sub	sp, #224	; 0xe0
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800106c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800107c:	f107 0310 	add.w	r3, r7, #16
 8001080:	22bc      	movs	r2, #188	; 0xbc
 8001082:	2100      	movs	r1, #0
 8001084:	4618      	mov	r0, r3
 8001086:	f008 f9e5 	bl	8009454 <memset>
  if(huart->Instance==USART3)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4a57      	ldr	r2, [pc, #348]	; (80011ec <HAL_UART_MspInit+0x188>)
 8001090:	4293      	cmp	r3, r2
 8001092:	f040 80a6 	bne.w	80011e2 <HAL_UART_MspInit+0x17e>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001096:	2302      	movs	r3, #2
 8001098:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800109a:	2300      	movs	r3, #0
 800109c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a0:	f107 0310 	add.w	r3, r7, #16
 80010a4:	4618      	mov	r0, r3
 80010a6:	f004 fd29 	bl	8005afc <HAL_RCCEx_PeriphCLKConfig>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 80010b0:	f7ff fe7e 	bl	8000db0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80010b4:	4b4e      	ldr	r3, [pc, #312]	; (80011f0 <HAL_UART_MspInit+0x18c>)
 80010b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ba:	4a4d      	ldr	r2, [pc, #308]	; (80011f0 <HAL_UART_MspInit+0x18c>)
 80010bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80010c4:	4b4a      	ldr	r3, [pc, #296]	; (80011f0 <HAL_UART_MspInit+0x18c>)
 80010c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80010ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010d2:	4b47      	ldr	r3, [pc, #284]	; (80011f0 <HAL_UART_MspInit+0x18c>)
 80010d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010d8:	4a45      	ldr	r2, [pc, #276]	; (80011f0 <HAL_UART_MspInit+0x18c>)
 80010da:	f043 0308 	orr.w	r3, r3, #8
 80010de:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010e2:	4b43      	ldr	r3, [pc, #268]	; (80011f0 <HAL_UART_MspInit+0x18c>)
 80010e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010e8:	f003 0308 	and.w	r3, r3, #8
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80010f0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010f4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800110a:	2307      	movs	r3, #7
 800110c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001110:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001114:	4619      	mov	r1, r3
 8001116:	4837      	ldr	r0, [pc, #220]	; (80011f4 <HAL_UART_MspInit+0x190>)
 8001118:	f003 f972 	bl	8004400 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_UART_MspInit+0x194>)
 800111e:	4a37      	ldr	r2, [pc, #220]	; (80011fc <HAL_UART_MspInit+0x198>)
 8001120:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8001122:	4b35      	ldr	r3, [pc, #212]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001124:	222d      	movs	r2, #45	; 0x2d
 8001126:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001128:	4b33      	ldr	r3, [pc, #204]	; (80011f8 <HAL_UART_MspInit+0x194>)
 800112a:	2200      	movs	r2, #0
 800112c:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800112e:	4b32      	ldr	r3, [pc, #200]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001130:	2200      	movs	r2, #0
 8001132:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001134:	4b30      	ldr	r3, [pc, #192]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_UART_MspInit+0x194>)
 800113e:	2200      	movs	r2, #0
 8001140:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_UART_MspInit+0x194>)
 800114a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800114e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001150:	4b29      	ldr	r3, [pc, #164]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001156:	4b28      	ldr	r3, [pc, #160]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001158:	2200      	movs	r2, #0
 800115a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800115c:	4826      	ldr	r0, [pc, #152]	; (80011f8 <HAL_UART_MspInit+0x194>)
 800115e:	f000 fb05 	bl	800176c <HAL_DMA_Init>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <HAL_UART_MspInit+0x108>
    {
      Error_Handler();
 8001168:	f7ff fe22 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4a22      	ldr	r2, [pc, #136]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001170:	67da      	str	r2, [r3, #124]	; 0x7c
 8001172:	4a21      	ldr	r2, [pc, #132]	; (80011f8 <HAL_UART_MspInit+0x194>)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream4;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_UART_MspInit+0x19c>)
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_UART_MspInit+0x1a0>)
 800117c:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Request = DMA_REQUEST_USART3_TX;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_UART_MspInit+0x19c>)
 8001180:	222e      	movs	r2, #46	; 0x2e
 8001182:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001184:	4b1e      	ldr	r3, [pc, #120]	; (8001200 <HAL_UART_MspInit+0x19c>)
 8001186:	2240      	movs	r2, #64	; 0x40
 8001188:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800118a:	4b1d      	ldr	r3, [pc, #116]	; (8001200 <HAL_UART_MspInit+0x19c>)
 800118c:	2200      	movs	r2, #0
 800118e:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001190:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_UART_MspInit+0x19c>)
 8001192:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001196:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_UART_MspInit+0x19c>)
 800119a:	2200      	movs	r2, #0
 800119c:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800119e:	4b18      	ldr	r3, [pc, #96]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 80011a4:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011aa:	4b15      	ldr	r3, [pc, #84]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011b0:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 80011b6:	4812      	ldr	r0, [pc, #72]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011b8:	f000 fad8 	bl	800176c <HAL_DMA_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_UART_MspInit+0x162>
    {
      Error_Handler();
 80011c2:	f7ff fdf5 	bl	8000db0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011ca:	679a      	str	r2, [r3, #120]	; 0x78
 80011cc:	4a0c      	ldr	r2, [pc, #48]	; (8001200 <HAL_UART_MspInit+0x19c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80011d2:	2200      	movs	r2, #0
 80011d4:	2100      	movs	r1, #0
 80011d6:	2027      	movs	r0, #39	; 0x27
 80011d8:	f000 fa93 	bl	8001702 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80011dc:	2027      	movs	r0, #39	; 0x27
 80011de:	f000 faaa 	bl	8001736 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80011e2:	bf00      	nop
 80011e4:	37e0      	adds	r7, #224	; 0xe0
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40004800 	.word	0x40004800
 80011f0:	58024400 	.word	0x58024400
 80011f4:	58020c00 	.word	0x58020c00
 80011f8:	240002ec 	.word	0x240002ec
 80011fc:	40020028 	.word	0x40020028
 8001200:	24000364 	.word	0x24000364
 8001204:	40020070 	.word	0x40020070

08001208 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b08a      	sub	sp, #40	; 0x28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001210:	f107 0314 	add.w	r3, r7, #20
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]
 800121e:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_PCD_MspInit+0xa8>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d13d      	bne.n	80012a6 <HAL_PCD_MspInit+0x9e>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800122a:	f003 fc9d 	bl	8004b68 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122e:	4b21      	ldr	r3, [pc, #132]	; (80012b4 <HAL_PCD_MspInit+0xac>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a1f      	ldr	r2, [pc, #124]	; (80012b4 <HAL_PCD_MspInit+0xac>)
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b1d      	ldr	r3, [pc, #116]	; (80012b4 <HAL_PCD_MspInit+0xac>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	613b      	str	r3, [r7, #16]
 800124a:	693b      	ldr	r3, [r7, #16]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800124c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800125e:	230a      	movs	r3, #10
 8001260:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	4813      	ldr	r0, [pc, #76]	; (80012b8 <HAL_PCD_MspInit+0xb0>)
 800126a:	f003 f8c9 	bl	8004400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800126e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001272:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127c:	f107 0314 	add.w	r3, r7, #20
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <HAL_PCD_MspInit+0xb0>)
 8001284:	f003 f8bc 	bl	8004400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <HAL_PCD_MspInit+0xac>)
 800128a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800128e:	4a09      	ldr	r2, [pc, #36]	; (80012b4 <HAL_PCD_MspInit+0xac>)
 8001290:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001294:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001298:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <HAL_PCD_MspInit+0xac>)
 800129a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800129e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012a2:	60fb      	str	r3, [r7, #12]
 80012a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80012a6:	bf00      	nop
 80012a8:	3728      	adds	r7, #40	; 0x28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	40080000 	.word	0x40080000
 80012b4:	58024400 	.word	0x58024400
 80012b8:	58020000 	.word	0x58020000

080012bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012bc:	b480      	push	{r7}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012c0:	e7fe      	b.n	80012c0 <NMI_Handler+0x4>

080012c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012c2:	b480      	push	{r7}
 80012c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c6:	e7fe      	b.n	80012c6 <HardFault_Handler+0x4>

080012c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012cc:	e7fe      	b.n	80012cc <MemManage_Handler+0x4>

080012ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ce:	b480      	push	{r7}
 80012d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012d2:	e7fe      	b.n	80012d2 <BusFault_Handler+0x4>

080012d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d8:	e7fe      	b.n	80012d8 <UsageFault_Handler+0x4>

080012da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012da:	b480      	push	{r7}
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr

080012e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b480      	push	{r7}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr

08001304 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001308:	f000 f8bc 	bl	8001484 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <DMA1_Stream1_IRQHandler+0x10>)
 8001316:	f001 fae9 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240002ec 	.word	0x240002ec

08001324 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <DMA1_Stream4_IRQHandler+0x10>)
 800132a:	f001 fadf 	bl	80028ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	24000364 	.word	0x24000364

08001338 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800133c:	4802      	ldr	r0, [pc, #8]	; (8001348 <USART3_IRQHandler+0x10>)
 800133e:	f006 f8b7 	bl	80074b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001342:	bf00      	nop
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	2400025c 	.word	0x2400025c

0800134c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800134c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001384 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001350:	f7ff f944 	bl	80005dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001354:	480c      	ldr	r0, [pc, #48]	; (8001388 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001356:	490d      	ldr	r1, [pc, #52]	; (800138c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001358:	4a0d      	ldr	r2, [pc, #52]	; (8001390 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800135a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800135c:	e002      	b.n	8001364 <LoopCopyDataInit>

0800135e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001360:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001362:	3304      	adds	r3, #4

08001364 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001364:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001366:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001368:	d3f9      	bcc.n	800135e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800136c:	4c0a      	ldr	r4, [pc, #40]	; (8001398 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001370:	e001      	b.n	8001376 <LoopFillZerobss>

08001372 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001372:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001374:	3204      	adds	r2, #4

08001376 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001376:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001378:	d3fb      	bcc.n	8001372 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137a:	f008 f847 	bl	800940c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137e:	f7ff f9c3 	bl	8000708 <main>
  bx  lr
 8001382:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001384:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001388:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800138c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8001390:	080094cc 	.word	0x080094cc
  ldr r2, =_sbss
 8001394:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8001398:	240008f8 	.word	0x240008f8

0800139c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800139c:	e7fe      	b.n	800139c <ADC3_IRQHandler>
	...

080013a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a6:	2003      	movs	r0, #3
 80013a8:	f000 f9a0 	bl	80016ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013ac:	f004 f9d0 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80013b0:	4602      	mov	r2, r0
 80013b2:	4b15      	ldr	r3, [pc, #84]	; (8001408 <HAL_Init+0x68>)
 80013b4:	699b      	ldr	r3, [r3, #24]
 80013b6:	0a1b      	lsrs	r3, r3, #8
 80013b8:	f003 030f 	and.w	r3, r3, #15
 80013bc:	4913      	ldr	r1, [pc, #76]	; (800140c <HAL_Init+0x6c>)
 80013be:	5ccb      	ldrb	r3, [r1, r3]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	fa22 f303 	lsr.w	r3, r2, r3
 80013c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80013ca:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <HAL_Init+0x68>)
 80013cc:	699b      	ldr	r3, [r3, #24]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	4a0e      	ldr	r2, [pc, #56]	; (800140c <HAL_Init+0x6c>)
 80013d4:	5cd3      	ldrb	r3, [r2, r3]
 80013d6:	f003 031f 	and.w	r3, r3, #31
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	fa22 f303 	lsr.w	r3, r2, r3
 80013e0:	4a0b      	ldr	r2, [pc, #44]	; (8001410 <HAL_Init+0x70>)
 80013e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80013e4:	4a0b      	ldr	r2, [pc, #44]	; (8001414 <HAL_Init+0x74>)
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013ea:	2000      	movs	r0, #0
 80013ec:	f000 f814 	bl	8001418 <HAL_InitTick>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e002      	b.n	8001400 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013fa:	f7ff fcdf 	bl	8000dbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	58024400 	.word	0x58024400
 800140c:	0800947c 	.word	0x0800947c
 8001410:	24000004 	.word	0x24000004
 8001414:	24000000 	.word	0x24000000

08001418 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001420:	4b15      	ldr	r3, [pc, #84]	; (8001478 <HAL_InitTick+0x60>)
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e021      	b.n	8001470 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800142c:	4b13      	ldr	r3, [pc, #76]	; (800147c <HAL_InitTick+0x64>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_InitTick+0x60>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	4619      	mov	r1, r3
 8001436:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800143a:	fbb3 f3f1 	udiv	r3, r3, r1
 800143e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001442:	4618      	mov	r0, r3
 8001444:	f000 f985 	bl	8001752 <HAL_SYSTICK_Config>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800144e:	2301      	movs	r3, #1
 8001450:	e00e      	b.n	8001470 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b0f      	cmp	r3, #15
 8001456:	d80a      	bhi.n	800146e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001458:	2200      	movs	r2, #0
 800145a:	6879      	ldr	r1, [r7, #4]
 800145c:	f04f 30ff 	mov.w	r0, #4294967295
 8001460:	f000 f94f 	bl	8001702 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001464:	4a06      	ldr	r2, [pc, #24]	; (8001480 <HAL_InitTick+0x68>)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800146a:	2300      	movs	r3, #0
 800146c:	e000      	b.n	8001470 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800146e:	2301      	movs	r3, #1
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	2400000c 	.word	0x2400000c
 800147c:	24000000 	.word	0x24000000
 8001480:	24000008 	.word	0x24000008

08001484 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_IncTick+0x20>)
 800148a:	781b      	ldrb	r3, [r3, #0]
 800148c:	461a      	mov	r2, r3
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <HAL_IncTick+0x24>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4413      	add	r3, r2
 8001494:	4a04      	ldr	r2, [pc, #16]	; (80014a8 <HAL_IncTick+0x24>)
 8001496:	6013      	str	r3, [r2, #0]
}
 8001498:	bf00      	nop
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	2400000c 	.word	0x2400000c
 80014a8:	240008f4 	.word	0x240008f4

080014ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  return uwTick;
 80014b0:	4b03      	ldr	r3, [pc, #12]	; (80014c0 <HAL_GetTick+0x14>)
 80014b2:	681b      	ldr	r3, [r3, #0]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	240008f4 	.word	0x240008f4

080014c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b084      	sub	sp, #16
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014cc:	f7ff ffee 	bl	80014ac <HAL_GetTick>
 80014d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014dc:	d005      	beq.n	80014ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014de:	4b0a      	ldr	r3, [pc, #40]	; (8001508 <HAL_Delay+0x44>)
 80014e0:	781b      	ldrb	r3, [r3, #0]
 80014e2:	461a      	mov	r2, r3
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	4413      	add	r3, r2
 80014e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014ea:	bf00      	nop
 80014ec:	f7ff ffde 	bl	80014ac <HAL_GetTick>
 80014f0:	4602      	mov	r2, r0
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d8f7      	bhi.n	80014ec <HAL_Delay+0x28>
  {
  }
}
 80014fc:	bf00      	nop
 80014fe:	bf00      	nop
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
 8001506:	bf00      	nop
 8001508:	2400000c 	.word	0x2400000c

0800150c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001510:	4b03      	ldr	r3, [pc, #12]	; (8001520 <HAL_GetREVID+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0c1b      	lsrs	r3, r3, #16
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	5c001000 	.word	0x5c001000

08001524 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800152c:	4b06      	ldr	r3, [pc, #24]	; (8001548 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8001534:	4904      	ldr	r1, [pc, #16]	; (8001548 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]
}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	58000400 	.word	0x58000400

0800154c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <__NVIC_SetPriorityGrouping+0x40>)
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001562:	68ba      	ldr	r2, [r7, #8]
 8001564:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001568:	4013      	ands	r3, r2
 800156a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001570:	68bb      	ldr	r3, [r7, #8]
 8001572:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	4313      	orrs	r3, r2
 8001578:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800157a:	4a04      	ldr	r2, [pc, #16]	; (800158c <__NVIC_SetPriorityGrouping+0x40>)
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	60d3      	str	r3, [r2, #12]
}
 8001580:	bf00      	nop
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	e000ed00 	.word	0xe000ed00
 8001590:	05fa0000 	.word	0x05fa0000

08001594 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001598:	4b04      	ldr	r3, [pc, #16]	; (80015ac <__NVIC_GetPriorityGrouping+0x18>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	0a1b      	lsrs	r3, r3, #8
 800159e:	f003 0307 	and.w	r3, r3, #7
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	e000ed00 	.word	0xe000ed00

080015b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	4603      	mov	r3, r0
 80015b8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	db0b      	blt.n	80015da <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015c2:	88fb      	ldrh	r3, [r7, #6]
 80015c4:	f003 021f 	and.w	r2, r3, #31
 80015c8:	4907      	ldr	r1, [pc, #28]	; (80015e8 <__NVIC_EnableIRQ+0x38>)
 80015ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015ce:	095b      	lsrs	r3, r3, #5
 80015d0:	2001      	movs	r0, #1
 80015d2:	fa00 f202 	lsl.w	r2, r0, r2
 80015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015da:	bf00      	nop
 80015dc:	370c      	adds	r7, #12
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	e000e100 	.word	0xe000e100

080015ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	6039      	str	r1, [r7, #0]
 80015f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	db0a      	blt.n	8001616 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	490c      	ldr	r1, [pc, #48]	; (8001638 <__NVIC_SetPriority+0x4c>)
 8001606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800160a:	0112      	lsls	r2, r2, #4
 800160c:	b2d2      	uxtb	r2, r2
 800160e:	440b      	add	r3, r1
 8001610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001614:	e00a      	b.n	800162c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	b2da      	uxtb	r2, r3
 800161a:	4908      	ldr	r1, [pc, #32]	; (800163c <__NVIC_SetPriority+0x50>)
 800161c:	88fb      	ldrh	r3, [r7, #6]
 800161e:	f003 030f 	and.w	r3, r3, #15
 8001622:	3b04      	subs	r3, #4
 8001624:	0112      	lsls	r2, r2, #4
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	440b      	add	r3, r1
 800162a:	761a      	strb	r2, [r3, #24]
}
 800162c:	bf00      	nop
 800162e:	370c      	adds	r7, #12
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100
 800163c:	e000ed00 	.word	0xe000ed00

08001640 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001640:	b480      	push	{r7}
 8001642:	b089      	sub	sp, #36	; 0x24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f1c3 0307 	rsb	r3, r3, #7
 800165a:	2b04      	cmp	r3, #4
 800165c:	bf28      	it	cs
 800165e:	2304      	movcs	r3, #4
 8001660:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	3304      	adds	r3, #4
 8001666:	2b06      	cmp	r3, #6
 8001668:	d902      	bls.n	8001670 <NVIC_EncodePriority+0x30>
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	3b03      	subs	r3, #3
 800166e:	e000      	b.n	8001672 <NVIC_EncodePriority+0x32>
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001674:	f04f 32ff 	mov.w	r2, #4294967295
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	fa02 f303 	lsl.w	r3, r2, r3
 800167e:	43da      	mvns	r2, r3
 8001680:	68bb      	ldr	r3, [r7, #8]
 8001682:	401a      	ands	r2, r3
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001688:	f04f 31ff 	mov.w	r1, #4294967295
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	fa01 f303 	lsl.w	r3, r1, r3
 8001692:	43d9      	mvns	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001698:	4313      	orrs	r3, r2
         );
}
 800169a:	4618      	mov	r0, r3
 800169c:	3724      	adds	r7, #36	; 0x24
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
	...

080016a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	3b01      	subs	r3, #1
 80016b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80016b8:	d301      	bcc.n	80016be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016ba:	2301      	movs	r3, #1
 80016bc:	e00f      	b.n	80016de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016be:	4a0a      	ldr	r2, [pc, #40]	; (80016e8 <SysTick_Config+0x40>)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3b01      	subs	r3, #1
 80016c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016c6:	210f      	movs	r1, #15
 80016c8:	f04f 30ff 	mov.w	r0, #4294967295
 80016cc:	f7ff ff8e 	bl	80015ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016d0:	4b05      	ldr	r3, [pc, #20]	; (80016e8 <SysTick_Config+0x40>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016d6:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <SysTick_Config+0x40>)
 80016d8:	2207      	movs	r2, #7
 80016da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016dc:	2300      	movs	r3, #0
}
 80016de:	4618      	mov	r0, r3
 80016e0:	3708      	adds	r7, #8
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	e000e010 	.word	0xe000e010

080016ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b082      	sub	sp, #8
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016f4:	6878      	ldr	r0, [r7, #4]
 80016f6:	f7ff ff29 	bl	800154c <__NVIC_SetPriorityGrouping>
}
 80016fa:	bf00      	nop
 80016fc:	3708      	adds	r7, #8
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}

08001702 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001702:	b580      	push	{r7, lr}
 8001704:	b086      	sub	sp, #24
 8001706:	af00      	add	r7, sp, #0
 8001708:	4603      	mov	r3, r0
 800170a:	60b9      	str	r1, [r7, #8]
 800170c:	607a      	str	r2, [r7, #4]
 800170e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001710:	f7ff ff40 	bl	8001594 <__NVIC_GetPriorityGrouping>
 8001714:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001716:	687a      	ldr	r2, [r7, #4]
 8001718:	68b9      	ldr	r1, [r7, #8]
 800171a:	6978      	ldr	r0, [r7, #20]
 800171c:	f7ff ff90 	bl	8001640 <NVIC_EncodePriority>
 8001720:	4602      	mov	r2, r0
 8001722:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001726:	4611      	mov	r1, r2
 8001728:	4618      	mov	r0, r3
 800172a:	f7ff ff5f 	bl	80015ec <__NVIC_SetPriority>
}
 800172e:	bf00      	nop
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001736:	b580      	push	{r7, lr}
 8001738:	b082      	sub	sp, #8
 800173a:	af00      	add	r7, sp, #0
 800173c:	4603      	mov	r3, r0
 800173e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001740:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff33 	bl	80015b0 <__NVIC_EnableIRQ>
}
 800174a:	bf00      	nop
 800174c:	3708      	adds	r7, #8
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f7ff ffa4 	bl	80016a8 <SysTick_Config>
 8001760:	4603      	mov	r3, r0
}
 8001762:	4618      	mov	r0, r3
 8001764:	3708      	adds	r7, #8
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
	...

0800176c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b086      	sub	sp, #24
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001774:	f7ff fe9a 	bl	80014ac <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e316      	b.n	8001db2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a66      	ldr	r2, [pc, #408]	; (8001924 <HAL_DMA_Init+0x1b8>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d04a      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	4a65      	ldr	r2, [pc, #404]	; (8001928 <HAL_DMA_Init+0x1bc>)
 8001794:	4293      	cmp	r3, r2
 8001796:	d045      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a63      	ldr	r2, [pc, #396]	; (800192c <HAL_DMA_Init+0x1c0>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d040      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a62      	ldr	r2, [pc, #392]	; (8001930 <HAL_DMA_Init+0x1c4>)
 80017a8:	4293      	cmp	r3, r2
 80017aa:	d03b      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a60      	ldr	r2, [pc, #384]	; (8001934 <HAL_DMA_Init+0x1c8>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d036      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a5f      	ldr	r2, [pc, #380]	; (8001938 <HAL_DMA_Init+0x1cc>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d031      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a5d      	ldr	r2, [pc, #372]	; (800193c <HAL_DMA_Init+0x1d0>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d02c      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a5c      	ldr	r2, [pc, #368]	; (8001940 <HAL_DMA_Init+0x1d4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d027      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a5a      	ldr	r2, [pc, #360]	; (8001944 <HAL_DMA_Init+0x1d8>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d022      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a59      	ldr	r2, [pc, #356]	; (8001948 <HAL_DMA_Init+0x1dc>)
 80017e4:	4293      	cmp	r3, r2
 80017e6:	d01d      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	4a57      	ldr	r2, [pc, #348]	; (800194c <HAL_DMA_Init+0x1e0>)
 80017ee:	4293      	cmp	r3, r2
 80017f0:	d018      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a56      	ldr	r2, [pc, #344]	; (8001950 <HAL_DMA_Init+0x1e4>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d013      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4a54      	ldr	r2, [pc, #336]	; (8001954 <HAL_DMA_Init+0x1e8>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d00e      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4a53      	ldr	r2, [pc, #332]	; (8001958 <HAL_DMA_Init+0x1ec>)
 800180c:	4293      	cmp	r3, r2
 800180e:	d009      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a51      	ldr	r2, [pc, #324]	; (800195c <HAL_DMA_Init+0x1f0>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d004      	beq.n	8001824 <HAL_DMA_Init+0xb8>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	4a50      	ldr	r2, [pc, #320]	; (8001960 <HAL_DMA_Init+0x1f4>)
 8001820:	4293      	cmp	r3, r2
 8001822:	d101      	bne.n	8001828 <HAL_DMA_Init+0xbc>
 8001824:	2301      	movs	r3, #1
 8001826:	e000      	b.n	800182a <HAL_DMA_Init+0xbe>
 8001828:	2300      	movs	r3, #0
 800182a:	2b00      	cmp	r3, #0
 800182c:	f000 813b 	beq.w	8001aa6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2202      	movs	r2, #2
 8001834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	2200      	movs	r2, #0
 800183c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a37      	ldr	r2, [pc, #220]	; (8001924 <HAL_DMA_Init+0x1b8>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d04a      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a36      	ldr	r2, [pc, #216]	; (8001928 <HAL_DMA_Init+0x1bc>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d045      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a34      	ldr	r2, [pc, #208]	; (800192c <HAL_DMA_Init+0x1c0>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d040      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a33      	ldr	r2, [pc, #204]	; (8001930 <HAL_DMA_Init+0x1c4>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d03b      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a31      	ldr	r2, [pc, #196]	; (8001934 <HAL_DMA_Init+0x1c8>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d036      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a30      	ldr	r2, [pc, #192]	; (8001938 <HAL_DMA_Init+0x1cc>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d031      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a2e      	ldr	r2, [pc, #184]	; (800193c <HAL_DMA_Init+0x1d0>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d02c      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a2d      	ldr	r2, [pc, #180]	; (8001940 <HAL_DMA_Init+0x1d4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d027      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a2b      	ldr	r2, [pc, #172]	; (8001944 <HAL_DMA_Init+0x1d8>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d022      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a2a      	ldr	r2, [pc, #168]	; (8001948 <HAL_DMA_Init+0x1dc>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d01d      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a28      	ldr	r2, [pc, #160]	; (800194c <HAL_DMA_Init+0x1e0>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d018      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_DMA_Init+0x1e4>)
 80018b4:	4293      	cmp	r3, r2
 80018b6:	d013      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a25      	ldr	r2, [pc, #148]	; (8001954 <HAL_DMA_Init+0x1e8>)
 80018be:	4293      	cmp	r3, r2
 80018c0:	d00e      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_DMA_Init+0x1ec>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d009      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a22      	ldr	r2, [pc, #136]	; (800195c <HAL_DMA_Init+0x1f0>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d004      	beq.n	80018e0 <HAL_DMA_Init+0x174>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_DMA_Init+0x1f4>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d108      	bne.n	80018f2 <HAL_DMA_Init+0x186>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f022 0201 	bic.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e007      	b.n	8001902 <HAL_DMA_Init+0x196>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0201 	bic.w	r2, r2, #1
 8001900:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001902:	e02f      	b.n	8001964 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001904:	f7ff fdd2 	bl	80014ac <HAL_GetTick>
 8001908:	4602      	mov	r2, r0
 800190a:	693b      	ldr	r3, [r7, #16]
 800190c:	1ad3      	subs	r3, r2, r3
 800190e:	2b05      	cmp	r3, #5
 8001910:	d928      	bls.n	8001964 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2220      	movs	r2, #32
 8001916:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2203      	movs	r2, #3
 800191c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001920:	2301      	movs	r3, #1
 8001922:	e246      	b.n	8001db2 <HAL_DMA_Init+0x646>
 8001924:	40020010 	.word	0x40020010
 8001928:	40020028 	.word	0x40020028
 800192c:	40020040 	.word	0x40020040
 8001930:	40020058 	.word	0x40020058
 8001934:	40020070 	.word	0x40020070
 8001938:	40020088 	.word	0x40020088
 800193c:	400200a0 	.word	0x400200a0
 8001940:	400200b8 	.word	0x400200b8
 8001944:	40020410 	.word	0x40020410
 8001948:	40020428 	.word	0x40020428
 800194c:	40020440 	.word	0x40020440
 8001950:	40020458 	.word	0x40020458
 8001954:	40020470 	.word	0x40020470
 8001958:	40020488 	.word	0x40020488
 800195c:	400204a0 	.word	0x400204a0
 8001960:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0301 	and.w	r3, r3, #1
 800196e:	2b00      	cmp	r3, #0
 8001970:	d1c8      	bne.n	8001904 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800197a:	697a      	ldr	r2, [r7, #20]
 800197c:	4b83      	ldr	r3, [pc, #524]	; (8001b8c <HAL_DMA_Init+0x420>)
 800197e:	4013      	ands	r3, r2
 8001980:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 800198a:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001996:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6a1b      	ldr	r3, [r3, #32]
 80019a8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80019aa:	697a      	ldr	r2, [r7, #20]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	d107      	bne.n	80019c8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c0:	4313      	orrs	r3, r2
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	4313      	orrs	r3, r2
 80019c6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80019c8:	4b71      	ldr	r3, [pc, #452]	; (8001b90 <HAL_DMA_Init+0x424>)
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	4b71      	ldr	r3, [pc, #452]	; (8001b94 <HAL_DMA_Init+0x428>)
 80019ce:	4013      	ands	r3, r2
 80019d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80019d4:	d328      	bcc.n	8001a28 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b28      	cmp	r3, #40	; 0x28
 80019dc:	d903      	bls.n	80019e6 <HAL_DMA_Init+0x27a>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b2e      	cmp	r3, #46	; 0x2e
 80019e4:	d917      	bls.n	8001a16 <HAL_DMA_Init+0x2aa>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	2b3e      	cmp	r3, #62	; 0x3e
 80019ec:	d903      	bls.n	80019f6 <HAL_DMA_Init+0x28a>
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	2b42      	cmp	r3, #66	; 0x42
 80019f4:	d90f      	bls.n	8001a16 <HAL_DMA_Init+0x2aa>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	685b      	ldr	r3, [r3, #4]
 80019fa:	2b46      	cmp	r3, #70	; 0x46
 80019fc:	d903      	bls.n	8001a06 <HAL_DMA_Init+0x29a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	2b48      	cmp	r3, #72	; 0x48
 8001a04:	d907      	bls.n	8001a16 <HAL_DMA_Init+0x2aa>
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	2b4e      	cmp	r3, #78	; 0x4e
 8001a0c:	d905      	bls.n	8001a1a <HAL_DMA_Init+0x2ae>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b52      	cmp	r3, #82	; 0x52
 8001a14:	d801      	bhi.n	8001a1a <HAL_DMA_Init+0x2ae>
 8001a16:	2301      	movs	r3, #1
 8001a18:	e000      	b.n	8001a1c <HAL_DMA_Init+0x2b0>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d003      	beq.n	8001a28 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a26:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	695b      	ldr	r3, [r3, #20]
 8001a36:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	f023 0307 	bic.w	r3, r3, #7
 8001a3e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	4313      	orrs	r3, r2
 8001a48:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d117      	bne.n	8001a82 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a56:	697a      	ldr	r2, [r7, #20]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d00e      	beq.n	8001a82 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f001 ff1d 	bl	80038a4 <DMA_CheckFifoParam>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	2240      	movs	r2, #64	; 0x40
 8001a74:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2201      	movs	r2, #1
 8001a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e197      	b.n	8001db2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	697a      	ldr	r2, [r7, #20]
 8001a88:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f001 fe58 	bl	8003740 <DMA_CalcBaseAndBitshift>
 8001a90:	4603      	mov	r3, r0
 8001a92:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	f003 031f 	and.w	r3, r3, #31
 8001a9c:	223f      	movs	r2, #63	; 0x3f
 8001a9e:	409a      	lsls	r2, r3
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	e0cd      	b.n	8001c42 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a3b      	ldr	r2, [pc, #236]	; (8001b98 <HAL_DMA_Init+0x42c>)
 8001aac:	4293      	cmp	r3, r2
 8001aae:	d022      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a39      	ldr	r2, [pc, #228]	; (8001b9c <HAL_DMA_Init+0x430>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d01d      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a38      	ldr	r2, [pc, #224]	; (8001ba0 <HAL_DMA_Init+0x434>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d018      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a36      	ldr	r2, [pc, #216]	; (8001ba4 <HAL_DMA_Init+0x438>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d013      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a35      	ldr	r2, [pc, #212]	; (8001ba8 <HAL_DMA_Init+0x43c>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d00e      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a33      	ldr	r2, [pc, #204]	; (8001bac <HAL_DMA_Init+0x440>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d009      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	4a32      	ldr	r2, [pc, #200]	; (8001bb0 <HAL_DMA_Init+0x444>)
 8001ae8:	4293      	cmp	r3, r2
 8001aea:	d004      	beq.n	8001af6 <HAL_DMA_Init+0x38a>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a30      	ldr	r2, [pc, #192]	; (8001bb4 <HAL_DMA_Init+0x448>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d101      	bne.n	8001afa <HAL_DMA_Init+0x38e>
 8001af6:	2301      	movs	r3, #1
 8001af8:	e000      	b.n	8001afc <HAL_DMA_Init+0x390>
 8001afa:	2300      	movs	r3, #0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	f000 8097 	beq.w	8001c30 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a24      	ldr	r2, [pc, #144]	; (8001b98 <HAL_DMA_Init+0x42c>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d021      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a22      	ldr	r2, [pc, #136]	; (8001b9c <HAL_DMA_Init+0x430>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d01c      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <HAL_DMA_Init+0x434>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d017      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	4a1f      	ldr	r2, [pc, #124]	; (8001ba4 <HAL_DMA_Init+0x438>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d012      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a1e      	ldr	r2, [pc, #120]	; (8001ba8 <HAL_DMA_Init+0x43c>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d00d      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a1c      	ldr	r2, [pc, #112]	; (8001bac <HAL_DMA_Init+0x440>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d008      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_DMA_Init+0x444>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d003      	beq.n	8001b50 <HAL_DMA_Init+0x3e4>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	; (8001bb4 <HAL_DMA_Init+0x448>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2202      	movs	r2, #2
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4b12      	ldr	r3, [pc, #72]	; (8001bb8 <HAL_DMA_Init+0x44c>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2b40      	cmp	r3, #64	; 0x40
 8001b78:	d020      	beq.n	8001bbc <HAL_DMA_Init+0x450>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b80      	cmp	r3, #128	; 0x80
 8001b80:	d102      	bne.n	8001b88 <HAL_DMA_Init+0x41c>
 8001b82:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001b86:	e01a      	b.n	8001bbe <HAL_DMA_Init+0x452>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	e018      	b.n	8001bbe <HAL_DMA_Init+0x452>
 8001b8c:	fe10803f 	.word	0xfe10803f
 8001b90:	5c001000 	.word	0x5c001000
 8001b94:	ffff0000 	.word	0xffff0000
 8001b98:	58025408 	.word	0x58025408
 8001b9c:	5802541c 	.word	0x5802541c
 8001ba0:	58025430 	.word	0x58025430
 8001ba4:	58025444 	.word	0x58025444
 8001ba8:	58025458 	.word	0x58025458
 8001bac:	5802546c 	.word	0x5802546c
 8001bb0:	58025480 	.word	0x58025480
 8001bb4:	58025494 	.word	0x58025494
 8001bb8:	fffe000f 	.word	0xfffe000f
 8001bbc:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	68d2      	ldr	r2, [r2, #12]
 8001bc2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bc4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8001bcc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8001bd4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8001bdc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	69db      	ldr	r3, [r3, #28]
 8001be2:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8001be4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8001bec:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8001bee:	697a      	ldr	r2, [r7, #20]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	697a      	ldr	r2, [r7, #20]
 8001bfa:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b6e      	ldr	r3, [pc, #440]	; (8001dbc <HAL_DMA_Init+0x650>)
 8001c04:	4413      	add	r3, r2
 8001c06:	4a6e      	ldr	r2, [pc, #440]	; (8001dc0 <HAL_DMA_Init+0x654>)
 8001c08:	fba2 2303 	umull	r2, r3, r2, r3
 8001c0c:	091b      	lsrs	r3, r3, #4
 8001c0e:	009a      	lsls	r2, r3, #2
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f001 fd93 	bl	8003740 <DMA_CalcBaseAndBitshift>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	2201      	movs	r2, #1
 8001c28:	409a      	lsls	r2, r3
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	605a      	str	r2, [r3, #4]
 8001c2e:	e008      	b.n	8001c42 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2240      	movs	r2, #64	; 0x40
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e0b7      	b.n	8001db2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a5f      	ldr	r2, [pc, #380]	; (8001dc4 <HAL_DMA_Init+0x658>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d072      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a5d      	ldr	r2, [pc, #372]	; (8001dc8 <HAL_DMA_Init+0x65c>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d06d      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a5c      	ldr	r2, [pc, #368]	; (8001dcc <HAL_DMA_Init+0x660>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d068      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a5a      	ldr	r2, [pc, #360]	; (8001dd0 <HAL_DMA_Init+0x664>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d063      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a59      	ldr	r2, [pc, #356]	; (8001dd4 <HAL_DMA_Init+0x668>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d05e      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a57      	ldr	r2, [pc, #348]	; (8001dd8 <HAL_DMA_Init+0x66c>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d059      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a56      	ldr	r2, [pc, #344]	; (8001ddc <HAL_DMA_Init+0x670>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d054      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	4a54      	ldr	r2, [pc, #336]	; (8001de0 <HAL_DMA_Init+0x674>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d04f      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a53      	ldr	r2, [pc, #332]	; (8001de4 <HAL_DMA_Init+0x678>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d04a      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a51      	ldr	r2, [pc, #324]	; (8001de8 <HAL_DMA_Init+0x67c>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d045      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4a50      	ldr	r2, [pc, #320]	; (8001dec <HAL_DMA_Init+0x680>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d040      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a4e      	ldr	r2, [pc, #312]	; (8001df0 <HAL_DMA_Init+0x684>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d03b      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a4d      	ldr	r2, [pc, #308]	; (8001df4 <HAL_DMA_Init+0x688>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d036      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a4b      	ldr	r2, [pc, #300]	; (8001df8 <HAL_DMA_Init+0x68c>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d031      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	4a4a      	ldr	r2, [pc, #296]	; (8001dfc <HAL_DMA_Init+0x690>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d02c      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a48      	ldr	r2, [pc, #288]	; (8001e00 <HAL_DMA_Init+0x694>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d027      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4a47      	ldr	r2, [pc, #284]	; (8001e04 <HAL_DMA_Init+0x698>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d022      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	4a45      	ldr	r2, [pc, #276]	; (8001e08 <HAL_DMA_Init+0x69c>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d01d      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a44      	ldr	r2, [pc, #272]	; (8001e0c <HAL_DMA_Init+0x6a0>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d018      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a42      	ldr	r2, [pc, #264]	; (8001e10 <HAL_DMA_Init+0x6a4>)
 8001d06:	4293      	cmp	r3, r2
 8001d08:	d013      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4a41      	ldr	r2, [pc, #260]	; (8001e14 <HAL_DMA_Init+0x6a8>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00e      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a3f      	ldr	r2, [pc, #252]	; (8001e18 <HAL_DMA_Init+0x6ac>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d009      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a3e      	ldr	r2, [pc, #248]	; (8001e1c <HAL_DMA_Init+0x6b0>)
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d004      	beq.n	8001d32 <HAL_DMA_Init+0x5c6>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a3c      	ldr	r2, [pc, #240]	; (8001e20 <HAL_DMA_Init+0x6b4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d101      	bne.n	8001d36 <HAL_DMA_Init+0x5ca>
 8001d32:	2301      	movs	r3, #1
 8001d34:	e000      	b.n	8001d38 <HAL_DMA_Init+0x5cc>
 8001d36:	2300      	movs	r3, #0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d032      	beq.n	8001da2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f001 fe2d 	bl	800399c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	2b80      	cmp	r3, #128	; 0x80
 8001d48:	d102      	bne.n	8001d50 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d58:	b2d2      	uxtb	r2, r2
 8001d5a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001d64:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d010      	beq.n	8001d90 <HAL_DMA_Init+0x624>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d80c      	bhi.n	8001d90 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f001 feaa 	bl	8003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001d8c:	605a      	str	r2, [r3, #4]
 8001d8e:	e008      	b.n	8001da2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2201      	movs	r2, #1
 8001dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	a7fdabf8 	.word	0xa7fdabf8
 8001dc0:	cccccccd 	.word	0xcccccccd
 8001dc4:	40020010 	.word	0x40020010
 8001dc8:	40020028 	.word	0x40020028
 8001dcc:	40020040 	.word	0x40020040
 8001dd0:	40020058 	.word	0x40020058
 8001dd4:	40020070 	.word	0x40020070
 8001dd8:	40020088 	.word	0x40020088
 8001ddc:	400200a0 	.word	0x400200a0
 8001de0:	400200b8 	.word	0x400200b8
 8001de4:	40020410 	.word	0x40020410
 8001de8:	40020428 	.word	0x40020428
 8001dec:	40020440 	.word	0x40020440
 8001df0:	40020458 	.word	0x40020458
 8001df4:	40020470 	.word	0x40020470
 8001df8:	40020488 	.word	0x40020488
 8001dfc:	400204a0 	.word	0x400204a0
 8001e00:	400204b8 	.word	0x400204b8
 8001e04:	58025408 	.word	0x58025408
 8001e08:	5802541c 	.word	0x5802541c
 8001e0c:	58025430 	.word	0x58025430
 8001e10:	58025444 	.word	0x58025444
 8001e14:	58025458 	.word	0x58025458
 8001e18:	5802546c 	.word	0x5802546c
 8001e1c:	58025480 	.word	0x58025480
 8001e20:	58025494 	.word	0x58025494

08001e24 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b086      	sub	sp, #24
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8001e2c:	f7ff fb3e 	bl	80014ac <HAL_GetTick>
 8001e30:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e2dc      	b.n	80023f6 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d008      	beq.n	8001e5a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2280      	movs	r2, #128	; 0x80
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e2cd      	b.n	80023f6 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a76      	ldr	r2, [pc, #472]	; (8002038 <HAL_DMA_Abort+0x214>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d04a      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a74      	ldr	r2, [pc, #464]	; (800203c <HAL_DMA_Abort+0x218>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d045      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a73      	ldr	r2, [pc, #460]	; (8002040 <HAL_DMA_Abort+0x21c>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d040      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a71      	ldr	r2, [pc, #452]	; (8002044 <HAL_DMA_Abort+0x220>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d03b      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a70      	ldr	r2, [pc, #448]	; (8002048 <HAL_DMA_Abort+0x224>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d036      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a6e      	ldr	r2, [pc, #440]	; (800204c <HAL_DMA_Abort+0x228>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d031      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a6d      	ldr	r2, [pc, #436]	; (8002050 <HAL_DMA_Abort+0x22c>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d02c      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a6b      	ldr	r2, [pc, #428]	; (8002054 <HAL_DMA_Abort+0x230>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d027      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a6a      	ldr	r2, [pc, #424]	; (8002058 <HAL_DMA_Abort+0x234>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d022      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a68      	ldr	r2, [pc, #416]	; (800205c <HAL_DMA_Abort+0x238>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d01d      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a67      	ldr	r2, [pc, #412]	; (8002060 <HAL_DMA_Abort+0x23c>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d018      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a65      	ldr	r2, [pc, #404]	; (8002064 <HAL_DMA_Abort+0x240>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d013      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a64      	ldr	r2, [pc, #400]	; (8002068 <HAL_DMA_Abort+0x244>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d00e      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a62      	ldr	r2, [pc, #392]	; (800206c <HAL_DMA_Abort+0x248>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a61      	ldr	r2, [pc, #388]	; (8002070 <HAL_DMA_Abort+0x24c>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d004      	beq.n	8001efa <HAL_DMA_Abort+0xd6>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a5f      	ldr	r2, [pc, #380]	; (8002074 <HAL_DMA_Abort+0x250>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d101      	bne.n	8001efe <HAL_DMA_Abort+0xda>
 8001efa:	2301      	movs	r3, #1
 8001efc:	e000      	b.n	8001f00 <HAL_DMA_Abort+0xdc>
 8001efe:	2300      	movs	r3, #0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 021e 	bic.w	r2, r2, #30
 8001f12:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f22:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	617b      	str	r3, [r7, #20]
 8001f2a:	e00a      	b.n	8001f42 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 020e 	bic.w	r2, r2, #14
 8001f3a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a3c      	ldr	r2, [pc, #240]	; (8002038 <HAL_DMA_Abort+0x214>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d072      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3a      	ldr	r2, [pc, #232]	; (800203c <HAL_DMA_Abort+0x218>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d06d      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a39      	ldr	r2, [pc, #228]	; (8002040 <HAL_DMA_Abort+0x21c>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d068      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a37      	ldr	r2, [pc, #220]	; (8002044 <HAL_DMA_Abort+0x220>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d063      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_DMA_Abort+0x224>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d05e      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a34      	ldr	r2, [pc, #208]	; (800204c <HAL_DMA_Abort+0x228>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d059      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a33      	ldr	r2, [pc, #204]	; (8002050 <HAL_DMA_Abort+0x22c>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d054      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a31      	ldr	r2, [pc, #196]	; (8002054 <HAL_DMA_Abort+0x230>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d04f      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a30      	ldr	r2, [pc, #192]	; (8002058 <HAL_DMA_Abort+0x234>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d04a      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	; (800205c <HAL_DMA_Abort+0x238>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d045      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a2d      	ldr	r2, [pc, #180]	; (8002060 <HAL_DMA_Abort+0x23c>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d040      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a2b      	ldr	r2, [pc, #172]	; (8002064 <HAL_DMA_Abort+0x240>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d03b      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4a2a      	ldr	r2, [pc, #168]	; (8002068 <HAL_DMA_Abort+0x244>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d036      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a28      	ldr	r2, [pc, #160]	; (800206c <HAL_DMA_Abort+0x248>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d031      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4a27      	ldr	r2, [pc, #156]	; (8002070 <HAL_DMA_Abort+0x24c>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d02c      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a25      	ldr	r2, [pc, #148]	; (8002074 <HAL_DMA_Abort+0x250>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d027      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	4a24      	ldr	r2, [pc, #144]	; (8002078 <HAL_DMA_Abort+0x254>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d022      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a22      	ldr	r2, [pc, #136]	; (800207c <HAL_DMA_Abort+0x258>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01d      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	4a21      	ldr	r2, [pc, #132]	; (8002080 <HAL_DMA_Abort+0x25c>)
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d018      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1f      	ldr	r2, [pc, #124]	; (8002084 <HAL_DMA_Abort+0x260>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d013      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a1e      	ldr	r2, [pc, #120]	; (8002088 <HAL_DMA_Abort+0x264>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a1c      	ldr	r2, [pc, #112]	; (800208c <HAL_DMA_Abort+0x268>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d009      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <HAL_DMA_Abort+0x26c>)
 8002024:	4293      	cmp	r3, r2
 8002026:	d004      	beq.n	8002032 <HAL_DMA_Abort+0x20e>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <HAL_DMA_Abort+0x270>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d132      	bne.n	8002098 <HAL_DMA_Abort+0x274>
 8002032:	2301      	movs	r3, #1
 8002034:	e031      	b.n	800209a <HAL_DMA_Abort+0x276>
 8002036:	bf00      	nop
 8002038:	40020010 	.word	0x40020010
 800203c:	40020028 	.word	0x40020028
 8002040:	40020040 	.word	0x40020040
 8002044:	40020058 	.word	0x40020058
 8002048:	40020070 	.word	0x40020070
 800204c:	40020088 	.word	0x40020088
 8002050:	400200a0 	.word	0x400200a0
 8002054:	400200b8 	.word	0x400200b8
 8002058:	40020410 	.word	0x40020410
 800205c:	40020428 	.word	0x40020428
 8002060:	40020440 	.word	0x40020440
 8002064:	40020458 	.word	0x40020458
 8002068:	40020470 	.word	0x40020470
 800206c:	40020488 	.word	0x40020488
 8002070:	400204a0 	.word	0x400204a0
 8002074:	400204b8 	.word	0x400204b8
 8002078:	58025408 	.word	0x58025408
 800207c:	5802541c 	.word	0x5802541c
 8002080:	58025430 	.word	0x58025430
 8002084:	58025444 	.word	0x58025444
 8002088:	58025458 	.word	0x58025458
 800208c:	5802546c 	.word	0x5802546c
 8002090:	58025480 	.word	0x58025480
 8002094:	58025494 	.word	0x58025494
 8002098:	2300      	movs	r3, #0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d007      	beq.n	80020ae <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80020ac:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4a6d      	ldr	r2, [pc, #436]	; (8002268 <HAL_DMA_Abort+0x444>)
 80020b4:	4293      	cmp	r3, r2
 80020b6:	d04a      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a6b      	ldr	r2, [pc, #428]	; (800226c <HAL_DMA_Abort+0x448>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d045      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4a6a      	ldr	r2, [pc, #424]	; (8002270 <HAL_DMA_Abort+0x44c>)
 80020c8:	4293      	cmp	r3, r2
 80020ca:	d040      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a68      	ldr	r2, [pc, #416]	; (8002274 <HAL_DMA_Abort+0x450>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d03b      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a67      	ldr	r2, [pc, #412]	; (8002278 <HAL_DMA_Abort+0x454>)
 80020dc:	4293      	cmp	r3, r2
 80020de:	d036      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a65      	ldr	r2, [pc, #404]	; (800227c <HAL_DMA_Abort+0x458>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d031      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a64      	ldr	r2, [pc, #400]	; (8002280 <HAL_DMA_Abort+0x45c>)
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d02c      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a62      	ldr	r2, [pc, #392]	; (8002284 <HAL_DMA_Abort+0x460>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d027      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a61      	ldr	r2, [pc, #388]	; (8002288 <HAL_DMA_Abort+0x464>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d022      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4a5f      	ldr	r2, [pc, #380]	; (800228c <HAL_DMA_Abort+0x468>)
 800210e:	4293      	cmp	r3, r2
 8002110:	d01d      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4a5e      	ldr	r2, [pc, #376]	; (8002290 <HAL_DMA_Abort+0x46c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d018      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a5c      	ldr	r2, [pc, #368]	; (8002294 <HAL_DMA_Abort+0x470>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d013      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a5b      	ldr	r2, [pc, #364]	; (8002298 <HAL_DMA_Abort+0x474>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d00e      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a59      	ldr	r2, [pc, #356]	; (800229c <HAL_DMA_Abort+0x478>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d009      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a58      	ldr	r2, [pc, #352]	; (80022a0 <HAL_DMA_Abort+0x47c>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d004      	beq.n	800214e <HAL_DMA_Abort+0x32a>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a56      	ldr	r2, [pc, #344]	; (80022a4 <HAL_DMA_Abort+0x480>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d108      	bne.n	8002160 <HAL_DMA_Abort+0x33c>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f022 0201 	bic.w	r2, r2, #1
 800215c:	601a      	str	r2, [r3, #0]
 800215e:	e007      	b.n	8002170 <HAL_DMA_Abort+0x34c>
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002170:	e013      	b.n	800219a <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002172:	f7ff f99b 	bl	80014ac <HAL_GetTick>
 8002176:	4602      	mov	r2, r0
 8002178:	693b      	ldr	r3, [r7, #16]
 800217a:	1ad3      	subs	r3, r2, r3
 800217c:	2b05      	cmp	r3, #5
 800217e:	d90c      	bls.n	800219a <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	2220      	movs	r2, #32
 8002184:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2203      	movs	r2, #3
 800218a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
 8002198:	e12d      	b.n	80023f6 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 0301 	and.w	r3, r3, #1
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d1e5      	bne.n	8002172 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <HAL_DMA_Abort+0x444>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d04a      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a2d      	ldr	r2, [pc, #180]	; (800226c <HAL_DMA_Abort+0x448>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d045      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	4a2c      	ldr	r2, [pc, #176]	; (8002270 <HAL_DMA_Abort+0x44c>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d040      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <HAL_DMA_Abort+0x450>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d03b      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a29      	ldr	r2, [pc, #164]	; (8002278 <HAL_DMA_Abort+0x454>)
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d036      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a27      	ldr	r2, [pc, #156]	; (800227c <HAL_DMA_Abort+0x458>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d031      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	4a26      	ldr	r2, [pc, #152]	; (8002280 <HAL_DMA_Abort+0x45c>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d02c      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	4a24      	ldr	r2, [pc, #144]	; (8002284 <HAL_DMA_Abort+0x460>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d027      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a23      	ldr	r2, [pc, #140]	; (8002288 <HAL_DMA_Abort+0x464>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a21      	ldr	r2, [pc, #132]	; (800228c <HAL_DMA_Abort+0x468>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01d      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4a20      	ldr	r2, [pc, #128]	; (8002290 <HAL_DMA_Abort+0x46c>)
 8002210:	4293      	cmp	r3, r2
 8002212:	d018      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a1e      	ldr	r2, [pc, #120]	; (8002294 <HAL_DMA_Abort+0x470>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d013      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a1d      	ldr	r2, [pc, #116]	; (8002298 <HAL_DMA_Abort+0x474>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d00e      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a1b      	ldr	r2, [pc, #108]	; (800229c <HAL_DMA_Abort+0x478>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d009      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a1a      	ldr	r2, [pc, #104]	; (80022a0 <HAL_DMA_Abort+0x47c>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d004      	beq.n	8002246 <HAL_DMA_Abort+0x422>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a18      	ldr	r2, [pc, #96]	; (80022a4 <HAL_DMA_Abort+0x480>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d101      	bne.n	800224a <HAL_DMA_Abort+0x426>
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_DMA_Abort+0x428>
 800224a:	2300      	movs	r3, #0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02b      	beq.n	80022a8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002254:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800225a:	f003 031f 	and.w	r3, r3, #31
 800225e:	223f      	movs	r2, #63	; 0x3f
 8002260:	409a      	lsls	r2, r3
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	609a      	str	r2, [r3, #8]
 8002266:	e02a      	b.n	80022be <HAL_DMA_Abort+0x49a>
 8002268:	40020010 	.word	0x40020010
 800226c:	40020028 	.word	0x40020028
 8002270:	40020040 	.word	0x40020040
 8002274:	40020058 	.word	0x40020058
 8002278:	40020070 	.word	0x40020070
 800227c:	40020088 	.word	0x40020088
 8002280:	400200a0 	.word	0x400200a0
 8002284:	400200b8 	.word	0x400200b8
 8002288:	40020410 	.word	0x40020410
 800228c:	40020428 	.word	0x40020428
 8002290:	40020440 	.word	0x40020440
 8002294:	40020458 	.word	0x40020458
 8002298:	40020470 	.word	0x40020470
 800229c:	40020488 	.word	0x40020488
 80022a0:	400204a0 	.word	0x400204a0
 80022a4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ac:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022b2:	f003 031f 	and.w	r3, r3, #31
 80022b6:	2201      	movs	r2, #1
 80022b8:	409a      	lsls	r2, r3
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a4f      	ldr	r2, [pc, #316]	; (8002400 <HAL_DMA_Abort+0x5dc>)
 80022c4:	4293      	cmp	r3, r2
 80022c6:	d072      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a4d      	ldr	r2, [pc, #308]	; (8002404 <HAL_DMA_Abort+0x5e0>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d06d      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	4a4c      	ldr	r2, [pc, #304]	; (8002408 <HAL_DMA_Abort+0x5e4>)
 80022d8:	4293      	cmp	r3, r2
 80022da:	d068      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_DMA_Abort+0x5e8>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d063      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a49      	ldr	r2, [pc, #292]	; (8002410 <HAL_DMA_Abort+0x5ec>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d05e      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a47      	ldr	r2, [pc, #284]	; (8002414 <HAL_DMA_Abort+0x5f0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d059      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a46      	ldr	r2, [pc, #280]	; (8002418 <HAL_DMA_Abort+0x5f4>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d054      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a44      	ldr	r2, [pc, #272]	; (800241c <HAL_DMA_Abort+0x5f8>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d04f      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a43      	ldr	r2, [pc, #268]	; (8002420 <HAL_DMA_Abort+0x5fc>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d04a      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a41      	ldr	r2, [pc, #260]	; (8002424 <HAL_DMA_Abort+0x600>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d045      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a40      	ldr	r2, [pc, #256]	; (8002428 <HAL_DMA_Abort+0x604>)
 8002328:	4293      	cmp	r3, r2
 800232a:	d040      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a3e      	ldr	r2, [pc, #248]	; (800242c <HAL_DMA_Abort+0x608>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d03b      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a3d      	ldr	r2, [pc, #244]	; (8002430 <HAL_DMA_Abort+0x60c>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d036      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a3b      	ldr	r2, [pc, #236]	; (8002434 <HAL_DMA_Abort+0x610>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d031      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a3a      	ldr	r2, [pc, #232]	; (8002438 <HAL_DMA_Abort+0x614>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d02c      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_DMA_Abort+0x618>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d027      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a37      	ldr	r2, [pc, #220]	; (8002440 <HAL_DMA_Abort+0x61c>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d022      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a35      	ldr	r2, [pc, #212]	; (8002444 <HAL_DMA_Abort+0x620>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d01d      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a34      	ldr	r2, [pc, #208]	; (8002448 <HAL_DMA_Abort+0x624>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d018      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a32      	ldr	r2, [pc, #200]	; (800244c <HAL_DMA_Abort+0x628>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d013      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a31      	ldr	r2, [pc, #196]	; (8002450 <HAL_DMA_Abort+0x62c>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d00e      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a2f      	ldr	r2, [pc, #188]	; (8002454 <HAL_DMA_Abort+0x630>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d009      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a2e      	ldr	r2, [pc, #184]	; (8002458 <HAL_DMA_Abort+0x634>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d004      	beq.n	80023ae <HAL_DMA_Abort+0x58a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a2c      	ldr	r2, [pc, #176]	; (800245c <HAL_DMA_Abort+0x638>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d101      	bne.n	80023b2 <HAL_DMA_Abort+0x58e>
 80023ae:	2301      	movs	r3, #1
 80023b0:	e000      	b.n	80023b4 <HAL_DMA_Abort+0x590>
 80023b2:	2300      	movs	r3, #0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d015      	beq.n	80023e4 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023c0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d00c      	beq.n	80023e4 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80023d8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023e2:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2200      	movs	r2, #0
 80023f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80023f4:	2300      	movs	r3, #0
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40020010 	.word	0x40020010
 8002404:	40020028 	.word	0x40020028
 8002408:	40020040 	.word	0x40020040
 800240c:	40020058 	.word	0x40020058
 8002410:	40020070 	.word	0x40020070
 8002414:	40020088 	.word	0x40020088
 8002418:	400200a0 	.word	0x400200a0
 800241c:	400200b8 	.word	0x400200b8
 8002420:	40020410 	.word	0x40020410
 8002424:	40020428 	.word	0x40020428
 8002428:	40020440 	.word	0x40020440
 800242c:	40020458 	.word	0x40020458
 8002430:	40020470 	.word	0x40020470
 8002434:	40020488 	.word	0x40020488
 8002438:	400204a0 	.word	0x400204a0
 800243c:	400204b8 	.word	0x400204b8
 8002440:	58025408 	.word	0x58025408
 8002444:	5802541c 	.word	0x5802541c
 8002448:	58025430 	.word	0x58025430
 800244c:	58025444 	.word	0x58025444
 8002450:	58025458 	.word	0x58025458
 8002454:	5802546c 	.word	0x5802546c
 8002458:	58025480 	.word	0x58025480
 800245c:	58025494 	.word	0x58025494

08002460 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e237      	b.n	80028e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002478:	b2db      	uxtb	r3, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d004      	beq.n	8002488 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2280      	movs	r2, #128	; 0x80
 8002482:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e22c      	b.n	80028e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4a5c      	ldr	r2, [pc, #368]	; (8002600 <HAL_DMA_Abort_IT+0x1a0>)
 800248e:	4293      	cmp	r3, r2
 8002490:	d04a      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a5b      	ldr	r2, [pc, #364]	; (8002604 <HAL_DMA_Abort_IT+0x1a4>)
 8002498:	4293      	cmp	r3, r2
 800249a:	d045      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a59      	ldr	r2, [pc, #356]	; (8002608 <HAL_DMA_Abort_IT+0x1a8>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d040      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	4a58      	ldr	r2, [pc, #352]	; (800260c <HAL_DMA_Abort_IT+0x1ac>)
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d03b      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a56      	ldr	r2, [pc, #344]	; (8002610 <HAL_DMA_Abort_IT+0x1b0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d036      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a55      	ldr	r2, [pc, #340]	; (8002614 <HAL_DMA_Abort_IT+0x1b4>)
 80024c0:	4293      	cmp	r3, r2
 80024c2:	d031      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a53      	ldr	r2, [pc, #332]	; (8002618 <HAL_DMA_Abort_IT+0x1b8>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d02c      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a52      	ldr	r2, [pc, #328]	; (800261c <HAL_DMA_Abort_IT+0x1bc>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d027      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4a50      	ldr	r2, [pc, #320]	; (8002620 <HAL_DMA_Abort_IT+0x1c0>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d022      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a4f      	ldr	r2, [pc, #316]	; (8002624 <HAL_DMA_Abort_IT+0x1c4>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d01d      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	4a4d      	ldr	r2, [pc, #308]	; (8002628 <HAL_DMA_Abort_IT+0x1c8>)
 80024f2:	4293      	cmp	r3, r2
 80024f4:	d018      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a4c      	ldr	r2, [pc, #304]	; (800262c <HAL_DMA_Abort_IT+0x1cc>)
 80024fc:	4293      	cmp	r3, r2
 80024fe:	d013      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	4a4a      	ldr	r2, [pc, #296]	; (8002630 <HAL_DMA_Abort_IT+0x1d0>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d00e      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a49      	ldr	r2, [pc, #292]	; (8002634 <HAL_DMA_Abort_IT+0x1d4>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d009      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a47      	ldr	r2, [pc, #284]	; (8002638 <HAL_DMA_Abort_IT+0x1d8>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d004      	beq.n	8002528 <HAL_DMA_Abort_IT+0xc8>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a46      	ldr	r2, [pc, #280]	; (800263c <HAL_DMA_Abort_IT+0x1dc>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d101      	bne.n	800252c <HAL_DMA_Abort_IT+0xcc>
 8002528:	2301      	movs	r3, #1
 800252a:	e000      	b.n	800252e <HAL_DMA_Abort_IT+0xce>
 800252c:	2300      	movs	r3, #0
 800252e:	2b00      	cmp	r3, #0
 8002530:	f000 8086 	beq.w	8002640 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2204      	movs	r2, #4
 8002538:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a2f      	ldr	r2, [pc, #188]	; (8002600 <HAL_DMA_Abort_IT+0x1a0>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d04a      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a2e      	ldr	r2, [pc, #184]	; (8002604 <HAL_DMA_Abort_IT+0x1a4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d045      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a2c      	ldr	r2, [pc, #176]	; (8002608 <HAL_DMA_Abort_IT+0x1a8>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d040      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a2b      	ldr	r2, [pc, #172]	; (800260c <HAL_DMA_Abort_IT+0x1ac>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d03b      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a29      	ldr	r2, [pc, #164]	; (8002610 <HAL_DMA_Abort_IT+0x1b0>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d036      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a28      	ldr	r2, [pc, #160]	; (8002614 <HAL_DMA_Abort_IT+0x1b4>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d031      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_DMA_Abort_IT+0x1b8>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d02c      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4a25      	ldr	r2, [pc, #148]	; (800261c <HAL_DMA_Abort_IT+0x1bc>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d027      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a23      	ldr	r2, [pc, #140]	; (8002620 <HAL_DMA_Abort_IT+0x1c0>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d022      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a22      	ldr	r2, [pc, #136]	; (8002624 <HAL_DMA_Abort_IT+0x1c4>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d01d      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a20      	ldr	r2, [pc, #128]	; (8002628 <HAL_DMA_Abort_IT+0x1c8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d018      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a1f      	ldr	r2, [pc, #124]	; (800262c <HAL_DMA_Abort_IT+0x1cc>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d013      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a1d      	ldr	r2, [pc, #116]	; (8002630 <HAL_DMA_Abort_IT+0x1d0>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d00e      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a1c      	ldr	r2, [pc, #112]	; (8002634 <HAL_DMA_Abort_IT+0x1d4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d009      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a1a      	ldr	r2, [pc, #104]	; (8002638 <HAL_DMA_Abort_IT+0x1d8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d004      	beq.n	80025dc <HAL_DMA_Abort_IT+0x17c>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a19      	ldr	r2, [pc, #100]	; (800263c <HAL_DMA_Abort_IT+0x1dc>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d108      	bne.n	80025ee <HAL_DMA_Abort_IT+0x18e>
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f022 0201 	bic.w	r2, r2, #1
 80025ea:	601a      	str	r2, [r3, #0]
 80025ec:	e178      	b.n	80028e0 <HAL_DMA_Abort_IT+0x480>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
 80025fe:	e16f      	b.n	80028e0 <HAL_DMA_Abort_IT+0x480>
 8002600:	40020010 	.word	0x40020010
 8002604:	40020028 	.word	0x40020028
 8002608:	40020040 	.word	0x40020040
 800260c:	40020058 	.word	0x40020058
 8002610:	40020070 	.word	0x40020070
 8002614:	40020088 	.word	0x40020088
 8002618:	400200a0 	.word	0x400200a0
 800261c:	400200b8 	.word	0x400200b8
 8002620:	40020410 	.word	0x40020410
 8002624:	40020428 	.word	0x40020428
 8002628:	40020440 	.word	0x40020440
 800262c:	40020458 	.word	0x40020458
 8002630:	40020470 	.word	0x40020470
 8002634:	40020488 	.word	0x40020488
 8002638:	400204a0 	.word	0x400204a0
 800263c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 020e 	bic.w	r2, r2, #14
 800264e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a6c      	ldr	r2, [pc, #432]	; (8002808 <HAL_DMA_Abort_IT+0x3a8>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d04a      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a6b      	ldr	r2, [pc, #428]	; (800280c <HAL_DMA_Abort_IT+0x3ac>)
 8002660:	4293      	cmp	r3, r2
 8002662:	d045      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_DMA_Abort_IT+0x3b0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d040      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a68      	ldr	r2, [pc, #416]	; (8002814 <HAL_DMA_Abort_IT+0x3b4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d03b      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a66      	ldr	r2, [pc, #408]	; (8002818 <HAL_DMA_Abort_IT+0x3b8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d036      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a65      	ldr	r2, [pc, #404]	; (800281c <HAL_DMA_Abort_IT+0x3bc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d031      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a63      	ldr	r2, [pc, #396]	; (8002820 <HAL_DMA_Abort_IT+0x3c0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d02c      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a62      	ldr	r2, [pc, #392]	; (8002824 <HAL_DMA_Abort_IT+0x3c4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d027      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a60      	ldr	r2, [pc, #384]	; (8002828 <HAL_DMA_Abort_IT+0x3c8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d022      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a5f      	ldr	r2, [pc, #380]	; (800282c <HAL_DMA_Abort_IT+0x3cc>)
 80026b0:	4293      	cmp	r3, r2
 80026b2:	d01d      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a5d      	ldr	r2, [pc, #372]	; (8002830 <HAL_DMA_Abort_IT+0x3d0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d018      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a5c      	ldr	r2, [pc, #368]	; (8002834 <HAL_DMA_Abort_IT+0x3d4>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d013      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <HAL_DMA_Abort_IT+0x3d8>)
 80026ce:	4293      	cmp	r3, r2
 80026d0:	d00e      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4a59      	ldr	r2, [pc, #356]	; (800283c <HAL_DMA_Abort_IT+0x3dc>)
 80026d8:	4293      	cmp	r3, r2
 80026da:	d009      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a57      	ldr	r2, [pc, #348]	; (8002840 <HAL_DMA_Abort_IT+0x3e0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d004      	beq.n	80026f0 <HAL_DMA_Abort_IT+0x290>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a56      	ldr	r2, [pc, #344]	; (8002844 <HAL_DMA_Abort_IT+0x3e4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d108      	bne.n	8002702 <HAL_DMA_Abort_IT+0x2a2>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0201 	bic.w	r2, r2, #1
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e007      	b.n	8002712 <HAL_DMA_Abort_IT+0x2b2>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f022 0201 	bic.w	r2, r2, #1
 8002710:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a3c      	ldr	r2, [pc, #240]	; (8002808 <HAL_DMA_Abort_IT+0x3a8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d072      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a3a      	ldr	r2, [pc, #232]	; (800280c <HAL_DMA_Abort_IT+0x3ac>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d06d      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a39      	ldr	r2, [pc, #228]	; (8002810 <HAL_DMA_Abort_IT+0x3b0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d068      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a37      	ldr	r2, [pc, #220]	; (8002814 <HAL_DMA_Abort_IT+0x3b4>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d063      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a36      	ldr	r2, [pc, #216]	; (8002818 <HAL_DMA_Abort_IT+0x3b8>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05e      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a34      	ldr	r2, [pc, #208]	; (800281c <HAL_DMA_Abort_IT+0x3bc>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d059      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a33      	ldr	r2, [pc, #204]	; (8002820 <HAL_DMA_Abort_IT+0x3c0>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d054      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a31      	ldr	r2, [pc, #196]	; (8002824 <HAL_DMA_Abort_IT+0x3c4>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d04f      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a30      	ldr	r2, [pc, #192]	; (8002828 <HAL_DMA_Abort_IT+0x3c8>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d04a      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a2e      	ldr	r2, [pc, #184]	; (800282c <HAL_DMA_Abort_IT+0x3cc>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d045      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a2d      	ldr	r2, [pc, #180]	; (8002830 <HAL_DMA_Abort_IT+0x3d0>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d040      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a2b      	ldr	r2, [pc, #172]	; (8002834 <HAL_DMA_Abort_IT+0x3d4>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d03b      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a2a      	ldr	r2, [pc, #168]	; (8002838 <HAL_DMA_Abort_IT+0x3d8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d036      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a28      	ldr	r2, [pc, #160]	; (800283c <HAL_DMA_Abort_IT+0x3dc>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d031      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a27      	ldr	r2, [pc, #156]	; (8002840 <HAL_DMA_Abort_IT+0x3e0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d02c      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a25      	ldr	r2, [pc, #148]	; (8002844 <HAL_DMA_Abort_IT+0x3e4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d027      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a24      	ldr	r2, [pc, #144]	; (8002848 <HAL_DMA_Abort_IT+0x3e8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d022      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a22      	ldr	r2, [pc, #136]	; (800284c <HAL_DMA_Abort_IT+0x3ec>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a21      	ldr	r2, [pc, #132]	; (8002850 <HAL_DMA_Abort_IT+0x3f0>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d018      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a1f      	ldr	r2, [pc, #124]	; (8002854 <HAL_DMA_Abort_IT+0x3f4>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d013      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a1e      	ldr	r2, [pc, #120]	; (8002858 <HAL_DMA_Abort_IT+0x3f8>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00e      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <HAL_DMA_Abort_IT+0x3fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d009      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a1b      	ldr	r2, [pc, #108]	; (8002860 <HAL_DMA_Abort_IT+0x400>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d004      	beq.n	8002802 <HAL_DMA_Abort_IT+0x3a2>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a19      	ldr	r2, [pc, #100]	; (8002864 <HAL_DMA_Abort_IT+0x404>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d132      	bne.n	8002868 <HAL_DMA_Abort_IT+0x408>
 8002802:	2301      	movs	r3, #1
 8002804:	e031      	b.n	800286a <HAL_DMA_Abort_IT+0x40a>
 8002806:	bf00      	nop
 8002808:	40020010 	.word	0x40020010
 800280c:	40020028 	.word	0x40020028
 8002810:	40020040 	.word	0x40020040
 8002814:	40020058 	.word	0x40020058
 8002818:	40020070 	.word	0x40020070
 800281c:	40020088 	.word	0x40020088
 8002820:	400200a0 	.word	0x400200a0
 8002824:	400200b8 	.word	0x400200b8
 8002828:	40020410 	.word	0x40020410
 800282c:	40020428 	.word	0x40020428
 8002830:	40020440 	.word	0x40020440
 8002834:	40020458 	.word	0x40020458
 8002838:	40020470 	.word	0x40020470
 800283c:	40020488 	.word	0x40020488
 8002840:	400204a0 	.word	0x400204a0
 8002844:	400204b8 	.word	0x400204b8
 8002848:	58025408 	.word	0x58025408
 800284c:	5802541c 	.word	0x5802541c
 8002850:	58025430 	.word	0x58025430
 8002854:	58025444 	.word	0x58025444
 8002858:	58025458 	.word	0x58025458
 800285c:	5802546c 	.word	0x5802546c
 8002860:	58025480 	.word	0x58025480
 8002864:	58025494 	.word	0x58025494
 8002868:	2300      	movs	r3, #0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d028      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002872:	681a      	ldr	r2, [r3, #0]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800287c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002882:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002888:	f003 031f 	and.w	r3, r3, #31
 800288c:	2201      	movs	r2, #1
 800288e:	409a      	lsls	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002898:	687a      	ldr	r2, [r7, #4]
 800289a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800289c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00c      	beq.n	80028c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80028be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d003      	beq.n	80028e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80028e0:	2300      	movs	r3, #0
}
 80028e2:	4618      	mov	r0, r3
 80028e4:	3710      	adds	r7, #16
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop

080028ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b08a      	sub	sp, #40	; 0x28
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80028f4:	2300      	movs	r3, #0
 80028f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80028f8:	4b67      	ldr	r3, [pc, #412]	; (8002a98 <HAL_DMA_IRQHandler+0x1ac>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a67      	ldr	r2, [pc, #412]	; (8002a9c <HAL_DMA_IRQHandler+0x1b0>)
 80028fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002902:	0a9b      	lsrs	r3, r3, #10
 8002904:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800290a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002910:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8002912:	6a3b      	ldr	r3, [r7, #32]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8002918:	69fb      	ldr	r3, [r7, #28]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	4a5f      	ldr	r2, [pc, #380]	; (8002aa0 <HAL_DMA_IRQHandler+0x1b4>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d04a      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a5d      	ldr	r2, [pc, #372]	; (8002aa4 <HAL_DMA_IRQHandler+0x1b8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d045      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a5c      	ldr	r2, [pc, #368]	; (8002aa8 <HAL_DMA_IRQHandler+0x1bc>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d040      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	4a5a      	ldr	r2, [pc, #360]	; (8002aac <HAL_DMA_IRQHandler+0x1c0>)
 8002942:	4293      	cmp	r3, r2
 8002944:	d03b      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a59      	ldr	r2, [pc, #356]	; (8002ab0 <HAL_DMA_IRQHandler+0x1c4>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d036      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a57      	ldr	r2, [pc, #348]	; (8002ab4 <HAL_DMA_IRQHandler+0x1c8>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d031      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a56      	ldr	r2, [pc, #344]	; (8002ab8 <HAL_DMA_IRQHandler+0x1cc>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d02c      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a54      	ldr	r2, [pc, #336]	; (8002abc <HAL_DMA_IRQHandler+0x1d0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d027      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a53      	ldr	r2, [pc, #332]	; (8002ac0 <HAL_DMA_IRQHandler+0x1d4>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d022      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a51      	ldr	r2, [pc, #324]	; (8002ac4 <HAL_DMA_IRQHandler+0x1d8>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d01d      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a50      	ldr	r2, [pc, #320]	; (8002ac8 <HAL_DMA_IRQHandler+0x1dc>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d018      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a4e      	ldr	r2, [pc, #312]	; (8002acc <HAL_DMA_IRQHandler+0x1e0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d013      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a4d      	ldr	r2, [pc, #308]	; (8002ad0 <HAL_DMA_IRQHandler+0x1e4>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d00e      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a4b      	ldr	r2, [pc, #300]	; (8002ad4 <HAL_DMA_IRQHandler+0x1e8>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d009      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a4a      	ldr	r2, [pc, #296]	; (8002ad8 <HAL_DMA_IRQHandler+0x1ec>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d004      	beq.n	80029be <HAL_DMA_IRQHandler+0xd2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a48      	ldr	r2, [pc, #288]	; (8002adc <HAL_DMA_IRQHandler+0x1f0>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d101      	bne.n	80029c2 <HAL_DMA_IRQHandler+0xd6>
 80029be:	2301      	movs	r3, #1
 80029c0:	e000      	b.n	80029c4 <HAL_DMA_IRQHandler+0xd8>
 80029c2:	2300      	movs	r3, #0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 842b 	beq.w	8003220 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	f003 031f 	and.w	r3, r3, #31
 80029d2:	2208      	movs	r2, #8
 80029d4:	409a      	lsls	r2, r3
 80029d6:	69bb      	ldr	r3, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f000 80a2 	beq.w	8002b24 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a2e      	ldr	r2, [pc, #184]	; (8002aa0 <HAL_DMA_IRQHandler+0x1b4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d04a      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a2d      	ldr	r2, [pc, #180]	; (8002aa4 <HAL_DMA_IRQHandler+0x1b8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d045      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a2b      	ldr	r2, [pc, #172]	; (8002aa8 <HAL_DMA_IRQHandler+0x1bc>)
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d040      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a2a      	ldr	r2, [pc, #168]	; (8002aac <HAL_DMA_IRQHandler+0x1c0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d03b      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <HAL_DMA_IRQHandler+0x1c4>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d036      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <HAL_DMA_IRQHandler+0x1c8>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d031      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a25      	ldr	r2, [pc, #148]	; (8002ab8 <HAL_DMA_IRQHandler+0x1cc>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d02c      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a24      	ldr	r2, [pc, #144]	; (8002abc <HAL_DMA_IRQHandler+0x1d0>)
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d027      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <HAL_DMA_IRQHandler+0x1d4>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d022      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <HAL_DMA_IRQHandler+0x1d8>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d01d      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <HAL_DMA_IRQHandler+0x1dc>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d018      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a1e      	ldr	r2, [pc, #120]	; (8002acc <HAL_DMA_IRQHandler+0x1e0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a1c      	ldr	r2, [pc, #112]	; (8002ad0 <HAL_DMA_IRQHandler+0x1e4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00e      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a1b      	ldr	r2, [pc, #108]	; (8002ad4 <HAL_DMA_IRQHandler+0x1e8>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d009      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_DMA_IRQHandler+0x1ec>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_DMA_IRQHandler+0x194>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a18      	ldr	r2, [pc, #96]	; (8002adc <HAL_DMA_IRQHandler+0x1f0>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d12f      	bne.n	8002ae0 <HAL_DMA_IRQHandler+0x1f4>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0304 	and.w	r3, r3, #4
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	bf14      	ite	ne
 8002a8e:	2301      	movne	r3, #1
 8002a90:	2300      	moveq	r3, #0
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	e02e      	b.n	8002af4 <HAL_DMA_IRQHandler+0x208>
 8002a96:	bf00      	nop
 8002a98:	24000000 	.word	0x24000000
 8002a9c:	1b4e81b5 	.word	0x1b4e81b5
 8002aa0:	40020010 	.word	0x40020010
 8002aa4:	40020028 	.word	0x40020028
 8002aa8:	40020040 	.word	0x40020040
 8002aac:	40020058 	.word	0x40020058
 8002ab0:	40020070 	.word	0x40020070
 8002ab4:	40020088 	.word	0x40020088
 8002ab8:	400200a0 	.word	0x400200a0
 8002abc:	400200b8 	.word	0x400200b8
 8002ac0:	40020410 	.word	0x40020410
 8002ac4:	40020428 	.word	0x40020428
 8002ac8:	40020440 	.word	0x40020440
 8002acc:	40020458 	.word	0x40020458
 8002ad0:	40020470 	.word	0x40020470
 8002ad4:	40020488 	.word	0x40020488
 8002ad8:	400204a0 	.word	0x400204a0
 8002adc:	400204b8 	.word	0x400204b8
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0308 	and.w	r3, r3, #8
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	bf14      	ite	ne
 8002aee:	2301      	movne	r3, #1
 8002af0:	2300      	moveq	r3, #0
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f022 0204 	bic.w	r2, r2, #4
 8002b06:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b0c:	f003 031f 	and.w	r3, r3, #31
 8002b10:	2208      	movs	r2, #8
 8002b12:	409a      	lsls	r2, r3
 8002b14:	6a3b      	ldr	r3, [r7, #32]
 8002b16:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b1c:	f043 0201 	orr.w	r2, r3, #1
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b28:	f003 031f 	and.w	r3, r3, #31
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b32:	f003 0301 	and.w	r3, r3, #1
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d06e      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a69      	ldr	r2, [pc, #420]	; (8002ce4 <HAL_DMA_IRQHandler+0x3f8>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d04a      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a67      	ldr	r2, [pc, #412]	; (8002ce8 <HAL_DMA_IRQHandler+0x3fc>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d045      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a66      	ldr	r2, [pc, #408]	; (8002cec <HAL_DMA_IRQHandler+0x400>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d040      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a64      	ldr	r2, [pc, #400]	; (8002cf0 <HAL_DMA_IRQHandler+0x404>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d03b      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a63      	ldr	r2, [pc, #396]	; (8002cf4 <HAL_DMA_IRQHandler+0x408>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d036      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a61      	ldr	r2, [pc, #388]	; (8002cf8 <HAL_DMA_IRQHandler+0x40c>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d031      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a60      	ldr	r2, [pc, #384]	; (8002cfc <HAL_DMA_IRQHandler+0x410>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d02c      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a5e      	ldr	r2, [pc, #376]	; (8002d00 <HAL_DMA_IRQHandler+0x414>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d027      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a5d      	ldr	r2, [pc, #372]	; (8002d04 <HAL_DMA_IRQHandler+0x418>)
 8002b90:	4293      	cmp	r3, r2
 8002b92:	d022      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a5b      	ldr	r2, [pc, #364]	; (8002d08 <HAL_DMA_IRQHandler+0x41c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01d      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a5a      	ldr	r2, [pc, #360]	; (8002d0c <HAL_DMA_IRQHandler+0x420>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d018      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a58      	ldr	r2, [pc, #352]	; (8002d10 <HAL_DMA_IRQHandler+0x424>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d013      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a57      	ldr	r2, [pc, #348]	; (8002d14 <HAL_DMA_IRQHandler+0x428>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d00e      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a55      	ldr	r2, [pc, #340]	; (8002d18 <HAL_DMA_IRQHandler+0x42c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d009      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a54      	ldr	r2, [pc, #336]	; (8002d1c <HAL_DMA_IRQHandler+0x430>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_DMA_IRQHandler+0x2ee>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a52      	ldr	r2, [pc, #328]	; (8002d20 <HAL_DMA_IRQHandler+0x434>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d10a      	bne.n	8002bf0 <HAL_DMA_IRQHandler+0x304>
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	e003      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x30c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00d      	beq.n	8002c18 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c00:	f003 031f 	and.w	r3, r3, #31
 8002c04:	2201      	movs	r2, #1
 8002c06:	409a      	lsls	r2, r3
 8002c08:	6a3b      	ldr	r3, [r7, #32]
 8002c0a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c10:	f043 0202 	orr.w	r2, r3, #2
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	f003 031f 	and.w	r3, r3, #31
 8002c20:	2204      	movs	r2, #4
 8002c22:	409a      	lsls	r2, r3
 8002c24:	69bb      	ldr	r3, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f000 808f 	beq.w	8002d4c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a2c      	ldr	r2, [pc, #176]	; (8002ce4 <HAL_DMA_IRQHandler+0x3f8>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d04a      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a2a      	ldr	r2, [pc, #168]	; (8002ce8 <HAL_DMA_IRQHandler+0x3fc>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d045      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a29      	ldr	r2, [pc, #164]	; (8002cec <HAL_DMA_IRQHandler+0x400>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d040      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a27      	ldr	r2, [pc, #156]	; (8002cf0 <HAL_DMA_IRQHandler+0x404>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d03b      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a26      	ldr	r2, [pc, #152]	; (8002cf4 <HAL_DMA_IRQHandler+0x408>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d036      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a24      	ldr	r2, [pc, #144]	; (8002cf8 <HAL_DMA_IRQHandler+0x40c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d031      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a23      	ldr	r2, [pc, #140]	; (8002cfc <HAL_DMA_IRQHandler+0x410>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d02c      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <HAL_DMA_IRQHandler+0x414>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d027      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a20      	ldr	r2, [pc, #128]	; (8002d04 <HAL_DMA_IRQHandler+0x418>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d022      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a1e      	ldr	r2, [pc, #120]	; (8002d08 <HAL_DMA_IRQHandler+0x41c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d01d      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	4a1d      	ldr	r2, [pc, #116]	; (8002d0c <HAL_DMA_IRQHandler+0x420>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d018      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a1b      	ldr	r2, [pc, #108]	; (8002d10 <HAL_DMA_IRQHandler+0x424>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d013      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4a1a      	ldr	r2, [pc, #104]	; (8002d14 <HAL_DMA_IRQHandler+0x428>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d00e      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4a18      	ldr	r2, [pc, #96]	; (8002d18 <HAL_DMA_IRQHandler+0x42c>)
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4a17      	ldr	r2, [pc, #92]	; (8002d1c <HAL_DMA_IRQHandler+0x430>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d004      	beq.n	8002cce <HAL_DMA_IRQHandler+0x3e2>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a15      	ldr	r2, [pc, #84]	; (8002d20 <HAL_DMA_IRQHandler+0x434>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d12a      	bne.n	8002d24 <HAL_DMA_IRQHandler+0x438>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0302 	and.w	r3, r3, #2
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	bf14      	ite	ne
 8002cdc:	2301      	movne	r3, #1
 8002cde:	2300      	moveq	r3, #0
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	e023      	b.n	8002d2c <HAL_DMA_IRQHandler+0x440>
 8002ce4:	40020010 	.word	0x40020010
 8002ce8:	40020028 	.word	0x40020028
 8002cec:	40020040 	.word	0x40020040
 8002cf0:	40020058 	.word	0x40020058
 8002cf4:	40020070 	.word	0x40020070
 8002cf8:	40020088 	.word	0x40020088
 8002cfc:	400200a0 	.word	0x400200a0
 8002d00:	400200b8 	.word	0x400200b8
 8002d04:	40020410 	.word	0x40020410
 8002d08:	40020428 	.word	0x40020428
 8002d0c:	40020440 	.word	0x40020440
 8002d10:	40020458 	.word	0x40020458
 8002d14:	40020470 	.word	0x40020470
 8002d18:	40020488 	.word	0x40020488
 8002d1c:	400204a0 	.word	0x400204a0
 8002d20:	400204b8 	.word	0x400204b8
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00d      	beq.n	8002d4c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2204      	movs	r2, #4
 8002d3a:	409a      	lsls	r2, r3
 8002d3c:	6a3b      	ldr	r3, [r7, #32]
 8002d3e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d50:	f003 031f 	and.w	r3, r3, #31
 8002d54:	2210      	movs	r2, #16
 8002d56:	409a      	lsls	r2, r3
 8002d58:	69bb      	ldr	r3, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f000 80a6 	beq.w	8002eae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a85      	ldr	r2, [pc, #532]	; (8002f7c <HAL_DMA_IRQHandler+0x690>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d04a      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a83      	ldr	r2, [pc, #524]	; (8002f80 <HAL_DMA_IRQHandler+0x694>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d045      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a82      	ldr	r2, [pc, #520]	; (8002f84 <HAL_DMA_IRQHandler+0x698>)
 8002d7c:	4293      	cmp	r3, r2
 8002d7e:	d040      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	4a80      	ldr	r2, [pc, #512]	; (8002f88 <HAL_DMA_IRQHandler+0x69c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d03b      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a7f      	ldr	r2, [pc, #508]	; (8002f8c <HAL_DMA_IRQHandler+0x6a0>)
 8002d90:	4293      	cmp	r3, r2
 8002d92:	d036      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a7d      	ldr	r2, [pc, #500]	; (8002f90 <HAL_DMA_IRQHandler+0x6a4>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d031      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	4a7c      	ldr	r2, [pc, #496]	; (8002f94 <HAL_DMA_IRQHandler+0x6a8>)
 8002da4:	4293      	cmp	r3, r2
 8002da6:	d02c      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a7a      	ldr	r2, [pc, #488]	; (8002f98 <HAL_DMA_IRQHandler+0x6ac>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d027      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4a79      	ldr	r2, [pc, #484]	; (8002f9c <HAL_DMA_IRQHandler+0x6b0>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d022      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a77      	ldr	r2, [pc, #476]	; (8002fa0 <HAL_DMA_IRQHandler+0x6b4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d01d      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a76      	ldr	r2, [pc, #472]	; (8002fa4 <HAL_DMA_IRQHandler+0x6b8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d018      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a74      	ldr	r2, [pc, #464]	; (8002fa8 <HAL_DMA_IRQHandler+0x6bc>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d013      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a73      	ldr	r2, [pc, #460]	; (8002fac <HAL_DMA_IRQHandler+0x6c0>)
 8002de0:	4293      	cmp	r3, r2
 8002de2:	d00e      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a71      	ldr	r2, [pc, #452]	; (8002fb0 <HAL_DMA_IRQHandler+0x6c4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d009      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a70      	ldr	r2, [pc, #448]	; (8002fb4 <HAL_DMA_IRQHandler+0x6c8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d004      	beq.n	8002e02 <HAL_DMA_IRQHandler+0x516>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4a6e      	ldr	r2, [pc, #440]	; (8002fb8 <HAL_DMA_IRQHandler+0x6cc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d10a      	bne.n	8002e18 <HAL_DMA_IRQHandler+0x52c>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0308 	and.w	r3, r3, #8
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e009      	b.n	8002e2c <HAL_DMA_IRQHandler+0x540>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0304 	and.w	r3, r3, #4
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	bf14      	ite	ne
 8002e26:	2301      	movne	r3, #1
 8002e28:	2300      	moveq	r3, #0
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d03e      	beq.n	8002eae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	2210      	movs	r2, #16
 8002e3a:	409a      	lsls	r2, r3
 8002e3c:	6a3b      	ldr	r3, [r7, #32]
 8002e3e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d108      	bne.n	8002e6e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d024      	beq.n	8002eae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e68:	6878      	ldr	r0, [r7, #4]
 8002e6a:	4798      	blx	r3
 8002e6c:	e01f      	b.n	8002eae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d01b      	beq.n	8002eae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
 8002e7e:	e016      	b.n	8002eae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d107      	bne.n	8002e9e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 0208 	bic.w	r2, r2, #8
 8002e9c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eaa:	6878      	ldr	r0, [r7, #4]
 8002eac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	f003 031f 	and.w	r3, r3, #31
 8002eb6:	2220      	movs	r2, #32
 8002eb8:	409a      	lsls	r2, r3
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8110 	beq.w	80030e4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <HAL_DMA_IRQHandler+0x690>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d04a      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a2b      	ldr	r2, [pc, #172]	; (8002f80 <HAL_DMA_IRQHandler+0x694>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d045      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a29      	ldr	r2, [pc, #164]	; (8002f84 <HAL_DMA_IRQHandler+0x698>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d040      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a28      	ldr	r2, [pc, #160]	; (8002f88 <HAL_DMA_IRQHandler+0x69c>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03b      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a26      	ldr	r2, [pc, #152]	; (8002f8c <HAL_DMA_IRQHandler+0x6a0>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d036      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a25      	ldr	r2, [pc, #148]	; (8002f90 <HAL_DMA_IRQHandler+0x6a4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d031      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a23      	ldr	r2, [pc, #140]	; (8002f94 <HAL_DMA_IRQHandler+0x6a8>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d02c      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a22      	ldr	r2, [pc, #136]	; (8002f98 <HAL_DMA_IRQHandler+0x6ac>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d027      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a20      	ldr	r2, [pc, #128]	; (8002f9c <HAL_DMA_IRQHandler+0x6b0>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d022      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <HAL_DMA_IRQHandler+0x6b4>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d01d      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1d      	ldr	r2, [pc, #116]	; (8002fa4 <HAL_DMA_IRQHandler+0x6b8>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d018      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1c      	ldr	r2, [pc, #112]	; (8002fa8 <HAL_DMA_IRQHandler+0x6bc>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d013      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1a      	ldr	r2, [pc, #104]	; (8002fac <HAL_DMA_IRQHandler+0x6c0>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_DMA_IRQHandler+0x6c4>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a17      	ldr	r2, [pc, #92]	; (8002fb4 <HAL_DMA_IRQHandler+0x6c8>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_DMA_IRQHandler+0x678>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a16      	ldr	r2, [pc, #88]	; (8002fb8 <HAL_DMA_IRQHandler+0x6cc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d12b      	bne.n	8002fbc <HAL_DMA_IRQHandler+0x6d0>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f003 0310 	and.w	r3, r3, #16
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bf14      	ite	ne
 8002f72:	2301      	movne	r3, #1
 8002f74:	2300      	moveq	r3, #0
 8002f76:	b2db      	uxtb	r3, r3
 8002f78:	e02a      	b.n	8002fd0 <HAL_DMA_IRQHandler+0x6e4>
 8002f7a:	bf00      	nop
 8002f7c:	40020010 	.word	0x40020010
 8002f80:	40020028 	.word	0x40020028
 8002f84:	40020040 	.word	0x40020040
 8002f88:	40020058 	.word	0x40020058
 8002f8c:	40020070 	.word	0x40020070
 8002f90:	40020088 	.word	0x40020088
 8002f94:	400200a0 	.word	0x400200a0
 8002f98:	400200b8 	.word	0x400200b8
 8002f9c:	40020410 	.word	0x40020410
 8002fa0:	40020428 	.word	0x40020428
 8002fa4:	40020440 	.word	0x40020440
 8002fa8:	40020458 	.word	0x40020458
 8002fac:	40020470 	.word	0x40020470
 8002fb0:	40020488 	.word	0x40020488
 8002fb4:	400204a0 	.word	0x400204a0
 8002fb8:	400204b8 	.word	0x400204b8
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	bf14      	ite	ne
 8002fca:	2301      	movne	r3, #1
 8002fcc:	2300      	moveq	r3, #0
 8002fce:	b2db      	uxtb	r3, r3
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	f000 8087 	beq.w	80030e4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fda:	f003 031f 	and.w	r3, r3, #31
 8002fde:	2220      	movs	r2, #32
 8002fe0:	409a      	lsls	r2, r3
 8002fe2:	6a3b      	ldr	r3, [r7, #32]
 8002fe4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fec:	b2db      	uxtb	r3, r3
 8002fee:	2b04      	cmp	r3, #4
 8002ff0:	d139      	bne.n	8003066 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	681a      	ldr	r2, [r3, #0]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f022 0216 	bic.w	r2, r2, #22
 8003000:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	695a      	ldr	r2, [r3, #20]
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003010:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003016:	2b00      	cmp	r3, #0
 8003018:	d103      	bne.n	8003022 <HAL_DMA_IRQHandler+0x736>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800301e:	2b00      	cmp	r3, #0
 8003020:	d007      	beq.n	8003032 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f022 0208 	bic.w	r2, r2, #8
 8003030:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	223f      	movs	r2, #63	; 0x3f
 800303c:	409a      	lsls	r2, r3
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2201      	movs	r2, #1
 8003046:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	2200      	movs	r2, #0
 800304e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003056:	2b00      	cmp	r3, #0
 8003058:	f000 834a 	beq.w	80036f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	4798      	blx	r3
          }
          return;
 8003064:	e344      	b.n	80036f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d018      	beq.n	80030a6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d108      	bne.n	8003094 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02c      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800308e:	6878      	ldr	r0, [r7, #4]
 8003090:	4798      	blx	r3
 8003092:	e027      	b.n	80030e4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003098:	2b00      	cmp	r3, #0
 800309a:	d023      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	4798      	blx	r3
 80030a4:	e01e      	b.n	80030e4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d10f      	bne.n	80030d4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0210 	bic.w	r2, r2, #16
 80030c2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2200      	movs	r2, #0
 80030d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d003      	beq.n	80030e4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	f000 8306 	beq.w	80036fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	f003 0301 	and.w	r3, r3, #1
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 8088 	beq.w	800320c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2204      	movs	r2, #4
 8003100:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a7a      	ldr	r2, [pc, #488]	; (80032f4 <HAL_DMA_IRQHandler+0xa08>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d04a      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4a79      	ldr	r2, [pc, #484]	; (80032f8 <HAL_DMA_IRQHandler+0xa0c>)
 8003114:	4293      	cmp	r3, r2
 8003116:	d045      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a77      	ldr	r2, [pc, #476]	; (80032fc <HAL_DMA_IRQHandler+0xa10>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d040      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	4a76      	ldr	r2, [pc, #472]	; (8003300 <HAL_DMA_IRQHandler+0xa14>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d03b      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a74      	ldr	r2, [pc, #464]	; (8003304 <HAL_DMA_IRQHandler+0xa18>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d036      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	4a73      	ldr	r2, [pc, #460]	; (8003308 <HAL_DMA_IRQHandler+0xa1c>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d031      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a71      	ldr	r2, [pc, #452]	; (800330c <HAL_DMA_IRQHandler+0xa20>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d02c      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a70      	ldr	r2, [pc, #448]	; (8003310 <HAL_DMA_IRQHandler+0xa24>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d027      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a6e      	ldr	r2, [pc, #440]	; (8003314 <HAL_DMA_IRQHandler+0xa28>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d022      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a6d      	ldr	r2, [pc, #436]	; (8003318 <HAL_DMA_IRQHandler+0xa2c>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d01d      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a6b      	ldr	r2, [pc, #428]	; (800331c <HAL_DMA_IRQHandler+0xa30>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d018      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a6a      	ldr	r2, [pc, #424]	; (8003320 <HAL_DMA_IRQHandler+0xa34>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d013      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a68      	ldr	r2, [pc, #416]	; (8003324 <HAL_DMA_IRQHandler+0xa38>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00e      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4a67      	ldr	r2, [pc, #412]	; (8003328 <HAL_DMA_IRQHandler+0xa3c>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d009      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a65      	ldr	r2, [pc, #404]	; (800332c <HAL_DMA_IRQHandler+0xa40>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d004      	beq.n	80031a4 <HAL_DMA_IRQHandler+0x8b8>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	4a64      	ldr	r2, [pc, #400]	; (8003330 <HAL_DMA_IRQHandler+0xa44>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d108      	bne.n	80031b6 <HAL_DMA_IRQHandler+0x8ca>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	681a      	ldr	r2, [r3, #0]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0201 	bic.w	r2, r2, #1
 80031b2:	601a      	str	r2, [r3, #0]
 80031b4:	e007      	b.n	80031c6 <HAL_DMA_IRQHandler+0x8da>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 0201 	bic.w	r2, r2, #1
 80031c4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	3301      	adds	r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d307      	bcc.n	80031e2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d1f2      	bne.n	80031c6 <HAL_DMA_IRQHandler+0x8da>
 80031e0:	e000      	b.n	80031e4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80031e2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d004      	beq.n	80031fc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2203      	movs	r2, #3
 80031f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80031fa:	e003      	b.n	8003204 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 8272 	beq.w	80036fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4798      	blx	r3
 800321e:	e26c      	b.n	80036fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a43      	ldr	r2, [pc, #268]	; (8003334 <HAL_DMA_IRQHandler+0xa48>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d022      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a42      	ldr	r2, [pc, #264]	; (8003338 <HAL_DMA_IRQHandler+0xa4c>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d01d      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a40      	ldr	r2, [pc, #256]	; (800333c <HAL_DMA_IRQHandler+0xa50>)
 800323a:	4293      	cmp	r3, r2
 800323c:	d018      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a3f      	ldr	r2, [pc, #252]	; (8003340 <HAL_DMA_IRQHandler+0xa54>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a3d      	ldr	r2, [pc, #244]	; (8003344 <HAL_DMA_IRQHandler+0xa58>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d00e      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	4a3c      	ldr	r2, [pc, #240]	; (8003348 <HAL_DMA_IRQHandler+0xa5c>)
 8003258:	4293      	cmp	r3, r2
 800325a:	d009      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a3a      	ldr	r2, [pc, #232]	; (800334c <HAL_DMA_IRQHandler+0xa60>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d004      	beq.n	8003270 <HAL_DMA_IRQHandler+0x984>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	4a39      	ldr	r2, [pc, #228]	; (8003350 <HAL_DMA_IRQHandler+0xa64>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d101      	bne.n	8003274 <HAL_DMA_IRQHandler+0x988>
 8003270:	2301      	movs	r3, #1
 8003272:	e000      	b.n	8003276 <HAL_DMA_IRQHandler+0x98a>
 8003274:	2300      	movs	r3, #0
 8003276:	2b00      	cmp	r3, #0
 8003278:	f000 823f 	beq.w	80036fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003288:	f003 031f 	and.w	r3, r3, #31
 800328c:	2204      	movs	r2, #4
 800328e:	409a      	lsls	r2, r3
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	4013      	ands	r3, r2
 8003294:	2b00      	cmp	r3, #0
 8003296:	f000 80cd 	beq.w	8003434 <HAL_DMA_IRQHandler+0xb48>
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	f003 0304 	and.w	r3, r3, #4
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	f000 80c7 	beq.w	8003434 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032aa:	f003 031f 	and.w	r3, r3, #31
 80032ae:	2204      	movs	r2, #4
 80032b0:	409a      	lsls	r2, r3
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d049      	beq.n	8003354 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 8210 	beq.w	80036f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032dc:	e20a      	b.n	80036f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	f000 8206 	beq.w	80036f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80032f0:	e200      	b.n	80036f4 <HAL_DMA_IRQHandler+0xe08>
 80032f2:	bf00      	nop
 80032f4:	40020010 	.word	0x40020010
 80032f8:	40020028 	.word	0x40020028
 80032fc:	40020040 	.word	0x40020040
 8003300:	40020058 	.word	0x40020058
 8003304:	40020070 	.word	0x40020070
 8003308:	40020088 	.word	0x40020088
 800330c:	400200a0 	.word	0x400200a0
 8003310:	400200b8 	.word	0x400200b8
 8003314:	40020410 	.word	0x40020410
 8003318:	40020428 	.word	0x40020428
 800331c:	40020440 	.word	0x40020440
 8003320:	40020458 	.word	0x40020458
 8003324:	40020470 	.word	0x40020470
 8003328:	40020488 	.word	0x40020488
 800332c:	400204a0 	.word	0x400204a0
 8003330:	400204b8 	.word	0x400204b8
 8003334:	58025408 	.word	0x58025408
 8003338:	5802541c 	.word	0x5802541c
 800333c:	58025430 	.word	0x58025430
 8003340:	58025444 	.word	0x58025444
 8003344:	58025458 	.word	0x58025458
 8003348:	5802546c 	.word	0x5802546c
 800334c:	58025480 	.word	0x58025480
 8003350:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	f003 0320 	and.w	r3, r3, #32
 800335a:	2b00      	cmp	r3, #0
 800335c:	d160      	bne.n	8003420 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a7f      	ldr	r2, [pc, #508]	; (8003560 <HAL_DMA_IRQHandler+0xc74>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d04a      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a7d      	ldr	r2, [pc, #500]	; (8003564 <HAL_DMA_IRQHandler+0xc78>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d045      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_DMA_IRQHandler+0xc7c>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d040      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a7a      	ldr	r2, [pc, #488]	; (800356c <HAL_DMA_IRQHandler+0xc80>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d03b      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a79      	ldr	r2, [pc, #484]	; (8003570 <HAL_DMA_IRQHandler+0xc84>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d036      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a77      	ldr	r2, [pc, #476]	; (8003574 <HAL_DMA_IRQHandler+0xc88>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d031      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a76      	ldr	r2, [pc, #472]	; (8003578 <HAL_DMA_IRQHandler+0xc8c>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d02c      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a74      	ldr	r2, [pc, #464]	; (800357c <HAL_DMA_IRQHandler+0xc90>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d027      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a73      	ldr	r2, [pc, #460]	; (8003580 <HAL_DMA_IRQHandler+0xc94>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d022      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a71      	ldr	r2, [pc, #452]	; (8003584 <HAL_DMA_IRQHandler+0xc98>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01d      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	4a70      	ldr	r2, [pc, #448]	; (8003588 <HAL_DMA_IRQHandler+0xc9c>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d018      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_DMA_IRQHandler+0xca0>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d013      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a6d      	ldr	r2, [pc, #436]	; (8003590 <HAL_DMA_IRQHandler+0xca4>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d00e      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a6b      	ldr	r2, [pc, #428]	; (8003594 <HAL_DMA_IRQHandler+0xca8>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d009      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4a6a      	ldr	r2, [pc, #424]	; (8003598 <HAL_DMA_IRQHandler+0xcac>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d004      	beq.n	80033fe <HAL_DMA_IRQHandler+0xb12>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	4a68      	ldr	r2, [pc, #416]	; (800359c <HAL_DMA_IRQHandler+0xcb0>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d108      	bne.n	8003410 <HAL_DMA_IRQHandler+0xb24>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	681a      	ldr	r2, [r3, #0]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f022 0208 	bic.w	r2, r2, #8
 800340c:	601a      	str	r2, [r3, #0]
 800340e:	e007      	b.n	8003420 <HAL_DMA_IRQHandler+0xb34>
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0204 	bic.w	r2, r2, #4
 800341e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	2b00      	cmp	r3, #0
 8003426:	f000 8165 	beq.w	80036f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003432:	e15f      	b.n	80036f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003438:	f003 031f 	and.w	r3, r3, #31
 800343c:	2202      	movs	r2, #2
 800343e:	409a      	lsls	r2, r3
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 80c5 	beq.w	80035d4 <HAL_DMA_IRQHandler+0xce8>
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 80bf 	beq.w	80035d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345a:	f003 031f 	and.w	r3, r3, #31
 800345e:	2202      	movs	r2, #2
 8003460:	409a      	lsls	r2, r3
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003466:	693b      	ldr	r3, [r7, #16]
 8003468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800346c:	2b00      	cmp	r3, #0
 800346e:	d018      	beq.n	80034a2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d109      	bne.n	800348e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347e:	2b00      	cmp	r3, #0
 8003480:	f000 813a 	beq.w	80036f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003488:	6878      	ldr	r0, [r7, #4]
 800348a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800348c:	e134      	b.n	80036f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003492:	2b00      	cmp	r3, #0
 8003494:	f000 8130 	beq.w	80036f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80034a0:	e12a      	b.n	80036f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	f003 0320 	and.w	r3, r3, #32
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	f040 8089 	bne.w	80035c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a2b      	ldr	r2, [pc, #172]	; (8003560 <HAL_DMA_IRQHandler+0xc74>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d04a      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a29      	ldr	r2, [pc, #164]	; (8003564 <HAL_DMA_IRQHandler+0xc78>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d045      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a28      	ldr	r2, [pc, #160]	; (8003568 <HAL_DMA_IRQHandler+0xc7c>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d040      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a26      	ldr	r2, [pc, #152]	; (800356c <HAL_DMA_IRQHandler+0xc80>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d03b      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a25      	ldr	r2, [pc, #148]	; (8003570 <HAL_DMA_IRQHandler+0xc84>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d036      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a23      	ldr	r2, [pc, #140]	; (8003574 <HAL_DMA_IRQHandler+0xc88>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d031      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a22      	ldr	r2, [pc, #136]	; (8003578 <HAL_DMA_IRQHandler+0xc8c>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d02c      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a20      	ldr	r2, [pc, #128]	; (800357c <HAL_DMA_IRQHandler+0xc90>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d027      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a1f      	ldr	r2, [pc, #124]	; (8003580 <HAL_DMA_IRQHandler+0xc94>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d022      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1d      	ldr	r2, [pc, #116]	; (8003584 <HAL_DMA_IRQHandler+0xc98>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d01d      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1c      	ldr	r2, [pc, #112]	; (8003588 <HAL_DMA_IRQHandler+0xc9c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d018      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1a      	ldr	r2, [pc, #104]	; (800358c <HAL_DMA_IRQHandler+0xca0>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d013      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a19      	ldr	r2, [pc, #100]	; (8003590 <HAL_DMA_IRQHandler+0xca4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d00e      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a17      	ldr	r2, [pc, #92]	; (8003594 <HAL_DMA_IRQHandler+0xca8>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d009      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a16      	ldr	r2, [pc, #88]	; (8003598 <HAL_DMA_IRQHandler+0xcac>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d004      	beq.n	800354e <HAL_DMA_IRQHandler+0xc62>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a14      	ldr	r2, [pc, #80]	; (800359c <HAL_DMA_IRQHandler+0xcb0>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d128      	bne.n	80035a0 <HAL_DMA_IRQHandler+0xcb4>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f022 0214 	bic.w	r2, r2, #20
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	e027      	b.n	80035b0 <HAL_DMA_IRQHandler+0xcc4>
 8003560:	40020010 	.word	0x40020010
 8003564:	40020028 	.word	0x40020028
 8003568:	40020040 	.word	0x40020040
 800356c:	40020058 	.word	0x40020058
 8003570:	40020070 	.word	0x40020070
 8003574:	40020088 	.word	0x40020088
 8003578:	400200a0 	.word	0x400200a0
 800357c:	400200b8 	.word	0x400200b8
 8003580:	40020410 	.word	0x40020410
 8003584:	40020428 	.word	0x40020428
 8003588:	40020440 	.word	0x40020440
 800358c:	40020458 	.word	0x40020458
 8003590:	40020470 	.word	0x40020470
 8003594:	40020488 	.word	0x40020488
 8003598:	400204a0 	.word	0x400204a0
 800359c:	400204b8 	.word	0x400204b8
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 020a 	bic.w	r2, r2, #10
 80035ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2200      	movs	r2, #0
 80035bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	f000 8097 	beq.w	80036f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80035d2:	e091      	b.n	80036f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d8:	f003 031f 	and.w	r3, r3, #31
 80035dc:	2208      	movs	r2, #8
 80035de:	409a      	lsls	r2, r3
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	4013      	ands	r3, r2
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f000 8088 	beq.w	80036fa <HAL_DMA_IRQHandler+0xe0e>
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f003 0308 	and.w	r3, r3, #8
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 8082 	beq.w	80036fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	4a41      	ldr	r2, [pc, #260]	; (8003700 <HAL_DMA_IRQHandler+0xe14>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d04a      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4a3f      	ldr	r2, [pc, #252]	; (8003704 <HAL_DMA_IRQHandler+0xe18>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d045      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a3e      	ldr	r2, [pc, #248]	; (8003708 <HAL_DMA_IRQHandler+0xe1c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d040      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a3c      	ldr	r2, [pc, #240]	; (800370c <HAL_DMA_IRQHandler+0xe20>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d03b      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a3b      	ldr	r2, [pc, #236]	; (8003710 <HAL_DMA_IRQHandler+0xe24>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d036      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	4a39      	ldr	r2, [pc, #228]	; (8003714 <HAL_DMA_IRQHandler+0xe28>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d031      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a38      	ldr	r2, [pc, #224]	; (8003718 <HAL_DMA_IRQHandler+0xe2c>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d02c      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_DMA_IRQHandler+0xe30>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d027      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a35      	ldr	r2, [pc, #212]	; (8003720 <HAL_DMA_IRQHandler+0xe34>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d022      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	4a33      	ldr	r2, [pc, #204]	; (8003724 <HAL_DMA_IRQHandler+0xe38>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d01d      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a32      	ldr	r2, [pc, #200]	; (8003728 <HAL_DMA_IRQHandler+0xe3c>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d018      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a30      	ldr	r2, [pc, #192]	; (800372c <HAL_DMA_IRQHandler+0xe40>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d013      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a2f      	ldr	r2, [pc, #188]	; (8003730 <HAL_DMA_IRQHandler+0xe44>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00e      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a2d      	ldr	r2, [pc, #180]	; (8003734 <HAL_DMA_IRQHandler+0xe48>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d009      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a2c      	ldr	r2, [pc, #176]	; (8003738 <HAL_DMA_IRQHandler+0xe4c>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d004      	beq.n	8003696 <HAL_DMA_IRQHandler+0xdaa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2a      	ldr	r2, [pc, #168]	; (800373c <HAL_DMA_IRQHandler+0xe50>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d108      	bne.n	80036a8 <HAL_DMA_IRQHandler+0xdbc>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 021c 	bic.w	r2, r2, #28
 80036a4:	601a      	str	r2, [r3, #0]
 80036a6:	e007      	b.n	80036b8 <HAL_DMA_IRQHandler+0xdcc>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	681a      	ldr	r2, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f022 020e 	bic.w	r2, r2, #14
 80036b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2201      	movs	r2, #1
 80036c2:	409a      	lsls	r2, r3
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2201      	movs	r2, #1
 80036cc:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ea:	6878      	ldr	r0, [r7, #4]
 80036ec:	4798      	blx	r3
 80036ee:	e004      	b.n	80036fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 80036f0:	bf00      	nop
 80036f2:	e002      	b.n	80036fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f4:	bf00      	nop
 80036f6:	e000      	b.n	80036fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80036f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40020010 	.word	0x40020010
 8003704:	40020028 	.word	0x40020028
 8003708:	40020040 	.word	0x40020040
 800370c:	40020058 	.word	0x40020058
 8003710:	40020070 	.word	0x40020070
 8003714:	40020088 	.word	0x40020088
 8003718:	400200a0 	.word	0x400200a0
 800371c:	400200b8 	.word	0x400200b8
 8003720:	40020410 	.word	0x40020410
 8003724:	40020428 	.word	0x40020428
 8003728:	40020440 	.word	0x40020440
 800372c:	40020458 	.word	0x40020458
 8003730:	40020470 	.word	0x40020470
 8003734:	40020488 	.word	0x40020488
 8003738:	400204a0 	.word	0x400204a0
 800373c:	400204b8 	.word	0x400204b8

08003740 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4a42      	ldr	r2, [pc, #264]	; (8003858 <DMA_CalcBaseAndBitshift+0x118>)
 800374e:	4293      	cmp	r3, r2
 8003750:	d04a      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a41      	ldr	r2, [pc, #260]	; (800385c <DMA_CalcBaseAndBitshift+0x11c>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d045      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	4a3f      	ldr	r2, [pc, #252]	; (8003860 <DMA_CalcBaseAndBitshift+0x120>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d040      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4a3e      	ldr	r2, [pc, #248]	; (8003864 <DMA_CalcBaseAndBitshift+0x124>)
 800376c:	4293      	cmp	r3, r2
 800376e:	d03b      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	4a3c      	ldr	r2, [pc, #240]	; (8003868 <DMA_CalcBaseAndBitshift+0x128>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d036      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a3b      	ldr	r2, [pc, #236]	; (800386c <DMA_CalcBaseAndBitshift+0x12c>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d031      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4a39      	ldr	r2, [pc, #228]	; (8003870 <DMA_CalcBaseAndBitshift+0x130>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d02c      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a38      	ldr	r2, [pc, #224]	; (8003874 <DMA_CalcBaseAndBitshift+0x134>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d027      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a36      	ldr	r2, [pc, #216]	; (8003878 <DMA_CalcBaseAndBitshift+0x138>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d022      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4a35      	ldr	r2, [pc, #212]	; (800387c <DMA_CalcBaseAndBitshift+0x13c>)
 80037a8:	4293      	cmp	r3, r2
 80037aa:	d01d      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	4a33      	ldr	r2, [pc, #204]	; (8003880 <DMA_CalcBaseAndBitshift+0x140>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d018      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	4a32      	ldr	r2, [pc, #200]	; (8003884 <DMA_CalcBaseAndBitshift+0x144>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d013      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a30      	ldr	r2, [pc, #192]	; (8003888 <DMA_CalcBaseAndBitshift+0x148>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d00e      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	4a2f      	ldr	r2, [pc, #188]	; (800388c <DMA_CalcBaseAndBitshift+0x14c>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	d009      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a2d      	ldr	r2, [pc, #180]	; (8003890 <DMA_CalcBaseAndBitshift+0x150>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <DMA_CalcBaseAndBitshift+0xa8>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a2c      	ldr	r2, [pc, #176]	; (8003894 <DMA_CalcBaseAndBitshift+0x154>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d101      	bne.n	80037ec <DMA_CalcBaseAndBitshift+0xac>
 80037e8:	2301      	movs	r3, #1
 80037ea:	e000      	b.n	80037ee <DMA_CalcBaseAndBitshift+0xae>
 80037ec:	2300      	movs	r3, #0
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d024      	beq.n	800383c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3b10      	subs	r3, #16
 80037fa:	4a27      	ldr	r2, [pc, #156]	; (8003898 <DMA_CalcBaseAndBitshift+0x158>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	091b      	lsrs	r3, r3, #4
 8003802:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 0307 	and.w	r3, r3, #7
 800380a:	4a24      	ldr	r2, [pc, #144]	; (800389c <DMA_CalcBaseAndBitshift+0x15c>)
 800380c:	5cd3      	ldrb	r3, [r2, r3]
 800380e:	461a      	mov	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b03      	cmp	r3, #3
 8003818:	d908      	bls.n	800382c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	461a      	mov	r2, r3
 8003820:	4b1f      	ldr	r3, [pc, #124]	; (80038a0 <DMA_CalcBaseAndBitshift+0x160>)
 8003822:	4013      	ands	r3, r2
 8003824:	1d1a      	adds	r2, r3, #4
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	659a      	str	r2, [r3, #88]	; 0x58
 800382a:	e00d      	b.n	8003848 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	461a      	mov	r2, r3
 8003832:	4b1b      	ldr	r3, [pc, #108]	; (80038a0 <DMA_CalcBaseAndBitshift+0x160>)
 8003834:	4013      	ands	r3, r2
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	6593      	str	r3, [r2, #88]	; 0x58
 800383a:	e005      	b.n	8003848 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800384c:	4618      	mov	r0, r3
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	40020010 	.word	0x40020010
 800385c:	40020028 	.word	0x40020028
 8003860:	40020040 	.word	0x40020040
 8003864:	40020058 	.word	0x40020058
 8003868:	40020070 	.word	0x40020070
 800386c:	40020088 	.word	0x40020088
 8003870:	400200a0 	.word	0x400200a0
 8003874:	400200b8 	.word	0x400200b8
 8003878:	40020410 	.word	0x40020410
 800387c:	40020428 	.word	0x40020428
 8003880:	40020440 	.word	0x40020440
 8003884:	40020458 	.word	0x40020458
 8003888:	40020470 	.word	0x40020470
 800388c:	40020488 	.word	0x40020488
 8003890:	400204a0 	.word	0x400204a0
 8003894:	400204b8 	.word	0x400204b8
 8003898:	aaaaaaab 	.word	0xaaaaaaab
 800389c:	0800948c 	.word	0x0800948c
 80038a0:	fffffc00 	.word	0xfffffc00

080038a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038ac:	2300      	movs	r3, #0
 80038ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d120      	bne.n	80038fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038bc:	2b03      	cmp	r3, #3
 80038be:	d858      	bhi.n	8003972 <DMA_CheckFifoParam+0xce>
 80038c0:	a201      	add	r2, pc, #4	; (adr r2, 80038c8 <DMA_CheckFifoParam+0x24>)
 80038c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c6:	bf00      	nop
 80038c8:	080038d9 	.word	0x080038d9
 80038cc:	080038eb 	.word	0x080038eb
 80038d0:	080038d9 	.word	0x080038d9
 80038d4:	08003973 	.word	0x08003973
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d048      	beq.n	8003976 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038e8:	e045      	b.n	8003976 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ee:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80038f2:	d142      	bne.n	800397a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80038f8:	e03f      	b.n	800397a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	699b      	ldr	r3, [r3, #24]
 80038fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003902:	d123      	bne.n	800394c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003908:	2b03      	cmp	r3, #3
 800390a:	d838      	bhi.n	800397e <DMA_CheckFifoParam+0xda>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <DMA_CheckFifoParam+0x70>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003925 	.word	0x08003925
 8003918:	0800392b 	.word	0x0800392b
 800391c:	08003925 	.word	0x08003925
 8003920:	0800393d 	.word	0x0800393d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	73fb      	strb	r3, [r7, #15]
        break;
 8003928:	e030      	b.n	800398c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d025      	beq.n	8003982 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800393a:	e022      	b.n	8003982 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003940:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003944:	d11f      	bne.n	8003986 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800394a:	e01c      	b.n	8003986 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	2b02      	cmp	r3, #2
 8003952:	d902      	bls.n	800395a <DMA_CheckFifoParam+0xb6>
 8003954:	2b03      	cmp	r3, #3
 8003956:	d003      	beq.n	8003960 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8003958:	e018      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800395a:	2301      	movs	r3, #1
 800395c:	73fb      	strb	r3, [r7, #15]
        break;
 800395e:	e015      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003964:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
    break;
 8003970:	e00b      	b.n	800398a <DMA_CheckFifoParam+0xe6>
        break;
 8003972:	bf00      	nop
 8003974:	e00a      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        break;
 8003976:	bf00      	nop
 8003978:	e008      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        break;
 800397a:	bf00      	nop
 800397c:	e006      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        break;
 800397e:	bf00      	nop
 8003980:	e004      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        break;
 8003982:	bf00      	nop
 8003984:	e002      	b.n	800398c <DMA_CheckFifoParam+0xe8>
        break;
 8003986:	bf00      	nop
 8003988:	e000      	b.n	800398c <DMA_CheckFifoParam+0xe8>
    break;
 800398a:	bf00      	nop
    }
  }

  return status;
 800398c:	7bfb      	ldrb	r3, [r7, #15]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr
 800399a:	bf00      	nop

0800399c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a38      	ldr	r2, [pc, #224]	; (8003a90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d022      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a36      	ldr	r2, [pc, #216]	; (8003a94 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d01d      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	4a35      	ldr	r2, [pc, #212]	; (8003a98 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d018      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4a33      	ldr	r2, [pc, #204]	; (8003a9c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d013      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	4a32      	ldr	r2, [pc, #200]	; (8003aa0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 80039d8:	4293      	cmp	r3, r2
 80039da:	d00e      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a30      	ldr	r2, [pc, #192]	; (8003aa4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d009      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a2f      	ldr	r2, [pc, #188]	; (8003aa8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d004      	beq.n	80039fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2d      	ldr	r2, [pc, #180]	; (8003aac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d101      	bne.n	80039fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 80039fa:	2301      	movs	r3, #1
 80039fc:	e000      	b.n	8003a00 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 80039fe:	2300      	movs	r3, #0
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d01a      	beq.n	8003a3a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	b2db      	uxtb	r3, r3
 8003a0a:	3b08      	subs	r3, #8
 8003a0c:	4a28      	ldr	r2, [pc, #160]	; (8003ab0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8003a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8003a16:	68fa      	ldr	r2, [r7, #12]
 8003a18:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8003a1a:	4413      	add	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	461a      	mov	r2, r3
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a24      	ldr	r2, [pc, #144]	; (8003ab8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8003a28:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f003 031f 	and.w	r3, r3, #31
 8003a30:	2201      	movs	r2, #1
 8003a32:	409a      	lsls	r2, r3
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8003a38:	e024      	b.n	8003a84 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	b2db      	uxtb	r3, r3
 8003a40:	3b10      	subs	r3, #16
 8003a42:	4a1e      	ldr	r2, [pc, #120]	; (8003abc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8003a44:	fba2 2303 	umull	r2, r3, r2, r3
 8003a48:	091b      	lsrs	r3, r3, #4
 8003a4a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d806      	bhi.n	8003a62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4a1b      	ldr	r2, [pc, #108]	; (8003ac4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d902      	bls.n	8003a62 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	3308      	adds	r3, #8
 8003a60:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	4b18      	ldr	r3, [pc, #96]	; (8003ac8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a16      	ldr	r2, [pc, #88]	; (8003acc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8003a74:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	f003 031f 	and.w	r3, r3, #31
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	409a      	lsls	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003a84:	bf00      	nop
 8003a86:	3714      	adds	r7, #20
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8e:	4770      	bx	lr
 8003a90:	58025408 	.word	0x58025408
 8003a94:	5802541c 	.word	0x5802541c
 8003a98:	58025430 	.word	0x58025430
 8003a9c:	58025444 	.word	0x58025444
 8003aa0:	58025458 	.word	0x58025458
 8003aa4:	5802546c 	.word	0x5802546c
 8003aa8:	58025480 	.word	0x58025480
 8003aac:	58025494 	.word	0x58025494
 8003ab0:	cccccccd 	.word	0xcccccccd
 8003ab4:	16009600 	.word	0x16009600
 8003ab8:	58025880 	.word	0x58025880
 8003abc:	aaaaaaab 	.word	0xaaaaaaab
 8003ac0:	400204b8 	.word	0x400204b8
 8003ac4:	4002040f 	.word	0x4002040f
 8003ac8:	10008200 	.word	0x10008200
 8003acc:	40020880 	.word	0x40020880

08003ad0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b085      	sub	sp, #20
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d04a      	beq.n	8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b08      	cmp	r3, #8
 8003aea:	d847      	bhi.n	8003b7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a25      	ldr	r2, [pc, #148]	; (8003b88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d022      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a24      	ldr	r2, [pc, #144]	; (8003b8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d01d      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a22      	ldr	r2, [pc, #136]	; (8003b90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d018      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	4a21      	ldr	r2, [pc, #132]	; (8003b94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	4a1f      	ldr	r2, [pc, #124]	; (8003b98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d00e      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1e      	ldr	r2, [pc, #120]	; (8003b9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d009      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ba0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d004      	beq.n	8003b3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a1b      	ldr	r2, [pc, #108]	; (8003ba4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d101      	bne.n	8003b40 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8003b40:	2300      	movs	r3, #0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b46:	68fa      	ldr	r2, [r7, #12]
 8003b48:	4b17      	ldr	r3, [pc, #92]	; (8003ba8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8003b4a:	4413      	add	r3, r2
 8003b4c:	009b      	lsls	r3, r3, #2
 8003b4e:	461a      	mov	r2, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a15      	ldr	r2, [pc, #84]	; (8003bac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8003b58:	671a      	str	r2, [r3, #112]	; 0x70
 8003b5a:	e009      	b.n	8003b70 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	4b14      	ldr	r3, [pc, #80]	; (8003bb0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8003b60:	4413      	add	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	461a      	mov	r2, r3
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a11      	ldr	r2, [pc, #68]	; (8003bb4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8003b6e:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	2201      	movs	r2, #1
 8003b76:	409a      	lsls	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8003b7c:	bf00      	nop
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr
 8003b88:	58025408 	.word	0x58025408
 8003b8c:	5802541c 	.word	0x5802541c
 8003b90:	58025430 	.word	0x58025430
 8003b94:	58025444 	.word	0x58025444
 8003b98:	58025458 	.word	0x58025458
 8003b9c:	5802546c 	.word	0x5802546c
 8003ba0:	58025480 	.word	0x58025480
 8003ba4:	58025494 	.word	0x58025494
 8003ba8:	1600963f 	.word	0x1600963f
 8003bac:	58025940 	.word	0x58025940
 8003bb0:	1000823f 	.word	0x1000823f
 8003bb4:	40020940 	.word	0x40020940

08003bb8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b084      	sub	sp, #16
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d101      	bne.n	8003bca <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e0cf      	b.n	8003d6a <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d106      	bne.n	8003be2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2223      	movs	r2, #35	; 0x23
 8003bd8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8003bdc:	6878      	ldr	r0, [r7, #4]
 8003bde:	f7fd f907 	bl	8000df0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003be2:	4b64      	ldr	r3, [pc, #400]	; (8003d74 <HAL_ETH_Init+0x1bc>)
 8003be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003be8:	4a62      	ldr	r2, [pc, #392]	; (8003d74 <HAL_ETH_Init+0x1bc>)
 8003bea:	f043 0302 	orr.w	r3, r3, #2
 8003bee:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8003bf2:	4b60      	ldr	r3, [pc, #384]	; (8003d74 <HAL_ETH_Init+0x1bc>)
 8003bf4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8003bf8:	f003 0302 	and.w	r3, r3, #2
 8003bfc:	60bb      	str	r3, [r7, #8]
 8003bfe:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	7a1b      	ldrb	r3, [r3, #8]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d103      	bne.n	8003c10 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8003c08:	2000      	movs	r0, #0
 8003c0a:	f7fd fc8b 	bl	8001524 <HAL_SYSCFG_ETHInterfaceSelect>
 8003c0e:	e003      	b.n	8003c18 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8003c10:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8003c14:	f7fd fc86 	bl	8001524 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8003c18:	4b57      	ldr	r3, [pc, #348]	; (8003d78 <HAL_ETH_Init+0x1c0>)
 8003c1a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	6812      	ldr	r2, [r2, #0]
 8003c2a:	f043 0301 	orr.w	r3, r3, #1
 8003c2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003c32:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c34:	f7fd fc3a 	bl	80014ac <HAL_GetTick>
 8003c38:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c3a:	e011      	b.n	8003c60 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8003c3c:	f7fd fc36 	bl	80014ac <HAL_GetTick>
 8003c40:	4602      	mov	r2, r0
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	1ad3      	subs	r3, r2, r3
 8003c46:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003c4a:	d909      	bls.n	8003c60 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2204      	movs	r2, #4
 8003c50:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	22e0      	movs	r2, #224	; 0xe0
 8003c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e084      	b.n	8003d6a <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0301 	and.w	r3, r3, #1
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e4      	bne.n	8003c3c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f000 f886 	bl	8003d84 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8003c78:	f001 fee4 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a3f      	ldr	r2, [pc, #252]	; (8003d7c <HAL_ETH_Init+0x1c4>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	0c9a      	lsrs	r2, r3, #18
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	3a01      	subs	r2, #1
 8003c8c:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 fa71 	bl	8004178 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003c9e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8003ca2:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	6812      	ldr	r2, [r2, #0]
 8003caa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003cae:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cb2:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	695b      	ldr	r3, [r3, #20]
 8003cba:	f003 0303 	and.w	r3, r3, #3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d009      	beq.n	8003cd6 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	22e0      	movs	r2, #224	; 0xe0
 8003cce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e049      	b.n	8003d6a <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003cde:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8003ce2:	4b27      	ldr	r3, [pc, #156]	; (8003d80 <HAL_ETH_Init+0x1c8>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6952      	ldr	r2, [r2, #20]
 8003cea:	0051      	lsls	r1, r2, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8003cf6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fad9 	bl	80042b2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 fb1f 	bl	8004344 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	3305      	adds	r3, #5
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	021a      	lsls	r2, r3, #8
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	3304      	adds	r3, #4
 8003d16:	781b      	ldrb	r3, [r3, #0]
 8003d18:	4619      	mov	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	3303      	adds	r3, #3
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	061a      	lsls	r2, r3, #24
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	3302      	adds	r3, #2
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d44:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8003d52:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8003d54:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2210      	movs	r2, #16
 8003d64:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3710      	adds	r7, #16
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
 8003d72:	bf00      	nop
 8003d74:	58024400 	.word	0x58024400
 8003d78:	58000400 	.word	0x58000400
 8003d7c:	431bde83 	.word	0x431bde83
 8003d80:	ffff8001 	.word	0xffff8001

08003d84 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003d94:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003d9c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8003d9e:	f001 fe51 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8003da2:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	4a1e      	ldr	r2, [pc, #120]	; (8003e20 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d908      	bls.n	8003dbe <HAL_ETH_SetMDIOClockRange+0x3a>
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	4a1d      	ldr	r2, [pc, #116]	; (8003e24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d804      	bhi.n	8003dbe <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e027      	b.n	8003e0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	4a18      	ldr	r2, [pc, #96]	; (8003e24 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8003dc2:	4293      	cmp	r3, r2
 8003dc4:	d908      	bls.n	8003dd8 <HAL_ETH_SetMDIOClockRange+0x54>
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	4a17      	ldr	r2, [pc, #92]	; (8003e28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d204      	bcs.n	8003dd8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003dd4:	60fb      	str	r3, [r7, #12]
 8003dd6:	e01a      	b.n	8003e0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	4a13      	ldr	r2, [pc, #76]	; (8003e28 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d303      	bcc.n	8003de8 <HAL_ETH_SetMDIOClockRange+0x64>
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	4a12      	ldr	r2, [pc, #72]	; (8003e2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003de4:	4293      	cmp	r3, r2
 8003de6:	d911      	bls.n	8003e0c <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	4a10      	ldr	r2, [pc, #64]	; (8003e2c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d908      	bls.n	8003e02 <HAL_ETH_SetMDIOClockRange+0x7e>
 8003df0:	68bb      	ldr	r3, [r7, #8]
 8003df2:	4a0f      	ldr	r2, [pc, #60]	; (8003e30 <HAL_ETH_SetMDIOClockRange+0xac>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d804      	bhi.n	8003e02 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	e005      	b.n	8003e0e <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003e08:	60fb      	str	r3, [r7, #12]
 8003e0a:	e000      	b.n	8003e0e <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8003e0c:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8003e18:	bf00      	nop
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	01312cff 	.word	0x01312cff
 8003e24:	02160ebf 	.word	0x02160ebf
 8003e28:	03938700 	.word	0x03938700
 8003e2c:	05f5e0ff 	.word	0x05f5e0ff
 8003e30:	08f0d17f 	.word	0x08f0d17f

08003e34 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b085      	sub	sp, #20
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8003e46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	791b      	ldrb	r3, [r3, #4]
 8003e4c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8003e4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	7b1b      	ldrb	r3, [r3, #12]
 8003e54:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8003e56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	7b5b      	ldrb	r3, [r3, #13]
 8003e5c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8003e5e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	7b9b      	ldrb	r3, [r3, #14]
 8003e64:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8003e66:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	7bdb      	ldrb	r3, [r3, #15]
 8003e6c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8003e6e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003e70:	683a      	ldr	r2, [r7, #0]
 8003e72:	7c12      	ldrb	r2, [r2, #16]
 8003e74:	2a00      	cmp	r2, #0
 8003e76:	d102      	bne.n	8003e7e <ETH_SetMACConfig+0x4a>
 8003e78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8003e7c:	e000      	b.n	8003e80 <ETH_SetMACConfig+0x4c>
 8003e7e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8003e80:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003e82:	683a      	ldr	r2, [r7, #0]
 8003e84:	7c52      	ldrb	r2, [r2, #17]
 8003e86:	2a00      	cmp	r2, #0
 8003e88:	d102      	bne.n	8003e90 <ETH_SetMACConfig+0x5c>
 8003e8a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003e8e:	e000      	b.n	8003e92 <ETH_SetMACConfig+0x5e>
 8003e90:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8003e92:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	7c9b      	ldrb	r3, [r3, #18]
 8003e98:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8003e9a:	431a      	orrs	r2, r3
               macconf->Speed |
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8003ea0:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8003ea6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	7f1b      	ldrb	r3, [r3, #28]
 8003eac:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8003eae:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	7f5b      	ldrb	r3, [r3, #29]
 8003eb4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8003eb6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	7f92      	ldrb	r2, [r2, #30]
 8003ebc:	2a00      	cmp	r2, #0
 8003ebe:	d102      	bne.n	8003ec6 <ETH_SetMACConfig+0x92>
 8003ec0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003ec4:	e000      	b.n	8003ec8 <ETH_SetMACConfig+0x94>
 8003ec6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8003ec8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	7fdb      	ldrb	r3, [r3, #31]
 8003ece:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8003ed0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003ed8:	2a00      	cmp	r2, #0
 8003eda:	d102      	bne.n	8003ee2 <ETH_SetMACConfig+0xae>
 8003edc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003ee0:	e000      	b.n	8003ee4 <ETH_SetMACConfig+0xb0>
 8003ee2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8003ee4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8003eea:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ef2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8003ef4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8003efa:	4313      	orrs	r3, r2
 8003efc:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	4b56      	ldr	r3, [pc, #344]	; (8004060 <ETH_SetMACConfig+0x22c>)
 8003f06:	4013      	ands	r3, r2
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	68f9      	ldr	r1, [r7, #12]
 8003f0e:	430b      	orrs	r3, r1
 8003f10:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003f1e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f20:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003f28:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8003f2a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003f32:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8003f34:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8003f36:	683a      	ldr	r2, [r7, #0]
 8003f38:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8003f3c:	2a00      	cmp	r2, #0
 8003f3e:	d102      	bne.n	8003f46 <ETH_SetMACConfig+0x112>
 8003f40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f44:	e000      	b.n	8003f48 <ETH_SetMACConfig+0x114>
 8003f46:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8003f48:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8003f4a:	683b      	ldr	r3, [r7, #0]
 8003f4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8003f4e:	4313      	orrs	r3, r2
 8003f50:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4b42      	ldr	r3, [pc, #264]	; (8004064 <ETH_SetMACConfig+0x230>)
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	6812      	ldr	r2, [r2, #0]
 8003f60:	68f9      	ldr	r1, [r7, #12]
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f6c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68da      	ldr	r2, [r3, #12]
 8003f7c:	4b3a      	ldr	r3, [pc, #232]	; (8004068 <ETH_SetMACConfig+0x234>)
 8003f7e:	4013      	ands	r3, r2
 8003f80:	687a      	ldr	r2, [r7, #4]
 8003f82:	6812      	ldr	r2, [r2, #0]
 8003f84:	68f9      	ldr	r1, [r7, #12]
 8003f86:	430b      	orrs	r3, r1
 8003f88:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003f90:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003f96:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8003f98:	683a      	ldr	r2, [r7, #0]
 8003f9a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8003f9e:	2a00      	cmp	r2, #0
 8003fa0:	d101      	bne.n	8003fa6 <ETH_SetMACConfig+0x172>
 8003fa2:	2280      	movs	r2, #128	; 0x80
 8003fa4:	e000      	b.n	8003fa8 <ETH_SetMACConfig+0x174>
 8003fa6:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8003fa8:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fae:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003fba:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	6812      	ldr	r2, [r2, #0]
 8003fc4:	68f9      	ldr	r1, [r7, #12]
 8003fc6:	430b      	orrs	r3, r1
 8003fc8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8003fd0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8003fd8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe6:	f023 0103 	bic.w	r1, r3, #3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	430a      	orrs	r2, r1
 8003ff2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8003ffe:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8004002:	683b      	ldr	r3, [r7, #0]
 8004004:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8004014:	683a      	ldr	r2, [r7, #0]
 8004016:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800401a:	2a00      	cmp	r2, #0
 800401c:	d101      	bne.n	8004022 <ETH_SetMACConfig+0x1ee>
 800401e:	2240      	movs	r2, #64	; 0x40
 8004020:	e000      	b.n	8004024 <ETH_SetMACConfig+0x1f0>
 8004022:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8004024:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800402c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800402e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8004036:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8004044:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	430a      	orrs	r2, r1
 8004050:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8004054:	bf00      	nop
 8004056:	3714      	adds	r7, #20
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr
 8004060:	00048083 	.word	0x00048083
 8004064:	c0f88000 	.word	0xc0f88000
 8004068:	fffffef0 	.word	0xfffffef0

0800406c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	4b38      	ldr	r3, [pc, #224]	; (8004164 <ETH_SetDMAConfig+0xf8>)
 8004082:	4013      	ands	r3, r2
 8004084:	683a      	ldr	r2, [r7, #0]
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	6812      	ldr	r2, [r2, #0]
 800408c:	430b      	orrs	r3, r1
 800408e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004092:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	791b      	ldrb	r3, [r3, #4]
 8004098:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800409e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	7b1b      	ldrb	r3, [r3, #12]
 80040a4:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80040a6:	4313      	orrs	r3, r2
 80040a8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040b2:	685a      	ldr	r2, [r3, #4]
 80040b4:	4b2c      	ldr	r3, [pc, #176]	; (8004168 <ETH_SetDMAConfig+0xfc>)
 80040b6:	4013      	ands	r3, r2
 80040b8:	687a      	ldr	r2, [r7, #4]
 80040ba:	6812      	ldr	r2, [r2, #0]
 80040bc:	68f9      	ldr	r1, [r7, #12]
 80040be:	430b      	orrs	r3, r1
 80040c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040c4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	7b5b      	ldrb	r3, [r3, #13]
 80040ca:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80040d0:	4313      	orrs	r3, r2
 80040d2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80040dc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80040e0:	4b22      	ldr	r3, [pc, #136]	; (800416c <ETH_SetDMAConfig+0x100>)
 80040e2:	4013      	ands	r3, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	68f9      	ldr	r1, [r7, #12]
 80040ea:	430b      	orrs	r3, r1
 80040ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80040f0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	7d1b      	ldrb	r3, [r3, #20]
 80040fc:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80040fe:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	7f5b      	ldrb	r3, [r3, #29]
 8004104:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8004106:	4313      	orrs	r3, r2
 8004108:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004112:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8004116:	4b16      	ldr	r3, [pc, #88]	; (8004170 <ETH_SetDMAConfig+0x104>)
 8004118:	4013      	ands	r3, r2
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	6812      	ldr	r2, [r2, #0]
 800411e:	68f9      	ldr	r1, [r7, #12]
 8004120:	430b      	orrs	r3, r1
 8004122:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004126:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	7f1b      	ldrb	r3, [r3, #28]
 800412e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8004134:	4313      	orrs	r3, r2
 8004136:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004140:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <ETH_SetDMAConfig+0x108>)
 8004146:	4013      	ands	r3, r2
 8004148:	687a      	ldr	r2, [r7, #4]
 800414a:	6812      	ldr	r2, [r2, #0]
 800414c:	68f9      	ldr	r1, [r7, #12]
 800414e:	430b      	orrs	r3, r1
 8004150:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004154:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8004158:	bf00      	nop
 800415a:	3714      	adds	r7, #20
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr
 8004164:	ffff87fd 	.word	0xffff87fd
 8004168:	ffff2ffe 	.word	0xffff2ffe
 800416c:	fffec000 	.word	0xfffec000
 8004170:	ffc0efef 	.word	0xffc0efef
 8004174:	7fc0ffff 	.word	0x7fc0ffff

08004178 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b0a4      	sub	sp, #144	; 0x90
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8004180:	2301      	movs	r3, #1
 8004182:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8004186:	2300      	movs	r3, #0
 8004188:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800418a:	2300      	movs	r3, #0
 800418c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8004190:	2300      	movs	r3, #0
 8004192:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8004196:	2301      	movs	r3, #1
 8004198:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800419c:	2301      	movs	r3, #1
 800419e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80041ae:	2301      	movs	r3, #1
 80041b0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80041b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80041b8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80041ba:	2300      	movs	r3, #0
 80041bc:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80041c0:	2300      	movs	r3, #0
 80041c2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80041c4:	2300      	movs	r3, #0
 80041c6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80041d0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80041d4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80041d6:	2300      	movs	r3, #0
 80041d8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80041dc:	2300      	movs	r3, #0
 80041de:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80041e6:	2300      	movs	r3, #0
 80041e8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80041ec:	2300      	movs	r3, #0
 80041ee:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80041f2:	2300      	movs	r3, #0
 80041f4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80041f6:	2300      	movs	r3, #0
 80041f8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80041fa:	2300      	movs	r3, #0
 80041fc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80041fe:	2300      	movs	r3, #0
 8004200:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8004204:	2300      	movs	r3, #0
 8004206:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800420a:	2301      	movs	r3, #1
 800420c:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8004210:	2320      	movs	r3, #32
 8004212:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8004216:	2301      	movs	r3, #1
 8004218:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800421c:	2300      	movs	r3, #0
 800421e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8004222:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8004226:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8004228:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800422c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800422e:	2300      	movs	r3, #0
 8004230:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8004234:	2302      	movs	r3, #2
 8004236:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800423a:	2300      	movs	r3, #0
 800423c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8004246:	2300      	movs	r3, #0
 8004248:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800424c:	2301      	movs	r3, #1
 800424e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8004252:	2300      	movs	r3, #0
 8004254:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8004256:	2301      	movs	r3, #1
 8004258:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800425c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004260:	4619      	mov	r1, r3
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	f7ff fde6 	bl	8003e34 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8004268:	2301      	movs	r3, #1
 800426a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800426c:	2301      	movs	r3, #1
 800426e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8004270:	2300      	movs	r3, #0
 8004272:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800427a:	2300      	movs	r3, #0
 800427c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800427e:	2300      	movs	r3, #0
 8004280:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8004282:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004286:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8004288:	2300      	movs	r3, #0
 800428a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800428c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004290:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8004292:	2300      	movs	r3, #0
 8004294:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8004298:	f44f 7306 	mov.w	r3, #536	; 0x218
 800429c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800429e:	f107 0308 	add.w	r3, r7, #8
 80042a2:	4619      	mov	r1, r3
 80042a4:	6878      	ldr	r0, [r7, #4]
 80042a6:	f7ff fee1 	bl	800406c <ETH_SetDMAConfig>
}
 80042aa:	bf00      	nop
 80042ac:	3790      	adds	r7, #144	; 0x90
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}

080042b2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b085      	sub	sp, #20
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042ba:	2300      	movs	r3, #0
 80042bc:	60fb      	str	r3, [r7, #12]
 80042be:	e01d      	b.n	80042fc <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68d9      	ldr	r1, [r3, #12]
 80042c4:	68fa      	ldr	r2, [r7, #12]
 80042c6:	4613      	mov	r3, r2
 80042c8:	005b      	lsls	r3, r3, #1
 80042ca:	4413      	add	r3, r2
 80042cc:	00db      	lsls	r3, r3, #3
 80042ce:	440b      	add	r3, r1
 80042d0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2200      	movs	r2, #0
 80042d6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2200      	movs	r2, #0
 80042dc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	2200      	movs	r2, #0
 80042e2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2200      	movs	r2, #0
 80042e8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	3206      	adds	r2, #6
 80042f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	3301      	adds	r3, #1
 80042fa:	60fb      	str	r3, [r7, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2b03      	cmp	r3, #3
 8004300:	d9de      	bls.n	80042c0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2200      	movs	r2, #0
 8004306:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004310:	461a      	mov	r2, r3
 8004312:	2303      	movs	r3, #3
 8004314:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004324:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004334:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8004338:	bf00      	nop
 800433a:	3714      	adds	r7, #20
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800434c:	2300      	movs	r3, #0
 800434e:	60fb      	str	r3, [r7, #12]
 8004350:	e023      	b.n	800439a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6919      	ldr	r1, [r3, #16]
 8004356:	68fa      	ldr	r2, [r7, #12]
 8004358:	4613      	mov	r3, r2
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	4413      	add	r3, r2
 800435e:	00db      	lsls	r3, r3, #3
 8004360:	440b      	add	r3, r1
 8004362:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	2200      	movs	r2, #0
 8004368:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2200      	movs	r2, #0
 800436e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	2200      	movs	r2, #0
 8004374:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800437c:	68bb      	ldr	r3, [r7, #8]
 800437e:	2200      	movs	r2, #0
 8004380:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	2200      	movs	r2, #0
 8004386:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8004388:	68b9      	ldr	r1, [r7, #8]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	3212      	adds	r2, #18
 8004390:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	2b03      	cmp	r3, #3
 800439e:	d9d8      	bls.n	8004352 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043c6:	461a      	mov	r2, r3
 80043c8:	2303      	movs	r3, #3
 80043ca:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691a      	ldr	r2, [r3, #16]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043da:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80043ee:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80043f2:	bf00      	nop
 80043f4:	3714      	adds	r7, #20
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr
	...

08004400 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004400:	b480      	push	{r7}
 8004402:	b089      	sub	sp, #36	; 0x24
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
 8004408:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800440e:	4b89      	ldr	r3, [pc, #548]	; (8004634 <HAL_GPIO_Init+0x234>)
 8004410:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8004412:	e194      	b.n	800473e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	2101      	movs	r1, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa01 f303 	lsl.w	r3, r1, r3
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	2b00      	cmp	r3, #0
 8004428:	f000 8186 	beq.w	8004738 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b01      	cmp	r3, #1
 8004436:	d005      	beq.n	8004444 <HAL_GPIO_Init+0x44>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	f003 0303 	and.w	r3, r3, #3
 8004440:	2b02      	cmp	r3, #2
 8004442:	d130      	bne.n	80044a6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	2203      	movs	r2, #3
 8004450:	fa02 f303 	lsl.w	r3, r2, r3
 8004454:	43db      	mvns	r3, r3
 8004456:	69ba      	ldr	r2, [r7, #24]
 8004458:	4013      	ands	r3, r2
 800445a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	68da      	ldr	r2, [r3, #12]
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	005b      	lsls	r3, r3, #1
 8004464:	fa02 f303 	lsl.w	r3, r2, r3
 8004468:	69ba      	ldr	r2, [r7, #24]
 800446a:	4313      	orrs	r3, r2
 800446c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	69ba      	ldr	r2, [r7, #24]
 8004472:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800447a:	2201      	movs	r2, #1
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	fa02 f303 	lsl.w	r3, r2, r3
 8004482:	43db      	mvns	r3, r3
 8004484:	69ba      	ldr	r2, [r7, #24]
 8004486:	4013      	ands	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	091b      	lsrs	r3, r3, #4
 8004490:	f003 0201 	and.w	r2, r3, #1
 8004494:	69fb      	ldr	r3, [r7, #28]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	4313      	orrs	r3, r2
 800449e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	69ba      	ldr	r2, [r7, #24]
 80044a4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a6:	683b      	ldr	r3, [r7, #0]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	f003 0303 	and.w	r3, r3, #3
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d017      	beq.n	80044e2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80044b8:	69fb      	ldr	r3, [r7, #28]
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	2203      	movs	r2, #3
 80044be:	fa02 f303 	lsl.w	r3, r2, r3
 80044c2:	43db      	mvns	r3, r3
 80044c4:	69ba      	ldr	r2, [r7, #24]
 80044c6:	4013      	ands	r3, r2
 80044c8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689a      	ldr	r2, [r3, #8]
 80044ce:	69fb      	ldr	r3, [r7, #28]
 80044d0:	005b      	lsls	r3, r3, #1
 80044d2:	fa02 f303 	lsl.w	r3, r2, r3
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	4313      	orrs	r3, r2
 80044da:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	69ba      	ldr	r2, [r7, #24]
 80044e0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	f003 0303 	and.w	r3, r3, #3
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d123      	bne.n	8004536 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	08da      	lsrs	r2, r3, #3
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	3208      	adds	r2, #8
 80044f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	f003 0307 	and.w	r3, r3, #7
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	220f      	movs	r2, #15
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	43db      	mvns	r3, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4013      	ands	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0307 	and.w	r3, r3, #7
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	fa02 f303 	lsl.w	r3, r2, r3
 8004522:	69ba      	ldr	r2, [r7, #24]
 8004524:	4313      	orrs	r3, r2
 8004526:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	08da      	lsrs	r2, r3, #3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	3208      	adds	r2, #8
 8004530:	69b9      	ldr	r1, [r7, #24]
 8004532:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800453c:	69fb      	ldr	r3, [r7, #28]
 800453e:	005b      	lsls	r3, r3, #1
 8004540:	2203      	movs	r2, #3
 8004542:	fa02 f303 	lsl.w	r3, r2, r3
 8004546:	43db      	mvns	r3, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4013      	ands	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	f003 0203 	and.w	r2, r3, #3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	005b      	lsls	r3, r3, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	4313      	orrs	r3, r2
 8004562:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	69ba      	ldr	r2, [r7, #24]
 8004568:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 80e0 	beq.w	8004738 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004578:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <HAL_GPIO_Init+0x238>)
 800457a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800457e:	4a2e      	ldr	r2, [pc, #184]	; (8004638 <HAL_GPIO_Init+0x238>)
 8004580:	f043 0302 	orr.w	r3, r3, #2
 8004584:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004588:	4b2b      	ldr	r3, [pc, #172]	; (8004638 <HAL_GPIO_Init+0x238>)
 800458a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800458e:	f003 0302 	and.w	r3, r3, #2
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004596:	4a29      	ldr	r2, [pc, #164]	; (800463c <HAL_GPIO_Init+0x23c>)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3302      	adds	r3, #2
 800459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a20      	ldr	r2, [pc, #128]	; (8004640 <HAL_GPIO_Init+0x240>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d052      	beq.n	8004668 <HAL_GPIO_Init+0x268>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a1f      	ldr	r2, [pc, #124]	; (8004644 <HAL_GPIO_Init+0x244>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d031      	beq.n	800462e <HAL_GPIO_Init+0x22e>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a1e      	ldr	r2, [pc, #120]	; (8004648 <HAL_GPIO_Init+0x248>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d02b      	beq.n	800462a <HAL_GPIO_Init+0x22a>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a1d      	ldr	r2, [pc, #116]	; (800464c <HAL_GPIO_Init+0x24c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d025      	beq.n	8004626 <HAL_GPIO_Init+0x226>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a1c      	ldr	r2, [pc, #112]	; (8004650 <HAL_GPIO_Init+0x250>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d01f      	beq.n	8004622 <HAL_GPIO_Init+0x222>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <HAL_GPIO_Init+0x254>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d019      	beq.n	800461e <HAL_GPIO_Init+0x21e>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a1a      	ldr	r2, [pc, #104]	; (8004658 <HAL_GPIO_Init+0x258>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d013      	beq.n	800461a <HAL_GPIO_Init+0x21a>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a19      	ldr	r2, [pc, #100]	; (800465c <HAL_GPIO_Init+0x25c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d00d      	beq.n	8004616 <HAL_GPIO_Init+0x216>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	4a18      	ldr	r2, [pc, #96]	; (8004660 <HAL_GPIO_Init+0x260>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d007      	beq.n	8004612 <HAL_GPIO_Init+0x212>
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a17      	ldr	r2, [pc, #92]	; (8004664 <HAL_GPIO_Init+0x264>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d101      	bne.n	800460e <HAL_GPIO_Init+0x20e>
 800460a:	2309      	movs	r3, #9
 800460c:	e02d      	b.n	800466a <HAL_GPIO_Init+0x26a>
 800460e:	230a      	movs	r3, #10
 8004610:	e02b      	b.n	800466a <HAL_GPIO_Init+0x26a>
 8004612:	2308      	movs	r3, #8
 8004614:	e029      	b.n	800466a <HAL_GPIO_Init+0x26a>
 8004616:	2307      	movs	r3, #7
 8004618:	e027      	b.n	800466a <HAL_GPIO_Init+0x26a>
 800461a:	2306      	movs	r3, #6
 800461c:	e025      	b.n	800466a <HAL_GPIO_Init+0x26a>
 800461e:	2305      	movs	r3, #5
 8004620:	e023      	b.n	800466a <HAL_GPIO_Init+0x26a>
 8004622:	2304      	movs	r3, #4
 8004624:	e021      	b.n	800466a <HAL_GPIO_Init+0x26a>
 8004626:	2303      	movs	r3, #3
 8004628:	e01f      	b.n	800466a <HAL_GPIO_Init+0x26a>
 800462a:	2302      	movs	r3, #2
 800462c:	e01d      	b.n	800466a <HAL_GPIO_Init+0x26a>
 800462e:	2301      	movs	r3, #1
 8004630:	e01b      	b.n	800466a <HAL_GPIO_Init+0x26a>
 8004632:	bf00      	nop
 8004634:	58000080 	.word	0x58000080
 8004638:	58024400 	.word	0x58024400
 800463c:	58000400 	.word	0x58000400
 8004640:	58020000 	.word	0x58020000
 8004644:	58020400 	.word	0x58020400
 8004648:	58020800 	.word	0x58020800
 800464c:	58020c00 	.word	0x58020c00
 8004650:	58021000 	.word	0x58021000
 8004654:	58021400 	.word	0x58021400
 8004658:	58021800 	.word	0x58021800
 800465c:	58021c00 	.word	0x58021c00
 8004660:	58022000 	.word	0x58022000
 8004664:	58022400 	.word	0x58022400
 8004668:	2300      	movs	r3, #0
 800466a:	69fa      	ldr	r2, [r7, #28]
 800466c:	f002 0203 	and.w	r2, r2, #3
 8004670:	0092      	lsls	r2, r2, #2
 8004672:	4093      	lsls	r3, r2
 8004674:	69ba      	ldr	r2, [r7, #24]
 8004676:	4313      	orrs	r3, r2
 8004678:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800467a:	4938      	ldr	r1, [pc, #224]	; (800475c <HAL_GPIO_Init+0x35c>)
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	089b      	lsrs	r3, r3, #2
 8004680:	3302      	adds	r3, #2
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004688:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004690:	693b      	ldr	r3, [r7, #16]
 8004692:	43db      	mvns	r3, r3
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4013      	ands	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	685b      	ldr	r3, [r3, #4]
 800469e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d003      	beq.n	80046ae <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80046ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046b2:	69bb      	ldr	r3, [r7, #24]
 80046b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80046b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80046dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80046e0:	69bb      	ldr	r3, [r7, #24]
 80046e2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	43db      	mvns	r3, r3
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	4013      	ands	r3, r2
 80046f2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	4313      	orrs	r3, r2
 8004706:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	69ba      	ldr	r2, [r7, #24]
 800470c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	43db      	mvns	r3, r3
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	4013      	ands	r3, r2
 800471c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d003      	beq.n	8004732 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800472a:	69ba      	ldr	r2, [r7, #24]
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	4313      	orrs	r3, r2
 8004730:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	3301      	adds	r3, #1
 800473c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	69fb      	ldr	r3, [r7, #28]
 8004744:	fa22 f303 	lsr.w	r3, r2, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	f47f ae63 	bne.w	8004414 <HAL_GPIO_Init+0x14>
  }
}
 800474e:	bf00      	nop
 8004750:	bf00      	nop
 8004752:	3724      	adds	r7, #36	; 0x24
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	58000400 	.word	0x58000400

08004760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004760:	b480      	push	{r7}
 8004762:	b083      	sub	sp, #12
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	460b      	mov	r3, r1
 800476a:	807b      	strh	r3, [r7, #2]
 800476c:	4613      	mov	r3, r2
 800476e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004770:	787b      	ldrb	r3, [r7, #1]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d003      	beq.n	800477e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004776:	887a      	ldrh	r2, [r7, #2]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800477c:	e003      	b.n	8004786 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800477e:	887b      	ldrh	r3, [r7, #2]
 8004780:	041a      	lsls	r2, r3, #16
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	619a      	str	r2, [r3, #24]
}
 8004786:	bf00      	nop
 8004788:	370c      	adds	r7, #12
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr

08004792 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004792:	b480      	push	{r7}
 8004794:	b085      	sub	sp, #20
 8004796:	af00      	add	r7, sp, #0
 8004798:	6078      	str	r0, [r7, #4]
 800479a:	460b      	mov	r3, r1
 800479c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80047a4:	887a      	ldrh	r2, [r7, #2]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	4013      	ands	r3, r2
 80047aa:	041a      	lsls	r2, r3, #16
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	43d9      	mvns	r1, r3
 80047b0:	887b      	ldrh	r3, [r7, #2]
 80047b2:	400b      	ands	r3, r1
 80047b4:	431a      	orrs	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	619a      	str	r2, [r3, #24]
}
 80047ba:	bf00      	nop
 80047bc:	3714      	adds	r7, #20
 80047be:	46bd      	mov	sp, r7
 80047c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c4:	4770      	bx	lr
	...

080047c8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b083      	sub	sp, #12
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80047d0:	4a08      	ldr	r2, [pc, #32]	; (80047f4 <HAL_HSEM_FastTake+0x2c>)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	3320      	adds	r3, #32
 80047d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047da:	4a07      	ldr	r2, [pc, #28]	; (80047f8 <HAL_HSEM_FastTake+0x30>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d101      	bne.n	80047e4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80047e0:	2300      	movs	r3, #0
 80047e2:	e000      	b.n	80047e6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
 80047f2:	bf00      	nop
 80047f4:	58026400 	.word	0x58026400
 80047f8:	80000300 	.word	0x80000300

080047fc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b083      	sub	sp, #12
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
 8004804:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8004806:	4906      	ldr	r1, [pc, #24]	; (8004820 <HAL_HSEM_Release+0x24>)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8004814:	bf00      	nop
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr
 8004820:	58026400 	.word	0x58026400

08004824 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004826:	b08f      	sub	sp, #60	; 0x3c
 8004828:	af0a      	add	r7, sp, #40	; 0x28
 800482a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d101      	bne.n	8004836 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e116      	b.n	8004a64 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b00      	cmp	r3, #0
 8004846:	d106      	bne.n	8004856 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f7fc fcd9 	bl	8001208 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2203      	movs	r2, #3
 800485a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004866:	2b00      	cmp	r3, #0
 8004868:	d102      	bne.n	8004870 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2200      	movs	r2, #0
 800486e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4618      	mov	r0, r3
 8004876:	f004 fb2d 	bl	8008ed4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	603b      	str	r3, [r7, #0]
 8004880:	687e      	ldr	r6, [r7, #4]
 8004882:	466d      	mov	r5, sp
 8004884:	f106 0410 	add.w	r4, r6, #16
 8004888:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800488c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800488e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004890:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004894:	e885 0003 	stmia.w	r5, {r0, r1}
 8004898:	1d33      	adds	r3, r6, #4
 800489a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800489c:	6838      	ldr	r0, [r7, #0]
 800489e:	f004 faab 	bl	8008df8 <USB_CoreInit>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d005      	beq.n	80048b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2202      	movs	r2, #2
 80048ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e0d7      	b.n	8004a64 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2100      	movs	r1, #0
 80048ba:	4618      	mov	r0, r3
 80048bc:	f004 fb1b 	bl	8008ef6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048c0:	2300      	movs	r3, #0
 80048c2:	73fb      	strb	r3, [r7, #15]
 80048c4:	e04a      	b.n	800495c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80048c6:	7bfa      	ldrb	r2, [r7, #15]
 80048c8:	6879      	ldr	r1, [r7, #4]
 80048ca:	4613      	mov	r3, r2
 80048cc:	00db      	lsls	r3, r3, #3
 80048ce:	4413      	add	r3, r2
 80048d0:	009b      	lsls	r3, r3, #2
 80048d2:	440b      	add	r3, r1
 80048d4:	333d      	adds	r3, #61	; 0x3d
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80048da:	7bfa      	ldrb	r2, [r7, #15]
 80048dc:	6879      	ldr	r1, [r7, #4]
 80048de:	4613      	mov	r3, r2
 80048e0:	00db      	lsls	r3, r3, #3
 80048e2:	4413      	add	r3, r2
 80048e4:	009b      	lsls	r3, r3, #2
 80048e6:	440b      	add	r3, r1
 80048e8:	333c      	adds	r3, #60	; 0x3c
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80048ee:	7bfa      	ldrb	r2, [r7, #15]
 80048f0:	7bfb      	ldrb	r3, [r7, #15]
 80048f2:	b298      	uxth	r0, r3
 80048f4:	6879      	ldr	r1, [r7, #4]
 80048f6:	4613      	mov	r3, r2
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4413      	add	r3, r2
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	440b      	add	r3, r1
 8004900:	3344      	adds	r3, #68	; 0x44
 8004902:	4602      	mov	r2, r0
 8004904:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004906:	7bfa      	ldrb	r2, [r7, #15]
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	4613      	mov	r3, r2
 800490c:	00db      	lsls	r3, r3, #3
 800490e:	4413      	add	r3, r2
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	440b      	add	r3, r1
 8004914:	3340      	adds	r3, #64	; 0x40
 8004916:	2200      	movs	r2, #0
 8004918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800491a:	7bfa      	ldrb	r2, [r7, #15]
 800491c:	6879      	ldr	r1, [r7, #4]
 800491e:	4613      	mov	r3, r2
 8004920:	00db      	lsls	r3, r3, #3
 8004922:	4413      	add	r3, r2
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	440b      	add	r3, r1
 8004928:	3348      	adds	r3, #72	; 0x48
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800492e:	7bfa      	ldrb	r2, [r7, #15]
 8004930:	6879      	ldr	r1, [r7, #4]
 8004932:	4613      	mov	r3, r2
 8004934:	00db      	lsls	r3, r3, #3
 8004936:	4413      	add	r3, r2
 8004938:	009b      	lsls	r3, r3, #2
 800493a:	440b      	add	r3, r1
 800493c:	334c      	adds	r3, #76	; 0x4c
 800493e:	2200      	movs	r2, #0
 8004940:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004942:	7bfa      	ldrb	r2, [r7, #15]
 8004944:	6879      	ldr	r1, [r7, #4]
 8004946:	4613      	mov	r3, r2
 8004948:	00db      	lsls	r3, r3, #3
 800494a:	4413      	add	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	440b      	add	r3, r1
 8004950:	3354      	adds	r3, #84	; 0x54
 8004952:	2200      	movs	r2, #0
 8004954:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004956:	7bfb      	ldrb	r3, [r7, #15]
 8004958:	3301      	adds	r3, #1
 800495a:	73fb      	strb	r3, [r7, #15]
 800495c:	7bfa      	ldrb	r2, [r7, #15]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	429a      	cmp	r2, r3
 8004964:	d3af      	bcc.n	80048c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004966:	2300      	movs	r3, #0
 8004968:	73fb      	strb	r3, [r7, #15]
 800496a:	e044      	b.n	80049f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004994:	7bfa      	ldrb	r2, [r7, #15]
 8004996:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004998:	7bfa      	ldrb	r2, [r7, #15]
 800499a:	6879      	ldr	r1, [r7, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	00db      	lsls	r3, r3, #3
 80049a0:	4413      	add	r3, r2
 80049a2:	009b      	lsls	r3, r3, #2
 80049a4:	440b      	add	r3, r1
 80049a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80049aa:	2200      	movs	r2, #0
 80049ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80049ae:	7bfa      	ldrb	r2, [r7, #15]
 80049b0:	6879      	ldr	r1, [r7, #4]
 80049b2:	4613      	mov	r3, r2
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4413      	add	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	440b      	add	r3, r1
 80049bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80049c4:	7bfa      	ldrb	r2, [r7, #15]
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	4613      	mov	r3, r2
 80049ca:	00db      	lsls	r3, r3, #3
 80049cc:	4413      	add	r3, r2
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	440b      	add	r3, r1
 80049d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80049da:	7bfa      	ldrb	r2, [r7, #15]
 80049dc:	6879      	ldr	r1, [r7, #4]
 80049de:	4613      	mov	r3, r2
 80049e0:	00db      	lsls	r3, r3, #3
 80049e2:	4413      	add	r3, r2
 80049e4:	009b      	lsls	r3, r3, #2
 80049e6:	440b      	add	r3, r1
 80049e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80049ec:	2200      	movs	r2, #0
 80049ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049f0:	7bfb      	ldrb	r3, [r7, #15]
 80049f2:	3301      	adds	r3, #1
 80049f4:	73fb      	strb	r3, [r7, #15]
 80049f6:	7bfa      	ldrb	r2, [r7, #15]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d3b5      	bcc.n	800496c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	603b      	str	r3, [r7, #0]
 8004a06:	687e      	ldr	r6, [r7, #4]
 8004a08:	466d      	mov	r5, sp
 8004a0a:	f106 0410 	add.w	r4, r6, #16
 8004a0e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a10:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a12:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004a14:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004a16:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004a1a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004a1e:	1d33      	adds	r3, r6, #4
 8004a20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004a22:	6838      	ldr	r0, [r7, #0]
 8004a24:	f004 fab4 	bl	8008f90 <USB_DevInit>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d005      	beq.n	8004a3a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e014      	b.n	8004a64 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2201      	movs	r2, #1
 8004a46:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4e:	2b01      	cmp	r3, #1
 8004a50:	d102      	bne.n	8004a58 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004a52:	6878      	ldr	r0, [r7, #4]
 8004a54:	f000 f80a 	bl	8004a6c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f004 fc72 	bl	8009346 <USB_DevDisconnect>

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3714      	adds	r7, #20
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a6c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2200      	movs	r2, #0
 8004a86:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	699b      	ldr	r3, [r3, #24]
 8004a8e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a9a:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_PCDEx_ActivateLPM+0x44>)
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	68fa      	ldr	r2, [r7, #12]
 8004aa0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	3714      	adds	r7, #20
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	10000003 	.word	0x10000003

08004ab4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8004abc:	4b29      	ldr	r3, [pc, #164]	; (8004b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8004abe:	68db      	ldr	r3, [r3, #12]
 8004ac0:	f003 0307 	and.w	r3, r3, #7
 8004ac4:	2b06      	cmp	r3, #6
 8004ac6:	d00a      	beq.n	8004ade <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8004ac8:	4b26      	ldr	r3, [pc, #152]	; (8004b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ad0:	687a      	ldr	r2, [r7, #4]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d001      	beq.n	8004ada <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e040      	b.n	8004b5c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	e03e      	b.n	8004b5c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8004ade:	4b21      	ldr	r3, [pc, #132]	; (8004b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ae0:	68db      	ldr	r3, [r3, #12]
 8004ae2:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8004ae6:	491f      	ldr	r1, [pc, #124]	; (8004b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8004aee:	f7fc fcdd 	bl	80014ac <HAL_GetTick>
 8004af2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004af4:	e009      	b.n	8004b0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004af6:	f7fc fcd9 	bl	80014ac <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b04:	d901      	bls.n	8004b0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e028      	b.n	8004b5c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8004b0a:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b16:	d1ee      	bne.n	8004af6 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b1e      	cmp	r3, #30
 8004b1c:	d008      	beq.n	8004b30 <HAL_PWREx_ConfigSupply+0x7c>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2b2e      	cmp	r3, #46	; 0x2e
 8004b22:	d005      	beq.n	8004b30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b1d      	cmp	r3, #29
 8004b28:	d002      	beq.n	8004b30 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2b2d      	cmp	r3, #45	; 0x2d
 8004b2e:	d114      	bne.n	8004b5a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8004b30:	f7fc fcbc 	bl	80014ac <HAL_GetTick>
 8004b34:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b36:	e009      	b.n	8004b4c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8004b38:	f7fc fcb8 	bl	80014ac <HAL_GetTick>
 8004b3c:	4602      	mov	r2, r0
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004b46:	d901      	bls.n	8004b4c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8004b48:	2301      	movs	r3, #1
 8004b4a:	e007      	b.n	8004b5c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_PWREx_ConfigSupply+0xb0>)
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b58:	d1ee      	bne.n	8004b38 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8004b5a:	2300      	movs	r3, #0
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3710      	adds	r7, #16
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	58024800 	.word	0x58024800

08004b68 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8004b6c:	4b05      	ldr	r3, [pc, #20]	; (8004b84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004b6e:	68db      	ldr	r3, [r3, #12]
 8004b70:	4a04      	ldr	r2, [pc, #16]	; (8004b84 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8004b72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004b76:	60d3      	str	r3, [r2, #12]
}
 8004b78:	bf00      	nop
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr
 8004b82:	bf00      	nop
 8004b84:	58024800 	.word	0x58024800

08004b88 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b08c      	sub	sp, #48	; 0x30
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d102      	bne.n	8004b9c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	f000 bc1d 	b.w	80053d6 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f003 0301 	and.w	r3, r3, #1
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 8087 	beq.w	8004cb8 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004baa:	4b99      	ldr	r3, [pc, #612]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004bac:	691b      	ldr	r3, [r3, #16]
 8004bae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004bb4:	4b96      	ldr	r3, [pc, #600]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bb8:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8004bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bbc:	2b10      	cmp	r3, #16
 8004bbe:	d007      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x48>
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	2b18      	cmp	r3, #24
 8004bc4:	d110      	bne.n	8004be8 <HAL_RCC_OscConfig+0x60>
 8004bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d10b      	bne.n	8004be8 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	4b8f      	ldr	r3, [pc, #572]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d06c      	beq.n	8004cb6 <HAL_RCC_OscConfig+0x12e>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d168      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e3f6      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bf0:	d106      	bne.n	8004c00 <HAL_RCC_OscConfig+0x78>
 8004bf2:	4b87      	ldr	r3, [pc, #540]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a86      	ldr	r2, [pc, #536]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bfc:	6013      	str	r3, [r2, #0]
 8004bfe:	e02e      	b.n	8004c5e <HAL_RCC_OscConfig+0xd6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d10c      	bne.n	8004c22 <HAL_RCC_OscConfig+0x9a>
 8004c08:	4b81      	ldr	r3, [pc, #516]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a80      	ldr	r2, [pc, #512]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c12:	6013      	str	r3, [r2, #0]
 8004c14:	4b7e      	ldr	r3, [pc, #504]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	4a7d      	ldr	r2, [pc, #500]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c1e:	6013      	str	r3, [r2, #0]
 8004c20:	e01d      	b.n	8004c5e <HAL_RCC_OscConfig+0xd6>
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c2a:	d10c      	bne.n	8004c46 <HAL_RCC_OscConfig+0xbe>
 8004c2c:	4b78      	ldr	r3, [pc, #480]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a77      	ldr	r2, [pc, #476]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c32:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c36:	6013      	str	r3, [r2, #0]
 8004c38:	4b75      	ldr	r3, [pc, #468]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a74      	ldr	r2, [pc, #464]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c42:	6013      	str	r3, [r2, #0]
 8004c44:	e00b      	b.n	8004c5e <HAL_RCC_OscConfig+0xd6>
 8004c46:	4b72      	ldr	r3, [pc, #456]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a71      	ldr	r2, [pc, #452]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	4b6f      	ldr	r3, [pc, #444]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a6e      	ldr	r2, [pc, #440]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c58:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c5c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d013      	beq.n	8004c8e <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c66:	f7fc fc21 	bl	80014ac <HAL_GetTick>
 8004c6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c6c:	e008      	b.n	8004c80 <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c6e:	f7fc fc1d 	bl	80014ac <HAL_GetTick>
 8004c72:	4602      	mov	r2, r0
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	2b64      	cmp	r3, #100	; 0x64
 8004c7a:	d901      	bls.n	8004c80 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	e3aa      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8004c80:	4b63      	ldr	r3, [pc, #396]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0f0      	beq.n	8004c6e <HAL_RCC_OscConfig+0xe6>
 8004c8c:	e014      	b.n	8004cb8 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8e:	f7fc fc0d 	bl	80014ac <HAL_GetTick>
 8004c92:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004c94:	e008      	b.n	8004ca8 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c96:	f7fc fc09 	bl	80014ac <HAL_GetTick>
 8004c9a:	4602      	mov	r2, r0
 8004c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c9e:	1ad3      	subs	r3, r2, r3
 8004ca0:	2b64      	cmp	r3, #100	; 0x64
 8004ca2:	d901      	bls.n	8004ca8 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e396      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8004ca8:	4b59      	ldr	r3, [pc, #356]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d1f0      	bne.n	8004c96 <HAL_RCC_OscConfig+0x10e>
 8004cb4:	e000      	b.n	8004cb8 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cb6:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f003 0302 	and.w	r3, r3, #2
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	f000 80cb 	beq.w	8004e5c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004cc6:	4b52      	ldr	r3, [pc, #328]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004cc8:	691b      	ldr	r3, [r3, #16]
 8004cca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004cce:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004cd0:	4b4f      	ldr	r3, [pc, #316]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8004cd6:	6a3b      	ldr	r3, [r7, #32]
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d007      	beq.n	8004cec <HAL_RCC_OscConfig+0x164>
 8004cdc:	6a3b      	ldr	r3, [r7, #32]
 8004cde:	2b18      	cmp	r3, #24
 8004ce0:	d156      	bne.n	8004d90 <HAL_RCC_OscConfig+0x208>
 8004ce2:	69fb      	ldr	r3, [r7, #28]
 8004ce4:	f003 0303 	and.w	r3, r3, #3
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d151      	bne.n	8004d90 <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cec:	4b48      	ldr	r3, [pc, #288]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d005      	beq.n	8004d04 <HAL_RCC_OscConfig+0x17c>
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	68db      	ldr	r3, [r3, #12]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d101      	bne.n	8004d04 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	e368      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d04:	4b42      	ldr	r3, [pc, #264]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f023 0219 	bic.w	r2, r3, #25
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	493f      	ldr	r1, [pc, #252]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004d16:	f7fc fbc9 	bl	80014ac <HAL_GetTick>
 8004d1a:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d1c:	e008      	b.n	8004d30 <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d1e:	f7fc fbc5 	bl	80014ac <HAL_GetTick>
 8004d22:	4602      	mov	r2, r0
 8004d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d26:	1ad3      	subs	r3, r2, r3
 8004d28:	2b02      	cmp	r3, #2
 8004d2a:	d901      	bls.n	8004d30 <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 8004d2c:	2303      	movs	r3, #3
 8004d2e:	e352      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004d30:	4b37      	ldr	r3, [pc, #220]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d0f0      	beq.n	8004d1e <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d3c:	f7fc fbe6 	bl	800150c <HAL_GetREVID>
 8004d40:	4603      	mov	r3, r0
 8004d42:	f241 0203 	movw	r2, #4099	; 0x1003
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d817      	bhi.n	8004d7a <HAL_RCC_OscConfig+0x1f2>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	691b      	ldr	r3, [r3, #16]
 8004d4e:	2b40      	cmp	r3, #64	; 0x40
 8004d50:	d108      	bne.n	8004d64 <HAL_RCC_OscConfig+0x1dc>
 8004d52:	4b2f      	ldr	r3, [pc, #188]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004d5a:	4a2d      	ldr	r2, [pc, #180]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d60:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d62:	e07b      	b.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d64:	4b2a      	ldr	r3, [pc, #168]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	691b      	ldr	r3, [r3, #16]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	4927      	ldr	r1, [pc, #156]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d74:	4313      	orrs	r3, r2
 8004d76:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d78:	e070      	b.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d7a:	4b25      	ldr	r3, [pc, #148]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	691b      	ldr	r3, [r3, #16]
 8004d86:	061b      	lsls	r3, r3, #24
 8004d88:	4921      	ldr	r1, [pc, #132]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d8e:	e065      	b.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d048      	beq.n	8004e2a <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8004d98:	4b1d      	ldr	r3, [pc, #116]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f023 0219 	bic.w	r2, r3, #25
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	491a      	ldr	r1, [pc, #104]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004da6:	4313      	orrs	r3, r2
 8004da8:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004daa:	f7fc fb7f 	bl	80014ac <HAL_GetTick>
 8004dae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004db0:	e008      	b.n	8004dc4 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004db2:	f7fc fb7b 	bl	80014ac <HAL_GetTick>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	1ad3      	subs	r3, r2, r3
 8004dbc:	2b02      	cmp	r3, #2
 8004dbe:	d901      	bls.n	8004dc4 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 8004dc0:	2303      	movs	r3, #3
 8004dc2:	e308      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8004dc4:	4b12      	ldr	r3, [pc, #72]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0304 	and.w	r3, r3, #4
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d0f0      	beq.n	8004db2 <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004dd0:	f7fc fb9c 	bl	800150c <HAL_GetREVID>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	f241 0203 	movw	r2, #4099	; 0x1003
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d81a      	bhi.n	8004e14 <HAL_RCC_OscConfig+0x28c>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	691b      	ldr	r3, [r3, #16]
 8004de2:	2b40      	cmp	r3, #64	; 0x40
 8004de4:	d108      	bne.n	8004df8 <HAL_RCC_OscConfig+0x270>
 8004de6:	4b0a      	ldr	r3, [pc, #40]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8004dee:	4a08      	ldr	r2, [pc, #32]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004df4:	6053      	str	r3, [r2, #4]
 8004df6:	e031      	b.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
 8004df8:	4b05      	ldr	r3, [pc, #20]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	031b      	lsls	r3, r3, #12
 8004e06:	4902      	ldr	r1, [pc, #8]	; (8004e10 <HAL_RCC_OscConfig+0x288>)
 8004e08:	4313      	orrs	r3, r2
 8004e0a:	604b      	str	r3, [r1, #4]
 8004e0c:	e026      	b.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
 8004e0e:	bf00      	nop
 8004e10:	58024400 	.word	0x58024400
 8004e14:	4b9a      	ldr	r3, [pc, #616]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	061b      	lsls	r3, r3, #24
 8004e22:	4997      	ldr	r1, [pc, #604]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e24:	4313      	orrs	r3, r2
 8004e26:	604b      	str	r3, [r1, #4]
 8004e28:	e018      	b.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e2a:	4b95      	ldr	r3, [pc, #596]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a94      	ldr	r2, [pc, #592]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e30:	f023 0301 	bic.w	r3, r3, #1
 8004e34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e36:	f7fc fb39 	bl	80014ac <HAL_GetTick>
 8004e3a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e3e:	f7fc fb35 	bl	80014ac <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e2c2      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8004e50:	4b8b      	ldr	r3, [pc, #556]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0304 	and.w	r3, r3, #4
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1f0      	bne.n	8004e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f003 0310 	and.w	r3, r3, #16
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 80a9 	beq.w	8004fbc <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004e6a:	4b85      	ldr	r3, [pc, #532]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e72:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8004e74:	4b82      	ldr	r3, [pc, #520]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e78:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8004e7a:	69bb      	ldr	r3, [r7, #24]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d007      	beq.n	8004e90 <HAL_RCC_OscConfig+0x308>
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	2b18      	cmp	r3, #24
 8004e84:	d13a      	bne.n	8004efc <HAL_RCC_OscConfig+0x374>
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d135      	bne.n	8004efc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004e90:	4b7b      	ldr	r3, [pc, #492]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d005      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x320>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	2b80      	cmp	r3, #128	; 0x80
 8004ea2:	d001      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e296      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ea8:	f7fc fb30 	bl	800150c <HAL_GetREVID>
 8004eac:	4603      	mov	r3, r0
 8004eae:	f241 0203 	movw	r2, #4099	; 0x1003
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d817      	bhi.n	8004ee6 <HAL_RCC_OscConfig+0x35e>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	2b20      	cmp	r3, #32
 8004ebc:	d108      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x348>
 8004ebe:	4b70      	ldr	r3, [pc, #448]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004ec6:	4a6e      	ldr	r2, [pc, #440]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ec8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ecc:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ece:	e075      	b.n	8004fbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ed0:	4b6b      	ldr	r3, [pc, #428]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6a1b      	ldr	r3, [r3, #32]
 8004edc:	069b      	lsls	r3, r3, #26
 8004ede:	4968      	ldr	r1, [pc, #416]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ee0:	4313      	orrs	r3, r2
 8004ee2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004ee4:	e06a      	b.n	8004fbc <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004ee6:	4b66      	ldr	r3, [pc, #408]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	061b      	lsls	r3, r3, #24
 8004ef4:	4962      	ldr	r1, [pc, #392]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8004efa:	e05f      	b.n	8004fbc <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d042      	beq.n	8004f8a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8004f04:	4b5e      	ldr	r3, [pc, #376]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a5d      	ldr	r2, [pc, #372]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f0a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fc facc 	bl	80014ac <HAL_GetTick>
 8004f14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f18:	f7fc fac8 	bl	80014ac <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e255      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8004f2a:	4b55      	ldr	r3, [pc, #340]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8004f36:	f7fc fae9 	bl	800150c <HAL_GetREVID>
 8004f3a:	4603      	mov	r3, r0
 8004f3c:	f241 0203 	movw	r2, #4099	; 0x1003
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d817      	bhi.n	8004f74 <HAL_RCC_OscConfig+0x3ec>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a1b      	ldr	r3, [r3, #32]
 8004f48:	2b20      	cmp	r3, #32
 8004f4a:	d108      	bne.n	8004f5e <HAL_RCC_OscConfig+0x3d6>
 8004f4c:	4b4c      	ldr	r3, [pc, #304]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8004f54:	4a4a      	ldr	r2, [pc, #296]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5a:	6053      	str	r3, [r2, #4]
 8004f5c:	e02e      	b.n	8004fbc <HAL_RCC_OscConfig+0x434>
 8004f5e:	4b48      	ldr	r3, [pc, #288]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	069b      	lsls	r3, r3, #26
 8004f6c:	4944      	ldr	r1, [pc, #272]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f6e:	4313      	orrs	r3, r2
 8004f70:	604b      	str	r3, [r1, #4]
 8004f72:	e023      	b.n	8004fbc <HAL_RCC_OscConfig+0x434>
 8004f74:	4b42      	ldr	r3, [pc, #264]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f76:	68db      	ldr	r3, [r3, #12]
 8004f78:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	061b      	lsls	r3, r3, #24
 8004f82:	493f      	ldr	r1, [pc, #252]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60cb      	str	r3, [r1, #12]
 8004f88:	e018      	b.n	8004fbc <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8004f8a:	4b3d      	ldr	r3, [pc, #244]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	4a3c      	ldr	r2, [pc, #240]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f96:	f7fc fa89 	bl	80014ac <HAL_GetTick>
 8004f9a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 8004f9e:	f7fc fa85 	bl	80014ac <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e212      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8004fb0:	4b33      	ldr	r3, [pc, #204]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d1f0      	bne.n	8004f9e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0308 	and.w	r3, r3, #8
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d036      	beq.n	8005036 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d019      	beq.n	8005004 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fd0:	4b2b      	ldr	r3, [pc, #172]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fd4:	4a2a      	ldr	r2, [pc, #168]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fdc:	f7fc fa66 	bl	80014ac <HAL_GetTick>
 8004fe0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004fe2:	e008      	b.n	8004ff6 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fe4:	f7fc fa62 	bl	80014ac <HAL_GetTick>
 8004fe8:	4602      	mov	r2, r0
 8004fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fec:	1ad3      	subs	r3, r2, r3
 8004fee:	2b02      	cmp	r3, #2
 8004ff0:	d901      	bls.n	8004ff6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8004ff2:	2303      	movs	r3, #3
 8004ff4:	e1ef      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8004ff6:	4b22      	ldr	r3, [pc, #136]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8004ff8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ffa:	f003 0302 	and.w	r3, r3, #2
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d0f0      	beq.n	8004fe4 <HAL_RCC_OscConfig+0x45c>
 8005002:	e018      	b.n	8005036 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005004:	4b1e      	ldr	r3, [pc, #120]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8005006:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005008:	4a1d      	ldr	r2, [pc, #116]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 800500a:	f023 0301 	bic.w	r3, r3, #1
 800500e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005010:	f7fc fa4c 	bl	80014ac <HAL_GetTick>
 8005014:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8005016:	e008      	b.n	800502a <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005018:	f7fc fa48 	bl	80014ac <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	2b02      	cmp	r3, #2
 8005024:	d901      	bls.n	800502a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8005026:	2303      	movs	r3, #3
 8005028:	e1d5      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d1f0      	bne.n	8005018 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f003 0320 	and.w	r3, r3, #32
 800503e:	2b00      	cmp	r3, #0
 8005040:	d039      	beq.n	80050b6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d01c      	beq.n	8005084 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800504a:	4b0d      	ldr	r3, [pc, #52]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a0c      	ldr	r2, [pc, #48]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8005050:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005054:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005056:	f7fc fa29 	bl	80014ac <HAL_GetTick>
 800505a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800505c:	e008      	b.n	8005070 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800505e:	f7fc fa25 	bl	80014ac <HAL_GetTick>
 8005062:	4602      	mov	r2, r0
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	1ad3      	subs	r3, r2, r3
 8005068:	2b02      	cmp	r3, #2
 800506a:	d901      	bls.n	8005070 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800506c:	2303      	movs	r3, #3
 800506e:	e1b2      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8005070:	4b03      	ldr	r3, [pc, #12]	; (8005080 <HAL_RCC_OscConfig+0x4f8>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005078:	2b00      	cmp	r3, #0
 800507a:	d0f0      	beq.n	800505e <HAL_RCC_OscConfig+0x4d6>
 800507c:	e01b      	b.n	80050b6 <HAL_RCC_OscConfig+0x52e>
 800507e:	bf00      	nop
 8005080:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005084:	4b9b      	ldr	r3, [pc, #620]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a9a      	ldr	r2, [pc, #616]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800508a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800508e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8005090:	f7fc fa0c 	bl	80014ac <HAL_GetTick>
 8005094:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8005096:	e008      	b.n	80050aa <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8005098:	f7fc fa08 	bl	80014ac <HAL_GetTick>
 800509c:	4602      	mov	r2, r0
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	1ad3      	subs	r3, r2, r3
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d901      	bls.n	80050aa <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e195      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80050aa:	4b92      	ldr	r3, [pc, #584]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d1f0      	bne.n	8005098 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b00      	cmp	r3, #0
 80050c0:	f000 8081 	beq.w	80051c6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80050c4:	4b8c      	ldr	r3, [pc, #560]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a8b      	ldr	r2, [pc, #556]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80050d0:	f7fc f9ec 	bl	80014ac <HAL_GetTick>
 80050d4:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050d6:	e008      	b.n	80050ea <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80050d8:	f7fc f9e8 	bl	80014ac <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	2b64      	cmp	r3, #100	; 0x64
 80050e4:	d901      	bls.n	80050ea <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80050e6:	2303      	movs	r3, #3
 80050e8:	e175      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80050ea:	4b83      	ldr	r3, [pc, #524]	; (80052f8 <HAL_RCC_OscConfig+0x770>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d0f0      	beq.n	80050d8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	689b      	ldr	r3, [r3, #8]
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d106      	bne.n	800510c <HAL_RCC_OscConfig+0x584>
 80050fe:	4b7d      	ldr	r3, [pc, #500]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005102:	4a7c      	ldr	r2, [pc, #496]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005104:	f043 0301 	orr.w	r3, r3, #1
 8005108:	6713      	str	r3, [r2, #112]	; 0x70
 800510a:	e02d      	b.n	8005168 <HAL_RCC_OscConfig+0x5e0>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	689b      	ldr	r3, [r3, #8]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d10c      	bne.n	800512e <HAL_RCC_OscConfig+0x5a6>
 8005114:	4b77      	ldr	r3, [pc, #476]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005118:	4a76      	ldr	r2, [pc, #472]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800511a:	f023 0301 	bic.w	r3, r3, #1
 800511e:	6713      	str	r3, [r2, #112]	; 0x70
 8005120:	4b74      	ldr	r3, [pc, #464]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005122:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005124:	4a73      	ldr	r2, [pc, #460]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005126:	f023 0304 	bic.w	r3, r3, #4
 800512a:	6713      	str	r3, [r2, #112]	; 0x70
 800512c:	e01c      	b.n	8005168 <HAL_RCC_OscConfig+0x5e0>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b05      	cmp	r3, #5
 8005134:	d10c      	bne.n	8005150 <HAL_RCC_OscConfig+0x5c8>
 8005136:	4b6f      	ldr	r3, [pc, #444]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	4a6e      	ldr	r2, [pc, #440]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800513c:	f043 0304 	orr.w	r3, r3, #4
 8005140:	6713      	str	r3, [r2, #112]	; 0x70
 8005142:	4b6c      	ldr	r3, [pc, #432]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005144:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005146:	4a6b      	ldr	r2, [pc, #428]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005148:	f043 0301 	orr.w	r3, r3, #1
 800514c:	6713      	str	r3, [r2, #112]	; 0x70
 800514e:	e00b      	b.n	8005168 <HAL_RCC_OscConfig+0x5e0>
 8005150:	4b68      	ldr	r3, [pc, #416]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005152:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005154:	4a67      	ldr	r2, [pc, #412]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	6713      	str	r3, [r2, #112]	; 0x70
 800515c:	4b65      	ldr	r3, [pc, #404]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800515e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005160:	4a64      	ldr	r2, [pc, #400]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005162:	f023 0304 	bic.w	r3, r3, #4
 8005166:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d015      	beq.n	800519c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005170:	f7fc f99c 	bl	80014ac <HAL_GetTick>
 8005174:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8005176:	e00a      	b.n	800518e <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005178:	f7fc f998 	bl	80014ac <HAL_GetTick>
 800517c:	4602      	mov	r2, r0
 800517e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	f241 3288 	movw	r2, #5000	; 0x1388
 8005186:	4293      	cmp	r3, r2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e123      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800518e:	4b59      	ldr	r3, [pc, #356]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005192:	f003 0302 	and.w	r3, r3, #2
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0ee      	beq.n	8005178 <HAL_RCC_OscConfig+0x5f0>
 800519a:	e014      	b.n	80051c6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800519c:	f7fc f986 	bl	80014ac <HAL_GetTick>
 80051a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a4:	f7fc f982 	bl	80014ac <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e10d      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80051ba:	4b4e      	ldr	r3, [pc, #312]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80051bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1ee      	bne.n	80051a4 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f000 8102 	beq.w	80053d4 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80051d0:	4b48      	ldr	r3, [pc, #288]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80051d2:	691b      	ldr	r3, [r3, #16]
 80051d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80051d8:	2b18      	cmp	r3, #24
 80051da:	f000 80bd 	beq.w	8005358 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b02      	cmp	r3, #2
 80051e4:	f040 809e 	bne.w	8005324 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051e8:	4b42      	ldr	r3, [pc, #264]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a41      	ldr	r2, [pc, #260]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80051ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f4:	f7fc f95a 	bl	80014ac <HAL_GetTick>
 80051f8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80051fa:	e008      	b.n	800520e <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051fc:	f7fc f956 	bl	80014ac <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	2b02      	cmp	r3, #2
 8005208:	d901      	bls.n	800520e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800520a:	2303      	movs	r3, #3
 800520c:	e0e3      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800520e:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005216:	2b00      	cmp	r3, #0
 8005218:	d1f0      	bne.n	80051fc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800521a:	4b36      	ldr	r3, [pc, #216]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800521c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800521e:	4b37      	ldr	r3, [pc, #220]	; (80052fc <HAL_RCC_OscConfig+0x774>)
 8005220:	4013      	ands	r3, r2
 8005222:	687a      	ldr	r2, [r7, #4]
 8005224:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	430a      	orrs	r2, r1
 800522e:	4931      	ldr	r1, [pc, #196]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005230:	4313      	orrs	r3, r2
 8005232:	628b      	str	r3, [r1, #40]	; 0x28
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	3b01      	subs	r3, #1
 800523a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	3b01      	subs	r3, #1
 8005244:	025b      	lsls	r3, r3, #9
 8005246:	b29b      	uxth	r3, r3
 8005248:	431a      	orrs	r2, r3
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	3b01      	subs	r3, #1
 8005250:	041b      	lsls	r3, r3, #16
 8005252:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8005256:	431a      	orrs	r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525c:	3b01      	subs	r3, #1
 800525e:	061b      	lsls	r3, r3, #24
 8005260:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8005264:	4923      	ldr	r1, [pc, #140]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005266:	4313      	orrs	r3, r2
 8005268:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800526a:	4b22      	ldr	r3, [pc, #136]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800526c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800526e:	4a21      	ldr	r2, [pc, #132]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005270:	f023 0301 	bic.w	r3, r3, #1
 8005274:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8005276:	4b1f      	ldr	r3, [pc, #124]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005278:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800527a:	4b21      	ldr	r3, [pc, #132]	; (8005300 <HAL_RCC_OscConfig+0x778>)
 800527c:	4013      	ands	r3, r2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005282:	00d2      	lsls	r2, r2, #3
 8005284:	491b      	ldr	r1, [pc, #108]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005286:	4313      	orrs	r3, r2
 8005288:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800528a:	4b1a      	ldr	r3, [pc, #104]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800528c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800528e:	f023 020c 	bic.w	r2, r3, #12
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	4917      	ldr	r1, [pc, #92]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 8005298:	4313      	orrs	r3, r2
 800529a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800529c:	4b15      	ldr	r3, [pc, #84]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	f023 0202 	bic.w	r2, r3, #2
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052a8:	4912      	ldr	r1, [pc, #72]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052aa:	4313      	orrs	r3, r2
 80052ac:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80052ae:	4b11      	ldr	r3, [pc, #68]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b2:	4a10      	ldr	r2, [pc, #64]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052ba:	4b0e      	ldr	r3, [pc, #56]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052be:	4a0d      	ldr	r2, [pc, #52]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80052c6:	4b0b      	ldr	r3, [pc, #44]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ca:	4a0a      	ldr	r2, [pc, #40]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80052d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80052d2:	4b08      	ldr	r3, [pc, #32]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052d6:	4a07      	ldr	r2, [pc, #28]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052d8:	f043 0301 	orr.w	r3, r3, #1
 80052dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052de:	4b05      	ldr	r3, [pc, #20]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a04      	ldr	r2, [pc, #16]	; (80052f4 <HAL_RCC_OscConfig+0x76c>)
 80052e4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80052e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ea:	f7fc f8df 	bl	80014ac <HAL_GetTick>
 80052ee:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80052f0:	e011      	b.n	8005316 <HAL_RCC_OscConfig+0x78e>
 80052f2:	bf00      	nop
 80052f4:	58024400 	.word	0x58024400
 80052f8:	58024800 	.word	0x58024800
 80052fc:	fffffc0c 	.word	0xfffffc0c
 8005300:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005304:	f7fc f8d2 	bl	80014ac <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	2b02      	cmp	r3, #2
 8005310:	d901      	bls.n	8005316 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8005312:	2303      	movs	r3, #3
 8005314:	e05f      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8005316:	4b32      	ldr	r3, [pc, #200]	; (80053e0 <HAL_RCC_OscConfig+0x858>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800531e:	2b00      	cmp	r3, #0
 8005320:	d0f0      	beq.n	8005304 <HAL_RCC_OscConfig+0x77c>
 8005322:	e057      	b.n	80053d4 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005324:	4b2e      	ldr	r3, [pc, #184]	; (80053e0 <HAL_RCC_OscConfig+0x858>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4a2d      	ldr	r2, [pc, #180]	; (80053e0 <HAL_RCC_OscConfig+0x858>)
 800532a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800532e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005330:	f7fc f8bc 	bl	80014ac <HAL_GetTick>
 8005334:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8005336:	e008      	b.n	800534a <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005338:	f7fc f8b8 	bl	80014ac <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e045      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800534a:	4b25      	ldr	r3, [pc, #148]	; (80053e0 <HAL_RCC_OscConfig+0x858>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005352:	2b00      	cmp	r3, #0
 8005354:	d1f0      	bne.n	8005338 <HAL_RCC_OscConfig+0x7b0>
 8005356:	e03d      	b.n	80053d4 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8005358:	4b21      	ldr	r3, [pc, #132]	; (80053e0 <HAL_RCC_OscConfig+0x858>)
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800535e:	4b20      	ldr	r3, [pc, #128]	; (80053e0 <HAL_RCC_OscConfig+0x858>)
 8005360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005362:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b01      	cmp	r3, #1
 800536a:	d031      	beq.n	80053d0 <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f003 0203 	and.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005376:	429a      	cmp	r2, r3
 8005378:	d12a      	bne.n	80053d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	091b      	lsrs	r3, r3, #4
 800537e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005386:	429a      	cmp	r2, r3
 8005388:	d122      	bne.n	80053d0 <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005394:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8005396:	429a      	cmp	r2, r3
 8005398:	d11a      	bne.n	80053d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	0a5b      	lsrs	r3, r3, #9
 800539e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80053a6:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d111      	bne.n	80053d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	0c1b      	lsrs	r3, r3, #16
 80053b0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053b8:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d108      	bne.n	80053d0 <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	0e1b      	lsrs	r3, r3, #24
 80053c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053ca:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e000      	b.n	80053d6 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3730      	adds	r7, #48	; 0x30
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
 80053de:	bf00      	nop
 80053e0:	58024400 	.word	0x58024400

080053e4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b086      	sub	sp, #24
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e19c      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053f8:	4b8a      	ldr	r3, [pc, #552]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 030f 	and.w	r3, r3, #15
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	429a      	cmp	r2, r3
 8005404:	d910      	bls.n	8005428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005406:	4b87      	ldr	r3, [pc, #540]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f023 020f 	bic.w	r2, r3, #15
 800540e:	4985      	ldr	r1, [pc, #532]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	4313      	orrs	r3, r2
 8005414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005416:	4b83      	ldr	r3, [pc, #524]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f003 030f 	and.w	r3, r3, #15
 800541e:	683a      	ldr	r2, [r7, #0]
 8005420:	429a      	cmp	r2, r3
 8005422:	d001      	beq.n	8005428 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e184      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 0304 	and.w	r3, r3, #4
 8005430:	2b00      	cmp	r3, #0
 8005432:	d010      	beq.n	8005456 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	691a      	ldr	r2, [r3, #16]
 8005438:	4b7b      	ldr	r3, [pc, #492]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 800543a:	699b      	ldr	r3, [r3, #24]
 800543c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005440:	429a      	cmp	r2, r3
 8005442:	d908      	bls.n	8005456 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005444:	4b78      	ldr	r3, [pc, #480]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	4975      	ldr	r1, [pc, #468]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005452:	4313      	orrs	r3, r2
 8005454:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 0308 	and.w	r3, r3, #8
 800545e:	2b00      	cmp	r3, #0
 8005460:	d010      	beq.n	8005484 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	695a      	ldr	r2, [r3, #20]
 8005466:	4b70      	ldr	r3, [pc, #448]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005468:	69db      	ldr	r3, [r3, #28]
 800546a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800546e:	429a      	cmp	r2, r3
 8005470:	d908      	bls.n	8005484 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005472:	4b6d      	ldr	r3, [pc, #436]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	695b      	ldr	r3, [r3, #20]
 800547e:	496a      	ldr	r1, [pc, #424]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005480:	4313      	orrs	r3, r2
 8005482:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0310 	and.w	r3, r3, #16
 800548c:	2b00      	cmp	r3, #0
 800548e:	d010      	beq.n	80054b2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	699a      	ldr	r2, [r3, #24]
 8005494:	4b64      	ldr	r3, [pc, #400]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005496:	69db      	ldr	r3, [r3, #28]
 8005498:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800549c:	429a      	cmp	r2, r3
 800549e:	d908      	bls.n	80054b2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80054a0:	4b61      	ldr	r3, [pc, #388]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	699b      	ldr	r3, [r3, #24]
 80054ac:	495e      	ldr	r1, [pc, #376]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 0320 	and.w	r3, r3, #32
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d010      	beq.n	80054e0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	69da      	ldr	r2, [r3, #28]
 80054c2:	4b59      	ldr	r3, [pc, #356]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054c4:	6a1b      	ldr	r3, [r3, #32]
 80054c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80054ca:	429a      	cmp	r2, r3
 80054cc:	d908      	bls.n	80054e0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80054ce:	4b56      	ldr	r3, [pc, #344]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054d0:	6a1b      	ldr	r3, [r3, #32]
 80054d2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	69db      	ldr	r3, [r3, #28]
 80054da:	4953      	ldr	r1, [pc, #332]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0302 	and.w	r3, r3, #2
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d010      	beq.n	800550e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68da      	ldr	r2, [r3, #12]
 80054f0:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054f2:	699b      	ldr	r3, [r3, #24]
 80054f4:	f003 030f 	and.w	r3, r3, #15
 80054f8:	429a      	cmp	r2, r3
 80054fa:	d908      	bls.n	800550e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054fc:	4b4a      	ldr	r3, [pc, #296]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	f023 020f 	bic.w	r2, r3, #15
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	4947      	ldr	r1, [pc, #284]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 800550a:	4313      	orrs	r3, r2
 800550c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0301 	and.w	r3, r3, #1
 8005516:	2b00      	cmp	r3, #0
 8005518:	d055      	beq.n	80055c6 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800551a:	4b43      	ldr	r3, [pc, #268]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 800551c:	699b      	ldr	r3, [r3, #24]
 800551e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4940      	ldr	r1, [pc, #256]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005528:	4313      	orrs	r3, r2
 800552a:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	2b02      	cmp	r3, #2
 8005532:	d107      	bne.n	8005544 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8005534:	4b3c      	ldr	r3, [pc, #240]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d121      	bne.n	8005584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e0f6      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b03      	cmp	r3, #3
 800554a:	d107      	bne.n	800555c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800554c:	4b36      	ldr	r3, [pc, #216]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0ea      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b01      	cmp	r3, #1
 8005562:	d107      	bne.n	8005574 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8005564:	4b30      	ldr	r3, [pc, #192]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0de      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8005574:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0304 	and.w	r3, r3, #4
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0d6      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005584:	4b28      	ldr	r3, [pc, #160]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005586:	691b      	ldr	r3, [r3, #16]
 8005588:	f023 0207 	bic.w	r2, r3, #7
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	685b      	ldr	r3, [r3, #4]
 8005590:	4925      	ldr	r1, [pc, #148]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 8005592:	4313      	orrs	r3, r2
 8005594:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005596:	f7fb ff89 	bl	80014ac <HAL_GetTick>
 800559a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800559c:	e00a      	b.n	80055b4 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800559e:	f7fb ff85 	bl	80014ac <HAL_GetTick>
 80055a2:	4602      	mov	r2, r0
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ac:	4293      	cmp	r3, r2
 80055ae:	d901      	bls.n	80055b4 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80055b0:	2303      	movs	r3, #3
 80055b2:	e0be      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055b4:	4b1c      	ldr	r3, [pc, #112]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80055b6:	691b      	ldr	r3, [r3, #16]
 80055b8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	685b      	ldr	r3, [r3, #4]
 80055c0:	00db      	lsls	r3, r3, #3
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d1eb      	bne.n	800559e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f003 0302 	and.w	r3, r3, #2
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d010      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	68da      	ldr	r2, [r3, #12]
 80055d6:	4b14      	ldr	r3, [pc, #80]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	f003 030f 	and.w	r3, r3, #15
 80055de:	429a      	cmp	r2, r3
 80055e0:	d208      	bcs.n	80055f4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e2:	4b11      	ldr	r3, [pc, #68]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	f023 020f 	bic.w	r2, r3, #15
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68db      	ldr	r3, [r3, #12]
 80055ee:	490e      	ldr	r1, [pc, #56]	; (8005628 <HAL_RCC_ClockConfig+0x244>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80055f4:	4b0b      	ldr	r3, [pc, #44]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d214      	bcs.n	800562c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 020f 	bic.w	r2, r3, #15
 800560a:	4906      	ldr	r1, [pc, #24]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	4313      	orrs	r3, r2
 8005610:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005612:	4b04      	ldr	r3, [pc, #16]	; (8005624 <HAL_RCC_ClockConfig+0x240>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f003 030f 	and.w	r3, r3, #15
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	429a      	cmp	r2, r3
 800561e:	d005      	beq.n	800562c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	e086      	b.n	8005732 <HAL_RCC_ClockConfig+0x34e>
 8005624:	52002000 	.word	0x52002000
 8005628:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	d010      	beq.n	800565a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	4b3f      	ldr	r3, [pc, #252]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 800563e:	699b      	ldr	r3, [r3, #24]
 8005640:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005644:	429a      	cmp	r2, r3
 8005646:	d208      	bcs.n	800565a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8005648:	4b3c      	ldr	r3, [pc, #240]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 800564a:	699b      	ldr	r3, [r3, #24]
 800564c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	4939      	ldr	r1, [pc, #228]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 8005656:	4313      	orrs	r3, r2
 8005658:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f003 0308 	and.w	r3, r3, #8
 8005662:	2b00      	cmp	r3, #0
 8005664:	d010      	beq.n	8005688 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	695a      	ldr	r2, [r3, #20]
 800566a:	4b34      	ldr	r3, [pc, #208]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 800566c:	69db      	ldr	r3, [r3, #28]
 800566e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005672:	429a      	cmp	r2, r3
 8005674:	d208      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8005676:	4b31      	ldr	r3, [pc, #196]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	492e      	ldr	r1, [pc, #184]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 8005684:	4313      	orrs	r3, r2
 8005686:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	d010      	beq.n	80056b6 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	699a      	ldr	r2, [r3, #24]
 8005698:	4b28      	ldr	r3, [pc, #160]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 800569a:	69db      	ldr	r3, [r3, #28]
 800569c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d208      	bcs.n	80056b6 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80056a4:	4b25      	ldr	r3, [pc, #148]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	4922      	ldr	r1, [pc, #136]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 80056b2:	4313      	orrs	r3, r2
 80056b4:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f003 0320 	and.w	r3, r3, #32
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d010      	beq.n	80056e4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	69da      	ldr	r2, [r3, #28]
 80056c6:	4b1d      	ldr	r3, [pc, #116]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 80056c8:	6a1b      	ldr	r3, [r3, #32]
 80056ca:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d208      	bcs.n	80056e4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 80056d2:	4b1a      	ldr	r3, [pc, #104]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 80056d4:	6a1b      	ldr	r3, [r3, #32]
 80056d6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	69db      	ldr	r3, [r3, #28]
 80056de:	4917      	ldr	r1, [pc, #92]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 80056e0:	4313      	orrs	r3, r2
 80056e2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80056e4:	f000 f834 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 80056e8:	4602      	mov	r2, r0
 80056ea:	4b14      	ldr	r3, [pc, #80]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	0a1b      	lsrs	r3, r3, #8
 80056f0:	f003 030f 	and.w	r3, r3, #15
 80056f4:	4912      	ldr	r1, [pc, #72]	; (8005740 <HAL_RCC_ClockConfig+0x35c>)
 80056f6:	5ccb      	ldrb	r3, [r1, r3]
 80056f8:	f003 031f 	and.w	r3, r3, #31
 80056fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005700:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005702:	4b0e      	ldr	r3, [pc, #56]	; (800573c <HAL_RCC_ClockConfig+0x358>)
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	f003 030f 	and.w	r3, r3, #15
 800570a:	4a0d      	ldr	r2, [pc, #52]	; (8005740 <HAL_RCC_ClockConfig+0x35c>)
 800570c:	5cd3      	ldrb	r3, [r2, r3]
 800570e:	f003 031f 	and.w	r3, r3, #31
 8005712:	693a      	ldr	r2, [r7, #16]
 8005714:	fa22 f303 	lsr.w	r3, r2, r3
 8005718:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <HAL_RCC_ClockConfig+0x360>)
 800571a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800571c:	4a0a      	ldr	r2, [pc, #40]	; (8005748 <HAL_RCC_ClockConfig+0x364>)
 800571e:	693b      	ldr	r3, [r7, #16]
 8005720:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8005722:	4b0a      	ldr	r3, [pc, #40]	; (800574c <HAL_RCC_ClockConfig+0x368>)
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	4618      	mov	r0, r3
 8005728:	f7fb fe76 	bl	8001418 <HAL_InitTick>
 800572c:	4603      	mov	r3, r0
 800572e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3718      	adds	r7, #24
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	58024400 	.word	0x58024400
 8005740:	0800947c 	.word	0x0800947c
 8005744:	24000004 	.word	0x24000004
 8005748:	24000000 	.word	0x24000000
 800574c:	24000008 	.word	0x24000008

08005750 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	b089      	sub	sp, #36	; 0x24
 8005754:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005756:	4bb3      	ldr	r3, [pc, #716]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005758:	691b      	ldr	r3, [r3, #16]
 800575a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800575e:	2b18      	cmp	r3, #24
 8005760:	f200 8155 	bhi.w	8005a0e <HAL_RCC_GetSysClockFreq+0x2be>
 8005764:	a201      	add	r2, pc, #4	; (adr r2, 800576c <HAL_RCC_GetSysClockFreq+0x1c>)
 8005766:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576a:	bf00      	nop
 800576c:	080057d1 	.word	0x080057d1
 8005770:	08005a0f 	.word	0x08005a0f
 8005774:	08005a0f 	.word	0x08005a0f
 8005778:	08005a0f 	.word	0x08005a0f
 800577c:	08005a0f 	.word	0x08005a0f
 8005780:	08005a0f 	.word	0x08005a0f
 8005784:	08005a0f 	.word	0x08005a0f
 8005788:	08005a0f 	.word	0x08005a0f
 800578c:	080057f7 	.word	0x080057f7
 8005790:	08005a0f 	.word	0x08005a0f
 8005794:	08005a0f 	.word	0x08005a0f
 8005798:	08005a0f 	.word	0x08005a0f
 800579c:	08005a0f 	.word	0x08005a0f
 80057a0:	08005a0f 	.word	0x08005a0f
 80057a4:	08005a0f 	.word	0x08005a0f
 80057a8:	08005a0f 	.word	0x08005a0f
 80057ac:	080057fd 	.word	0x080057fd
 80057b0:	08005a0f 	.word	0x08005a0f
 80057b4:	08005a0f 	.word	0x08005a0f
 80057b8:	08005a0f 	.word	0x08005a0f
 80057bc:	08005a0f 	.word	0x08005a0f
 80057c0:	08005a0f 	.word	0x08005a0f
 80057c4:	08005a0f 	.word	0x08005a0f
 80057c8:	08005a0f 	.word	0x08005a0f
 80057cc:	08005803 	.word	0x08005803
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80057d0:	4b94      	ldr	r3, [pc, #592]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f003 0320 	and.w	r3, r3, #32
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d009      	beq.n	80057f0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 80057dc:	4b91      	ldr	r3, [pc, #580]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	08db      	lsrs	r3, r3, #3
 80057e2:	f003 0303 	and.w	r3, r3, #3
 80057e6:	4a90      	ldr	r2, [pc, #576]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057e8:	fa22 f303 	lsr.w	r3, r2, r3
 80057ec:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 80057ee:	e111      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80057f0:	4b8d      	ldr	r3, [pc, #564]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80057f2:	61bb      	str	r3, [r7, #24]
    break;
 80057f4:	e10e      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 80057f6:	4b8d      	ldr	r3, [pc, #564]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80057f8:	61bb      	str	r3, [r7, #24]
    break;
 80057fa:	e10b      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 80057fc:	4b8c      	ldr	r3, [pc, #560]	; (8005a30 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80057fe:	61bb      	str	r3, [r7, #24]
    break;
 8005800:	e108      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005802:	4b88      	ldr	r3, [pc, #544]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005806:	f003 0303 	and.w	r3, r3, #3
 800580a:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800580c:	4b85      	ldr	r3, [pc, #532]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800580e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005810:	091b      	lsrs	r3, r3, #4
 8005812:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005816:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8005818:	4b82      	ldr	r3, [pc, #520]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	f003 0301 	and.w	r3, r3, #1
 8005820:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8005822:	4b80      	ldr	r3, [pc, #512]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	08db      	lsrs	r3, r3, #3
 8005828:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800582c:	68fa      	ldr	r2, [r7, #12]
 800582e:	fb02 f303 	mul.w	r3, r2, r3
 8005832:	ee07 3a90 	vmov	s15, r3
 8005836:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800583a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 80e1 	beq.w	8005a08 <HAL_RCC_GetSysClockFreq+0x2b8>
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	2b02      	cmp	r3, #2
 800584a:	f000 8083 	beq.w	8005954 <HAL_RCC_GetSysClockFreq+0x204>
 800584e:	697b      	ldr	r3, [r7, #20]
 8005850:	2b02      	cmp	r3, #2
 8005852:	f200 80a1 	bhi.w	8005998 <HAL_RCC_GetSysClockFreq+0x248>
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d003      	beq.n	8005864 <HAL_RCC_GetSysClockFreq+0x114>
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	2b01      	cmp	r3, #1
 8005860:	d056      	beq.n	8005910 <HAL_RCC_GetSysClockFreq+0x1c0>
 8005862:	e099      	b.n	8005998 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005864:	4b6f      	ldr	r3, [pc, #444]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 0320 	and.w	r3, r3, #32
 800586c:	2b00      	cmp	r3, #0
 800586e:	d02d      	beq.n	80058cc <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005870:	4b6c      	ldr	r3, [pc, #432]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	08db      	lsrs	r3, r3, #3
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	4a6b      	ldr	r2, [pc, #428]	; (8005a28 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800587c:	fa22 f303 	lsr.w	r3, r2, r3
 8005880:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	ee07 3a90 	vmov	s15, r3
 8005888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	ee07 3a90 	vmov	s15, r3
 8005892:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005896:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800589a:	4b62      	ldr	r3, [pc, #392]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800589c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800589e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058a2:	ee07 3a90 	vmov	s15, r3
 80058a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80058ae:	eddf 5a61 	vldr	s11, [pc, #388]	; 8005a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80058be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80058c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 80058ca:	e087      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80058d6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8005a38 <HAL_RCC_GetSysClockFreq+0x2e8>
 80058da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80058de:	4b51      	ldr	r3, [pc, #324]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80058e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80058e6:	ee07 3a90 	vmov	s15, r3
 80058ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80058ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80058f2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8005a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80058f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80058fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80058fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005906:	ee67 7a27 	vmul.f32	s15, s14, s15
 800590a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800590e:	e065      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	ee07 3a90 	vmov	s15, r3
 8005916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800591a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8005a3c <HAL_RCC_GetSysClockFreq+0x2ec>
 800591e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005922:	4b40      	ldr	r3, [pc, #256]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800592a:	ee07 3a90 	vmov	s15, r3
 800592e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005932:	ed97 6a02 	vldr	s12, [r7, #8]
 8005936:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8005a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800593a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800593e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800594a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800594e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005952:	e043      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	ee07 3a90 	vmov	s15, r3
 800595a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800595e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8005a40 <HAL_RCC_GetSysClockFreq+0x2f0>
 8005962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005966:	4b2f      	ldr	r3, [pc, #188]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800596e:	ee07 3a90 	vmov	s15, r3
 8005972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005976:	ed97 6a02 	vldr	s12, [r7, #8]
 800597a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8005a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 800597e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800598a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800598e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005996:	e021      	b.n	80059dc <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	ee07 3a90 	vmov	s15, r3
 800599e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8005a3c <HAL_RCC_GetSysClockFreq+0x2ec>
 80059a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80059aa:	4b1e      	ldr	r3, [pc, #120]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80059b2:	ee07 3a90 	vmov	s15, r3
 80059b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80059ba:	ed97 6a02 	vldr	s12, [r7, #8]
 80059be:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8005a34 <HAL_RCC_GetSysClockFreq+0x2e4>
 80059c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80059c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80059ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80059ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80059d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80059d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80059da:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 80059dc:	4b11      	ldr	r3, [pc, #68]	; (8005a24 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80059de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059e0:	0a5b      	lsrs	r3, r3, #9
 80059e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80059e6:	3301      	adds	r3, #1
 80059e8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	ee07 3a90 	vmov	s15, r3
 80059f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80059f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80059f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80059fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005a00:	ee17 3a90 	vmov	r3, s15
 8005a04:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8005a06:	e005      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8005a08:	2300      	movs	r3, #0
 8005a0a:	61bb      	str	r3, [r7, #24]
    break;
 8005a0c:	e002      	b.n	8005a14 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8005a0e:	4b07      	ldr	r3, [pc, #28]	; (8005a2c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8005a10:	61bb      	str	r3, [r7, #24]
    break;
 8005a12:	bf00      	nop
  }

  return sysclockfreq;
 8005a14:	69bb      	ldr	r3, [r7, #24]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3724      	adds	r7, #36	; 0x24
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	58024400 	.word	0x58024400
 8005a28:	03d09000 	.word	0x03d09000
 8005a2c:	003d0900 	.word	0x003d0900
 8005a30:	007a1200 	.word	0x007a1200
 8005a34:	46000000 	.word	0x46000000
 8005a38:	4c742400 	.word	0x4c742400
 8005a3c:	4a742400 	.word	0x4a742400
 8005a40:	4af42400 	.word	0x4af42400

08005a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8005a4a:	f7ff fe81 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	4b10      	ldr	r3, [pc, #64]	; (8005a94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a52:	699b      	ldr	r3, [r3, #24]
 8005a54:	0a1b      	lsrs	r3, r3, #8
 8005a56:	f003 030f 	and.w	r3, r3, #15
 8005a5a:	490f      	ldr	r1, [pc, #60]	; (8005a98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a5c:	5ccb      	ldrb	r3, [r1, r3]
 8005a5e:	f003 031f 	and.w	r3, r3, #31
 8005a62:	fa22 f303 	lsr.w	r3, r2, r3
 8005a66:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8005a68:	4b0a      	ldr	r3, [pc, #40]	; (8005a94 <HAL_RCC_GetHCLKFreq+0x50>)
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f003 030f 	and.w	r3, r3, #15
 8005a70:	4a09      	ldr	r2, [pc, #36]	; (8005a98 <HAL_RCC_GetHCLKFreq+0x54>)
 8005a72:	5cd3      	ldrb	r3, [r2, r3]
 8005a74:	f003 031f 	and.w	r3, r3, #31
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	4a07      	ldr	r2, [pc, #28]	; (8005a9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a80:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8005a82:	4a07      	ldr	r2, [pc, #28]	; (8005aa0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8005a88:	4b04      	ldr	r3, [pc, #16]	; (8005a9c <HAL_RCC_GetHCLKFreq+0x58>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3708      	adds	r7, #8
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}
 8005a94:	58024400 	.word	0x58024400
 8005a98:	0800947c 	.word	0x0800947c
 8005a9c:	24000004 	.word	0x24000004
 8005aa0:	24000000 	.word	0x24000000

08005aa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8005aa8:	f7ff ffcc 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005aac:	4602      	mov	r2, r0
 8005aae:	4b06      	ldr	r3, [pc, #24]	; (8005ac8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ab0:	69db      	ldr	r3, [r3, #28]
 8005ab2:	091b      	lsrs	r3, r3, #4
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	4904      	ldr	r1, [pc, #16]	; (8005acc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005aba:	5ccb      	ldrb	r3, [r1, r3]
 8005abc:	f003 031f 	and.w	r3, r3, #31
 8005ac0:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	58024400 	.word	0x58024400
 8005acc:	0800947c 	.word	0x0800947c

08005ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8005ad4:	f7ff ffb6 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005adc:	69db      	ldr	r3, [r3, #28]
 8005ade:	0a1b      	lsrs	r3, r3, #8
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	4904      	ldr	r1, [pc, #16]	; (8005af8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ae6:	5ccb      	ldrb	r3, [r1, r3]
 8005ae8:	f003 031f 	and.w	r3, r3, #31
 8005aec:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	bd80      	pop	{r7, pc}
 8005af4:	58024400 	.word	0x58024400
 8005af8:	0800947c 	.word	0x0800947c

08005afc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b086      	sub	sp, #24
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005b04:	2300      	movs	r3, #0
 8005b06:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005b08:	2300      	movs	r3, #0
 8005b0a:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d03f      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b1c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b20:	d02a      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8005b22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005b26:	d824      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b2c:	d018      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8005b2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b32:	d81e      	bhi.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d003      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005b38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b3c:	d007      	beq.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8005b3e:	e018      	b.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005b40:	4ba3      	ldr	r3, [pc, #652]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	4aa2      	ldr	r2, [pc, #648]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b46:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005b4a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b4c:	e015      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	3304      	adds	r3, #4
 8005b52:	2102      	movs	r1, #2
 8005b54:	4618      	mov	r0, r3
 8005b56:	f001 f9d5 	bl	8006f04 <RCCEx_PLL2_Config>
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b5e:	e00c      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	3324      	adds	r3, #36	; 0x24
 8005b64:	2102      	movs	r1, #2
 8005b66:	4618      	mov	r0, r3
 8005b68:	f001 fa7e 	bl	8007068 <RCCEx_PLL3_Config>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8005b70:	e003      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b72:	2301      	movs	r3, #1
 8005b74:	75fb      	strb	r3, [r7, #23]
      break;
 8005b76:	e000      	b.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005b78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b7a:	7dfb      	ldrb	r3, [r7, #23]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d109      	bne.n	8005b94 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8005b80:	4b93      	ldr	r3, [pc, #588]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005b8c:	4990      	ldr	r1, [pc, #576]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	650b      	str	r3, [r1, #80]	; 0x50
 8005b92:	e001      	b.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b94:	7dfb      	ldrb	r3, [r7, #23]
 8005b96:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d03d      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ba8:	2b04      	cmp	r3, #4
 8005baa:	d826      	bhi.n	8005bfa <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc9 	.word	0x08005bc9
 8005bb8:	08005bd7 	.word	0x08005bd7
 8005bbc:	08005be9 	.word	0x08005be9
 8005bc0:	08005c01 	.word	0x08005c01
 8005bc4:	08005c01 	.word	0x08005c01
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005bc8:	4b81      	ldr	r3, [pc, #516]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bcc:	4a80      	ldr	r2, [pc, #512]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005bce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005bd2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bd4:	e015      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	3304      	adds	r3, #4
 8005bda:	2100      	movs	r1, #0
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f001 f991 	bl	8006f04 <RCCEx_PLL2_Config>
 8005be2:	4603      	mov	r3, r0
 8005be4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005be6:	e00c      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	3324      	adds	r3, #36	; 0x24
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f001 fa3a 	bl	8007068 <RCCEx_PLL3_Config>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005bf8:	e003      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	75fb      	strb	r3, [r7, #23]
      break;
 8005bfe:	e000      	b.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8005c00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c02:	7dfb      	ldrb	r3, [r7, #23]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d109      	bne.n	8005c1c <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c08:	4b71      	ldr	r3, [pc, #452]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c0c:	f023 0207 	bic.w	r2, r3, #7
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c14:	496e      	ldr	r1, [pc, #440]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c16:	4313      	orrs	r3, r2
 8005c18:	650b      	str	r3, [r1, #80]	; 0x50
 8005c1a:	e001      	b.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c1c:	7dfb      	ldrb	r3, [r7, #23]
 8005c1e:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d042      	beq.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c34:	d02b      	beq.n	8005c8e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8005c36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c3a:	d825      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c3c:	2bc0      	cmp	r3, #192	; 0xc0
 8005c3e:	d028      	beq.n	8005c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005c40:	2bc0      	cmp	r3, #192	; 0xc0
 8005c42:	d821      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d016      	beq.n	8005c76 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8005c48:	2b80      	cmp	r3, #128	; 0x80
 8005c4a:	d81d      	bhi.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d002      	beq.n	8005c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8005c50:	2b40      	cmp	r3, #64	; 0x40
 8005c52:	d007      	beq.n	8005c64 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8005c54:	e018      	b.n	8005c88 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005c56:	4b5e      	ldr	r3, [pc, #376]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c5a:	4a5d      	ldr	r2, [pc, #372]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005c60:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c62:	e017      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	3304      	adds	r3, #4
 8005c68:	2100      	movs	r1, #0
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f001 f94a 	bl	8006f04 <RCCEx_PLL2_Config>
 8005c70:	4603      	mov	r3, r0
 8005c72:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c74:	e00e      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	3324      	adds	r3, #36	; 0x24
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f001 f9f3 	bl	8007068 <RCCEx_PLL3_Config>
 8005c82:	4603      	mov	r3, r0
 8005c84:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8005c86:	e005      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005c8c:	e002      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c8e:	bf00      	nop
 8005c90:	e000      	b.n	8005c94 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8005c92:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005c94:	7dfb      	ldrb	r3, [r7, #23]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d109      	bne.n	8005cae <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8005c9a:	4b4d      	ldr	r3, [pc, #308]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005c9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c9e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ca6:	494a      	ldr	r1, [pc, #296]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	650b      	str	r3, [r1, #80]	; 0x50
 8005cac:	e001      	b.n	8005cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005cae:	7dfb      	ldrb	r3, [r7, #23]
 8005cb0:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d049      	beq.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005cc4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cc8:	d030      	beq.n	8005d2c <HAL_RCCEx_PeriphCLKConfig+0x230>
 8005cca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cce:	d82a      	bhi.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005cd0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cd4:	d02c      	beq.n	8005d30 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8005cd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8005cda:	d824      	bhi.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005cdc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce0:	d018      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x218>
 8005ce2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ce6:	d81e      	bhi.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8005cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005cf0:	d007      	beq.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8005cf2:	e018      	b.n	8005d26 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005cf4:	4b36      	ldr	r3, [pc, #216]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf8:	4a35      	ldr	r2, [pc, #212]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005cfe:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d00:	e017      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	3304      	adds	r3, #4
 8005d06:	2100      	movs	r1, #0
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f001 f8fb 	bl	8006f04 <RCCEx_PLL2_Config>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005d12:	e00e      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	3324      	adds	r3, #36	; 0x24
 8005d18:	2100      	movs	r1, #0
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f001 f9a4 	bl	8007068 <RCCEx_PLL3_Config>
 8005d20:	4603      	mov	r3, r0
 8005d22:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005d24:	e005      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005d26:	2301      	movs	r3, #1
 8005d28:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d2c:	bf00      	nop
 8005d2e:	e000      	b.n	8005d32 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8005d30:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d32:	7dfb      	ldrb	r3, [r7, #23]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d10a      	bne.n	8005d4e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8005d38:	4b25      	ldr	r3, [pc, #148]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005d46:	4922      	ldr	r1, [pc, #136]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d48:	4313      	orrs	r3, r2
 8005d4a:	658b      	str	r3, [r1, #88]	; 0x58
 8005d4c:	e001      	b.n	8005d52 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d4e:	7dfb      	ldrb	r3, [r7, #23]
 8005d50:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d04b      	beq.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005d64:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d68:	d030      	beq.n	8005dcc <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8005d6a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005d6e:	d82a      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d70:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d74:	d02e      	beq.n	8005dd4 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 8005d76:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005d7a:	d824      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d7c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d80:	d018      	beq.n	8005db4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8005d82:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005d86:	d81e      	bhi.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d003      	beq.n	8005d94 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8005d8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d90:	d007      	beq.n	8005da2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8005d92:	e018      	b.n	8005dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005d94:	4b0e      	ldr	r3, [pc, #56]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d98:	4a0d      	ldr	r2, [pc, #52]	; (8005dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 8005d9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005d9e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005da0:	e019      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	3304      	adds	r3, #4
 8005da6:	2100      	movs	r1, #0
 8005da8:	4618      	mov	r0, r3
 8005daa:	f001 f8ab 	bl	8006f04 <RCCEx_PLL2_Config>
 8005dae:	4603      	mov	r3, r0
 8005db0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8005db2:	e010      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	3324      	adds	r3, #36	; 0x24
 8005db8:	2100      	movs	r1, #0
 8005dba:	4618      	mov	r0, r3
 8005dbc:	f001 f954 	bl	8007068 <RCCEx_PLL3_Config>
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8005dc4:	e007      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8005dc6:	2301      	movs	r3, #1
 8005dc8:	75fb      	strb	r3, [r7, #23]
      break;
 8005dca:	e004      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 8005dcc:	bf00      	nop
 8005dce:	e002      	b.n	8005dd6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8005dd0:	58024400 	.word	0x58024400
      break;
 8005dd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10a      	bne.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8005ddc:	4b99      	ldr	r3, [pc, #612]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005de0:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005dea:	4996      	ldr	r1, [pc, #600]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005dec:	4313      	orrs	r3, r2
 8005dee:	658b      	str	r3, [r1, #88]	; 0x58
 8005df0:	e001      	b.n	8005df6 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005df2:	7dfb      	ldrb	r3, [r7, #23]
 8005df4:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d032      	beq.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e06:	2b30      	cmp	r3, #48	; 0x30
 8005e08:	d01c      	beq.n	8005e44 <HAL_RCCEx_PeriphCLKConfig+0x348>
 8005e0a:	2b30      	cmp	r3, #48	; 0x30
 8005e0c:	d817      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005e0e:	2b20      	cmp	r3, #32
 8005e10:	d00c      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x330>
 8005e12:	2b20      	cmp	r3, #32
 8005e14:	d813      	bhi.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d016      	beq.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d10f      	bne.n	8005e3e <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005e1e:	4b89      	ldr	r3, [pc, #548]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e22:	4a88      	ldr	r2, [pc, #544]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e2a:	e00e      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3304      	adds	r3, #4
 8005e30:	2102      	movs	r1, #2
 8005e32:	4618      	mov	r0, r3
 8005e34:	f001 f866 	bl	8006f04 <RCCEx_PLL2_Config>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8005e3c:	e005      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8005e3e:	2301      	movs	r3, #1
 8005e40:	75fb      	strb	r3, [r7, #23]
      break;
 8005e42:	e002      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005e44:	bf00      	nop
 8005e46:	e000      	b.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 8005e48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d109      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005e50:	4b7c      	ldr	r3, [pc, #496]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e54:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e5c:	4979      	ldr	r1, [pc, #484]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005e5e:	4313      	orrs	r3, r2
 8005e60:	64cb      	str	r3, [r1, #76]	; 0x4c
 8005e62:	e001      	b.n	8005e68 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e64:	7dfb      	ldrb	r3, [r7, #23]
 8005e66:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d047      	beq.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e7c:	d030      	beq.n	8005ee0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005e7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e82:	d82a      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e84:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e88:	d02c      	beq.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8005e8a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005e8e:	d824      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e94:	d018      	beq.n	8005ec8 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 8005e96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e9a:	d81e      	bhi.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d003      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 8005ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea4:	d007      	beq.n	8005eb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 8005ea6:	e018      	b.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8005ea8:	4b66      	ldr	r3, [pc, #408]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eac:	4a65      	ldr	r2, [pc, #404]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005eb2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005eb4:	e017      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3304      	adds	r3, #4
 8005eba:	2100      	movs	r1, #0
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f001 f821 	bl	8006f04 <RCCEx_PLL2_Config>
 8005ec2:	4603      	mov	r3, r0
 8005ec4:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ec6:	e00e      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3324      	adds	r3, #36	; 0x24
 8005ecc:	2100      	movs	r1, #0
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f001 f8ca 	bl	8007068 <RCCEx_PLL3_Config>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8005ed8:	e005      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	75fb      	strb	r3, [r7, #23]
      break;
 8005ede:	e002      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005ee0:	bf00      	nop
 8005ee2:	e000      	b.n	8005ee6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 8005ee4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005ee6:	7dfb      	ldrb	r3, [r7, #23]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d109      	bne.n	8005f00 <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8005eec:	4b55      	ldr	r3, [pc, #340]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005eee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef0:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ef8:	4952      	ldr	r1, [pc, #328]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005efa:	4313      	orrs	r3, r2
 8005efc:	650b      	str	r3, [r1, #80]	; 0x50
 8005efe:	e001      	b.n	8005f04 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005f00:	7dfb      	ldrb	r3, [r7, #23]
 8005f02:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d049      	beq.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f18:	d02e      	beq.n	8005f78 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005f1a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f1e:	d828      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f20:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f24:	d02a      	beq.n	8005f7c <HAL_RCCEx_PeriphCLKConfig+0x480>
 8005f26:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005f2a:	d822      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f2c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f30:	d026      	beq.n	8005f80 <HAL_RCCEx_PeriphCLKConfig+0x484>
 8005f32:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005f36:	d81c      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f3c:	d010      	beq.n	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x464>
 8005f3e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005f42:	d816      	bhi.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d01d      	beq.n	8005f84 <HAL_RCCEx_PeriphCLKConfig+0x488>
 8005f48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f4c:	d111      	bne.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	3304      	adds	r3, #4
 8005f52:	2101      	movs	r1, #1
 8005f54:	4618      	mov	r0, r3
 8005f56:	f000 ffd5 	bl	8006f04 <RCCEx_PLL2_Config>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f5e:	e012      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3324      	adds	r3, #36	; 0x24
 8005f64:	2101      	movs	r1, #1
 8005f66:	4618      	mov	r0, r3
 8005f68:	f001 f87e 	bl	8007068 <RCCEx_PLL3_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8005f70:	e009      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005f72:	2301      	movs	r3, #1
 8005f74:	75fb      	strb	r3, [r7, #23]
      break;
 8005f76:	e006      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f78:	bf00      	nop
 8005f7a:	e004      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f7c:	bf00      	nop
 8005f7e:	e002      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f80:	bf00      	nop
 8005f82:	e000      	b.n	8005f86 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 8005f84:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d109      	bne.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8005f8c:	4b2d      	ldr	r3, [pc, #180]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f90:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005f98:	492a      	ldr	r1, [pc, #168]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	650b      	str	r3, [r1, #80]	; 0x50
 8005f9e:	e001      	b.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa0:	7dfb      	ldrb	r3, [r7, #23]
 8005fa2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d04d      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8005fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fba:	d02e      	beq.n	800601a <HAL_RCCEx_PeriphCLKConfig+0x51e>
 8005fbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005fc0:	d828      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005fc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fc6:	d02a      	beq.n	800601e <HAL_RCCEx_PeriphCLKConfig+0x522>
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fcc:	d822      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005fce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fd2:	d026      	beq.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x526>
 8005fd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005fd8:	d81c      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005fda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fde:	d010      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8005fe0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fe4:	d816      	bhi.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x518>
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d01d      	beq.n	8006026 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 8005fea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005fee:	d111      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f000 ff84 	bl	8006f04 <RCCEx_PLL2_Config>
 8005ffc:	4603      	mov	r3, r0
 8005ffe:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006000:	e012      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	3324      	adds	r3, #36	; 0x24
 8006006:	2101      	movs	r1, #1
 8006008:	4618      	mov	r0, r3
 800600a:	f001 f82d 	bl	8007068 <RCCEx_PLL3_Config>
 800600e:	4603      	mov	r3, r0
 8006010:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 8006012:	e009      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 8006014:	2301      	movs	r3, #1
 8006016:	75fb      	strb	r3, [r7, #23]
      break;
 8006018:	e006      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800601a:	bf00      	nop
 800601c:	e004      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800601e:	bf00      	nop
 8006020:	e002      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006022:	bf00      	nop
 8006024:	e000      	b.n	8006028 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 8006026:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006028:	7dfb      	ldrb	r3, [r7, #23]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d10c      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800602e:	4b05      	ldr	r3, [pc, #20]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 8006030:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006032:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800603c:	4901      	ldr	r1, [pc, #4]	; (8006044 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800603e:	4313      	orrs	r3, r2
 8006040:	658b      	str	r3, [r1, #88]	; 0x58
 8006042:	e003      	b.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x550>
 8006044:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006048:	7dfb      	ldrb	r3, [r7, #23]
 800604a:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d02f      	beq.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006060:	d00e      	beq.n	8006080 <HAL_RCCEx_PeriphCLKConfig+0x584>
 8006062:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006066:	d814      	bhi.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x596>
 8006068:	2b00      	cmp	r3, #0
 800606a:	d015      	beq.n	8006098 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800606c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006070:	d10f      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006072:	4baf      	ldr	r3, [pc, #700]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006076:	4aae      	ldr	r2, [pc, #696]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800607c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800607e:	e00c      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	3304      	adds	r3, #4
 8006084:	2101      	movs	r1, #1
 8006086:	4618      	mov	r0, r3
 8006088:	f000 ff3c 	bl	8006f04 <RCCEx_PLL2_Config>
 800608c:	4603      	mov	r3, r0
 800608e:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8006090:	e003      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	75fb      	strb	r3, [r7, #23]
      break;
 8006096:	e000      	b.n	800609a <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 8006098:	bf00      	nop
    }

    if(ret == HAL_OK)
 800609a:	7dfb      	ldrb	r3, [r7, #23]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d109      	bne.n	80060b4 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80060a0:	4ba3      	ldr	r3, [pc, #652]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060a4:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ac:	49a0      	ldr	r1, [pc, #640]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060ae:	4313      	orrs	r3, r2
 80060b0:	650b      	str	r3, [r1, #80]	; 0x50
 80060b2:	e001      	b.n	80060b8 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060b4:	7dfb      	ldrb	r3, [r7, #23]
 80060b6:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d032      	beq.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d81b      	bhi.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x608>
 80060cc:	a201      	add	r2, pc, #4	; (adr r2, 80060d4 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	0800610b 	.word	0x0800610b
 80060d8:	080060e5 	.word	0x080060e5
 80060dc:	080060f3 	.word	0x080060f3
 80060e0:	0800610b 	.word	0x0800610b
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80060e4:	4b92      	ldr	r3, [pc, #584]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060e8:	4a91      	ldr	r2, [pc, #580]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80060ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80060ee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80060f0:	e00c      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	3304      	adds	r3, #4
 80060f6:	2102      	movs	r1, #2
 80060f8:	4618      	mov	r0, r3
 80060fa:	f000 ff03 	bl	8006f04 <RCCEx_PLL2_Config>
 80060fe:	4603      	mov	r3, r0
 8006100:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 8006102:	e003      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	75fb      	strb	r3, [r7, #23]
      break;
 8006108:	e000      	b.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800610a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800610c:	7dfb      	ldrb	r3, [r7, #23]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d109      	bne.n	8006126 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8006112:	4b87      	ldr	r3, [pc, #540]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006116:	f023 0203 	bic.w	r2, r3, #3
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800611e:	4984      	ldr	r1, [pc, #528]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006120:	4313      	orrs	r3, r2
 8006122:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006124:	e001      	b.n	800612a <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006126:	7dfb      	ldrb	r3, [r7, #23]
 8006128:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006132:	2b00      	cmp	r3, #0
 8006134:	f000 8086 	beq.w	8006244 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006138:	4b7e      	ldr	r3, [pc, #504]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	4a7d      	ldr	r2, [pc, #500]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800613e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006142:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006144:	f7fb f9b2 	bl	80014ac <HAL_GetTick>
 8006148:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800614a:	e009      	b.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614c:	f7fb f9ae 	bl	80014ac <HAL_GetTick>
 8006150:	4602      	mov	r2, r0
 8006152:	693b      	ldr	r3, [r7, #16]
 8006154:	1ad3      	subs	r3, r2, r3
 8006156:	2b64      	cmp	r3, #100	; 0x64
 8006158:	d902      	bls.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800615a:	2303      	movs	r3, #3
 800615c:	75fb      	strb	r3, [r7, #23]
        break;
 800615e:	e005      	b.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006160:	4b74      	ldr	r3, [pc, #464]	; (8006334 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006168:	2b00      	cmp	r3, #0
 800616a:	d0ef      	beq.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800616c:	7dfb      	ldrb	r3, [r7, #23]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d166      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8006172:	4b6f      	ldr	r3, [pc, #444]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006174:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800617c:	4053      	eors	r3, r2
 800617e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006182:	2b00      	cmp	r3, #0
 8006184:	d013      	beq.n	80061ae <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006186:	4b6a      	ldr	r3, [pc, #424]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006190:	4b67      	ldr	r3, [pc, #412]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006194:	4a66      	ldr	r2, [pc, #408]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800619a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800619c:	4b64      	ldr	r3, [pc, #400]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	4a63      	ldr	r2, [pc, #396]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80061a6:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80061a8:	4a61      	ldr	r2, [pc, #388]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80061b8:	d115      	bne.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061ba:	f7fb f977 	bl	80014ac <HAL_GetTick>
 80061be:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061c0:	e00b      	b.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061c2:	f7fb f973 	bl	80014ac <HAL_GetTick>
 80061c6:	4602      	mov	r2, r0
 80061c8:	693b      	ldr	r3, [r7, #16]
 80061ca:	1ad3      	subs	r3, r2, r3
 80061cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d0:	4293      	cmp	r3, r2
 80061d2:	d902      	bls.n	80061da <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	75fb      	strb	r3, [r7, #23]
            break;
 80061d8:	e005      	b.n	80061e6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80061da:	4b55      	ldr	r3, [pc, #340]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061de:	f003 0302 	and.w	r3, r3, #2
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d0ed      	beq.n	80061c2 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80061e6:	7dfb      	ldrb	r3, [r7, #23]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d126      	bne.n	800623a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80061f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061fa:	d10d      	bne.n	8006218 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80061fc:	4b4c      	ldr	r3, [pc, #304]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 80061fe:	691b      	ldr	r3, [r3, #16]
 8006200:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800620a:	0919      	lsrs	r1, r3, #4
 800620c:	4b4a      	ldr	r3, [pc, #296]	; (8006338 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800620e:	400b      	ands	r3, r1
 8006210:	4947      	ldr	r1, [pc, #284]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006212:	4313      	orrs	r3, r2
 8006214:	610b      	str	r3, [r1, #16]
 8006216:	e005      	b.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8006218:	4b45      	ldr	r3, [pc, #276]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	4a44      	ldr	r2, [pc, #272]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800621e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006222:	6113      	str	r3, [r2, #16]
 8006224:	4b42      	ldr	r3, [pc, #264]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006226:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800622e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006232:	493f      	ldr	r1, [pc, #252]	; (8006330 <HAL_RCCEx_PeriphCLKConfig+0x834>)
 8006234:	4313      	orrs	r3, r2
 8006236:	670b      	str	r3, [r1, #112]	; 0x70
 8006238:	e004      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800623a:	7dfb      	ldrb	r3, [r7, #23]
 800623c:	75bb      	strb	r3, [r7, #22]
 800623e:	e001      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7dfb      	ldrb	r3, [r7, #23]
 8006242:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f003 0301 	and.w	r3, r3, #1
 800624c:	2b00      	cmp	r3, #0
 800624e:	f000 8085 	beq.w	800635c <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006256:	2b28      	cmp	r3, #40	; 0x28
 8006258:	d866      	bhi.n	8006328 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800625a:	a201      	add	r2, pc, #4	; (adr r2, 8006260 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800625c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006260:	0800633d 	.word	0x0800633d
 8006264:	08006329 	.word	0x08006329
 8006268:	08006329 	.word	0x08006329
 800626c:	08006329 	.word	0x08006329
 8006270:	08006329 	.word	0x08006329
 8006274:	08006329 	.word	0x08006329
 8006278:	08006329 	.word	0x08006329
 800627c:	08006329 	.word	0x08006329
 8006280:	08006305 	.word	0x08006305
 8006284:	08006329 	.word	0x08006329
 8006288:	08006329 	.word	0x08006329
 800628c:	08006329 	.word	0x08006329
 8006290:	08006329 	.word	0x08006329
 8006294:	08006329 	.word	0x08006329
 8006298:	08006329 	.word	0x08006329
 800629c:	08006329 	.word	0x08006329
 80062a0:	08006317 	.word	0x08006317
 80062a4:	08006329 	.word	0x08006329
 80062a8:	08006329 	.word	0x08006329
 80062ac:	08006329 	.word	0x08006329
 80062b0:	08006329 	.word	0x08006329
 80062b4:	08006329 	.word	0x08006329
 80062b8:	08006329 	.word	0x08006329
 80062bc:	08006329 	.word	0x08006329
 80062c0:	0800633d 	.word	0x0800633d
 80062c4:	08006329 	.word	0x08006329
 80062c8:	08006329 	.word	0x08006329
 80062cc:	08006329 	.word	0x08006329
 80062d0:	08006329 	.word	0x08006329
 80062d4:	08006329 	.word	0x08006329
 80062d8:	08006329 	.word	0x08006329
 80062dc:	08006329 	.word	0x08006329
 80062e0:	0800633d 	.word	0x0800633d
 80062e4:	08006329 	.word	0x08006329
 80062e8:	08006329 	.word	0x08006329
 80062ec:	08006329 	.word	0x08006329
 80062f0:	08006329 	.word	0x08006329
 80062f4:	08006329 	.word	0x08006329
 80062f8:	08006329 	.word	0x08006329
 80062fc:	08006329 	.word	0x08006329
 8006300:	0800633d 	.word	0x0800633d
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	3304      	adds	r3, #4
 8006308:	2101      	movs	r1, #1
 800630a:	4618      	mov	r0, r3
 800630c:	f000 fdfa 	bl	8006f04 <RCCEx_PLL2_Config>
 8006310:	4603      	mov	r3, r0
 8006312:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006314:	e013      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	3324      	adds	r3, #36	; 0x24
 800631a:	2101      	movs	r1, #1
 800631c:	4618      	mov	r0, r3
 800631e:	f000 fea3 	bl	8007068 <RCCEx_PLL3_Config>
 8006322:	4603      	mov	r3, r0
 8006324:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 8006326:	e00a      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	75fb      	strb	r3, [r7, #23]
      break;
 800632c:	e007      	b.n	800633e <HAL_RCCEx_PeriphCLKConfig+0x842>
 800632e:	bf00      	nop
 8006330:	58024400 	.word	0x58024400
 8006334:	58024800 	.word	0x58024800
 8006338:	00ffffcf 	.word	0x00ffffcf
      break;
 800633c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800633e:	7dfb      	ldrb	r3, [r7, #23]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d109      	bne.n	8006358 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8006344:	4b96      	ldr	r3, [pc, #600]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006346:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006348:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006350:	4993      	ldr	r1, [pc, #588]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006352:	4313      	orrs	r3, r2
 8006354:	654b      	str	r3, [r1, #84]	; 0x54
 8006356:	e001      	b.n	800635c <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006358:	7dfb      	ldrb	r3, [r7, #23]
 800635a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f003 0302 	and.w	r3, r3, #2
 8006364:	2b00      	cmp	r3, #0
 8006366:	d038      	beq.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800636c:	2b05      	cmp	r3, #5
 800636e:	d821      	bhi.n	80063b4 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 8006370:	a201      	add	r2, pc, #4	; (adr r2, 8006378 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 8006372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006376:	bf00      	nop
 8006378:	080063bb 	.word	0x080063bb
 800637c:	08006391 	.word	0x08006391
 8006380:	080063a3 	.word	0x080063a3
 8006384:	080063bb 	.word	0x080063bb
 8006388:	080063bb 	.word	0x080063bb
 800638c:	080063bb 	.word	0x080063bb
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	3304      	adds	r3, #4
 8006394:	2101      	movs	r1, #1
 8006396:	4618      	mov	r0, r3
 8006398:	f000 fdb4 	bl	8006f04 <RCCEx_PLL2_Config>
 800639c:	4603      	mov	r3, r0
 800639e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063a0:	e00c      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	3324      	adds	r3, #36	; 0x24
 80063a6:	2101      	movs	r1, #1
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fe5d 	bl	8007068 <RCCEx_PLL3_Config>
 80063ae:	4603      	mov	r3, r0
 80063b0:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 80063b2:	e003      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	75fb      	strb	r3, [r7, #23]
      break;
 80063b8:	e000      	b.n	80063bc <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 80063ba:	bf00      	nop
    }

    if(ret == HAL_OK)
 80063bc:	7dfb      	ldrb	r3, [r7, #23]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d109      	bne.n	80063d6 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80063c2:	4b77      	ldr	r3, [pc, #476]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063c6:	f023 0207 	bic.w	r2, r3, #7
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ce:	4974      	ldr	r1, [pc, #464]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	654b      	str	r3, [r1, #84]	; 0x54
 80063d4:	e001      	b.n	80063da <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80063d6:	7dfb      	ldrb	r3, [r7, #23]
 80063d8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	f003 0304 	and.w	r3, r3, #4
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d03a      	beq.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063ec:	2b05      	cmp	r3, #5
 80063ee:	d821      	bhi.n	8006434 <HAL_RCCEx_PeriphCLKConfig+0x938>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800643b 	.word	0x0800643b
 80063fc:	08006411 	.word	0x08006411
 8006400:	08006423 	.word	0x08006423
 8006404:	0800643b 	.word	0x0800643b
 8006408:	0800643b 	.word	0x0800643b
 800640c:	0800643b 	.word	0x0800643b
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	3304      	adds	r3, #4
 8006414:	2101      	movs	r1, #1
 8006416:	4618      	mov	r0, r3
 8006418:	f000 fd74 	bl	8006f04 <RCCEx_PLL2_Config>
 800641c:	4603      	mov	r3, r0
 800641e:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006420:	e00c      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	3324      	adds	r3, #36	; 0x24
 8006426:	2101      	movs	r1, #1
 8006428:	4618      	mov	r0, r3
 800642a:	f000 fe1d 	bl	8007068 <RCCEx_PLL3_Config>
 800642e:	4603      	mov	r3, r0
 8006430:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 8006432:	e003      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006434:	2301      	movs	r3, #1
 8006436:	75fb      	strb	r3, [r7, #23]
      break;
 8006438:	e000      	b.n	800643c <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800643a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800643c:	7dfb      	ldrb	r3, [r7, #23]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10a      	bne.n	8006458 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006442:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006446:	f023 0207 	bic.w	r2, r3, #7
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006450:	4953      	ldr	r1, [pc, #332]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 8006452:	4313      	orrs	r3, r2
 8006454:	658b      	str	r3, [r1, #88]	; 0x58
 8006456:	e001      	b.n	800645c <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006458:	7dfb      	ldrb	r3, [r7, #23]
 800645a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	f003 0320 	and.w	r3, r3, #32
 8006464:	2b00      	cmp	r3, #0
 8006466:	d04b      	beq.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800646e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006472:	d02e      	beq.n	80064d2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8006474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006478:	d828      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800647a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800647e:	d02a      	beq.n	80064d6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d822      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006486:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800648a:	d026      	beq.n	80064da <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800648c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006490:	d81c      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 8006492:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006496:	d010      	beq.n	80064ba <HAL_RCCEx_PeriphCLKConfig+0x9be>
 8006498:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800649c:	d816      	bhi.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d01d      	beq.n	80064de <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 80064a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80064a6:	d111      	bne.n	80064cc <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	3304      	adds	r3, #4
 80064ac:	2100      	movs	r1, #0
 80064ae:	4618      	mov	r0, r3
 80064b0:	f000 fd28 	bl	8006f04 <RCCEx_PLL2_Config>
 80064b4:	4603      	mov	r3, r0
 80064b6:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064b8:	e012      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	3324      	adds	r3, #36	; 0x24
 80064be:	2102      	movs	r1, #2
 80064c0:	4618      	mov	r0, r3
 80064c2:	f000 fdd1 	bl	8007068 <RCCEx_PLL3_Config>
 80064c6:	4603      	mov	r3, r0
 80064c8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 80064ca:	e009      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	75fb      	strb	r3, [r7, #23]
      break;
 80064d0:	e006      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80064d2:	bf00      	nop
 80064d4:	e004      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80064d6:	bf00      	nop
 80064d8:	e002      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80064da:	bf00      	nop
 80064dc:	e000      	b.n	80064e0 <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 80064de:	bf00      	nop
    }

    if(ret == HAL_OK)
 80064e0:	7dfb      	ldrb	r3, [r7, #23]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d10a      	bne.n	80064fc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064e6:	4b2e      	ldr	r3, [pc, #184]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064ea:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80064f4:	492a      	ldr	r1, [pc, #168]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 80064f6:	4313      	orrs	r3, r2
 80064f8:	654b      	str	r3, [r1, #84]	; 0x54
 80064fa:	e001      	b.n	8006500 <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80064fc:	7dfb      	ldrb	r3, [r7, #23]
 80064fe:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006508:	2b00      	cmp	r3, #0
 800650a:	d04d      	beq.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006512:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8006516:	d02e      	beq.n	8006576 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 8006518:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800651c:	d828      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800651e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006522:	d02a      	beq.n	800657a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 8006524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006528:	d822      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800652a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800652e:	d026      	beq.n	800657e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8006530:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006534:	d81c      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006536:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800653a:	d010      	beq.n	800655e <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800653c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006540:	d816      	bhi.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
 8006542:	2b00      	cmp	r3, #0
 8006544:	d01d      	beq.n	8006582 <HAL_RCCEx_PeriphCLKConfig+0xa86>
 8006546:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800654a:	d111      	bne.n	8006570 <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	3304      	adds	r3, #4
 8006550:	2100      	movs	r1, #0
 8006552:	4618      	mov	r0, r3
 8006554:	f000 fcd6 	bl	8006f04 <RCCEx_PLL2_Config>
 8006558:	4603      	mov	r3, r0
 800655a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800655c:	e012      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3324      	adds	r3, #36	; 0x24
 8006562:	2102      	movs	r1, #2
 8006564:	4618      	mov	r0, r3
 8006566:	f000 fd7f 	bl	8007068 <RCCEx_PLL3_Config>
 800656a:	4603      	mov	r3, r0
 800656c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800656e:	e009      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006570:	2301      	movs	r3, #1
 8006572:	75fb      	strb	r3, [r7, #23]
      break;
 8006574:	e006      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006576:	bf00      	nop
 8006578:	e004      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800657a:	bf00      	nop
 800657c:	e002      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800657e:	bf00      	nop
 8006580:	e000      	b.n	8006584 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 8006582:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006584:	7dfb      	ldrb	r3, [r7, #23]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10c      	bne.n	80065a4 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800658a:	4b05      	ldr	r3, [pc, #20]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800658c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800658e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006598:	4901      	ldr	r1, [pc, #4]	; (80065a0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800659a:	4313      	orrs	r3, r2
 800659c:	658b      	str	r3, [r1, #88]	; 0x58
 800659e:	e003      	b.n	80065a8 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 80065a0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80065a4:	7dfb      	ldrb	r3, [r7, #23]
 80065a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d04b      	beq.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80065ba:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065be:	d02e      	beq.n	800661e <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80065c0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80065c4:	d828      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80065c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ca:	d02a      	beq.n	8006622 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80065cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065d0:	d822      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80065d2:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065d6:	d026      	beq.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 80065d8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80065dc:	d81c      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80065de:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e2:	d010      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80065e4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80065e8:	d816      	bhi.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d01d      	beq.n	800662a <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 80065ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f2:	d111      	bne.n	8006618 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3304      	adds	r3, #4
 80065f8:	2100      	movs	r1, #0
 80065fa:	4618      	mov	r0, r3
 80065fc:	f000 fc82 	bl	8006f04 <RCCEx_PLL2_Config>
 8006600:	4603      	mov	r3, r0
 8006602:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006604:	e012      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	3324      	adds	r3, #36	; 0x24
 800660a:	2102      	movs	r1, #2
 800660c:	4618      	mov	r0, r3
 800660e:	f000 fd2b 	bl	8007068 <RCCEx_PLL3_Config>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 8006616:	e009      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	75fb      	strb	r3, [r7, #23]
      break;
 800661c:	e006      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800661e:	bf00      	nop
 8006620:	e004      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006622:	bf00      	nop
 8006624:	e002      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 8006626:	bf00      	nop
 8006628:	e000      	b.n	800662c <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800662a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800662c:	7dfb      	ldrb	r3, [r7, #23]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10a      	bne.n	8006648 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8006632:	4b9d      	ldr	r3, [pc, #628]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006636:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006640:	4999      	ldr	r1, [pc, #612]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006642:	4313      	orrs	r3, r2
 8006644:	658b      	str	r3, [r1, #88]	; 0x58
 8006646:	e001      	b.n	800664c <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006648:	7dfb      	ldrb	r3, [r7, #23]
 800664a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f003 0308 	and.w	r3, r3, #8
 8006654:	2b00      	cmp	r3, #0
 8006656:	d01a      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800665e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006662:	d10a      	bne.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	3324      	adds	r3, #36	; 0x24
 8006668:	2102      	movs	r1, #2
 800666a:	4618      	mov	r0, r3
 800666c:	f000 fcfc 	bl	8007068 <RCCEx_PLL3_Config>
 8006670:	4603      	mov	r3, r0
 8006672:	2b00      	cmp	r3, #0
 8006674:	d001      	beq.n	800667a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800667a:	4b8b      	ldr	r3, [pc, #556]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800667c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800667e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006688:	4987      	ldr	r1, [pc, #540]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800668a:	4313      	orrs	r3, r2
 800668c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f003 0310 	and.w	r3, r3, #16
 8006696:	2b00      	cmp	r3, #0
 8006698:	d01a      	beq.n	80066d0 <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a4:	d10a      	bne.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	2102      	movs	r1, #2
 80066ac:	4618      	mov	r0, r3
 80066ae:	f000 fcdb 	bl	8007068 <RCCEx_PLL3_Config>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80066bc:	4b7a      	ldr	r3, [pc, #488]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80066ca:	4977      	ldr	r1, [pc, #476]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80066cc:	4313      	orrs	r3, r2
 80066ce:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d034      	beq.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80066e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066e6:	d01d      	beq.n	8006724 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 80066e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066ec:	d817      	bhi.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xc22>
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d003      	beq.n	80066fa <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 80066f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066f6:	d009      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0xc10>
 80066f8:	e011      	b.n	800671e <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	3304      	adds	r3, #4
 80066fe:	2100      	movs	r1, #0
 8006700:	4618      	mov	r0, r3
 8006702:	f000 fbff 	bl	8006f04 <RCCEx_PLL2_Config>
 8006706:	4603      	mov	r3, r0
 8006708:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800670a:	e00c      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	3324      	adds	r3, #36	; 0x24
 8006710:	2102      	movs	r1, #2
 8006712:	4618      	mov	r0, r3
 8006714:	f000 fca8 	bl	8007068 <RCCEx_PLL3_Config>
 8006718:	4603      	mov	r3, r0
 800671a:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800671c:	e003      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
      break;
 8006722:	e000      	b.n	8006726 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 8006724:	bf00      	nop
    }

    if(ret == HAL_OK)
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d10a      	bne.n	8006742 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800672c:	4b5e      	ldr	r3, [pc, #376]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800672e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006730:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800673a:	495b      	ldr	r1, [pc, #364]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800673c:	4313      	orrs	r3, r2
 800673e:	658b      	str	r3, [r1, #88]	; 0x58
 8006740:	e001      	b.n	8006746 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006742:	7dfb      	ldrb	r3, [r7, #23]
 8006744:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800674e:	2b00      	cmp	r3, #0
 8006750:	d033      	beq.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006758:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800675c:	d01c      	beq.n	8006798 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800675e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8006762:	d816      	bhi.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xc96>
 8006764:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006768:	d003      	beq.n	8006772 <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800676a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800676e:	d007      	beq.n	8006780 <HAL_RCCEx_PeriphCLKConfig+0xc84>
 8006770:	e00f      	b.n	8006792 <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8006772:	4b4d      	ldr	r3, [pc, #308]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	4a4c      	ldr	r2, [pc, #304]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800677c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800677e:	e00c      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	3324      	adds	r3, #36	; 0x24
 8006784:	2101      	movs	r1, #1
 8006786:	4618      	mov	r0, r3
 8006788:	f000 fc6e 	bl	8007068 <RCCEx_PLL3_Config>
 800678c:	4603      	mov	r3, r0
 800678e:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8006790:	e003      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8006792:	2301      	movs	r3, #1
 8006794:	75fb      	strb	r3, [r7, #23]
      break;
 8006796:	e000      	b.n	800679a <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 8006798:	bf00      	nop
    }

    if(ret == HAL_OK)
 800679a:	7dfb      	ldrb	r3, [r7, #23]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d10a      	bne.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80067a0:	4b41      	ldr	r3, [pc, #260]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067a4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067ae:	493e      	ldr	r1, [pc, #248]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067b0:	4313      	orrs	r3, r2
 80067b2:	654b      	str	r3, [r1, #84]	; 0x54
 80067b4:	e001      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80067b6:	7dfb      	ldrb	r3, [r7, #23]
 80067b8:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d029      	beq.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 80067ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067d2:	d007      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 80067d4:	e00f      	b.n	80067f6 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80067d6:	4b34      	ldr	r3, [pc, #208]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	4a33      	ldr	r2, [pc, #204]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80067dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067e0:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067e2:	e00b      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3304      	adds	r3, #4
 80067e8:	2102      	movs	r1, #2
 80067ea:	4618      	mov	r0, r3
 80067ec:	f000 fb8a 	bl	8006f04 <RCCEx_PLL2_Config>
 80067f0:	4603      	mov	r3, r0
 80067f2:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 80067f4:	e002      	b.n	80067fc <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	75fb      	strb	r3, [r7, #23]
      break;
 80067fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80067fc:	7dfb      	ldrb	r3, [r7, #23]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d109      	bne.n	8006816 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8006802:	4b29      	ldr	r3, [pc, #164]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800680e:	4926      	ldr	r1, [pc, #152]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006810:	4313      	orrs	r3, r2
 8006812:	64cb      	str	r3, [r1, #76]	; 0x4c
 8006814:	e001      	b.n	800681a <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006816:	7dfb      	ldrb	r3, [r7, #23]
 8006818:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d00a      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	3324      	adds	r3, #36	; 0x24
 800682a:	2102      	movs	r1, #2
 800682c:	4618      	mov	r0, r3
 800682e:	f000 fc1b 	bl	8007068 <RCCEx_PLL3_Config>
 8006832:	4603      	mov	r3, r0
 8006834:	2b00      	cmp	r3, #0
 8006836:	d001      	beq.n	800683c <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006844:	2b00      	cmp	r3, #0
 8006846:	d033      	beq.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800684c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006850:	d017      	beq.n	8006882 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8006852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006856:	d811      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006858:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800685c:	d013      	beq.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800685e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006862:	d80b      	bhi.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd80>
 8006864:	2b00      	cmp	r3, #0
 8006866:	d010      	beq.n	800688a <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 8006868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800686c:	d106      	bne.n	800687c <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800686e:	4b0e      	ldr	r3, [pc, #56]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006870:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006872:	4a0d      	ldr	r2, [pc, #52]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006874:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006878:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800687a:	e007      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800687c:	2301      	movs	r3, #1
 800687e:	75fb      	strb	r3, [r7, #23]
      break;
 8006880:	e004      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006882:	bf00      	nop
 8006884:	e002      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 8006886:	bf00      	nop
 8006888:	e000      	b.n	800688c <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800688a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800688c:	7dfb      	ldrb	r3, [r7, #23]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d10c      	bne.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006892:	4b05      	ldr	r3, [pc, #20]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 8006894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006896:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800689e:	4902      	ldr	r1, [pc, #8]	; (80068a8 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	654b      	str	r3, [r1, #84]	; 0x54
 80068a4:	e004      	b.n	80068b0 <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 80068a6:	bf00      	nop
 80068a8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80068ac:	7dfb      	ldrb	r3, [r7, #23]
 80068ae:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80068bc:	4b31      	ldr	r3, [pc, #196]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068c0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068c8:	492e      	ldr	r1, [pc, #184]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ca:	4313      	orrs	r3, r2
 80068cc:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d009      	beq.n	80068ee <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80068da:	4b2a      	ldr	r3, [pc, #168]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80068e8:	4926      	ldr	r1, [pc, #152]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068ea:	4313      	orrs	r3, r2
 80068ec:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d008      	beq.n	800690c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80068fa:	4b22      	ldr	r3, [pc, #136]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 80068fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068fe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006906:	491f      	ldr	r1, [pc, #124]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006908:	4313      	orrs	r3, r2
 800690a:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00d      	beq.n	8006934 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006918:	4b1a      	ldr	r3, [pc, #104]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800691a:	691b      	ldr	r3, [r3, #16]
 800691c:	4a19      	ldr	r2, [pc, #100]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800691e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006922:	6113      	str	r3, [r2, #16]
 8006924:	4b17      	ldr	r3, [pc, #92]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006926:	691a      	ldr	r2, [r3, #16]
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800692e:	4915      	ldr	r1, [pc, #84]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 8006930:	4313      	orrs	r3, r2
 8006932:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2b00      	cmp	r3, #0
 800693a:	da08      	bge.n	800694e <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800693c:	4b11      	ldr	r3, [pc, #68]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800693e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006940:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006948:	490e      	ldr	r1, [pc, #56]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800694a:	4313      	orrs	r3, r2
 800694c:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006956:	2b00      	cmp	r3, #0
 8006958:	d009      	beq.n	800696e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800695a:	4b0a      	ldr	r3, [pc, #40]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800695c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800695e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006968:	4906      	ldr	r1, [pc, #24]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800696a:	4313      	orrs	r3, r2
 800696c:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800696e:	7dbb      	ldrb	r3, [r7, #22]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d101      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 8006974:	2300      	movs	r3, #0
 8006976:	e000      	b.n	800697a <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 8006978:	2301      	movs	r3, #1
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	58024400 	.word	0x58024400

08006988 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800698c:	f7ff f85a 	bl	8005a44 <HAL_RCC_GetHCLKFreq>
 8006990:	4602      	mov	r2, r0
 8006992:	4b06      	ldr	r3, [pc, #24]	; (80069ac <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	091b      	lsrs	r3, r3, #4
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	4904      	ldr	r1, [pc, #16]	; (80069b0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800699e:	5ccb      	ldrb	r3, [r1, r3]
 80069a0:	f003 031f 	and.w	r3, r3, #31
 80069a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	bd80      	pop	{r7, pc}
 80069ac:	58024400 	.word	0x58024400
 80069b0:	0800947c 	.word	0x0800947c

080069b4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 80069b4:	b480      	push	{r7}
 80069b6:	b089      	sub	sp, #36	; 0x24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80069bc:	4ba1      	ldr	r3, [pc, #644]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c0:	f003 0303 	and.w	r3, r3, #3
 80069c4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 80069c6:	4b9f      	ldr	r3, [pc, #636]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ca:	0b1b      	lsrs	r3, r3, #12
 80069cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069d0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80069d2:	4b9c      	ldr	r3, [pc, #624]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	091b      	lsrs	r3, r3, #4
 80069d8:	f003 0301 	and.w	r3, r3, #1
 80069dc:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 80069de:	4b99      	ldr	r3, [pc, #612]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80069e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069e2:	08db      	lsrs	r3, r3, #3
 80069e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	fb02 f303 	mul.w	r3, r2, r3
 80069ee:	ee07 3a90 	vmov	s15, r3
 80069f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80069f6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	f000 8111 	beq.w	8006c24 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	f000 8083 	beq.w	8006b10 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006a0a:	69bb      	ldr	r3, [r7, #24]
 8006a0c:	2b02      	cmp	r3, #2
 8006a0e:	f200 80a1 	bhi.w	8006b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8006a12:	69bb      	ldr	r3, [r7, #24]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d003      	beq.n	8006a20 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006a18:	69bb      	ldr	r3, [r7, #24]
 8006a1a:	2b01      	cmp	r3, #1
 8006a1c:	d056      	beq.n	8006acc <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8006a1e:	e099      	b.n	8006b54 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006a20:	4b88      	ldr	r3, [pc, #544]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f003 0320 	and.w	r3, r3, #32
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d02d      	beq.n	8006a88 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006a2c:	4b85      	ldr	r3, [pc, #532]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	08db      	lsrs	r3, r3, #3
 8006a32:	f003 0303 	and.w	r3, r3, #3
 8006a36:	4a84      	ldr	r2, [pc, #528]	; (8006c48 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8006a38:	fa22 f303 	lsr.w	r3, r2, r3
 8006a3c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	ee07 3a90 	vmov	s15, r3
 8006a44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a48:	697b      	ldr	r3, [r7, #20]
 8006a4a:	ee07 3a90 	vmov	s15, r3
 8006a4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a56:	4b7b      	ldr	r3, [pc, #492]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a5e:	ee07 3a90 	vmov	s15, r3
 8006a62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006a66:	ed97 6a03 	vldr	s12, [r7, #12]
 8006a6a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006a6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006a72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006a76:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006a7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006a7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006a82:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006a86:	e087      	b.n	8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	ee07 3a90 	vmov	s15, r3
 8006a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006a92:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006c50 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006a96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006a9a:	4b6a      	ldr	r3, [pc, #424]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006a9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006aa2:	ee07 3a90 	vmov	s15, r3
 8006aa6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aaa:	ed97 6a03 	vldr	s12, [r7, #12]
 8006aae:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006ab2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006ab6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006aba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006abe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ac2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006ac6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006aca:	e065      	b.n	8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	ee07 3a90 	vmov	s15, r3
 8006ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006ad6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006ade:	4b59      	ldr	r3, [pc, #356]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ae6:	ee07 3a90 	vmov	s15, r3
 8006aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006aee:	ed97 6a03 	vldr	s12, [r7, #12]
 8006af2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b0a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b0e:	e043      	b.n	8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	ee07 3a90 	vmov	s15, r3
 8006b16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b1a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006c58 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8006b1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b22:	4b48      	ldr	r3, [pc, #288]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b2a:	ee07 3a90 	vmov	s15, r3
 8006b2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b32:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b36:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b42:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b4e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b52:	e021      	b.n	8006b98 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	ee07 3a90 	vmov	s15, r3
 8006b5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006b5e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006c54 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006b66:	4b37      	ldr	r3, [pc, #220]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006b6e:	ee07 3a90 	vmov	s15, r3
 8006b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006b76:	ed97 6a03 	vldr	s12, [r7, #12]
 8006b7a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006c4c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b92:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006b96:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9c:	0a5b      	lsrs	r3, r3, #9
 8006b9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ba2:	ee07 3a90 	vmov	s15, r3
 8006ba6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006baa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bae:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006bb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8006bb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006bba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bbe:	ee17 2a90 	vmov	r2, s15
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8006bc6:	4b1f      	ldr	r3, [pc, #124]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	0c1b      	lsrs	r3, r3, #16
 8006bcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bd0:	ee07 3a90 	vmov	s15, r3
 8006bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006bd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006bdc:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006be0:	edd7 6a07 	vldr	s13, [r7, #28]
 8006be4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006be8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006bec:	ee17 2a90 	vmov	r2, s15
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8006bf4:	4b13      	ldr	r3, [pc, #76]	; (8006c44 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bf8:	0e1b      	lsrs	r3, r3, #24
 8006bfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bfe:	ee07 3a90 	vmov	s15, r3
 8006c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c06:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006c0a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006c0e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006c12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c1a:	ee17 2a90 	vmov	r2, s15
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8006c22:	e008      	b.n	8006c36 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	609a      	str	r2, [r3, #8]
}
 8006c36:	bf00      	nop
 8006c38:	3724      	adds	r7, #36	; 0x24
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr
 8006c42:	bf00      	nop
 8006c44:	58024400 	.word	0x58024400
 8006c48:	03d09000 	.word	0x03d09000
 8006c4c:	46000000 	.word	0x46000000
 8006c50:	4c742400 	.word	0x4c742400
 8006c54:	4a742400 	.word	0x4a742400
 8006c58:	4af42400 	.word	0x4af42400

08006c5c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b089      	sub	sp, #36	; 0x24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006c64:	4ba1      	ldr	r3, [pc, #644]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c68:	f003 0303 	and.w	r3, r3, #3
 8006c6c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8006c6e:	4b9f      	ldr	r3, [pc, #636]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	0d1b      	lsrs	r3, r3, #20
 8006c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006c78:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8006c7a:	4b9c      	ldr	r3, [pc, #624]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c7e:	0a1b      	lsrs	r3, r3, #8
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 8006c86:	4b99      	ldr	r3, [pc, #612]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c8a:	08db      	lsrs	r3, r3, #3
 8006c8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	fb02 f303 	mul.w	r3, r2, r3
 8006c96:	ee07 3a90 	vmov	s15, r3
 8006c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c9e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8006ca2:	697b      	ldr	r3, [r7, #20]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	f000 8111 	beq.w	8006ecc <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006caa:	69bb      	ldr	r3, [r7, #24]
 8006cac:	2b02      	cmp	r3, #2
 8006cae:	f000 8083 	beq.w	8006db8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006cb2:	69bb      	ldr	r3, [r7, #24]
 8006cb4:	2b02      	cmp	r3, #2
 8006cb6:	f200 80a1 	bhi.w	8006dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006cba:	69bb      	ldr	r3, [r7, #24]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006cc0:	69bb      	ldr	r3, [r7, #24]
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d056      	beq.n	8006d74 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006cc6:	e099      	b.n	8006dfc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006cc8:	4b88      	ldr	r3, [pc, #544]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f003 0320 	and.w	r3, r3, #32
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d02d      	beq.n	8006d30 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8006cd4:	4b85      	ldr	r3, [pc, #532]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	08db      	lsrs	r3, r3, #3
 8006cda:	f003 0303 	and.w	r3, r3, #3
 8006cde:	4a84      	ldr	r2, [pc, #528]	; (8006ef0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006ce0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ce4:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	ee07 3a90 	vmov	s15, r3
 8006cec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	ee07 3a90 	vmov	s15, r3
 8006cf6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cfa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006cfe:	4b7b      	ldr	r3, [pc, #492]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d06:	ee07 3a90 	vmov	s15, r3
 8006d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d12:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d2a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8006d2e:	e087      	b.n	8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d30:	697b      	ldr	r3, [r7, #20]
 8006d32:	ee07 3a90 	vmov	s15, r3
 8006d36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d3a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006ef8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006d3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d42:	4b6a      	ldr	r3, [pc, #424]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d4a:	ee07 3a90 	vmov	s15, r3
 8006d4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d52:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d56:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006d5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006d62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006d66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006d6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006d6e:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006d72:	e065      	b.n	8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006d74:	697b      	ldr	r3, [r7, #20]
 8006d76:	ee07 3a90 	vmov	s15, r3
 8006d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006d7e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006d86:	4b59      	ldr	r3, [pc, #356]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d8e:	ee07 3a90 	vmov	s15, r3
 8006d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006d96:	ed97 6a03 	vldr	s12, [r7, #12]
 8006d9a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006db2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006db6:	e043      	b.n	8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	ee07 3a90 	vmov	s15, r3
 8006dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006dc2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006f00 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006dc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006dca:	4b48      	ldr	r3, [pc, #288]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006dd2:	ee07 3a90 	vmov	s15, r3
 8006dd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006dda:	ed97 6a03 	vldr	s12, [r7, #12]
 8006dde:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006de2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006de6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006dea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006dee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006df2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006df6:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006dfa:	e021      	b.n	8006e40 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	ee07 3a90 	vmov	s15, r3
 8006e02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e06:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006efc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006e0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006e16:	ee07 3a90 	vmov	s15, r3
 8006e1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006e1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006e22:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006e26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006e2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006e2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006e32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006e36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e3a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8006e3e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8006e40:	4b2a      	ldr	r3, [pc, #168]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e44:	0a5b      	lsrs	r3, r3, #9
 8006e46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e4a:	ee07 3a90 	vmov	s15, r3
 8006e4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e52:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e66:	ee17 2a90 	vmov	r2, s15
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8006e6e:	4b1f      	ldr	r3, [pc, #124]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e72:	0c1b      	lsrs	r3, r3, #16
 8006e74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e78:	ee07 3a90 	vmov	s15, r3
 8006e7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006e80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006e84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006e88:	edd7 6a07 	vldr	s13, [r7, #28]
 8006e8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006e90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e94:	ee17 2a90 	vmov	r2, s15
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8006e9c:	4b13      	ldr	r3, [pc, #76]	; (8006eec <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	0e1b      	lsrs	r3, r3, #24
 8006ea2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ea6:	ee07 3a90 	vmov	s15, r3
 8006eaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006eb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006eb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8006eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006ebe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ec2:	ee17 2a90 	vmov	r2, s15
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006eca:	e008      	b.n	8006ede <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	609a      	str	r2, [r3, #8]
}
 8006ede:	bf00      	nop
 8006ee0:	3724      	adds	r7, #36	; 0x24
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
 8006eea:	bf00      	nop
 8006eec:	58024400 	.word	0x58024400
 8006ef0:	03d09000 	.word	0x03d09000
 8006ef4:	46000000 	.word	0x46000000
 8006ef8:	4c742400 	.word	0x4c742400
 8006efc:	4a742400 	.word	0x4a742400
 8006f00:	4af42400 	.word	0x4af42400

08006f04 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b084      	sub	sp, #16
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006f12:	4b53      	ldr	r3, [pc, #332]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f16:	f003 0303 	and.w	r3, r3, #3
 8006f1a:	2b03      	cmp	r3, #3
 8006f1c:	d101      	bne.n	8006f22 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e099      	b.n	8007056 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006f22:	4b4f      	ldr	r3, [pc, #316]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	4a4e      	ldr	r2, [pc, #312]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f28:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006f2e:	f7fa fabd 	bl	80014ac <HAL_GetTick>
 8006f32:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f34:	e008      	b.n	8006f48 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8006f36:	f7fa fab9 	bl	80014ac <HAL_GetTick>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	1ad3      	subs	r3, r2, r3
 8006f40:	2b02      	cmp	r3, #2
 8006f42:	d901      	bls.n	8006f48 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e086      	b.n	8007056 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006f48:	4b45      	ldr	r3, [pc, #276]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d1f0      	bne.n	8006f36 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006f54:	4b42      	ldr	r3, [pc, #264]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f58:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	031b      	lsls	r3, r3, #12
 8006f62:	493f      	ldr	r1, [pc, #252]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f64:	4313      	orrs	r3, r2
 8006f66:	628b      	str	r3, [r1, #40]	; 0x28
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	3b01      	subs	r3, #1
 8006f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	3b01      	subs	r3, #1
 8006f78:	025b      	lsls	r3, r3, #9
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	68db      	ldr	r3, [r3, #12]
 8006f82:	3b01      	subs	r3, #1
 8006f84:	041b      	lsls	r3, r3, #16
 8006f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006f8a:	431a      	orrs	r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	691b      	ldr	r3, [r3, #16]
 8006f90:	3b01      	subs	r3, #1
 8006f92:	061b      	lsls	r3, r3, #24
 8006f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006f98:	4931      	ldr	r1, [pc, #196]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006f9a:	4313      	orrs	r3, r2
 8006f9c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006f9e:	4b30      	ldr	r3, [pc, #192]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	695b      	ldr	r3, [r3, #20]
 8006faa:	492d      	ldr	r1, [pc, #180]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fac:	4313      	orrs	r3, r2
 8006fae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8006fb0:	4b2b      	ldr	r3, [pc, #172]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fb4:	f023 0220 	bic.w	r2, r3, #32
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	4928      	ldr	r1, [pc, #160]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8006fc2:	4b27      	ldr	r3, [pc, #156]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fc6:	4a26      	ldr	r2, [pc, #152]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fc8:	f023 0310 	bic.w	r3, r3, #16
 8006fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8006fce:	4b24      	ldr	r3, [pc, #144]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006fd2:	4b24      	ldr	r3, [pc, #144]	; (8007064 <RCCEx_PLL2_Config+0x160>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	687a      	ldr	r2, [r7, #4]
 8006fd8:	69d2      	ldr	r2, [r2, #28]
 8006fda:	00d2      	lsls	r2, r2, #3
 8006fdc:	4920      	ldr	r1, [pc, #128]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fde:	4313      	orrs	r3, r2
 8006fe0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8006fe2:	4b1f      	ldr	r3, [pc, #124]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fe6:	4a1e      	ldr	r2, [pc, #120]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006fe8:	f043 0310 	orr.w	r3, r3, #16
 8006fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8006fee:	683b      	ldr	r3, [r7, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d106      	bne.n	8007002 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006ff4:	4b1a      	ldr	r3, [pc, #104]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ff8:	4a19      	ldr	r2, [pc, #100]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8006ffa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007000:	e00f      	b.n	8007022 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b01      	cmp	r3, #1
 8007006:	d106      	bne.n	8007016 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8007008:	4b15      	ldr	r3, [pc, #84]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 800700a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800700c:	4a14      	ldr	r2, [pc, #80]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 800700e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007012:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007014:	e005      	b.n	8007022 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8007016:	4b12      	ldr	r3, [pc, #72]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8007018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800701a:	4a11      	ldr	r2, [pc, #68]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 800701c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007020:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8007022:	4b0f      	ldr	r3, [pc, #60]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a0e      	ldr	r2, [pc, #56]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 8007028:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800702c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800702e:	f7fa fa3d 	bl	80014ac <HAL_GetTick>
 8007032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007034:	e008      	b.n	8007048 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8007036:	f7fa fa39 	bl	80014ac <HAL_GetTick>
 800703a:	4602      	mov	r2, r0
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	2b02      	cmp	r3, #2
 8007042:	d901      	bls.n	8007048 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8007044:	2303      	movs	r3, #3
 8007046:	e006      	b.n	8007056 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8007048:	4b05      	ldr	r3, [pc, #20]	; (8007060 <RCCEx_PLL2_Config+0x15c>)
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007050:	2b00      	cmp	r3, #0
 8007052:	d0f0      	beq.n	8007036 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8007054:	7bfb      	ldrb	r3, [r7, #15]
}
 8007056:	4618      	mov	r0, r3
 8007058:	3710      	adds	r7, #16
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop
 8007060:	58024400 	.word	0x58024400
 8007064:	ffff0007 	.word	0xffff0007

08007068 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8007068:	b580      	push	{r7, lr}
 800706a:	b084      	sub	sp, #16
 800706c:	af00      	add	r7, sp, #0
 800706e:	6078      	str	r0, [r7, #4]
 8007070:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007072:	2300      	movs	r3, #0
 8007074:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8007076:	4b53      	ldr	r3, [pc, #332]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800707a:	f003 0303 	and.w	r3, r3, #3
 800707e:	2b03      	cmp	r3, #3
 8007080:	d101      	bne.n	8007086 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e099      	b.n	80071ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8007086:	4b4f      	ldr	r3, [pc, #316]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	4a4e      	ldr	r2, [pc, #312]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800708c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007090:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007092:	f7fa fa0b 	bl	80014ac <HAL_GetTick>
 8007096:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8007098:	e008      	b.n	80070ac <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800709a:	f7fa fa07 	bl	80014ac <HAL_GetTick>
 800709e:	4602      	mov	r2, r0
 80070a0:	68bb      	ldr	r3, [r7, #8]
 80070a2:	1ad3      	subs	r3, r2, r3
 80070a4:	2b02      	cmp	r3, #2
 80070a6:	d901      	bls.n	80070ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80070a8:	2303      	movs	r3, #3
 80070aa:	e086      	b.n	80071ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80070ac:	4b45      	ldr	r3, [pc, #276]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1f0      	bne.n	800709a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80070b8:	4b42      	ldr	r3, [pc, #264]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 80070ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	051b      	lsls	r3, r3, #20
 80070c6:	493f      	ldr	r1, [pc, #252]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 80070c8:	4313      	orrs	r3, r2
 80070ca:	628b      	str	r3, [r1, #40]	; 0x28
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	3b01      	subs	r3, #1
 80070d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	3b01      	subs	r3, #1
 80070dc:	025b      	lsls	r3, r3, #9
 80070de:	b29b      	uxth	r3, r3
 80070e0:	431a      	orrs	r2, r3
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	041b      	lsls	r3, r3, #16
 80070ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80070ee:	431a      	orrs	r2, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	691b      	ldr	r3, [r3, #16]
 80070f4:	3b01      	subs	r3, #1
 80070f6:	061b      	lsls	r3, r3, #24
 80070f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80070fc:	4931      	ldr	r1, [pc, #196]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 80070fe:	4313      	orrs	r3, r2
 8007100:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8007102:	4b30      	ldr	r3, [pc, #192]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007106:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	492d      	ldr	r1, [pc, #180]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007110:	4313      	orrs	r3, r2
 8007112:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8007114:	4b2b      	ldr	r3, [pc, #172]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007118:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	699b      	ldr	r3, [r3, #24]
 8007120:	4928      	ldr	r1, [pc, #160]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007122:	4313      	orrs	r3, r2
 8007124:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8007126:	4b27      	ldr	r3, [pc, #156]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800712a:	4a26      	ldr	r2, [pc, #152]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800712c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007130:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8007132:	4b24      	ldr	r3, [pc, #144]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007136:	4b24      	ldr	r3, [pc, #144]	; (80071c8 <RCCEx_PLL3_Config+0x160>)
 8007138:	4013      	ands	r3, r2
 800713a:	687a      	ldr	r2, [r7, #4]
 800713c:	69d2      	ldr	r2, [r2, #28]
 800713e:	00d2      	lsls	r2, r2, #3
 8007140:	4920      	ldr	r1, [pc, #128]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007142:	4313      	orrs	r3, r2
 8007144:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8007146:	4b1f      	ldr	r3, [pc, #124]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800714a:	4a1e      	ldr	r2, [pc, #120]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800714c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007150:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d106      	bne.n	8007166 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8007158:	4b1a      	ldr	r3, [pc, #104]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800715a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800715c:	4a19      	ldr	r2, [pc, #100]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800715e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007162:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007164:	e00f      	b.n	8007186 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b01      	cmp	r3, #1
 800716a:	d106      	bne.n	800717a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800716c:	4b15      	ldr	r3, [pc, #84]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800716e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007170:	4a14      	ldr	r2, [pc, #80]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007172:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007176:	62d3      	str	r3, [r2, #44]	; 0x2c
 8007178:	e005      	b.n	8007186 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800717c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800717e:	4a11      	ldr	r2, [pc, #68]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007180:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007184:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8007186:	4b0f      	ldr	r3, [pc, #60]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	4a0e      	ldr	r2, [pc, #56]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 800718c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007192:	f7fa f98b 	bl	80014ac <HAL_GetTick>
 8007196:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8007198:	e008      	b.n	80071ac <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800719a:	f7fa f987 	bl	80014ac <HAL_GetTick>
 800719e:	4602      	mov	r2, r0
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	1ad3      	subs	r3, r2, r3
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d901      	bls.n	80071ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80071a8:	2303      	movs	r3, #3
 80071aa:	e006      	b.n	80071ba <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80071ac:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <RCCEx_PLL3_Config+0x15c>)
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0f0      	beq.n	800719a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	58024400 	.word	0x58024400
 80071c8:	ffff0007 	.word	0xffff0007

080071cc <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e0f1      	b.n	80073c2 <HAL_SPI_Init+0x1f6>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a78      	ldr	r2, [pc, #480]	; (80073cc <HAL_SPI_Init+0x200>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d00f      	beq.n	800720e <HAL_SPI_Init+0x42>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a77      	ldr	r2, [pc, #476]	; (80073d0 <HAL_SPI_Init+0x204>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d00a      	beq.n	800720e <HAL_SPI_Init+0x42>
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a75      	ldr	r2, [pc, #468]	; (80073d4 <HAL_SPI_Init+0x208>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d005      	beq.n	800720e <HAL_SPI_Init+0x42>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	68db      	ldr	r3, [r3, #12]
 8007206:	2b0f      	cmp	r3, #15
 8007208:	d901      	bls.n	800720e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e0d9      	b.n	80073c2 <HAL_SPI_Init+0x1f6>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f8e2 	bl	80073d8 <SPI_GetPacketSize>
 8007214:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a6c      	ldr	r2, [pc, #432]	; (80073cc <HAL_SPI_Init+0x200>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d00c      	beq.n	800723a <HAL_SPI_Init+0x6e>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a6a      	ldr	r2, [pc, #424]	; (80073d0 <HAL_SPI_Init+0x204>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d007      	beq.n	800723a <HAL_SPI_Init+0x6e>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a69      	ldr	r2, [pc, #420]	; (80073d4 <HAL_SPI_Init+0x208>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d002      	beq.n	800723a <HAL_SPI_Init+0x6e>
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	2b08      	cmp	r3, #8
 8007238:	d811      	bhi.n	800725e <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800723e:	4a63      	ldr	r2, [pc, #396]	; (80073cc <HAL_SPI_Init+0x200>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d009      	beq.n	8007258 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	4a61      	ldr	r2, [pc, #388]	; (80073d0 <HAL_SPI_Init+0x204>)
 800724a:	4293      	cmp	r3, r2
 800724c:	d004      	beq.n	8007258 <HAL_SPI_Init+0x8c>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	4a60      	ldr	r2, [pc, #384]	; (80073d4 <HAL_SPI_Init+0x208>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d104      	bne.n	8007262 <HAL_SPI_Init+0x96>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b10      	cmp	r3, #16
 800725c:	d901      	bls.n	8007262 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800725e:	2301      	movs	r3, #1
 8007260:	e0af      	b.n	80073c2 <HAL_SPI_Init+0x1f6>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8007268:	b2db      	uxtb	r3, r3
 800726a:	2b00      	cmp	r3, #0
 800726c:	d106      	bne.n	800727c <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007276:	6878      	ldr	r0, [r7, #4]
 8007278:	f7f9 fe88 	bl	8000f8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2202      	movs	r2, #2
 8007280:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	681a      	ldr	r2, [r3, #0]
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	f022 0201 	bic.w	r2, r2, #1
 8007292:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	689b      	ldr	r3, [r3, #8]
 800729a:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800729e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80072a8:	d119      	bne.n	80072de <HAL_SPI_Init+0x112>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	685b      	ldr	r3, [r3, #4]
 80072ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072b2:	d103      	bne.n	80072bc <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d008      	beq.n	80072ce <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d10c      	bne.n	80072de <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 80072c8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80072cc:	d107      	bne.n	80072de <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80072dc:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	69da      	ldr	r2, [r3, #28]
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e6:	431a      	orrs	r2, r3
 80072e8:	68bb      	ldr	r3, [r7, #8]
 80072ea:	431a      	orrs	r2, r3
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f0:	ea42 0103 	orr.w	r1, r2, r3
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	430a      	orrs	r2, r1
 80072fe:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007308:	431a      	orrs	r2, r3
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730e:	431a      	orrs	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	431a      	orrs	r2, r3
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	691b      	ldr	r3, [r3, #16]
 800731a:	431a      	orrs	r2, r3
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	695b      	ldr	r3, [r3, #20]
 8007320:	431a      	orrs	r2, r3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6a1b      	ldr	r3, [r3, #32]
 8007326:	431a      	orrs	r2, r3
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	431a      	orrs	r2, r3
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007332:	431a      	orrs	r2, r3
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	689b      	ldr	r3, [r3, #8]
 8007338:	431a      	orrs	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800733e:	ea42 0103 	orr.w	r1, r2, r3
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	430a      	orrs	r2, r1
 800734c:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d113      	bne.n	800737e <HAL_SPI_Init+0x1b2>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007368:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	689b      	ldr	r3, [r3, #8]
 8007370:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800737c:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f022 0201 	bic.w	r2, r2, #1
 800738c:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_SPI_Init+0x1e4>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40013000 	.word	0x40013000
 80073d0:	40003800 	.word	0x40003800
 80073d4:	40003c00 	.word	0x40003c00

080073d8 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 80073d8:	b480      	push	{r7}
 80073da:	b085      	sub	sp, #20
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e4:	095b      	lsrs	r3, r3, #5
 80073e6:	3301      	adds	r3, #1
 80073e8:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3307      	adds	r3, #7
 80073f6:	08db      	lsrs	r3, r3, #3
 80073f8:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 80073fa:	68bb      	ldr	r3, [r7, #8]
 80073fc:	68fa      	ldr	r2, [r7, #12]
 80073fe:	fb02 f303 	mul.w	r3, r2, r3
}
 8007402:	4618      	mov	r0, r3
 8007404:	3714      	adds	r7, #20
 8007406:	46bd      	mov	sp, r7
 8007408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740c:	4770      	bx	lr

0800740e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800740e:	b580      	push	{r7, lr}
 8007410:	b082      	sub	sp, #8
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d101      	bne.n	8007420 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800741c:	2301      	movs	r3, #1
 800741e:	e042      	b.n	80074a6 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007426:	2b00      	cmp	r3, #0
 8007428:	d106      	bne.n	8007438 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f7f9 fe16 	bl	8001064 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2224      	movs	r2, #36	; 0x24
 800743c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f022 0201 	bic.w	r2, r2, #1
 800744e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fbeb 	bl	8007c2c <UART_SetConfig>
 8007456:	4603      	mov	r3, r0
 8007458:	2b01      	cmp	r3, #1
 800745a:	d101      	bne.n	8007460 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800745c:	2301      	movs	r3, #1
 800745e:	e022      	b.n	80074a6 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007464:	2b00      	cmp	r3, #0
 8007466:	d002      	beq.n	800746e <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f001 f947 	bl	80086fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	685a      	ldr	r2, [r3, #4]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800747c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	689a      	ldr	r2, [r3, #8]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800748c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f042 0201 	orr.w	r2, r2, #1
 800749c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f001 f9ce 	bl	8008840 <UART_CheckIdleState>
 80074a4:	4603      	mov	r3, r0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3708      	adds	r7, #8
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b0ba      	sub	sp, #232	; 0xe8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	69db      	ldr	r3, [r3, #28]
 80074be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	689b      	ldr	r3, [r3, #8]
 80074d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80074d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80074da:	f640 030f 	movw	r3, #2063	; 0x80f
 80074de:	4013      	ands	r3, r2
 80074e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80074e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d11b      	bne.n	8007524 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80074ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f0:	f003 0320 	and.w	r3, r3, #32
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d015      	beq.n	8007524 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80074f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074fc:	f003 0320 	and.w	r3, r3, #32
 8007500:	2b00      	cmp	r3, #0
 8007502:	d105      	bne.n	8007510 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d009      	beq.n	8007524 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007514:	2b00      	cmp	r3, #0
 8007516:	f000 835a 	beq.w	8007bce <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	4798      	blx	r3
      }
      return;
 8007522:	e354      	b.n	8007bce <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 811f 	beq.w	800776c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800752e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007532:	4b8b      	ldr	r3, [pc, #556]	; (8007760 <HAL_UART_IRQHandler+0x2b0>)
 8007534:	4013      	ands	r3, r2
 8007536:	2b00      	cmp	r3, #0
 8007538:	d106      	bne.n	8007548 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800753a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800753e:	4b89      	ldr	r3, [pc, #548]	; (8007764 <HAL_UART_IRQHandler+0x2b4>)
 8007540:	4013      	ands	r3, r2
 8007542:	2b00      	cmp	r3, #0
 8007544:	f000 8112 	beq.w	800776c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800754c:	f003 0301 	and.w	r3, r3, #1
 8007550:	2b00      	cmp	r3, #0
 8007552:	d011      	beq.n	8007578 <HAL_UART_IRQHandler+0xc8>
 8007554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800755c:	2b00      	cmp	r3, #0
 800755e:	d00b      	beq.n	8007578 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2201      	movs	r2, #1
 8007566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800756e:	f043 0201 	orr.w	r2, r3, #1
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800757c:	f003 0302 	and.w	r3, r3, #2
 8007580:	2b00      	cmp	r3, #0
 8007582:	d011      	beq.n	80075a8 <HAL_UART_IRQHandler+0xf8>
 8007584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007588:	f003 0301 	and.w	r3, r3, #1
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	2202      	movs	r2, #2
 8007596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800759e:	f043 0204 	orr.w	r2, r3, #4
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ac:	f003 0304 	and.w	r3, r3, #4
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d011      	beq.n	80075d8 <HAL_UART_IRQHandler+0x128>
 80075b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80075b8:	f003 0301 	and.w	r3, r3, #1
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00b      	beq.n	80075d8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2204      	movs	r2, #4
 80075c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075ce:	f043 0202 	orr.w	r2, r3, #2
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80075d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075dc:	f003 0308 	and.w	r3, r3, #8
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d017      	beq.n	8007614 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e8:	f003 0320 	and.w	r3, r3, #32
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d105      	bne.n	80075fc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80075f0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80075f4:	4b5a      	ldr	r3, [pc, #360]	; (8007760 <HAL_UART_IRQHandler+0x2b0>)
 80075f6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d00b      	beq.n	8007614 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2208      	movs	r2, #8
 8007602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800760a:	f043 0208 	orr.w	r2, r3, #8
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800761c:	2b00      	cmp	r3, #0
 800761e:	d012      	beq.n	8007646 <HAL_UART_IRQHandler+0x196>
 8007620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007628:	2b00      	cmp	r3, #0
 800762a:	d00c      	beq.n	8007646 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800763c:	f043 0220 	orr.w	r2, r3, #32
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 82c0 	beq.w	8007bd2 <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007656:	f003 0320 	and.w	r3, r3, #32
 800765a:	2b00      	cmp	r3, #0
 800765c:	d013      	beq.n	8007686 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800765e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007662:	f003 0320 	and.w	r3, r3, #32
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800766a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800766e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007672:	2b00      	cmp	r3, #0
 8007674:	d007      	beq.n	8007686 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800767a:	2b00      	cmp	r3, #0
 800767c:	d003      	beq.n	8007686 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800768c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800769a:	2b40      	cmp	r3, #64	; 0x40
 800769c:	d005      	beq.n	80076aa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800769e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d04f      	beq.n	800774a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f001 f9dc 	bl	8008a68 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	689b      	ldr	r3, [r3, #8]
 80076b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ba:	2b40      	cmp	r3, #64	; 0x40
 80076bc:	d141      	bne.n	8007742 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	3308      	adds	r3, #8
 80076c4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076cc:	e853 3f00 	ldrex	r3, [r3]
 80076d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80076d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80076d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80076dc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80076ea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80076ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076f2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80076f6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80076fa:	e841 2300 	strex	r3, r2, [r1]
 80076fe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007702:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d1d9      	bne.n	80076be <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800770e:	2b00      	cmp	r3, #0
 8007710:	d013      	beq.n	800773a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007716:	4a14      	ldr	r2, [pc, #80]	; (8007768 <HAL_UART_IRQHandler+0x2b8>)
 8007718:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800771e:	4618      	mov	r0, r3
 8007720:	f7fa fe9e 	bl	8002460 <HAL_DMA_Abort_IT>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d017      	beq.n	800775a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800772e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007734:	4610      	mov	r0, r2
 8007736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007738:	e00f      	b.n	800775a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800773a:	6878      	ldr	r0, [r7, #4]
 800773c:	f000 fa60 	bl	8007c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007740:	e00b      	b.n	800775a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 fa5c 	bl	8007c00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007748:	e007      	b.n	800775a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa58 	bl	8007c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007758:	e23b      	b.n	8007bd2 <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800775a:	bf00      	nop
    return;
 800775c:	e239      	b.n	8007bd2 <HAL_UART_IRQHandler+0x722>
 800775e:	bf00      	nop
 8007760:	10000001 	.word	0x10000001
 8007764:	04000120 	.word	0x04000120
 8007768:	08008b35 	.word	0x08008b35

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007770:	2b01      	cmp	r3, #1
 8007772:	f040 81ce 	bne.w	8007b12 <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800777a:	f003 0310 	and.w	r3, r3, #16
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 81c7 	beq.w	8007b12 <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007784:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007788:	f003 0310 	and.w	r3, r3, #16
 800778c:	2b00      	cmp	r3, #0
 800778e:	f000 81c0 	beq.w	8007b12 <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	2210      	movs	r2, #16
 8007798:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	689b      	ldr	r3, [r3, #8]
 80077a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	f040 813b 	bne.w	8007a20 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a8b      	ldr	r2, [pc, #556]	; (80079e0 <HAL_UART_IRQHandler+0x530>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d059      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a89      	ldr	r2, [pc, #548]	; (80079e4 <HAL_UART_IRQHandler+0x534>)
 80077be:	4293      	cmp	r3, r2
 80077c0:	d053      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	4a87      	ldr	r2, [pc, #540]	; (80079e8 <HAL_UART_IRQHandler+0x538>)
 80077ca:	4293      	cmp	r3, r2
 80077cc:	d04d      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4a85      	ldr	r2, [pc, #532]	; (80079ec <HAL_UART_IRQHandler+0x53c>)
 80077d6:	4293      	cmp	r3, r2
 80077d8:	d047      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a83      	ldr	r2, [pc, #524]	; (80079f0 <HAL_UART_IRQHandler+0x540>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d041      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a81      	ldr	r2, [pc, #516]	; (80079f4 <HAL_UART_IRQHandler+0x544>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d03b      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	4a7f      	ldr	r2, [pc, #508]	; (80079f8 <HAL_UART_IRQHandler+0x548>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d035      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	4a7d      	ldr	r2, [pc, #500]	; (80079fc <HAL_UART_IRQHandler+0x54c>)
 8007806:	4293      	cmp	r3, r2
 8007808:	d02f      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	4a7b      	ldr	r2, [pc, #492]	; (8007a00 <HAL_UART_IRQHandler+0x550>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d029      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a79      	ldr	r2, [pc, #484]	; (8007a04 <HAL_UART_IRQHandler+0x554>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d023      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a77      	ldr	r2, [pc, #476]	; (8007a08 <HAL_UART_IRQHandler+0x558>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d01d      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	4a75      	ldr	r2, [pc, #468]	; (8007a0c <HAL_UART_IRQHandler+0x55c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d017      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	4a73      	ldr	r2, [pc, #460]	; (8007a10 <HAL_UART_IRQHandler+0x560>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d011      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a71      	ldr	r2, [pc, #452]	; (8007a14 <HAL_UART_IRQHandler+0x564>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00b      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	4a6f      	ldr	r2, [pc, #444]	; (8007a18 <HAL_UART_IRQHandler+0x568>)
 800785a:	4293      	cmp	r3, r2
 800785c:	d005      	beq.n	800786a <HAL_UART_IRQHandler+0x3ba>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4a6d      	ldr	r2, [pc, #436]	; (8007a1c <HAL_UART_IRQHandler+0x56c>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d105      	bne.n	8007876 <HAL_UART_IRQHandler+0x3c6>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	b29b      	uxth	r3, r3
 8007874:	e004      	b.n	8007880 <HAL_UART_IRQHandler+0x3d0>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	b29b      	uxth	r3, r3
 8007880:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007884:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007888:	2b00      	cmp	r3, #0
 800788a:	f000 81a4 	beq.w	8007bd6 <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007894:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007898:	429a      	cmp	r2, r3
 800789a:	f080 819c 	bcs.w	8007bd6 <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80078a4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80078ac:	69db      	ldr	r3, [r3, #28]
 80078ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80078b2:	f000 8086 	beq.w	80079c2 <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80078ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80078ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078d2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80078e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80078e4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80078ec:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80078f0:	e841 2300 	strex	r3, r2, [r1]
 80078f4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80078f8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d1da      	bne.n	80078b6 <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	3308      	adds	r3, #8
 8007906:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007910:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007912:	f023 0301 	bic.w	r3, r3, #1
 8007916:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	3308      	adds	r3, #8
 8007920:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007924:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007928:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800792a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800792c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007930:	e841 2300 	strex	r3, r2, [r1]
 8007934:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007936:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007938:	2b00      	cmp	r3, #0
 800793a:	d1e1      	bne.n	8007900 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	3308      	adds	r3, #8
 8007942:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007946:	e853 3f00 	ldrex	r3, [r3]
 800794a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800794c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800794e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007952:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007960:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007962:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007966:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800796e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e3      	bne.n	800793c <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800798a:	e853 3f00 	ldrex	r3, [r3]
 800798e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007990:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007992:	f023 0310 	bic.w	r3, r3, #16
 8007996:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	461a      	mov	r2, r3
 80079a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80079a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80079a6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079a8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80079aa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80079ac:	e841 2300 	strex	r3, r2, [r1]
 80079b0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80079b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d1e4      	bne.n	8007982 <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80079bc:	4618      	mov	r0, r3
 80079be:	f7fa fa31 	bl	8001e24 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80079ce:	b29b      	uxth	r3, r3
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	b29b      	uxth	r3, r3
 80079d4:	4619      	mov	r1, r3
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f91c 	bl	8007c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80079dc:	e0fb      	b.n	8007bd6 <HAL_UART_IRQHandler+0x726>
 80079de:	bf00      	nop
 80079e0:	40020010 	.word	0x40020010
 80079e4:	40020028 	.word	0x40020028
 80079e8:	40020040 	.word	0x40020040
 80079ec:	40020058 	.word	0x40020058
 80079f0:	40020070 	.word	0x40020070
 80079f4:	40020088 	.word	0x40020088
 80079f8:	400200a0 	.word	0x400200a0
 80079fc:	400200b8 	.word	0x400200b8
 8007a00:	40020410 	.word	0x40020410
 8007a04:	40020428 	.word	0x40020428
 8007a08:	40020440 	.word	0x40020440
 8007a0c:	40020458 	.word	0x40020458
 8007a10:	40020470 	.word	0x40020470
 8007a14:	40020488 	.word	0x40020488
 8007a18:	400204a0 	.word	0x400204a0
 8007a1c:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a2c:	b29b      	uxth	r3, r3
 8007a2e:	1ad3      	subs	r3, r2, r3
 8007a30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a3a:	b29b      	uxth	r3, r3
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	f000 80cc 	beq.w	8007bda <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 8007a42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	f000 80c7 	beq.w	8007bda <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a54:	e853 3f00 	ldrex	r3, [r3]
 8007a58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007a5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	461a      	mov	r2, r3
 8007a6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007a70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a76:	e841 2300 	strex	r3, r2, [r1]
 8007a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d1e4      	bne.n	8007a4c <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3308      	adds	r3, #8
 8007a88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a8c:	e853 3f00 	ldrex	r3, [r3]
 8007a90:	623b      	str	r3, [r7, #32]
   return(result);
 8007a92:	6a3a      	ldr	r2, [r7, #32]
 8007a94:	4b54      	ldr	r3, [pc, #336]	; (8007be8 <HAL_UART_IRQHandler+0x738>)
 8007a96:	4013      	ands	r3, r2
 8007a98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	3308      	adds	r3, #8
 8007aa2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007aa6:	633a      	str	r2, [r7, #48]	; 0x30
 8007aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aaa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007aac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007aae:	e841 2300 	strex	r3, r2, [r1]
 8007ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d1e3      	bne.n	8007a82 <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2220      	movs	r2, #32
 8007abe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	2200      	movs	r2, #0
 8007acc:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ad4:	693b      	ldr	r3, [r7, #16]
 8007ad6:	e853 3f00 	ldrex	r3, [r3]
 8007ada:	60fb      	str	r3, [r7, #12]
   return(result);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	f023 0310 	bic.w	r3, r3, #16
 8007ae2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	461a      	mov	r2, r3
 8007aec:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007af0:	61fb      	str	r3, [r7, #28]
 8007af2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af4:	69b9      	ldr	r1, [r7, #24]
 8007af6:	69fa      	ldr	r2, [r7, #28]
 8007af8:	e841 2300 	strex	r3, r2, [r1]
 8007afc:	617b      	str	r3, [r7, #20]
   return(result);
 8007afe:	697b      	ldr	r3, [r7, #20]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e4      	bne.n	8007ace <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007b04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007b08:	4619      	mov	r1, r3
 8007b0a:	6878      	ldr	r0, [r7, #4]
 8007b0c:	f000 f882 	bl	8007c14 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007b10:	e063      	b.n	8007bda <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d00e      	beq.n	8007b3c <HAL_UART_IRQHandler+0x68c>
 8007b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d008      	beq.n	8007b3c <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007b32:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f001 f83e 	bl	8008bb6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007b3a:	e051      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007b3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d014      	beq.n	8007b72 <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007b48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d105      	bne.n	8007b60 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007b54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b58:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d008      	beq.n	8007b72 <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d03a      	beq.n	8007bde <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	4798      	blx	r3
    }
    return;
 8007b70:	e035      	b.n	8007bde <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007b72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d009      	beq.n	8007b92 <HAL_UART_IRQHandler+0x6e2>
 8007b7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 ffe8 	bl	8008b60 <UART_EndTransmit_IT>
    return;
 8007b90:	e026      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007b92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d009      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x702>
 8007b9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007ba2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d003      	beq.n	8007bb2 <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f001 f817 	bl	8008bde <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bb0:	e016      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d010      	beq.n	8007be0 <HAL_UART_IRQHandler+0x730>
 8007bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	da0c      	bge.n	8007be0 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 ffff 	bl	8008bca <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bcc:	e008      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
      return;
 8007bce:	bf00      	nop
 8007bd0:	e006      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
    return;
 8007bd2:	bf00      	nop
 8007bd4:	e004      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
      return;
 8007bd6:	bf00      	nop
 8007bd8:	e002      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
      return;
 8007bda:	bf00      	nop
 8007bdc:	e000      	b.n	8007be0 <HAL_UART_IRQHandler+0x730>
    return;
 8007bde:	bf00      	nop
  }
}
 8007be0:	37e8      	adds	r7, #232	; 0xe8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}
 8007be6:	bf00      	nop
 8007be8:	effffffe 	.word	0xeffffffe

08007bec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007bec:	b480      	push	{r7}
 8007bee:	b083      	sub	sp, #12
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007bf4:	bf00      	nop
 8007bf6:	370c      	adds	r7, #12
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007c08:	bf00      	nop
 8007c0a:	370c      	adds	r7, #12
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007c20:	bf00      	nop
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c30:	b092      	sub	sp, #72	; 0x48
 8007c32:	af00      	add	r7, sp, #0
 8007c34:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007c36:	2300      	movs	r3, #0
 8007c38:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	691b      	ldr	r3, [r3, #16]
 8007c44:	431a      	orrs	r2, r3
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	695b      	ldr	r3, [r3, #20]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	697b      	ldr	r3, [r7, #20]
 8007c4e:	69db      	ldr	r3, [r3, #28]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	4bbe      	ldr	r3, [pc, #760]	; (8007f54 <UART_SetConfig+0x328>)
 8007c5c:	4013      	ands	r3, r2
 8007c5e:	697a      	ldr	r2, [r7, #20]
 8007c60:	6812      	ldr	r2, [r2, #0]
 8007c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007c64:	430b      	orrs	r3, r1
 8007c66:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c68:	697b      	ldr	r3, [r7, #20]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	697b      	ldr	r3, [r7, #20]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	430a      	orrs	r2, r1
 8007c7c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	4ab3      	ldr	r2, [pc, #716]	; (8007f58 <UART_SetConfig+0x32c>)
 8007c8a:	4293      	cmp	r3, r2
 8007c8c:	d004      	beq.n	8007c98 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	6a1b      	ldr	r3, [r3, #32]
 8007c92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c94:	4313      	orrs	r3, r2
 8007c96:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	689a      	ldr	r2, [r3, #8]
 8007c9e:	4baf      	ldr	r3, [pc, #700]	; (8007f5c <UART_SetConfig+0x330>)
 8007ca0:	4013      	ands	r3, r2
 8007ca2:	697a      	ldr	r2, [r7, #20]
 8007ca4:	6812      	ldr	r2, [r2, #0]
 8007ca6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ca8:	430b      	orrs	r3, r1
 8007caa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cb2:	f023 010f 	bic.w	r1, r3, #15
 8007cb6:	697b      	ldr	r3, [r7, #20]
 8007cb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	430a      	orrs	r2, r1
 8007cc0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	4aa6      	ldr	r2, [pc, #664]	; (8007f60 <UART_SetConfig+0x334>)
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d177      	bne.n	8007dbc <UART_SetConfig+0x190>
 8007ccc:	4ba5      	ldr	r3, [pc, #660]	; (8007f64 <UART_SetConfig+0x338>)
 8007cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007cd0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007cd4:	2b28      	cmp	r3, #40	; 0x28
 8007cd6:	d86d      	bhi.n	8007db4 <UART_SetConfig+0x188>
 8007cd8:	a201      	add	r2, pc, #4	; (adr r2, 8007ce0 <UART_SetConfig+0xb4>)
 8007cda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cde:	bf00      	nop
 8007ce0:	08007d85 	.word	0x08007d85
 8007ce4:	08007db5 	.word	0x08007db5
 8007ce8:	08007db5 	.word	0x08007db5
 8007cec:	08007db5 	.word	0x08007db5
 8007cf0:	08007db5 	.word	0x08007db5
 8007cf4:	08007db5 	.word	0x08007db5
 8007cf8:	08007db5 	.word	0x08007db5
 8007cfc:	08007db5 	.word	0x08007db5
 8007d00:	08007d8d 	.word	0x08007d8d
 8007d04:	08007db5 	.word	0x08007db5
 8007d08:	08007db5 	.word	0x08007db5
 8007d0c:	08007db5 	.word	0x08007db5
 8007d10:	08007db5 	.word	0x08007db5
 8007d14:	08007db5 	.word	0x08007db5
 8007d18:	08007db5 	.word	0x08007db5
 8007d1c:	08007db5 	.word	0x08007db5
 8007d20:	08007d95 	.word	0x08007d95
 8007d24:	08007db5 	.word	0x08007db5
 8007d28:	08007db5 	.word	0x08007db5
 8007d2c:	08007db5 	.word	0x08007db5
 8007d30:	08007db5 	.word	0x08007db5
 8007d34:	08007db5 	.word	0x08007db5
 8007d38:	08007db5 	.word	0x08007db5
 8007d3c:	08007db5 	.word	0x08007db5
 8007d40:	08007d9d 	.word	0x08007d9d
 8007d44:	08007db5 	.word	0x08007db5
 8007d48:	08007db5 	.word	0x08007db5
 8007d4c:	08007db5 	.word	0x08007db5
 8007d50:	08007db5 	.word	0x08007db5
 8007d54:	08007db5 	.word	0x08007db5
 8007d58:	08007db5 	.word	0x08007db5
 8007d5c:	08007db5 	.word	0x08007db5
 8007d60:	08007da5 	.word	0x08007da5
 8007d64:	08007db5 	.word	0x08007db5
 8007d68:	08007db5 	.word	0x08007db5
 8007d6c:	08007db5 	.word	0x08007db5
 8007d70:	08007db5 	.word	0x08007db5
 8007d74:	08007db5 	.word	0x08007db5
 8007d78:	08007db5 	.word	0x08007db5
 8007d7c:	08007db5 	.word	0x08007db5
 8007d80:	08007dad 	.word	0x08007dad
 8007d84:	2301      	movs	r3, #1
 8007d86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d8a:	e222      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007d8c:	2304      	movs	r3, #4
 8007d8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d92:	e21e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007d94:	2308      	movs	r3, #8
 8007d96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007d9a:	e21a      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007d9c:	2310      	movs	r3, #16
 8007d9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007da2:	e216      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007da4:	2320      	movs	r3, #32
 8007da6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007daa:	e212      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007dac:	2340      	movs	r3, #64	; 0x40
 8007dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007db2:	e20e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dba:	e20a      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007dbc:	697b      	ldr	r3, [r7, #20]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4a69      	ldr	r2, [pc, #420]	; (8007f68 <UART_SetConfig+0x33c>)
 8007dc2:	4293      	cmp	r3, r2
 8007dc4:	d130      	bne.n	8007e28 <UART_SetConfig+0x1fc>
 8007dc6:	4b67      	ldr	r3, [pc, #412]	; (8007f64 <UART_SetConfig+0x338>)
 8007dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007dca:	f003 0307 	and.w	r3, r3, #7
 8007dce:	2b05      	cmp	r3, #5
 8007dd0:	d826      	bhi.n	8007e20 <UART_SetConfig+0x1f4>
 8007dd2:	a201      	add	r2, pc, #4	; (adr r2, 8007dd8 <UART_SetConfig+0x1ac>)
 8007dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007dd8:	08007df1 	.word	0x08007df1
 8007ddc:	08007df9 	.word	0x08007df9
 8007de0:	08007e01 	.word	0x08007e01
 8007de4:	08007e09 	.word	0x08007e09
 8007de8:	08007e11 	.word	0x08007e11
 8007dec:	08007e19 	.word	0x08007e19
 8007df0:	2300      	movs	r3, #0
 8007df2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007df6:	e1ec      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007df8:	2304      	movs	r3, #4
 8007dfa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007dfe:	e1e8      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e00:	2308      	movs	r3, #8
 8007e02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e06:	e1e4      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e08:	2310      	movs	r3, #16
 8007e0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e0e:	e1e0      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e10:	2320      	movs	r3, #32
 8007e12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e16:	e1dc      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e18:	2340      	movs	r3, #64	; 0x40
 8007e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e1e:	e1d8      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e20:	2380      	movs	r3, #128	; 0x80
 8007e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e26:	e1d4      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	4a4f      	ldr	r2, [pc, #316]	; (8007f6c <UART_SetConfig+0x340>)
 8007e2e:	4293      	cmp	r3, r2
 8007e30:	d130      	bne.n	8007e94 <UART_SetConfig+0x268>
 8007e32:	4b4c      	ldr	r3, [pc, #304]	; (8007f64 <UART_SetConfig+0x338>)
 8007e34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e36:	f003 0307 	and.w	r3, r3, #7
 8007e3a:	2b05      	cmp	r3, #5
 8007e3c:	d826      	bhi.n	8007e8c <UART_SetConfig+0x260>
 8007e3e:	a201      	add	r2, pc, #4	; (adr r2, 8007e44 <UART_SetConfig+0x218>)
 8007e40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e44:	08007e5d 	.word	0x08007e5d
 8007e48:	08007e65 	.word	0x08007e65
 8007e4c:	08007e6d 	.word	0x08007e6d
 8007e50:	08007e75 	.word	0x08007e75
 8007e54:	08007e7d 	.word	0x08007e7d
 8007e58:	08007e85 	.word	0x08007e85
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e62:	e1b6      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e64:	2304      	movs	r3, #4
 8007e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e6a:	e1b2      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e6c:	2308      	movs	r3, #8
 8007e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e72:	e1ae      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e74:	2310      	movs	r3, #16
 8007e76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e7a:	e1aa      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e7c:	2320      	movs	r3, #32
 8007e7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e82:	e1a6      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e84:	2340      	movs	r3, #64	; 0x40
 8007e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e8a:	e1a2      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e8c:	2380      	movs	r3, #128	; 0x80
 8007e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007e92:	e19e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a35      	ldr	r2, [pc, #212]	; (8007f70 <UART_SetConfig+0x344>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d130      	bne.n	8007f00 <UART_SetConfig+0x2d4>
 8007e9e:	4b31      	ldr	r3, [pc, #196]	; (8007f64 <UART_SetConfig+0x338>)
 8007ea0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007ea2:	f003 0307 	and.w	r3, r3, #7
 8007ea6:	2b05      	cmp	r3, #5
 8007ea8:	d826      	bhi.n	8007ef8 <UART_SetConfig+0x2cc>
 8007eaa:	a201      	add	r2, pc, #4	; (adr r2, 8007eb0 <UART_SetConfig+0x284>)
 8007eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007eb0:	08007ec9 	.word	0x08007ec9
 8007eb4:	08007ed1 	.word	0x08007ed1
 8007eb8:	08007ed9 	.word	0x08007ed9
 8007ebc:	08007ee1 	.word	0x08007ee1
 8007ec0:	08007ee9 	.word	0x08007ee9
 8007ec4:	08007ef1 	.word	0x08007ef1
 8007ec8:	2300      	movs	r3, #0
 8007eca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ece:	e180      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007ed0:	2304      	movs	r3, #4
 8007ed2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ed6:	e17c      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007ed8:	2308      	movs	r3, #8
 8007eda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ede:	e178      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007ee0:	2310      	movs	r3, #16
 8007ee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ee6:	e174      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007ee8:	2320      	movs	r3, #32
 8007eea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007eee:	e170      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007ef0:	2340      	movs	r3, #64	; 0x40
 8007ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007ef6:	e16c      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007ef8:	2380      	movs	r3, #128	; 0x80
 8007efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007efe:	e168      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	4a1b      	ldr	r2, [pc, #108]	; (8007f74 <UART_SetConfig+0x348>)
 8007f06:	4293      	cmp	r3, r2
 8007f08:	d142      	bne.n	8007f90 <UART_SetConfig+0x364>
 8007f0a:	4b16      	ldr	r3, [pc, #88]	; (8007f64 <UART_SetConfig+0x338>)
 8007f0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f0e:	f003 0307 	and.w	r3, r3, #7
 8007f12:	2b05      	cmp	r3, #5
 8007f14:	d838      	bhi.n	8007f88 <UART_SetConfig+0x35c>
 8007f16:	a201      	add	r2, pc, #4	; (adr r2, 8007f1c <UART_SetConfig+0x2f0>)
 8007f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f1c:	08007f35 	.word	0x08007f35
 8007f20:	08007f3d 	.word	0x08007f3d
 8007f24:	08007f45 	.word	0x08007f45
 8007f28:	08007f4d 	.word	0x08007f4d
 8007f2c:	08007f79 	.word	0x08007f79
 8007f30:	08007f81 	.word	0x08007f81
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f3a:	e14a      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f3c:	2304      	movs	r3, #4
 8007f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f42:	e146      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f44:	2308      	movs	r3, #8
 8007f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f4a:	e142      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f4c:	2310      	movs	r3, #16
 8007f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f52:	e13e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f54:	cfff69f3 	.word	0xcfff69f3
 8007f58:	58000c00 	.word	0x58000c00
 8007f5c:	11fff4ff 	.word	0x11fff4ff
 8007f60:	40011000 	.word	0x40011000
 8007f64:	58024400 	.word	0x58024400
 8007f68:	40004400 	.word	0x40004400
 8007f6c:	40004800 	.word	0x40004800
 8007f70:	40004c00 	.word	0x40004c00
 8007f74:	40005000 	.word	0x40005000
 8007f78:	2320      	movs	r3, #32
 8007f7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f7e:	e128      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f80:	2340      	movs	r3, #64	; 0x40
 8007f82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f86:	e124      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f88:	2380      	movs	r3, #128	; 0x80
 8007f8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007f8e:	e120      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8007f90:	697b      	ldr	r3, [r7, #20]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4acb      	ldr	r2, [pc, #812]	; (80082c4 <UART_SetConfig+0x698>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d176      	bne.n	8008088 <UART_SetConfig+0x45c>
 8007f9a:	4bcb      	ldr	r3, [pc, #812]	; (80082c8 <UART_SetConfig+0x69c>)
 8007f9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f9e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007fa2:	2b28      	cmp	r3, #40	; 0x28
 8007fa4:	d86c      	bhi.n	8008080 <UART_SetConfig+0x454>
 8007fa6:	a201      	add	r2, pc, #4	; (adr r2, 8007fac <UART_SetConfig+0x380>)
 8007fa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fac:	08008051 	.word	0x08008051
 8007fb0:	08008081 	.word	0x08008081
 8007fb4:	08008081 	.word	0x08008081
 8007fb8:	08008081 	.word	0x08008081
 8007fbc:	08008081 	.word	0x08008081
 8007fc0:	08008081 	.word	0x08008081
 8007fc4:	08008081 	.word	0x08008081
 8007fc8:	08008081 	.word	0x08008081
 8007fcc:	08008059 	.word	0x08008059
 8007fd0:	08008081 	.word	0x08008081
 8007fd4:	08008081 	.word	0x08008081
 8007fd8:	08008081 	.word	0x08008081
 8007fdc:	08008081 	.word	0x08008081
 8007fe0:	08008081 	.word	0x08008081
 8007fe4:	08008081 	.word	0x08008081
 8007fe8:	08008081 	.word	0x08008081
 8007fec:	08008061 	.word	0x08008061
 8007ff0:	08008081 	.word	0x08008081
 8007ff4:	08008081 	.word	0x08008081
 8007ff8:	08008081 	.word	0x08008081
 8007ffc:	08008081 	.word	0x08008081
 8008000:	08008081 	.word	0x08008081
 8008004:	08008081 	.word	0x08008081
 8008008:	08008081 	.word	0x08008081
 800800c:	08008069 	.word	0x08008069
 8008010:	08008081 	.word	0x08008081
 8008014:	08008081 	.word	0x08008081
 8008018:	08008081 	.word	0x08008081
 800801c:	08008081 	.word	0x08008081
 8008020:	08008081 	.word	0x08008081
 8008024:	08008081 	.word	0x08008081
 8008028:	08008081 	.word	0x08008081
 800802c:	08008071 	.word	0x08008071
 8008030:	08008081 	.word	0x08008081
 8008034:	08008081 	.word	0x08008081
 8008038:	08008081 	.word	0x08008081
 800803c:	08008081 	.word	0x08008081
 8008040:	08008081 	.word	0x08008081
 8008044:	08008081 	.word	0x08008081
 8008048:	08008081 	.word	0x08008081
 800804c:	08008079 	.word	0x08008079
 8008050:	2301      	movs	r3, #1
 8008052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008056:	e0bc      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008058:	2304      	movs	r3, #4
 800805a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800805e:	e0b8      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008060:	2308      	movs	r3, #8
 8008062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008066:	e0b4      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008068:	2310      	movs	r3, #16
 800806a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800806e:	e0b0      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008070:	2320      	movs	r3, #32
 8008072:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008076:	e0ac      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008078:	2340      	movs	r3, #64	; 0x40
 800807a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800807e:	e0a8      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008080:	2380      	movs	r3, #128	; 0x80
 8008082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008086:	e0a4      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008088:	697b      	ldr	r3, [r7, #20]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	4a8f      	ldr	r2, [pc, #572]	; (80082cc <UART_SetConfig+0x6a0>)
 800808e:	4293      	cmp	r3, r2
 8008090:	d130      	bne.n	80080f4 <UART_SetConfig+0x4c8>
 8008092:	4b8d      	ldr	r3, [pc, #564]	; (80082c8 <UART_SetConfig+0x69c>)
 8008094:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008096:	f003 0307 	and.w	r3, r3, #7
 800809a:	2b05      	cmp	r3, #5
 800809c:	d826      	bhi.n	80080ec <UART_SetConfig+0x4c0>
 800809e:	a201      	add	r2, pc, #4	; (adr r2, 80080a4 <UART_SetConfig+0x478>)
 80080a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a4:	080080bd 	.word	0x080080bd
 80080a8:	080080c5 	.word	0x080080c5
 80080ac:	080080cd 	.word	0x080080cd
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	080080dd 	.word	0x080080dd
 80080b8:	080080e5 	.word	0x080080e5
 80080bc:	2300      	movs	r3, #0
 80080be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080c2:	e086      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080c4:	2304      	movs	r3, #4
 80080c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ca:	e082      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080cc:	2308      	movs	r3, #8
 80080ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080d2:	e07e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080d4:	2310      	movs	r3, #16
 80080d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080da:	e07a      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080dc:	2320      	movs	r3, #32
 80080de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080e2:	e076      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080e4:	2340      	movs	r3, #64	; 0x40
 80080e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080ea:	e072      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080ec:	2380      	movs	r3, #128	; 0x80
 80080ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80080f2:	e06e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80080f4:	697b      	ldr	r3, [r7, #20]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a75      	ldr	r2, [pc, #468]	; (80082d0 <UART_SetConfig+0x6a4>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d130      	bne.n	8008160 <UART_SetConfig+0x534>
 80080fe:	4b72      	ldr	r3, [pc, #456]	; (80082c8 <UART_SetConfig+0x69c>)
 8008100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008102:	f003 0307 	and.w	r3, r3, #7
 8008106:	2b05      	cmp	r3, #5
 8008108:	d826      	bhi.n	8008158 <UART_SetConfig+0x52c>
 800810a:	a201      	add	r2, pc, #4	; (adr r2, 8008110 <UART_SetConfig+0x4e4>)
 800810c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008110:	08008129 	.word	0x08008129
 8008114:	08008131 	.word	0x08008131
 8008118:	08008139 	.word	0x08008139
 800811c:	08008141 	.word	0x08008141
 8008120:	08008149 	.word	0x08008149
 8008124:	08008151 	.word	0x08008151
 8008128:	2300      	movs	r3, #0
 800812a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800812e:	e050      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008130:	2304      	movs	r3, #4
 8008132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008136:	e04c      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008138:	2308      	movs	r3, #8
 800813a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800813e:	e048      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008140:	2310      	movs	r3, #16
 8008142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008146:	e044      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008148:	2320      	movs	r3, #32
 800814a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800814e:	e040      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008150:	2340      	movs	r3, #64	; 0x40
 8008152:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8008156:	e03c      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008158:	2380      	movs	r3, #128	; 0x80
 800815a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800815e:	e038      	b.n	80081d2 <UART_SetConfig+0x5a6>
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	4a5b      	ldr	r2, [pc, #364]	; (80082d4 <UART_SetConfig+0x6a8>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d130      	bne.n	80081cc <UART_SetConfig+0x5a0>
 800816a:	4b57      	ldr	r3, [pc, #348]	; (80082c8 <UART_SetConfig+0x69c>)
 800816c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	2b05      	cmp	r3, #5
 8008174:	d826      	bhi.n	80081c4 <UART_SetConfig+0x598>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <UART_SetConfig+0x550>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	08008195 	.word	0x08008195
 8008180:	0800819d 	.word	0x0800819d
 8008184:	080081a5 	.word	0x080081a5
 8008188:	080081ad 	.word	0x080081ad
 800818c:	080081b5 	.word	0x080081b5
 8008190:	080081bd 	.word	0x080081bd
 8008194:	2302      	movs	r3, #2
 8008196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800819a:	e01a      	b.n	80081d2 <UART_SetConfig+0x5a6>
 800819c:	2304      	movs	r3, #4
 800819e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081a2:	e016      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80081a4:	2308      	movs	r3, #8
 80081a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081aa:	e012      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80081ac:	2310      	movs	r3, #16
 80081ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081b2:	e00e      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80081b4:	2320      	movs	r3, #32
 80081b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ba:	e00a      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80081bc:	2340      	movs	r3, #64	; 0x40
 80081be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081c2:	e006      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80081c4:	2380      	movs	r3, #128	; 0x80
 80081c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80081ca:	e002      	b.n	80081d2 <UART_SetConfig+0x5a6>
 80081cc:	2380      	movs	r3, #128	; 0x80
 80081ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4a3f      	ldr	r2, [pc, #252]	; (80082d4 <UART_SetConfig+0x6a8>)
 80081d8:	4293      	cmp	r3, r2
 80081da:	f040 80f8 	bne.w	80083ce <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081de:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80081e2:	2b20      	cmp	r3, #32
 80081e4:	dc46      	bgt.n	8008274 <UART_SetConfig+0x648>
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	f2c0 8082 	blt.w	80082f0 <UART_SetConfig+0x6c4>
 80081ec:	3b02      	subs	r3, #2
 80081ee:	2b1e      	cmp	r3, #30
 80081f0:	d87e      	bhi.n	80082f0 <UART_SetConfig+0x6c4>
 80081f2:	a201      	add	r2, pc, #4	; (adr r2, 80081f8 <UART_SetConfig+0x5cc>)
 80081f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f8:	0800827b 	.word	0x0800827b
 80081fc:	080082f1 	.word	0x080082f1
 8008200:	08008283 	.word	0x08008283
 8008204:	080082f1 	.word	0x080082f1
 8008208:	080082f1 	.word	0x080082f1
 800820c:	080082f1 	.word	0x080082f1
 8008210:	08008293 	.word	0x08008293
 8008214:	080082f1 	.word	0x080082f1
 8008218:	080082f1 	.word	0x080082f1
 800821c:	080082f1 	.word	0x080082f1
 8008220:	080082f1 	.word	0x080082f1
 8008224:	080082f1 	.word	0x080082f1
 8008228:	080082f1 	.word	0x080082f1
 800822c:	080082f1 	.word	0x080082f1
 8008230:	080082a3 	.word	0x080082a3
 8008234:	080082f1 	.word	0x080082f1
 8008238:	080082f1 	.word	0x080082f1
 800823c:	080082f1 	.word	0x080082f1
 8008240:	080082f1 	.word	0x080082f1
 8008244:	080082f1 	.word	0x080082f1
 8008248:	080082f1 	.word	0x080082f1
 800824c:	080082f1 	.word	0x080082f1
 8008250:	080082f1 	.word	0x080082f1
 8008254:	080082f1 	.word	0x080082f1
 8008258:	080082f1 	.word	0x080082f1
 800825c:	080082f1 	.word	0x080082f1
 8008260:	080082f1 	.word	0x080082f1
 8008264:	080082f1 	.word	0x080082f1
 8008268:	080082f1 	.word	0x080082f1
 800826c:	080082f1 	.word	0x080082f1
 8008270:	080082e3 	.word	0x080082e3
 8008274:	2b40      	cmp	r3, #64	; 0x40
 8008276:	d037      	beq.n	80082e8 <UART_SetConfig+0x6bc>
 8008278:	e03a      	b.n	80082f0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800827a:	f7fe fb85 	bl	8006988 <HAL_RCCEx_GetD3PCLK1Freq>
 800827e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008280:	e03c      	b.n	80082fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008282:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008286:	4618      	mov	r0, r3
 8008288:	f7fe fb94 	bl	80069b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800828c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008290:	e034      	b.n	80082fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008292:	f107 0318 	add.w	r3, r7, #24
 8008296:	4618      	mov	r0, r3
 8008298:	f7fe fce0 	bl	8006c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082a0:	e02c      	b.n	80082fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80082a2:	4b09      	ldr	r3, [pc, #36]	; (80082c8 <UART_SetConfig+0x69c>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f003 0320 	and.w	r3, r3, #32
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d016      	beq.n	80082dc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80082ae:	4b06      	ldr	r3, [pc, #24]	; (80082c8 <UART_SetConfig+0x69c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	08db      	lsrs	r3, r3, #3
 80082b4:	f003 0303 	and.w	r3, r3, #3
 80082b8:	4a07      	ldr	r2, [pc, #28]	; (80082d8 <UART_SetConfig+0x6ac>)
 80082ba:	fa22 f303 	lsr.w	r3, r2, r3
 80082be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80082c0:	e01c      	b.n	80082fc <UART_SetConfig+0x6d0>
 80082c2:	bf00      	nop
 80082c4:	40011400 	.word	0x40011400
 80082c8:	58024400 	.word	0x58024400
 80082cc:	40007800 	.word	0x40007800
 80082d0:	40007c00 	.word	0x40007c00
 80082d4:	58000c00 	.word	0x58000c00
 80082d8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80082dc:	4b9d      	ldr	r3, [pc, #628]	; (8008554 <UART_SetConfig+0x928>)
 80082de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e0:	e00c      	b.n	80082fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80082e2:	4b9d      	ldr	r3, [pc, #628]	; (8008558 <UART_SetConfig+0x92c>)
 80082e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082e6:	e009      	b.n	80082fc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80082ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80082ee:	e005      	b.n	80082fc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80082f0:	2300      	movs	r3, #0
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80082f4:	2301      	movs	r3, #1
 80082f6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80082fa:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80082fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80082fe:	2b00      	cmp	r3, #0
 8008300:	f000 81de 	beq.w	80086c0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008304:	697b      	ldr	r3, [r7, #20]
 8008306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008308:	4a94      	ldr	r2, [pc, #592]	; (800855c <UART_SetConfig+0x930>)
 800830a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800830e:	461a      	mov	r2, r3
 8008310:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008312:	fbb3 f3f2 	udiv	r3, r3, r2
 8008316:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	4613      	mov	r3, r2
 800831e:	005b      	lsls	r3, r3, #1
 8008320:	4413      	add	r3, r2
 8008322:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008324:	429a      	cmp	r2, r3
 8008326:	d305      	bcc.n	8008334 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008328:	697b      	ldr	r3, [r7, #20]
 800832a:	685b      	ldr	r3, [r3, #4]
 800832c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800832e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008330:	429a      	cmp	r2, r3
 8008332:	d903      	bls.n	800833c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8008334:	2301      	movs	r3, #1
 8008336:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800833a:	e1c1      	b.n	80086c0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800833c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800833e:	2200      	movs	r2, #0
 8008340:	60bb      	str	r3, [r7, #8]
 8008342:	60fa      	str	r2, [r7, #12]
 8008344:	697b      	ldr	r3, [r7, #20]
 8008346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008348:	4a84      	ldr	r2, [pc, #528]	; (800855c <UART_SetConfig+0x930>)
 800834a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800834e:	b29b      	uxth	r3, r3
 8008350:	2200      	movs	r2, #0
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	607a      	str	r2, [r7, #4]
 8008356:	e9d7 2300 	ldrd	r2, r3, [r7]
 800835a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800835e:	f7f7 ffbb 	bl	80002d8 <__aeabi_uldivmod>
 8008362:	4602      	mov	r2, r0
 8008364:	460b      	mov	r3, r1
 8008366:	4610      	mov	r0, r2
 8008368:	4619      	mov	r1, r3
 800836a:	f04f 0200 	mov.w	r2, #0
 800836e:	f04f 0300 	mov.w	r3, #0
 8008372:	020b      	lsls	r3, r1, #8
 8008374:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8008378:	0202      	lsls	r2, r0, #8
 800837a:	6979      	ldr	r1, [r7, #20]
 800837c:	6849      	ldr	r1, [r1, #4]
 800837e:	0849      	lsrs	r1, r1, #1
 8008380:	2000      	movs	r0, #0
 8008382:	460c      	mov	r4, r1
 8008384:	4605      	mov	r5, r0
 8008386:	eb12 0804 	adds.w	r8, r2, r4
 800838a:	eb43 0905 	adc.w	r9, r3, r5
 800838e:	697b      	ldr	r3, [r7, #20]
 8008390:	685b      	ldr	r3, [r3, #4]
 8008392:	2200      	movs	r2, #0
 8008394:	469a      	mov	sl, r3
 8008396:	4693      	mov	fp, r2
 8008398:	4652      	mov	r2, sl
 800839a:	465b      	mov	r3, fp
 800839c:	4640      	mov	r0, r8
 800839e:	4649      	mov	r1, r9
 80083a0:	f7f7 ff9a 	bl	80002d8 <__aeabi_uldivmod>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4613      	mov	r3, r2
 80083aa:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80083ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80083b2:	d308      	bcc.n	80083c6 <UART_SetConfig+0x79a>
 80083b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083ba:	d204      	bcs.n	80083c6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80083c2:	60da      	str	r2, [r3, #12]
 80083c4:	e17c      	b.n	80086c0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80083c6:	2301      	movs	r3, #1
 80083c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80083cc:	e178      	b.n	80086c0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	69db      	ldr	r3, [r3, #28]
 80083d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083d6:	f040 80c5 	bne.w	8008564 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80083da:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80083de:	2b20      	cmp	r3, #32
 80083e0:	dc48      	bgt.n	8008474 <UART_SetConfig+0x848>
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	db7b      	blt.n	80084de <UART_SetConfig+0x8b2>
 80083e6:	2b20      	cmp	r3, #32
 80083e8:	d879      	bhi.n	80084de <UART_SetConfig+0x8b2>
 80083ea:	a201      	add	r2, pc, #4	; (adr r2, 80083f0 <UART_SetConfig+0x7c4>)
 80083ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f0:	0800847b 	.word	0x0800847b
 80083f4:	08008483 	.word	0x08008483
 80083f8:	080084df 	.word	0x080084df
 80083fc:	080084df 	.word	0x080084df
 8008400:	0800848b 	.word	0x0800848b
 8008404:	080084df 	.word	0x080084df
 8008408:	080084df 	.word	0x080084df
 800840c:	080084df 	.word	0x080084df
 8008410:	0800849b 	.word	0x0800849b
 8008414:	080084df 	.word	0x080084df
 8008418:	080084df 	.word	0x080084df
 800841c:	080084df 	.word	0x080084df
 8008420:	080084df 	.word	0x080084df
 8008424:	080084df 	.word	0x080084df
 8008428:	080084df 	.word	0x080084df
 800842c:	080084df 	.word	0x080084df
 8008430:	080084ab 	.word	0x080084ab
 8008434:	080084df 	.word	0x080084df
 8008438:	080084df 	.word	0x080084df
 800843c:	080084df 	.word	0x080084df
 8008440:	080084df 	.word	0x080084df
 8008444:	080084df 	.word	0x080084df
 8008448:	080084df 	.word	0x080084df
 800844c:	080084df 	.word	0x080084df
 8008450:	080084df 	.word	0x080084df
 8008454:	080084df 	.word	0x080084df
 8008458:	080084df 	.word	0x080084df
 800845c:	080084df 	.word	0x080084df
 8008460:	080084df 	.word	0x080084df
 8008464:	080084df 	.word	0x080084df
 8008468:	080084df 	.word	0x080084df
 800846c:	080084df 	.word	0x080084df
 8008470:	080084d1 	.word	0x080084d1
 8008474:	2b40      	cmp	r3, #64	; 0x40
 8008476:	d02e      	beq.n	80084d6 <UART_SetConfig+0x8aa>
 8008478:	e031      	b.n	80084de <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800847a:	f7fd fb13 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 800847e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008480:	e033      	b.n	80084ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008482:	f7fd fb25 	bl	8005ad0 <HAL_RCC_GetPCLK2Freq>
 8008486:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008488:	e02f      	b.n	80084ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800848a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe fa90 	bl	80069b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008498:	e027      	b.n	80084ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800849a:	f107 0318 	add.w	r3, r7, #24
 800849e:	4618      	mov	r0, r3
 80084a0:	f7fe fbdc 	bl	8006c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084a8:	e01f      	b.n	80084ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084aa:	4b2d      	ldr	r3, [pc, #180]	; (8008560 <UART_SetConfig+0x934>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f003 0320 	and.w	r3, r3, #32
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d009      	beq.n	80084ca <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80084b6:	4b2a      	ldr	r3, [pc, #168]	; (8008560 <UART_SetConfig+0x934>)
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	08db      	lsrs	r3, r3, #3
 80084bc:	f003 0303 	and.w	r3, r3, #3
 80084c0:	4a24      	ldr	r2, [pc, #144]	; (8008554 <UART_SetConfig+0x928>)
 80084c2:	fa22 f303 	lsr.w	r3, r2, r3
 80084c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80084c8:	e00f      	b.n	80084ea <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80084ca:	4b22      	ldr	r3, [pc, #136]	; (8008554 <UART_SetConfig+0x928>)
 80084cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084ce:	e00c      	b.n	80084ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80084d0:	4b21      	ldr	r3, [pc, #132]	; (8008558 <UART_SetConfig+0x92c>)
 80084d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084d4:	e009      	b.n	80084ea <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80084dc:	e005      	b.n	80084ea <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80084de:	2300      	movs	r3, #0
 80084e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80084e2:	2301      	movs	r3, #1
 80084e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80084e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	f000 80e7 	beq.w	80086c0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084f2:	697b      	ldr	r3, [r7, #20]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	4a19      	ldr	r2, [pc, #100]	; (800855c <UART_SetConfig+0x930>)
 80084f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084fc:	461a      	mov	r2, r3
 80084fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008500:	fbb3 f3f2 	udiv	r3, r3, r2
 8008504:	005a      	lsls	r2, r3, #1
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	685b      	ldr	r3, [r3, #4]
 800850a:	085b      	lsrs	r3, r3, #1
 800850c:	441a      	add	r2, r3
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	685b      	ldr	r3, [r3, #4]
 8008512:	fbb2 f3f3 	udiv	r3, r2, r3
 8008516:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800851a:	2b0f      	cmp	r3, #15
 800851c:	d916      	bls.n	800854c <UART_SetConfig+0x920>
 800851e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008520:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008524:	d212      	bcs.n	800854c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008528:	b29b      	uxth	r3, r3
 800852a:	f023 030f 	bic.w	r3, r3, #15
 800852e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008532:	085b      	lsrs	r3, r3, #1
 8008534:	b29b      	uxth	r3, r3
 8008536:	f003 0307 	and.w	r3, r3, #7
 800853a:	b29a      	uxth	r2, r3
 800853c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800853e:	4313      	orrs	r3, r2
 8008540:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8008542:	697b      	ldr	r3, [r7, #20]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8008548:	60da      	str	r2, [r3, #12]
 800854a:	e0b9      	b.n	80086c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800854c:	2301      	movs	r3, #1
 800854e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8008552:	e0b5      	b.n	80086c0 <UART_SetConfig+0xa94>
 8008554:	03d09000 	.word	0x03d09000
 8008558:	003d0900 	.word	0x003d0900
 800855c:	08009494 	.word	0x08009494
 8008560:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8008564:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8008568:	2b20      	cmp	r3, #32
 800856a:	dc49      	bgt.n	8008600 <UART_SetConfig+0x9d4>
 800856c:	2b00      	cmp	r3, #0
 800856e:	db7c      	blt.n	800866a <UART_SetConfig+0xa3e>
 8008570:	2b20      	cmp	r3, #32
 8008572:	d87a      	bhi.n	800866a <UART_SetConfig+0xa3e>
 8008574:	a201      	add	r2, pc, #4	; (adr r2, 800857c <UART_SetConfig+0x950>)
 8008576:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800857a:	bf00      	nop
 800857c:	08008607 	.word	0x08008607
 8008580:	0800860f 	.word	0x0800860f
 8008584:	0800866b 	.word	0x0800866b
 8008588:	0800866b 	.word	0x0800866b
 800858c:	08008617 	.word	0x08008617
 8008590:	0800866b 	.word	0x0800866b
 8008594:	0800866b 	.word	0x0800866b
 8008598:	0800866b 	.word	0x0800866b
 800859c:	08008627 	.word	0x08008627
 80085a0:	0800866b 	.word	0x0800866b
 80085a4:	0800866b 	.word	0x0800866b
 80085a8:	0800866b 	.word	0x0800866b
 80085ac:	0800866b 	.word	0x0800866b
 80085b0:	0800866b 	.word	0x0800866b
 80085b4:	0800866b 	.word	0x0800866b
 80085b8:	0800866b 	.word	0x0800866b
 80085bc:	08008637 	.word	0x08008637
 80085c0:	0800866b 	.word	0x0800866b
 80085c4:	0800866b 	.word	0x0800866b
 80085c8:	0800866b 	.word	0x0800866b
 80085cc:	0800866b 	.word	0x0800866b
 80085d0:	0800866b 	.word	0x0800866b
 80085d4:	0800866b 	.word	0x0800866b
 80085d8:	0800866b 	.word	0x0800866b
 80085dc:	0800866b 	.word	0x0800866b
 80085e0:	0800866b 	.word	0x0800866b
 80085e4:	0800866b 	.word	0x0800866b
 80085e8:	0800866b 	.word	0x0800866b
 80085ec:	0800866b 	.word	0x0800866b
 80085f0:	0800866b 	.word	0x0800866b
 80085f4:	0800866b 	.word	0x0800866b
 80085f8:	0800866b 	.word	0x0800866b
 80085fc:	0800865d 	.word	0x0800865d
 8008600:	2b40      	cmp	r3, #64	; 0x40
 8008602:	d02e      	beq.n	8008662 <UART_SetConfig+0xa36>
 8008604:	e031      	b.n	800866a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008606:	f7fd fa4d 	bl	8005aa4 <HAL_RCC_GetPCLK1Freq>
 800860a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800860c:	e033      	b.n	8008676 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800860e:	f7fd fa5f 	bl	8005ad0 <HAL_RCC_GetPCLK2Freq>
 8008612:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8008614:	e02f      	b.n	8008676 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008616:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800861a:	4618      	mov	r0, r3
 800861c:	f7fe f9ca 	bl	80069b4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8008620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008622:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008624:	e027      	b.n	8008676 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8008626:	f107 0318 	add.w	r3, r7, #24
 800862a:	4618      	mov	r0, r3
 800862c:	f7fe fb16 	bl	8006c5c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8008630:	69fb      	ldr	r3, [r7, #28]
 8008632:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008634:	e01f      	b.n	8008676 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008636:	4b2d      	ldr	r3, [pc, #180]	; (80086ec <UART_SetConfig+0xac0>)
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f003 0320 	and.w	r3, r3, #32
 800863e:	2b00      	cmp	r3, #0
 8008640:	d009      	beq.n	8008656 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8008642:	4b2a      	ldr	r3, [pc, #168]	; (80086ec <UART_SetConfig+0xac0>)
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	08db      	lsrs	r3, r3, #3
 8008648:	f003 0303 	and.w	r3, r3, #3
 800864c:	4a28      	ldr	r2, [pc, #160]	; (80086f0 <UART_SetConfig+0xac4>)
 800864e:	fa22 f303 	lsr.w	r3, r2, r3
 8008652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8008654:	e00f      	b.n	8008676 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8008656:	4b26      	ldr	r3, [pc, #152]	; (80086f0 <UART_SetConfig+0xac4>)
 8008658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800865a:	e00c      	b.n	8008676 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800865c:	4b25      	ldr	r3, [pc, #148]	; (80086f4 <UART_SetConfig+0xac8>)
 800865e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008660:	e009      	b.n	8008676 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008662:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008666:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8008668:	e005      	b.n	8008676 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800866a:	2300      	movs	r3, #0
 800866c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800866e:	2301      	movs	r3, #1
 8008670:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8008674:	bf00      	nop
    }

    if (pclk != 0U)
 8008676:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008678:	2b00      	cmp	r3, #0
 800867a:	d021      	beq.n	80086c0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008680:	4a1d      	ldr	r2, [pc, #116]	; (80086f8 <UART_SetConfig+0xacc>)
 8008682:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008686:	461a      	mov	r2, r3
 8008688:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868a:	fbb3 f2f2 	udiv	r2, r3, r2
 800868e:	697b      	ldr	r3, [r7, #20]
 8008690:	685b      	ldr	r3, [r3, #4]
 8008692:	085b      	lsrs	r3, r3, #1
 8008694:	441a      	add	r2, r3
 8008696:	697b      	ldr	r3, [r7, #20]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	fbb2 f3f3 	udiv	r3, r2, r3
 800869e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a2:	2b0f      	cmp	r3, #15
 80086a4:	d909      	bls.n	80086ba <UART_SetConfig+0xa8e>
 80086a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086ac:	d205      	bcs.n	80086ba <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	60da      	str	r2, [r3, #12]
 80086b8:	e002      	b.n	80086c0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80086ba:	2301      	movs	r3, #1
 80086bc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086c0:	697b      	ldr	r3, [r7, #20]
 80086c2:	2201      	movs	r2, #1
 80086c4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086d0:	697b      	ldr	r3, [r7, #20]
 80086d2:	2200      	movs	r2, #0
 80086d4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	2200      	movs	r2, #0
 80086da:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80086dc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3748      	adds	r7, #72	; 0x48
 80086e4:	46bd      	mov	sp, r7
 80086e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80086ea:	bf00      	nop
 80086ec:	58024400 	.word	0x58024400
 80086f0:	03d09000 	.word	0x03d09000
 80086f4:	003d0900 	.word	0x003d0900
 80086f8:	08009494 	.word	0x08009494

080086fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80086fc:	b480      	push	{r7}
 80086fe:	b083      	sub	sp, #12
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008708:	f003 0301 	and.w	r3, r3, #1
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00a      	beq.n	8008726 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	430a      	orrs	r2, r1
 8008724:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800872a:	f003 0302 	and.w	r3, r3, #2
 800872e:	2b00      	cmp	r3, #0
 8008730:	d00a      	beq.n	8008748 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	430a      	orrs	r2, r1
 8008746:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800874c:	f003 0304 	and.w	r3, r3, #4
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00a      	beq.n	800876a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	430a      	orrs	r2, r1
 8008768:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876e:	f003 0308 	and.w	r3, r3, #8
 8008772:	2b00      	cmp	r3, #0
 8008774:	d00a      	beq.n	800878c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	685b      	ldr	r3, [r3, #4]
 800877c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	430a      	orrs	r2, r1
 800878a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008790:	f003 0310 	and.w	r3, r3, #16
 8008794:	2b00      	cmp	r3, #0
 8008796:	d00a      	beq.n	80087ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	689b      	ldr	r3, [r3, #8]
 800879e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	430a      	orrs	r2, r1
 80087ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b2:	f003 0320 	and.w	r3, r3, #32
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d00a      	beq.n	80087d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	430a      	orrs	r2, r1
 80087ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d01a      	beq.n	8008812 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	685b      	ldr	r3, [r3, #4]
 80087e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	430a      	orrs	r2, r1
 80087f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087fa:	d10a      	bne.n	8008812 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	430a      	orrs	r2, r1
 8008810:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800881a:	2b00      	cmp	r3, #0
 800881c:	d00a      	beq.n	8008834 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	685b      	ldr	r3, [r3, #4]
 8008824:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	430a      	orrs	r2, r1
 8008832:	605a      	str	r2, [r3, #4]
  }
}
 8008834:	bf00      	nop
 8008836:	370c      	adds	r7, #12
 8008838:	46bd      	mov	sp, r7
 800883a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800883e:	4770      	bx	lr

08008840 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af02      	add	r7, sp, #8
 8008846:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	2200      	movs	r2, #0
 800884c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008850:	f7f8 fe2c 	bl	80014ac <HAL_GetTick>
 8008854:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0308 	and.w	r3, r3, #8
 8008860:	2b08      	cmp	r3, #8
 8008862:	d10e      	bne.n	8008882 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008864:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008868:	9300      	str	r3, [sp, #0]
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f000 f82f 	bl	80088d6 <UART_WaitOnFlagUntilTimeout>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	d001      	beq.n	8008882 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800887e:	2303      	movs	r3, #3
 8008880:	e025      	b.n	80088ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f003 0304 	and.w	r3, r3, #4
 800888c:	2b04      	cmp	r3, #4
 800888e:	d10e      	bne.n	80088ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008890:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008894:	9300      	str	r3, [sp, #0]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 f819 	bl	80088d6 <UART_WaitOnFlagUntilTimeout>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088aa:	2303      	movs	r3, #3
 80088ac:	e00f      	b.n	80088ce <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2220      	movs	r2, #32
 80088ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2200      	movs	r2, #0
 80088c2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	2200      	movs	r2, #0
 80088c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80088cc:	2300      	movs	r3, #0
}
 80088ce:	4618      	mov	r0, r3
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}

080088d6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80088d6:	b580      	push	{r7, lr}
 80088d8:	b09c      	sub	sp, #112	; 0x70
 80088da:	af00      	add	r7, sp, #0
 80088dc:	60f8      	str	r0, [r7, #12]
 80088de:	60b9      	str	r1, [r7, #8]
 80088e0:	603b      	str	r3, [r7, #0]
 80088e2:	4613      	mov	r3, r2
 80088e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088e6:	e0a9      	b.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80088ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088ee:	f000 80a5 	beq.w	8008a3c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088f2:	f7f8 fddb 	bl	80014ac <HAL_GetTick>
 80088f6:	4602      	mov	r2, r0
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	1ad3      	subs	r3, r2, r3
 80088fc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80088fe:	429a      	cmp	r2, r3
 8008900:	d302      	bcc.n	8008908 <UART_WaitOnFlagUntilTimeout+0x32>
 8008902:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008904:	2b00      	cmp	r3, #0
 8008906:	d140      	bne.n	800898a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800890e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008910:	e853 3f00 	ldrex	r3, [r3]
 8008914:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008918:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800891c:	667b      	str	r3, [r7, #100]	; 0x64
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008926:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008928:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800892a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800892c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800892e:	e841 2300 	strex	r3, r2, [r1]
 8008932:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008934:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008936:	2b00      	cmp	r3, #0
 8008938:	d1e6      	bne.n	8008908 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	3308      	adds	r3, #8
 8008940:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008944:	e853 3f00 	ldrex	r3, [r3]
 8008948:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800894a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800894c:	f023 0301 	bic.w	r3, r3, #1
 8008950:	663b      	str	r3, [r7, #96]	; 0x60
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	3308      	adds	r3, #8
 8008958:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800895a:	64ba      	str	r2, [r7, #72]	; 0x48
 800895c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800895e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008960:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008962:	e841 2300 	strex	r3, r2, [r1]
 8008966:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008968:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896a:	2b00      	cmp	r3, #0
 800896c:	d1e5      	bne.n	800893a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2220      	movs	r2, #32
 8008972:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2220      	movs	r2, #32
 800897a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	2200      	movs	r2, #0
 8008982:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008986:	2303      	movs	r3, #3
 8008988:	e069      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f003 0304 	and.w	r3, r3, #4
 8008994:	2b00      	cmp	r3, #0
 8008996:	d051      	beq.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	681b      	ldr	r3, [r3, #0]
 800899c:	69db      	ldr	r3, [r3, #28]
 800899e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089a6:	d149      	bne.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80089b0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089ba:	e853 3f00 	ldrex	r3, [r3]
 80089be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80089c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089c2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80089c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	461a      	mov	r2, r3
 80089ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089d0:	637b      	str	r3, [r7, #52]	; 0x34
 80089d2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089d4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80089d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80089d8:	e841 2300 	strex	r3, r2, [r1]
 80089dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80089de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d1e6      	bne.n	80089b2 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	3308      	adds	r3, #8
 80089ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	e853 3f00 	ldrex	r3, [r3]
 80089f2:	613b      	str	r3, [r7, #16]
   return(result);
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	f023 0301 	bic.w	r3, r3, #1
 80089fa:	66bb      	str	r3, [r7, #104]	; 0x68
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	3308      	adds	r3, #8
 8008a02:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a04:	623a      	str	r2, [r7, #32]
 8008a06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a08:	69f9      	ldr	r1, [r7, #28]
 8008a0a:	6a3a      	ldr	r2, [r7, #32]
 8008a0c:	e841 2300 	strex	r3, r2, [r1]
 8008a10:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a12:	69bb      	ldr	r3, [r7, #24]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d1e5      	bne.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	2220      	movs	r2, #32
 8008a24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	2220      	movs	r2, #32
 8008a2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008a38:	2303      	movs	r3, #3
 8008a3a:	e010      	b.n	8008a5e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	69da      	ldr	r2, [r3, #28]
 8008a42:	68bb      	ldr	r3, [r7, #8]
 8008a44:	4013      	ands	r3, r2
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	429a      	cmp	r2, r3
 8008a4a:	bf0c      	ite	eq
 8008a4c:	2301      	moveq	r3, #1
 8008a4e:	2300      	movne	r3, #0
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	461a      	mov	r2, r3
 8008a54:	79fb      	ldrb	r3, [r7, #7]
 8008a56:	429a      	cmp	r2, r3
 8008a58:	f43f af46 	beq.w	80088e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a5c:	2300      	movs	r3, #0
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3770      	adds	r7, #112	; 0x70
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
	...

08008a68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b095      	sub	sp, #84	; 0x54
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a78:	e853 3f00 	ldrex	r3, [r3]
 8008a7c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a80:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008a84:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008a8e:	643b      	str	r3, [r7, #64]	; 0x40
 8008a90:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008a96:	e841 2300 	strex	r3, r2, [r1]
 8008a9a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008a9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e6      	bne.n	8008a70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	3308      	adds	r3, #8
 8008aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008aaa:	6a3b      	ldr	r3, [r7, #32]
 8008aac:	e853 3f00 	ldrex	r3, [r3]
 8008ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8008ab2:	69fa      	ldr	r2, [r7, #28]
 8008ab4:	4b1e      	ldr	r3, [pc, #120]	; (8008b30 <UART_EndRxTransfer+0xc8>)
 8008ab6:	4013      	ands	r3, r2
 8008ab8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	3308      	adds	r3, #8
 8008ac0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ac2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ac4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ac6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aca:	e841 2300 	strex	r3, r2, [r1]
 8008ace:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d1e5      	bne.n	8008aa2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008ada:	2b01      	cmp	r3, #1
 8008adc:	d118      	bne.n	8008b10 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	e853 3f00 	ldrex	r3, [r3]
 8008aea:	60bb      	str	r3, [r7, #8]
   return(result);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f023 0310 	bic.w	r3, r3, #16
 8008af2:	647b      	str	r3, [r7, #68]	; 0x44
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	461a      	mov	r2, r3
 8008afa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008afc:	61bb      	str	r3, [r7, #24]
 8008afe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b00:	6979      	ldr	r1, [r7, #20]
 8008b02:	69ba      	ldr	r2, [r7, #24]
 8008b04:	e841 2300 	strex	r3, r2, [r1]
 8008b08:	613b      	str	r3, [r7, #16]
   return(result);
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1e6      	bne.n	8008ade <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2220      	movs	r2, #32
 8008b14:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	2200      	movs	r2, #0
 8008b22:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008b24:	bf00      	nop
 8008b26:	3754      	adds	r7, #84	; 0x54
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr
 8008b30:	effffffe 	.word	0xeffffffe

08008b34 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008b34:	b580      	push	{r7, lr}
 8008b36:	b084      	sub	sp, #16
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b40:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2200      	movs	r2, #0
 8008b46:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b52:	68f8      	ldr	r0, [r7, #12]
 8008b54:	f7ff f854 	bl	8007c00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b58:	bf00      	nop
 8008b5a:	3710      	adds	r7, #16
 8008b5c:	46bd      	mov	sp, r7
 8008b5e:	bd80      	pop	{r7, pc}

08008b60 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b088      	sub	sp, #32
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	e853 3f00 	ldrex	r3, [r3]
 8008b74:	60bb      	str	r3, [r7, #8]
   return(result);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b7c:	61fb      	str	r3, [r7, #28]
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	461a      	mov	r2, r3
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	61bb      	str	r3, [r7, #24]
 8008b88:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b8a:	6979      	ldr	r1, [r7, #20]
 8008b8c:	69ba      	ldr	r2, [r7, #24]
 8008b8e:	e841 2300 	strex	r3, r2, [r1]
 8008b92:	613b      	str	r3, [r7, #16]
   return(result);
 8008b94:	693b      	ldr	r3, [r7, #16]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d1e6      	bne.n	8008b68 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	2220      	movs	r2, #32
 8008b9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7ff f81f 	bl	8007bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bae:	bf00      	nop
 8008bb0:	3720      	adds	r7, #32
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	bd80      	pop	{r7, pc}

08008bb6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008bb6:	b480      	push	{r7}
 8008bb8:	b083      	sub	sp, #12
 8008bba:	af00      	add	r7, sp, #0
 8008bbc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008bbe:	bf00      	nop
 8008bc0:	370c      	adds	r7, #12
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc8:	4770      	bx	lr

08008bca <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008bca:	b480      	push	{r7}
 8008bcc:	b083      	sub	sp, #12
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008bd2:	bf00      	nop
 8008bd4:	370c      	adds	r7, #12
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8008be6:	bf00      	nop
 8008be8:	370c      	adds	r7, #12
 8008bea:	46bd      	mov	sp, r7
 8008bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf0:	4770      	bx	lr

08008bf2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008bf2:	b480      	push	{r7}
 8008bf4:	b085      	sub	sp, #20
 8008bf6:	af00      	add	r7, sp, #0
 8008bf8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c00:	2b01      	cmp	r3, #1
 8008c02:	d101      	bne.n	8008c08 <HAL_UARTEx_DisableFifoMode+0x16>
 8008c04:	2302      	movs	r3, #2
 8008c06:	e027      	b.n	8008c58 <HAL_UARTEx_DisableFifoMode+0x66>
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	2201      	movs	r2, #1
 8008c0c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2224      	movs	r2, #36	; 0x24
 8008c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	681a      	ldr	r2, [r3, #0]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f022 0201 	bic.w	r2, r2, #1
 8008c2e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008c36:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	68fa      	ldr	r2, [r7, #12]
 8008c44:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2220      	movs	r2, #32
 8008c4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	2200      	movs	r2, #0
 8008c52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008c56:	2300      	movs	r3, #0
}
 8008c58:	4618      	mov	r0, r3
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr

08008c64 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b084      	sub	sp, #16
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008c74:	2b01      	cmp	r3, #1
 8008c76:	d101      	bne.n	8008c7c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008c78:	2302      	movs	r3, #2
 8008c7a:	e02d      	b.n	8008cd8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2201      	movs	r2, #1
 8008c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	2224      	movs	r2, #36	; 0x24
 8008c88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	681a      	ldr	r2, [r3, #0]
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	f022 0201 	bic.w	r2, r2, #1
 8008ca2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	689b      	ldr	r3, [r3, #8]
 8008caa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	430a      	orrs	r2, r1
 8008cb6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f84f 	bl	8008d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008cd6:	2300      	movs	r3, #0
}
 8008cd8:	4618      	mov	r0, r3
 8008cda:	3710      	adds	r7, #16
 8008cdc:	46bd      	mov	sp, r7
 8008cde:	bd80      	pop	{r7, pc}

08008ce0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d101      	bne.n	8008cf8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8008cf4:	2302      	movs	r3, #2
 8008cf6:	e02d      	b.n	8008d54 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2224      	movs	r2, #36	; 0x24
 8008d04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	681a      	ldr	r2, [r3, #0]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	f022 0201 	bic.w	r2, r2, #1
 8008d1e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	689b      	ldr	r3, [r3, #8]
 8008d26:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	430a      	orrs	r2, r1
 8008d32:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008d34:	6878      	ldr	r0, [r7, #4]
 8008d36:	f000 f811 	bl	8008d5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2220      	movs	r2, #32
 8008d46:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d52:	2300      	movs	r3, #0
}
 8008d54:	4618      	mov	r0, r3
 8008d56:	3710      	adds	r7, #16
 8008d58:	46bd      	mov	sp, r7
 8008d5a:	bd80      	pop	{r7, pc}

08008d5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b085      	sub	sp, #20
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d108      	bne.n	8008d7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	2201      	movs	r2, #1
 8008d70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008d7c:	e031      	b.n	8008de2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008d7e:	2310      	movs	r3, #16
 8008d80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008d82:	2310      	movs	r3, #16
 8008d84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	0e5b      	lsrs	r3, r3, #25
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	f003 0307 	and.w	r3, r3, #7
 8008d94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	0f5b      	lsrs	r3, r3, #29
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	f003 0307 	and.w	r3, r3, #7
 8008da4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008da6:	7bbb      	ldrb	r3, [r7, #14]
 8008da8:	7b3a      	ldrb	r2, [r7, #12]
 8008daa:	4911      	ldr	r1, [pc, #68]	; (8008df0 <UARTEx_SetNbDataToProcess+0x94>)
 8008dac:	5c8a      	ldrb	r2, [r1, r2]
 8008dae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008db2:	7b3a      	ldrb	r2, [r7, #12]
 8008db4:	490f      	ldr	r1, [pc, #60]	; (8008df4 <UARTEx_SetNbDataToProcess+0x98>)
 8008db6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008db8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dbc:	b29a      	uxth	r2, r3
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dc4:	7bfb      	ldrb	r3, [r7, #15]
 8008dc6:	7b7a      	ldrb	r2, [r7, #13]
 8008dc8:	4909      	ldr	r1, [pc, #36]	; (8008df0 <UARTEx_SetNbDataToProcess+0x94>)
 8008dca:	5c8a      	ldrb	r2, [r1, r2]
 8008dcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008dd0:	7b7a      	ldrb	r2, [r7, #13]
 8008dd2:	4908      	ldr	r1, [pc, #32]	; (8008df4 <UARTEx_SetNbDataToProcess+0x98>)
 8008dd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008dd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008dda:	b29a      	uxth	r2, r3
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8008de2:	bf00      	nop
 8008de4:	3714      	adds	r7, #20
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	080094ac 	.word	0x080094ac
 8008df4:	080094b4 	.word	0x080094b4

08008df8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008df8:	b084      	sub	sp, #16
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
 8008e02:	f107 001c 	add.w	r0, r7, #28
 8008e06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d120      	bne.n	8008e52 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	68da      	ldr	r2, [r3, #12]
 8008e20:	4b2a      	ldr	r3, [pc, #168]	; (8008ecc <USB_CoreInit+0xd4>)
 8008e22:	4013      	ands	r3, r2
 8008e24:	687a      	ldr	r2, [r7, #4]
 8008e26:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	68db      	ldr	r3, [r3, #12]
 8008e2c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e34:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e36:	2b01      	cmp	r3, #1
 8008e38:	d105      	bne.n	8008e46 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	68db      	ldr	r3, [r3, #12]
 8008e3e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f000 faac 	bl	80093a4 <USB_CoreReset>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	73fb      	strb	r3, [r7, #15]
 8008e50:	e01a      	b.n	8008e88 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	68db      	ldr	r3, [r3, #12]
 8008e56:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 faa0 	bl	80093a4 <USB_CoreReset>
 8008e64:	4603      	mov	r3, r0
 8008e66:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e72:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	639a      	str	r2, [r3, #56]	; 0x38
 8008e7a:	e005      	b.n	8008e88 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e80:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d116      	bne.n	8008ebc <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e92:	b29a      	uxth	r2, r3
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008e9c:	4b0c      	ldr	r3, [pc, #48]	; (8008ed0 <USB_CoreInit+0xd8>)
 8008e9e:	4313      	orrs	r3, r2
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	689b      	ldr	r3, [r3, #8]
 8008ea8:	f043 0206 	orr.w	r2, r3, #6
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f043 0220 	orr.w	r2, r3, #32
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	3710      	adds	r7, #16
 8008ec2:	46bd      	mov	sp, r7
 8008ec4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ec8:	b004      	add	sp, #16
 8008eca:	4770      	bx	lr
 8008ecc:	ffbdffbf 	.word	0xffbdffbf
 8008ed0:	03ee0000 	.word	0x03ee0000

08008ed4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	f023 0201 	bic.w	r2, r3, #1
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	370c      	adds	r7, #12
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr

08008ef6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008ef6:	b580      	push	{r7, lr}
 8008ef8:	b084      	sub	sp, #16
 8008efa:	af00      	add	r7, sp, #0
 8008efc:	6078      	str	r0, [r7, #4]
 8008efe:	460b      	mov	r3, r1
 8008f00:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008f02:	2300      	movs	r3, #0
 8008f04:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008f12:	78fb      	ldrb	r3, [r7, #3]
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d115      	bne.n	8008f44 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	68db      	ldr	r3, [r3, #12]
 8008f1c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f24:	2001      	movs	r0, #1
 8008f26:	f7f8 facd 	bl	80014c4 <HAL_Delay>
      ms++;
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	3301      	adds	r3, #1
 8008f2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008f30:	6878      	ldr	r0, [r7, #4]
 8008f32:	f000 fa29 	bl	8009388 <USB_GetMode>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b01      	cmp	r3, #1
 8008f3a:	d01e      	beq.n	8008f7a <USB_SetCurrentMode+0x84>
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	2b31      	cmp	r3, #49	; 0x31
 8008f40:	d9f0      	bls.n	8008f24 <USB_SetCurrentMode+0x2e>
 8008f42:	e01a      	b.n	8008f7a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008f44:	78fb      	ldrb	r3, [r7, #3]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d115      	bne.n	8008f76 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	68db      	ldr	r3, [r3, #12]
 8008f4e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008f56:	2001      	movs	r0, #1
 8008f58:	f7f8 fab4 	bl	80014c4 <HAL_Delay>
      ms++;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008f62:	6878      	ldr	r0, [r7, #4]
 8008f64:	f000 fa10 	bl	8009388 <USB_GetMode>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d005      	beq.n	8008f7a <USB_SetCurrentMode+0x84>
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	2b31      	cmp	r3, #49	; 0x31
 8008f72:	d9f0      	bls.n	8008f56 <USB_SetCurrentMode+0x60>
 8008f74:	e001      	b.n	8008f7a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008f76:	2301      	movs	r3, #1
 8008f78:	e005      	b.n	8008f86 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008f7a:	68fb      	ldr	r3, [r7, #12]
 8008f7c:	2b32      	cmp	r3, #50	; 0x32
 8008f7e:	d101      	bne.n	8008f84 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	3710      	adds	r7, #16
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	bd80      	pop	{r7, pc}
	...

08008f90 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008f90:	b084      	sub	sp, #16
 8008f92:	b580      	push	{r7, lr}
 8008f94:	b086      	sub	sp, #24
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
 8008f9a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008f9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008fa2:	2300      	movs	r3, #0
 8008fa4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008faa:	2300      	movs	r3, #0
 8008fac:	613b      	str	r3, [r7, #16]
 8008fae:	e009      	b.n	8008fc4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	3340      	adds	r3, #64	; 0x40
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	4413      	add	r3, r2
 8008fba:	2200      	movs	r2, #0
 8008fbc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	3301      	adds	r3, #1
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	2b0e      	cmp	r3, #14
 8008fc8:	d9f2      	bls.n	8008fb0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d11c      	bne.n	800900a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008fde:	f043 0302 	orr.w	r3, r3, #2
 8008fe2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fe8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	601a      	str	r2, [r3, #0]
 8009008:	e005      	b.n	8009016 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800900e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800901c:	461a      	mov	r2, r3
 800901e:	2300      	movs	r3, #0
 8009020:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009028:	4619      	mov	r1, r3
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009030:	461a      	mov	r2, r3
 8009032:	680b      	ldr	r3, [r1, #0]
 8009034:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009036:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009038:	2b01      	cmp	r3, #1
 800903a:	d10c      	bne.n	8009056 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800903c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800903e:	2b00      	cmp	r3, #0
 8009040:	d104      	bne.n	800904c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009042:	2100      	movs	r1, #0
 8009044:	6878      	ldr	r0, [r7, #4]
 8009046:	f000 f965 	bl	8009314 <USB_SetDevSpeed>
 800904a:	e008      	b.n	800905e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800904c:	2101      	movs	r1, #1
 800904e:	6878      	ldr	r0, [r7, #4]
 8009050:	f000 f960 	bl	8009314 <USB_SetDevSpeed>
 8009054:	e003      	b.n	800905e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009056:	2103      	movs	r1, #3
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 f95b 	bl	8009314 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800905e:	2110      	movs	r1, #16
 8009060:	6878      	ldr	r0, [r7, #4]
 8009062:	f000 f8f3 	bl	800924c <USB_FlushTxFifo>
 8009066:	4603      	mov	r3, r0
 8009068:	2b00      	cmp	r3, #0
 800906a:	d001      	beq.n	8009070 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800906c:	2301      	movs	r3, #1
 800906e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009070:	6878      	ldr	r0, [r7, #4]
 8009072:	f000 f91f 	bl	80092b4 <USB_FlushRxFifo>
 8009076:	4603      	mov	r3, r0
 8009078:	2b00      	cmp	r3, #0
 800907a:	d001      	beq.n	8009080 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800907c:	2301      	movs	r3, #1
 800907e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009086:	461a      	mov	r2, r3
 8009088:	2300      	movs	r3, #0
 800908a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009092:	461a      	mov	r2, r3
 8009094:	2300      	movs	r3, #0
 8009096:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800909e:	461a      	mov	r2, r3
 80090a0:	2300      	movs	r3, #0
 80090a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80090a4:	2300      	movs	r3, #0
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e043      	b.n	8009132 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	015a      	lsls	r2, r3, #5
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4413      	add	r3, r2
 80090b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090c0:	d118      	bne.n	80090f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80090c2:	693b      	ldr	r3, [r7, #16]
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	015a      	lsls	r2, r3, #5
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	4413      	add	r3, r2
 80090d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090d4:	461a      	mov	r2, r3
 80090d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80090da:	6013      	str	r3, [r2, #0]
 80090dc:	e013      	b.n	8009106 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	015a      	lsls	r2, r3, #5
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	4413      	add	r3, r2
 80090e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090ea:	461a      	mov	r2, r3
 80090ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	e008      	b.n	8009106 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	015a      	lsls	r2, r3, #5
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	4413      	add	r3, r2
 80090fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009100:	461a      	mov	r2, r3
 8009102:	2300      	movs	r3, #0
 8009104:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009106:	693b      	ldr	r3, [r7, #16]
 8009108:	015a      	lsls	r2, r3, #5
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4413      	add	r3, r2
 800910e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009112:	461a      	mov	r2, r3
 8009114:	2300      	movs	r3, #0
 8009116:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009124:	461a      	mov	r2, r3
 8009126:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800912a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	3301      	adds	r3, #1
 8009130:	613b      	str	r3, [r7, #16]
 8009132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009134:	693a      	ldr	r2, [r7, #16]
 8009136:	429a      	cmp	r2, r3
 8009138:	d3b7      	bcc.n	80090aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800913a:	2300      	movs	r3, #0
 800913c:	613b      	str	r3, [r7, #16]
 800913e:	e043      	b.n	80091c8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009140:	693b      	ldr	r3, [r7, #16]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	4413      	add	r3, r2
 8009148:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009152:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009156:	d118      	bne.n	800918a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	2b00      	cmp	r3, #0
 800915c:	d10a      	bne.n	8009174 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	015a      	lsls	r2, r3, #5
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	4413      	add	r3, r2
 8009166:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800916a:	461a      	mov	r2, r3
 800916c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009170:	6013      	str	r3, [r2, #0]
 8009172:	e013      	b.n	800919c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	015a      	lsls	r2, r3, #5
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	4413      	add	r3, r2
 800917c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009180:	461a      	mov	r2, r3
 8009182:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8009186:	6013      	str	r3, [r2, #0]
 8009188:	e008      	b.n	800919c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	015a      	lsls	r2, r3, #5
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	4413      	add	r3, r2
 8009192:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009196:	461a      	mov	r2, r3
 8009198:	2300      	movs	r3, #0
 800919a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	015a      	lsls	r2, r3, #5
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	4413      	add	r3, r2
 80091a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091a8:	461a      	mov	r2, r3
 80091aa:	2300      	movs	r3, #0
 80091ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	015a      	lsls	r2, r3, #5
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	4413      	add	r3, r2
 80091b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ba:	461a      	mov	r2, r3
 80091bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80091c0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	3301      	adds	r3, #1
 80091c6:	613b      	str	r3, [r7, #16]
 80091c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ca:	693a      	ldr	r2, [r7, #16]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d3b7      	bcc.n	8009140 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091d6:	691b      	ldr	r3, [r3, #16]
 80091d8:	68fa      	ldr	r2, [r7, #12]
 80091da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80091de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80091e2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2200      	movs	r2, #0
 80091e8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80091f0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80091f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d105      	bne.n	8009204 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	f043 0210 	orr.w	r2, r3, #16
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	699a      	ldr	r2, [r3, #24]
 8009208:	4b0e      	ldr	r3, [pc, #56]	; (8009244 <USB_DevInit+0x2b4>)
 800920a:	4313      	orrs	r3, r2
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009212:	2b00      	cmp	r3, #0
 8009214:	d005      	beq.n	8009222 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	699b      	ldr	r3, [r3, #24]
 800921a:	f043 0208 	orr.w	r2, r3, #8
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009224:	2b01      	cmp	r3, #1
 8009226:	d105      	bne.n	8009234 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	699a      	ldr	r2, [r3, #24]
 800922c:	4b06      	ldr	r3, [pc, #24]	; (8009248 <USB_DevInit+0x2b8>)
 800922e:	4313      	orrs	r3, r2
 8009230:	687a      	ldr	r2, [r7, #4]
 8009232:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009234:	7dfb      	ldrb	r3, [r7, #23]
}
 8009236:	4618      	mov	r0, r3
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009240:	b004      	add	sp, #16
 8009242:	4770      	bx	lr
 8009244:	803c3800 	.word	0x803c3800
 8009248:	40000004 	.word	0x40000004

0800924c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009256:	2300      	movs	r3, #0
 8009258:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	3301      	adds	r3, #1
 800925e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	4a13      	ldr	r2, [pc, #76]	; (80092b0 <USB_FlushTxFifo+0x64>)
 8009264:	4293      	cmp	r3, r2
 8009266:	d901      	bls.n	800926c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009268:	2303      	movs	r3, #3
 800926a:	e01b      	b.n	80092a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	691b      	ldr	r3, [r3, #16]
 8009270:	2b00      	cmp	r3, #0
 8009272:	daf2      	bge.n	800925a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009278:	683b      	ldr	r3, [r7, #0]
 800927a:	019b      	lsls	r3, r3, #6
 800927c:	f043 0220 	orr.w	r2, r3, #32
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	3301      	adds	r3, #1
 8009288:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	4a08      	ldr	r2, [pc, #32]	; (80092b0 <USB_FlushTxFifo+0x64>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d901      	bls.n	8009296 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009292:	2303      	movs	r3, #3
 8009294:	e006      	b.n	80092a4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	691b      	ldr	r3, [r3, #16]
 800929a:	f003 0320 	and.w	r3, r3, #32
 800929e:	2b20      	cmp	r3, #32
 80092a0:	d0f0      	beq.n	8009284 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3714      	adds	r7, #20
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr
 80092b0:	00030d40 	.word	0x00030d40

080092b4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092b4:	b480      	push	{r7}
 80092b6:	b085      	sub	sp, #20
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	3301      	adds	r3, #1
 80092c4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4a11      	ldr	r2, [pc, #68]	; (8009310 <USB_FlushRxFifo+0x5c>)
 80092ca:	4293      	cmp	r3, r2
 80092cc:	d901      	bls.n	80092d2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092ce:	2303      	movs	r3, #3
 80092d0:	e018      	b.n	8009304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	daf2      	bge.n	80092c0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092da:	2300      	movs	r3, #0
 80092dc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	2210      	movs	r2, #16
 80092e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	3301      	adds	r3, #1
 80092e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	4a08      	ldr	r2, [pc, #32]	; (8009310 <USB_FlushRxFifo+0x5c>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d901      	bls.n	80092f6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092f2:	2303      	movs	r3, #3
 80092f4:	e006      	b.n	8009304 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	f003 0310 	and.w	r3, r3, #16
 80092fe:	2b10      	cmp	r3, #16
 8009300:	d0f0      	beq.n	80092e4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009302:	2300      	movs	r3, #0
}
 8009304:	4618      	mov	r0, r3
 8009306:	3714      	adds	r7, #20
 8009308:	46bd      	mov	sp, r7
 800930a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930e:	4770      	bx	lr
 8009310:	00030d40 	.word	0x00030d40

08009314 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009314:	b480      	push	{r7}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	78fb      	ldrb	r3, [r7, #3]
 800932e:	68f9      	ldr	r1, [r7, #12]
 8009330:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009334:	4313      	orrs	r3, r2
 8009336:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009338:	2300      	movs	r3, #0
}
 800933a:	4618      	mov	r0, r3
 800933c:	3714      	adds	r7, #20
 800933e:	46bd      	mov	sp, r7
 8009340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009344:	4770      	bx	lr

08009346 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009346:	b480      	push	{r7}
 8009348:	b085      	sub	sp, #20
 800934a:	af00      	add	r7, sp, #0
 800934c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	68fa      	ldr	r2, [r7, #12]
 800935c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009360:	f023 0303 	bic.w	r3, r3, #3
 8009364:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800936c:	685b      	ldr	r3, [r3, #4]
 800936e:	68fa      	ldr	r2, [r7, #12]
 8009370:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009374:	f043 0302 	orr.w	r3, r3, #2
 8009378:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800937a:	2300      	movs	r3, #0
}
 800937c:	4618      	mov	r0, r3
 800937e:	3714      	adds	r7, #20
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr

08009388 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8009388:	b480      	push	{r7}
 800938a:	b083      	sub	sp, #12
 800938c:	af00      	add	r7, sp, #0
 800938e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	695b      	ldr	r3, [r3, #20]
 8009394:	f003 0301 	and.w	r3, r3, #1
}
 8009398:	4618      	mov	r0, r3
 800939a:	370c      	adds	r7, #12
 800939c:	46bd      	mov	sp, r7
 800939e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a2:	4770      	bx	lr

080093a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80093a4:	b480      	push	{r7}
 80093a6:	b085      	sub	sp, #20
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80093ac:	2300      	movs	r3, #0
 80093ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	3301      	adds	r3, #1
 80093b4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	4a13      	ldr	r2, [pc, #76]	; (8009408 <USB_CoreReset+0x64>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d901      	bls.n	80093c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e01b      	b.n	80093fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	691b      	ldr	r3, [r3, #16]
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	daf2      	bge.n	80093b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80093ca:	2300      	movs	r3, #0
 80093cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	691b      	ldr	r3, [r3, #16]
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	3301      	adds	r3, #1
 80093de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4a09      	ldr	r2, [pc, #36]	; (8009408 <USB_CoreReset+0x64>)
 80093e4:	4293      	cmp	r3, r2
 80093e6:	d901      	bls.n	80093ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093e8:	2303      	movs	r3, #3
 80093ea:	e006      	b.n	80093fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	691b      	ldr	r3, [r3, #16]
 80093f0:	f003 0301 	and.w	r3, r3, #1
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	d0f0      	beq.n	80093da <USB_CoreReset+0x36>

  return HAL_OK;
 80093f8:	2300      	movs	r3, #0
}
 80093fa:	4618      	mov	r0, r3
 80093fc:	3714      	adds	r7, #20
 80093fe:	46bd      	mov	sp, r7
 8009400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009404:	4770      	bx	lr
 8009406:	bf00      	nop
 8009408:	00030d40 	.word	0x00030d40

0800940c <__libc_init_array>:
 800940c:	b570      	push	{r4, r5, r6, lr}
 800940e:	4d0d      	ldr	r5, [pc, #52]	; (8009444 <__libc_init_array+0x38>)
 8009410:	4c0d      	ldr	r4, [pc, #52]	; (8009448 <__libc_init_array+0x3c>)
 8009412:	1b64      	subs	r4, r4, r5
 8009414:	10a4      	asrs	r4, r4, #2
 8009416:	2600      	movs	r6, #0
 8009418:	42a6      	cmp	r6, r4
 800941a:	d109      	bne.n	8009430 <__libc_init_array+0x24>
 800941c:	4d0b      	ldr	r5, [pc, #44]	; (800944c <__libc_init_array+0x40>)
 800941e:	4c0c      	ldr	r4, [pc, #48]	; (8009450 <__libc_init_array+0x44>)
 8009420:	f000 f820 	bl	8009464 <_init>
 8009424:	1b64      	subs	r4, r4, r5
 8009426:	10a4      	asrs	r4, r4, #2
 8009428:	2600      	movs	r6, #0
 800942a:	42a6      	cmp	r6, r4
 800942c:	d105      	bne.n	800943a <__libc_init_array+0x2e>
 800942e:	bd70      	pop	{r4, r5, r6, pc}
 8009430:	f855 3b04 	ldr.w	r3, [r5], #4
 8009434:	4798      	blx	r3
 8009436:	3601      	adds	r6, #1
 8009438:	e7ee      	b.n	8009418 <__libc_init_array+0xc>
 800943a:	f855 3b04 	ldr.w	r3, [r5], #4
 800943e:	4798      	blx	r3
 8009440:	3601      	adds	r6, #1
 8009442:	e7f2      	b.n	800942a <__libc_init_array+0x1e>
 8009444:	080094c4 	.word	0x080094c4
 8009448:	080094c4 	.word	0x080094c4
 800944c:	080094c4 	.word	0x080094c4
 8009450:	080094c8 	.word	0x080094c8

08009454 <memset>:
 8009454:	4402      	add	r2, r0
 8009456:	4603      	mov	r3, r0
 8009458:	4293      	cmp	r3, r2
 800945a:	d100      	bne.n	800945e <memset+0xa>
 800945c:	4770      	bx	lr
 800945e:	f803 1b01 	strb.w	r1, [r3], #1
 8009462:	e7f9      	b.n	8009458 <memset+0x4>

08009464 <_init>:
 8009464:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009466:	bf00      	nop
 8009468:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800946a:	bc08      	pop	{r3}
 800946c:	469e      	mov	lr, r3
 800946e:	4770      	bx	lr

08009470 <_fini>:
 8009470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009472:	bf00      	nop
 8009474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009476:	bc08      	pop	{r3}
 8009478:	469e      	mov	lr, r3
 800947a:	4770      	bx	lr
